var $M.0: [ref]i8;

var $M.1: [ref]i32;

var $M.2: ref;

var $M.3: i32;

var $M.4: ref;

var $M.5: [ref]i8;

var $M.6: [ref]i8;

var $M.7: [ref]i32;

var $M.8: [ref]ref;

var $M.9: [ref]ref;

var $M.10: [ref]ref;

var $M.11: [ref]ref;

var $M.12: [ref]i32;

var $M.13: [ref]i32;

var $M.14: i32;

var $M.15: ref;

var $M.16: i32;

var $M.17: ref;

var $M.18: [ref]i32;

var $M.19: [ref]i32;

var $M.20: [ref]i32;

var $M.21: [ref]i32;

var $M.22: [ref]i32;

var $M.23: [ref]i32;

var $M.24: i32;

var $M.25: i32;

var $M.26: [ref]i32;

var $M.27: i32;

var $M.28: ref;

var $M.29: ref;

var $M.30: ref;

var $M.31: ref;

var $M.32: ref;

var $M.33: ref;

var $M.34: ref;

var $M.35: ref;

var $M.36: [ref]i8;

var $M.37: [ref]i8;

var $M.38: [ref]i8;

var $M.39: i32;

var $M.40: i32;

var $M.41: i32;

var $M.42: i32;

var $M.43: i32;

var $M.44: i32;

var $M.45: i32;

var $M.46: i32;

var $M.47: i32;

var $M.48: i32;

var $M.49: i32;

var $M.50: i32;

var $M.51: i32;

var $M.52: i32;

var $M.53: i32;

var $M.54: ref;

var $M.55: i32;

var $M.56: i32;

var $M.71: [ref]i8;

var $M.72: [ref]i8;

var $M.73: [ref]i8;

var $M.77: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 371891);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 1028);

const v4l_stk_ioctl_ops_group3: ref;

axiom v4l_stk_ioctl_ops_group3 == $sub.ref(0, 2060);

const v4l_stk_ioctl_ops_group0: ref;

axiom v4l_stk_ioctl_ops_group0 == $sub.ref(0, 3092);

const v4l_stk_ioctl_ops_group1: ref;

axiom v4l_stk_ioctl_ops_group1 == $sub.ref(0, 4124);

const v4l_stk_ioctl_ops_group4: ref;

axiom v4l_stk_ioctl_ops_group4 == $sub.ref(0, 5156);

const v4l_stk_ioctl_ops_group2: ref;

axiom v4l_stk_ioctl_ops_group2 == $sub.ref(0, 6188);

const stk_v4l_vm_ops_group0: ref;

axiom stk_v4l_vm_ops_group0 == $sub.ref(0, 7220);

const stk_camera_driver_group1: ref;

axiom stk_camera_driver_group1 == $sub.ref(0, 8252);

const v4l_stk_fops_group0: ref;

axiom v4l_stk_fops_group0 == $sub.ref(0, 9284);

const ldv_state_variable_6: ref;

axiom ldv_state_variable_6 == $sub.ref(0, 10312);

const ldv_state_variable_4: ref;

axiom ldv_state_variable_4 == $sub.ref(0, 11340);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 12368);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 13396);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 14424);

const ldv_state_variable_3: ref;

axiom ldv_state_variable_3 == $sub.ref(0, 15452);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 16480);

const ldv_state_variable_5: ref;

axiom ldv_state_variable_5 == $sub.ref(0, 17508);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 18536);

const ldv_retval_4: ref;

axiom ldv_retval_4 == $sub.ref(0, 19564);

const ldv_retval_3: ref;

axiom ldv_retval_3 == $sub.ref(0, 20592);

const ldv_retval_2: ref;

axiom ldv_retval_2 == $sub.ref(0, 21620);

const usb_counter: ref;

axiom usb_counter == $sub.ref(0, 22648);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 23676);

const ldv_retval_5: ref;

axiom ldv_retval_5 == $sub.ref(0, 24704);

const INTERF_STATE: ref;

axiom INTERF_STATE == $sub.ref(0, 25732);

const SERIAL_STATE: ref;

axiom SERIAL_STATE == $sub.ref(0, 26760);

const usb_intfdata: ref;

axiom usb_intfdata == $sub.ref(0, 27792);

const usb_urb: ref;

axiom usb_urb == $sub.ref(0, 28824);

const usb_dev: ref;

axiom usb_dev == $sub.ref(0, 29856);

const dev_counter: ref;

axiom dev_counter == $sub.ref(0, 30884);

const completeFnIntCounter: ref;

axiom completeFnIntCounter == $sub.ref(0, 31912);

const completeFnBulkCounter: ref;

axiom completeFnBulkCounter == $sub.ref(0, 32940);

const completeFnInt: ref;

axiom completeFnInt == $sub.ref(0, 33972);

const completeFnBulk: ref;

axiom completeFnBulk == $sub.ref(0, 35004);

const __mod_usb_device_table: ref;

axiom __mod_usb_device_table == $sub.ref(0, 36060);

const {:count 3} ov_fmt_bayer: ref;

axiom ov_fmt_bayer == $sub.ref(0, 37108);

const {:count 13} ov_fmt_rgbr: ref;

axiom ov_fmt_rgbr == $sub.ref(0, 38236);

const {:count 13} ov_fmt_rgbp: ref;

axiom ov_fmt_rgbp == $sub.ref(0, 39364);

const {:count 10} ov_fmt_yuyv: ref;

axiom ov_fmt_yuyv == $sub.ref(0, 40468);

const {:count 10} ov_fmt_uyvy: ref;

axiom ov_fmt_uyvy == $sub.ref(0, 41572);

const {:count 47} ov_initvals: ref;

axiom ov_initvals == $sub.ref(0, 42972);

const {:count 3} stkwebcam_table: ref;

axiom stkwebcam_table == $sub.ref(0, 44092);

const stk_camera_driver: ref;

axiom stk_camera_driver == $sub.ref(0, 45420);

const {:count 5} stk_sizes: ref;

axiom stk_sizes == $sub.ref(0, 46504);

const debug: ref;

axiom debug == $sub.ref(0, 47532);

const v4l_stk_ioctl_ops: ref;

axiom v4l_stk_ioctl_ops == $sub.ref(0, 49428);

const v4l_stk_fops: ref;

axiom v4l_stk_fops == $sub.ref(0, 50540);

const stk_v4l_data: ref;

axiom stk_v4l_data == $sub.ref(0, 53372);

const vflip: ref;

axiom vflip == $sub.ref(0, 54400);

const stk_upside_down_dmi_table: ref;

axiom stk_upside_down_dmi_table == $sub.ref(0, 56456);

const hflip: ref;

axiom hflip == $sub.ref(0, 57484);

const stk_ctrl_ops: ref;

axiom stk_ctrl_ops == $sub.ref(0, 58532);

const {:count 24} stk1125_initvals: ref;

axiom stk1125_initvals == $sub.ref(0, 59748);

const stk_v4l_vm_ops: ref;

axiom stk_v4l_vm_ops == $sub.ref(0, 60844);

const {:count 51} .str.56: ref;

axiom .str.56 == $sub.ref(0, 61919);

const {:count 8} .str.36: ref;

axiom .str.36 == $sub.ref(0, 62951);

const {:count 10} .str.37: ref;

axiom .str.37 == $sub.ref(0, 63985);

const {:count 35} .str.54: ref;

axiom .str.54 == $sub.ref(0, 65044);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 40} .str.8: ref;

axiom .str.8 == $sub.ref(0, 66108);

const {:count 41} .str.9: ref;

axiom .str.9 == $sub.ref(0, 67173);

const {:count 50} .str.55: ref;

axiom .str.55 == $sub.ref(0, 68247);

const {:count 35} .str.10: ref;

axiom .str.10 == $sub.ref(0, 69306);

const current_task: ref;

axiom current_task == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 46} .str.26: ref;

axiom .str.26 == $sub.ref(0, 70376);

const {:count 38} .str.27: ref;

axiom .str.27 == $sub.ref(0, 71438);

const {:count 40} .str.25: ref;

axiom .str.25 == $sub.ref(0, 72502);

const {:count 44} .str.11: ref;

axiom .str.11 == $sub.ref(0, 73570);

const {:count 44} .str.12: ref;

axiom .str.12 == $sub.ref(0, 74638);

const {:count 46} .str.13: ref;

axiom .str.13 == $sub.ref(0, 75708);

const {:count 43} .str.14: ref;

axiom .str.14 == $sub.ref(0, 76775);

const {:count 39} .str.15: ref;

axiom .str.15 == $sub.ref(0, 77838);

const {:count 25} .str.16: ref;

axiom .str.16 == $sub.ref(0, 78887);

const {:count 52} .str.17: ref;

axiom .str.17 == $sub.ref(0, 79963);

const {:count 45} .str.18: ref;

axiom .str.18 == $sub.ref(0, 81032);

const {:count 17} .str.19: ref;

axiom .str.19 == $sub.ref(0, 82073);

const {:count 52} .str.20: ref;

axiom .str.20 == $sub.ref(0, 83149);

const {:count 35} .str.21: ref;

axiom .str.21 == $sub.ref(0, 84208);

const {:count 46} .str.22: ref;

axiom .str.22 == $sub.ref(0, 85278);

const {:count 46} .str.23: ref;

axiom .str.23 == $sub.ref(0, 86348);

const {:count 63} .str.24: ref;

axiom .str.24 == $sub.ref(0, 87435);

const .str: ref;

axiom .str == $sub.ref(0, 88496);

const {:count 45} .str.1: ref;

axiom .str.1 == $sub.ref(0, 89565);

const {:count 51} .str.2: ref;

axiom .str.2 == $sub.ref(0, 90640);

const {:count 41} .str.3: ref;

axiom .str.3 == $sub.ref(0, 91705);

const {:count 67} .str.4: ref;

axiom .str.4 == $sub.ref(0, 92796);

const {:count 18} .str.53: ref;

axiom .str.53 == $sub.ref(0, 93838);

const {:count 39} .str.42: ref;

axiom .str.42 == $sub.ref(0, 94901);

const {:count 17} .str.43: ref;

axiom .str.43 == $sub.ref(0, 95942);

const {:count 33} .str.5: ref;

axiom .str.5 == $sub.ref(0, 96999);

const {:count 36} .str.6: ref;

axiom .str.6 == $sub.ref(0, 98059);

const {:count 44} .str.7: ref;

axiom .str.7 == $sub.ref(0, 99127);

const {:count 37} .str.50: ref;

axiom .str.50 == $sub.ref(0, 100188);

const {:count 7} .str.46: ref;

axiom .str.46 == $sub.ref(0, 101219);

const {:count 9} .str.47: ref;

axiom .str.47 == $sub.ref(0, 102252);

const {:count 9} .str.48: ref;

axiom .str.48 == $sub.ref(0, 103285);

const {:count 10} .str.49: ref;

axiom .str.49 == $sub.ref(0, 104319);

const {:count 4} .str.51: ref;

axiom .str.51 == $sub.ref(0, 105347);

const {:count 10} .str.52: ref;

axiom .str.52 == $sub.ref(0, 106381);

const {:count 10} .str.45: ref;

axiom .str.45 == $sub.ref(0, 107415);

const {:count 62} .str.44: ref;

axiom .str.44 == $sub.ref(0, 108501);

const {:count 29} .str.28: ref;

axiom .str.28 == $sub.ref(0, 109554);

const {:count 31} .str.29: ref;

axiom .str.29 == $sub.ref(0, 110609);

const {:count 29} .str.30: ref;

axiom .str.30 == $sub.ref(0, 111662);

const {:count 27} .str.31: ref;

axiom .str.31 == $sub.ref(0, 112713);

const {:count 25} .str.32: ref;

axiom .str.32 == $sub.ref(0, 113762);

const {:count 11} .str.33: ref;

axiom .str.33 == $sub.ref(0, 114797);

const {:count 17} .str.34: ref;

axiom .str.34 == $sub.ref(0, 115838);

const {:count 44} .str.35: ref;

axiom .str.35 == $sub.ref(0, 116906);

const {:count 37} .str.39: ref;

axiom .str.39 == $sub.ref(0, 117967);

const {:count 63} .str.40: ref;

axiom .str.40 == $sub.ref(0, 119054);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 120086);

const {:count 3} .str.1.105: ref;

axiom .str.1.105 == $sub.ref(0, 121113);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 122151);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 123179);

const __kmalloc: ref;

axiom __kmalloc == $sub.ref(0, 124211);

procedure __kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 0} {:cexpr "__kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 1} {:cexpr "__kmalloc:arg:t"} boogie_si_record_i32($i1);
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} $p2 := ldv_malloc($i0);
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 125243);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const ldv_malloc: ref;

axiom ldv_malloc == $sub.ref(0, 126275);

procedure ldv_malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_malloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3} {:cexpr "ldv_malloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 5} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 6} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 7} $p4 := malloc($i0);
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 1} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 1} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 1} true;
    call {:si_unique_call 8} __VERIFIER_assume($i7);
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    $p3 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb3;
}



const malloc: ref;

axiom malloc == $sub.ref(0, 127307);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 9} $r := $malloc($i0);
    return;
}



const stk_v4l_vm_open: ref;

axiom stk_v4l_vm_open == $sub.ref(0, 128339);

procedure stk_v4l_vm_open($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation stk_v4l_vm_open($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(168, 1));
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 128)), $mul.ref(96, 1));
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    $i6 := $add.i32($i5, 1);
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 128)), $mul.ref(96, 1));
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, $i6);
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    return;
}



const stk_v4l_vm_close: ref;

axiom stk_v4l_vm_close == $sub.ref(0, 129371);

procedure stk_v4l_vm_close($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation stk_v4l_vm_close($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $p16: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(168, 1));
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 128)), $mul.ref(96, 1));
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32($i5, 1);
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 128)), $mul.ref(96, 1));
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, $i6);
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 128)), $mul.ref(96, 1));
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, $sub.i32(0, 2));
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, $i14);
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const stk_s_ctrl: ref;

axiom stk_s_ctrl == $sub.ref(0, 130403);

procedure stk_s_ctrl($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $CurrAddr;



implementation stk_s_ctrl($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $p43: ref;
  var $i15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(32, 1));
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref($sub.ref(0, 360), 2880));
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(64, 1));
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i6, 9963796);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i6, 9963797);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i6, 9963797);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 22);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb6:
    assume $i9 == 1;
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    call {:si_unique_call 12} $i30 := dmi_check_system(stk_upside_down_dmi_table);
    call {:si_unique_call 13} {:cexpr "tmp___1"} boogie_si_record_i32($i30);
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i31 == 1);
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p3, $mul.ref($sub.ref(0, 360), 2880)), $mul.ref(2628, 1)), $mul.ref(12, 1));
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p43, $i41);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb11;

  $bb15:
    assume $i31 == 1;
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 0);
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    $i36 := $zext.i1.i32($i35);
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p3, $mul.ref($sub.ref(0, 360), 2880)), $mul.ref(2628, 1)), $mul.ref(12, 1));
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p38, $i36);
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} $i16 := dmi_check_system(stk_upside_down_dmi_table);
    call {:si_unique_call 11} {:cexpr "tmp___0"} boogie_si_record_i32($i16);
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i17 == 1);
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p3, $mul.ref($sub.ref(0, 360), 2880)), $mul.ref(2628, 1)), $mul.ref(8, 1));
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, $i27);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb11;

  $bb12:
    assume $i17 == 1;
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 0);
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    $i22 := $zext.i1.i32($i21);
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p3, $mul.ref($sub.ref(0, 360), 2880)), $mul.ref(2628, 1)), $mul.ref(8, 1));
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, $i22);
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb2:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i6, 9963776);
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb8;

  $bb9:
    assume $i10 == 1;
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} $i14 := stk_sensor_set_brightness($p4, $i13);
    call {:si_unique_call 15} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    $i15 := $i14;
    goto $bb11;
}



const stk_sensor_set_brightness: ref;

axiom stk_sensor_set_brightness == $sub.ref(0, 131435);

procedure stk_sensor_set_brightness($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation stk_sensor_set_brightness($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i1;
  var $i3: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i8;
  var $i9: i32;
  var $i10: i8;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i8;
  var $i16: i32;
  var $i17: i8;
  var $i4: i32;
  var vslice_dummy_var_23: i32;
  var vslice_dummy_var_24: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} {:cexpr "stk_sensor_set_brightness:arg:br"} boogie_si_record_i32($i1);
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i1, 0);
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i2 == 1);
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    $i3 := $sgt.i32($i1, 255);
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i5 := $add.i32($i1, $sub.i32(0, 6));
    call {:si_unique_call 17} {:cexpr "_max2"} boogie_si_record_i32($i5);
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    $i6 := $sgt.i32(0, $i5);
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i6 == 1);
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    $i7 := $i5;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i8($i7);
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i8($i9);
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 18} vslice_dummy_var_23 := stk_sensor_outb($p0, 37, $i10);
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    $i12 := $add.i32($i1, 6);
    call {:si_unique_call 19} {:cexpr "_min2"} boogie_si_record_i32($i12);
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32(255, $i12);
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i13 == 1);
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    $i14 := $i12;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i8($i14);
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i8($i16);
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 20} vslice_dummy_var_24 := stk_sensor_outb($p0, 36, $i17);
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb11:
    assume $i13 == 1;
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    $i14 := 255;
    goto $bb13;

  $bb8:
    assume $i6 == 1;
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb10;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb2;
}



const dmi_check_system: ref;

axiom dmi_check_system == $sub.ref(0, 132467);

procedure dmi_check_system($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dmi_check_system($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 1} true;
    call {:si_unique_call 21} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 22} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const stk_sensor_outb: ref;

axiom stk_sensor_outb == $sub.ref(0, 133499);

procedure stk_sensor_outb($p0: ref, $i1: i8, $i2: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation stk_sensor_outb($p0: ref, $i1: i8, $i2: i8) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i8;
  var $i6: i32;
  var $i7: i1;
  var $i9: i32;
  var $i10: i8;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i1;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $i17: i32;
  var $i21: i32;
  var $i22: i32;
  var $i23: i1;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $i8: i32;
  var vslice_dummy_var_25: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 24} {:cexpr "stk_sensor_outb:arg:reg"} boogie_si_record_i8($i1);
    call {:si_unique_call 25} {:cexpr "stk_sensor_outb:arg:val"} boogie_si_record_i8($i2);
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p3, 0);
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i1);
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i32.i8($i4);
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} $i6 := stk_camera_write_reg($p0, 516, $i5);
    call {:si_unique_call 27} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i2);
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i8($i9);
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} $i11 := stk_camera_write_reg($p0, 517, $i10);
    call {:si_unique_call 29} {:cexpr "tmp___0"} boogie_si_record_i32($i11);
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} $i13 := stk_camera_write_reg($p0, 512, 5);
    call {:si_unique_call 31} {:cexpr "tmp___1"} boogie_si_record_i32($i13);
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} $i15 := stk_camera_read_reg($p0, 513, $p3);
    call {:si_unique_call 33} {:cexpr "tmp___2"} boogie_si_record_i32($i15);
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb13;

  $bb13:
    assume !($i16 == 1);
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb14;

  $bb14:
    call $i18, $i19, $i20, $i17, $i21, $i22, $i23, $i24 := stk_sensor_outb_loop_$bb14($p0, $p3, $i18, $i19, $i20, $i17, $i21, $i22, $i23, $i24);
    goto $bb14_last;

  $bb18:
    assume {:verifier.code 0} true;
    $i21 := $add.i32($i17, 1);
    call {:si_unique_call 36} {:cexpr "i"} boogie_si_record_i32($i21);
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.1, $p3);
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 0);
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.1, $p3);
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 4);
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i26 == 1);
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb24:
    assume $i26 == 1;
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.1, $p3);
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb3;

  $bb26:
    assume $i28 == 1;
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.1, $p3);
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} vslice_dummy_var_25 := printk.ref.i32(.str.56, $i29);
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb19:
    assume $i23 == 1;
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    $i24 := $sle.i32($i21, 49);
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    $i18 := $i21;
    assume true;
    goto $bb15, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb21;

  $bb15:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} $i19 := stk_camera_read_reg($p0, 513, $p3);
    call {:si_unique_call 35} {:cexpr "tmp___2"} boogie_si_record_i32($i19);
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i17 := $i18;
    goto $bb17_dummy;

  $bb16:
    assume $i20 == 1;
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb3;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb12;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb3;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb3;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb3;

  $bb17_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb18;
}



const stk_camera_write_reg: ref;

axiom stk_camera_write_reg == $sub.ref(0, 134531);

procedure stk_camera_write_reg($p0: ref, $i1: i16, $i2: i8) returns ($r: i32);
  free requires assertsPassed;



implementation stk_camera_write_reg($p0: ref, $i1: i16, $i2: i8) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i16;
  var $i9: i32;
  var $i10: i16;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} {:cexpr "stk_camera_write_reg:arg:index"} boogie_si_record_i16($i1);
    call {:si_unique_call 39} {:cexpr "stk_camera_write_reg:arg:value"} boogie_si_record_i8($i2);
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2416, 1));
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} $i5 := __create_pipe($p4, 0);
    call {:si_unique_call 41} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    $i6 := $or.i32($i5, $sub.i32(0, 2147483648));
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i2);
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i16($i7);
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i1);
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i16($i9);
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} $i11 := usb_control_msg($p4, $i6, 1, 64, $i8, $i10, $0.ref, 0, 500);
    call {:si_unique_call 43} {:cexpr "ret"} boogie_si_record_i32($i11);
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i11, 0);
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    $i13 := $i11;
    goto $bb3;
}



const stk_camera_read_reg: ref;

axiom stk_camera_read_reg == $sub.ref(0, 135563);

procedure stk_camera_read_reg($p0: ref, $i1: i16, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation stk_camera_read_reg($p0: ref, $i1: i16, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i16;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} {:cexpr "stk_camera_read_reg:arg:index"} boogie_si_record_i16($i1);
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2416, 1));
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} $i5 := __create_pipe($p4, 0);
    call {:si_unique_call 46} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    $i6 := $or.i32($i5, $sub.i32(0, 2147483520));
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i1);
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i16($i7);
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p2);
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 47} $i10 := usb_control_msg($p4, $i6, 0, $sub.i8(0, 64), 0, $i8, $p9, 1, 500);
    call {:si_unique_call 48} {:cexpr "ret"} boogie_si_record_i32($i10);
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i10, 0);
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    $i12 := $i10;
    goto $bb3;
}



const printk: ref;

axiom printk == $sub.ref(0, 136595);

procedure printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 1} true;
    call {:si_unique_call 49} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 50} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 1} true;
    call {:si_unique_call 51} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 52} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 1} true;
    call {:si_unique_call 53} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 54} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 1} true;
    call {:si_unique_call 55} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 56} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i32($p0: ref, p.1: i32, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i32($p0: ref, p.1: i32, p.2: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb4:
    assume {:verifier.code 1} true;
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 1} true;
    call {:si_unique_call 57} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 58} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __create_pipe: ref;

axiom __create_pipe == $sub.ref(0, 137627);

procedure __create_pipe($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __create_pipe($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} {:cexpr "__create_pipe:arg:endpoint"} boogie_si_record_i32($i1);
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1992)), $mul.ref(0, 1));
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    $i4 := $shl.i32($i3, 8);
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    $i5 := $shl.i32($i1, 15);
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    $i6 := $or.i32($i4, $i5);
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const usb_control_msg: ref;

axiom usb_control_msg == $sub.ref(0, 138659);

procedure usb_control_msg($p0: ref, $i1: i32, $i2: i8, $i3: i8, $i4: i16, $i5: i16, $p6: ref, $i7: i16, $i8: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usb_control_msg($p0: ref, $i1: i32, $i2: i8, $i3: i8, $i4: i16, $i5: i16, $p6: ref, $i7: i16, $i8: i32) returns ($r: i32)
{
  var $i9: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 60} {:cexpr "usb_control_msg:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 61} {:cexpr "usb_control_msg:arg:arg2"} boogie_si_record_i8($i2);
    call {:si_unique_call 62} {:cexpr "usb_control_msg:arg:arg3"} boogie_si_record_i8($i3);
    call {:si_unique_call 63} {:cexpr "usb_control_msg:arg:arg4"} boogie_si_record_i16($i4);
    call {:si_unique_call 64} {:cexpr "usb_control_msg:arg:arg5"} boogie_si_record_i16($i5);
    call {:si_unique_call 65} {:cexpr "usb_control_msg:arg:arg7"} boogie_si_record_i16($i7);
    call {:si_unique_call 66} {:cexpr "usb_control_msg:arg:arg8"} boogie_si_record_i32($i8);
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 1} true;
    call {:si_unique_call 67} $i9 := __VERIFIER_nondet_int();
    call {:si_unique_call 68} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i9);
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const stk_v4l_dev_release: ref;

axiom stk_v4l_dev_release == $sub.ref(0, 139691);

procedure stk_v4l_dev_release($p0: ref);
  free requires assertsPassed;
  modifies $M.2;



implementation stk_v4l_dev_release($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var vslice_dummy_var_26: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 608), 2880));
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 608), 2880)), $mul.ref(2832, 1));
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 608), 2880)), $mul.ref(2808, 1));
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 608), 2880)), $mul.ref(2424, 1));
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 70} ldv_usb_put_intf_9($p13);
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p2);
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 71} kfree($p14);
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 69} vslice_dummy_var_26 := printk.ref(.str.54);
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const ldv_usb_put_intf_9: ref;

axiom ldv_usb_put_intf_9 == $sub.ref(0, 140723);

procedure ldv_usb_put_intf_9($p0: ref);
  free requires assertsPassed;
  modifies $M.2;



implementation ldv_usb_put_intf_9($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 72} ldv_usb_put_intf();
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    return;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 141755);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 73} free_($p0);
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 142787);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 74} $free($p0);
    return;
}



const ldv_usb_put_intf: ref;

axiom ldv_usb_put_intf == $sub.ref(0, 143819);

procedure ldv_usb_put_intf();
  free requires assertsPassed;
  modifies $M.2;



implementation ldv_usb_put_intf()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    $M.2 := $0.ref;
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    return;
}



const v4l_stk_read: ref;

axiom v4l_stk_read == $sub.ref(0, 144851);

procedure v4l_stk_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.7, $M.8, $M.9, $M.10, $M.11, $CurrAddr, $M.5, $M.1, $M.4, $M.14, $M.16, $M.2;



implementation v4l_stk_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i10: i64;
  var $i11: i32;
  var $p12: ref;
  var $i13: i64;
  var $i9: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 75} {:cexpr "v4l_stk_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 76} $p4 := video_drvdata($p0);
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 2880)), $mul.ref(2448, 1));
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 77} $i7 := mutex_lock_interruptible_nested($p6, 0);
    call {:si_unique_call 78} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 79} $i10 := stk_read($p0, $p1, $i2, $p3);
    call {:si_unique_call 80} {:cexpr "tmp___1"} boogie_si_record_i64($i10);
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i64.i32($i10);
    call {:si_unique_call 81} {:cexpr "ret"} boogie_si_record_i32($i11);
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 2880)), $mul.ref(2448, 1));
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 82} mutex_unlock($p12);
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i11);
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    $i9 := $i13;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    $i9 := $sub.i64(0, 512);
    goto $bb3;
}



const v4l_stk_poll: ref;

axiom v4l_stk_poll == $sub.ref(0, 145883);

procedure v4l_stk_poll($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation v4l_stk_poll($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 83} $p2 := video_drvdata($p0);
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 84} $i4 := v4l2_ctrl_poll($p0, $p1);
    call {:si_unique_call 85} {:cexpr "tmp___0"} boogie_si_record_i32($i4);
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 2880)), $mul.ref(2720, 1));
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 86} poll_wait($p0, $p5, $p1);
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 2880)), $mul.ref(2644, 1));
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 1);
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 2880)), $mul.ref(2856, 1));
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 87} $i12 := list_empty($p11);
    call {:si_unique_call 88} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i10 := $i4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    $i14 := $or.i32($i4, 65);
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    $i10 := $i14;
    goto $bb3;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    $i10 := 8;
    goto $bb3;
}



const video_ioctl2: ref;

axiom video_ioctl2 == $sub.ref(0, 146915);

procedure video_ioctl2($p0: ref, $i1: i32, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation video_ioctl2($p0: ref, $i1: i32, $i2: i64) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 89} {:cexpr "video_ioctl2:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 90} {:cexpr "video_ioctl2:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 1} true;
    call {:si_unique_call 91} $i3 := __VERIFIER_nondet_long();
    call {:si_unique_call 92} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i3);
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const v4l_stk_mmap: ref;

axiom v4l_stk_mmap == $sub.ref(0, 147947);

procedure v4l_stk_mmap($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation v4l_stk_mmap($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i64;
  var $i29: i1;
  var $i30: i32;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $p34: ref;
  var $i36: i32;
  var $i37: i32;
  var $i38: i1;
  var $i19: i32;
  var $p35: ref;
  var $i39: i64;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $i46: i64;
  var $i47: i64;
  var $p48: ref;
  var $p50: ref;
  var $p51: ref;
  var $p53: ref;
  var $i54: i32;
  var $i55: i32;
  var $p57: ref;
  var $i15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(152, 1));
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.0, $p2);
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    $i4 := $shl.i64($i3, 12);
    call {:si_unique_call 93} {:cexpr "offset"} boogie_si_record_i64($i4);
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 94} $p5 := video_drvdata($p0);
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(80, 1));
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.0, $p7);
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    $i9 := $and.i64($i8, 2);
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i10 == 1);
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(80, 1));
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    $i12 := $load.i64($M.0, $p11);
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    $i13 := $and.i64($i12, 8);
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p6, $mul.ref(0, 2880)), $mul.ref(2824, 1));
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $i18 := $ugt.i32($i17, 0);
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p35 := $0.ref;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p35);
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    $i40 := $eq.i64($i39, 0);
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p35, $mul.ref(0, 128)), $mul.ref(88, 1));
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 96} $i43 := remap_vmalloc_range($p1, $p42, 0);
    call {:si_unique_call 97} {:cexpr "ret"} boogie_si_record_i32($i43);
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(80, 1));
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    $i46 := $load.i64($M.0, $p45);
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    $i47 := $or.i64($i46, 262144);
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(80, 1));
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p48, $i47);
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(168, 1));
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p50, $p35);
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(144, 1));
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p51, stk_v4l_vm_ops);
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p35, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p53);
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    $i55 := $or.i32($i54, 1);
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p35, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p57, $i55);
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 98} stk_v4l_vm_open($p1);
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb23:
    assume $i44 == 1;
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    $i15 := $i43;
    goto $bb6;

  $bb20:
    assume $i40 == 1;
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 22);
    goto $bb6;

  $bb8:
    assume $i18 == 1;
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb11;

  $bb11:
    call $p20, $p21, $i22, $p25, $p26, $i27, $i28, $i29, $i30, $i36, $i37, $i38, $i19 := v4l_stk_mmap_loop_$bb11($i4, $p6, $p16, $p20, $p21, $i22, $p25, $p26, $i27, $i28, $i29, $i30, $i36, $i37, $i38, $i19);
    goto $bb11_last;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p6, $mul.ref(0, 2880)), $mul.ref(2832, 1));
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    $i22 := $zext.i32.i64($i19);
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p21, $mul.ref($i22, 128)), $mul.ref(0, 1)), $mul.ref(64, 1));
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    $i28 := $zext.i32.i64($i27);
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    $i29 := $eq.i64($i28, $i4);
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    $i30 := $i19;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i36 := $add.i32($i19, 1);
    call {:si_unique_call 95} {:cexpr "i"} boogie_si_record_i32($i36);
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p16);
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    $i38 := $ugt.i32($i37, $i36);
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i38 == 1);
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb17:
    assume $i38 == 1;
    assume {:verifier.code 0} true;
    $i19 := $i36;
    goto $bb17_dummy;

  $bb13:
    assume $i29 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p6, $mul.ref(0, 2880)), $mul.ref(2832, 1));
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    $i33 := $zext.i32.i64($i30);
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($p32, $mul.ref($i33, 128));
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    $p35 := $p34;
    goto $bb15;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb2;

  $bb17_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_350;
}



const v4l_stk_open: ref;

axiom v4l_stk_open == $sub.ref(0, 148979);

procedure v4l_stk_open($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3;



implementation v4l_stk_open($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p23: ref;
  var $i9: i32;
  var vslice_dummy_var_27: i32;
  var vslice_dummy_var_28: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 99} $p1 := video_drvdata($p0);
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i4 == 1);
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 2880)), $mul.ref(2644, 1));
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 1);
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 2880)), $mul.ref(2448, 1));
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 100} $i11 := mutex_lock_interruptible_nested($p10, 0);
    call {:si_unique_call 101} {:cexpr "tmp___0"} boogie_si_record_i32($i11);
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 2880)), $mul.ref(2616, 1));
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 0);
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i15 == 1);
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 2880)), $mul.ref(2616, 1));
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, 0);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 103} $i18 := v4l2_fh_open($p0);
    call {:si_unique_call 104} {:cexpr "err"} boogie_si_record_i32($i18);
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 0);
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 2880)), $mul.ref(2448, 1));
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 106} mutex_unlock($p23);
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    $i9 := $i18;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb14:
    assume $i19 == 1;
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 2880)), $mul.ref(2424, 1));
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 105} vslice_dummy_var_28 := ldv_usb_autopm_get_interface_7($p21);
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume $i15 == 1;
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 102} vslice_dummy_var_27 := stk_camera_write_reg($p2, 0, 36);
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i12 == 1;
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 512);
    goto $bb6;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 6);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb2;
}



const v4l_stk_release: ref;

axiom v4l_stk_release == $sub.ref(0, 150011);

procedure v4l_stk_release($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.3, $CurrAddr, $M.5, $M.4, assertsPassed;



implementation v4l_stk_release($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var vslice_dummy_var_29: i32;
  var vslice_dummy_var_30: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 107} $p1 := video_drvdata($p0);
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 2880)), $mul.ref(2448, 1));
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 108} mutex_lock_nested($p3, 0);
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 2880)), $mul.ref(2440, 1));
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p0);
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i6, $i7);
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 2880)), $mul.ref(2644, 1));
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    $i18 := $and.i32($i17, 1);
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 2880)), $mul.ref(2448, 1));
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 113} mutex_unlock($p22);
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 114} $i23 := v4l2_fh_release($p0);
    call {:si_unique_call 115} {:cexpr "tmp___0"} boogie_si_record_i32($i23);
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    $r := $i23;
    return;

  $bb4:
    assume $i19 == 1;
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 2880)), $mul.ref(2424, 1));
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 112} ldv_usb_autopm_put_interface_8($p21);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_1:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 109} vslice_dummy_var_29 := stk_stop_stream($p2);
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 110} stk_free_buffers($p2);
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 111} vslice_dummy_var_30 := stk_camera_write_reg($p2, 0, 73);
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 2880)), $mul.ref(2644, 1));
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i12, $sub.i32(0, 3));
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 2880)), $mul.ref(2644, 1));
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, $i13);
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 2880)), $mul.ref(2440, 1));
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p15, $0.ref);
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const video_drvdata: ref;

axiom video_drvdata == $sub.ref(0, 151043);

procedure video_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation video_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 116} $p1 := video_devdata($p0);
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 117} $p2 := video_get_drvdata($p1);
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const mutex_lock_nested: ref;

axiom mutex_lock_nested == $sub.ref(0, 152075);

procedure mutex_lock_nested($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation mutex_lock_nested($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 118} {:cexpr "mutex_lock_nested:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    return;
}



const stk_stop_stream: ref;

axiom stk_stop_stream == $sub.ref(0, 153107);

procedure stk_stop_stream($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $CurrAddr, $M.5;



implementation stk_stop_stream($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i7: i32;
  var $i8: i8;
  var $i9: i32;
  var $i10: i32;
  var $i11: i8;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $i36: i32;
  var $i37: i1;
  var $p39: ref;
  var $p40: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $i45: i1;
  var $p46: ref;
  var $p47: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i64;
  var $i57: i1;
  var $p58: ref;
  var $p59: ref;
  var $p61: ref;
  var $p62: ref;
  var vslice_dummy_var_31: i32;
  var vslice_dummy_var_32: i32;
  var vslice_dummy_var_33: i32;
  var vslice_dummy_var_34: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 119} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2644, 1));
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 1);
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 120} vslice_dummy_var_31 := stk_camera_read_reg($p0, 256, $p1);
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.1, $p1);
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i8($i7);
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 127);
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i8($i10);
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 121} vslice_dummy_var_32 := stk_camera_write_reg($p0, 256, $i11);
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2808, 1));
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2644, 1));
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i28, $sub.i32(0, 9));
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2644, 1));
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, $i29);
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2416, 1));
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 123} $i33 := usb_set_interface($p32, 0, 0);
    call {:si_unique_call 124} {:cexpr "tmp"} boogie_si_record_i32($i33);
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 126} $i36 := stk_sensor_sleep($p0);
    call {:si_unique_call 127} {:cexpr "tmp___0"} boogie_si_record_i32($i36);
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume $i37 == 1;
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 128} vslice_dummy_var_34 := printk.ref(.str.9);
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume $i34 == 1;
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 125} vslice_dummy_var_33 := printk.ref(.str.8);
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb3:
    assume $i16 == 1;
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2808, 1));
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2808, 1));
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p40, $mul.ref(1, 24)), $mul.ref(16, 1));
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p43);
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    $i45 := $ne.i64($i44, 0);
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2808, 1));
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p52, $mul.ref(2, 24)), $mul.ref(16, 1));
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    $i56 := $p2i.ref.i64($p55);
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    $i57 := $ne.i64($i56, 0);
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb24:
    assume $i57 == 1;
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2808, 1));
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p59, $mul.ref(2, 24)), $mul.ref(16, 1));
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 130} usb_kill_urb($p62);
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb20:
    assume $i45 == 1;
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2808, 1));
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p47, $mul.ref(1, 24)), $mul.ref(16, 1));
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 129} usb_kill_urb($p50);
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb7:
    assume $i22 == 1;
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2808, 1));
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 122} usb_kill_urb($p26);
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    goto $bb9;
}



const stk_free_buffers: ref;

axiom stk_free_buffers == $sub.ref(0, 154139);

procedure stk_free_buffers($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.4;



implementation stk_free_buffers($p0: ref)
{
  var vslice_dummy_var_35: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} stk_clean_iso($p0);
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 132} vslice_dummy_var_35 := stk_free_sio_buffers($p0);
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_autopm_put_interface_8: ref;

axiom ldv_usb_autopm_put_interface_8 == $sub.ref(0, 155171);

procedure ldv_usb_autopm_put_interface_8($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_usb_autopm_put_interface_8($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 133} ldv_put_interface();
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_4:
    assume !assertsPassed;
    return;
}



const mutex_unlock: ref;

axiom mutex_unlock == $sub.ref(0, 156203);

procedure mutex_unlock($p0: ref);
  free requires assertsPassed;



implementation mutex_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    return;
}



const v4l2_fh_release: ref;

axiom v4l2_fh_release == $sub.ref(0, 157235);

procedure v4l2_fh_release($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation v4l2_fh_release($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 1} true;
    call {:si_unique_call 134} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 135} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_put_interface: ref;

axiom ldv_put_interface == $sub.ref(0, 158267);

procedure ldv_put_interface();
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_put_interface()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    $i0 := $M.3;
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    $i1 := $sgt.i32($i0, 0);
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 136} ldv_error();
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i2 := $M.3;
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32($i2, 1);
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    $M.3 := $i3;
    call {:si_unique_call 137} {:cexpr "INTERF_STATE"} boogie_si_record_i32($i3);
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 159299);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 138} __VERIFIER_error();
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_10:
    assume !assertsPassed;
    return;
}



const stk_clean_iso: ref;

axiom stk_clean_iso == $sub.ref(0, 160331);

procedure stk_clean_iso($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.4;



implementation stk_clean_iso($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $i7: i32;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i32;
  var $p38: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i2 == 1);
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2808, 1));
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb8;

  $bb8:
    call $p8, $p9, $i10, $p12, $p13, $i14, $i15, $p16, $i17, $i18, $p19, $i20, $i21, $i22, $p23, $p24, $i25, $p27, $p28, $i29, $i30, $i7 := stk_clean_iso_loop_$bb8($p0, $p8, $p9, $i10, $p12, $p13, $i14, $i15, $p16, $i17, $i18, $p19, $i20, $i21, $i22, $p23, $p24, $i25, $p27, $p28, $i29, $i30, $i7);
    goto $bb8_last;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2808, 1));
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i7);
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p9, $mul.ref($i10, 24)), $mul.ref(16, 1));
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2808, 1));
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i7);
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p24, $mul.ref($i25, 24)), $mul.ref(0, 1));
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 143} kfree($p28);
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    $i29 := $add.i32($i7, 1);
    call {:si_unique_call 144} {:cexpr "i"} boogie_si_record_i32($i29);
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    $i30 := $sle.i32($i29, 2);
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2808, 1));
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 145} kfree($p33);
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2808, 1));
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p34, $0.ref);
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2644, 1));
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    $i37 := $and.i32($i36, $sub.i32(0, 5));
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2644, 1));
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p38, $i37);
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb19:
    assume $i30 == 1;
    assume {:verifier.code 0} true;
    $i7 := $i29;
    goto $bb19_dummy;

  $bb10:
    assume $i15 == 1;
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2624, 1));
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 139} $i17 := atomic_read($p16);
    call {:si_unique_call 140} {:cexpr "tmp"} boogie_si_record_i32($i17);
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 142} ldv_usb_free_urb_6($p13);
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb12:
    assume $i18 == 1;
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2644, 1));
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i20, 1);
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb14;

  $bb15:
    assume $i22 == 1;
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 141} usb_kill_urb($p13);
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb2;

  $bb19_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_612;
}



const stk_free_sio_buffers: ref;

axiom stk_free_sio_buffers == $sub.ref(0, 161363);

procedure stk_free_sio_buffers($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation stk_free_sio_buffers($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $i12: i32;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $p30: ref;
  var $p31: ref;
  var $i32: i1;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $i41: i1;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $p46: ref;
  var $p47: ref;
  var $i48: i32;
  var $i49: i1;
  var $i33: i32;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2824, 1));
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i3 == 1);
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2832, 1));
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2824, 1));
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    $i11 := $ult.i32(0, $i10);
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2648, 1));
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 147} $p24 := spinlock_check($p23);
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 148} $i25 := _raw_spin_lock_irqsave($p24);
    call {:si_unique_call 149} {:cexpr "flags"} boogie_si_record_i64($i25);
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2840, 1));
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 150} INIT_LIST_HEAD($p26);
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2856, 1));
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} INIT_LIST_HEAD($p27);
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2824, 1));
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    call {:si_unique_call 152} {:cexpr "nbufs"} boogie_si_record_i32($i29);
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2824, 1));
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, 0);
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2648, 1));
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 153} spin_unlock_irqrestore($p31, $i25);
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    $i32 := $slt.i32(0, $i29);
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2832, 1));
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} kfree($p52);
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2832, 1));
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p53, $0.ref);
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb19:
    assume $i32 == 1;
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    $i33 := 0;
    goto $bb22;

  $bb22:
    call $p34, $p35, $i36, $p38, $p39, $i40, $i41, $p42, $p43, $i44, $p46, $p47, $i48, $i49, $i33 := stk_free_sio_buffers_loop_$bb22($p0, $i29, $p34, $p35, $i36, $p38, $p39, $i40, $i41, $p42, $p43, $i44, $p46, $p47, $i48, $i49, $i33);
    goto $bb22_last;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2832, 1));
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    $i36 := $sext.i32.i64($i33);
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p35, $mul.ref($i36, 128)), $mul.ref(88, 1));
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p39);
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    $i41 := $ne.i64($i40, 0);
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i48 := $add.i32($i33, 1);
    call {:si_unique_call 155} {:cexpr "i"} boogie_si_record_i32($i48);
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    $i49 := $slt.i32($i48, $i29);
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i49 == 1);
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb27:
    assume $i49 == 1;
    assume {:verifier.code 0} true;
    $i33 := $i48;
    goto $bb27_dummy;

  $bb24:
    assume $i41 == 1;
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2832, 1));
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    $i44 := $sext.i32.i64($i33);
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p43, $mul.ref($i44, 128)), $mul.ref(88, 1));
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} vfree($p47);
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb8:
    assume $i11 == 1;
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb11;

  $bb11:
    call $p13, $p14, $i15, $p17, $i18, $i19, $i20, $i21, $i22, $i12 := stk_free_sio_buffers_loop_$bb11($p0, $p9, $p13, $p14, $i15, $p17, $i18, $i19, $i20, $i21, $i22, $i12);
    goto $bb11_last;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2832, 1));
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i12);
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p14, $mul.ref($i15, 128)), $mul.ref(96, 1));
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    $i19 := $sgt.i32($i18, 0);
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i20 := $add.i32($i12, 1);
    call {:si_unique_call 146} {:cexpr "i"} boogie_si_record_i32($i20);
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p9);
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    $i22 := $ult.i32($i20, $i21);
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i22 == 1);
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb16:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    $i12 := $i20;
    goto $bb16_dummy;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 16);
    goto $bb6;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;

  $bb27_dummy:
    assume false;
    return;

  $bb22_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_715;

  $bb16_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_680;
}



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 162395);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const _raw_spin_lock_irqsave: ref;

axiom _raw_spin_lock_irqsave == $sub.ref(0, 163427);

procedure _raw_spin_lock_irqsave($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation _raw_spin_lock_irqsave($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 1} true;
    call {:si_unique_call 157} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 158} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0, 164459);

procedure INIT_LIST_HEAD($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $p0);
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p0);
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    return;
}



const spin_unlock_irqrestore: ref;

axiom spin_unlock_irqrestore == $sub.ref(0, 165491);

procedure spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation spin_unlock_irqrestore($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} {:cexpr "spin_unlock_irqrestore:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} _raw_spin_unlock_irqrestore($p3, $i1);
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    return;
}



const vfree: ref;

axiom vfree == $sub.ref(0, 166523);

procedure vfree($p0: ref);
  free requires assertsPassed;



implementation vfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irqrestore: ref;

axiom _raw_spin_unlock_irqrestore == $sub.ref(0, 167555);

procedure _raw_spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation _raw_spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 161} {:cexpr "_raw_spin_unlock_irqrestore:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    return;
}



const atomic_read: ref;

axiom atomic_read == $sub.ref(0, 168587);

procedure atomic_read($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_read($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const usb_kill_urb: ref;

axiom usb_kill_urb == $sub.ref(0, 169619);

procedure usb_kill_urb($p0: ref);
  free requires assertsPassed;



implementation usb_kill_urb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_free_urb_6: ref;

axiom ldv_usb_free_urb_6 == $sub.ref(0, 170651);

procedure ldv_usb_free_urb_6($p0: ref);
  free requires assertsPassed;
  modifies $M.4;



implementation ldv_usb_free_urb_6($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} ldv_free_urb($p0);
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    return;
}



const ldv_free_urb: ref;

axiom ldv_free_urb == $sub.ref(0, 171683);

procedure ldv_free_urb($p0: ref);
  free requires assertsPassed;
  modifies $M.4;



implementation ldv_free_urb($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    $p1 := $M.4;
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i2, $i3);
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    $p5 := $M.4;
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    $M.4 := $0.ref;
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const usb_set_interface: ref;

axiom usb_set_interface == $sub.ref(0, 172715);

procedure usb_set_interface($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usb_set_interface($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 163} {:cexpr "usb_set_interface:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 164} {:cexpr "usb_set_interface:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 1} true;
    call {:si_unique_call 165} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 166} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const stk_sensor_sleep: ref;

axiom stk_sensor_sleep == $sub.ref(0, 173747);

procedure stk_sensor_sleep($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.5, $CurrAddr;



implementation stk_sensor_sleep($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i5: i8;
  var $i6: i32;
  var $i7: i32;
  var $i8: i8;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 167} $p1 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} $i2 := stk_sensor_inb($p0, 9, $p1);
    call {:si_unique_call 169} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.5, $p1);
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    $i7 := $or.i32($i6, 16);
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i8($i7);
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 170} $i9 := stk_sensor_outb($p0, 9, $i8);
    call {:si_unique_call 171} {:cexpr "tmp___1"} boogie_si_record_i32($i9);
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i4 := $i11;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    $i11 := 1;
    goto $bb6;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    $i4 := 1;
    goto $bb3;
}



const stk_sensor_inb: ref;

axiom stk_sensor_inb == $sub.ref(0, 174779);

procedure stk_sensor_inb($p0: ref, $i1: i8, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.5, $CurrAddr;



implementation stk_sensor_inb($p0: ref, $i1: i8, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i8;
  var $i6: i32;
  var $i7: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $i13: i32;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $i20: i1;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $i30: i8;
  var $i8: i32;
  var vslice_dummy_var_36: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 172} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 173} {:cexpr "stk_sensor_inb:arg:reg"} boogie_si_record_i8($i1);
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p3, 0);
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i1);
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i32.i8($i4);
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} $i6 := stk_camera_write_reg($p0, 520, $i5);
    call {:si_unique_call 175} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 176} $i9 := stk_camera_write_reg($p0, 512, 112);
    call {:si_unique_call 177} {:cexpr "tmp___0"} boogie_si_record_i32($i9);
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 178} $i11 := stk_camera_read_reg($p0, 513, $p3);
    call {:si_unique_call 179} {:cexpr "tmp___1"} boogie_si_record_i32($i11);
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i12 == 1);
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb11;

  $bb11:
    call $i14, $i15, $i16, $i13, $i17, $i18, $i19, $i20 := stk_sensor_inb_loop_$bb11($p0, $p3, $i14, $i15, $i16, $i13, $i17, $i18, $i19, $i20);
    goto $bb11_last;

  $bb15:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i13, 1);
    call {:si_unique_call 182} {:cexpr "i"} boogie_si_record_i32($i17);
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.1, $p3);
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 0);
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.1, $p3);
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 1);
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 184} $i27 := stk_camera_read_reg($p0, 521, $p3);
    call {:si_unique_call 185} {:cexpr "tmp___2"} boogie_si_record_i32($i27);
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.1, $p3);
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i32.i8($i29);
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p2, $i30);
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb27:
    assume $i28 == 1;
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb3;

  $bb21:
    assume $i22 == 1;
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.1, $p3);
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb3;

  $bb23:
    assume $i24 == 1;
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.1, $p3);
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 183} vslice_dummy_var_36 := printk.ref.i32(.str.55, $i25);
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb16:
    assume $i19 == 1;
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    $i20 := $sle.i32($i17, 49);
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    $i14 := $i17;
    assume true;
    goto $bb12, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb18;

  $bb12:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 180} $i15 := stk_camera_read_reg($p0, 513, $p3);
    call {:si_unique_call 181} {:cexpr "tmp___1"} boogie_si_record_i32($i15);
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i13 := $i14;
    goto $bb14_dummy;

  $bb13:
    assume $i16 == 1;
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb3;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb9;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb3;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb3;

  $bb14_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb15;
}



const video_devdata: ref;

axiom video_devdata == $sub.ref(0, 175811);

procedure video_devdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation video_devdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 186} $p1 := external_alloc();
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const video_get_drvdata: ref;

axiom video_get_drvdata == $sub.ref(0, 176843);

procedure video_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation video_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1808)), $mul.ref(136, 1));
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 177875);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} $p1 := external_alloc();
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 178907);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 1} true;
    call {:si_unique_call 189} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 190} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const mutex_lock_interruptible_nested: ref;

axiom mutex_lock_interruptible_nested == $sub.ref(0, 179939);

procedure mutex_lock_interruptible_nested($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation mutex_lock_interruptible_nested($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 191} {:cexpr "mutex_lock_interruptible_nested:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 1} true;
    call {:si_unique_call 192} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 193} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const v4l2_fh_open: ref;

axiom v4l2_fh_open == $sub.ref(0, 180971);

procedure v4l2_fh_open($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation v4l2_fh_open($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 1} true;
    call {:si_unique_call 194} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 195} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_usb_autopm_get_interface_7: ref;

axiom ldv_usb_autopm_get_interface_7 == $sub.ref(0, 182003);

procedure ldv_usb_autopm_get_interface_7($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3;



implementation ldv_usb_autopm_get_interface_7($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 196} $i1 := ldv_get_interface($p0);
    call {:si_unique_call 197} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_get_interface: ref;

axiom ldv_get_interface == $sub.ref(0, 183035);

procedure ldv_get_interface($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3;



implementation ldv_get_interface($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $i4: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 198} $i1 := ldv_undef_int();
    call {:si_unique_call 199} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    $i2 := $sle.i32($i1, 0);
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 200} ldv_stop___0();
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;

  $bb4:
    assume $i3 == 1;
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    $i4 := $M.3;
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    $i5 := $add.i32($i4, 1);
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    $M.3 := $i5;
    call {:si_unique_call 201} {:cexpr "INTERF_STATE"} boogie_si_record_i32($i5);
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_undef_int: ref;

axiom ldv_undef_int == $sub.ref(0, 184067);

procedure ldv_undef_int() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_undef_int() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 1} true;
    call {:si_unique_call 202} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 203} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 204} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_stop___0: ref;

axiom ldv_stop___0 == $sub.ref(0, 185099);

procedure ldv_stop___0();
  free requires assertsPassed;



implementation ldv_stop___0()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop___0_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const remap_vmalloc_range: ref;

axiom remap_vmalloc_range == $sub.ref(0, 186131);

procedure remap_vmalloc_range($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation remap_vmalloc_range($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 205} {:cexpr "remap_vmalloc_range:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 1} true;
    call {:si_unique_call 206} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 207} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const v4l2_ctrl_poll: ref;

axiom v4l2_ctrl_poll == $sub.ref(0, 187163);

procedure v4l2_ctrl_poll($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation v4l2_ctrl_poll($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 1} true;
    call {:si_unique_call 208} $i2 := __VERIFIER_nondet_uint();
    call {:si_unique_call 209} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i2);
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const poll_wait: ref;

axiom poll_wait == $sub.ref(0, 188195);

procedure poll_wait($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation poll_wait($p0: ref, $p1: ref, $p2: ref)
{
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p1);
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb6:
    assume $i10 == 1;
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    call {:si_unique_call 210} devirtbounce($p12, $p0, $p1, $p2);
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    goto $bb8;
}



const list_empty: ref;

axiom list_empty == $sub.ref(0, 189227);

procedure list_empty($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation list_empty($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i3, $i4);
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const stk_read: ref;

axiom stk_read == $sub.ref(0, 190259);

procedure stk_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.7, $M.8, $M.9, $M.10, $M.11, $CurrAddr, $M.5, $M.1, $M.4, $M.14, $M.16, $M.2;



implementation stk_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $i32: i1;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i64;
  var $p54: ref;
  var $i55: i32;
  var $i56: i32;
  var $i57: i1;
  var $i42: i32;
  var $p58: ref;
  var $i59: i64;
  var $i60: i1;
  var $p61: ref;
  var $i62: i32;
  var $i63: i32;
  var $i64: i1;
  var $p65: ref;
  var $i66: i32;
  var $i67: i1;
  var $p68: ref;
  var $i69: i32;
  var $i70: i1;
  var $p71: ref;
  var $i72: i32;
  var $i73: i32;
  var $i74: i1;
  var $p75: ref;
  var $p76: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p82: ref;
  var $p83: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $i88: i32;
  var $i89: i1;
  var $p90: ref;
  var $i91: i32;
  var $i92: i32;
  var $i93: i1;
  var $p95: ref;
  var $i96: i32;
  var $i97: i1;
  var $i98: i32;
  var $i99: i1;
  var $i94: i32;
  var $p100: ref;
  var $i101: i32;
  var $i102: i1;
  var $i103: i64;
  var $p104: ref;
  var $i105: i32;
  var $i106: i32;
  var $i107: i1;
  var $i108: i64;
  var $i109: i64;
  var $p110: ref;
  var $i111: i32;
  var $i112: i64;
  var $i113: i1;
  var $p114: ref;
  var $i115: i32;
  var $i116: i64;
  var $i117: i64;
  var $i118: i64;
  var $i119: i64;
  var $p120: ref;
  var $p121: ref;
  var $i122: i64;
  var $p123: ref;
  var $i124: i32;
  var $i125: i1;
  var $p126: ref;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $i136: i64;
  var $p137: ref;
  var $i138: i32;
  var $i139: i32;
  var $i140: i1;
  var $i141: i64;
  var $i142: i64;
  var $i143: i64;
  var $p144: ref;
  var $i145: i32;
  var $i146: i64;
  var $i147: i1;
  var $p148: ref;
  var $p149: ref;
  var $i150: i64;
  var $p151: ref;
  var $p152: ref;
  var $p153: ref;
  var $i11: i64;
  var vslice_dummy_var_37: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 211} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 212} {:cexpr "stk_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 213} $p5 := video_drvdata($p0);
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 2880)), $mul.ref(2644, 1));
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 1);
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p6, $mul.ref(0, 2880)), $mul.ref(2440, 1));
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p6, $mul.ref(0, 2880)), $mul.ref(2440, 1));
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p24, $p0);
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p6, $mul.ref(0, 2880)), $mul.ref(2644, 1));
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i26, 8);
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 0);
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i59 := $load.i64($M.0, $p3);
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    $i60 := $eq.i64($i59, 0);
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $i108 := $load.i64($M.0, $p3);
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    $i109 := $add.i64($i108, $i2);
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p6, $mul.ref(0, 2880)), $mul.ref(2816, 1));
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    $i111 := $load.i32($M.0, $p110);
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    $i112 := $sext.i32.i64($i111);
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    $i113 := $ugt.i64($i109, $i112);
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    assume {:branchcond $i113} true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    $i119 := $i2;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p6, $mul.ref(0, 2880)), $mul.ref(2648, 1));
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 243} $p121 := spinlock_check($p120);
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} $i122 := _raw_spin_lock_irqsave($p121);
    call {:si_unique_call 245} {:cexpr "flags"} boogie_si_record_i64($i122);
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p6, $mul.ref(0, 2880)), $mul.ref(2856, 1));
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 246} $i124 := list_empty($p123);
    call {:si_unique_call 247} {:cexpr "tmp___11"} boogie_si_record_i32($i124);
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    $i125 := $ne.i32($i124, 0);
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    assume {:branchcond $i125} true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 2880)), $mul.ref(2856, 1)), $mul.ref(0, 1));
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    $p130 := $load.ref($M.0, $p129);
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    $p131 := $bitcast.ref.ref($p130);
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p6, $mul.ref(0, 2880)), $mul.ref(2648, 1));
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} spin_unlock_irqrestore($p133, $i122);
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p131, $mul.ref($sub.ref(0, 112), 128)), $mul.ref(88, 1));
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    $p135 := $load.ref($M.0, $p134);
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    $i136 := $load.i64($M.0, $p3);
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($p135, $mul.ref($i136, 1));
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    $i138 := $trunc.i64.i32($i119);
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 251} $i139 := copy_to_user($p1, $p137, $i138);
    call {:si_unique_call 252} {:cexpr "tmp___12"} boogie_si_record_i32($i139);
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    $i140 := $ne.i32($i139, 0);
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    assume {:branchcond $i140} true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i140 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $i141 := $load.i64($M.0, $p3);
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    $i142 := $add.i64($i141, $i119);
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p3, $i142);
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $i143 := $load.i64($M.0, $p3);
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p6, $mul.ref(0, 2880)), $mul.ref(2816, 1));
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    $i145 := $load.i32($M.0, $p144);
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    $i146 := $sext.i32.i64($i145);
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    $i147 := $sge.i64($i143, $i146);
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i147 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $i11 := $i119;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb78:
    assume $i147 == 1;
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p3, 0);
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p6, $mul.ref(0, 2880)), $mul.ref(2648, 1));
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 253} $p149 := spinlock_check($p148);
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 254} $i150 := _raw_spin_lock_irqsave($p149);
    call {:si_unique_call 255} {:cexpr "flags"} boogie_si_record_i64($i150);
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p131, $mul.ref($sub.ref(0, 112), 128)), $mul.ref(112, 1));
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p6, $mul.ref(0, 2880)), $mul.ref(2840, 1));
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} list_move_tail($p151, $p152);
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p6, $mul.ref(0, 2880)), $mul.ref(2648, 1));
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 257} spin_unlock_irqrestore($p153, $i150);
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb75:
    assume $i140 == 1;
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    $i11 := $sub.i64(0, 14);
    goto $bb3;

  $bb72:
    assume $i125 == 1;
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p6, $mul.ref(0, 2880)), $mul.ref(2648, 1));
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 248} spin_unlock_irqrestore($p126, $i122);
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 249} vslice_dummy_var_37 := printk.ref(.str.10);
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;

  $bb69:
    assume $i113 == 1;
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p6, $mul.ref(0, 2880)), $mul.ref(2816, 1));
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    $i115 := $load.i32($M.0, $p114);
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    $i116 := $sext.i32.i64($i115);
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    $i117 := $load.i64($M.0, $p3);
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    $i118 := $sub.i64($i116, $i117);
    call {:si_unique_call 242} {:cexpr "count"} boogie_si_record_i64($i118);
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    $i119 := $i118;
    goto $bb71;

  $bb34:
    assume $i60 == 1;
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 360)), $mul.ref(136, 1));
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.0, $p61);
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    $i63 := $and.i32($i62, 2048);
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i63, 0);
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p6, $mul.ref(0, 2880)), $mul.ref(2856, 1));
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 228} $i69 := list_empty($p68);
    call {:si_unique_call 229} {:cexpr "tmp___9"} boogie_si_record_i32($i69);
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    $i70 := $ne.i32($i69, 0);
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    assume !($i70 == 1);
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i101 := 0;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    $i102 := $ne.i32($i101, 0);
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p6, $mul.ref(0, 2880)), $mul.ref(2644, 1));
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    $i105 := $load.i32($M.0, $p104);
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    $i106 := $and.i32($i105, 1);
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    $i107 := $eq.i32($i106, 0);
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    assume {:branchcond $i107} true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb65:
    assume $i107 == 1;
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    $i11 := $sub.i64(0, 5);
    goto $bb3;

  $bb62:
    assume $i102 == 1;
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    $i103 := $sext.i32.i64($i101);
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    $i11 := $i103;
    goto $bb3;

  $bb42:
    assume $i70 == 1;
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p6, $mul.ref(0, 2880)), $mul.ref(2644, 1));
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.0, $p71);
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    $i73 := $and.i32($i72, 1);
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    $i74 := $ne.i32($i73, 0);
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    assume {:branchcond $i74} true;
    goto $bb45, $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    assume !($i74 == 1);
    goto $bb44;

  $bb45:
    assume $i74 == 1;
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 230} $p75 := get_current();
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p76, 0);
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p78, $p75);
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p79, autoremove_wake_function);
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p82, $p80);
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p85, $p83);
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p6, $mul.ref(0, 2880)), $mul.ref(2720, 1));
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 231} prepare_to_wait($p86, $p4, 1);
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p6, $mul.ref(0, 2880)), $mul.ref(2856, 1));
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 232} $i88 := list_empty($p87);
    call {:si_unique_call 233} {:cexpr "tmp___6"} boogie_si_record_i32($i88);
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    $i89 := $eq.i32($i88, 0);
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    assume {:branchcond $i89} true;
    goto $bb47, $bb49;

  $bb49:
    assume !($i89 == 1);
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    call $p90, $i91, $i92, $i93, $p95, $i96, $i97, $i98, $i99 := stk_read_loop_$bb50($p4, $p6, $p86, $p87, $p90, $i91, $i92, $i93, $p95, $i96, $i97, $i98, $i99);
    goto $bb50_last;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    $i91 := $load.i32($M.0, $p90);
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    $i92 := $and.i32($i91, 1);
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    $i93 := $eq.i32($i92, 0);
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 235} $p95 := get_current();
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} $i96 := signal_pending($p95);
    call {:si_unique_call 237} {:cexpr "tmp___8"} boogie_si_record_i32($i96);
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    $i97 := $eq.i32($i96, 0);
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $i94 := $sub.i32(0, 512);
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p6, $mul.ref(0, 2880)), $mul.ref(2720, 1));
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 234} finish_wait($p100, $p4);
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    $i101 := $i94;
    goto $bb61;

  $bb56:
    assume $i97 == 1;
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 238} schedule();
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    call {:si_unique_call 239} prepare_to_wait($p86, $p4, 1);
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 240} $i98 := list_empty($p87);
    call {:si_unique_call 241} {:cexpr "tmp___6"} boogie_si_record_i32($i98);
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    $i99 := $eq.i32($i98, 0);
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    assume !($i99 == 1);
    goto $bb60_dummy;

  $bb53:
    assume $i99 == 1;
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $i94 := 0;
    goto $bb54;

  $bb51:
    assume $i93 == 1;
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb47:
    assume {:verifier.code 0} true;
    assume $i89 == 1;
    goto $bb48;

  $bb36:
    assume $i64 == 1;
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p6, $mul.ref(0, 2880)), $mul.ref(2856, 1));
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 226} $i66 := list_empty($p65);
    call {:si_unique_call 227} {:cexpr "tmp___4"} boogie_si_record_i32($i66);
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    $i67 := $ne.i32($i66, 0);
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb38:
    assume $i67 == 1;
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    $i11 := $sub.i64(0, 11);
    goto $bb3;

  $bb14:
    assume $i28 == 1;
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 214} $i29 := stk_initialise($p6);
    call {:si_unique_call 215} {:cexpr "tmp___0"} boogie_si_record_i32($i29);
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i30 == 1);
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 216} $i31 := stk_allocate_buffers($p6, 3);
    call {:si_unique_call 217} {:cexpr "tmp___1"} boogie_si_record_i32($i31);
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i32 == 1);
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 218} $i33 := stk_start_stream($p6);
    call {:si_unique_call 219} {:cexpr "tmp___2"} boogie_si_record_i32($i33);
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p6, $mul.ref(0, 2880)), $mul.ref(2820, 1));
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p35, 1);
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p6, $mul.ref(0, 2880)), $mul.ref(2648, 1));
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 220} $p37 := spinlock_check($p36);
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 221} $i38 := _raw_spin_lock_irqsave($p37);
    call {:si_unique_call 222} {:cexpr "flags"} boogie_si_record_i64($i38);
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p6, $mul.ref(0, 2880)), $mul.ref(2824, 1));
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    $i41 := $ult.i32(0, $i40);
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p6, $mul.ref(0, 2880)), $mul.ref(2648, 1));
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 225} spin_unlock_irqrestore($p58, $i38);
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb25:
    assume $i41 == 1;
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    $i42 := 0;
    goto $bb28;

  $bb28:
    call $p43, $p44, $i45, $p47, $p48, $p49, $p50, $i51, $p54, $i55, $i56, $i57, $i42 := stk_read_loop_$bb28($p6, $p39, $p43, $p44, $i45, $p47, $p48, $p49, $p50, $i51, $p54, $i55, $i56, $i57, $i42);
    goto $bb28_last;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p6, $mul.ref(0, 2880)), $mul.ref(2832, 1));
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    $i45 := $sext.i32.i64($i42);
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p44, $mul.ref($i45, 128)), $mul.ref(112, 1));
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p6, $mul.ref(0, 2880)), $mul.ref(2840, 1));
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 223} list_add_tail($p47, $p48);
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p6, $mul.ref(0, 2880)), $mul.ref(2832, 1));
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    $i51 := $sext.i32.i64($i42);
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($p50, $mul.ref($i51, 128)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p54, 2);
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    $i55 := $add.i32($i42, 1);
    call {:si_unique_call 224} {:cexpr "i"} boogie_si_record_i32($i55);
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.0, $p39);
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    $i57 := $ult.i32($i55, $i56);
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i57 == 1);
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb30:
    assume $i57 == 1;
    assume {:verifier.code 0} true;
    $i42 := $i55;
    goto $bb30_dummy;

  $bb20:
    assume $i34 == 1;
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    $i11 := $sub.i64(0, 12);
    goto $bb3;

  $bb18:
    assume $i32 == 1;
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    $i11 := $sub.i64(0, 12);
    goto $bb3;

  $bb16:
    assume $i30 == 1;
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    $i11 := $sub.i64(0, 12);
    goto $bb3;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p6, $mul.ref(0, 2880)), $mul.ref(2820, 1));
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 0);
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i18 == 1);
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p6, $mul.ref(0, 2880)), $mul.ref(2440, 1));
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p0);
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i21, $i22);
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb7;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i11 := $sub.i64(0, 16);
    goto $bb3;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb9;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    $i11 := $sub.i64(0, 5);
    goto $bb3;

  $bb60_dummy:
    assume false;
    return;

  $bb50_last:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p6, $mul.ref(0, 2880)), $mul.ref(2644, 1));
    goto corral_source_split_1080;

  $bb30_dummy:
    assume false;
    return;

  $bb28_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1007;
}



const stk_initialise: ref;

axiom stk_initialise == $sub.ref(0, 191291);

procedure stk_initialise($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.5, $M.1, $CurrAddr;



implementation stk_initialise($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i16;
  var $i16: i32;
  var $i17: i16;
  var $p18: ref;
  var $i19: i32;
  var $i20: i8;
  var $i21: i32;
  var $i22: i8;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $p12: ref;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $i33: i32;
  var $i34: i32;
  var $p35: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2644, 1));
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 1);
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 0);
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2644, 1));
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 2);
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.12, stk1125_initvals);
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 65535);
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 260} $i30 := stk_sensor_init($p0);
    call {:si_unique_call 261} {:cexpr "tmp"} boogie_si_record_i32($i30);
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 0);
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i31 == 1);
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb19:
    assume $i31 == 1;
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2644, 1));
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    $i34 := $or.i32($i33, 2);
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2644, 1));
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p35, $i34);
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb8:
    assume $i11 == 1;
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    $p12 := stk1125_initvals;
    goto $bb11;

  $bb11:
    call $p13, $i14, $i15, $i16, $i17, $p18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $p26, $p27, $i28, $i29, $p12 := stk_initialise_loop_$bb11($p0, $p13, $i14, $i15, $i16, $i17, $p18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $p26, $p27, $i28, $i29, $p12);
    goto $bb11_last;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.12, $p13);
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i16($i14);
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    $i16 := $zext.i16.i32($i15);
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i16($i16);
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p12, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.13, $p18);
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i8($i19);
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i32.i8($i21);
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 258} $i23 := stk_camera_write_reg($p0, $i17, $i22);
    call {:si_unique_call 259} {:cexpr "ret"} boogie_si_record_i32($i23);
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    $i25 := $i23;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p12, $mul.ref(1, 8));
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p12, $mul.ref(1, 8)), $mul.ref(0, 1));
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.12, $p27);
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 65535);
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i29 == 1);
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb16:
    assume $i29 == 1;
    assume {:verifier.code 0} true;
    $p12 := $p26;
    goto $bb16_dummy;

  $bb13:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    $i5 := $i25;
    goto $bb3;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 19);
    goto $bb3;

  $bb16_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1202;
}



const stk_allocate_buffers: ref;

axiom stk_allocate_buffers == $sub.ref(0, 192323);

procedure stk_allocate_buffers($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $CurrAddr;



implementation stk_allocate_buffers($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i32;
  var $i6: i1;
  var $i4: i32;
  var vslice_dummy_var_38: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 262} {:cexpr "stk_allocate_buffers:arg:n_sbufs"} boogie_si_record_i32($i1);
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 263} $i2 := stk_prepare_iso($p0);
    call {:si_unique_call 264} {:cexpr "err"} boogie_si_record_i32($i2);
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 266} $i5 := stk_prepare_sio_buffers($p0, $i1);
    call {:si_unique_call 267} {:cexpr "err"} boogie_si_record_i32($i5);
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb5:
    assume $i6 == 1;
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 268} vslice_dummy_var_38 := stk_free_sio_buffers($p0);
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    $i4 := $i5;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 265} stk_clean_iso($p0);
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    $i4 := $i2;
    goto $bb3;
}



const stk_start_stream: ref;

axiom stk_start_stream == $sub.ref(0, 193355);

procedure stk_start_stream($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.5, $CurrAddr, $M.14, $M.16, $M.2;



implementation stk_start_stream($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $i23: i32;
  var $i24: i1;
  var $i31: i32;
  var $i32: i8;
  var $i33: i32;
  var $i34: i32;
  var $i35: i8;
  var $i36: i32;
  var $i37: i8;
  var $i39: i32;
  var $i40: i8;
  var $i41: i32;
  var $i42: i8;
  var $i44: i32;
  var $i45: i8;
  var $i46: i32;
  var $i47: i8;
  var $p50: ref;
  var $p51: ref;
  var $i52: i64;
  var $p54: ref;
  var $p55: ref;
  var $i56: i64;
  var $i57: i1;
  var $p58: ref;
  var $p59: ref;
  var $i60: i64;
  var $p62: ref;
  var $p63: ref;
  var $i64: i32;
  var $p65: ref;
  var $i66: i1;
  var $i67: i32;
  var $i68: i32;
  var $i69: i1;
  var $i49: i32;
  var $p70: ref;
  var $i71: i32;
  var $i72: i32;
  var $p73: ref;
  var $i8: i32;
  var vslice_dummy_var_39: i32;
  var vslice_dummy_var_40: i32;
  var vslice_dummy_var_41: i32;
  var vslice_dummy_var_42: i32;
  var vslice_dummy_var_43: i32;
  var vslice_dummy_var_44: i32;
  var vslice_dummy_var_45: i32;
  var vslice_dummy_var_46: i32;
  var vslice_dummy_var_47: i32;
  var vslice_dummy_var_48: i32;
  var vslice_dummy_var_49: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 269} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 270} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2644, 1));
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 1);
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2644, 1));
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 4);
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i12 == 1);
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2644, 1));
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i14, 2);
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 0);
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2416, 1));
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 273} $i20 := usb_set_interface($p19, 0, 5);
    call {:si_unique_call 274} {:cexpr "ret"} boogie_si_record_i32($i20);
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i20, 0);
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 276} $i23 := stk_sensor_wakeup($p0);
    call {:si_unique_call 277} {:cexpr "tmp"} boogie_si_record_i32($i23);
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 279} vslice_dummy_var_42 := stk_camera_read_reg($p0, 278, $p2);
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} vslice_dummy_var_43 := stk_camera_read_reg($p0, 279, $p3);
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 281} vslice_dummy_var_44 := stk_camera_write_reg($p0, 278, 0);
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} vslice_dummy_var_45 := stk_camera_write_reg($p0, 279, 0);
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 283} vslice_dummy_var_46 := stk_camera_read_reg($p0, 256, $p1);
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.1, $p1);
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i32.i8($i31);
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    $i33 := $sext.i8.i32($i32);
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    $i34 := $or.i32($i33, $sub.i32(0, 128));
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i32.i8($i34);
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i35);
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i32.i8($i36);
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 284} vslice_dummy_var_47 := stk_camera_write_reg($p0, 256, $i37);
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.1, $p2);
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i32.i8($i39);
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i32($i40);
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i32.i8($i41);
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} vslice_dummy_var_48 := stk_camera_write_reg($p0, 278, $i42);
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.1, $p3);
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i32.i8($i44);
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i32($i45);
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i32.i8($i46);
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} vslice_dummy_var_49 := stk_camera_write_reg($p0, 279, $i47);
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    $i49 := 0;
    goto $bb17;

  $bb17:
    call $p50, $p51, $i52, $p54, $p55, $i56, $i57, $p58, $p59, $i60, $p62, $p63, $i64, $p65, $i66, $i67, $i68, $i69, $i49 := stk_start_stream_loop_$bb17($p0, $p50, $p51, $i52, $p54, $p55, $i56, $i57, $p58, $p59, $i60, $p62, $p63, $i64, $p65, $i66, $i67, $i68, $i69, $i49);
    goto $bb17_last;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2808, 1));
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    $i52 := $sext.i32.i64($i49);
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p51, $mul.ref($i52, 24)), $mul.ref(16, 1));
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    $i56 := $p2i.ref.i64($p55);
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    $i57 := $ne.i64($i56, 0);
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i68 := $add.i32($i49, 1);
    call {:si_unique_call 290} {:cexpr "i"} boogie_si_record_i32($i68);
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    $i69 := $sle.i32($i68, 2);
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2644, 1));
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.0, $p70);
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    $i72 := $or.i32($i71, 8);
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2644, 1));
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p73, $i72);
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb25:
    assume $i69 == 1;
    assume {:verifier.code 0} true;
    $i49 := $i68;
    goto $bb25_dummy;

  $bb19:
    assume $i57 == 1;
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2808, 1));
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    $i60 := $sext.i32.i64($i49);
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p59, $mul.ref($i60, 24)), $mul.ref(16, 1));
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 287} $i64 := ldv_usb_submit_urb_2($p63, 208);
    call {:si_unique_call 288} {:cexpr "ret"} boogie_si_record_i32($i64);
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2624, 1));
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} atomic_inc($p65);
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    $i66 := $ne.i32($i64, 0);
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    $i67 := $i64;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb21:
    assume $i66 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    $i8 := $i67;
    goto $bb3;

  $bb14:
    assume $i24 == 1;
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 278} vslice_dummy_var_41 := printk.ref(.str.27);
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume $i21 == 1;
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} vslice_dummy_var_40 := printk.ref(.str.8);
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 272} vslice_dummy_var_39 := printk.ref(.str.26);
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 14);
    goto $bb3;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb6;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 19);
    goto $bb3;

  $bb25_dummy:
    assume false;
    return;

  $bb17_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1314;
}



const list_add_tail: ref;

axiom list_add_tail == $sub.ref(0, 194387);

procedure list_add_tail($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add_tail($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 291} __list_add($p0, $p3, $p1);
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    return;
}



const get_current: ref;

axiom get_current == $sub.ref(0, 195419);

procedure get_current() returns ($r: ref);
  free requires assertsPassed;



implementation get_current() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 292} $p0 := devirtbounce.1(0, current_task);
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const autoremove_wake_function: ref;

axiom autoremove_wake_function == $sub.ref(0, 196451);

procedure autoremove_wake_function($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32);



const prepare_to_wait: ref;

axiom prepare_to_wait == $sub.ref(0, 197483);

procedure prepare_to_wait($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;



implementation prepare_to_wait($p0: ref, $p1: ref, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} {:cexpr "prepare_to_wait:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    return;
}



const signal_pending: ref;

axiom signal_pending == $sub.ref(0, 198515);

procedure signal_pending($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation signal_pending($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 294} $i1 := test_tsk_thread_flag($p0, 2);
    call {:si_unique_call 295} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 296} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 297} {:cexpr "tmp___0"} boogie_si_record_i64($i5);
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i64.i32($i5);
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const schedule: ref;

axiom schedule == $sub.ref(0, 199547);

procedure schedule();
  free requires assertsPassed;



implementation schedule()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    return;
}



const finish_wait: ref;

axiom finish_wait == $sub.ref(0, 200579);

procedure finish_wait($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation finish_wait($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    return;
}



const copy_to_user: ref;

axiom copy_to_user == $sub.ref(0, 201611);

procedure copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i64;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 298} {:cexpr "copy_to_user:arg:size"} boogie_si_record_i32($i2);
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 299} might_fault();
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 300} $i3 := _copy_to_user($p0, $p1, $i2);
    call {:si_unique_call 301} {:cexpr "tmp"} boogie_si_record_i64($i3);
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const list_move_tail: ref;

axiom list_move_tail == $sub.ref(0, 202643);

procedure list_move_tail($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_move_tail($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 302} __list_del_entry($p0);
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 303} list_add_tail($p0, $p1);
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    return;
}



const __list_del_entry: ref;

axiom __list_del_entry == $sub.ref(0, 203675);

procedure __list_del_entry($p0: ref);
  free requires assertsPassed;



implementation __list_del_entry($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    return;
}



const might_fault: ref;

axiom might_fault == $sub.ref(0, 204707);

procedure might_fault();
  free requires assertsPassed;



implementation might_fault()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    return;
}



const _copy_to_user: ref;

axiom _copy_to_user == $sub.ref(0, 205739);

procedure _copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation _copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 304} {:cexpr "_copy_to_user:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 1} true;
    call {:si_unique_call 305} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 306} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const test_tsk_thread_flag: ref;

axiom test_tsk_thread_flag == $sub.ref(0, 206771);

procedure test_tsk_thread_flag($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation test_tsk_thread_flag($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} {:cexpr "test_tsk_thread_flag:arg:flag"} boogie_si_record_i32($i1);
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 9640)), $mul.ref(8, 1));
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.6, $p2);
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} $i5 := test_ti_thread_flag($p4, $i1);
    call {:si_unique_call 309} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 207803);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 311} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const test_ti_thread_flag: ref;

axiom test_ti_thread_flag == $sub.ref(0, 208835);

procedure test_ti_thread_flag($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation test_ti_thread_flag($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 312} {:cexpr "test_ti_thread_flag:arg:flag"} boogie_si_record_i32($i1);
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    $i2 := $sext.i32.i64($i1);
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(16, 1));
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} $i5 := variable_test_bit($i2, $p4);
    call {:si_unique_call 314} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const variable_test_bit: ref;

axiom variable_test_bit == $sub.ref(0, 209867);

procedure variable_test_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation variable_test_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 315} {:cexpr "variable_test_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 316} $i2 := devirtbounce.2(0, $p1, $i0);
    call {:si_unique_call 317} {:cexpr "oldbit"} boogie_si_record_i32($i2);
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __list_add: ref;

axiom __list_add == $sub.ref(0, 210899);

procedure __list_add($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __list_add($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    return;
}



const stk_sensor_wakeup: ref;

axiom stk_sensor_wakeup == $sub.ref(0, 211931);

procedure stk_sensor_wakeup($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.5, $CurrAddr;



implementation stk_sensor_wakeup($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i5: i8;
  var $i6: i32;
  var $i7: i32;
  var $i8: i8;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 318} $p1 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 319} $i2 := stk_sensor_inb($p0, 9, $p1);
    call {:si_unique_call 320} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.5, $p1);
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 239);
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i8($i7);
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 321} $i9 := stk_sensor_outb($p0, 9, $i8);
    call {:si_unique_call 322} {:cexpr "tmp___1"} boogie_si_record_i32($i9);
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i4 := $i11;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    $i11 := 1;
    goto $bb6;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    $i4 := 1;
    goto $bb3;
}



const ldv_usb_submit_urb_2: ref;

axiom ldv_usb_submit_urb_2 == $sub.ref(0, 212963);

procedure ldv_usb_submit_urb_2($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.14, $M.16, $M.0, $M.2;



implementation ldv_usb_submit_urb_2($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 323} {:cexpr "ldv_usb_submit_urb_2:arg:ldv_func_arg2"} boogie_si_record_i32($i1);
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} $i2 := ldv_submit_urb($p0);
    call {:si_unique_call 325} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const atomic_inc: ref;

axiom atomic_inc == $sub.ref(0, 213995);

procedure atomic_inc($p0: ref);
  free requires assertsPassed;



implementation atomic_inc($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 326} devirtbounce.3(0, $p1, $p1);
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    return;
}



const ldv_submit_urb: ref;

axiom ldv_submit_urb == $sub.ref(0, 215027);

procedure ldv_submit_urb($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.14, $M.16, $M.0, $M.2;



implementation ldv_submit_urb($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 327} $i1 := ldv_undef_int();
    call {:si_unique_call 328} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    $i2 := $sle.i32($i1, 0);
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} ldv_stop___0();
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;

  $bb4:
    assume $i3 == 1;
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    $p4 := $M.4;
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p0);
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i5, $i6);
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb6:
    assume $i7 == 1;
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    $i8 := $M.14;
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i12 := $M.16;
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb11:
    assume $i13 == 1;
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    $p14 := $M.17;
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    $p15 := $M.4;
    call {:si_unique_call 332} devirtbounce.4($p14, $p15);
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    $M.16 := 0;
    call {:si_unique_call 333} {:cexpr "completeFnBulkCounter"} boogie_si_record_i32(0);
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i9 == 1;
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    $p10 := $M.15;
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    $p11 := $M.4;
    call {:si_unique_call 330} devirtbounce.4($p10, $p11);
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    $M.14 := 0;
    call {:si_unique_call 331} {:cexpr "completeFnIntCounter"} boogie_si_record_i32(0);
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const stk_prepare_iso: ref;

axiom stk_prepare_iso == $sub.ref(0, 216059);

procedure stk_prepare_iso($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $CurrAddr;



implementation stk_prepare_iso($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p11: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $i31: i32;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $p37: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $i46: i1;
  var $p47: ref;
  var $i48: i64;
  var $i49: i1;
  var $i50: i32;
  var $p52: ref;
  var $p53: ref;
  var $i54: i64;
  var $p56: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i64;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $i67: i64;
  var $p69: ref;
  var $p70: ref;
  var $p57: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i8;
  var $i75: i32;
  var $i76: i32;
  var $i77: i32;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $i82: i64;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p95: ref;
  var $p98: ref;
  var $i99: i32;
  var $i100: i1;
  var $i19: i32;
  var $p101: ref;
  var $i102: i32;
  var $i103: i32;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p112: ref;
  var $p113: ref;
  var $i114: i64;
  var $i115: i1;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $i119: i64;
  var $i120: i1;
  var $p121: ref;
  var $p123: ref;
  var $p124: ref;
  var $i125: i64;
  var $p127: ref;
  var $p128: ref;
  var $i129: i32;
  var $i130: i1;
  var $i122: i32;
  var $p131: ref;
  var $i132: i64;
  var $p134: ref;
  var $p135: ref;
  var $i136: i64;
  var $i137: i1;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $i3: i32;
  var $p142: ref;
  var $p143: ref;
  var $p145: ref;
  var $p146: ref;
  var $p147: ref;
  var $p149: ref;
  var $p150: ref;
  var $i151: i64;
  var $i152: i1;
  var $p153: ref;
  var $p154: ref;
  var $p156: ref;
  var $p157: ref;
  var $p160: ref;
  var $p163: ref;
  var $p166: ref;
  var $p169: ref;
  var $p172: ref;
  var $p175: ref;
  var $p178: ref;
  var $p181: ref;
  var $p184: ref;
  var $p187: ref;
  var $p190: ref;
  var $p193: ref;
  var $p196: ref;
  var $p199: ref;
  var $p202: ref;
  var $p205: ref;
  var $p208: ref;
  var $p211: ref;
  var $p214: ref;
  var $p217: ref;
  var $p220: ref;
  var $p223: ref;
  var $p226: ref;
  var $p229: ref;
  var $p232: ref;
  var $p235: ref;
  var $p238: ref;
  var $p241: ref;
  var $p244: ref;
  var $p247: ref;
  var vslice_dummy_var_50: i32;
  var vslice_dummy_var_51: i32;
  var vslice_dummy_var_52: i32;
  var vslice_dummy_var_53: i32;
  var vslice_dummy_var_54: i32;
  var vslice_dummy_var_55: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2416, 1));
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2808, 1));
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} $p11 := kcalloc(3, 24, 208);
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2808, 1));
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, $p11);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2808, 1));
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i16, 0);
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb11;

  $bb11:
    call $p20, $p21, $i22, $p24, $p25, $i26, $i27, $p28, $i29, $i30, $i31, $p33, $p34, $i35, $p37, $p39, $p40, $i41, $p43, $p44, $i45, $i46, $p47, $i48, $i49, $i50, $p52, $p53, $i54, $p56, $p59, $p60, $i61, $p63, $p64, $p65, $p66, $i67, $p69, $p70, $p57, $p71, $p72, $p73, $i74, $i75, $i76, $i77, $p78, $p79, $p80, $p81, $i82, $p84, $p85, $p86, $p87, $p88, $p90, $p91, $p92, $p95, $p98, $i99, $i100, $i19, $p160, $p163, $p166, $p169, $p172, $p175, $p178, $p181, $p184, $p187, $p190, $p193, $p196, $p199, $p202, $p205, $p208, $p211, $p214, $p217, $p220, $p223, $p226, $p229, $p232, $p235, $p238, $p241, $p244, $p247, vslice_dummy_var_52, vslice_dummy_var_54 := stk_prepare_iso_loop_$bb11($p0, $p5, $p20, $p21, $i22, $p24, $p25, $i26, $i27, $p28, $i29, $i30, $i31, $p33, $p34, $i35, $p37, $p39, $p40, $i41, $p43, $p44, $i45, $i46, $p47, $i48, $i49, $i50, $p52, $p53, $i54, $p56, $p59, $p60, $i61, $p63, $p64, $p65, $p66, $i67, $p69, $p70, $p57, $p71, $p72, $p73, $i74, $i75, $i76, $i77, $p78, $p79, $p80, $p81, $i82, $p84, $p85, $p86, $p87, $p88, $p90, $p91, $p92, $p95, $p98, $i99, $i100, $i19, $p160, $p163, $p166, $p169, $p172, $p175, $p178, $p181, $p184, $p187, $p190, $p193, $p196, $p199, $p202, $p205, $p208, $p211, $p214, $p217, $p220, $p223, $p226, $p229, $p232, $p235, $p238, $p241, $p244, $p247, vslice_dummy_var_52, vslice_dummy_var_54);
    goto $bb11_last;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2808, 1));
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i19);
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p21, $mul.ref($i22, 24)), $mul.ref(0, 1));
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    $i27 := $eq.i64($i26, 0);
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i27 == 1);
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 338} vslice_dummy_var_52 := printk.ref(.str.14);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2808, 1));
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    $i41 := $sext.i32.i64($i19);
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p40, $mul.ref($i41, 24)), $mul.ref(16, 1));
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p44);
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    $i46 := $eq.i64($i45, 0);
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i46 == 1);
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 341} vslice_dummy_var_54 := printk.ref(.str.16);
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2808, 1));
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    $i61 := $sext.i32.i64($i19);
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p60, $mul.ref($i61, 24)), $mul.ref(16, 1));
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 342} usb_kill_urb($p64);
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2808, 1));
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    $i67 := $sext.i32.i64($i19);
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p66, $mul.ref($i67, 24)), $mul.ref(16, 1));
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.0, $p69);
    assume {:verifier.code 0} true;
    $p57 := $p70;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p57, $mul.ref(0, 192)), $mul.ref(168, 1));
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p71, 1);
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p57, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p72, $p5);
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2620, 1));
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    $i74 := $load.i8($M.0, $p73);
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    $i75 := $zext.i8.i32($i74);
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} $i76 := __create_pipe($p5, $i75);
    call {:si_unique_call 345} {:cexpr "tmp___0"} boogie_si_record_i32($i76);
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    $i77 := $or.i32($i76, 128);
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p57, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p78, $i77);
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p57, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p79, 2);
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2808, 1));
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.0, $p80);
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    $i82 := $sext.i32.i64($i19);
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p81, $mul.ref($i82, 24)), $mul.ref(0, 1));
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.0, $p84);
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p57, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p86, $p85);
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p57, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p87, 49152);
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p57, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p88, stk_isoc_handler);
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p57, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p90, $p0);
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p57, $mul.ref(0, 192)), $mul.ref(160, 1));
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p91, 0);
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p57, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p92, 16);
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($add.ref($add.ref($p57, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p95, 0);
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($add.ref($add.ref($p57, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p98, 3072);
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($add.ref($add.ref($p57, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(1, 16)), $mul.ref(0, 1));
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p160, 3072);
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($add.ref($add.ref($p57, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(1, 16)), $mul.ref(4, 1));
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p163, 3072);
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($add.ref($add.ref($p57, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(2, 16)), $mul.ref(0, 1));
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p166, 6144);
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($add.ref($add.ref($p57, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(2, 16)), $mul.ref(4, 1));
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p169, 3072);
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($add.ref($add.ref($p57, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(3, 16)), $mul.ref(0, 1));
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p172, 9216);
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($add.ref($add.ref($p57, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(3, 16)), $mul.ref(4, 1));
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p175, 3072);
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($add.ref($add.ref($p57, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(4, 16)), $mul.ref(0, 1));
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p178, 12288);
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($add.ref($add.ref($p57, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(4, 16)), $mul.ref(4, 1));
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p181, 3072);
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($add.ref($add.ref($p57, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(5, 16)), $mul.ref(0, 1));
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p184, 15360);
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($add.ref($add.ref($p57, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(5, 16)), $mul.ref(4, 1));
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p187, 3072);
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($add.ref($add.ref($p57, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(6, 16)), $mul.ref(0, 1));
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p190, 18432);
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($add.ref($add.ref($p57, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(6, 16)), $mul.ref(4, 1));
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p193, 3072);
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($add.ref($add.ref($p57, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(7, 16)), $mul.ref(0, 1));
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p196, 21504);
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($add.ref($add.ref($p57, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(7, 16)), $mul.ref(4, 1));
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p199, 3072);
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($add.ref($add.ref($p57, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(8, 16)), $mul.ref(0, 1));
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p202, 24576);
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($add.ref($add.ref($p57, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(8, 16)), $mul.ref(4, 1));
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p205, 3072);
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($add.ref($add.ref($add.ref($p57, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(9, 16)), $mul.ref(0, 1));
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p208, 27648);
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($add.ref($add.ref($p57, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(9, 16)), $mul.ref(4, 1));
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p211, 3072);
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($add.ref($add.ref($p57, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(10, 16)), $mul.ref(0, 1));
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p214, 30720);
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($add.ref($add.ref($p57, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(10, 16)), $mul.ref(4, 1));
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p217, 3072);
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($add.ref($add.ref($p57, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(11, 16)), $mul.ref(0, 1));
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p220, 33792);
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($add.ref($add.ref($p57, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(11, 16)), $mul.ref(4, 1));
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p223, 3072);
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($add.ref($add.ref($p57, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(12, 16)), $mul.ref(0, 1));
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p226, 36864);
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($add.ref($add.ref($p57, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(12, 16)), $mul.ref(4, 1));
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p229, 3072);
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($add.ref($add.ref($add.ref($p57, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(13, 16)), $mul.ref(0, 1));
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p232, 39936);
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($add.ref($add.ref($add.ref($p57, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(13, 16)), $mul.ref(4, 1));
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p235, 3072);
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $p238 := $add.ref($add.ref($add.ref($add.ref($p57, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(14, 16)), $mul.ref(0, 1));
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p238, 43008);
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($add.ref($add.ref($add.ref($p57, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(14, 16)), $mul.ref(4, 1));
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p241, 3072);
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($add.ref($add.ref($p57, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(15, 16)), $mul.ref(0, 1));
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p244, 46080);
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($add.ref($add.ref($add.ref($p57, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(15, 16)), $mul.ref(4, 1));
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p247, 3072);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i99 := $add.i32($i19, 1);
    call {:si_unique_call 346} {:cexpr "i"} boogie_si_record_i32($i99);
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    $i100 := $sle.i32($i99, 2);
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2644, 1));
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    $i102 := $load.i32($M.0, $p101);
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    $i103 := $or.i32($i102, 4);
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2644, 1));
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p104, $i103);
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb30:
    assume $i100 == 1;
    assume {:verifier.code 0} true;
    $i19 := $i99;
    goto $bb30_dummy;

  $bb20:
    assume $i46 == 1;
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 340} $p47 := ldv_usb_alloc_urb_4(16, 208);
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    $i48 := $p2i.ref.i64($p47);
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    $i49 := $eq.i64($i48, 0);
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    $i50 := $i19;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2808, 1));
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    $i54 := $sext.i32.i64($i19);
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p53, $mul.ref($i54, 24)), $mul.ref(16, 1));
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p56, $p47);
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    $p57 := $p47;
    goto $bb25;

  $bb22:
    assume $i49 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 343} vslice_dummy_var_55 := printk.ref.i32(.str.15, $i50);
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2808, 1));
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p116 := $load.ref($M.0, $p105);
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p116, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    $p118 := $load.ref($M.0, $p117);
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    $i119 := $p2i.ref.i64($p118);
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    $i120 := $ne.i64($i119, 0);
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    assume {:branchcond $i120} true;
    goto $bb38, $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume !($i120 == 1);
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2808, 1));
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    $i122 := 0;
    goto $bb41;

  $bb41:
    call $p123, $p124, $i125, $p127, $p128, $i129, $i130, $i122, $p131, $i132, $p134, $p135, $i136, $i137 := stk_prepare_iso_loop_$bb41($p0, $p121, $p123, $p124, $i125, $p127, $p128, $i129, $i130, $i122, $p131, $i132, $p134, $p135, $i136, $i137);
    goto $bb41_last;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    $p131 := $load.ref($M.0, $p121);
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $i132 := $sext.i32.i64($i122);
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p131, $mul.ref($i132, 24)), $mul.ref(16, 1));
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    $p135 := $load.ref($M.0, $p134);
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    $i136 := $p2i.ref.i64($p135);
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    $i137 := $ne.i64($i136, 0);
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    assume !($i137 == 1);
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2808, 1));
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    $p139 := $load.ref($M.0, $p138);
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    $p140 := $bitcast.ref.ref($p139);
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 350} kfree($p140);
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2808, 1));
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p141, $0.ref);
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32(0, 12);
    goto $bb3;

  $bb46:
    assume $i137 == 1;
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2808, 1));
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    $p124 := $load.ref($M.0, $p123);
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    $i125 := $sext.i32.i64($i122);
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p124, $mul.ref($i125, 24)), $mul.ref(16, 1));
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    $p128 := $load.ref($M.0, $p127);
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} ldv_usb_free_urb_5($p128);
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    $i129 := $add.i32($i122, 1);
    call {:si_unique_call 349} {:cexpr "i"} boogie_si_record_i32($i129);
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    $i130 := $sle.i32($i129, 2);
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    assume !($i130 == 1);
    goto $bb45;

  $bb43:
    assume $i130 == 1;
    assume {:verifier.code 0} true;
    $i122 := $i129;
    goto $bb43_dummy;

  $bb38:
    assume $i120 == 1;
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2808, 1));
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    $p107 := $load.ref($M.0, $p106);
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p107, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $p109 := $load.ref($M.0, $p108);
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 347} kfree($p109);
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    $p110 := $load.ref($M.0, $p105);
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p110, $mul.ref(1, 24)), $mul.ref(0, 1));
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $p113 := $load.ref($M.0, $p112);
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    $i114 := $p2i.ref.i64($p113);
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    $i115 := $ne.i64($i114, 0);
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i115 == 1);
    goto $bb37;

  $bb35:
    assume $i115 == 1;
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2808, 1));
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    $p143 := $load.ref($M.0, $p142);
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p143, $mul.ref(1, 24)), $mul.ref(0, 1));
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    $p146 := $load.ref($M.0, $p145);
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 351} kfree($p146);
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    $p147 := $load.ref($M.0, $p105);
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p147, $mul.ref(2, 24)), $mul.ref(0, 1));
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    $p150 := $load.ref($M.0, $p149);
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    $i151 := $p2i.ref.i64($p150);
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    $i152 := $ne.i64($i151, 0);
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    assume {:branchcond $i152} true;
    goto $bb50, $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    assume !($i152 == 1);
    goto $bb37;

  $bb50:
    assume $i152 == 1;
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2808, 1));
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    $p154 := $load.ref($M.0, $p153);
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p154, $mul.ref(2, 24)), $mul.ref(0, 1));
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    $p157 := $load.ref($M.0, $p156);
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} kfree($p157);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb13:
    assume $i27 == 1;
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 337} $p28 := kzalloc(49152, 208);
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    $i30 := $eq.i64($i29, 0);
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    $i31 := $i19;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2808, 1));
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    $i35 := $sext.i32.i64($i19);
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p34, $mul.ref($i35, 24)), $mul.ref(0, 1));
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p37, $p28);
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb15:
    assume $i30 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} vslice_dummy_var_53 := printk.ref.i32(.str.13, $i31);
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} vslice_dummy_var_51 := printk.ref(.str.12);
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32(0, 12);
    goto $bb3;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} vslice_dummy_var_50 := printk.ref(.str.11);
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32(0, 6);
    goto $bb3;

  $bb43_dummy:
    assume false;
    return;

  $bb41_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1637;

  $bb30_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1491;
}



const stk_prepare_sio_buffers: ref;

axiom stk_prepare_sio_buffers == $sub.ref(0, 217091);

procedure stk_prepare_sio_buffers($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation stk_prepare_sio_buffers($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i7: i64;
  var $i8: i64;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $i17: i1;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i25: i32;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $i18: i32;
  var $i16: i32;
  var vslice_dummy_var_56: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 353} {:cexpr "stk_prepare_sio_buffers:arg:n_sbufs"} boogie_si_record_i32($i1);
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2832, 1));
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i1);
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    $i8 := $mul.i64($i7, 128);
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 355} $p9 := kzalloc($i8, 208);
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2832, 1));
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, $p9);
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2832, 1));
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, 0);
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i17 := $ult.i32(0, $i1);
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb11;

  $bb11:
    call $i19, $i20, $i25, $p26, $i27, $i28, $i18 := stk_prepare_sio_buffers_loop_$bb11($p0, $i1, $i19, $i20, $i25, $p26, $i27, $i28, $i18);
    goto $bb11_last;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 356} $i19 := stk_setup_siobuf($p0, $i18);
    call {:si_unique_call 357} {:cexpr "tmp___0"} boogie_si_record_i32($i19);
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i25 := $add.i32($i18, 1);
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2824, 1));
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, $i25);
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    $i27 := $add.i32($i18, 1);
    call {:si_unique_call 358} {:cexpr "i"} boogie_si_record_i32($i27);
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    $i28 := $ult.i32($i27, $i1);
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i28 == 1);
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb16:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    $i18 := $i27;
    goto $bb16_dummy;

  $bb13:
    assume $i20 == 1;
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2824, 1));
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $i23 := $ugt.i32($i22, 1);
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    $i24 := (if $i23 == 1 then 0 else $sub.i32(0, 12));
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    $i16 := $i24;
    goto $bb6;

  $bb4:
    assume $i15 == 1;
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 12);
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 354} vslice_dummy_var_56 := printk.ref(.str.25);
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb16_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1784;
}



const kzalloc: ref;

axiom kzalloc == $sub.ref(0, 218123);

procedure kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $i2: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 359} {:cexpr "kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 360} {:cexpr "kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    $i2 := $or.i32($i1, 32768);
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} $p3 := kmalloc($i0, $i2);
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const stk_setup_siobuf: ref;

axiom stk_setup_siobuf == $sub.ref(0, 219155);

procedure stk_setup_siobuf($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation stk_setup_siobuf($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $p12: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i64;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p24: ref;
  var $p25: ref;
  var $p27: ref;
  var $p29: ref;
  var $p31: ref;
  var $p33: ref;
  var $p35: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i32;
  var $i40: i32;
  var $p42: ref;
  var $p43: ref;
  var $i23: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 362} {:cexpr "stk_setup_siobuf:arg:index"} boogie_si_record_i32($i1);
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2832, 1));
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i1);
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref($i4, 128)), $mul.ref(112, 1));
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 363} INIT_LIST_HEAD($p6);
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2816, 1));
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    $i9 := $add.i32($i8, 4095);
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, $sub.i32(0, 4096));
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p3, $mul.ref($i4, 128)), $mul.ref(0, 1)), $mul.ref(72, 1));
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, $i10);
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p3, $mul.ref($i4, 128)), $mul.ref(0, 1)), $mul.ref(72, 1));
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    $i16 := $zext.i32.i64($i15);
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 364} $p17 := vmalloc_user($i16);
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref($i4, 128)), $mul.ref(88, 1));
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p18, $p17);
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref($i4, 128)), $mul.ref(88, 1));
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    $i22 := $eq.i64($i21, 0);
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p3, $mul.ref($i4, 128)), $mul.ref(96, 1));
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, 0);
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref($i4, 128)), $mul.ref(104, 1));
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p25, $p0);
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p3, $mul.ref($i4, 128)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, $i1);
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p3, $mul.ref($i4, 128)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, 1);
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p3, $mul.ref($i4, 128)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p31, 8192);
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p3, $mul.ref($i4, 128)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, 1);
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p3, $mul.ref($i4, 128)), $mul.ref(0, 1)), $mul.ref(60, 1));
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p35, 1);
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p3, $mul.ref($i4, 128)), $mul.ref(0, 1)), $mul.ref(72, 1));
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    $i39 := $mul.i32($i38, $i1);
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    $i40 := $mul.i32($i39, 2);
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p3, $mul.ref($i4, 128)), $mul.ref(0, 1)), $mul.ref(64, 1));
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p43, $i40);
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $i23 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    $r := $i23;
    return;

  $bb1:
    assume $i22 == 1;
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    $i23 := $sub.i32(0, 12);
    goto $bb3;
}



const vmalloc_user: ref;

axiom vmalloc_user == $sub.ref(0, 220187);

procedure vmalloc_user($i0: i64) returns ($r: ref);
  free requires assertsPassed;



implementation vmalloc_user($i0: i64) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 365} {:cexpr "vmalloc_user:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 366} $p1 := external_alloc();
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const kmalloc: ref;

axiom kmalloc == $sub.ref(0, 221219);

procedure kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 367} {:cexpr "kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 368} {:cexpr "kmalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 369} $p2 := __kmalloc($i0, $i1);
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const kcalloc: ref;

axiom kcalloc == $sub.ref(0, 222251);

procedure kcalloc($i0: i64, $i1: i64, $i2: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kcalloc($i0: i64, $i1: i64, $i2: i32) returns ($r: ref)
{
  var $i3: i32;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 370} {:cexpr "kcalloc:arg:n"} boogie_si_record_i64($i0);
    call {:si_unique_call 371} {:cexpr "kcalloc:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 372} {:cexpr "kcalloc:arg:flags"} boogie_si_record_i32($i2);
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    $i3 := $or.i32($i2, 32768);
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 373} $p4 := kmalloc_array($i0, $i1, $i3);
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const ldv_usb_alloc_urb_4: ref;

axiom ldv_usb_alloc_urb_4 == $sub.ref(0, 223283);

procedure ldv_usb_alloc_urb_4($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.4;



implementation ldv_usb_alloc_urb_4($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 374} {:cexpr "ldv_usb_alloc_urb_4:arg:iso_packets"} boogie_si_record_i32($i0);
    call {:si_unique_call 375} {:cexpr "ldv_usb_alloc_urb_4:arg:mem_flags"} boogie_si_record_i32($i1);
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} $p2 := ldv_alloc_urb();
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const stk_isoc_handler: ref;

axiom stk_isoc_handler == $sub.ref(0, 224315);

procedure stk_isoc_handler($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.14, $M.16, $M.2;



implementation stk_isoc_handler($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $i27: i32;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i1;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p45: ref;
  var $i46: i32;
  var $i47: i64;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $i51: i1;
  var $i57: i64;
  var $p60: ref;
  var $i61: i32;
  var $i62: i1;
  var $i63: i64;
  var $p66: ref;
  var $i67: i32;
  var $i68: i1;
  var $i69: i64;
  var $p72: ref;
  var $i73: i32;
  var $i78: i64;
  var $p81: ref;
  var $i82: i32;
  var $p83: ref;
  var $p84: ref;
  var $i85: i64;
  var $p88: ref;
  var $i89: i32;
  var $i90: i64;
  var $p91: ref;
  var $i92: i1;
  var $i93: i8;
  var $i94: i32;
  var $i95: i1;
  var $i96: i32;
  var $i97: i64;
  var $p98: ref;
  var $p100: ref;
  var $i101: i32;
  var $i102: i1;
  var $p104: ref;
  var $i105: i32;
  var $p106: ref;
  var $i107: i32;
  var $i108: i1;
  var $i109: i32;
  var $i110: i1;
  var $p112: ref;
  var $i113: i32;
  var $i114: i32;
  var $i115: i1;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p123: ref;
  var $i124: i32;
  var $p125: ref;
  var $i126: i32;
  var $i127: i1;
  var $p128: ref;
  var $i129: i32;
  var $i130: i1;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $p146: ref;
  var $p148: ref;
  var $p149: ref;
  var $p150: ref;
  var $p135: ref;
  var $p136: ref;
  var $p151: ref;
  var $p152: ref;
  var $p120: ref;
  var $p121: ref;
  var $i157: i32;
  var $i158: i64;
  var $p159: ref;
  var $p153: ref;
  var $p154: ref;
  var $p155: ref;
  var $i156: i32;
  var $p161: ref;
  var $i162: i32;
  var $i163: i32;
  var $p164: ref;
  var $i165: i32;
  var $i166: i1;
  var $i167: i32;
  var $i168: i1;
  var $i169: i32;
  var $i170: i1;
  var $p171: ref;
  var $i172: i64;
  var $p173: ref;
  var $p174: ref;
  var $i175: i64;
  var $i176: i64;
  var $p177: ref;
  var $p179: ref;
  var $i180: i32;
  var $i181: i32;
  var $p183: ref;
  var $p75: ref;
  var $p76: ref;
  var $i77: i64;
  var $i184: i32;
  var $i185: i32;
  var $i186: i1;
  var $i53: i32;
  var $i54: i64;
  var $p55: ref;
  var $p56: ref;
  var $i187: i64;
  var $i52: i64;
  var $i29: i64;
  var $p188: ref;
  var $p189: ref;
  var $p190: ref;
  var $p191: ref;
  var $i192: i32;
  var $i193: i1;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;
  var vslice_dummy_var_57: i32;
  var vslice_dummy_var_58: i32;
  var vslice_dummy_var_59: i32;
  var vslice_dummy_var_60: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, $sub.i32(0, 2));
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i9 == 1);
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, $sub.i32(0, 104));
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i12 == 1);
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, $sub.i32(0, 108));
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 2880)), $mul.ref(2648, 1));
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 379} $p18 := spinlock_check($p17);
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} $i19 := _raw_spin_lock_irqsave($p18);
    call {:si_unique_call 381} {:cexpr "flags"} boogie_si_record_i64($i19);
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, $sub.i32(0, 115));
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p3, $mul.ref(0, 2880)), $mul.ref(2840, 1));
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} $i31 := list_empty($p30);
    call {:si_unique_call 387} {:cexpr "tmp___3"} boogie_si_record_i32($i31);
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2880)), $mul.ref(2840, 1)), $mul.ref(0, 1));
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($p40, $mul.ref($sub.ref(0, 112), 128));
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p40, $mul.ref($sub.ref(0, 112), 128)), $mul.ref(88, 1));
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p40, $mul.ref($sub.ref(0, 112), 128)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    $i47 := $zext.i32.i64($i46);
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($p43, $mul.ref($i47, 1));
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    $i51 := $sgt.i32($i50, 0);
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    $i52 := $i19;
    assume {:branchcond $i51} true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i51 == 1);
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $i29 := $i52;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($p3, $mul.ref(0, 2880)), $mul.ref(2648, 1));
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} spin_unlock_irqrestore($p188, $i29);
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p3, $mul.ref(0, 2880)), $mul.ref(2416, 1));
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    $p190 := $load.ref($M.0, $p189);
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p191, $p190);
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} $i192 := ldv_usb_submit_urb_3($p0, 32);
    call {:si_unique_call 385} {:cexpr "ret"} boogie_si_record_i32($i192);
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    $i193 := $ne.i32($i192, 0);
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i193 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb77:
    assume $i193 == 1;
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 415} vslice_dummy_var_60 := printk.ref.i32(.str.24, $i192);
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb29:
    assume $i51 == 1;
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    $i53, $i54, $p55, $p56 := 0, $i19, $p48, $p41;
    goto $bb32;

  $bb32:
    call $i57, $p60, $i61, $i62, $i63, $p66, $i67, $i68, $i69, $p72, $i73, $i78, $p81, $i82, $p83, $p84, $i85, $p88, $i89, $i90, $p91, $i92, $i93, $i94, $i95, $i96, $i97, $p98, $p100, $i101, $i102, $p104, $i105, $p106, $i107, $i108, $i109, $i110, $p112, $i113, $i114, $i115, $p117, $p118, $p119, $p123, $i124, $p125, $i126, $i127, $p128, $i129, $i130, $p132, $p133, $p134, $p138, $p139, $p140, $p141, $p143, $p144, $p145, $p146, $p148, $p149, $p150, $p135, $p136, $p151, $p152, $p120, $p121, $i157, $i158, $p159, $p153, $p154, $p155, $i156, $p161, $i162, $i163, $p164, $i165, $i166, $i167, $i168, $i169, $i170, $p171, $i172, $p173, $p174, $i175, $i176, $p177, $p179, $i180, $i181, $p183, $p75, $p76, $i77, $i184, $i185, $i186, $i53, $i54, $p55, $p56, $i187, cmdloc_dummy_var_0, cmdloc_dummy_var_1, cmdloc_dummy_var_2, vslice_dummy_var_59 := stk_isoc_handler_loop_$bb32($p0, $p3, $p49, $i57, $p60, $i61, $i62, $i63, $p66, $i67, $i68, $i69, $p72, $i73, $i78, $p81, $i82, $p83, $p84, $i85, $p88, $i89, $i90, $p91, $i92, $i93, $i94, $i95, $i96, $i97, $p98, $p100, $i101, $i102, $p104, $i105, $p106, $i107, $i108, $i109, $i110, $p112, $i113, $i114, $i115, $p117, $p118, $p119, $p123, $i124, $p125, $i126, $i127, $p128, $i129, $i130, $p132, $p133, $p134, $p138, $p139, $p140, $p141, $p143, $p144, $p145, $p146, $p148, $p149, $p150, $p135, $p136, $p151, $p152, $p120, $p121, $i157, $i158, $p159, $p153, $p154, $p155, $i156, $p161, $i162, $i163, $p164, $i165, $i166, $i167, $i168, $i169, $i170, $p171, $i172, $p173, $p174, $i175, $i176, $p177, $p179, $i180, $i181, $p183, $p75, $p76, $i77, $i184, $i185, $i186, $i53, $i54, $p55, $p56, $i187, cmdloc_dummy_var_0, cmdloc_dummy_var_1, cmdloc_dummy_var_2, vslice_dummy_var_59);
    goto $bb32_last;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i57 := $sext.i32.i64($i53);
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref($i57, 16)), $mul.ref(12, 1));
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.0, $p60);
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    $i62 := $ne.i32($i61, 0);
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i78 := $sext.i32.i64($i53);
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref($i78, 16)), $mul.ref(8, 1));
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.0, $p81);
    call {:si_unique_call 394} {:cexpr "framelen"} boogie_si_record_i32($i82);
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.0, $p83);
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    $i85 := $sext.i32.i64($i53);
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref($i85, 16)), $mul.ref(0, 1));
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    $i89 := $load.i32($M.0, $p88);
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $i90 := $zext.i32.i64($i89);
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($p84, $mul.ref($i90, 1));
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    $i92 := $sle.i32($i82, 4);
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i93 := $load.i8($M.0, $p91);
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    $i94 := $sext.i8.i32($i93);
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    $i95 := $slt.i32($i94, 0);
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i95 == 1);
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    $i157 := $add.i32($i82, $sub.i32(0, 4));
    call {:si_unique_call 396} {:cexpr "framelen"} boogie_si_record_i32($i157);
    $i158 := $add.i64($i90, 4);
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($p84, $mul.ref($i158, 1));
    assume {:verifier.code 0} true;
    $p153, $p154, $p155, $i156 := $p56, $p159, $p55, $i157;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($add.ref($p153, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    $i162 := $load.i32($M.0, $p161);
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    $i163 := $add.i32($i162, $i156);
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p3, $mul.ref(0, 2880)), $mul.ref(2816, 1));
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    $i165 := $load.i32($M.0, $p164);
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    $i166 := $ugt.i32($i163, $i165);
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i166 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p3, $mul.ref(0, 2880)), $mul.ref(2648, 1));
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 409} spin_unlock_irqrestore($p171, $i54);
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    $i172 := $sext.i32.i64($i156);
    call {:si_unique_call 410} {:cexpr "__len"} boogie_si_record_i64($i172);
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 411} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p155, $p154, $i172, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_2;
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p3, $mul.ref(0, 2880)), $mul.ref(2648, 1));
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} $p174 := spinlock_check($p173);
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} $i175 := _raw_spin_lock_irqsave($p174);
    call {:si_unique_call 414} {:cexpr "flags"} boogie_si_record_i64($i175);
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    $i176 := $sext.i32.i64($i156);
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($p155, $mul.ref($i176, 1));
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($add.ref($p153, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    $i180 := $load.i32($M.0, $p179);
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    $i181 := $add.i32($i180, $i156);
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($add.ref($p153, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p183, $i181);
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    $p75, $p76, $i77 := $p153, $p177, $i175;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    $i184 := $add.i32($i53, 1);
    call {:si_unique_call 393} {:cexpr "i"} boogie_si_record_i32($i184);
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    $i185 := $load.i32($M.0, $p49);
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    $i186 := $sgt.i32($i185, $i184);
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    $i187 := $i77;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i186 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    $i52 := $i187;
    goto $bb31;

  $bb74:
    assume $i186 == 1;
    assume {:verifier.code 0} true;
    $i53, $i54, $p55, $p56 := $i184, $i77, $p76, $p75;
    goto $bb74_dummy;

  $bb65:
    assume $i166 == 1;
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 405} $i167 := __printk_ratelimit(.str.19);
    call {:si_unique_call 406} {:cexpr "tmp___8"} boogie_si_record_i32($i167);
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    $i168 := $ne.i32($i167, 0);
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i168 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $p75, $p76, $i77 := $p153, $p155, $i54;
    goto $bb39;

  $bb67:
    assume $i168 == 1;
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 407} $i169 := printk.ref(.str.23);
    call {:si_unique_call 408} {:cexpr "tmp___9"} boogie_si_record_i32($i169);
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    $i170 := $ne.i32($i169, 0);
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i170 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb69:
    assume $i170 == 1;
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb44:
    assume $i95 == 1;
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    $i96 := $add.i32($i82, $sub.i32(0, 8));
    call {:si_unique_call 395} {:cexpr "framelen"} boogie_si_record_i32($i96);
    $i97 := $add.i64($i90, 8);
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($p84, $mul.ref($i97, 1));
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($add.ref($p56, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    $i101 := $load.i32($M.0, $p100);
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    $i102 := $ne.i32($i101, 0);
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    assume !($i102 == 1);
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($add.ref($p56, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    $i124 := $load.i32($M.0, $p123);
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p3, $mul.ref(0, 2880)), $mul.ref(2816, 1));
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    $i126 := $load.i32($M.0, $p125);
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $i127 := $eq.i32($i124, $i126);
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i127 == 1);
    assume {:verifier.code 0} true;
    $p151, $p152 := $p56, $p55;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p120, $p121 := $p151, $p152;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    $p153, $p154, $p155, $i156 := $p120, $p98, $p121, $i96;
    goto $bb64;

  $bb58:
    assume $i127 == 1;
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p3, $mul.ref(0, 2880)), $mul.ref(2840, 1));
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 401} $i129 := list_is_singular($p128);
    call {:si_unique_call 402} {:cexpr "tmp___7"} boogie_si_record_i32($i129);
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    $i130 := $ne.i32($i129, 0);
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i130 == 1);
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2880)), $mul.ref(2840, 1)), $mul.ref(0, 1));
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    $p139 := $load.ref($M.0, $p138);
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p3, $mul.ref(0, 2880)), $mul.ref(2856, 1));
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} list_move_tail($p139, $p140);
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p3, $mul.ref(0, 2880)), $mul.ref(2720, 1));
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 404} __wake_up($p141, 3, 1, $0.ref);
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2880)), $mul.ref(2840, 1)), $mul.ref(0, 1));
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    $p144 := $load.ref($M.0, $p143);
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    $p145 := $bitcast.ref.ref($p144);
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($p145, $mul.ref($sub.ref(0, 112), 128));
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($add.ref($p145, $mul.ref($sub.ref(0, 112), 128)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p148, 0);
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p145, $mul.ref($sub.ref(0, 112), 128)), $mul.ref(88, 1));
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    $p150 := $load.ref($M.0, $p149);
    assume {:verifier.code 0} true;
    $p135, $p136 := $p146, $p150;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    $p151, $p152 := $p135, $p136;
    goto $bb63;

  $bb60:
    assume $i130 == 1;
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($add.ref($p56, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p132, 0);
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p56, $mul.ref(0, 128)), $mul.ref(88, 1));
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    $p134 := $load.ref($M.0, $p133);
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $p135, $p136 := $p56, $p134;
    goto $bb62;

  $bb46:
    assume $i102 == 1;
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($add.ref($p56, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    $i105 := $load.i32($M.0, $p104);
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p3, $mul.ref(0, 2880)), $mul.ref(2816, 1));
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    $i107 := $load.i32($M.0, $p106);
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    $i108 := $ne.i32($i105, $i107);
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    assume !($i108 == 1);
    goto $bb48;

  $bb49:
    assume $i108 == 1;
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 397} $i109 := __printk_ratelimit(.str.19);
    call {:si_unique_call 398} {:cexpr "tmp___4"} boogie_si_record_i32($i109);
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    $i110 := $ne.i32($i109, 0);
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($add.ref($p56, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p117, 0);
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p56, $mul.ref(0, 128)), $mul.ref(88, 1));
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    $p119 := $load.ref($M.0, $p118);
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    $p120, $p121 := $p56, $p119;
    goto $bb57;

  $bb51:
    assume $i110 == 1;
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($add.ref($p56, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    $i113 := $load.i32($M.0, $p112);
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} $i114 := printk.ref.i32.i32(.str.22, $i53, $i113);
    call {:si_unique_call 400} {:cexpr "tmp___5"} boogie_si_record_i32($i114);
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    $i115 := $ne.i32($i114, 0);
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb53:
    assume $i115 == 1;
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb41:
    assume $i92 == 1;
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    $p75, $p76, $i77 := $p56, $p55, $i54;
    goto $bb39;

  $bb34:
    assume $i62 == 1;
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    $i63 := $sext.i32.i64($i53);
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref($i63, 16)), $mul.ref(12, 1));
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.0, $p66);
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    $i68 := $ne.i32($i67, $sub.i32(0, 18));
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p75, $p76, $i77 := $p56, $p55, $i54;
    goto $bb39;

  $bb36:
    assume $i68 == 1;
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    $i69 := $sext.i32.i64($i53);
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref($i69, 16)), $mul.ref(12, 1));
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.0, $p72);
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} vslice_dummy_var_59 := printk.ref.i32.i32(.str.21, $i53, $i73);
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb20:
    assume $i32 == 1;
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 388} $i33 := __printk_ratelimit(.str.19);
    call {:si_unique_call 389} {:cexpr "tmp___0"} boogie_si_record_i32($i33);
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i29 := $i19;
    goto $bb18;

  $bb22:
    assume $i34 == 1;
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} $i35 := printk.ref(.str.20);
    call {:si_unique_call 391} {:cexpr "tmp___1"} boogie_si_record_i32($i35);
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb24:
    assume $i36 == 1;
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb13:
    assume $i22 == 1;
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb15;

  $bb16:
    assume $i25 == 1;
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 382} vslice_dummy_var_58 := printk.ref.i32(.str.18, $i27);
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    $i29 := $i19;
    goto $bb18;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 2880)), $mul.ref(2624, 1));
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} atomic_dec($p16);
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb6;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 377} vslice_dummy_var_57 := printk.ref(.str.17);
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb74_dummy:
    assume false;
    return;

  $bb32_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1954;
}



const ldv_usb_free_urb_5: ref;

axiom ldv_usb_free_urb_5 == $sub.ref(0, 225347);

procedure ldv_usb_free_urb_5($p0: ref);
  free requires assertsPassed;
  modifies $M.4;



implementation ldv_usb_free_urb_5($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} ldv_free_urb($p0);
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    return;
}



const atomic_dec: ref;

axiom atomic_dec == $sub.ref(0, 226379);

procedure atomic_dec($p0: ref);
  free requires assertsPassed;



implementation atomic_dec($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 417} devirtbounce.3(0, $p1, $p1);
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    return;
}



const __printk_ratelimit: ref;

axiom __printk_ratelimit == $sub.ref(0, 227411);

procedure __printk_ratelimit($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __printk_ratelimit($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 1} true;
    call {:si_unique_call 418} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 419} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const list_is_singular: ref;

axiom list_is_singular == $sub.ref(0, 228443);

procedure list_is_singular($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation list_is_singular($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $i3: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} $i1 := list_empty($p0);
    call {:si_unique_call 421} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 0);
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    $i3 := 0;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i3);
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i6, $i9);
    assume {:verifier.code 0} true;
    $i3 := $i10;
    goto $bb3;
}



const __wake_up: ref;

axiom __wake_up == $sub.ref(0, 229475);

procedure __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref);
  free requires assertsPassed;



implementation __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} {:cexpr "__wake_up:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 423} {:cexpr "__wake_up:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    return;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 230507);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const ldv_usb_submit_urb_3: ref;

axiom ldv_usb_submit_urb_3 == $sub.ref(0, 231539);

procedure ldv_usb_submit_urb_3($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.14, $M.16, $M.0, $M.2;



implementation ldv_usb_submit_urb_3($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} {:cexpr "ldv_usb_submit_urb_3:arg:ldv_func_arg2"} boogie_si_record_i32($i1);
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} $i2 := ldv_submit_urb($p0);
    call {:si_unique_call 426} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_alloc_urb: ref;

axiom ldv_alloc_urb == $sub.ref(0, 232571);

procedure ldv_alloc_urb() returns ($r: ref);
  free requires assertsPassed;
  modifies $M.4;



implementation ldv_alloc_urb() returns ($r: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} $p0 := ldv_undef_ptr();
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 428} $i2 := ldv_undef_int();
    call {:si_unique_call 429} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p6 := $M.4;
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p1);
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i5 == 1;
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    $M.4 := $p0;
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const ldv_undef_ptr: ref;

axiom ldv_undef_ptr == $sub.ref(0, 233603);

procedure ldv_undef_ptr() returns ($r: ref);
  free requires assertsPassed;



implementation ldv_undef_ptr() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 1} true;
    call {:si_unique_call 430} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 431} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const kmalloc_array: ref;

axiom kmalloc_array == $sub.ref(0, 234635);

procedure kmalloc_array($i0: i64, $i1: i64, $i2: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kmalloc_array($i0: i64, $i1: i64, $i2: i32) returns ($r: ref)
{
  var $i3: i1;
  var $i4: i64;
  var $i5: i1;
  var $i7: i64;
  var $p8: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 432} {:cexpr "kmalloc_array:arg:n"} boogie_si_record_i64($i0);
    call {:si_unique_call 433} {:cexpr "kmalloc_array:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 434} {:cexpr "kmalloc_array:arg:flags"} boogie_si_record_i32($i2);
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i1, 0);
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 435} $p8 := __kmalloc($i7, $i2);
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    $p6 := $p8;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    $i4 := $udiv.i64($sub.i64(0, 1), $i1);
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    $i5 := $ult.i64($i4, $i0);
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    $p6 := $0.ref;
    goto $bb6;
}



const stk_sensor_init: ref;

axiom stk_sensor_init == $sub.ref(0, 235667);

procedure stk_sensor_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.5, $M.1, $CurrAddr;



implementation stk_sensor_init($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i32;
  var $i11: i1;
  var $i13: i32;
  var $i14: i1;
  var $i16: i32;
  var $i17: i1;
  var $i19: i8;
  var $i20: i32;
  var $i21: i1;
  var $i22: i8;
  var $i23: i32;
  var $i24: i1;
  var $i26: i32;
  var $i27: i1;
  var $i29: i32;
  var $i30: i1;
  var $i33: i8;
  var $i34: i32;
  var $i35: i8;
  var $i36: i32;
  var $i6: i32;
  var vslice_dummy_var_61: i32;
  var vslice_dummy_var_62: i32;
  var vslice_dummy_var_63: i32;
  var vslice_dummy_var_64: i32;
  var vslice_dummy_var_65: i32;
  var vslice_dummy_var_66: i32;
  var vslice_dummy_var_67: i32;
  var vslice_dummy_var_68: i32;
  var vslice_dummy_var_69: i32;
  var vslice_dummy_var_70: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 436} $p1 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p1, 0);
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p2, 0);
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} $i3 := stk_camera_write_reg($p0, 514, 30);
    call {:si_unique_call 439} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 441} $i7 := stk_camera_write_reg($p0, 515, 96);
    call {:si_unique_call 442} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 444} $i10 := stk_sensor_outb($p0, 18, $sub.i8(0, 128));
    call {:si_unique_call 445} {:cexpr "tmp___1"} boogie_si_record_i32($i10);
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} msleep(10);
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} $i13 := stk_sensor_inb($p0, 28, $p2);
    call {:si_unique_call 449} {:cexpr "tmp___2"} boogie_si_record_i32($i13);
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i14 == 1);
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 451} $i16 := stk_sensor_inb($p0, 29, $p1);
    call {:si_unique_call 452} {:cexpr "tmp___3"} boogie_si_record_i32($i16);
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.5, $p2);
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 127);
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb17, $bb19;

  $bb19:
    assume !($i21 == 1);
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.5, $p1);
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 162);
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 455} $i26 := stk_sensor_inb($p0, 10, $p2);
    call {:si_unique_call 456} {:cexpr "tmp___4"} boogie_si_record_i32($i26);
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i27 == 1);
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 458} $i29 := stk_sensor_inb($p0, 11, $p1);
    call {:si_unique_call 459} {:cexpr "tmp___5"} boogie_si_record_i32($i29);
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} vslice_dummy_var_69 := stk_sensor_write_regvals($p0, ov_initvals);
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 462} msleep(10);
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.5, $p2);
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i33);
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.5, $p1);
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i35);
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} vslice_dummy_var_70 := printk.ref.i32.i32.i32(.str.4, $i34, $i36, 96);
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb25:
    assume $i30 == 1;
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 460} vslice_dummy_var_68 := printk.ref(.str.3);
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 19);
    goto $bb3;

  $bb23:
    assume $i27 == 1;
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} vslice_dummy_var_67 := printk.ref(.str.3);
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 19);
    goto $bb3;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 454} vslice_dummy_var_66 := printk.ref(.str.2);
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 19);
    goto $bb3;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb18;

  $bb13:
    assume $i17 == 1;
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 453} vslice_dummy_var_65 := printk.ref(.str.1);
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 19);
    goto $bb3;

  $bb11:
    assume $i14 == 1;
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} vslice_dummy_var_64 := printk.ref(.str.1);
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 19);
    goto $bb3;

  $bb6:
    assume $i11 == 1;
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} vslice_dummy_var_63 := printk.ref(.str);
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 19);
    goto $bb3;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} vslice_dummy_var_62 := printk.ref(.str);
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 19);
    goto $bb3;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} vslice_dummy_var_61 := printk.ref(.str);
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 19);
    goto $bb3;
}



const msleep: ref;

axiom msleep == $sub.ref(0, 236699);

procedure msleep($i0: i32);
  free requires assertsPassed;



implementation msleep($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 464} {:cexpr "msleep:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    return;
}



const stk_sensor_write_regvals: ref;

axiom stk_sensor_write_regvals == $sub.ref(0, 237731);

procedure stk_sensor_write_regvals($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation stk_sensor_write_regvals($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i8;
  var $i9: i32;
  var $i10: i8;
  var $p11: ref;
  var $i12: i32;
  var $i13: i8;
  var $i14: i32;
  var $i15: i8;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $p19: ref;
  var $p5: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $p1;
    goto $bb5;

  $bb5:
    call $p6, $i7, $i8, $i9, $i10, $p11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $p19, $p5, $p20, $i21, $i22, $p23, $i24, $i25 := stk_sensor_write_regvals_loop_$bb5($p0, $p6, $i7, $i8, $i9, $i10, $p11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $p19, $p5, $p20, $i21, $i22, $p23, $i24, $i25);
    goto $bb5_last;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.18, $p20);
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 255);
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb12;

  $bb12:
    assume !($i22 == 1);
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.19, $p23);
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 255);
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i25 == 1;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.18, $p6);
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i8($i7);
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i8($i9);
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.19, $p11);
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i8($i12);
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i8($i14);
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} $i16 := stk_sensor_outb($p0, $i10, $i15);
    call {:si_unique_call 466} {:cexpr "ret"} boogie_si_record_i32($i16);
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    $i18 := $i16;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p5, $mul.ref(1, 8));
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    $p5 := $p19;
    goto corral_source_split_2266_dummy;

  $bb7:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    $i4 := $i18;
    goto $bb3;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb11;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  corral_source_split_2266_dummy:
    assume false;
    return;

  $bb5_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2246;
}



const stk_vidioc_querycap: ref;

axiom stk_vidioc_querycap == $sub.ref(0, 238763);

procedure stk_vidioc_querycap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation stk_vidioc_querycap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $p20: ref;
  var vslice_dummy_var_71: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 467} $p3 := video_drvdata($p0);
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(0, 1));
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} $p7 := strcpy($p6, .str.51);
    assume $isExternal($p7);
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(16, 1));
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 469} $p10 := strcpy($p9, .str.51);
    assume $isExternal($p10);
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 2880)), $mul.ref(2416, 1));
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(48, 1));
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} vslice_dummy_var_71 := usb_make_path($p12, $p14, 32);
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(88, 1));
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, 83886081);
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(88, 1));
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    $i19 := $or.i32($i18, $sub.i32(0, 2147483648));
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(84, 1));
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, $i19);
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const stk_vidioc_enum_fmt_vid_cap: ref;

axiom stk_vidioc_enum_fmt_vid_cap == $sub.ref(0, 239795);

procedure stk_vidioc_enum_fmt_vid_cap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation stk_vidioc_enum_fmt_vid_cap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i4, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i4, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i4, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i4, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32(0, 22);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    $r := $i31;
    return;

  $bb8:
    assume $i8 == 1;
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(44, 1));
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, 1448695129);
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(12, 1));
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 473} $p30 := strcpy($p29, .str.48);
    assume $isExternal($p30);
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i31 := 0;
    goto $bb17;

  $bb6:
    assume $i7 == 1;
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(44, 1));
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, 825770306);
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(12, 1));
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 472} $p26 := strcpy($p25, .str.49);
    assume $isExternal($p26);
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(44, 1));
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, 1498831189);
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(12, 1));
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} $p22 := strcpy($p21, .str.48);
    assume $isExternal($p22);
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb2:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i4, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i9 == 1);
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(44, 1));
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, 1380075346);
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(12, 1));
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 474} $p18 := strcpy($p17, .str.47);
    assume $isExternal($p18);
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb11:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i4, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb10;

  $bb13:
    assume $i10 == 1;
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(44, 1));
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, 1346520914);
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(12, 1));
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 475} $p14 := strcpy($p13, .str.46);
    assume $isExternal($p14);
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    goto $bb15;
}



const stk_vidioc_g_fmt_vid_cap: ref;

axiom stk_vidioc_g_fmt_vid_cap == $sub.ref(0, 240827);

procedure stk_vidioc_g_fmt_vid_cap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation stk_vidioc_g_fmt_vid_cap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i13: i32;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i12: i32;
  var $i18: i1;
  var $i21: i64;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $i26: i64;
  var $p28: ref;
  var $i29: i32;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p34: ref;
  var $i35: i32;
  var $p36: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $i42: i32;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $i46: i32;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $p50: ref;
  var $i51: i32;
  var $i52: i32;
  var $p53: ref;
  var $p54: ref;
  var $i20: i32;
  var $i55: i32;
  var $p57: ref;
  var $i58: i32;
  var $i59: i1;
  var $i60: i32;
  var $p62: ref;
  var $i63: i32;
  var $i64: i1;
  var $i65: i32;
  var $p67: ref;
  var $i68: i32;
  var $i69: i1;
  var vslice_dummy_var_72: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 476} $p5 := video_drvdata($p0);
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.20, $add.ref($add.ref($add.ref(stk_sizes, $mul.ref(0, 60)), $mul.ref(0, 12)), $mul.ref(8, 1)));
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 2880)), $mul.ref(2628, 1)), $mul.ref(0, 1));
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i13, $i16);
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    $i12 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i12, 5);
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i12);
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref(stk_sizes, $mul.ref(0, 60)), $mul.ref($i21, 12)), $mul.ref(0, 1));
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.21, $p23);
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p25, $i24);
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i12);
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref(stk_sizes, $mul.ref(0, 60)), $mul.ref($i26, 12)), $mul.ref(4, 1));
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.22, $p28);
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, $i29);
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p31, 1);
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, 8);
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 2880)), $mul.ref(2628, 1)), $mul.ref(4, 1));
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, $i35);
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 2880)), $mul.ref(2628, 1)), $mul.ref(4, 1));
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, 825770306);
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i40 == 1);
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    $i46 := $mul.i32($i45, 2);
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p47, $i46);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p48);
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    $i52 := $mul.i32($i49, $i51);
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(20, 1));
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p53, $i52);
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(28, 1));
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p54, 0);
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    $i20 := 0;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  $bb13:
    assume $i40 == 1;
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p43, $i42);
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb9:
    assume $i18 == 1;
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 477} vslice_dummy_var_72 := printk.ref(.str.50);
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, 22);
    goto $bb11;

  $bb6:
    assume $i17 == 1;
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.20, $add.ref($add.ref($add.ref(stk_sizes, $mul.ref(0, 60)), $mul.ref(1, 12)), $mul.ref(8, 1)));
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 2880)), $mul.ref(2628, 1)), $mul.ref(0, 1));
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i7, $i10);
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    $i12 := 1;
    assume {:branchcond $i11} true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb5;

  $bb3:
    assume $i11 == 1;
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.20, $add.ref($add.ref($add.ref(stk_sizes, $mul.ref(0, 60)), $mul.ref(2, 12)), $mul.ref(8, 1)));
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 2880)), $mul.ref(2628, 1)), $mul.ref(0, 1));
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.0, $p57);
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    $i59 := $ne.i32($i55, $i58);
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    $i12 := 2;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i59 == 1);
    goto $bb5;

  $bb17:
    assume $i59 == 1;
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.20, $add.ref($add.ref($add.ref(stk_sizes, $mul.ref(0, 60)), $mul.ref(3, 12)), $mul.ref(8, 1)));
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 2880)), $mul.ref(2628, 1)), $mul.ref(0, 1));
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.0, $p62);
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i60, $i63);
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    $i12 := 3;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i64 == 1);
    goto $bb5;

  $bb20:
    assume $i64 == 1;
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.20, $add.ref($add.ref($add.ref(stk_sizes, $mul.ref(0, 60)), $mul.ref(4, 12)), $mul.ref(8, 1)));
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 2880)), $mul.ref(2628, 1)), $mul.ref(0, 1));
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.0, $p67);
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    $i69 := $ne.i32($i65, $i68);
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    $i12 := 4;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i69 == 1);
    goto $bb5;

  $bb23:
    assume $i69 == 1;
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i12 := 5;
    goto $bb5;
}



const stk_vidioc_s_fmt_vid_cap: ref;

axiom stk_vidioc_s_fmt_vid_cap == $sub.ref(0, 241859);

procedure stk_vidioc_s_fmt_vid_cap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.23, $M.5, $M.1, $CurrAddr, $M.4;



implementation stk_vidioc_s_fmt_vid_cap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;
  var $i34: i32;
  var $i35: i64;
  var $p37: ref;
  var $i38: i32;
  var $p40: ref;
  var $i42: i32;
  var $i8: i32;
  var vslice_dummy_var_73: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 478} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 479} $p4 := video_drvdata($p0);
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 2880)), $mul.ref(2644, 1));
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 1);
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p5, $mul.ref(0, 2880)), $mul.ref(2644, 1));
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i14, 8);
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p5, $mul.ref(0, 2880)), $mul.ref(2440, 1));
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} $i21 := stk_try_fmt_vid_cap($p0, $p2, $p3);
    call {:si_unique_call 481} {:cexpr "ret"} boogie_si_record_i32($i21);
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 2880)), $mul.ref(2628, 1)), $mul.ref(4, 1));
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, $i26);
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} stk_free_buffers($p5);
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 32)), $mul.ref(20, 1));
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p5, $mul.ref(0, 2880)), $mul.ref(2816, 1));
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, $i32);
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.23, $p3);
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    $i35 := $sext.i32.i64($i34);
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref(stk_sizes, $mul.ref(0, 60)), $mul.ref($i35, 12)), $mul.ref(8, 1));
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.20, $p37);
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 2880)), $mul.ref(2628, 1)), $mul.ref(0, 1));
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p40, $i38);
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} vslice_dummy_var_73 := stk_initialise($p5);
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} $i42 := stk_setup_format($p5);
    call {:si_unique_call 485} {:cexpr "tmp___0"} boogie_si_record_i32($i42);
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    $i8 := $i42;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb14:
    assume $i22 == 1;
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    $i8 := $i21;
    goto $bb3;

  $bb11:
    assume $i20 == 1;
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 16);
    goto $bb3;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 16);
    goto $bb3;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 19);
    goto $bb3;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 19);
    goto $bb3;
}



const stk_vidioc_try_fmt_vid_cap: ref;

axiom stk_vidioc_try_fmt_vid_cap == $sub.ref(0, 242891);

procedure stk_vidioc_try_fmt_vid_cap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.23;



implementation stk_vidioc_try_fmt_vid_cap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 486} $i3 := stk_try_fmt_vid_cap($p0, $p2, $0.ref);
    call {:si_unique_call 487} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const stk_vidioc_reqbufs: ref;

axiom stk_vidioc_reqbufs == $sub.ref(0, 243923);

procedure stk_vidioc_reqbufs($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $CurrAddr;



implementation stk_vidioc_reqbufs($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $p45: ref;
  var $i46: i32;
  var $p47: ref;
  var $i7: i32;
  var vslice_dummy_var_74: i32;
  var vslice_dummy_var_75: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} $p3 := video_drvdata($p0);
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 20)), $mul.ref(8, 1));
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 1);
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 2880)), $mul.ref(2644, 1));
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i12, 8);
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i14 == 1);
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 2880)), $mul.ref(2440, 1));
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} stk_free_buffers($p4);
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 0);
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p4, $mul.ref(0, 2880)), $mul.ref(2440, 1));
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p33, $p0);
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p2, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    $i36 := $ule.i32($i35, 2);
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i36 == 1);
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p2, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    $i40 := $ugt.i32($i39, 5);
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p2, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} vslice_dummy_var_75 := stk_allocate_buffers($p4, $i43);
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p4, $mul.ref(0, 2880)), $mul.ref(2824, 1));
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p2, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p47, $i46);
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb23:
    assume $i40 == 1;
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p2, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p41, 5);
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb20:
    assume $i36 == 1;
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p2, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p37, 3);
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume $i26 == 1;
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 490} vslice_dummy_var_74 := stk_camera_write_reg($p4, 0, 73);
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p4, $mul.ref(0, 2880)), $mul.ref(2644, 1));
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    $i30 := $and.i32($i29, $sub.i32(0, 3));
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p4, $mul.ref(0, 2880)), $mul.ref(2644, 1));
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p31, $i30);
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p4, $mul.ref(0, 2880)), $mul.ref(2440, 1));
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p32, $0.ref);
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb11:
    assume $i18 == 1;
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p4, $mul.ref(0, 2880)), $mul.ref(2440, 1));
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p0);
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i21, $i22);
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb13;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 16);
    goto $bb3;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb9;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 19);
    goto $bb3;
}



const stk_vidioc_querybuf: ref;

axiom stk_vidioc_querybuf == $sub.ref(0, 244955);

procedure stk_vidioc_querybuf($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation stk_vidioc_querybuf($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i64;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i10: i32;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} $p3 := video_drvdata($p0);
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 2880)), $mul.ref(2824, 1));
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    $i9 := $uge.i32($i6, $i8);
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 2880)), $mul.ref(2832, 1));
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    $i15 := $zext.i32.i64($i14);
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p12, $mul.ref($i15, 128)), $mul.ref(0, 1));
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p2);
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p17);
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.0;
    cmdloc_dummy_var_4 := $M.0;
    call {:si_unique_call 493} cmdloc_dummy_var_5 := $memcpy.i8(cmdloc_dummy_var_3, cmdloc_dummy_var_4, $p18, $p19, 88, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_5;
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 22);
    goto $bb3;
}



const stk_vidioc_qbuf: ref;

axiom stk_vidioc_qbuf == $sub.ref(0, 245987);

procedure stk_vidioc_qbuf($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation stk_vidioc_qbuf($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i64;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $p30: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i32;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i8: i32;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} $p3 := video_drvdata($p0);
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(60, 1));
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 1);
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 2880)), $mul.ref(2824, 1));
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    $i13 := $uge.i32($i10, $i12);
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 2880)), $mul.ref(2832, 1));
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    $i18 := $zext.i32.i64($i17);
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p15, $mul.ref($i18, 128)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    $i23 := $and.i32($i22, 2);
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p15, $mul.ref($i18, 128)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    $i28 := $or.i32($i27, 2);
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p15, $mul.ref($i18, 128)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, $i28);
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p15, $mul.ref($i18, 128)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    $i34 := $and.i32($i33, $sub.i32(0, 5));
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p15, $mul.ref($i18, 128)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, $i34);
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p4, $mul.ref(0, 2880)), $mul.ref(2648, 1));
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 495} $p38 := spinlock_check($p37);
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} $i39 := _raw_spin_lock_irqsave($p38);
    call {:si_unique_call 497} {:cexpr "flags"} boogie_si_record_i64($i39);
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p15, $mul.ref($i18, 128)), $mul.ref(112, 1));
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p4, $mul.ref(0, 2880)), $mul.ref(2840, 1));
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 498} list_add_tail($p40, $p41);
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p15, $mul.ref($i18, 128)), $mul.ref(0, 1));
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p2);
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p42);
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_6 := $M.0;
    cmdloc_dummy_var_7 := $M.0;
    call {:si_unique_call 499} cmdloc_dummy_var_8 := $memcpy.i8(cmdloc_dummy_var_6, cmdloc_dummy_var_7, $p43, $p44, 88, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_8;
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p4, $mul.ref(0, 2880)), $mul.ref(2648, 1));
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} spin_unlock_irqrestore($p45, $i39);
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb8:
    assume $i24 == 1;
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 22);
    goto $bb3;
}



const stk_vidioc_dqbuf: ref;

axiom stk_vidioc_dqbuf == $sub.ref(0, 247019);

procedure stk_vidioc_dqbuf($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $M.8, $M.9, $M.10, $M.11, $M.0, $CurrAddr;



implementation stk_vidioc_dqbuf($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p32: ref;
  var $p33: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $i41: i32;
  var $i42: i32;
  var $i43: i1;
  var $p45: ref;
  var $i46: i32;
  var $i47: i1;
  var $i48: i32;
  var $i49: i1;
  var $i44: i32;
  var $p50: ref;
  var $i51: i32;
  var $i52: i1;
  var $p53: ref;
  var $i54: i32;
  var $i55: i32;
  var $i56: i1;
  var $p57: ref;
  var $p58: ref;
  var $i59: i64;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p65: ref;
  var $p66: ref;
  var $p68: ref;
  var $i69: i32;
  var $i70: i32;
  var $p72: ref;
  var $p74: ref;
  var $i75: i32;
  var $i76: i32;
  var $p78: ref;
  var $p79: ref;
  var $i80: i32;
  var $i81: i32;
  var $p82: ref;
  var $p83: ref;
  var $i84: i32;
  var $p86: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $i10: i32;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;
  var cmdloc_dummy_var_11: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} $p4 := video_drvdata($p0);
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 2880)), $mul.ref(2644, 1));
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 8);
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 360)), $mul.ref(136, 1));
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i12, 2048);
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p5, $mul.ref(0, 2880)), $mul.ref(2856, 1));
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 505} $i19 := list_empty($p18);
    call {:si_unique_call 506} {:cexpr "tmp___5"} boogie_si_record_i32($i19);
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i51 := 0;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 0);
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p5, $mul.ref(0, 2880)), $mul.ref(2644, 1));
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p53);
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    $i55 := $and.i32($i54, 1);
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    $i56 := $eq.i32($i55, 0);
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p5, $mul.ref(0, 2880)), $mul.ref(2648, 1));
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} $p58 := spinlock_check($p57);
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} $i59 := _raw_spin_lock_irqsave($p58);
    call {:si_unique_call 521} {:cexpr "flags"} boogie_si_record_i64($i59);
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 2880)), $mul.ref(2856, 1)), $mul.ref(0, 1));
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p62);
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p63, $mul.ref($sub.ref(0, 112), 128)), $mul.ref(112, 1));
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 522} list_del_init($p65);
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p5, $mul.ref(0, 2880)), $mul.ref(2648, 1));
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 523} spin_unlock_irqrestore($p66, $i59);
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($add.ref($p63, $mul.ref($sub.ref(0, 112), 128)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.0, $p68);
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    $i70 := $and.i32($i69, $sub.i32(0, 3));
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($p63, $mul.ref($sub.ref(0, 112), 128)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p72, $i70);
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($p63, $mul.ref($sub.ref(0, 112), 128)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.0, $p74);
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    $i76 := $or.i32($i75, 4);
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($p63, $mul.ref($sub.ref(0, 112), 128)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p78, $i76);
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p5, $mul.ref(0, 2880)), $mul.ref(2872, 1));
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    $i80 := $load.i32($M.0, $p79);
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    $i81 := $add.i32($i80, 1);
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p5, $mul.ref(0, 2880)), $mul.ref(2872, 1));
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p82, $i81);
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p5, $mul.ref(0, 2880)), $mul.ref(2872, 1));
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    $i84 := $load.i32($M.0, $p83);
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($add.ref($p63, $mul.ref($sub.ref(0, 112), 128)), $mul.ref(0, 1)), $mul.ref(56, 1));
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p86, $i84);
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($add.ref($p63, $mul.ref($sub.ref(0, 112), 128)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} v4l2_get_timestamp($p88);
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p63, $mul.ref($sub.ref(0, 112), 128)), $mul.ref(0, 1));
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    $p90 := $bitcast.ref.ref($p2);
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    $p91 := $bitcast.ref.ref($p89);
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_9 := $M.0;
    cmdloc_dummy_var_10 := $M.0;
    call {:si_unique_call 525} cmdloc_dummy_var_11 := $memcpy.i8(cmdloc_dummy_var_9, cmdloc_dummy_var_10, $p90, $p91, 88, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_11;
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb34:
    assume $i56 == 1;
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 5);
    goto $bb3;

  $bb31:
    assume $i52 == 1;
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    $i10 := $i51;
    goto $bb3;

  $bb11:
    assume $i20 == 1;
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p5, $mul.ref(0, 2880)), $mul.ref(2644, 1));
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    $i23 := $and.i32($i22, 1);
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb13;

  $bb14:
    assume $i24 == 1;
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} $p25 := get_current();
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p26, 0);
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p28, $p25);
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p29, autoremove_wake_function);
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p32, $p30);
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p35, $p33);
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p5, $mul.ref(0, 2880)), $mul.ref(2720, 1));
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} prepare_to_wait($p36, $p3, 1);
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p5, $mul.ref(0, 2880)), $mul.ref(2856, 1));
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 509} $i38 := list_empty($p37);
    call {:si_unique_call 510} {:cexpr "tmp___2"} boogie_si_record_i32($i38);
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 0);
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb16, $bb18;

  $bb18:
    assume !($i39 == 1);
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    call $p40, $i41, $i42, $i43, $p45, $i46, $i47, $i48, $i49 := stk_vidioc_dqbuf_loop_$bb19($p3, $p5, $p36, $p37, $p40, $i41, $i42, $i43, $p45, $i46, $i47, $i48, $i49);
    goto $bb19_last;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    $i42 := $and.i32($i41, 1);
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, 0);
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} $p45 := get_current();
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} $i46 := signal_pending($p45);
    call {:si_unique_call 514} {:cexpr "tmp___4"} boogie_si_record_i32($i46);
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i46, 0);
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i44 := $sub.i32(0, 512);
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p5, $mul.ref(0, 2880)), $mul.ref(2720, 1));
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} finish_wait($p50, $p3);
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    $i51 := $i44;
    goto $bb30;

  $bb25:
    assume $i47 == 1;
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} schedule();
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} prepare_to_wait($p36, $p3, 1);
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} $i48 := list_empty($p37);
    call {:si_unique_call 518} {:cexpr "tmp___2"} boogie_si_record_i32($i48);
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i48, 0);
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i49 == 1);
    goto $bb29_dummy;

  $bb22:
    assume $i49 == 1;
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i44 := 0;
    goto $bb23;

  $bb20:
    assume $i43 == 1;
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i39 == 1;
    goto $bb17;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p5, $mul.ref(0, 2880)), $mul.ref(2856, 1));
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} $i16 := list_empty($p15);
    call {:si_unique_call 504} {:cexpr "tmp___0"} boogie_si_record_i32($i16);
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i17 == 1;
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 11);
    goto $bb3;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 22);
    goto $bb3;

  $bb29_dummy:
    assume false;
    return;

  $bb19_last:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p5, $mul.ref(0, 2880)), $mul.ref(2644, 1));
    goto corral_source_split_2700;
}



const stk_vidioc_streamon: ref;

axiom stk_vidioc_streamon == $sub.ref(0, 248051);

procedure stk_vidioc_streamon($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.5, $CurrAddr, $M.14, $M.16, $M.2;



implementation stk_vidioc_streamon($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 526} {:cexpr "stk_vidioc_streamon:arg:type"} boogie_si_record_i32($i2);
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 527} $p3 := video_drvdata($p0);
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 2880)), $mul.ref(2644, 1));
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 8);
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 2880)), $mul.ref(2832, 1));
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 2880)), $mul.ref(2872, 1));
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, 0);
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} $i15 := stk_start_stream($p4);
    call {:si_unique_call 529} {:cexpr "tmp___0"} boogie_si_record_i32($i15);
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    $i9 := $i15;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;
}



const stk_vidioc_streamoff: ref;

axiom stk_vidioc_streamoff == $sub.ref(0, 249083);

procedure stk_vidioc_streamoff($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $CurrAddr, $M.5;



implementation stk_vidioc_streamoff($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $i14: i32;
  var $p29: ref;
  var vslice_dummy_var_76: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} {:cexpr "stk_vidioc_streamoff:arg:type"} boogie_si_record_i32($i2);
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 531} $p3 := video_drvdata($p0);
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} vslice_dummy_var_76 := stk_stop_stream($p4);
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 2880)), $mul.ref(2648, 1));
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 533} $p7 := spinlock_check($p6);
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 534} $i8 := _raw_spin_lock_irqsave($p7);
    call {:si_unique_call 535} {:cexpr "flags"} boogie_si_record_i64($i8);
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 2880)), $mul.ref(2840, 1));
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} INIT_LIST_HEAD($p9);
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 2880)), $mul.ref(2856, 1));
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 537} INIT_LIST_HEAD($p10);
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 2880)), $mul.ref(2824, 1));
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    $i13 := $ult.i32(0, $i12);
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p4, $mul.ref(0, 2880)), $mul.ref(2648, 1));
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} spin_unlock_irqrestore($p29, $i8);
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb4;

  $bb4:
    call $p15, $p16, $i17, $p19, $p20, $p21, $i22, $p25, $i26, $i27, $i28, $i14 := stk_vidioc_streamoff_loop_$bb4($p4, $p11, $p15, $p16, $i17, $p19, $p20, $p21, $i22, $p25, $i26, $i27, $i28, $i14);
    goto $bb4_last;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 2880)), $mul.ref(2832, 1));
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i14);
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p16, $mul.ref($i17, 128)), $mul.ref(112, 1));
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} INIT_LIST_HEAD($p19);
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p4, $mul.ref(0, 2880)), $mul.ref(2832, 1));
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i14);
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p21, $mul.ref($i22, 128)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p25, 0);
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i14, 1);
    call {:si_unique_call 539} {:cexpr "i"} boogie_si_record_i32($i26);
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p11);
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    $i28 := $ult.i32($i26, $i27);
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i28 == 1);
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    $i14 := $i26;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2813;
}



const stk_vidioc_enum_input: ref;

axiom stk_vidioc_enum_input == $sub.ref(0, 250115);

procedure stk_vidioc_enum_input($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation stk_vidioc_enum_input($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(4, 1));
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} $p9 := strcpy($p8, .str.53);
    assume $isExternal($p9);
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(36, 1));
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, 2);
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;
}



const stk_vidioc_g_input: ref;

axiom stk_vidioc_g_input == $sub.ref(0, 251147);

procedure stk_vidioc_g_input($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation stk_vidioc_g_input($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 0);
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const stk_vidioc_s_input: ref;

axiom stk_vidioc_s_input == $sub.ref(0, 252179);

procedure stk_vidioc_s_input($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation stk_vidioc_s_input($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} {:cexpr "stk_vidioc_s_input:arg:i"} boogie_si_record_i32($i2);
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    $i4 := (if $i3 == 1 then $sub.i32(0, 22) else 0);
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const stk_vidioc_g_parm: ref;

axiom stk_vidioc_g_parm == $sub.ref(0, 253211);

procedure stk_vidioc_g_parm($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation stk_vidioc_g_parm($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 204)), $mul.ref(4, 1));
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, 1);
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 204)), $mul.ref(4, 1));
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(8, 1)), $mul.ref(4, 1));
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, 30);
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 204)), $mul.ref(4, 1));
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, 2);
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const v4l2_ctrl_log_status: ref;

axiom v4l2_ctrl_log_status == $sub.ref(0, 254243);

procedure v4l2_ctrl_log_status($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation v4l2_ctrl_log_status($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 1} true;
    call {:si_unique_call 543} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 544} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const stk_vidioc_enum_framesizes: ref;

axiom stk_vidioc_enum_framesizes == $sub.ref(0, 255275);

procedure stk_vidioc_enum_framesizes($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation stk_vidioc_enum_framesizes($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i64;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i64;
  var $p32: ref;
  var $i33: i32;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(0, 1));
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    $i5 := $ugt.i32($i4, 4);
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(4, 1));
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i8, 1380075346);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i8, 1448695129);
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i8, 1498831189);
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i8, 1498831189);
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb12, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, 1);
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(0, 1));
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    $i21 := $zext.i32.i64($i20);
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref(stk_sizes, $mul.ref(0, 60)), $mul.ref($i21, 12)), $mul.ref(0, 1));
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.21, $p23);
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(12, 1));
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, $i24);
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(0, 1));
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    $i30 := $zext.i32.i64($i29);
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref(stk_sizes, $mul.ref(0, 60)), $mul.ref($i30, 12)), $mul.ref(4, 1));
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.22, $p32);
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(12, 1));
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, $i33);
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb10:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i8, 1448695129);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb16, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb15;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb17;

  $bb8:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i8, 1380075346);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb19, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb15;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb6:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i8, 1346520914);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i8, 1346520914);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb15;

  $bb24:
    assume $i16 == 1;
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb22:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i8, 825770306);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb15;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb27;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;
}



const v4l2_ctrl_subscribe_event: ref;

axiom v4l2_ctrl_subscribe_event == $sub.ref(0, 256307);

procedure v4l2_ctrl_subscribe_event($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation v4l2_ctrl_subscribe_event($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 1} true;
    call {:si_unique_call 545} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 546} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const v4l2_event_unsubscribe: ref;

axiom v4l2_event_unsubscribe == $sub.ref(0, 257339);

procedure v4l2_event_unsubscribe($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation v4l2_event_unsubscribe($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 1} true;
    call {:si_unique_call 547} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 548} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const strcpy: ref;

axiom strcpy == $sub.ref(0, 258371);

procedure strcpy($p0: ref, $p1: ref) returns ($r: ref);



const list_del_init: ref;

axiom list_del_init == $sub.ref(0, 259403);

procedure list_del_init($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation list_del_init($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 549} __list_del_entry($p0);
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} INIT_LIST_HEAD($p0);
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    return;
}



const v4l2_get_timestamp: ref;

axiom v4l2_get_timestamp == $sub.ref(0, 260435);

procedure v4l2_get_timestamp($p0: ref);
  free requires assertsPassed;



implementation v4l2_get_timestamp($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    return;
}



const stk_try_fmt_vid_cap: ref;

axiom stk_try_fmt_vid_cap == $sub.ref(0, 261467);

procedure stk_try_fmt_vid_cap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.23;



implementation stk_try_fmt_vid_cap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i32;
  var $i32: i64;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $i37: i1;
  var $i38: i32;
  var $i39: i32;
  var $i40: i64;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $i45: i64;
  var $p47: ref;
  var $i48: i32;
  var $i49: i32;
  var $i50: i1;
  var $i51: i32;
  var $i52: i32;
  var $i53: i64;
  var $i54: i1;
  var $i26: i32;
  var $i55: i32;
  var $i56: i64;
  var $p58: ref;
  var $i59: i32;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i32;
  var $i64: i64;
  var $p66: ref;
  var $i67: i32;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i64;
  var $i72: i1;
  var $i73: i32;
  var $i74: i64;
  var $p76: ref;
  var $i77: i32;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $i81: i64;
  var $p83: ref;
  var $i84: i32;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $i88: i64;
  var $i89: i1;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $i99: i32;
  var $i100: i1;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $i104: i32;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $i111: i32;
  var $i112: i32;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $i119: i32;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $i123: i32;
  var $i124: i32;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $i16: i32;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $i134: i32;
  var $i135: i32;
  var $i136: i1;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $i140: i32;
  var $i141: i32;
  var $i142: i1;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $i146: i32;
  var $i147: i32;
  var $i148: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i6, 1380075346);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i6, 1448695129);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i6, 1498831189);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i6, 1498831189);
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb8, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 22);
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.21, $add.ref($add.ref($add.ref(stk_sizes, $mul.ref(0, 60)), $mul.ref(1, 12)), $mul.ref(0, 1)));
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    $i22 := $ugt.i32($i20, $i21);
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    $i23 := 1;
    assume true;
    goto $bb30, $bb32;

  $bb32:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    $p132 := $bitcast.ref.ref($p131);
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p132, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    $i134 := $load.i32($M.0, $p133);
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    $i135 := $load.i32($M.21, $add.ref($add.ref($add.ref(stk_sizes, $mul.ref(0, 60)), $mul.ref(2, 12)), $mul.ref(0, 1)));
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    $i136 := $ugt.i32($i134, $i135);
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    $i23 := 2;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i136 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    $p138 := $bitcast.ref.ref($p137);
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p138, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    $i140 := $load.i32($M.0, $p139);
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    $i141 := $load.i32($M.21, $add.ref($add.ref($add.ref(stk_sizes, $mul.ref(0, 60)), $mul.ref(3, 12)), $mul.ref(0, 1)));
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    $i142 := $ugt.i32($i140, $i141);
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    $i23 := 3;
    assume {:branchcond $i142} true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i142 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    $p144 := $bitcast.ref.ref($p143);
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p144, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    $i146 := $load.i32($M.0, $p145);
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    $i147 := $load.i32($M.21, $add.ref($add.ref($add.ref(stk_sizes, $mul.ref(0, 60)), $mul.ref(4, 12)), $mul.ref(0, 1)));
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    $i148 := $ugt.i32($i146, $i147);
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    $i23 := 4;
    assume {:branchcond $i148} true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i148 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i24 := 5;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 5);
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i25 == 1);
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    $i31 := $add.i32($i24, $sub.i32(0, 1));
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    $i32 := $sext.i32.i64($i31);
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref(stk_sizes, $mul.ref(0, 60)), $mul.ref($i32, 12)), $mul.ref(0, 1));
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.21, $p34);
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    $i36 := $sub.i32($i30, $i35);
    call {:si_unique_call 551} {:cexpr "__x___0"} boogie_si_record_i32($i36);
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    $i37 := $slt.i32($i36, 0);
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i37 == 1);
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    $i39 := $i36;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    $i40 := $sext.i32.i64($i39);
    call {:si_unique_call 552} {:cexpr "ret"} boogie_si_record_i64($i40);
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p42, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    $i45 := $sext.i32.i64($i24);
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref(stk_sizes, $mul.ref(0, 60)), $mul.ref($i45, 12)), $mul.ref(0, 1));
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.21, $p47);
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    $i49 := $sub.i32($i44, $i48);
    call {:si_unique_call 553} {:cexpr "__x___2"} boogie_si_record_i32($i49);
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    $i50 := $slt.i32($i49, 0);
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i50 == 1);
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    $i52 := $i49;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    $i53 := $sext.i32.i64($i52);
    call {:si_unique_call 554} {:cexpr "ret___0"} boogie_si_record_i64($i53);
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    $i54 := $slt.i64($i40, $i53);
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i54 == 1);
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    $i74 := $sext.i32.i64($i24);
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref(stk_sizes, $mul.ref(0, 60)), $mul.ref($i74, 12)), $mul.ref(4, 1));
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.22, $p76);
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    $p79 := $bitcast.ref.ref($p78);
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p79, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p80, $i77);
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    $i81 := $sext.i32.i64($i24);
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($add.ref(stk_sizes, $mul.ref(0, 60)), $mul.ref($i81, 12)), $mul.ref(0, 1));
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    $i84 := $load.i32($M.21, $p83);
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    $p86 := $bitcast.ref.ref($p85);
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p86, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p87, $i84);
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    $i88 := $p2i.ref.i64($p2);
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    $i89 := $ne.i64($i88, 0);
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    assume {:branchcond $i89} true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    $p91 := $bitcast.ref.ref($p90);
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p91, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p92, 1);
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    $p94 := $bitcast.ref.ref($p93);
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p94, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p95, 8);
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    $p97 := $bitcast.ref.ref($p96);
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p97, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    $i99 := $load.i32($M.0, $p98);
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    $i100 := $eq.i32($i99, 825770306);
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i100 == 1);
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    $p109 := $bitcast.ref.ref($p108);
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p109, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    $i111 := $load.i32($M.0, $p110);
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    $i112 := $mul.i32($i111, 2);
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    $p114 := $bitcast.ref.ref($p113);
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p114, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p115, $i112);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    $p117 := $bitcast.ref.ref($p116);
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p117, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    $i119 := $load.i32($M.0, $p118);
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    $p121 := $bitcast.ref.ref($p120);
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p121, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $i123 := $load.i32($M.0, $p122);
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    $i124 := $mul.i32($i119, $i123);
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    $p126 := $bitcast.ref.ref($p125);
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p126, $mul.ref(0, 32)), $mul.ref(20, 1));
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p127, $i124);
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    $p129 := $bitcast.ref.ref($p128);
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p129, $mul.ref(0, 32)), $mul.ref(28, 1));
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p130, 0);
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb27;

  $bb56:
    assume $i100 == 1;
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $p102 := $bitcast.ref.ref($p101);
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p102, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    $i104 := $load.i32($M.0, $p103);
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    $p106 := $bitcast.ref.ref($p105);
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p106, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p107, $i104);
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb52:
    assume $i89 == 1;
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    $M.23 := $store.i32($M.23, $p2, $i24);
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb46:
    assume $i54 == 1;
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    $i26 := $i24;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    $i55 := $add.i32($i24, $sub.i32(0, 1));
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    $i56 := $sext.i32.i64($i55);
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref(stk_sizes, $mul.ref(0, 60)), $mul.ref($i56, 12)), $mul.ref(4, 1));
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.22, $p58);
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p60);
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p61, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p62, $i59);
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    $i63 := $add.i32($i24, $sub.i32(0, 1));
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    $i64 := $sext.i32.i64($i63);
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref(stk_sizes, $mul.ref(0, 60)), $mul.ref($i64, 12)), $mul.ref(0, 1));
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.21, $p66);
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p68);
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p69, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p70, $i67);
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    $i71 := $p2i.ref.i64($p2);
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    $i72 := $ne.i64($i71, 0);
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    assume {:branchcond $i72} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb48:
    assume $i72 == 1;
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    $i73 := $add.i32($i26, $sub.i32(0, 1));
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    $M.23 := $store.i32($M.23, $p2, $i73);
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb43:
    assume $i50 == 1;
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    $i51 := $sub.i32(0, $i49);
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    $i52 := $i51;
    goto $bb45;

  $bb40:
    assume $i37 == 1;
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    $i38 := $sub.i32(0, $i36);
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    $i39 := $i38;
    goto $bb42;

  $bb37:
    assume $i25 == 1;
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    $i26 := $i24;
    goto $bb39;

  $bb67:
    assume {:verifier.code 0} true;
    assume $i148 == 1;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    $i24 := $i23;
    goto $bb33;

  $bb63:
    assume {:verifier.code 0} true;
    assume $i142 == 1;
    goto $bb31;

  $bb59:
    assume {:verifier.code 0} true;
    assume $i136 == 1;
    goto $bb31;

  $bb30:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb31;

  $bb6:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i6, 1448695129);
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb12, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb11;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb13;

  $bb4:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i6, 1380075346);
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb15, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb11;

  $bb15:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb2:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i6, 1346520914);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i6, 1346520914);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb11;

  $bb20:
    assume $i14 == 1;
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb18:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i6, 825770306);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb11;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb23;
}



const stk_setup_format: ref;

axiom stk_setup_format == $sub.ref(0, 262499);

procedure stk_setup_format($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.5, $CurrAddr;



implementation stk_setup_format($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i12: i32;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $i11: i32;
  var $i17: i1;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $i27: i64;
  var $p29: ref;
  var $i30: i32;
  var $i31: i32;
  var $i32: i32;
  var $i33: i8;
  var $i34: i32;
  var $i35: i8;
  var $i37: i64;
  var $p39: ref;
  var $i40: i32;
  var $i41: i8;
  var $i42: i32;
  var $i43: i8;
  var $i44: i32;
  var $i45: i32;
  var $i46: i8;
  var $i48: i64;
  var $p50: ref;
  var $i51: i32;
  var $i52: i32;
  var $i53: i8;
  var $i54: i32;
  var $i55: i8;
  var $i57: i64;
  var $p59: ref;
  var $i60: i32;
  var $i61: i8;
  var $i62: i32;
  var $i63: i8;
  var $i65: i32;
  var $i19: i32;
  var $i66: i32;
  var $p68: ref;
  var $i69: i32;
  var $i70: i1;
  var $i71: i32;
  var $p73: ref;
  var $i74: i32;
  var $i75: i1;
  var $i76: i32;
  var $p78: ref;
  var $i79: i32;
  var $i80: i1;
  var vslice_dummy_var_77: i32;
  var vslice_dummy_var_78: i32;
  var vslice_dummy_var_79: i32;
  var vslice_dummy_var_80: i32;
  var vslice_dummy_var_81: i32;
  var vslice_dummy_var_82: i32;
  var vslice_dummy_var_83: i32;
  var vslice_dummy_var_84: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2628, 1)), $mul.ref(4, 1));
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 825770306);
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := 2;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.20, $add.ref($add.ref($add.ref(stk_sizes, $mul.ref(0, 60)), $mul.ref(0, 12)), $mul.ref(8, 1)));
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2628, 1)), $mul.ref(0, 1));
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i12, $i15);
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    $i11 := 0;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i11, 5);
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} vslice_dummy_var_78 := stk_camera_write_reg($p0, 27, 14);
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2628, 1)), $mul.ref(0, 1));
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 1);
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i24 == 1);
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} vslice_dummy_var_80 := stk_camera_write_reg($p0, 28, 70);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i11);
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref(stk_sizes, $mul.ref(0, 60)), $mul.ref($i27, 12)), $mul.ref(0, 1));
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.21, $p29);
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    $i31 := $mul.i32($i30, $i5);
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    $i32 := $lshr.i32($i31, 8);
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i32.i8($i32);
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i33);
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i32.i8($i34);
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 559} vslice_dummy_var_81 := stk_camera_write_reg($p0, 277, $i35);
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    $i37 := $sext.i32.i64($i11);
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref(stk_sizes, $mul.ref(0, 60)), $mul.ref($i37, 12)), $mul.ref(0, 1));
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.21, $p39);
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i32.i8($i40);
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i41);
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    $i43 := $trunc.i32.i8($i5);
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i32($i43);
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    $i45 := $mul.i32($i42, $i44);
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i32.i8($i45);
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} vslice_dummy_var_82 := stk_camera_write_reg($p0, 276, $i46);
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    $i48 := $sext.i32.i64($i11);
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref(stk_sizes, $mul.ref(0, 60)), $mul.ref($i48, 12)), $mul.ref(4, 1));
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.22, $p50);
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    $i52 := $lshr.i32($i51, 8);
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i32.i8($i52);
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i32($i53);
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    $i55 := $trunc.i32.i8($i54);
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 561} vslice_dummy_var_83 := stk_camera_write_reg($p0, 279, $i55);
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    $i57 := $sext.i32.i64($i11);
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref(stk_sizes, $mul.ref(0, 60)), $mul.ref($i57, 12)), $mul.ref(4, 1));
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.22, $p59);
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    $i61 := $trunc.i32.i8($i60);
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    $i62 := $zext.i8.i32($i61);
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    $i63 := $trunc.i32.i8($i62);
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} vslice_dummy_var_84 := stk_camera_write_reg($p0, 278, $i63);
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} $i65 := stk_sensor_configure($p0);
    call {:si_unique_call 564} {:cexpr "tmp"} boogie_si_record_i32($i65);
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    $i19 := $i65;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  $bb16:
    assume $i24 == 1;
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 557} vslice_dummy_var_79 := stk_camera_write_reg($p0, 28, 14);
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb12:
    assume $i17 == 1;
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 555} vslice_dummy_var_77 := printk.ref.ref(.str.42, .str.43);
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 14);
    goto $bb14;

  $bb9:
    assume $i16 == 1;
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.20, $add.ref($add.ref($add.ref(stk_sizes, $mul.ref(0, 60)), $mul.ref(1, 12)), $mul.ref(8, 1)));
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2628, 1)), $mul.ref(0, 1));
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i6, $i9);
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    $i11 := 1;
    assume {:branchcond $i10} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb8;

  $bb6:
    assume $i10 == 1;
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.20, $add.ref($add.ref($add.ref(stk_sizes, $mul.ref(0, 60)), $mul.ref(2, 12)), $mul.ref(8, 1)));
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2628, 1)), $mul.ref(0, 1));
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.0, $p68);
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    $i70 := $ne.i32($i66, $i69);
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    $i11 := 2;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i70 == 1);
    goto $bb8;

  $bb20:
    assume $i70 == 1;
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.20, $add.ref($add.ref($add.ref(stk_sizes, $mul.ref(0, 60)), $mul.ref(3, 12)), $mul.ref(8, 1)));
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2628, 1)), $mul.ref(0, 1));
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.0, $p73);
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $i75 := $ne.i32($i71, $i74);
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    $i11 := 3;
    assume {:branchcond $i75} true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i75 == 1);
    goto $bb8;

  $bb23:
    assume $i75 == 1;
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.20, $add.ref($add.ref($add.ref(stk_sizes, $mul.ref(0, 60)), $mul.ref(4, 12)), $mul.ref(8, 1)));
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2628, 1)), $mul.ref(0, 1));
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    $i79 := $load.i32($M.0, $p78);
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    $i80 := $ne.i32($i76, $i79);
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    $i11 := 4;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i80 == 1);
    goto $bb8;

  $bb26:
    assume $i80 == 1;
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i11 := 5;
    goto $bb8;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb3;
}



const stk_sensor_configure: ref;

axiom stk_sensor_configure == $sub.ref(0, 263531);

procedure stk_sensor_configure($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.5, $CurrAddr;



implementation stk_sensor_configure($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $p13: ref;
  var $i14: i32;
  var $i10: i32;
  var $i11: i32;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i31: i32;
  var $i32: i32;
  var $i33: i32;
  var $i29: i32;
  var $p30: ref;
  var $i35: i8;
  var $i36: i32;
  var $i37: i8;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $i44: i32;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $i49: i32;
  var $i50: i32;
  var $i51: i8;
  var $i52: i32;
  var $i53: i8;
  var $p56: ref;
  var $i57: i32;
  var $i58: i1;
  var $p60: ref;
  var $i61: i32;
  var $i62: i1;
  var $i64: i32;
  var $i65: i8;
  var $i66: i32;
  var $i67: i8;
  var $i69: i8;
  var $i70: i32;
  var $i71: i8;
  var $p74: ref;
  var $i75: i32;
  var $i76: i1;
  var $i77: i1;
  var $i78: i1;
  var $i79: i1;
  var $i80: i1;
  var $i81: i1;
  var $i82: i32;
  var $i83: i1;
  var $i16: i32;
  var vslice_dummy_var_85: i32;
  var vslice_dummy_var_86: i32;
  var vslice_dummy_var_87: i32;
  var vslice_dummy_var_88: i32;
  var vslice_dummy_var_89: i32;
  var vslice_dummy_var_90: i32;
  var vslice_dummy_var_91: i32;
  var vslice_dummy_var_92: i32;
  var vslice_dummy_var_93: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2628, 1)), $mul.ref(0, 1));
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i3, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i3, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i3, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i3, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2628, 1)), $mul.ref(0, 1));
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} vslice_dummy_var_85 := printk.ref.i32(.str.5, $i14);
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 14);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb8:
    assume $i7 == 1;
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    $i10, $i11 := 604, 8;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2628, 1)), $mul.ref(4, 1));
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i19, 1380075346);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i19, 1448695129);
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i19, 1498831189);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i19, 1498831189);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} vslice_dummy_var_89 := printk.ref(.str.6);
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 14);
    goto $bb17;

  $bb25:
    assume $i23 == 1;
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    $i29, $p30 := $i11, ov_fmt_uyvy;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i32.i8($i29);
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i35);
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i32.i8($i36);
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 569} vslice_dummy_var_86 := stk_sensor_outb($p0, 18, $i37);
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 570} msleep(50);
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 571} vslice_dummy_var_87 := stk_sensor_write_regvals($p0, $p30);
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2628, 1)), $mul.ref(12, 1));
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 0);
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    $i44 := (if $i43 == 1 then 16 else 0);
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2628, 1)), $mul.ref(8, 1));
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    $i49 := (if $i48 == 1 then 32 else 0);
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    $i50 := $or.i32($i44, $i49);
    call {:si_unique_call 572} {:cexpr "flip"} boogie_si_record_i32($i50);
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i32.i8($i50);
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i32($i51);
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i32.i8($i52);
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} vslice_dummy_var_88 := stk_sensor_outb($p0, 30, $i53);
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2628, 1)), $mul.ref(4, 1));
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.0, $p56);
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    $i58 := $eq.i32($i57, 825770306);
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume !($i58 == 1);
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $i64 := $lshr.i32($i10, 8);
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    $i65 := $trunc.i32.i8($i64);
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    $i66 := $zext.i8.i32($i65);
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    $i67 := $trunc.i32.i8($i66);
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} vslice_dummy_var_91 := stk_sensor_outb($p0, 46, $i67);
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    $i69 := $trunc.i32.i8($i10);
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    $i70 := $zext.i8.i32($i69);
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    $i71 := $trunc.i32.i8($i70);
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 577} vslice_dummy_var_92 := stk_sensor_outb($p0, 45, $i71);
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 578} msleep(50);
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2628, 1)), $mul.ref(0, 1));
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.0, $p74);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $i76 := $slt.i32($i75, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i76} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    $i77 := $slt.i32($i75, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i77} true;
    goto $bb49, $bb51;

  $bb51:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    $i78 := $slt.i32($i75, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb54;

  $bb54:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    $i79 := $eq.i32($i75, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i79} true;
    goto $bb55, $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    assume !($i79 == 1);
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    call {:si_unique_call 582} msleep(10);
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb17;

  $bb55:
    assume {:verifier.code 0} true;
    assume $i79 == 1;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb52:
    assume {:verifier.code 0} true;
    assume $i78 == 1;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb49:
    assume {:verifier.code 0} true;
    assume $i77 == 1;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb47:
    assume $i76 == 1;
    assume {:verifier.code 0} true;
    $i80 := $slt.i32($i75, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i80 == 1);
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb59:
    assume $i80 == 1;
    assume {:verifier.code 0} true;
    $i81 := $eq.i32($i75, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    assume !($i81 == 1);
    goto $bb58;

  $bb61:
    assume $i81 == 1;
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 579} $i82 := stk_sensor_set_hw($p0, 302, 1582, 6, 486);
    call {:si_unique_call 580} {:cexpr "tmp"} boogie_si_record_i32($i82);
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    $i83 := $ne.i32($i82, 0);
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb63:
    assume $i83 == 1;
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} vslice_dummy_var_93 := printk.ref(.str.7);
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb40:
    assume $i58 == 1;
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2628, 1)), $mul.ref(12, 1));
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.0, $p60);
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    $i62 := $eq.i32($i61, 0);
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    assume !($i62 == 1);
    goto $bb42;

  $bb43:
    assume $i62 == 1;
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} vslice_dummy_var_90 := stk_sensor_outb($p0, 58, 8);
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb23:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i19, 1448695129);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb27;

  $bb28:
    assume $i24 == 1;
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    $i29, $p30 := $i11, ov_fmt_yuyv;
    goto $bb38;

  $bb21:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i19, 1380075346);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb27;

  $bb30:
    assume $i25 == 1;
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    $i32 := $or.i32($i11, 4);
    call {:si_unique_call 566} {:cexpr "com7"} boogie_si_record_i32($i32);
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    $i29, $p30 := $i32, ov_fmt_rgbr;
    goto $bb38;

  $bb19:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i19, 1346520914);
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i19, 1346520914);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb27;

  $bb34:
    assume $i27 == 1;
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    $i31 := $or.i32($i11, 4);
    call {:si_unique_call 567} {:cexpr "com7"} boogie_si_record_i32($i31);
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    $i29, $p30 := $i31, ov_fmt_rgbp;
    goto $bb38;

  $bb32:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i19, 825770306);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb27;

  $bb36:
    assume $i28 == 1;
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    $i33 := $or.i32($i11, 5);
    call {:si_unique_call 568} {:cexpr "com7"} boogie_si_record_i32($i33);
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    $i29, $p30 := $i33, ov_fmt_bayer;
    goto $bb38;

  $bb6:
    assume $i6 == 1;
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    $i10, $i11 := 267, 16;
    goto $bb15;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    $i10, $i11 := 412, 32;
    goto $bb15;

  $bb2:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i3, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i8 == 1);
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    $i10, $i11 := 0, 0;
    goto $bb15;

  $bb11:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i3, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb10;

  $bb13:
    assume $i9 == 1;
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    $i10, $i11 := 11, 64;
    goto $bb15;
}



const stk_sensor_set_hw: ref;

axiom stk_sensor_set_hw == $sub.ref(0, 264563);

procedure stk_sensor_set_hw($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.5, $CurrAddr;



implementation stk_sensor_set_hw($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32) returns ($r: i32)
{
  var $p5: ref;
  var $i6: i32;
  var $i7: i8;
  var $i8: i32;
  var $i9: i8;
  var $i10: i32;
  var $i11: i32;
  var $i12: i8;
  var $i13: i32;
  var $i14: i8;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $i19: i8;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $i24: i8;
  var $i25: i32;
  var $i26: i32;
  var $i27: i8;
  var $i28: i32;
  var $i29: i32;
  var $i30: i32;
  var $i31: i8;
  var $i32: i8;
  var $i33: i32;
  var $i34: i8;
  var $i35: i32;
  var $i36: i32;
  var $i37: i32;
  var $i38: i8;
  var $i39: i32;
  var $i40: i8;
  var $i41: i32;
  var $i42: i32;
  var $i43: i32;
  var $i44: i8;
  var $i45: i32;
  var $i46: i8;
  var $i47: i32;
  var $i48: i32;
  var $i49: i32;
  var $i50: i32;
  var $i51: i8;
  var $i52: i32;
  var $i53: i32;
  var $i54: i32;
  var $i55: i32;
  var $i56: i8;
  var $i57: i32;
  var $i58: i32;
  var $i59: i8;
  var $i60: i32;
  var $i61: i32;
  var $i62: i32;
  var $i63: i8;
  var $i64: i8;
  var $i65: i32;
  var $i66: i8;
  var $i67: i32;
  var $i68: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} $p5 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 584} {:cexpr "stk_sensor_set_hw:arg:hstart"} boogie_si_record_i32($i1);
    call {:si_unique_call 585} {:cexpr "stk_sensor_set_hw:arg:hstop"} boogie_si_record_i32($i2);
    call {:si_unique_call 586} {:cexpr "stk_sensor_set_hw:arg:vstart"} boogie_si_record_i32($i3);
    call {:si_unique_call 587} {:cexpr "stk_sensor_set_hw:arg:vstop"} boogie_si_record_i32($i4);
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    $i6 := $ashr.i32($i1, 3);
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i8($i6);
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i8($i8);
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 588} $i10 := stk_sensor_outb($p0, 23, $i9);
    call {:si_unique_call 589} {:cexpr "ret"} boogie_si_record_i32($i10);
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    $i11 := $ashr.i32($i2, 3);
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i8($i11);
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i8($i13);
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 590} $i15 := stk_sensor_outb($p0, 24, $i14);
    call {:si_unique_call 591} {:cexpr "tmp"} boogie_si_record_i32($i15);
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    $i16 := $add.i32($i15, $i10);
    call {:si_unique_call 592} {:cexpr "ret"} boogie_si_record_i32($i16);
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 593} $i17 := stk_sensor_inb($p0, 50, $p5);
    call {:si_unique_call 594} {:cexpr "tmp___0"} boogie_si_record_i32($i17);
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    $i18 := $add.i32($i17, $i16);
    call {:si_unique_call 595} {:cexpr "ret"} boogie_si_record_i32($i18);
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.5, $p5);
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    $i20 := $sext.i8.i32($i19);
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i20, $sub.i32(0, 64));
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    $i22 := $and.i32($i2, 7);
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    $i23 := $shl.i32($i22, 3);
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i8($i23);
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    $i25 := $sext.i8.i32($i24);
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    $i26 := $or.i32($i21, $i25);
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i32.i8($i1);
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    $i28 := $sext.i8.i32($i27);
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i28, 7);
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    $i30 := $or.i32($i26, $i29);
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i32.i8($i30);
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p5, $i31);
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 596} msleep(10);
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.5, $p5);
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32($i32);
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i32.i8($i33);
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 597} $i35 := stk_sensor_outb($p0, 50, $i34);
    call {:si_unique_call 598} {:cexpr "tmp___1"} boogie_si_record_i32($i35);
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    $i36 := $add.i32($i35, $i18);
    call {:si_unique_call 599} {:cexpr "ret"} boogie_si_record_i32($i36);
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    $i37 := $ashr.i32($i3, 3);
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i32.i8($i37);
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i38);
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i32.i8($i39);
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 600} $i41 := stk_sensor_outb($p0, 25, $i40);
    call {:si_unique_call 601} {:cexpr "tmp___2"} boogie_si_record_i32($i41);
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    $i42 := $add.i32($i41, $i36);
    call {:si_unique_call 602} {:cexpr "ret"} boogie_si_record_i32($i42);
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    $i43 := $ashr.i32($i4, 3);
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i32.i8($i43);
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i44);
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i32.i8($i45);
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} $i47 := stk_sensor_outb($p0, 26, $i46);
    call {:si_unique_call 604} {:cexpr "tmp___3"} boogie_si_record_i32($i47);
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    $i48 := $add.i32($i47, $i42);
    call {:si_unique_call 605} {:cexpr "ret"} boogie_si_record_i32($i48);
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 606} $i49 := stk_sensor_inb($p0, 3, $p5);
    call {:si_unique_call 607} {:cexpr "tmp___4"} boogie_si_record_i32($i49);
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    $i50 := $add.i32($i49, $i48);
    call {:si_unique_call 608} {:cexpr "ret"} boogie_si_record_i32($i50);
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    $i51 := $load.i8($M.5, $p5);
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    $i52 := $sext.i8.i32($i51);
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    $i53 := $and.i32($i52, $sub.i32(0, 64));
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    $i54 := $and.i32($i4, 7);
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    $i55 := $shl.i32($i54, 3);
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i32.i8($i55);
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    $i57 := $sext.i8.i32($i56);
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    $i58 := $or.i32($i53, $i57);
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    $i59 := $trunc.i32.i8($i3);
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    $i60 := $sext.i8.i32($i59);
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    $i61 := $and.i32($i60, 7);
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    $i62 := $or.i32($i58, $i61);
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    $i63 := $trunc.i32.i8($i62);
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p5, $i63);
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 609} msleep(10);
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    $i64 := $load.i8($M.5, $p5);
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    $i65 := $zext.i8.i32($i64);
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    $i66 := $trunc.i32.i8($i65);
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} $i67 := stk_sensor_outb($p0, 3, $i66);
    call {:si_unique_call 611} {:cexpr "tmp___5"} boogie_si_record_i32($i67);
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    $i68 := $add.i32($i67, $i50);
    call {:si_unique_call 612} {:cexpr "ret"} boogie_si_record_i32($i68);
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    $r := $i68;
    return;
}



const usb_make_path: ref;

axiom usb_make_path == $sub.ref(0, 265595);

procedure usb_make_path($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation usb_make_path($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} {:cexpr "usb_make_path:arg:size"} boogie_si_record_i64($i2);
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1992)), $mul.ref(64, 1));
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 120)), $mul.ref(16, 1));
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1992)), $mul.ref(4, 1));
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 614} $i9 := snprintf.ref.i64.ref.ref.ref($p1, $i2, .str.52, $p6, $p8);
    call {:si_unique_call 615} {:cexpr "actual"} boogie_si_record_i32($i9);
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i64.i32($i2);
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    $i11 := $sgt.i32($i10, $i9);
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    $i12 := $i9;
    goto $bb3;
}



const snprintf: ref;

axiom snprintf == $sub.ref(0, 266627);

procedure snprintf.ref.i64.ref.ref.ref($p0: ref, $i1: i64, $p2: ref, p.3: ref, p.4: ref) returns ($r: i32);



const stk_camera_probe: ref;

axiom stk_camera_probe == $sub.ref(0, 267659);

procedure stk_camera_probe($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.2;



implementation stk_camera_probe($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p19: ref;
  var $p20: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $i29: i32;
  var $p30: ref;
  var $p34: ref;
  var $p35: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i46: i32;
  var $i47: i1;
  var $i48: i32;
  var $p50: ref;
  var $i51: i32;
  var $i52: i1;
  var $p54: ref;
  var $p56: ref;
  var $i57: i32;
  var $i58: i1;
  var $i59: i32;
  var $p61: ref;
  var $i62: i32;
  var $i63: i1;
  var $p65: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p73: ref;
  var $i74: i8;
  var $i75: i32;
  var $i76: i1;
  var $p78: ref;
  var $p79: ref;
  var $i80: i64;
  var $p82: ref;
  var $p83: ref;
  var $i84: i8;
  var $i85: i32;
  var $i86: i1;
  var $i87: i32;
  var $i88: i1;
  var $p89: ref;
  var $i90: i32;
  var $i91: i8;
  var $p92: ref;
  var $i93: i32;
  var $i94: i8;
  var $i95: i32;
  var $i96: i1;
  var $i77: i32;
  var $p97: ref;
  var $i98: i8;
  var $i99: i32;
  var $i100: i1;
  var $p103: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $i110: i32;
  var $i111: i1;
  var $i32: i32;
  var $p112: ref;
  var $p113: ref;
  var $i12: i32;
  var vslice_dummy_var_94: i32;
  var vslice_dummy_var_95: i32;
  var vslice_dummy_var_96: i32;
  var vslice_dummy_var_97: ref;
  var vslice_dummy_var_98: ref;
  var vslice_dummy_var_99: ref;
  var vslice_dummy_var_100: i32;
  var vslice_dummy_var_101: ref;
  var vslice_dummy_var_102: ref;
  var vslice_dummy_var_103: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 618} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 619} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 620} $p6 := interface_to_usbdev($p0);
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 621} $p7 := kzalloc(2872, 208);
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(48, 1));
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p8, $mul.ref(0, 2880)), $mul.ref(0, 1));
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 623} $i15 := v4l2_device_register($p13, $p14);
    call {:si_unique_call 624} {:cexpr "err"} boogie_si_record_i32($i15);
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i15, 0);
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p8, $mul.ref(0, 2880)), $mul.ref(360, 1));
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 627} vslice_dummy_var_96 := v4l2_ctrl_handler_init_class($p20, 3, $p2, .str.30);
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 628} vslice_dummy_var_97 := v4l2_ctrl_new_std($p20, stk_ctrl_ops, 9963776, 0, 255, 1, 96);
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 629} vslice_dummy_var_98 := v4l2_ctrl_new_std($p20, stk_ctrl_ops, 9963796, 0, 1, 1, 1);
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 630} vslice_dummy_var_99 := v4l2_ctrl_new_std($p20, stk_ctrl_ops, 9963797, 0, 1, 1, 1);
    $p25 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 2880)), $mul.ref(360, 1)), $mul.ref(244, 1));
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 2880)), $mul.ref(0, 1)), $mul.ref(152, 1));
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p34, $p20);
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p8, $mul.ref(0, 2880)), $mul.ref(2648, 1));
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 636} vslice_dummy_var_101 := spinlock_check($p35);
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 2880)), $mul.ref(2648, 1)), $mul.ref(0, 1));
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} __raw_spin_lock_init($p39, .str.32, $p3);
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p8, $mul.ref(0, 2880)), $mul.ref(2448, 1));
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} __mutex_init($p40, .str.33, $p4);
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p8, $mul.ref(0, 2880)), $mul.ref(2720, 1));
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 639} __init_waitqueue_head($p41, .str.34, $p5);
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p8, $mul.ref(0, 2880)), $mul.ref(2616, 1));
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p42, 1);
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p8, $mul.ref(0, 2880)), $mul.ref(2416, 1));
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p43, $p6);
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p8, $mul.ref(0, 2880)), $mul.ref(2424, 1));
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p44, $p0);
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 640} vslice_dummy_var_102 := usb_get_intf($p0);
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    $i46 := $M.24;
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i46, $sub.i32(0, 1));
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i47 == 1);
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 641} $i51 := dmi_check_system(stk_upside_down_dmi_table);
    call {:si_unique_call 642} {:cexpr "tmp___1"} boogie_si_record_i32($i51);
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 0);
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i52 == 1);
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 2880)), $mul.ref(2628, 1)), $mul.ref(8, 1));
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p56, 0);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i57 := $M.25;
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    $i58 := $ne.i32($i57, $sub.i32(0, 1));
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i58 == 1);
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 643} $i62 := dmi_check_system(stk_upside_down_dmi_table);
    call {:si_unique_call 644} {:cexpr "tmp___2"} boogie_si_record_i32($i62);
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    $i63 := $ne.i32($i62, 0);
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    assume {:branchcond $i63} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i63 == 1);
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 2880)), $mul.ref(2628, 1)), $mul.ref(12, 1));
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p67, 0);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p8, $mul.ref(0, 2880)), $mul.ref(2824, 1));
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p68, 0);
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p8, $mul.ref(0, 2880)), $mul.ref(2644, 1));
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p69, 1);
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 1528)), $mul.ref(8, 1));
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.0, $p70);
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($p71, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    $i74 := $load.i8($M.0, $p73);
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    $i75 := $zext.i8.i32($i74);
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    $i76 := $sgt.i32($i75, 0);
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    assume {:branchcond $i76} true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i76 == 1);
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p8, $mul.ref(0, 2880)), $mul.ref(2620, 1));
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    $i98 := $load.i8($M.0, $p97);
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    $i99 := $zext.i8.i32($i98);
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    $i100 := $eq.i32($i99, 0);
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 2880)), $mul.ref(2628, 1)), $mul.ref(4, 1));
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p103, 1346520914);
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 2880)), $mul.ref(2628, 1)), $mul.ref(0, 1));
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p105, 0);
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p8, $mul.ref(0, 2880)), $mul.ref(2816, 1));
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p106, 614400);
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p8, $mul.ref(0, 2880)), $mul.ref(2840, 1));
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} INIT_LIST_HEAD($p107);
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p8, $mul.ref(0, 2880)), $mul.ref(2856, 1));
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} INIT_LIST_HEAD($p108);
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    $p109 := $bitcast.ref.ref($p8);
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 653} ldv_usb_set_intfdata_10($p0, $p109);
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 654} $i110 := stk_register_video_device($p8);
    call {:si_unique_call 655} {:cexpr "err"} boogie_si_record_i32($i110);
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    $i111 := $ne.i32($i110, 0);
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    assume {:branchcond $i111} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb42:
    assume $i111 == 1;
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    $i32 := $i110;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 633} v4l2_ctrl_handler_free($p20);
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p8, $mul.ref(0, 2880)), $mul.ref(0, 1));
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 634} v4l2_device_unregister($p112);
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    $p113 := $bitcast.ref.ref($p8);
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 635} kfree($p113);
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    $i12 := $i32;
    goto $bb3;

  $bb39:
    assume $i100 == 1;
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 650} vslice_dummy_var_103 := printk.ref(.str.35);
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    $i32 := $sub.i32(0, 19);
    goto $bb10;

  $bb24:
    assume $i76 == 1;
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    $i77 := 0;
    goto $bb27;

  $bb27:
    call $p78, $p79, $i80, $p82, $p83, $i84, $i85, $i86, $i87, $i88, $p89, $i93, $i94, $i95, $i96, $i77 := stk_camera_probe_loop_$bb27($p8, $p71, $p73, $p78, $p79, $i80, $p82, $p83, $i84, $i85, $i86, $i87, $i88, $p89, $i93, $i94, $i95, $i96, $i77);
    goto $bb27_last;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p71, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.0, $p78);
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    $i80 := $sext.i32.i64($i77);
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p79, $mul.ref($i80, 64)), $mul.ref(0, 1));
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p8, $mul.ref(0, 2880)), $mul.ref(2620, 1));
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    $i84 := $load.i8($M.0, $p83);
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    $i85 := $zext.i8.i32($i84);
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    $i86 := $eq.i32($i85, 0);
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i93 := $add.i32($i77, 1);
    call {:si_unique_call 649} {:cexpr "i"} boogie_si_record_i32($i93);
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    $i94 := $load.i8($M.0, $p73);
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    $i95 := $zext.i8.i32($i94);
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    $i96 := $sgt.i32($i95, $i93);
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i96 == 1);
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb36:
    assume $i96 == 1;
    assume {:verifier.code 0} true;
    $i77 := $i93;
    goto $bb36_dummy;

  $bb29:
    assume $i86 == 1;
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} $i87 := usb_endpoint_is_isoc_in($p82);
    call {:si_unique_call 646} {:cexpr "tmp___4"} boogie_si_record_i32($i87);
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    $i88 := $ne.i32($i87, 0);
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    $p89 := $p82;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb31:
    assume $i88 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 647} $i90 := usb_endpoint_num($p89);
    call {:si_unique_call 648} {:cexpr "tmp___3"} boogie_si_record_i32($i90);
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    $i91 := $trunc.i32.i8($i90);
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p8, $mul.ref(0, 2880)), $mul.ref(2620, 1));
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p92, $i91);
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb21:
    assume $i63 == 1;
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 2880)), $mul.ref(2628, 1)), $mul.ref(12, 1));
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p65, 1);
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb18:
    assume $i58 == 1;
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    $i59 := $M.25;
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 2880)), $mul.ref(2628, 1)), $mul.ref(12, 1));
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p61, $i59);
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb15:
    assume $i52 == 1;
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 2880)), $mul.ref(2628, 1)), $mul.ref(8, 1));
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p54, 1);
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb12:
    assume $i47 == 1;
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    $i48 := $M.24;
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 2880)), $mul.ref(2628, 1)), $mul.ref(8, 1));
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p50, $i48);
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb8:
    assume $i27 == 1;
    $p28 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 2880)), $mul.ref(360, 1)), $mul.ref(244, 1));
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    call {:si_unique_call 631} {:cexpr "err"} boogie_si_record_i32($i29);
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p6, $mul.ref(0, 1992)), $mul.ref(136, 1));
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} vslice_dummy_var_100 := dev_err.ref.ref($p30, .str.31);
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    $i32 := $i29;
    goto $bb10;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p6, $mul.ref(0, 1992)), $mul.ref(136, 1));
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 625} vslice_dummy_var_95 := dev_err.ref.ref($p17, .str.29);
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p8);
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 626} kfree($p19);
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    $i12 := $i15;
    goto $bb3;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 622} vslice_dummy_var_94 := printk.ref(.str.28);
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 12);
    goto $bb3;

  $bb36_dummy:
    assume false;
    return;

  $bb27_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3489;
}



const stk_camera_disconnect: ref;

axiom stk_camera_disconnect == $sub.ref(0, 268691);

procedure stk_camera_disconnect($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.2;



implementation stk_camera_disconnect($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var vslice_dummy_var_104: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} $p1 := ldv_usb_get_intfdata_11($p0);
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 657} ldv_usb_set_intfdata_10($p0, $0.ref);
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 2880)), $mul.ref(2644, 1));
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, $sub.i32(0, 12));
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 2880)), $mul.ref(2644, 1));
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, $i5);
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 2880)), $mul.ref(2720, 1));
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 658} __wake_up($p7, 1, 1, $0.ref);
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 2880)), $mul.ref(608, 1));
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} $p9 := video_device_node_name($p8);
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 660} vslice_dummy_var_104 := printk.ref.ref(.str.44, $p9);
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 2880)), $mul.ref(608, 1));
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 661} video_unregister_device($p11);
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 2880)), $mul.ref(360, 1));
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} v4l2_ctrl_handler_free($p12);
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 2880)), $mul.ref(0, 1));
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 663} v4l2_device_unregister($p13);
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    return;
}



const stk_camera_suspend: ref;

axiom stk_camera_suspend == $sub.ref(0, 269723);

procedure stk_camera_suspend($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.26, $M.0, $M.1, $CurrAddr, $M.5;



implementation stk_camera_suspend($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $p14: ref;
  var vslice_dummy_var_105: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 664} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.26 := $store.i32($M.26, $p3, $i1);
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 665} $p4 := ldv_usb_get_intfdata_11($p0);
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 2880)), $mul.ref(2644, 1));
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 8);
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} vslice_dummy_var_105 := stk_stop_stream($p5);
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p5, $mul.ref(0, 2880)), $mul.ref(2644, 1));
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    $i13 := $or.i32($i12, 8);
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p5, $mul.ref(0, 2880)), $mul.ref(2644, 1));
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, $i13);
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const stk_camera_resume: ref;

axiom stk_camera_resume == $sub.ref(0, 270755);

procedure stk_camera_resume($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.5, $M.1, $CurrAddr, $M.14, $M.16, $M.2;



implementation stk_camera_resume($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var vslice_dummy_var_106: i32;
  var vslice_dummy_var_107: i32;
  var vslice_dummy_var_108: i32;
  var vslice_dummy_var_109: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 667} $p1 := ldv_usb_get_intfdata_11($p0);
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 2880)), $mul.ref(2644, 1));
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 2);
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 2880)), $mul.ref(2644, 1));
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, $sub.i32(0, 3));
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 2880)), $mul.ref(2644, 1));
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i9);
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 668} vslice_dummy_var_106 := stk_initialise($p2);
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 669} vslice_dummy_var_107 := stk_camera_write_reg($p2, 0, 73);
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} vslice_dummy_var_108 := stk_setup_format($p2);
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 2880)), $mul.ref(2644, 1));
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i15, 8);
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb5:
    assume $i17 == 1;
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 671} vslice_dummy_var_109 := stk_start_stream($p2);
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_usb_get_intfdata_11: ref;

axiom ldv_usb_get_intfdata_11 == $sub.ref(0, 271787);

procedure ldv_usb_get_intfdata_11($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation ldv_usb_get_intfdata_11($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 672} $p1 := ldv_usb_get_intfdata();
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const ldv_usb_get_intfdata: ref;

axiom ldv_usb_get_intfdata == $sub.ref(0, 272819);

procedure ldv_usb_get_intfdata() returns ($r: ref);
  free requires assertsPassed;



implementation ldv_usb_get_intfdata() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    $p0 := $M.2;
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_usb_set_intfdata_10: ref;

axiom ldv_usb_set_intfdata_10 == $sub.ref(0, 273851);

procedure ldv_usb_set_intfdata_10($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.2;



implementation ldv_usb_set_intfdata_10($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 673} ldv_usb_set_intfdata($p1);
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    return;
}



const video_device_node_name: ref;

axiom video_device_node_name == $sub.ref(0, 274883);

procedure video_device_node_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation video_device_node_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1808)), $mul.ref(136, 1));
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} $p2 := dev_name($p1);
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const video_unregister_device: ref;

axiom video_unregister_device == $sub.ref(0, 275915);

procedure video_unregister_device($p0: ref);
  free requires assertsPassed;



implementation video_unregister_device($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    return;
}



const v4l2_ctrl_handler_free: ref;

axiom v4l2_ctrl_handler_free == $sub.ref(0, 276947);

procedure v4l2_ctrl_handler_free($p0: ref);
  free requires assertsPassed;



implementation v4l2_ctrl_handler_free($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    return;
}



const v4l2_device_unregister: ref;

axiom v4l2_device_unregister == $sub.ref(0, 277979);

procedure v4l2_device_unregister($p0: ref);
  free requires assertsPassed;



implementation v4l2_device_unregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    return;
}



const dev_name: ref;

axiom dev_name == $sub.ref(0, 279011);

procedure dev_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1384)), $mul.ref(312, 1));
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1384)), $mul.ref(16, 1));
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 675} $p9 := kobject_name($p8);
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    $p7 := $p9;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1384)), $mul.ref(312, 1));
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    $p7 := $p6;
    goto $bb3;
}



const kobject_name: ref;

axiom kobject_name == $sub.ref(0, 280043);

procedure kobject_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation kobject_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(0, 1));
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_usb_set_intfdata: ref;

axiom ldv_usb_set_intfdata == $sub.ref(0, 281075);

procedure ldv_usb_set_intfdata($p0: ref);
  free requires assertsPassed;
  modifies $M.2;



implementation ldv_usb_set_intfdata($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    $M.2 := $p0;
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    return;
}



const interface_to_usbdev: ref;

axiom interface_to_usbdev == $sub.ref(0, 282107);

procedure interface_to_usbdev($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation interface_to_usbdev($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 676} $p1 := ldv_interface_to_usbdev();
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const v4l2_device_register: ref;

axiom v4l2_device_register == $sub.ref(0, 283139);

procedure v4l2_device_register($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation v4l2_device_register($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 1} true;
    call {:si_unique_call 677} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 678} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const dev_err: ref;

axiom dev_err == $sub.ref(0, 284171);

procedure dev_err.ref.ref($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 1} true;
    call {:si_unique_call 679} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 680} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const v4l2_ctrl_handler_init_class: ref;

axiom v4l2_ctrl_handler_init_class == $sub.ref(0, 285203);

procedure v4l2_ctrl_handler_init_class($p0: ref, $i1: i32, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation v4l2_ctrl_handler_init_class($p0: ref, $i1: i32, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 681} {:cexpr "v4l2_ctrl_handler_init_class:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 1} true;
    call {:si_unique_call 682} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 683} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const v4l2_ctrl_new_std: ref;

axiom v4l2_ctrl_new_std == $sub.ref(0, 286235);

procedure v4l2_ctrl_new_std($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32, $i5: i32, $i6: i32) returns ($r: ref);
  free requires assertsPassed;



implementation v4l2_ctrl_new_std($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32, $i5: i32, $i6: i32) returns ($r: ref)
{
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} {:cexpr "v4l2_ctrl_new_std:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 685} {:cexpr "v4l2_ctrl_new_std:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 686} {:cexpr "v4l2_ctrl_new_std:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 687} {:cexpr "v4l2_ctrl_new_std:arg:arg5"} boogie_si_record_i32($i5);
    call {:si_unique_call 688} {:cexpr "v4l2_ctrl_new_std:arg:arg6"} boogie_si_record_i32($i6);
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 689} $p7 := external_alloc();
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;
}



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 287267);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    return;
}



const __mutex_init: ref;

axiom __mutex_init == $sub.ref(0, 288299);

procedure __mutex_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __mutex_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    return;
}



const __init_waitqueue_head: ref;

axiom __init_waitqueue_head == $sub.ref(0, 289331);

procedure __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    return;
}



const usb_get_intf: ref;

axiom usb_get_intf == $sub.ref(0, 290363);

procedure usb_get_intf($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation usb_get_intf($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 690} $p1 := external_alloc();
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const usb_endpoint_is_isoc_in: ref;

axiom usb_endpoint_is_isoc_in == $sub.ref(0, 291395);

procedure usb_endpoint_is_isoc_in($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_is_isoc_in($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} $i1 := usb_endpoint_xfer_isoc($p0);
    call {:si_unique_call 692} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} $i3 := usb_endpoint_dir_in($p0);
    call {:si_unique_call 694} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    $i6 := $i5;
    goto $bb6;

  $bb3:
    assume $i4 == 1;
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb5;
}



const usb_endpoint_num: ref;

axiom usb_endpoint_num == $sub.ref(0, 292427);

procedure usb_endpoint_num($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_num($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 15);
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const stk_register_video_device: ref;

axiom stk_register_video_device == $sub.ref(0, 293459);

procedure stk_register_video_device($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation stk_register_video_device($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $i6: i32;
  var $p8: ref;
  var $p11: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p20: ref;
  var $p21: ref;
  var cmdloc_dummy_var_12: [ref]i8;
  var cmdloc_dummy_var_13: [ref]i8;
  var cmdloc_dummy_var_14: [ref]i8;
  var vslice_dummy_var_110: i32;
  var vslice_dummy_var_111: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(608, 1));
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_12 := $M.0;
    cmdloc_dummy_var_13 := $M.0;
    call {:si_unique_call 695} cmdloc_dummy_var_14 := $memcpy.i8(cmdloc_dummy_var_12, cmdloc_dummy_var_13, $p2, stk_v4l_data, 1808, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_14;
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(2448, 1));
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(608, 1)), $mul.ref(1800, 1));
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p5, $p3);
    goto corral_source_split_3699;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    $i6 := $M.27;
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(608, 1)), $mul.ref(1720, 1));
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, $i6);
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(608, 1)), $mul.ref(1528, 1));
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, $p0);
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(608, 1)), $mul.ref(1616, 1));
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} set_bit(2, $p13);
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(608, 1));
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p0);
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 697} video_set_drvdata($p14, $p15);
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(608, 1));
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} $i17 := video_register_device($p16, 0, $sub.i32(0, 1));
    call {:si_unique_call 699} {:cexpr "err"} boogie_si_record_i32($i17);
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 2880)), $mul.ref(608, 1));
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 701} $p21 := video_device_node_name($p20);
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 702} vslice_dummy_var_111 := printk.ref.ref(.str.40, $p21);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 700} vslice_dummy_var_110 := printk.ref(.str.39);
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const set_bit: ref;

axiom set_bit == $sub.ref(0, 294491);

procedure set_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation set_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 703} {:cexpr "set_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 704} devirtbounce.5(0, $p1, $i0, $p1);
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    return;
}



const video_set_drvdata: ref;

axiom video_set_drvdata == $sub.ref(0, 295523);

procedure video_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation video_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;
  var vslice_dummy_var_112: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1808)), $mul.ref(136, 1));
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 705} vslice_dummy_var_112 := dev_set_drvdata($p2, $p1);
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    return;
}



const video_register_device: ref;

axiom video_register_device == $sub.ref(0, 296555);

procedure video_register_device($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation video_register_device($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 706} {:cexpr "video_register_device:arg:type"} boogie_si_record_i32($i1);
    call {:si_unique_call 707} {:cexpr "video_register_device:arg:nr"} boogie_si_record_i32($i2);
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1808)), $mul.ref(128, 1));
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 708} $i7 := __video_register_device($p0, $i1, $i2, 1, $p6);
    call {:si_unique_call 709} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const __video_register_device: ref;

axiom __video_register_device == $sub.ref(0, 297587);

procedure __video_register_device($p0: ref, $i1: i32, $i2: i32, $i3: i32, $p4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __video_register_device($p0: ref, $i1: i32, $i2: i32, $i3: i32, $p4: ref) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 710} {:cexpr "__video_register_device:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 711} {:cexpr "__video_register_device:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 712} {:cexpr "__video_register_device:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 1} true;
    call {:si_unique_call 713} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 714} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const dev_set_drvdata: ref;

axiom dev_set_drvdata == $sub.ref(0, 298619);

procedure dev_set_drvdata($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_set_drvdata($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 1} true;
    call {:si_unique_call 715} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 716} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const usb_endpoint_xfer_isoc: ref;

axiom usb_endpoint_xfer_isoc == $sub.ref(0, 299651);

procedure usb_endpoint_xfer_isoc($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_xfer_isoc($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10)), $mul.ref(3, 1));
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 3);
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 1);
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const usb_endpoint_dir_in: ref;

axiom usb_endpoint_dir_in == $sub.ref(0, 300683);

procedure usb_endpoint_dir_in($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_dir_in($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    $i3 := $sext.i8.i32($i2);
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i3, 0);
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const ldv_interface_to_usbdev: ref;

axiom ldv_interface_to_usbdev == $sub.ref(0, 301715);

procedure ldv_interface_to_usbdev() returns ($r: ref);
  free requires assertsPassed;



implementation ldv_interface_to_usbdev() returns ($r: ref)
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 717} $p0 := ldv_undef_ptr();
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 718} ldv_stop___0();
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_zalloc: ref;

axiom ldv_zalloc == $sub.ref(0, 302747);

procedure ldv_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_zalloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 719} {:cexpr "ldv_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 1} true;
    call {:si_unique_call 720} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 721} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 722} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 723} $p4 := calloc(1, $i0);
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 1} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 1} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 1} true;
    call {:si_unique_call 724} __VERIFIER_assume($i7);
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    $p3 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb3;
}



const ldv_initialize_v4l2_ioctl_ops_3: ref;

axiom ldv_initialize_v4l2_ioctl_ops_3 == $sub.ref(0, 303779);

procedure ldv_initialize_v4l2_ioctl_ops_3();
  free requires assertsPassed;
  modifies $M.28, $M.29, $M.30, $M.31, $M.32, $M.0, $CurrAddr;



implementation ldv_initialize_v4l2_ioctl_ops_3()
{
  var $p0: ref;
  var $p2: ref;
  var $p4: ref;
  var $p6: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 725} $p0 := ldv_zalloc(360);
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    $M.28 := $p0;
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 726} $p2 := ldv_zalloc(208);
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    $M.29 := $p2;
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 727} $p4 := ldv_zalloc(32);
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    $M.30 := $p4;
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 728} $p6 := ldv_zalloc(88);
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    $M.31 := $p6;
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 729} $p8 := ldv_zalloc(168);
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    $M.32 := $p8;
    goto corral_source_split_3797;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_vm_operations_struct_6: ref;

axiom ldv_initialize_vm_operations_struct_6 == $sub.ref(0, 304811);

procedure ldv_initialize_vm_operations_struct_6();
  free requires assertsPassed;
  modifies $M.33, $M.0, $CurrAddr;



implementation ldv_initialize_vm_operations_struct_6()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} $p0 := ldv_zalloc(184);
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    $M.33 := $p0;
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_driver_1: ref;

axiom ldv_usb_driver_1 == $sub.ref(0, 305843);

procedure ldv_usb_driver_1();
  free requires assertsPassed;
  modifies $M.34, $M.0, $CurrAddr;



implementation ldv_usb_driver_1()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 731} $p0 := ldv_zalloc(1520);
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    $M.34 := $p0;
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_v4l2_file_operations_4: ref;

axiom ldv_initialize_v4l2_file_operations_4 == $sub.ref(0, 306875);

procedure ldv_initialize_v4l2_file_operations_4();
  free requires assertsPassed;
  modifies $M.35, $M.0, $CurrAddr;



implementation ldv_initialize_v4l2_file_operations_4()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 732} $p0 := ldv_zalloc(360);
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    $M.35 := $p0;
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 307907);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.36, $M.37, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.0, $M.47, $M.48, $M.26, $M.49, $M.50, $M.52, $M.53, $M.28, $M.29, $M.30, $M.31, $M.32, $M.35, $M.33, $M.7, $M.8, $M.9, $M.10, $M.11, $M.34, $M.51, $M.3, $M.56, $M.2, $M.4, $M.54, $M.55, $M.14, $M.16, $M.15, $M.17, $M.18, $M.19, $M.71, $M.72, $M.21, $M.22, $M.20, $M.27, $M.25, $M.73, $M.24, $M.12, $M.13, $M.77, $CurrAddr, $M.1, $M.5, $M.23, assertsPassed;



implementation main() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $i55: i1;
  var $i56: i1;
  var $i57: i1;
  var $i58: i1;
  var $i59: i1;
  var $i60: i1;
  var $i61: i1;
  var $i62: i1;
  var $i63: i32;
  var $i64: i1;
  var $i65: i32;
  var $i66: i1;
  var $i67: i1;
  var $i68: i1;
  var $i69: i32;
  var $i70: i1;
  var $p71: ref;
  var $i72: i32;
  var $i73: i1;
  var $p74: ref;
  var $i75: i32;
  var $i76: i32;
  var $i77: i32;
  var $i78: i1;
  var $i79: i32;
  var $i80: i1;
  var $i81: i1;
  var $i82: i1;
  var $i83: i1;
  var $i84: i1;
  var $i85: i1;
  var $i86: i1;
  var $i87: i32;
  var $i88: i1;
  var $p89: ref;
  var $i91: i32;
  var $i92: i1;
  var $p93: ref;
  var $i95: i32;
  var $i96: i1;
  var $p97: ref;
  var $i99: i32;
  var $i100: i32;
  var $i101: i32;
  var $i102: i1;
  var $p103: ref;
  var $i105: i32;
  var $i106: i1;
  var $p107: ref;
  var $i109: i32;
  var $i110: i1;
  var $p111: ref;
  var $i113: i32;
  var $i114: i1;
  var $p115: ref;
  var $i116: i32;
  var $i117: i32;
  var $i118: i1;
  var $i119: i32;
  var $i120: i32;
  var $i121: i32;
  var $i122: i1;
  var $p123: ref;
  var $i125: i32;
  var $i126: i1;
  var $p127: ref;
  var $i129: i32;
  var $i130: i1;
  var $i131: i32;
  var $i132: i1;
  var $i133: i1;
  var $i134: i1;
  var $i135: i1;
  var $i136: i1;
  var $i137: i1;
  var $i138: i32;
  var $i139: i1;
  var $p140: ref;
  var $i141: i32;
  var $i142: i32;
  var $i143: i1;
  var $i144: i32;
  var $i145: i32;
  var $i146: i32;
  var $i147: i1;
  var $p148: ref;
  var $p149: ref;
  var $i150: i32;
  var $i151: i32;
  var $i152: i32;
  var $i153: i1;
  var $i154: i32;
  var $i155: i1;
  var $p156: ref;
  var $i157: i32;
  var $i158: i32;
  var $i159: i1;
  var $i160: i32;
  var $i161: i1;
  var $i162: i32;
  var $i163: i1;
  var $p164: ref;
  var $i165: i32;
  var $i166: i32;
  var $i167: i32;
  var $i168: i1;
  var $i169: i32;
  var $i170: i1;
  var $p171: ref;
  var $i172: i32;
  var $i173: i32;
  var $i174: i32;
  var $i175: i1;
  var $i176: i32;
  var $i177: i32;
  var $i178: i1;
  var $i179: i32;
  var $i180: i1;
  var $i181: i32;
  var $i182: i1;
  var $i183: i1;
  var $i184: i1;
  var $i185: i32;
  var $i186: i1;
  var $i187: i32;
  var $i188: i1;
  var $i189: i32;
  var $i190: i1;
  var $i191: i32;
  var $i192: i32;
  var $i193: i1;
  var $i194: i32;
  var $i195: i1;
  var $i196: i32;
  var $i197: i1;
  var $i198: i32;
  var $i199: i1;
  var $i200: i1;
  var $i201: i1;
  var $i202: i1;
  var $i203: i1;
  var $i204: i1;
  var $i205: i1;
  var $i206: i1;
  var $i207: i1;
  var $i208: i1;
  var $i209: i1;
  var $i210: i1;
  var $i211: i1;
  var $i212: i1;
  var $i213: i1;
  var $i214: i1;
  var $i215: i1;
  var $i216: i1;
  var $i217: i1;
  var $i218: i1;
  var $i219: i32;
  var $i220: i1;
  var $p221: ref;
  var $i223: i32;
  var $i224: i1;
  var $p225: ref;
  var $p226: ref;
  var $i228: i32;
  var $i229: i1;
  var $p230: ref;
  var $p231: ref;
  var $i233: i32;
  var $i234: i1;
  var $p235: ref;
  var $i237: i32;
  var $i238: i1;
  var $p239: ref;
  var $i240: i32;
  var $i242: i32;
  var $i243: i1;
  var $p244: ref;
  var $p245: ref;
  var $i247: i32;
  var $i248: i1;
  var $p249: ref;
  var $p250: ref;
  var $i252: i32;
  var $i253: i1;
  var $p254: ref;
  var $i256: i32;
  var $i257: i1;
  var $p258: ref;
  var $p259: ref;
  var $i261: i32;
  var $i262: i1;
  var $p263: ref;
  var $p264: ref;
  var $i266: i32;
  var $i267: i1;
  var $p268: ref;
  var $i270: i32;
  var $i271: i1;
  var $p272: ref;
  var $p273: ref;
  var $i275: i32;
  var $i276: i1;
  var $p277: ref;
  var $i279: i32;
  var $i280: i1;
  var $p281: ref;
  var $i283: i32;
  var $i284: i1;
  var $p285: ref;
  var $i287: i32;
  var $i288: i1;
  var $p289: ref;
  var $i291: i32;
  var $i292: i1;
  var $p293: ref;
  var $p294: ref;
  var $i296: i32;
  var $i297: i1;
  var $p298: ref;
  var $i300: i32;
  var $i301: i1;
  var $p302: ref;
  var $i303: i32;
  var $i305: i32;
  var $i306: i1;
  var $i307: i32;
  var $i308: i1;
  var $i309: i1;
  var $i310: i1;
  var $i311: i32;
  var $i312: i1;
  var $i313: i32;
  var $i314: i32;
  var $i315: i32;
  var $i316: i1;
  var $i318: i32;
  var $i319: i32;
  var $i320: i32;
  var $i321: i1;
  var $i322: i32;
  var $i323: i1;
  var $i324: i32;
  var $i325: i1;
  var cmdloc_dummy_var_15: [ref]i8;
  var cmdloc_dummy_var_16: [ref]i8;
  var cmdloc_dummy_var_17: [ref]i8;
  var cmdloc_dummy_var_18: [ref]i8;
  var cmdloc_dummy_var_19: [ref]i8;
  var cmdloc_dummy_var_20: [ref]i8;
  var vslice_dummy_var_113: i32;
  var vslice_dummy_var_114: i32;
  var vslice_dummy_var_115: i32;
  var vslice_dummy_var_116: i64;
  var vslice_dummy_var_117: i32;
  var vslice_dummy_var_118: i32;
  var vslice_dummy_var_119: i64;
  var vslice_dummy_var_120: i64;
  var vslice_dummy_var_121: i32;
  var vslice_dummy_var_122: i32;
  var vslice_dummy_var_123: i32;
  var vslice_dummy_var_124: i32;
  var vslice_dummy_var_125: i32;
  var vslice_dummy_var_126: i32;
  var vslice_dummy_var_127: i32;
  var vslice_dummy_var_128: i32;
  var vslice_dummy_var_129: i32;
  var vslice_dummy_var_130: i32;
  var vslice_dummy_var_131: i32;
  var vslice_dummy_var_132: i32;
  var vslice_dummy_var_133: i32;
  var vslice_dummy_var_134: i32;
  var vslice_dummy_var_135: i32;
  var vslice_dummy_var_136: i32;
  var vslice_dummy_var_137: i32;
  var vslice_dummy_var_138: i32;
  var vslice_dummy_var_139: i32;
  var vslice_dummy_var_140: i32;
  var vslice_dummy_var_141: i32;

  $bb0:
    call {:si_unique_call 733} $initialize();
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 1} true;
    call {:si_unique_call 734} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    assume {:verifier.code 0} true;
    call {:si_unique_call 735} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 736} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 737} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 1} true;
    call {:si_unique_call 738} $i3 := __VERIFIER_nondet_uint();
    call {:si_unique_call 739} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i3);
    call {:si_unique_call 740} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 1} true;
    call {:si_unique_call 741} $i4 := __VERIFIER_nondet_size_t();
    call {:si_unique_call 742} {:cexpr "smack:ext:__VERIFIER_nondet_size_t"} boogie_si_record_i64($i4);
    call {:si_unique_call 743} {:cexpr "tmp___0"} boogie_si_record_i64($i4);
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} $p5 := ldv_zalloc(8);
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_3819;

  corral_source_split_3819:
    assume {:verifier.code 1} true;
    call {:si_unique_call 745} $i7 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 746} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i7);
    call {:si_unique_call 747} {:cexpr "tmp___2"} boogie_si_record_i64($i7);
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} $p8 := ldv_zalloc(1);
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 749} $p9 := ldv_zalloc(16);
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 750} $p11 := ldv_zalloc(184);
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 751} $p13 := ldv_zalloc(32);
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 752} $p15 := ldv_zalloc(1);
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 1} true;
    call {:si_unique_call 753} $i16 := __VERIFIER_nondet_uint();
    call {:si_unique_call 754} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i16);
    call {:si_unique_call 755} {:cexpr "tmp___8"} boogie_si_record_i32($i16);
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} $p17 := ldv_zalloc(1);
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 757} $p18 := ldv_zalloc(1);
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} $p19 := ldv_zalloc(1);
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 759} $p20 := ldv_zalloc(1);
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} $p21 := ldv_zalloc(1);
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 761} $p22 := ldv_zalloc(80);
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} $p24 := ldv_zalloc(1);
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 763} $p25 := ldv_zalloc(1);
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} $p26 := ldv_zalloc(1);
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 765} $p27 := ldv_zalloc(1);
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} $p28 := ldv_zalloc(64);
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_3842;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 767} $p30 := ldv_zalloc(1);
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} $p31 := ldv_zalloc(1);
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 769} $p32 := ldv_zalloc(204);
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 770} $p34 := ldv_zalloc(1);
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} $p35 := ldv_zalloc(1);
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 772} $p36 := ldv_zalloc(1);
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 773} $p37 := ldv_zalloc(1);
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} $p38 := ldv_zalloc(104);
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 775} $p40 := ldv_zalloc(4);
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 776} $p42 := ldv_zalloc(44);
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} $p44 := ldv_zalloc(20);
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 778} $p46 := ldv_zalloc(1);
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} $p47 := ldv_zalloc(1800);
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} $p49 := ldv_zalloc(144);
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 781} ldv_initialize();
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p0);
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_15 := $M.36;
    call {:si_unique_call 782} cmdloc_dummy_var_16 := $memset.i8(cmdloc_dummy_var_15, $p51, 0, 4, $zext.i32.i64(4), 0 == 1);
    $M.36 := cmdloc_dummy_var_16;
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p1);
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_17 := $M.37;
    call {:si_unique_call 783} cmdloc_dummy_var_18 := $memset.i8(cmdloc_dummy_var_17, $p52, 0, 4, $zext.i32.i64(4), 0 == 1);
    $M.37 := cmdloc_dummy_var_18;
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p2);
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_19 := $M.38;
    call {:si_unique_call 784} cmdloc_dummy_var_20 := $memset.i8(cmdloc_dummy_var_19, $p53, 0, 4, $zext.i32.i64(4), 0 == 1);
    $M.38 := cmdloc_dummy_var_20;
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    $M.39 := 0;
    call {:si_unique_call 785} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    $M.40 := 0;
    call {:si_unique_call 786} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    $M.41 := 0;
    call {:si_unique_call 787} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    $M.42 := 0;
    call {:si_unique_call 788} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 789} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    $M.44 := 0;
    call {:si_unique_call 790} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    $M.45 := 0;
    call {:si_unique_call 791} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    $M.46 := 0;
    call {:si_unique_call 792} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $p71, $i72, $i73, $p74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $p89, $i91, $i92, $p93, $i95, $i96, $p97, $i99, $i100, $i101, $i102, $p103, $i105, $i106, $p107, $i109, $i110, $p111, $i113, $i114, $p115, $i116, $i117, $i118, $i119, $i120, $i121, $i122, $p123, $i125, $i126, $p127, $i129, $i130, $i131, $i132, $i133, $i134, $i135, $i136, $i137, $i138, $i139, $p140, $i141, $i142, $i143, $i144, $i145, $i146, $i147, $p148, $p149, $i150, $i151, $i152, $i153, $i154, $i155, $p156, $i157, $i158, $i159, $i160, $i161, $i162, $i163, $p164, $i165, $i166, $i167, $i168, $i169, $i170, $p171, $i172, $i173, $i174, $i175, $i176, $i177, $i178, $i179, $i180, $i181, $i182, $i183, $i184, $i185, $i186, $i187, $i188, $i189, $i190, $i191, $i192, $i193, $i194, $i195, $i196, $i197, $i198, $i199, $i200, $i201, $i202, $i203, $i204, $i205, $i206, $i207, $i208, $i209, $i210, $i211, $i212, $i213, $i214, $i215, $i216, $i217, $i218, $i219, $i220, $p221, $i223, $i224, $p225, $p226, $i228, $i229, $p230, $p231, $i233, $i234, $p235, $i237, $i238, $p239, $i240, $i242, $i243, $p244, $p245, $i247, $i248, $p249, $p250, $i252, $i253, $p254, $i256, $i257, $p258, $p259, $i261, $i262, $p263, $p264, $i266, $i267, $p268, $i270, $i271, $p272, $p273, $i275, $i276, $p277, $i279, $i280, $p281, $i283, $i284, $p285, $i287, $i288, $p289, $i291, $i292, $p293, $p294, $i296, $i297, $p298, $i300, $i301, $p302, $i303, $i305, $i306, $i307, $i308, $i309, $i310, $i311, $i312, $i313, $i314, $i315, $i316, $i318, $i319, $i320, $i321, $i322, $i323, $i324, $i325, vslice_dummy_var_113, vslice_dummy_var_114, vslice_dummy_var_115, vslice_dummy_var_116, vslice_dummy_var_117, vslice_dummy_var_118, vslice_dummy_var_119, vslice_dummy_var_120, vslice_dummy_var_121, vslice_dummy_var_122, vslice_dummy_var_123, vslice_dummy_var_124, vslice_dummy_var_125, vslice_dummy_var_126, vslice_dummy_var_127, vslice_dummy_var_128, vslice_dummy_var_129, vslice_dummy_var_130, vslice_dummy_var_131, vslice_dummy_var_132, vslice_dummy_var_133, vslice_dummy_var_134, vslice_dummy_var_135, vslice_dummy_var_136, vslice_dummy_var_137, vslice_dummy_var_138, vslice_dummy_var_139, vslice_dummy_var_140, vslice_dummy_var_141 := main_loop_$bb1($p0, $p1, $p2, $i3, $i4, $p6, $i7, $p8, $p10, $p12, $p14, $p15, $i16, $p17, $p18, $p19, $p20, $p21, $p23, $p24, $p25, $p26, $p27, $p29, $p30, $p31, $p33, $p34, $p35, $p36, $p37, $p39, $p41, $p43, $p45, $p46, $p48, $p50, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $p71, $i72, $i73, $p74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $p89, $i91, $i92, $p93, $i95, $i96, $p97, $i99, $i100, $i101, $i102, $p103, $i105, $i106, $p107, $i109, $i110, $p111, $i113, $i114, $p115, $i116, $i117, $i118, $i119, $i120, $i121, $i122, $p123, $i125, $i126, $p127, $i129, $i130, $i131, $i132, $i133, $i134, $i135, $i136, $i137, $i138, $i139, $p140, $i141, $i142, $i143, $i144, $i145, $i146, $i147, $p148, $p149, $i150, $i151, $i152, $i153, $i154, $i155, $p156, $i157, $i158, $i159, $i160, $i161, $i162, $i163, $p164, $i165, $i166, $i167, $i168, $i169, $i170, $p171, $i172, $i173, $i174, $i175, $i176, $i177, $i178, $i179, $i180, $i181, $i182, $i183, $i184, $i185, $i186, $i187, $i188, $i189, $i190, $i191, $i192, $i193, $i194, $i195, $i196, $i197, $i198, $i199, $i200, $i201, $i202, $i203, $i204, $i205, $i206, $i207, $i208, $i209, $i210, $i211, $i212, $i213, $i214, $i215, $i216, $i217, $i218, $i219, $i220, $p221, $i223, $i224, $p225, $p226, $i228, $i229, $p230, $p231, $i233, $i234, $p235, $i237, $i238, $p239, $i240, $i242, $i243, $p244, $p245, $i247, $i248, $p249, $p250, $i252, $i253, $p254, $i256, $i257, $p258, $p259, $i261, $i262, $p263, $p264, $i266, $i267, $p268, $i270, $i271, $p272, $p273, $i275, $i276, $p277, $i279, $i280, $p281, $i283, $i284, $p285, $i287, $i288, $p289, $i291, $i292, $p293, $p294, $i296, $i297, $p298, $i300, $i301, $p302, $i303, $i305, $i306, $i307, $i308, $i309, $i310, $i311, $i312, $i313, $i314, $i315, $i316, $i318, $i319, $i320, $i321, $i322, $i323, $i324, $i325, vslice_dummy_var_113, vslice_dummy_var_114, vslice_dummy_var_115, vslice_dummy_var_116, vslice_dummy_var_117, vslice_dummy_var_118, vslice_dummy_var_119, vslice_dummy_var_120, vslice_dummy_var_121, vslice_dummy_var_122, vslice_dummy_var_123, vslice_dummy_var_124, vslice_dummy_var_125, vslice_dummy_var_126, vslice_dummy_var_127, vslice_dummy_var_128, vslice_dummy_var_129, vslice_dummy_var_130, vslice_dummy_var_131, vslice_dummy_var_132, vslice_dummy_var_133, vslice_dummy_var_134, vslice_dummy_var_135, vslice_dummy_var_136, vslice_dummy_var_137, vslice_dummy_var_138, vslice_dummy_var_139, vslice_dummy_var_140, vslice_dummy_var_141);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i55 := $slt.i32($i54, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    $i56 := $slt.i32($i54, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    $i57 := $slt.i32($i54, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    $i58 := $eq.i32($i54, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i58 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb316;

  $bb316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 930} ldv_stop();
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    goto $bb317;

  $bb317:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb40_dummy;

  $bb9:
    assume $i58 == 1;
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    $i320 := $M.46;
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    $i321 := $ne.i32($i320, 0);
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb304, $bb305;

  $bb305:
    assume !($i321 == 1);
    assume {:verifier.code 0} true;
    goto $bb315;

  $bb315:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb304:
    assume $i321 == 1;
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 1} true;
    call {:si_unique_call 924} $i322 := __VERIFIER_nondet_int();
    call {:si_unique_call 925} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i322);
    call {:si_unique_call 926} {:cexpr "tmp___41"} boogie_si_record_i32($i322);
    assume {:verifier.code 0} true;
    goto $bb306;

  $bb306:
    assume {:verifier.code 0} true;
    $i323 := $eq.i32($i322, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb307, $bb308;

  $bb308:
    assume !($i323 == 1);
    assume {:verifier.code 0} true;
    goto $bb313;

  $bb313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 929} ldv_stop();
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    goto $bb314;

  $bb314:
    assume {:verifier.code 0} true;
    goto $bb312;

  $bb312:
    assume {:verifier.code 0} true;
    goto $bb315;

  $bb307:
    assume $i323 == 1;
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    $i324 := $M.46;
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    $i325 := $eq.i32($i324, 1);
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb309, $bb310;

  $bb310:
    assume !($i325 == 1);
    assume {:verifier.code 0} true;
    goto $bb311;

  $bb311:
    assume {:verifier.code 0} true;
    goto $bb312;

  $bb309:
    assume $i325 == 1;
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 927} vslice_dummy_var_141 := stk_s_ctrl($p50);
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 928} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    goto $bb311;

  $bb7:
    assume $i57 == 1;
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    $i305 := $M.45;
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    $i306 := $ne.i32($i305, 0);
    goto corral_source_split_3882;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb284, $bb285;

  $bb285:
    assume !($i306 == 1);
    assume {:verifier.code 0} true;
    goto $bb303;

  $bb303:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb284:
    assume $i306 == 1;
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 1} true;
    call {:si_unique_call 914} $i307 := __VERIFIER_nondet_int();
    call {:si_unique_call 915} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i307);
    call {:si_unique_call 916} {:cexpr "tmp___40"} boogie_si_record_i32($i307);
    assume {:verifier.code 0} true;
    goto $bb286;

  $bb286:
    assume {:verifier.code 0} true;
    $i308 := $slt.i32($i307, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb287, $bb288;

  $bb288:
    assume !($i308 == 1);
    assume {:verifier.code 0} true;
    $i309 := $eq.i32($i307, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb289, $bb290;

  $bb290:
    assume {:verifier.code 0} true;
    assume !($i309 == 1);
    goto $bb291;

  $bb291:
    assume {:verifier.code 0} true;
    goto $bb301;

  $bb301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 923} ldv_stop();
    goto corral_source_split_4375;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    goto $bb302;

  $bb302:
    assume {:verifier.code 0} true;
    goto $bb297;

  $bb297:
    assume {:verifier.code 0} true;
    goto $bb303;

  $bb289:
    assume $i309 == 1;
    goto corral_source_split_4353;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    $i315 := $M.45;
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    $i316 := $eq.i32($i315, 1);
    goto corral_source_split_4355;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb298, $bb299;

  $bb299:
    assume !($i316 == 1);
    assume {:verifier.code 0} true;
    goto $bb300;

  $bb300:
    assume {:verifier.code 0} true;
    goto $bb297;

  $bb298:
    assume $i316 == 1;
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 920} vslice_dummy_var_140 := ldv_probe_2();
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 921} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    $i318 := $M.42;
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    $i319 := $add.i32($i318, 1);
    goto corral_source_split_4372;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    $M.42 := $i319;
    call {:si_unique_call 922} {:cexpr "ref_cnt"} boogie_si_record_i32($i319);
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    goto $bb300;

  $bb287:
    assume $i308 == 1;
    assume {:verifier.code 0} true;
    $i310 := $eq.i32($i307, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb292, $bb293;

  $bb293:
    assume {:verifier.code 0} true;
    assume !($i310 == 1);
    goto $bb291;

  $bb292:
    assume $i310 == 1;
    goto corral_source_split_4357;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    $i311 := $M.45;
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    $i312 := $eq.i32($i311, 2);
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb294, $bb295;

  $bb295:
    assume !($i312 == 1);
    assume {:verifier.code 0} true;
    goto $bb296;

  $bb296:
    assume {:verifier.code 0} true;
    goto $bb297;

  $bb294:
    assume $i312 == 1;
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 917} stk_v4l_dev_release($p48);
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 918} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4363;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    $i313 := $M.42;
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    $i314 := $sub.i32($i313, 1);
    goto corral_source_split_4365;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    $M.42 := $i314;
    call {:si_unique_call 919} {:cexpr "ref_cnt"} boogie_si_record_i32($i314);
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    goto $bb296;

  $bb5:
    assume $i56 == 1;
    assume {:verifier.code 0} true;
    $i59 := $slt.i32($i54, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i59 == 1);
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    $i196 := $M.44;
    goto corral_source_split_3893;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    $i197 := $ne.i32($i196, 0);
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb179, $bb180;

  $bb180:
    assume !($i197 == 1);
    assume {:verifier.code 0} true;
    goto $bb283;

  $bb283:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb179:
    assume $i197 == 1;
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 1} true;
    call {:si_unique_call 872} $i198 := __VERIFIER_nondet_int();
    call {:si_unique_call 873} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i198);
    call {:si_unique_call 874} {:cexpr "tmp___39"} boogie_si_record_i32($i198);
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb181:
    assume {:verifier.code 0} true;
    $i199 := $slt.i32($i198, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb182, $bb183;

  $bb183:
    assume !($i199 == 1);
    assume {:verifier.code 0} true;
    $i200 := $slt.i32($i198, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb184, $bb185;

  $bb185:
    assume !($i200 == 1);
    assume {:verifier.code 0} true;
    $i201 := $slt.i32($i198, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb186, $bb187;

  $bb187:
    assume !($i201 == 1);
    assume {:verifier.code 0} true;
    $i202 := $slt.i32($i198, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb188, $bb189;

  $bb189:
    assume !($i202 == 1);
    assume {:verifier.code 0} true;
    $i203 := $slt.i32($i198, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb190, $bb191;

  $bb191:
    assume !($i203 == 1);
    assume {:verifier.code 0} true;
    $i204 := $eq.i32($i198, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb192, $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    assume !($i204 == 1);
    goto $bb194;

  $bb194:
    assume {:verifier.code 0} true;
    goto $bb281;

  $bb281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 913} ldv_stop();
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    goto $bb282;

  $bb282:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb226:
    assume {:verifier.code 0} true;
    goto $bb283;

  $bb192:
    assume $i204 == 1;
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    $i300 := $M.44;
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    $i301 := $eq.i32($i300, 1);
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb278, $bb279;

  $bb279:
    assume !($i301 == 1);
    assume {:verifier.code 0} true;
    goto $bb280;

  $bb280:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb278:
    assume $i301 == 1;
    goto corral_source_split_4343;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    $p302 := $M.28;
    goto corral_source_split_4344;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    $i303 := $load.i32($M.37, $p1);
    goto corral_source_split_4345;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 911} vslice_dummy_var_139 := stk_vidioc_streamon($p302, $p25, $i303);
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 912} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    goto $bb280;

  $bb190:
    assume $i203 == 1;
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    $i296 := $M.44;
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    $i297 := $eq.i32($i296, 1);
    goto corral_source_split_4174;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb275, $bb276;

  $bb276:
    assume !($i297 == 1);
    assume {:verifier.code 0} true;
    goto $bb277;

  $bb277:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb275:
    assume $i297 == 1;
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    $p298 := $M.28;
    goto corral_source_split_4339;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 909} vslice_dummy_var_138 := stk_vidioc_s_input($p298, $p21, $i16);
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 910} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    goto $bb277;

  $bb188:
    assume $i202 == 1;
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    $i291 := $M.44;
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    $i292 := $eq.i32($i291, 1);
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb272, $bb273;

  $bb273:
    assume !($i292 == 1);
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb274:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb272:
    assume $i292 == 1;
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    $p293 := $M.32;
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    $p294 := $M.30;
    goto corral_source_split_4334;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 907} vslice_dummy_var_137 := v4l2_ctrl_subscribe_event($p293, $p294);
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 908} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb186:
    assume $i201 == 1;
    assume {:verifier.code 0} true;
    $i205 := $slt.i32($i198, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb195, $bb196;

  $bb196:
    assume !($i205 == 1);
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    $i287 := $M.44;
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    $i288 := $eq.i32($i287, 1);
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb269, $bb270;

  $bb270:
    assume !($i288 == 1);
    assume {:verifier.code 0} true;
    goto $bb271;

  $bb271:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb269:
    assume $i288 == 1;
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    $p289 := $M.28;
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 905} vslice_dummy_var_136 := stk_vidioc_enum_input($p289, $p37, $p23);
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 906} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    goto $bb271;

  $bb195:
    assume $i205 == 1;
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    $i283 := $M.44;
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    $i284 := $eq.i32($i283, 1);
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb266, $bb267;

  $bb267:
    assume !($i284 == 1);
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb268:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb266:
    assume $i284 == 1;
    goto corral_source_split_4322;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    $p285 := $M.28;
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 903} vslice_dummy_var_135 := stk_vidioc_g_parm($p285, $p34, $p33);
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 904} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4325;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb184:
    assume $i200 == 1;
    assume {:verifier.code 0} true;
    $i206 := $slt.i32($i198, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb197, $bb198;

  $bb198:
    assume !($i206 == 1);
    assume {:verifier.code 0} true;
    $i207 := $slt.i32($i198, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb199, $bb200;

  $bb200:
    assume !($i207 == 1);
    assume {:verifier.code 0} true;
    $i208 := $slt.i32($i198, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb201, $bb202;

  $bb202:
    assume !($i208 == 1);
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    $i279 := $M.44;
    goto corral_source_split_4197;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    $i280 := $eq.i32($i279, 1);
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb263, $bb264;

  $bb264:
    assume !($i280 == 1);
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb265:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb263:
    assume $i280 == 1;
    goto corral_source_split_4317;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    $p281 := $M.28;
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 901} vslice_dummy_var_134 := stk_vidioc_querycap($p281, $p15, $p39);
    goto corral_source_split_4319;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 902} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb201:
    assume $i208 == 1;
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    $i275 := $M.44;
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    $i276 := $eq.i32($i275, 1);
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb260, $bb261;

  $bb261:
    assume !($i276 == 1);
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb262:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb260:
    assume $i276 == 1;
    goto corral_source_split_4312;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    $p277 := $M.28;
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 899} vslice_dummy_var_133 := stk_vidioc_enum_framesizes($p277, $p19, $p43);
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 900} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb199:
    assume $i207 == 1;
    goto corral_source_split_4188;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    $i270 := $M.44;
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    $i271 := $eq.i32($i270, 1);
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb257, $bb258;

  $bb258:
    assume !($i271 == 1);
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb259:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb257:
    assume $i271 == 1;
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    $p272 := $M.28;
    goto corral_source_split_4307;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    $p273 := $M.31;
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 897} vslice_dummy_var_132 := stk_vidioc_qbuf($p272, $p35, $p273);
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 898} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb197:
    assume $i206 == 1;
    assume {:verifier.code 0} true;
    $i209 := $slt.i32($i198, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb203, $bb204;

  $bb204:
    assume !($i209 == 1);
    goto corral_source_split_4204;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    $i266 := $M.44;
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    $i267 := $eq.i32($i266, 1);
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb254, $bb255;

  $bb255:
    assume !($i267 == 1);
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb256:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb254:
    assume $i267 == 1;
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    $p268 := $M.28;
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 895} vslice_dummy_var_131 := stk_vidioc_g_input($p268, $p20, $p41);
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 896} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb203:
    assume $i209 == 1;
    goto corral_source_split_4200;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    $i261 := $M.44;
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    $i262 := $eq.i32($i261, 1);
    goto corral_source_split_4202;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb251, $bb252;

  $bb252:
    assume !($i262 == 1);
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb253:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb251:
    assume $i262 == 1;
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    $p263 := $M.28;
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    $p264 := $M.29;
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 893} vslice_dummy_var_130 := stk_vidioc_g_fmt_vid_cap($p263, $p26, $p264);
    goto corral_source_split_4298;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 894} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb182:
    assume $i199 == 1;
    assume {:verifier.code 0} true;
    $i210 := $slt.i32($i198, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb205, $bb206;

  $bb206:
    assume !($i210 == 1);
    assume {:verifier.code 0} true;
    $i211 := $slt.i32($i198, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb207, $bb208;

  $bb208:
    assume !($i211 == 1);
    assume {:verifier.code 0} true;
    $i212 := $slt.i32($i198, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb209, $bb210;

  $bb210:
    assume !($i212 == 1);
    assume {:verifier.code 0} true;
    $i213 := $slt.i32($i198, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb211, $bb212;

  $bb212:
    assume !($i213 == 1);
    goto corral_source_split_4216;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    $i256 := $M.44;
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    $i257 := $eq.i32($i256, 1);
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb248, $bb249;

  $bb249:
    assume !($i257 == 1);
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb250:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb248:
    assume $i257 == 1;
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    $p258 := $M.28;
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    $p259 := $M.29;
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 891} vslice_dummy_var_129 := stk_vidioc_s_fmt_vid_cap($p258, $p36, $p259);
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 892} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb211:
    assume $i213 == 1;
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    $i252 := $M.44;
    goto corral_source_split_4213;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    $i253 := $eq.i32($i252, 1);
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb245, $bb246;

  $bb246:
    assume !($i253 == 1);
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb247:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb245:
    assume $i253 == 1;
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    $p254 := $M.28;
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 889} vslice_dummy_var_128 := stk_vidioc_enum_fmt_vid_cap($p254, $p27, $p29);
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 890} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4287;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb209:
    assume $i212 == 1;
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    $i247 := $M.44;
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    $i248 := $eq.i32($i247, 1);
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb242, $bb243;

  $bb243:
    assume !($i248 == 1);
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb244:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb242:
    assume $i248 == 1;
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    $p249 := $M.28;
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    $p250 := $M.31;
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 887} vslice_dummy_var_127 := stk_vidioc_querybuf($p249, $p46, $p250);
    goto corral_source_split_4281;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 888} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb207:
    assume $i211 == 1;
    assume {:verifier.code 0} true;
    $i214 := $slt.i32($i198, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb213, $bb214;

  $bb214:
    assume !($i214 == 1);
    goto corral_source_split_4224;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    $i242 := $M.44;
    goto corral_source_split_4225;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    $i243 := $eq.i32($i242, 1);
    goto corral_source_split_4226;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb239, $bb240;

  $bb240:
    assume !($i243 == 1);
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb241:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb239:
    assume $i243 == 1;
    goto corral_source_split_4272;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    $p244 := $M.28;
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    $p245 := $M.31;
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} vslice_dummy_var_126 := stk_vidioc_dqbuf($p244, $p24, $p245);
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 886} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb213:
    assume $i214 == 1;
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    $i237 := $M.44;
    goto corral_source_split_4221;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    $i238 := $eq.i32($i237, 1);
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb236, $bb237;

  $bb237:
    assume !($i238 == 1);
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb238:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb236:
    assume $i238 == 1;
    goto corral_source_split_4266;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    $p239 := $M.28;
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    $i240 := $load.i32($M.38, $p2);
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 883} vslice_dummy_var_125 := stk_vidioc_streamoff($p239, $p18, $i240);
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 884} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb205:
    assume $i210 == 1;
    assume {:verifier.code 0} true;
    $i215 := $slt.i32($i198, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb215, $bb216;

  $bb216:
    assume !($i215 == 1);
    assume {:verifier.code 0} true;
    $i216 := $slt.i32($i198, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb217, $bb218;

  $bb218:
    assume !($i216 == 1);
    goto corral_source_split_4232;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    $i233 := $M.44;
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    $i234 := $eq.i32($i233, 1);
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb233, $bb234;

  $bb234:
    assume !($i234 == 1);
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb235:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb233:
    assume $i234 == 1;
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    $p235 := $M.28;
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 881} vslice_dummy_var_124 := v4l2_ctrl_log_status($p235, $p17);
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 882} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4264;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb217:
    assume $i216 == 1;
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    $i228 := $M.44;
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    $i229 := $eq.i32($i228, 1);
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb230, $bb231;

  $bb231:
    assume !($i229 == 1);
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb232:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb230:
    assume $i229 == 1;
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    $p230 := $M.28;
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    $p231 := $M.29;
    goto corral_source_split_4257;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 879} vslice_dummy_var_123 := stk_vidioc_try_fmt_vid_cap($p230, $p31, $p231);
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 880} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4259;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb215:
    assume $i215 == 1;
    assume {:verifier.code 0} true;
    $i217 := $slt.i32($i198, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb219, $bb220;

  $bb220:
    assume !($i217 == 1);
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    $i223 := $M.44;
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    $i224 := $eq.i32($i223, 1);
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb227, $bb228;

  $bb228:
    assume !($i224 == 1);
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb229:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb227:
    assume $i224 == 1;
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    $p225 := $M.32;
    goto corral_source_split_4250;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    $p226 := $M.30;
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 877} vslice_dummy_var_122 := v4l2_event_unsubscribe($p225, $p226);
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 878} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb219:
    assume $i217 == 1;
    assume {:verifier.code 0} true;
    $i218 := $eq.i32($i198, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb221, $bb222;

  $bb222:
    assume {:verifier.code 0} true;
    assume !($i218 == 1);
    goto $bb194;

  $bb221:
    assume $i218 == 1;
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    $i219 := $M.44;
    goto corral_source_split_4241;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    $i220 := $eq.i32($i219, 1);
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb223, $bb224;

  $bb224:
    assume !($i220 == 1);
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb225:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb223:
    assume $i220 == 1;
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    $p221 := $M.28;
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 875} vslice_dummy_var_121 := stk_vidioc_reqbufs($p221, $p30, $p45);
    goto corral_source_split_4246;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 876} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb12:
    assume $i59 == 1;
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    $i179 := $M.43;
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    $i180 := $ne.i32($i179, 0);
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb149, $bb150;

  $bb150:
    assume !($i180 == 1);
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb149:
    assume $i180 == 1;
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 1} true;
    call {:si_unique_call 853} $i181 := __VERIFIER_nondet_int();
    call {:si_unique_call 854} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i181);
    call {:si_unique_call 855} {:cexpr "tmp___38"} boogie_si_record_i32($i181);
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    $i182 := $slt.i32($i181, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb152, $bb153;

  $bb153:
    assume !($i182 == 1);
    assume {:verifier.code 0} true;
    $i183 := $eq.i32($i181, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb154, $bb155;

  $bb155:
    assume {:verifier.code 0} true;
    assume !($i183 == 1);
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 871} ldv_stop();
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb154:
    assume $i183 == 1;
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    $i189 := $M.43;
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    $i190 := $eq.i32($i189, 1);
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb167, $bb168;

  $bb168:
    assume !($i190 == 1);
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb167:
    assume $i190 == 1;
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 859} $i191 := stk_camera_driver_init();
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    $M.53 := $i191;
    call {:si_unique_call 860} {:cexpr "ldv_retval_5"} boogie_si_record_i32($i191);
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    $i192 := $M.53;
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    $i193 := $ne.i32($i192, 0);
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb169, $bb170;

  $bb170:
    assume !($i193 == 1);
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    $i194 := $M.53;
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    $i195 := $eq.i32($i194, 0);
    goto corral_source_split_4151;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb172, $bb173;

  $bb173:
    assume !($i195 == 1);
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb172:
    assume $i195 == 1;
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 862} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 863} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 864} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 865} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 866} ldv_initialize_v4l2_ioctl_ops_3();
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    $M.40 := 1;
    call {:si_unique_call 867} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} ldv_initialize_v4l2_file_operations_4();
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    $M.39 := 1;
    call {:si_unique_call 869} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 870} ldv_initialize_vm_operations_struct_6();
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb169:
    assume $i193 == 1;
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    $M.43 := 3;
    call {:si_unique_call 861} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 858} ldv_check_final_state();
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_16:
    assume !assertsPassed;
    return;

  $bb152:
    assume $i182 == 1;
    assume {:verifier.code 0} true;
    $i184 := $eq.i32($i181, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb157, $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    assume !($i184 == 1);
    goto $bb156;

  $bb157:
    assume $i184 == 1;
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    $i185 := $M.43;
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    $i186 := $eq.i32($i185, 2);
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb159, $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    assume !($i186 == 1);
    goto $bb161;

  $bb161:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb159:
    assume $i186 == 1;
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    $i187 := $M.42;
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    $i188 := $eq.i32($i187, 0);
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb162, $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    assume !($i188 == 1);
    goto $bb161;

  $bb162:
    assume $i188 == 1;
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 856} stk_camera_driver_exit();
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    $M.43 := 3;
    call {:si_unique_call 857} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb3:
    assume $i55 == 1;
    assume {:verifier.code 0} true;
    $i60 := $slt.i32($i54, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    $i61 := $slt.i32($i54, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i61 == 1);
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    $i129 := $M.41;
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    $i130 := $ne.i32($i129, 0);
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb93:
    assume $i130 == 1;
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 1} true;
    call {:si_unique_call 830} $i131 := __VERIFIER_nondet_int();
    call {:si_unique_call 831} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i131);
    call {:si_unique_call 832} {:cexpr "tmp___37"} boogie_si_record_i32($i131);
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    $i132 := $slt.i32($i131, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  $bb97:
    assume !($i132 == 1);
    assume {:verifier.code 0} true;
    $i133 := $slt.i32($i131, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb98, $bb99;

  $bb99:
    assume !($i133 == 1);
    assume {:verifier.code 0} true;
    $i134 := $slt.i32($i131, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i134 == 1);
    assume {:verifier.code 0} true;
    $i135 := $eq.i32($i131, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb102, $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    assume !($i135 == 1);
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 852} ldv_stop();
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb102:
    assume $i135 == 1;
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    $i174 := $M.41;
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    $i175 := $eq.i32($i174, 3);
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb140, $bb141;

  $bb141:
    assume !($i175 == 1);
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb140:
    assume $i175 == 1;
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} $i176 := ldv_reset_resume_1();
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    $M.52 := $i176;
    call {:si_unique_call 850} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i176);
    goto corral_source_split_4112;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    $i177 := $M.52;
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    $i178 := $eq.i32($i177, 0);
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb142, $bb143;

  $bb143:
    assume !($i178 == 1);
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb142:
    assume $i178 == 1;
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 851} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb100:
    assume $i134 == 1;
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    $i160 := $M.41;
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    $i161 := $eq.i32($i160, 3);
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb128, $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    assume !($i161 == 1);
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    $i167 := $M.41;
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    $i168 := $eq.i32($i167, 2);
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb134, $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    assume !($i168 == 1);
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb134:
    assume $i168 == 1;
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    $i169 := $M.51;
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    $i170 := $eq.i32($i169, 0);
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb137, $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    assume !($i170 == 1);
    goto $bb136;

  $bb137:
    assume $i170 == 1;
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    $p171 := $M.34;
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 846} stk_camera_disconnect($p171);
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 847} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    $i172 := $M.42;
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    $i173 := $sub.i32($i172, 1);
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    $M.42 := $i173;
    call {:si_unique_call 848} {:cexpr "ref_cnt"} boogie_si_record_i32($i173);
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb128:
    assume $i161 == 1;
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    $i162 := $M.51;
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    $i163 := $eq.i32($i162, 0);
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb131, $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    assume !($i163 == 1);
    goto $bb130;

  $bb131:
    assume $i163 == 1;
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    $p164 := $M.34;
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} stk_camera_disconnect($p164);
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 844} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    $i165 := $M.42;
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    $i166 := $sub.i32($i165, 1);
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    $M.42 := $i166;
    call {:si_unique_call 845} {:cexpr "ref_cnt"} boogie_si_record_i32($i166);
    goto corral_source_split_4093;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb98:
    assume $i133 == 1;
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    $i154 := $M.41;
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    $i155 := $eq.i32($i154, 3);
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb122, $bb123;

  $bb123:
    assume !($i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb122:
    assume $i155 == 1;
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    $p156 := $M.34;
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 840} $i157 := stk_camera_resume($p156);
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    $M.50 := $i157;
    call {:si_unique_call 841} {:cexpr "ldv_retval_2"} boogie_si_record_i32($i157);
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    $i158 := $M.50;
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    $i159 := $eq.i32($i158, 0);
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  $bb125:
    assume !($i159 == 1);
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb124:
    assume $i159 == 1;
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 842} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb96:
    assume $i132 == 1;
    assume {:verifier.code 0} true;
    $i136 := $slt.i32($i131, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i136 == 1);
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    $i146 := $M.41;
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    $i147 := $eq.i32($i146, 2);
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116, $bb117;

  $bb117:
    assume !($i147 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb116:
    assume $i147 == 1;
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    $p148 := $M.34;
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    $i150 := $load.i32($M.36, $p149);
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 837} $i151 := stk_camera_suspend($p148, $i150);
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    $M.49 := $i151;
    call {:si_unique_call 838} {:cexpr "ldv_retval_3"} boogie_si_record_i32($i151);
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    $i152 := $M.49;
    goto corral_source_split_4067;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    $i153 := $eq.i32($i152, 0);
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb118, $bb119;

  $bb119:
    assume !($i153 == 1);
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb118:
    assume $i153 == 1;
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    $M.41 := 3;
    call {:si_unique_call 839} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb105:
    assume $i136 == 1;
    assume {:verifier.code 0} true;
    $i137 := $eq.i32($i131, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    assume !($i137 == 1);
    goto $bb104;

  $bb107:
    assume $i137 == 1;
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    $i138 := $M.41;
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    $i139 := $eq.i32($i138, 1);
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb109, $bb110;

  $bb110:
    assume !($i139 == 1);
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb109:
    assume $i139 == 1;
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    $p140 := $M.34;
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} $i141 := stk_camera_probe($p140, $p14);
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    $M.48 := $i141;
    call {:si_unique_call 834} {:cexpr "ldv_retval_4"} boogie_si_record_i32($i141);
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    $i142 := $M.48;
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    $i143 := $eq.i32($i142, 0);
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb111, $bb112;

  $bb112:
    assume !($i143 == 1);
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb111:
    assume $i143 == 1;
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 835} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    $i144 := $M.42;
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    $i145 := $add.i32($i144, 1);
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    $M.42 := $i145;
    call {:si_unique_call 836} {:cexpr "ref_cnt"} boogie_si_record_i32($i145);
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb16:
    assume $i61 == 1;
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    $i77 := $M.40;
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    $i78 := $ne.i32($i77, 0);
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb41:
    assume $i78 == 1;
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 1} true;
    call {:si_unique_call 805} $i79 := __VERIFIER_nondet_int();
    call {:si_unique_call 806} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i79);
    call {:si_unique_call 807} {:cexpr "tmp___36"} boogie_si_record_i32($i79);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i80 := $slt.i32($i79, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    $i81 := $slt.i32($i79, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    $i82 := $slt.i32($i79, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    $i83 := $eq.i32($i79, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    assume !($i83 == 1);
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} ldv_stop();
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb50:
    assume $i83 == 1;
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    $i121 := $M.40;
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    $i122 := $eq.i32($i121, 1);
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $i125 := $M.40;
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    $i126 := $eq.i32($i125, 2);
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb87:
    assume $i126 == 1;
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    $p127 := $M.35;
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} vslice_dummy_var_120 := video_ioctl2($p127, $i3, $i7);
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    $M.40 := 2;
    call {:si_unique_call 828} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb84:
    assume $i122 == 1;
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    $p123 := $M.35;
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 825} vslice_dummy_var_119 := video_ioctl2($p123, $i3, $i7);
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    $M.40 := 1;
    call {:si_unique_call 826} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb48:
    assume $i82 == 1;
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    $i113 := $M.40;
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    $i114 := $eq.i32($i113, 1);
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb78:
    assume $i114 == 1;
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    $p115 := $M.35;
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 821} $i116 := v4l_stk_open($p115);
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    $M.47 := $i116;
    call {:si_unique_call 822} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i116);
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    $i117 := $M.47;
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    $i118 := $eq.i32($i117, 0);
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb80:
    assume $i118 == 1;
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    $M.40 := 2;
    call {:si_unique_call 823} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    $i119 := $M.42;
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    $i120 := $add.i32($i119, 1);
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    $M.42 := $i120;
    call {:si_unique_call 824} {:cexpr "ref_cnt"} boogie_si_record_i32($i120);
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb46:
    assume $i81 == 1;
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    $i105 := $M.40;
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    $i106 := $eq.i32($i105, 1);
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $i109 := $M.40;
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    $i110 := $eq.i32($i109, 2);
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb75:
    assume $i110 == 1;
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    $p111 := $M.35;
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 819} vslice_dummy_var_118 := v4l_stk_poll($p111, $p10);
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    $M.40 := 2;
    call {:si_unique_call 820} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb72:
    assume $i106 == 1;
    goto corral_source_split_3985;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    $p107 := $M.35;
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 817} vslice_dummy_var_117 := v4l_stk_poll($p107, $p10);
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    $M.40 := 1;
    call {:si_unique_call 818} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb44:
    assume $i80 == 1;
    assume {:verifier.code 0} true;
    $i84 := $slt.i32($i79, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    $i85 := $slt.i32($i79, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i85 == 1);
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    $i101 := $M.40;
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    $i102 := $eq.i32($i101, 2);
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb69:
    assume $i102 == 1;
    goto corral_source_split_3980;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    $p103 := $M.35;
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 815} vslice_dummy_var_116 := v4l_stk_read($p103, $p8, $i4, $p6);
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    $M.40 := 2;
    call {:si_unique_call 816} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb55:
    assume $i85 == 1;
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    $i95 := $M.40;
    goto corral_source_split_3948;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    $i96 := $eq.i32($i95, 2);
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb66:
    assume $i96 == 1;
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    $p97 := $M.35;
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 812} vslice_dummy_var_115 := v4l_stk_release($p97);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    $M.40 := 1;
    call {:si_unique_call 813} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    $i99 := $M.42;
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    $i100 := $sub.i32($i99, 1);
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    $M.42 := $i100;
    call {:si_unique_call 814} {:cexpr "ref_cnt"} boogie_si_record_i32($i100);
    goto corral_source_split_3978;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    goto $bb68;

  SeqInstr_13:
    assume !assertsPassed;
    return;

  $bb53:
    assume $i84 == 1;
    assume {:verifier.code 0} true;
    $i86 := $eq.i32($i79, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    assume !($i86 == 1);
    goto $bb52;

  $bb57:
    assume $i86 == 1;
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    $i87 := $M.40;
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    $i88 := $eq.i32($i87, 1);
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $i91 := $M.40;
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    $i92 := $eq.i32($i91, 2);
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb62:
    assume $i92 == 1;
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    $p93 := $M.35;
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} vslice_dummy_var_114 := v4l_stk_mmap($p93, $p12);
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    $M.40 := 2;
    call {:si_unique_call 811} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb59:
    assume $i88 == 1;
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    $p89 := $M.35;
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 808} vslice_dummy_var_113 := v4l_stk_mmap($p89, $p12);
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    $M.40 := 1;
    call {:si_unique_call 809} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_3962;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb14:
    assume $i60 == 1;
    assume {:verifier.code 0} true;
    $i62 := $eq.i32($i54, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i62 == 1);
    goto $bb11;

  $bb18:
    assume $i62 == 1;
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $i63 := $M.39;
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i63, 0);
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb20:
    assume $i64 == 1;
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 1} true;
    call {:si_unique_call 796} $i65 := __VERIFIER_nondet_int();
    call {:si_unique_call 797} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i65);
    call {:si_unique_call 798} {:cexpr "tmp___35"} boogie_si_record_i32($i65);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i66 := $slt.i32($i65, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    $i67 := $eq.i32($i65, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i67 == 1);
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 804} ldv_stop();
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb25:
    assume $i67 == 1;
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    $i72 := $M.39;
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    $i73 := $eq.i32($i72, 1);
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb34:
    assume $i73 == 1;
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    $p74 := $M.33;
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 801} stk_v4l_vm_open($p74);
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    $M.39 := 2;
    call {:si_unique_call 802} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    $i75 := $M.42;
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    $i76 := $add.i32($i75, 1);
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    $M.42 := $i76;
    call {:si_unique_call 803} {:cexpr "ref_cnt"} boogie_si_record_i32($i76);
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb23:
    assume $i66 == 1;
    assume {:verifier.code 0} true;
    $i68 := $eq.i32($i65, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i68 == 1);
    goto $bb27;

  $bb28:
    assume $i68 == 1;
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    $i69 := $M.39;
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    $i70 := $eq.i32($i69, 2);
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb30:
    assume $i70 == 1;
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    $p71 := $M.33;
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 799} stk_v4l_vm_close($p71);
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    $M.39 := 1;
    call {:si_unique_call 800} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb40_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 793} $i54 := __VERIFIER_nondet_int();
    call {:si_unique_call 794} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i54);
    call {:si_unique_call 795} {:cexpr "tmp___34"} boogie_si_record_i32($i54);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const __VERIFIER_nondet_size_t: ref;

axiom __VERIFIER_nondet_size_t == $sub.ref(0, 308939);

procedure __VERIFIER_nondet_size_t() returns ($r: i64);



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 309971);

procedure ldv_initialize();
  free requires assertsPassed;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4391;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    return;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 311003);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 312035);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const ldv_reset_resume_1: ref;

axiom ldv_reset_resume_1 == $sub.ref(0, 313067);

procedure ldv_reset_resume_1() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_reset_resume_1() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 1} true;
    call {:si_unique_call 931} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 932} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const stk_camera_driver_exit: ref;

axiom stk_camera_driver_exit == $sub.ref(0, 314099);

procedure stk_camera_driver_exit();
  free requires assertsPassed;
  modifies $M.41;



implementation stk_camera_driver_exit()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 933} ldv_usb_deregister_16(stk_camera_driver);
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    return;
}



const stk_camera_driver_init: ref;

axiom stk_camera_driver_init == $sub.ref(0, 315131);

procedure stk_camera_driver_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.41, $M.51, $M.34, $M.0, $CurrAddr;



implementation stk_camera_driver_init() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 934} $i0 := ldv_usb_register_driver_15(stk_camera_driver, __this_module, .str.45);
    call {:si_unique_call 935} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_probe_2: ref;

axiom ldv_probe_2 == $sub.ref(0, 316163);

procedure ldv_probe_2() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_probe_2() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 1} true;
    call {:si_unique_call 936} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 937} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 317195);

procedure ldv_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_final_state()
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4407;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    $p0 := $M.4;
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_4410;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} ldv_error();
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p3 := $M.54;
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_4418;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 939} ldv_error();
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i6 := $M.55;
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i7 == 1);
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 940} ldv_error();
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i8 := $M.3;
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i9 == 1);
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 941} ldv_error();
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i10 := $M.56;
    goto corral_source_split_4438;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i11 == 1);
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 942} ldv_error();
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_31:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i11 == 1;
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_28:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i9 == 1;
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_25:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i7 == 1;
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_22:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_19:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_usb_register_driver_15: ref;

axiom ldv_usb_register_driver_15 == $sub.ref(0, 318227);

procedure ldv_usb_register_driver_15($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.41, $M.51, $M.34, $M.0, $CurrAddr;



implementation ldv_usb_register_driver_15($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 943} $i3 := usb_register_driver($p0, $p1, $p2);
    call {:si_unique_call 944} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 945} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    $M.51 := 0;
    call {:si_unique_call 946} {:cexpr "usb_counter"} boogie_si_record_i32(0);
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 947} ldv_usb_driver_1();
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const usb_register_driver: ref;

axiom usb_register_driver == $sub.ref(0, 319259);

procedure usb_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 1} true;
    call {:si_unique_call 948} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 949} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_usb_deregister_16: ref;

axiom ldv_usb_deregister_16 == $sub.ref(0, 320291);

procedure ldv_usb_deregister_16($p0: ref);
  free requires assertsPassed;
  modifies $M.41;



implementation ldv_usb_deregister_16($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 950} usb_deregister($p0);
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    $M.41 := 0;
    call {:si_unique_call 951} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    return;
}



const usb_deregister: ref;

axiom usb_deregister == $sub.ref(0, 321323);

procedure usb_deregister($p0: ref);
  free requires assertsPassed;



implementation usb_deregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 322355);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 952} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 1} true;
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 323387);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 324419);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 325451);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_34:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 326483);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 327515);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 328547);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 329579);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 330611);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 331643);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 332675);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 333707);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 334739);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 335771);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4467;

  corral_source_split_4467:
    assume {:verifier.code 1} true;
    call {:si_unique_call 953} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 954} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 955} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_4473;

  corral_source_split_4473:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 1} true;
    call {:si_unique_call 956} __VERIFIER_assume($i4);
    goto corral_source_split_4475;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_4471;

  corral_source_split_4471:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 336803);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 337835);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 338867);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __VERIFIER_nondet_unsigned_int: ref;

axiom __VERIFIER_nondet_unsigned_int == $sub.ref(0, 339899);

procedure __VERIFIER_nondet_unsigned_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4477;

  corral_source_split_4477:
    assume {:verifier.code 1} true;
    call {:si_unique_call 957} $i0 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 958} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 959} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 1} true;
    call {:si_unique_call 960} $i1 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 961} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 962} {:cexpr "min"} boogie_si_record_i32($i1);
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 1} true;
    call {:si_unique_call 963} $i2 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 964} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 965} {:cexpr "max"} boogie_si_record_i32($i2);
    goto corral_source_split_4480;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_4481;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 1} true;
    call {:si_unique_call 966} __VERIFIER_assume($i7);
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    $i8 := $uge.i32($i0, $i1);
    goto corral_source_split_4489;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 1} true;
    call {:si_unique_call 967} __VERIFIER_assume($i11);
    goto corral_source_split_4497;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 1} true;
    $i10 := $ule.i32($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4483;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    $i5 := $uge.i32($i2, 4294967295);
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 1} true;
    $i6 := $ule.i32($i2, 4294967295);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 340931);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __VERIFIER_nondet_long: ref;

axiom __VERIFIER_nondet_long == $sub.ref(0, 341963);

procedure __VERIFIER_nondet_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4499;

  corral_source_split_4499:
    assume {:verifier.code 1} true;
    call {:si_unique_call 968} $i0 := __SMACK_nondet_long();
    call {:si_unique_call 969} {:cexpr "smack:ext:__SMACK_nondet_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 970} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    $i1 := $sge.i64($i0, $sub.i64(0, 9223372036854775808));
    goto corral_source_split_4501;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_4505;

  corral_source_split_4505:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 1} true;
    call {:si_unique_call 971} __VERIFIER_assume($i4);
    goto corral_source_split_4507;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 1} true;
    $i3 := $sle.i64($i0, 9223372036854775807);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 342995);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 344027);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 345059);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 346091);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 347123);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4509;

  corral_source_split_4509:
    assume {:verifier.code 1} true;
    call {:si_unique_call 972} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 973} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 974} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 1} true;
    call {:si_unique_call 975} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 976} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 977} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 1} true;
    call {:si_unique_call 978} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 979} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 980} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 1} true;
    call {:si_unique_call 981} __VERIFIER_assume($i7);
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_4527;

  corral_source_split_4527:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 1} true;
    call {:si_unique_call 982} __VERIFIER_assume($i11);
    goto corral_source_split_4529;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_4525;

  corral_source_split_4525:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 348155);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 349187);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 350219);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 351251);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 352283);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 353315);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 354347);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 355379);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_uint: ref;

axiom __VERIFIER_nondet_uint == $sub.ref(0, 356411);

procedure __VERIFIER_nondet_uint() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_uint() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4531;

  corral_source_split_4531:
    assume {:verifier.code 1} true;
    call {:si_unique_call 983} $i0 := __VERIFIER_nondet_unsigned_int();
    call {:si_unique_call 984} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 985} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 357443);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 1} true;
    call {:si_unique_call 986} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 987} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 988} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 358475);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4537;

  corral_source_split_4537:
    assume {:verifier.code 1} true;
    call {:si_unique_call 989} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 990} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 359507);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 360539);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 991} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 992} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 361571);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 362603);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 363635);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_21: [ref]i8;
  var cmdloc_dummy_var_22: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 993} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 994} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 1} true;
    call {:si_unique_call 995} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 996} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_4545;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_4549;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 997} $p6 := malloc($i5);
    goto corral_source_split_4551;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_4552;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_21 := $M.0;
    call {:si_unique_call 998} cmdloc_dummy_var_22 := $memset.i8(cmdloc_dummy_var_21, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_22;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4554;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 364667);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 365699);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.28, $M.29, $M.30, $M.31, $M.32, $M.33, $M.34, $M.35, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.3, $M.56, $M.2, $M.4, $M.54, $M.55, $M.14, $M.16, $M.15, $M.17, $M.18, $M.19, $M.71, $M.72, $M.21, $M.22, $M.20, $M.27, $M.0, $M.25, $M.73, $M.24, $M.12, $M.13, $M.77;



implementation __SMACK_static_init()
{

  $bb0:
    call {:si_unique_call 999} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    $M.28 := $0.ref;
    $M.29 := $0.ref;
    $M.30 := $0.ref;
    $M.31 := $0.ref;
    $M.32 := $0.ref;
    $M.33 := $0.ref;
    $M.34 := $0.ref;
    $M.35 := $0.ref;
    $M.39 := 0;
    call {:si_unique_call 1000} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    $M.40 := 0;
    call {:si_unique_call 1001} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    $M.41 := 0;
    call {:si_unique_call 1002} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.42 := 0;
    call {:si_unique_call 1003} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.43 := 0;
    call {:si_unique_call 1004} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.44 := 0;
    call {:si_unique_call 1005} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    $M.45 := 0;
    call {:si_unique_call 1006} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.46 := 0;
    call {:si_unique_call 1007} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    $M.47 := 0;
    call {:si_unique_call 1008} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.48 := 0;
    call {:si_unique_call 1009} {:cexpr "ldv_retval_4"} boogie_si_record_i32(0);
    $M.49 := 0;
    call {:si_unique_call 1010} {:cexpr "ldv_retval_3"} boogie_si_record_i32(0);
    $M.50 := 0;
    call {:si_unique_call 1011} {:cexpr "ldv_retval_2"} boogie_si_record_i32(0);
    $M.51 := 0;
    call {:si_unique_call 1012} {:cexpr "usb_counter"} boogie_si_record_i32(0);
    $M.52 := 0;
    call {:si_unique_call 1013} {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
    $M.53 := 0;
    call {:si_unique_call 1014} {:cexpr "ldv_retval_5"} boogie_si_record_i32(0);
    $M.3 := 0;
    call {:si_unique_call 1015} {:cexpr "INTERF_STATE"} boogie_si_record_i32(0);
    $M.56 := 0;
    call {:si_unique_call 1016} {:cexpr "SERIAL_STATE"} boogie_si_record_i32(0);
    $M.2 := $0.ref;
    $M.4 := $0.ref;
    $M.54 := $0.ref;
    $M.55 := 0;
    call {:si_unique_call 1017} {:cexpr "dev_counter"} boogie_si_record_i32(0);
    $M.14 := 0;
    call {:si_unique_call 1018} {:cexpr "completeFnIntCounter"} boogie_si_record_i32(0);
    $M.16 := 0;
    call {:si_unique_call 1019} {:cexpr "completeFnBulkCounter"} boogie_si_record_i32(0);
    $M.15 := $0.ref;
    $M.17 := $0.ref;
    $M.18 := $store.i32($M.18, ov_fmt_bayer, 58);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_fmt_bayer, $mul.ref(0, 24)), $mul.ref(0, 8)), $mul.ref(4, 1)), 64);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(ov_fmt_bayer, $mul.ref(0, 24)), $mul.ref(1, 8)), $mul.ref(0, 1)), 64);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_fmt_bayer, $mul.ref(0, 24)), $mul.ref(1, 8)), $mul.ref(4, 1)), 192);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(ov_fmt_bayer, $mul.ref(0, 24)), $mul.ref(2, 8)), $mul.ref(0, 1)), 255);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_fmt_bayer, $mul.ref(0, 24)), $mul.ref(2, 8)), $mul.ref(4, 1)), 255);
    $M.18 := $store.i32($M.18, ov_fmt_rgbr, 140);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_fmt_rgbr, $mul.ref(0, 104)), $mul.ref(0, 8)), $mul.ref(4, 1)), 0);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(ov_fmt_rgbr, $mul.ref(0, 104)), $mul.ref(1, 8)), $mul.ref(0, 1)), 58);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_fmt_rgbr, $mul.ref(0, 104)), $mul.ref(1, 8)), $mul.ref(4, 1)), 0);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(ov_fmt_rgbr, $mul.ref(0, 104)), $mul.ref(2, 8)), $mul.ref(0, 1)), 4);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_fmt_rgbr, $mul.ref(0, 104)), $mul.ref(2, 8)), $mul.ref(4, 1)), 0);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(ov_fmt_rgbr, $mul.ref(0, 104)), $mul.ref(3, 8)), $mul.ref(0, 1)), 20);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_fmt_rgbr, $mul.ref(0, 104)), $mul.ref(3, 8)), $mul.ref(4, 1)), 56);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(ov_fmt_rgbr, $mul.ref(0, 104)), $mul.ref(4, 8)), $mul.ref(0, 1)), 79);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_fmt_rgbr, $mul.ref(0, 104)), $mul.ref(4, 8)), $mul.ref(4, 1)), 179);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(ov_fmt_rgbr, $mul.ref(0, 104)), $mul.ref(5, 8)), $mul.ref(0, 1)), 80);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_fmt_rgbr, $mul.ref(0, 104)), $mul.ref(5, 8)), $mul.ref(4, 1)), 179);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(ov_fmt_rgbr, $mul.ref(0, 104)), $mul.ref(6, 8)), $mul.ref(0, 1)), 81);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_fmt_rgbr, $mul.ref(0, 104)), $mul.ref(6, 8)), $mul.ref(4, 1)), 0);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(ov_fmt_rgbr, $mul.ref(0, 104)), $mul.ref(7, 8)), $mul.ref(0, 1)), 82);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_fmt_rgbr, $mul.ref(0, 104)), $mul.ref(7, 8)), $mul.ref(4, 1)), 61);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(ov_fmt_rgbr, $mul.ref(0, 104)), $mul.ref(8, 8)), $mul.ref(0, 1)), 83);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_fmt_rgbr, $mul.ref(0, 104)), $mul.ref(8, 8)), $mul.ref(4, 1)), 167);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(ov_fmt_rgbr, $mul.ref(0, 104)), $mul.ref(9, 8)), $mul.ref(0, 1)), 84);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_fmt_rgbr, $mul.ref(0, 104)), $mul.ref(9, 8)), $mul.ref(4, 1)), 228);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(ov_fmt_rgbr, $mul.ref(0, 104)), $mul.ref(10, 8)), $mul.ref(0, 1)), 61);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_fmt_rgbr, $mul.ref(0, 104)), $mul.ref(10, 8)), $mul.ref(4, 1)), 128);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(ov_fmt_rgbr, $mul.ref(0, 104)), $mul.ref(11, 8)), $mul.ref(0, 1)), 64);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_fmt_rgbr, $mul.ref(0, 104)), $mul.ref(11, 8)), $mul.ref(4, 1)), 208);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(ov_fmt_rgbr, $mul.ref(0, 104)), $mul.ref(12, 8)), $mul.ref(0, 1)), 255);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_fmt_rgbr, $mul.ref(0, 104)), $mul.ref(12, 8)), $mul.ref(4, 1)), 255);
    $M.18 := $store.i32($M.18, ov_fmt_rgbp, 140);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_fmt_rgbp, $mul.ref(0, 104)), $mul.ref(0, 8)), $mul.ref(4, 1)), 0);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(ov_fmt_rgbp, $mul.ref(0, 104)), $mul.ref(1, 8)), $mul.ref(0, 1)), 58);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_fmt_rgbp, $mul.ref(0, 104)), $mul.ref(1, 8)), $mul.ref(4, 1)), 8);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(ov_fmt_rgbp, $mul.ref(0, 104)), $mul.ref(2, 8)), $mul.ref(0, 1)), 4);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_fmt_rgbp, $mul.ref(0, 104)), $mul.ref(2, 8)), $mul.ref(4, 1)), 0);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(ov_fmt_rgbp, $mul.ref(0, 104)), $mul.ref(3, 8)), $mul.ref(0, 1)), 20);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_fmt_rgbp, $mul.ref(0, 104)), $mul.ref(3, 8)), $mul.ref(4, 1)), 56);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(ov_fmt_rgbp, $mul.ref(0, 104)), $mul.ref(4, 8)), $mul.ref(0, 1)), 79);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_fmt_rgbp, $mul.ref(0, 104)), $mul.ref(4, 8)), $mul.ref(4, 1)), 179);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(ov_fmt_rgbp, $mul.ref(0, 104)), $mul.ref(5, 8)), $mul.ref(0, 1)), 80);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_fmt_rgbp, $mul.ref(0, 104)), $mul.ref(5, 8)), $mul.ref(4, 1)), 179);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(ov_fmt_rgbp, $mul.ref(0, 104)), $mul.ref(6, 8)), $mul.ref(0, 1)), 81);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_fmt_rgbp, $mul.ref(0, 104)), $mul.ref(6, 8)), $mul.ref(4, 1)), 0);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(ov_fmt_rgbp, $mul.ref(0, 104)), $mul.ref(7, 8)), $mul.ref(0, 1)), 82);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_fmt_rgbp, $mul.ref(0, 104)), $mul.ref(7, 8)), $mul.ref(4, 1)), 61);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(ov_fmt_rgbp, $mul.ref(0, 104)), $mul.ref(8, 8)), $mul.ref(0, 1)), 83);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_fmt_rgbp, $mul.ref(0, 104)), $mul.ref(8, 8)), $mul.ref(4, 1)), 167);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(ov_fmt_rgbp, $mul.ref(0, 104)), $mul.ref(9, 8)), $mul.ref(0, 1)), 84);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_fmt_rgbp, $mul.ref(0, 104)), $mul.ref(9, 8)), $mul.ref(4, 1)), 228);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(ov_fmt_rgbp, $mul.ref(0, 104)), $mul.ref(10, 8)), $mul.ref(0, 1)), 61);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_fmt_rgbp, $mul.ref(0, 104)), $mul.ref(10, 8)), $mul.ref(4, 1)), 128);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(ov_fmt_rgbp, $mul.ref(0, 104)), $mul.ref(11, 8)), $mul.ref(0, 1)), 64);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_fmt_rgbp, $mul.ref(0, 104)), $mul.ref(11, 8)), $mul.ref(4, 1)), 208);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(ov_fmt_rgbp, $mul.ref(0, 104)), $mul.ref(12, 8)), $mul.ref(0, 1)), 255);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_fmt_rgbp, $mul.ref(0, 104)), $mul.ref(12, 8)), $mul.ref(4, 1)), 255);
    $M.18 := $store.i32($M.18, ov_fmt_yuyv, 58);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_fmt_yuyv, $mul.ref(0, 80)), $mul.ref(0, 8)), $mul.ref(4, 1)), 0);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(ov_fmt_yuyv, $mul.ref(0, 80)), $mul.ref(1, 8)), $mul.ref(0, 1)), 79);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_fmt_yuyv, $mul.ref(0, 80)), $mul.ref(1, 8)), $mul.ref(4, 1)), 128);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(ov_fmt_yuyv, $mul.ref(0, 80)), $mul.ref(2, 8)), $mul.ref(0, 1)), 80);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_fmt_yuyv, $mul.ref(0, 80)), $mul.ref(2, 8)), $mul.ref(4, 1)), 128);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(ov_fmt_yuyv, $mul.ref(0, 80)), $mul.ref(3, 8)), $mul.ref(0, 1)), 81);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_fmt_yuyv, $mul.ref(0, 80)), $mul.ref(3, 8)), $mul.ref(4, 1)), 0);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(ov_fmt_yuyv, $mul.ref(0, 80)), $mul.ref(4, 8)), $mul.ref(0, 1)), 82);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_fmt_yuyv, $mul.ref(0, 80)), $mul.ref(4, 8)), $mul.ref(4, 1)), 34);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(ov_fmt_yuyv, $mul.ref(0, 80)), $mul.ref(5, 8)), $mul.ref(0, 1)), 83);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_fmt_yuyv, $mul.ref(0, 80)), $mul.ref(5, 8)), $mul.ref(4, 1)), 94);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(ov_fmt_yuyv, $mul.ref(0, 80)), $mul.ref(6, 8)), $mul.ref(0, 1)), 84);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_fmt_yuyv, $mul.ref(0, 80)), $mul.ref(6, 8)), $mul.ref(4, 1)), 128);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(ov_fmt_yuyv, $mul.ref(0, 80)), $mul.ref(7, 8)), $mul.ref(0, 1)), 61);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_fmt_yuyv, $mul.ref(0, 80)), $mul.ref(7, 8)), $mul.ref(4, 1)), 80);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(ov_fmt_yuyv, $mul.ref(0, 80)), $mul.ref(8, 8)), $mul.ref(0, 1)), 64);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_fmt_yuyv, $mul.ref(0, 80)), $mul.ref(8, 8)), $mul.ref(4, 1)), 192);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(ov_fmt_yuyv, $mul.ref(0, 80)), $mul.ref(9, 8)), $mul.ref(0, 1)), 255);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_fmt_yuyv, $mul.ref(0, 80)), $mul.ref(9, 8)), $mul.ref(4, 1)), 255);
    $M.18 := $store.i32($M.18, ov_fmt_uyvy, 58);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_fmt_uyvy, $mul.ref(0, 80)), $mul.ref(0, 8)), $mul.ref(4, 1)), 12);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(ov_fmt_uyvy, $mul.ref(0, 80)), $mul.ref(1, 8)), $mul.ref(0, 1)), 79);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_fmt_uyvy, $mul.ref(0, 80)), $mul.ref(1, 8)), $mul.ref(4, 1)), 128);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(ov_fmt_uyvy, $mul.ref(0, 80)), $mul.ref(2, 8)), $mul.ref(0, 1)), 80);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_fmt_uyvy, $mul.ref(0, 80)), $mul.ref(2, 8)), $mul.ref(4, 1)), 128);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(ov_fmt_uyvy, $mul.ref(0, 80)), $mul.ref(3, 8)), $mul.ref(0, 1)), 81);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_fmt_uyvy, $mul.ref(0, 80)), $mul.ref(3, 8)), $mul.ref(4, 1)), 0);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(ov_fmt_uyvy, $mul.ref(0, 80)), $mul.ref(4, 8)), $mul.ref(0, 1)), 82);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_fmt_uyvy, $mul.ref(0, 80)), $mul.ref(4, 8)), $mul.ref(4, 1)), 34);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(ov_fmt_uyvy, $mul.ref(0, 80)), $mul.ref(5, 8)), $mul.ref(0, 1)), 83);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_fmt_uyvy, $mul.ref(0, 80)), $mul.ref(5, 8)), $mul.ref(4, 1)), 94);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(ov_fmt_uyvy, $mul.ref(0, 80)), $mul.ref(6, 8)), $mul.ref(0, 1)), 84);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_fmt_uyvy, $mul.ref(0, 80)), $mul.ref(6, 8)), $mul.ref(4, 1)), 128);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(ov_fmt_uyvy, $mul.ref(0, 80)), $mul.ref(7, 8)), $mul.ref(0, 1)), 61);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_fmt_uyvy, $mul.ref(0, 80)), $mul.ref(7, 8)), $mul.ref(4, 1)), 80);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(ov_fmt_uyvy, $mul.ref(0, 80)), $mul.ref(8, 8)), $mul.ref(0, 1)), 64);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_fmt_uyvy, $mul.ref(0, 80)), $mul.ref(8, 8)), $mul.ref(4, 1)), 192);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(ov_fmt_uyvy, $mul.ref(0, 80)), $mul.ref(9, 8)), $mul.ref(0, 1)), 255);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_fmt_uyvy, $mul.ref(0, 80)), $mul.ref(9, 8)), $mul.ref(4, 1)), 255);
    $M.18 := $store.i32($M.18, ov_initvals, 17);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_initvals, $mul.ref(0, 376)), $mul.ref(0, 8)), $mul.ref(4, 1)), 128);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(ov_initvals, $mul.ref(0, 376)), $mul.ref(1, 8)), $mul.ref(0, 1)), 59);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_initvals, $mul.ref(0, 376)), $mul.ref(1, 8)), $mul.ref(4, 1)), 1);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(ov_initvals, $mul.ref(0, 376)), $mul.ref(2, 8)), $mul.ref(0, 1)), 106);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_initvals, $mul.ref(0, 376)), $mul.ref(2, 8)), $mul.ref(4, 1)), 125);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(ov_initvals, $mul.ref(0, 376)), $mul.ref(3, 8)), $mul.ref(0, 1)), 16);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_initvals, $mul.ref(0, 376)), $mul.ref(3, 8)), $mul.ref(4, 1)), 64);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(ov_initvals, $mul.ref(0, 376)), $mul.ref(4, 8)), $mul.ref(0, 1)), 0);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_initvals, $mul.ref(0, 376)), $mul.ref(4, 8)), $mul.ref(4, 1)), 0);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(ov_initvals, $mul.ref(0, 376)), $mul.ref(5, 8)), $mul.ref(0, 1)), 1);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_initvals, $mul.ref(0, 376)), $mul.ref(5, 8)), $mul.ref(4, 1)), 128);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(ov_initvals, $mul.ref(0, 376)), $mul.ref(6, 8)), $mul.ref(0, 1)), 2);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_initvals, $mul.ref(0, 376)), $mul.ref(6, 8)), $mul.ref(4, 1)), 128);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(ov_initvals, $mul.ref(0, 376)), $mul.ref(7, 8)), $mul.ref(0, 1)), 19);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_initvals, $mul.ref(0, 376)), $mul.ref(7, 8)), $mul.ref(4, 1)), 101);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(ov_initvals, $mul.ref(0, 376)), $mul.ref(8, 8)), $mul.ref(0, 1)), 57);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_initvals, $mul.ref(0, 376)), $mul.ref(8, 8)), $mul.ref(4, 1)), 80);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(ov_initvals, $mul.ref(0, 376)), $mul.ref(9, 8)), $mul.ref(0, 1)), 56);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_initvals, $mul.ref(0, 376)), $mul.ref(9, 8)), $mul.ref(4, 1)), 147);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(ov_initvals, $mul.ref(0, 376)), $mul.ref(10, 8)), $mul.ref(0, 1)), 55);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_initvals, $mul.ref(0, 376)), $mul.ref(10, 8)), $mul.ref(4, 1)), 0);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(ov_initvals, $mul.ref(0, 376)), $mul.ref(11, 8)), $mul.ref(0, 1)), 53);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_initvals, $mul.ref(0, 376)), $mul.ref(11, 8)), $mul.ref(4, 1)), 129);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(ov_initvals, $mul.ref(0, 376)), $mul.ref(12, 8)), $mul.ref(0, 1)), 14);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_initvals, $mul.ref(0, 376)), $mul.ref(12, 8)), $mul.ref(4, 1)), 32);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(ov_initvals, $mul.ref(0, 376)), $mul.ref(13, 8)), $mul.ref(0, 1)), 4);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_initvals, $mul.ref(0, 376)), $mul.ref(13, 8)), $mul.ref(4, 1)), 0);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(ov_initvals, $mul.ref(0, 376)), $mul.ref(14, 8)), $mul.ref(0, 1)), 12);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_initvals, $mul.ref(0, 376)), $mul.ref(14, 8)), $mul.ref(4, 1)), 0);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(ov_initvals, $mul.ref(0, 376)), $mul.ref(15, 8)), $mul.ref(0, 1)), 13);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_initvals, $mul.ref(0, 376)), $mul.ref(15, 8)), $mul.ref(4, 1)), 0);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(ov_initvals, $mul.ref(0, 376)), $mul.ref(16, 8)), $mul.ref(0, 1)), 27);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_initvals, $mul.ref(0, 376)), $mul.ref(16, 8)), $mul.ref(4, 1)), 0);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(ov_initvals, $mul.ref(0, 376)), $mul.ref(17, 8)), $mul.ref(0, 1)), 22);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_initvals, $mul.ref(0, 376)), $mul.ref(17, 8)), $mul.ref(4, 1)), 7);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(ov_initvals, $mul.ref(0, 376)), $mul.ref(18, 8)), $mul.ref(0, 1)), 51);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_initvals, $mul.ref(0, 376)), $mul.ref(18, 8)), $mul.ref(4, 1)), 226);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(ov_initvals, $mul.ref(0, 376)), $mul.ref(19, 8)), $mul.ref(0, 1)), 52);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_initvals, $mul.ref(0, 376)), $mul.ref(19, 8)), $mul.ref(4, 1)), 191);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(ov_initvals, $mul.ref(0, 376)), $mul.ref(20, 8)), $mul.ref(0, 1)), 65);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_initvals, $mul.ref(0, 376)), $mul.ref(20, 8)), $mul.ref(4, 1)), 0);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(ov_initvals, $mul.ref(0, 376)), $mul.ref(21, 8)), $mul.ref(0, 1)), 150);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_initvals, $mul.ref(0, 376)), $mul.ref(21, 8)), $mul.ref(4, 1)), 4);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(ov_initvals, $mul.ref(0, 376)), $mul.ref(22, 8)), $mul.ref(0, 1)), 105);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_initvals, $mul.ref(0, 376)), $mul.ref(22, 8)), $mul.ref(4, 1)), 64);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(ov_initvals, $mul.ref(0, 376)), $mul.ref(23, 8)), $mul.ref(0, 1)), 142);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_initvals, $mul.ref(0, 376)), $mul.ref(23, 8)), $mul.ref(4, 1)), 0);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(ov_initvals, $mul.ref(0, 376)), $mul.ref(24, 8)), $mul.ref(0, 1)), 60);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_initvals, $mul.ref(0, 376)), $mul.ref(24, 8)), $mul.ref(4, 1)), 115);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(ov_initvals, $mul.ref(0, 376)), $mul.ref(25, 8)), $mul.ref(0, 1)), 143);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_initvals, $mul.ref(0, 376)), $mul.ref(25, 8)), $mul.ref(4, 1)), 223);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(ov_initvals, $mul.ref(0, 376)), $mul.ref(26, 8)), $mul.ref(0, 1)), 139);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_initvals, $mul.ref(0, 376)), $mul.ref(26, 8)), $mul.ref(4, 1)), 6);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(ov_initvals, $mul.ref(0, 376)), $mul.ref(27, 8)), $mul.ref(0, 1)), 140);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_initvals, $mul.ref(0, 376)), $mul.ref(27, 8)), $mul.ref(4, 1)), 32);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(ov_initvals, $mul.ref(0, 376)), $mul.ref(28, 8)), $mul.ref(0, 1)), 148);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_initvals, $mul.ref(0, 376)), $mul.ref(28, 8)), $mul.ref(4, 1)), 136);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(ov_initvals, $mul.ref(0, 376)), $mul.ref(29, 8)), $mul.ref(0, 1)), 149);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_initvals, $mul.ref(0, 376)), $mul.ref(29, 8)), $mul.ref(4, 1)), 136);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(ov_initvals, $mul.ref(0, 376)), $mul.ref(30, 8)), $mul.ref(0, 1)), 41);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_initvals, $mul.ref(0, 376)), $mul.ref(30, 8)), $mul.ref(4, 1)), 63);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(ov_initvals, $mul.ref(0, 376)), $mul.ref(31, 8)), $mul.ref(0, 1)), 15);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_initvals, $mul.ref(0, 376)), $mul.ref(31, 8)), $mul.ref(4, 1)), 66);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(ov_initvals, $mul.ref(0, 376)), $mul.ref(32, 8)), $mul.ref(0, 1)), 165);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_initvals, $mul.ref(0, 376)), $mul.ref(32, 8)), $mul.ref(4, 1)), 128);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(ov_initvals, $mul.ref(0, 376)), $mul.ref(33, 8)), $mul.ref(0, 1)), 169);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_initvals, $mul.ref(0, 376)), $mul.ref(33, 8)), $mul.ref(4, 1)), 184);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(ov_initvals, $mul.ref(0, 376)), $mul.ref(34, 8)), $mul.ref(0, 1)), 170);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_initvals, $mul.ref(0, 376)), $mul.ref(34, 8)), $mul.ref(4, 1)), 146);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(ov_initvals, $mul.ref(0, 376)), $mul.ref(35, 8)), $mul.ref(0, 1)), 171);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_initvals, $mul.ref(0, 376)), $mul.ref(35, 8)), $mul.ref(4, 1)), 10);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(ov_initvals, $mul.ref(0, 376)), $mul.ref(36, 8)), $mul.ref(0, 1)), 144);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_initvals, $mul.ref(0, 376)), $mul.ref(36, 8)), $mul.ref(4, 1)), 0);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(ov_initvals, $mul.ref(0, 376)), $mul.ref(37, 8)), $mul.ref(0, 1)), 145);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_initvals, $mul.ref(0, 376)), $mul.ref(37, 8)), $mul.ref(4, 1)), 0);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(ov_initvals, $mul.ref(0, 376)), $mul.ref(38, 8)), $mul.ref(0, 1)), 159);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_initvals, $mul.ref(0, 376)), $mul.ref(38, 8)), $mul.ref(4, 1)), 0);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(ov_initvals, $mul.ref(0, 376)), $mul.ref(39, 8)), $mul.ref(0, 1)), 160);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_initvals, $mul.ref(0, 376)), $mul.ref(39, 8)), $mul.ref(4, 1)), 0);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(ov_initvals, $mul.ref(0, 376)), $mul.ref(40, 8)), $mul.ref(0, 1)), 36);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_initvals, $mul.ref(0, 376)), $mul.ref(40, 8)), $mul.ref(4, 1)), 104);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(ov_initvals, $mul.ref(0, 376)), $mul.ref(41, 8)), $mul.ref(0, 1)), 37);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_initvals, $mul.ref(0, 376)), $mul.ref(41, 8)), $mul.ref(4, 1)), 92);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(ov_initvals, $mul.ref(0, 376)), $mul.ref(42, 8)), $mul.ref(0, 1)), 38);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_initvals, $mul.ref(0, 376)), $mul.ref(42, 8)), $mul.ref(4, 1)), 195);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(ov_initvals, $mul.ref(0, 376)), $mul.ref(43, 8)), $mul.ref(0, 1)), 20);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_initvals, $mul.ref(0, 376)), $mul.ref(43, 8)), $mul.ref(4, 1)), 46);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(ov_initvals, $mul.ref(0, 376)), $mul.ref(44, 8)), $mul.ref(0, 1)), 42);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_initvals, $mul.ref(0, 376)), $mul.ref(44, 8)), $mul.ref(4, 1)), 0);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(ov_initvals, $mul.ref(0, 376)), $mul.ref(45, 8)), $mul.ref(0, 1)), 43);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_initvals, $mul.ref(0, 376)), $mul.ref(45, 8)), $mul.ref(4, 1)), 0);
    $M.18 := $store.i32($M.18, $add.ref($add.ref($add.ref(ov_initvals, $mul.ref(0, 376)), $mul.ref(46, 8)), $mul.ref(0, 1)), 255);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(ov_initvals, $mul.ref(0, 376)), $mul.ref(46, 8)), $mul.ref(4, 1)), 255);
    $M.71 := $store.i16($M.71, stkwebcam_table, 899);
    $M.71 := $store.i16($M.71, $add.ref($add.ref($add.ref(stkwebcam_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(2, 1)), 5967);
    $M.71 := $store.i16($M.71, $add.ref($add.ref($add.ref(stkwebcam_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(4, 1)), $sub.i16(0, 23791));
    $M.71 := $store.i16($M.71, $add.ref($add.ref($add.ref(stkwebcam_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(6, 1)), 0);
    $M.71 := $store.i16($M.71, $add.ref($add.ref($add.ref(stkwebcam_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(8, 1)), 0);
    $M.71 := $store.i8($M.71, $add.ref($add.ref($add.ref(stkwebcam_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(10, 1)), 0);
    $M.71 := $store.i8($M.71, $add.ref($add.ref($add.ref(stkwebcam_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(11, 1)), 0);
    $M.71 := $store.i8($M.71, $add.ref($add.ref($add.ref(stkwebcam_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(12, 1)), 0);
    $M.71 := $store.i8($M.71, $add.ref($add.ref($add.ref(stkwebcam_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(13, 1)), $sub.i8(0, 1));
    $M.71 := $store.i8($M.71, $add.ref($add.ref($add.ref(stkwebcam_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(14, 1)), $sub.i8(0, 1));
    $M.71 := $store.i8($M.71, $add.ref($add.ref($add.ref(stkwebcam_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.71 := $store.i8($M.71, $add.ref($add.ref($add.ref(stkwebcam_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.71 := $store.i64($M.71, $add.ref($add.ref($add.ref(stkwebcam_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.71 := $store.i16($M.71, $add.ref($add.ref($add.ref(stkwebcam_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(0, 1)), 899);
    $M.71 := $store.i16($M.71, $add.ref($add.ref($add.ref(stkwebcam_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(2, 1)), 1505);
    $M.71 := $store.i16($M.71, $add.ref($add.ref($add.ref(stkwebcam_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(4, 1)), 1281);
    $M.71 := $store.i16($M.71, $add.ref($add.ref($add.ref(stkwebcam_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(6, 1)), 0);
    $M.71 := $store.i16($M.71, $add.ref($add.ref($add.ref(stkwebcam_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(8, 1)), 0);
    $M.71 := $store.i8($M.71, $add.ref($add.ref($add.ref(stkwebcam_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(10, 1)), 0);
    $M.71 := $store.i8($M.71, $add.ref($add.ref($add.ref(stkwebcam_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(11, 1)), 0);
    $M.71 := $store.i8($M.71, $add.ref($add.ref($add.ref(stkwebcam_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(12, 1)), 0);
    $M.71 := $store.i8($M.71, $add.ref($add.ref($add.ref(stkwebcam_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(13, 1)), $sub.i8(0, 1));
    $M.71 := $store.i8($M.71, $add.ref($add.ref($add.ref(stkwebcam_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(14, 1)), $sub.i8(0, 1));
    $M.71 := $store.i8($M.71, $add.ref($add.ref($add.ref(stkwebcam_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.71 := $store.i8($M.71, $add.ref($add.ref($add.ref(stkwebcam_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.71 := $store.i64($M.71, $add.ref($add.ref($add.ref(stkwebcam_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.71 := $store.i16($M.71, $add.ref($add.ref($add.ref(stkwebcam_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(0, 1)), 0);
    $M.71 := $store.i16($M.71, $add.ref($add.ref($add.ref(stkwebcam_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(2, 1)), 0);
    $M.71 := $store.i16($M.71, $add.ref($add.ref($add.ref(stkwebcam_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(4, 1)), 0);
    $M.71 := $store.i16($M.71, $add.ref($add.ref($add.ref(stkwebcam_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(6, 1)), 0);
    $M.71 := $store.i16($M.71, $add.ref($add.ref($add.ref(stkwebcam_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(8, 1)), 0);
    $M.71 := $store.i8($M.71, $add.ref($add.ref($add.ref(stkwebcam_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(10, 1)), 0);
    $M.71 := $store.i8($M.71, $add.ref($add.ref($add.ref(stkwebcam_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(11, 1)), 0);
    $M.71 := $store.i8($M.71, $add.ref($add.ref($add.ref(stkwebcam_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(12, 1)), 0);
    $M.71 := $store.i8($M.71, $add.ref($add.ref($add.ref(stkwebcam_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(13, 1)), 0);
    $M.71 := $store.i8($M.71, $add.ref($add.ref($add.ref(stkwebcam_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(14, 1)), 0);
    $M.71 := $store.i8($M.71, $add.ref($add.ref($add.ref(stkwebcam_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(15, 1)), 0);
    $M.71 := $store.i8($M.71, $add.ref($add.ref($add.ref(stkwebcam_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(16, 1)), 0);
    $M.71 := $store.i64($M.71, $add.ref($add.ref($add.ref(stkwebcam_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(24, 1)), 0);
    $M.72 := $store.ref($M.72, stk_camera_driver, .str.45);
    $M.72 := $store.ref($M.72, $add.ref($add.ref(stk_camera_driver, $mul.ref(0, 304)), $mul.ref(8, 1)), stk_camera_probe);
    $M.72 := $store.ref($M.72, $add.ref($add.ref(stk_camera_driver, $mul.ref(0, 304)), $mul.ref(16, 1)), stk_camera_disconnect);
    $M.72 := $store.ref($M.72, $add.ref($add.ref(stk_camera_driver, $mul.ref(0, 304)), $mul.ref(24, 1)), $0.ref);
    $M.72 := $store.ref($M.72, $add.ref($add.ref(stk_camera_driver, $mul.ref(0, 304)), $mul.ref(32, 1)), stk_camera_suspend);
    $M.72 := $store.ref($M.72, $add.ref($add.ref(stk_camera_driver, $mul.ref(0, 304)), $mul.ref(40, 1)), stk_camera_resume);
    $M.72 := $store.ref($M.72, $add.ref($add.ref(stk_camera_driver, $mul.ref(0, 304)), $mul.ref(48, 1)), $0.ref);
    $M.72 := $store.ref($M.72, $add.ref($add.ref(stk_camera_driver, $mul.ref(0, 304)), $mul.ref(56, 1)), $0.ref);
    $M.72 := $store.ref($M.72, $add.ref($add.ref(stk_camera_driver, $mul.ref(0, 304)), $mul.ref(64, 1)), $0.ref);
    $M.72 := $store.ref($M.72, $add.ref($add.ref(stk_camera_driver, $mul.ref(0, 304)), $mul.ref(72, 1)), stkwebcam_table);
    $M.72 := $store.i32($M.72, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_camera_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.72 := $store.i32($M.72, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_camera_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.72 := $store.i32($M.72, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_camera_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.72 := $store.ref($M.72, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_camera_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.72 := $store.ref($M.72, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_camera_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.72 := $store.ref($M.72, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_camera_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.72 := $store.ref($M.72, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_camera_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.72 := $store.ref($M.72, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_camera_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.72 := $store.i32($M.72, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_camera_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.72 := $store.i64($M.72, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_camera_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.72 := $store.ref($M.72, $add.ref($add.ref($add.ref($add.ref(stk_camera_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.72 := $store.ref($M.72, $add.ref($add.ref($add.ref($add.ref(stk_camera_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.72 := $store.ref($M.72, $add.ref($add.ref($add.ref($add.ref(stk_camera_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.72 := $store.ref($M.72, $add.ref($add.ref($add.ref($add.ref(stk_camera_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.72 := $store.ref($M.72, $add.ref($add.ref($add.ref($add.ref(stk_camera_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.72 := $store.ref($M.72, $add.ref($add.ref($add.ref($add.ref(stk_camera_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $0.ref);
    $M.72 := $store.i8($M.72, $add.ref($add.ref($add.ref($add.ref(stk_camera_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), 0);
    $M.72 := $store.ref($M.72, $add.ref($add.ref($add.ref($add.ref(stk_camera_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(40, 1)), $0.ref);
    $M.72 := $store.ref($M.72, $add.ref($add.ref($add.ref($add.ref(stk_camera_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(48, 1)), $0.ref);
    $M.72 := $store.ref($M.72, $add.ref($add.ref($add.ref($add.ref(stk_camera_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(56, 1)), $0.ref);
    $M.72 := $store.ref($M.72, $add.ref($add.ref($add.ref($add.ref(stk_camera_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(64, 1)), $0.ref);
    $M.72 := $store.ref($M.72, $add.ref($add.ref($add.ref($add.ref(stk_camera_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(72, 1)), $0.ref);
    $M.72 := $store.ref($M.72, $add.ref($add.ref($add.ref($add.ref(stk_camera_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(80, 1)), $0.ref);
    $M.72 := $store.ref($M.72, $add.ref($add.ref($add.ref($add.ref(stk_camera_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(88, 1)), $0.ref);
    $M.72 := $store.ref($M.72, $add.ref($add.ref($add.ref($add.ref(stk_camera_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(96, 1)), $0.ref);
    $M.72 := $store.ref($M.72, $add.ref($add.ref($add.ref($add.ref(stk_camera_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(104, 1)), $0.ref);
    $M.72 := $store.ref($M.72, $add.ref($add.ref($add.ref($add.ref(stk_camera_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(112, 1)), $0.ref);
    $M.72 := $store.i32($M.72, $add.ref($add.ref($add.ref(stk_camera_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(120, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(stk_camera_driver, $mul.ref(0, 304)), $mul.ref(296, 1)), 0);
    $M.21 := $store.i32($M.21, stk_sizes, 1280);
    $M.22 := $store.i32($M.22, $add.ref($add.ref($add.ref(stk_sizes, $mul.ref(0, 60)), $mul.ref(0, 12)), $mul.ref(4, 1)), 1024);
    $M.20 := $store.i32($M.20, $add.ref($add.ref($add.ref(stk_sizes, $mul.ref(0, 60)), $mul.ref(0, 12)), $mul.ref(8, 1)), 1);
    $M.21 := $store.i32($M.21, $add.ref($add.ref($add.ref(stk_sizes, $mul.ref(0, 60)), $mul.ref(1, 12)), $mul.ref(0, 1)), 640);
    $M.22 := $store.i32($M.22, $add.ref($add.ref($add.ref(stk_sizes, $mul.ref(0, 60)), $mul.ref(1, 12)), $mul.ref(4, 1)), 480);
    $M.20 := $store.i32($M.20, $add.ref($add.ref($add.ref(stk_sizes, $mul.ref(0, 60)), $mul.ref(1, 12)), $mul.ref(8, 1)), 0);
    $M.21 := $store.i32($M.21, $add.ref($add.ref($add.ref(stk_sizes, $mul.ref(0, 60)), $mul.ref(2, 12)), $mul.ref(0, 1)), 352);
    $M.22 := $store.i32($M.22, $add.ref($add.ref($add.ref(stk_sizes, $mul.ref(0, 60)), $mul.ref(2, 12)), $mul.ref(4, 1)), 288);
    $M.20 := $store.i32($M.20, $add.ref($add.ref($add.ref(stk_sizes, $mul.ref(0, 60)), $mul.ref(2, 12)), $mul.ref(8, 1)), 2);
    $M.21 := $store.i32($M.21, $add.ref($add.ref($add.ref(stk_sizes, $mul.ref(0, 60)), $mul.ref(3, 12)), $mul.ref(0, 1)), 320);
    $M.22 := $store.i32($M.22, $add.ref($add.ref($add.ref(stk_sizes, $mul.ref(0, 60)), $mul.ref(3, 12)), $mul.ref(4, 1)), 240);
    $M.20 := $store.i32($M.20, $add.ref($add.ref($add.ref(stk_sizes, $mul.ref(0, 60)), $mul.ref(3, 12)), $mul.ref(8, 1)), 3);
    $M.21 := $store.i32($M.21, $add.ref($add.ref($add.ref(stk_sizes, $mul.ref(0, 60)), $mul.ref(4, 12)), $mul.ref(0, 1)), 176);
    $M.22 := $store.i32($M.22, $add.ref($add.ref($add.ref(stk_sizes, $mul.ref(0, 60)), $mul.ref(4, 12)), $mul.ref(4, 1)), 144);
    $M.20 := $store.i32($M.20, $add.ref($add.ref($add.ref(stk_sizes, $mul.ref(0, 60)), $mul.ref(4, 12)), $mul.ref(8, 1)), 4);
    $M.27 := 0;
    call {:si_unique_call 1020} {:cexpr "debug"} boogie_si_record_i32(0);
    $M.0 := $store.ref($M.0, v4l_stk_ioctl_ops, stk_vidioc_querycap);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(24, 1)), stk_vidioc_enum_fmt_vid_cap);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(64, 1)), stk_vidioc_g_fmt_vid_cap);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(72, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(80, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(112, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(120, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(128, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(136, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(144, 1)), stk_vidioc_s_fmt_vid_cap);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(152, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(160, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(168, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(176, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(184, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(192, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(200, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(208, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(216, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(224, 1)), stk_vidioc_try_fmt_vid_cap);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(232, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(240, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(248, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(256, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(264, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(272, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(280, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(288, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(296, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(304, 1)), stk_vidioc_reqbufs);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(312, 1)), stk_vidioc_querybuf);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(320, 1)), stk_vidioc_qbuf);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(328, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(336, 1)), stk_vidioc_dqbuf);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(344, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(352, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(360, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(368, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(376, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(384, 1)), stk_vidioc_streamon);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(392, 1)), stk_vidioc_streamoff);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(400, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(408, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(416, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(424, 1)), stk_vidioc_enum_input);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(432, 1)), stk_vidioc_g_input);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(440, 1)), stk_vidioc_s_input);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(448, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(456, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(464, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(472, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(480, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(488, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(496, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(504, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(512, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(520, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(528, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(536, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(544, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(552, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(560, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(568, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(576, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(584, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(592, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(600, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(608, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(616, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(624, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(632, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(640, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(648, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(656, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(664, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(672, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(680, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(688, 1)), stk_vidioc_g_parm);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(696, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(704, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(712, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(720, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(728, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(736, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(744, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(752, 1)), v4l2_ctrl_log_status);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(760, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(768, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(776, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(784, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(792, 1)), stk_vidioc_enum_framesizes);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(800, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(808, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(816, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(824, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(832, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(840, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(848, 1)), v4l2_ctrl_subscribe_event);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(856, 1)), v4l2_event_unsubscribe);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_ioctl_ops, $mul.ref(0, 872)), $mul.ref(864, 1)), $0.ref);
    $M.0 := $store.ref($M.0, v4l_stk_fops, __this_module);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_fops, $mul.ref(0, 88)), $mul.ref(8, 1)), v4l_stk_read);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_fops, $mul.ref(0, 88)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_fops, $mul.ref(0, 88)), $mul.ref(24, 1)), v4l_stk_poll);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_fops, $mul.ref(0, 88)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_fops, $mul.ref(0, 88)), $mul.ref(40, 1)), video_ioctl2);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_fops, $mul.ref(0, 88)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_fops, $mul.ref(0, 88)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_fops, $mul.ref(0, 88)), $mul.ref(64, 1)), v4l_stk_mmap);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_fops, $mul.ref(0, 88)), $mul.ref(72, 1)), v4l_stk_open);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(v4l_stk_fops, $mul.ref(0, 88)), $mul.ref(80, 1)), v4l_stk_release);
    $M.0 := $store.ref($M.0, stk_v4l_data, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(44, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(60, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(62, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(64, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(66, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(72, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(80, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(96, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(100, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(112, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(112, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(0, 1)), $mul.ref(112, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(128, 1)), v4l_stk_fops);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(56, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(52, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(208, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(216, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(288, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(312, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(320, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(112, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(120, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(120, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(120, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(120, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(120, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(328, 1)), $mul.ref(120, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(496, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(504, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(512, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(88, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(88, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(200, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(208, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(209, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(52, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(344, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(520, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(524, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(528, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(529, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(532, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(536, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(540, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(544, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(552, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(560, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(568, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(576, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(584, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(520, 1)), $mul.ref(592, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1120, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1128, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1136, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1144, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1152, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1160, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1160, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1176, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1184, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1184, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1200, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1208, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1216, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1220, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1296, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1296, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1312, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1312, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1312, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1312, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1344, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1352, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1360, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1368, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1376, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(136, 1)), $mul.ref(1377, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(1520, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(1528, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(1536, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(1544, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(1552, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(1560, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(0, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(1, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(2, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(3, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(4, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(5, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(6, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(7, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(8, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(1568, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(1600, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(1604, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(1608, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(1612, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(1616, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(1624, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(1632, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(1632, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(1632, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(1632, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(1632, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(1632, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(1632, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(1632, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(1632, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(1632, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(1704, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(1704, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(1720, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(1728, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(1736, 1)), stk_v4l_dev_release);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(1744, 1)), v4l_stk_ioctl_ops);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(1752, 1)), $mul.ref(0, 8)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(1752, 1)), $mul.ref(1, 8)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(1752, 1)), $mul.ref(2, 8)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(1776, 1)), $mul.ref(0, 8)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(1776, 1)), $mul.ref(1, 8)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(1776, 1)), $mul.ref(2, 8)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk_v4l_data, $mul.ref(0, 1808)), $mul.ref(1800, 1)), $0.ref);
    $M.25 := $sub.i32(0, 1);
    call {:si_unique_call 1021} {:cexpr "vflip"} boogie_si_record_i32($sub.i32(0, 1));
    $M.73 := $store.ref($M.73, stk_upside_down_dmi_table, $0.ref);
    $M.73 := $store.ref($M.73, $add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(8, 1)), .str.36);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(0, 1)), 4);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(0, 1)), 65);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(1, 1)), 83);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(2, 1)), 85);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(3, 1)), 83);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(4, 1)), 84);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(5, 1)), 101);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(6, 1)), 75);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(7, 1)), 32);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(8, 1)), 67);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(9, 1)), 111);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(10, 1)), 109);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(11, 1)), 112);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(12, 1)), 117);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(13, 1)), 116);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(14, 1)), 101);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(15, 1)), 114);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(16, 1)), 32);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(17, 1)), 73);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(18, 1)), 110);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(19, 1)), 99);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(20, 1)), 46);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(21, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(22, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(23, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(24, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(25, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(26, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(27, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(28, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(29, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(30, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(31, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(32, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(33, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(34, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(35, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(36, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(37, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(38, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(39, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(40, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(41, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(42, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(43, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(44, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(45, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(46, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(47, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(48, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(49, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(50, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(51, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(52, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(53, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(54, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(55, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(56, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(57, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(58, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(59, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(60, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(61, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(62, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(63, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(64, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(65, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(66, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(67, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(68, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(69, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(70, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(71, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(72, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(73, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(74, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(75, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(76, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(77, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(78, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(0, 1)), 5);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(0, 1)), 71);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(1, 1)), 49);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(2, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(3, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(4, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(5, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(6, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(7, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(8, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(9, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(10, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(11, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(12, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(13, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(14, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(15, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(16, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(17, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(18, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(19, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(20, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(21, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(22, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(23, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(24, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(25, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(26, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(27, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(28, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(29, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(30, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(31, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(32, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(33, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(34, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(35, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(36, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(37, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(38, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(39, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(40, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(41, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(42, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(43, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(44, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(45, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(46, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(47, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(48, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(49, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(50, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(51, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(52, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(53, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(54, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(55, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(56, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(57, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(58, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(59, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(60, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(61, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(62, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(63, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(64, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(65, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(66, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(67, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(68, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(69, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(70, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(71, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(72, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(73, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(74, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(75, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(76, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(77, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(78, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(0, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(1, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(2, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(3, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(4, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(5, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(6, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(7, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(8, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(9, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(10, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(11, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(12, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(13, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(14, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(15, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(16, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(17, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(18, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(19, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(20, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(21, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(22, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(23, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(24, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(25, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(26, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(27, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(28, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(29, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(30, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(31, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(32, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(33, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(34, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(35, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(36, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(37, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(38, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(39, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(40, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(41, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(42, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(43, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(44, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(45, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(46, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(47, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(48, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(49, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(50, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(51, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(52, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(53, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(54, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(55, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(56, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(57, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(58, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(59, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(60, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(61, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(62, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(63, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(64, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(65, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(66, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(67, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(68, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(69, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(70, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(71, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(72, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(73, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(74, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(75, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(76, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(77, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(78, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(0, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(1, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(2, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(3, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(4, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(5, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(6, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(7, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(8, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(9, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(10, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(11, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(12, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(13, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(14, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(15, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(16, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(17, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(18, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(19, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(20, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(21, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(22, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(23, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(24, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(25, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(26, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(27, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(28, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(29, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(30, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(31, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(32, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(33, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(34, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(35, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(36, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(37, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(38, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(39, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(40, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(41, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(42, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(43, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(44, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(45, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(46, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(47, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(48, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(49, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(50, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(51, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(52, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(53, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(54, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(55, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(56, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(57, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(58, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(59, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(60, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(61, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(62, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(63, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(64, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(65, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(66, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(67, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(68, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(69, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(70, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(71, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(72, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(73, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(74, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(75, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(76, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(77, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(78, 1)), 0);
    $M.73 := $store.ref($M.73, $add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(0, 1)), $mul.ref(336, 1)), $0.ref);
    $M.73 := $store.ref($M.73, $add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(0, 1)), $0.ref);
    $M.73 := $store.ref($M.73, $add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(8, 1)), .str.37);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(0, 1)), 4);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(0, 1)), 65);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(1, 1)), 83);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(2, 1)), 85);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(3, 1)), 83);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(4, 1)), 84);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(5, 1)), 101);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(6, 1)), 75);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(7, 1)), 32);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(8, 1)), 67);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(9, 1)), 111);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(10, 1)), 109);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(11, 1)), 112);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(12, 1)), 117);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(13, 1)), 116);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(14, 1)), 101);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(15, 1)), 114);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(16, 1)), 32);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(17, 1)), 73);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(18, 1)), 110);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(19, 1)), 99);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(20, 1)), 46);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(21, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(22, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(23, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(24, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(25, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(26, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(27, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(28, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(29, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(30, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(31, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(32, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(33, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(34, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(35, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(36, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(37, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(38, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(39, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(40, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(41, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(42, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(43, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(44, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(45, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(46, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(47, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(48, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(49, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(50, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(51, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(52, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(53, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(54, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(55, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(56, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(57, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(58, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(59, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(60, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(61, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(62, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(63, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(64, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(65, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(66, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(67, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(68, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(69, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(70, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(71, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(72, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(73, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(74, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(75, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(76, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(77, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(78, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(0, 1)), 5);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(0, 1)), 70);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(1, 1)), 51);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(2, 1)), 74);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(3, 1)), 67);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(4, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(5, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(6, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(7, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(8, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(9, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(10, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(11, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(12, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(13, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(14, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(15, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(16, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(17, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(18, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(19, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(20, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(21, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(22, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(23, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(24, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(25, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(26, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(27, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(28, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(29, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(30, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(31, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(32, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(33, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(34, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(35, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(36, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(37, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(38, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(39, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(40, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(41, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(42, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(43, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(44, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(45, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(46, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(47, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(48, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(49, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(50, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(51, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(52, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(53, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(54, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(55, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(56, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(57, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(58, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(59, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(60, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(61, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(62, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(63, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(64, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(65, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(66, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(67, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(68, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(69, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(70, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(71, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(72, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(73, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(74, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(75, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(76, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(77, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(78, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(0, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(1, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(2, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(3, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(4, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(5, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(6, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(7, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(8, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(9, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(10, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(11, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(12, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(13, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(14, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(15, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(16, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(17, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(18, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(19, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(20, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(21, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(22, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(23, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(24, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(25, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(26, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(27, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(28, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(29, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(30, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(31, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(32, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(33, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(34, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(35, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(36, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(37, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(38, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(39, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(40, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(41, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(42, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(43, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(44, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(45, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(46, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(47, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(48, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(49, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(50, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(51, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(52, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(53, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(54, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(55, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(56, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(57, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(58, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(59, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(60, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(61, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(62, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(63, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(64, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(65, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(66, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(67, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(68, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(69, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(70, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(71, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(72, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(73, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(74, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(75, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(76, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(77, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(78, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(0, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(1, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(2, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(3, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(4, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(5, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(6, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(7, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(8, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(9, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(10, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(11, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(12, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(13, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(14, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(15, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(16, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(17, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(18, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(19, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(20, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(21, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(22, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(23, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(24, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(25, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(26, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(27, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(28, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(29, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(30, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(31, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(32, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(33, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(34, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(35, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(36, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(37, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(38, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(39, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(40, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(41, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(42, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(43, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(44, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(45, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(46, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(47, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(48, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(49, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(50, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(51, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(52, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(53, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(54, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(55, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(56, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(57, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(58, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(59, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(60, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(61, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(62, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(63, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(64, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(65, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(66, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(67, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(68, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(69, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(70, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(71, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(72, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(73, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(74, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(75, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(76, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(77, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(78, 1)), 0);
    $M.73 := $store.ref($M.73, $add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(344, 1)), $mul.ref(336, 1)), $0.ref);
    $M.73 := $store.ref($M.73, $add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(0, 1)), $0.ref);
    $M.73 := $store.ref($M.73, $add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(8, 1)), $0.ref);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(0, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(1, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(2, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(3, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(4, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(5, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(6, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(7, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(8, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(9, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(10, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(11, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(12, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(13, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(14, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(15, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(16, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(17, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(18, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(19, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(20, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(21, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(22, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(23, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(24, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(25, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(26, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(27, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(28, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(29, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(30, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(31, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(32, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(33, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(34, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(35, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(36, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(37, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(38, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(39, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(40, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(41, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(42, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(43, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(44, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(45, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(46, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(47, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(48, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(49, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(50, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(51, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(52, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(53, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(54, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(55, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(56, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(57, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(58, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(59, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(60, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(61, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(62, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(63, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(64, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(65, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(66, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(67, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(68, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(69, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(70, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(71, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(72, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(73, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(74, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(75, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(76, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(77, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(0, 80)), $mul.ref(1, 1)), $mul.ref(78, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(0, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(1, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(2, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(3, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(4, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(5, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(6, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(7, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(8, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(9, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(10, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(11, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(12, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(13, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(14, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(15, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(16, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(17, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(18, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(19, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(20, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(21, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(22, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(23, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(24, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(25, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(26, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(27, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(28, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(29, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(30, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(31, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(32, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(33, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(34, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(35, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(36, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(37, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(38, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(39, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(40, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(41, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(42, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(43, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(44, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(45, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(46, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(47, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(48, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(49, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(50, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(51, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(52, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(53, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(54, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(55, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(56, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(57, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(58, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(59, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(60, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(61, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(62, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(63, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(64, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(65, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(66, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(67, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(68, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(69, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(70, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(71, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(72, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(73, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(74, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(75, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(76, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(77, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(1, 80)), $mul.ref(1, 1)), $mul.ref(78, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(0, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(1, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(2, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(3, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(4, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(5, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(6, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(7, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(8, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(9, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(10, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(11, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(12, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(13, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(14, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(15, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(16, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(17, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(18, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(19, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(20, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(21, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(22, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(23, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(24, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(25, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(26, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(27, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(28, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(29, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(30, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(31, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(32, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(33, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(34, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(35, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(36, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(37, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(38, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(39, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(40, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(41, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(42, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(43, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(44, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(45, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(46, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(47, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(48, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(49, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(50, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(51, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(52, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(53, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(54, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(55, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(56, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(57, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(58, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(59, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(60, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(61, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(62, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(63, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(64, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(65, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(66, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(67, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(68, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(69, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(70, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(71, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(72, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(73, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(74, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(75, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(76, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(77, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(2, 80)), $mul.ref(1, 1)), $mul.ref(78, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(0, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(1, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(2, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(3, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(4, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(5, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(6, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(7, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(8, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(9, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(10, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(11, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(12, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(13, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(14, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(15, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(16, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(17, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(18, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(19, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(20, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(21, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(22, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(23, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(24, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(25, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(26, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(27, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(28, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(29, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(30, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(31, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(32, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(33, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(34, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(35, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(36, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(37, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(38, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(39, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(40, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(41, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(42, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(43, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(44, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(45, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(46, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(47, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(48, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(49, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(50, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(51, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(52, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(53, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(54, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(55, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(56, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(57, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(58, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(59, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(60, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(61, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(62, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(63, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(64, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(65, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(66, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(67, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(68, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(69, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(70, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(71, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(72, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(73, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(74, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(75, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(76, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(77, 1)), 0);
    $M.73 := $store.i8($M.73, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(16, 1)), $mul.ref(3, 80)), $mul.ref(1, 1)), $mul.ref(78, 1)), 0);
    $M.73 := $store.ref($M.73, $add.ref($add.ref($add.ref(stk_upside_down_dmi_table, $mul.ref(0, 1032)), $mul.ref(688, 1)), $mul.ref(336, 1)), $0.ref);
    $M.24 := $sub.i32(0, 1);
    call {:si_unique_call 1022} {:cexpr "hflip"} boogie_si_record_i32($sub.i32(0, 1));
    $M.12 := $store.i32($M.12, stk1125_initvals, 0);
    $M.13 := $store.i32($M.13, $add.ref($add.ref($add.ref(stk1125_initvals, $mul.ref(0, 192)), $mul.ref(0, 8)), $mul.ref(4, 1)), 36);
    $M.12 := $store.i32($M.12, $add.ref($add.ref($add.ref(stk1125_initvals, $mul.ref(0, 192)), $mul.ref(1, 8)), $mul.ref(0, 1)), 256);
    $M.13 := $store.i32($M.13, $add.ref($add.ref($add.ref(stk1125_initvals, $mul.ref(0, 192)), $mul.ref(1, 8)), $mul.ref(4, 1)), 33);
    $M.12 := $store.i32($M.12, $add.ref($add.ref($add.ref(stk1125_initvals, $mul.ref(0, 192)), $mul.ref(2, 8)), $mul.ref(0, 1)), 2);
    $M.13 := $store.i32($M.13, $add.ref($add.ref($add.ref(stk1125_initvals, $mul.ref(0, 192)), $mul.ref(2, 8)), $mul.ref(4, 1)), 104);
    $M.12 := $store.i32($M.12, $add.ref($add.ref($add.ref(stk1125_initvals, $mul.ref(0, 192)), $mul.ref(3, 8)), $mul.ref(0, 1)), 3);
    $M.13 := $store.i32($M.13, $add.ref($add.ref($add.ref(stk1125_initvals, $mul.ref(0, 192)), $mul.ref(3, 8)), $mul.ref(4, 1)), 128);
    $M.12 := $store.i32($M.12, $add.ref($add.ref($add.ref(stk1125_initvals, $mul.ref(0, 192)), $mul.ref(4, 8)), $mul.ref(0, 1)), 5);
    $M.13 := $store.i32($M.13, $add.ref($add.ref($add.ref(stk1125_initvals, $mul.ref(0, 192)), $mul.ref(4, 8)), $mul.ref(4, 1)), 0);
    $M.12 := $store.i32($M.12, $add.ref($add.ref($add.ref(stk1125_initvals, $mul.ref(0, 192)), $mul.ref(5, 8)), $mul.ref(0, 1)), 7);
    $M.13 := $store.i32($M.13, $add.ref($add.ref($add.ref(stk1125_initvals, $mul.ref(0, 192)), $mul.ref(5, 8)), $mul.ref(4, 1)), 3);
    $M.12 := $store.i32($M.12, $add.ref($add.ref($add.ref(stk1125_initvals, $mul.ref(0, 192)), $mul.ref(6, 8)), $mul.ref(0, 1)), 13);
    $M.13 := $store.i32($M.13, $add.ref($add.ref($add.ref(stk1125_initvals, $mul.ref(0, 192)), $mul.ref(6, 8)), $mul.ref(4, 1)), 0);
    $M.12 := $store.i32($M.12, $add.ref($add.ref($add.ref(stk1125_initvals, $mul.ref(0, 192)), $mul.ref(7, 8)), $mul.ref(0, 1)), 15);
    $M.13 := $store.i32($M.13, $add.ref($add.ref($add.ref(stk1125_initvals, $mul.ref(0, 192)), $mul.ref(7, 8)), $mul.ref(4, 1)), 2);
    $M.12 := $store.i32($M.12, $add.ref($add.ref($add.ref(stk1125_initvals, $mul.ref(0, 192)), $mul.ref(8, 8)), $mul.ref(0, 1)), 768);
    $M.13 := $store.i32($M.13, $add.ref($add.ref($add.ref(stk1125_initvals, $mul.ref(0, 192)), $mul.ref(8, 8)), $mul.ref(4, 1)), 18);
    $M.12 := $store.i32($M.12, $add.ref($add.ref($add.ref(stk1125_initvals, $mul.ref(0, 192)), $mul.ref(9, 8)), $mul.ref(0, 1)), 848);
    $M.13 := $store.i32($M.13, $add.ref($add.ref($add.ref(stk1125_initvals, $mul.ref(0, 192)), $mul.ref(9, 8)), $mul.ref(4, 1)), 65);
    $M.12 := $store.i32($M.12, $add.ref($add.ref($add.ref(stk1125_initvals, $mul.ref(0, 192)), $mul.ref(10, 8)), $mul.ref(0, 1)), 849);
    $M.13 := $store.i32($M.13, $add.ref($add.ref($add.ref(stk1125_initvals, $mul.ref(0, 192)), $mul.ref(10, 8)), $mul.ref(4, 1)), 0);
    $M.12 := $store.i32($M.12, $add.ref($add.ref($add.ref(stk1125_initvals, $mul.ref(0, 192)), $mul.ref(11, 8)), $mul.ref(0, 1)), 850);
    $M.13 := $store.i32($M.13, $add.ref($add.ref($add.ref(stk1125_initvals, $mul.ref(0, 192)), $mul.ref(11, 8)), $mul.ref(4, 1)), 0);
    $M.12 := $store.i32($M.12, $add.ref($add.ref($add.ref(stk1125_initvals, $mul.ref(0, 192)), $mul.ref(12, 8)), $mul.ref(0, 1)), 851);
    $M.13 := $store.i32($M.13, $add.ref($add.ref($add.ref(stk1125_initvals, $mul.ref(0, 192)), $mul.ref(12, 8)), $mul.ref(4, 1)), 0);
    $M.12 := $store.i32($M.12, $add.ref($add.ref($add.ref(stk1125_initvals, $mul.ref(0, 192)), $mul.ref(13, 8)), $mul.ref(0, 1)), 24);
    $M.13 := $store.i32($M.13, $add.ref($add.ref($add.ref(stk1125_initvals, $mul.ref(0, 192)), $mul.ref(13, 8)), $mul.ref(4, 1)), 16);
    $M.12 := $store.i32($M.12, $add.ref($add.ref($add.ref(stk1125_initvals, $mul.ref(0, 192)), $mul.ref(14, 8)), $mul.ref(0, 1)), 25);
    $M.13 := $store.i32($M.13, $add.ref($add.ref($add.ref(stk1125_initvals, $mul.ref(0, 192)), $mul.ref(14, 8)), $mul.ref(4, 1)), 0);
    $M.12 := $store.i32($M.12, $add.ref($add.ref($add.ref(stk1125_initvals, $mul.ref(0, 192)), $mul.ref(15, 8)), $mul.ref(0, 1)), 27);
    $M.13 := $store.i32($M.13, $add.ref($add.ref($add.ref(stk1125_initvals, $mul.ref(0, 192)), $mul.ref(15, 8)), $mul.ref(4, 1)), 14);
    $M.12 := $store.i32($M.12, $add.ref($add.ref($add.ref(stk1125_initvals, $mul.ref(0, 192)), $mul.ref(16, 8)), $mul.ref(0, 1)), 28);
    $M.13 := $store.i32($M.13, $add.ref($add.ref($add.ref(stk1125_initvals, $mul.ref(0, 192)), $mul.ref(16, 8)), $mul.ref(4, 1)), 70);
    $M.12 := $store.i32($M.12, $add.ref($add.ref($add.ref(stk1125_initvals, $mul.ref(0, 192)), $mul.ref(17, 8)), $mul.ref(0, 1)), 768);
    $M.13 := $store.i32($M.13, $add.ref($add.ref($add.ref(stk1125_initvals, $mul.ref(0, 192)), $mul.ref(17, 8)), $mul.ref(4, 1)), 128);
    $M.12 := $store.i32($M.12, $add.ref($add.ref($add.ref(stk1125_initvals, $mul.ref(0, 192)), $mul.ref(18, 8)), $mul.ref(0, 1)), 26);
    $M.13 := $store.i32($M.13, $add.ref($add.ref($add.ref(stk1125_initvals, $mul.ref(0, 192)), $mul.ref(18, 8)), $mul.ref(4, 1)), 4);
    $M.12 := $store.i32($M.12, $add.ref($add.ref($add.ref(stk1125_initvals, $mul.ref(0, 192)), $mul.ref(19, 8)), $mul.ref(0, 1)), 272);
    $M.13 := $store.i32($M.13, $add.ref($add.ref($add.ref(stk1125_initvals, $mul.ref(0, 192)), $mul.ref(19, 8)), $mul.ref(4, 1)), 0);
    $M.12 := $store.i32($M.12, $add.ref($add.ref($add.ref(stk1125_initvals, $mul.ref(0, 192)), $mul.ref(20, 8)), $mul.ref(0, 1)), 273);
    $M.13 := $store.i32($M.13, $add.ref($add.ref($add.ref(stk1125_initvals, $mul.ref(0, 192)), $mul.ref(20, 8)), $mul.ref(4, 1)), 0);
    $M.12 := $store.i32($M.12, $add.ref($add.ref($add.ref(stk1125_initvals, $mul.ref(0, 192)), $mul.ref(21, 8)), $mul.ref(0, 1)), 274);
    $M.13 := $store.i32($M.13, $add.ref($add.ref($add.ref(stk1125_initvals, $mul.ref(0, 192)), $mul.ref(21, 8)), $mul.ref(4, 1)), 0);
    $M.12 := $store.i32($M.12, $add.ref($add.ref($add.ref(stk1125_initvals, $mul.ref(0, 192)), $mul.ref(22, 8)), $mul.ref(0, 1)), 275);
    $M.13 := $store.i32($M.13, $add.ref($add.ref($add.ref(stk1125_initvals, $mul.ref(0, 192)), $mul.ref(22, 8)), $mul.ref(4, 1)), 0);
    $M.12 := $store.i32($M.12, $add.ref($add.ref($add.ref(stk1125_initvals, $mul.ref(0, 192)), $mul.ref(23, 8)), $mul.ref(0, 1)), 65535);
    $M.13 := $store.i32($M.13, $add.ref($add.ref($add.ref(stk1125_initvals, $mul.ref(0, 192)), $mul.ref(23, 8)), $mul.ref(4, 1)), 255);
    $M.0 := $store.ref($M.0, stk_v4l_vm_ops, stk_v4l_vm_open);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk_v4l_vm_ops, $mul.ref(0, 72)), $mul.ref(8, 1)), stk_v4l_vm_close);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk_v4l_vm_ops, $mul.ref(0, 72)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk_v4l_vm_ops, $mul.ref(0, 72)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk_v4l_vm_ops, $mul.ref(0, 72)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk_v4l_vm_ops, $mul.ref(0, 72)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk_v4l_vm_ops, $mul.ref(0, 72)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk_v4l_vm_ops, $mul.ref(0, 72)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(stk_v4l_vm_ops, $mul.ref(0, 72)), $mul.ref(64, 1)), $0.ref);
    $M.0 := $store.i8($M.0, .str.53, 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 18)), $mul.ref(1, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 18)), $mul.ref(2, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 18)), $mul.ref(3, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 18)), $mul.ref(4, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 18)), $mul.ref(5, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 18)), $mul.ref(6, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 18)), $mul.ref(7, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 18)), $mul.ref(8, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 18)), $mul.ref(9, 1)), 66);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 18)), $mul.ref(10, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 18)), $mul.ref(11, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 18)), $mul.ref(12, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 18)), $mul.ref(13, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 18)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 18)), $mul.ref(15, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 18)), $mul.ref(16, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, .str.46, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 7)), $mul.ref(1, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 7)), $mul.ref(2, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 7)), $mul.ref(3, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 7)), $mul.ref(4, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 7)), $mul.ref(5, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, .str.47, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 9)), $mul.ref(1, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 9)), $mul.ref(2, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 9)), $mul.ref(3, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 9)), $mul.ref(4, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 9)), $mul.ref(5, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 9)), $mul.ref(6, 1)), 66);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 9)), $mul.ref(7, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, .str.48, 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 9)), $mul.ref(1, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 9)), $mul.ref(2, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 9)), $mul.ref(3, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 9)), $mul.ref(4, 1)), 58);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 9)), $mul.ref(5, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 9)), $mul.ref(6, 1)), 58);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 9)), $mul.ref(7, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, .str.49, 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 10)), $mul.ref(1, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 10)), $mul.ref(2, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 10)), $mul.ref(3, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 10)), $mul.ref(4, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 10)), $mul.ref(5, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 10)), $mul.ref(6, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 10)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 10)), $mul.ref(8, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, .str.51, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 4)), $mul.ref(1, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 4)), $mul.ref(2, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.77 := $store.i8($M.77, .str.52, 117);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(.str.52, $mul.ref(0, 10)), $mul.ref(1, 1)), 115);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(.str.52, $mul.ref(0, 10)), $mul.ref(2, 1)), 98);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(.str.52, $mul.ref(0, 10)), $mul.ref(3, 1)), 45);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(.str.52, $mul.ref(0, 10)), $mul.ref(4, 1)), 37);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(.str.52, $mul.ref(0, 10)), $mul.ref(5, 1)), 115);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(.str.52, $mul.ref(0, 10)), $mul.ref(6, 1)), 45);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(.str.52, $mul.ref(0, 10)), $mul.ref(7, 1)), 37);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(.str.52, $mul.ref(0, 10)), $mul.ref(8, 1)), 115);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(.str.52, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    call {:si_unique_call 1023} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 366731);

procedure devirtbounce(funcPtr: ref, arg: ref, arg1: ref, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce(funcPtr: ref, arg: ref, arg1: ref, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 367763);

procedure devirtbounce.1(funcPtr: ref, arg: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.1(funcPtr: ref, arg: ref) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 368795);

procedure devirtbounce.2(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.2(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 369827);

procedure devirtbounce.3(funcPtr: ref, arg: ref, arg1: ref);
  free requires assertsPassed;



implementation devirtbounce.3(funcPtr: ref, arg: ref, arg1: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 370859);

procedure devirtbounce.4(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.0, $M.14, $M.16, $M.2;



implementation devirtbounce.4(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i10 := $eq.ref(stk_isoc_handler, $p0);
    assume {:branchcond $i10} true;
    goto $bb15, $bb14;

  $bb14:
    assume !($i10 == 1);
    $i9 := $eq.ref(stk_camera_disconnect, $p0);
    assume {:branchcond $i9} true;
    goto $bb6, $bb12;

  $bb12:
    assume !($i9 == 1);
    $i8 := $eq.ref(stk_isoc_handler, $p0);
    assume {:branchcond $i8} true;
    goto $bb13, $bb11;

  $bb11:
    assume !($i8 == 1);
    $i7 := $eq.ref(stk_v4l_vm_close, $p0);
    assume {:branchcond $i7} true;
    goto $bb4, $bb10;

  $bb10:
    assume !($i7 == 1);
    $i6 := $eq.ref(stk_v4l_vm_open, $p0);
    assume {:branchcond $i6} true;
    goto $bb3, $bb9;

  $bb9:
    assume !($i6 == 1);
    $i5 := $eq.ref(stk_v4l_dev_release, $p0);
    assume {:branchcond $i5} true;
    goto $bb2, $bb8;

  $bb8:
    assume !($i5 == 1);
    assume false;
    return;

  $bb2:
    assume $i5 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1024} stk_v4l_dev_release($p1);
    return;

  $bb3:
    assume $i6 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1025} stk_v4l_vm_open($p2);
    return;

  $bb4:
    assume $i7 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1026} stk_v4l_vm_close($p3);
    return;

  $bb13:
    assume $i8 == 1;
    goto $bb7;

  $bb7:
    call {:si_unique_call 1029} stk_isoc_handler(arg);
    return;

  $bb6:
    assume $i9 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1028} stk_camera_disconnect($p4);
    return;

  $bb15:
    assume $i10 == 1;
    goto $bb7;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 371891);

procedure devirtbounce.5(funcPtr: ref, arg: ref, arg1: i64, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.5(funcPtr: ref, arg: ref, arg1: i64, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.28, $M.29, $M.30, $M.31, $M.32, $M.33, $M.34, $M.35, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.3, $M.56, $M.2, $M.4, $M.54, $M.55, $M.14, $M.16, $M.15, $M.17, $M.18, $M.19, $M.71, $M.72, $M.21, $M.22, $M.20, $M.27, $M.0, $M.25, $M.73, $M.24, $M.12, $M.13, $M.77, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 1030} __SMACK_static_init();
    call {:si_unique_call 1031} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.36, $M.37, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.0, $M.47, $M.48, $M.26, $M.49, $M.50, $M.52, $M.53, $M.28, $M.29, $M.30, $M.31, $M.32, $M.35, $M.33, $M.7, $M.8, $M.9, $M.10, $M.11, $M.34, $M.51, $M.3, $M.56, $M.2, $M.4, $M.54, $M.55, $M.14, $M.16, $M.15, $M.17, $M.18, $M.19, $M.71, $M.72, $M.21, $M.22, $M.20, $M.27, $M.25, $M.73, $M.24, $M.12, $M.13, $M.77, $CurrAddr, $M.1, $M.5, $M.23;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation stk_sensor_outb_loop_$bb14(in_$p0: ref, in_$p3: ref, in_$i18: i32, in_$i19: i32, in_$i20: i1, in_$i17: i32, in_$i21: i32, in_$i22: i32, in_$i23: i1, in_$i24: i1) returns (out_$i18: i32, out_$i19: i32, out_$i20: i1, out_$i17: i32, out_$i21: i32, out_$i22: i32, out_$i23: i1, out_$i24: i1)
{

  entry:
    out_$i18, out_$i19, out_$i20, out_$i17, out_$i21, out_$i22, out_$i23, out_$i24 := in_$i18, in_$i19, in_$i20, in_$i17, in_$i21, in_$i22, in_$i23, in_$i24;
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb17:
    assume !(out_$i20 == 1);
    assume {:verifier.code 0} true;
    out_$i17 := out_$i18;
    goto $bb17_dummy;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    out_$i20 := $ne.i32(out_$i19, 0);
    goto corral_source_split_168;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} out_$i19 := stk_camera_read_reg(in_$p0, 513, in_$p3);
    call {:si_unique_call 35} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i19);
    goto corral_source_split_167;

  $bb15:
    assume out_$i24 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_166;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    out_$i18 := out_$i21;
    assume true;
    goto $bb15;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    out_$i24 := $sle.i32(out_$i21, 49);
    goto corral_source_split_177;

  $bb19:
    assume out_$i23 == 1;
    goto corral_source_split_176;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    out_$i23 := $eq.i32(out_$i22, 0);
    goto corral_source_split_174;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    out_$i22 := $load.i32($M.1, in_$p3);
    goto corral_source_split_173;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i21 := $add.i32(out_$i17, 1);
    call {:si_unique_call 36} {:cexpr "i"} boogie_si_record_i32(out_$i21);
    goto corral_source_split_172;

  $bb17_dummy:
    call {:si_unique_call 1} out_$i18, out_$i19, out_$i20, out_$i17, out_$i21, out_$i22, out_$i23, out_$i24 := stk_sensor_outb_loop_$bb14(in_$p0, in_$p3, out_$i18, out_$i19, out_$i20, out_$i17, out_$i21, out_$i22, out_$i23, out_$i24);
    return;

  exit:
    return;
}



procedure stk_sensor_outb_loop_$bb14(in_$p0: ref, in_$p3: ref, in_$i18: i32, in_$i19: i32, in_$i20: i1, in_$i17: i32, in_$i21: i32, in_$i22: i32, in_$i23: i1, in_$i24: i1) returns (out_$i18: i32, out_$i19: i32, out_$i20: i1, out_$i17: i32, out_$i21: i32, out_$i22: i32, out_$i23: i1, out_$i24: i1);



implementation v4l_stk_mmap_loop_$bb11(in_$i4: i64, in_$p6: ref, in_$p16: ref, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$p25: ref, in_$p26: ref, in_$i27: i32, in_$i28: i64, in_$i29: i1, in_$i30: i32, in_$i36: i32, in_$i37: i32, in_$i38: i1, in_$i19: i32) returns (out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$p25: ref, out_$p26: ref, out_$i27: i32, out_$i28: i64, out_$i29: i1, out_$i30: i32, out_$i36: i32, out_$i37: i32, out_$i38: i1, out_$i19: i32)
{

  entry:
    out_$p20, out_$p21, out_$i22, out_$p25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i36, out_$i37, out_$i38, out_$i19 := in_$p20, in_$p21, in_$i22, in_$p25, in_$p26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i36, in_$i37, in_$i38, in_$i19;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_350;

  $bb17:
    assume out_$i38 == 1;
    assume {:verifier.code 0} true;
    out_$i19 := out_$i36;
    goto $bb17_dummy;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    out_$i38 := $ugt.i32(out_$i37, out_$i36);
    goto corral_source_split_374;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i32($M.0, in_$p16);
    goto corral_source_split_373;

  $bb16:
    assume {:verifier.code 0} true;
    out_$i36 := $add.i32(out_$i19, 1);
    call {:si_unique_call 95} {:cexpr "i"} boogie_si_record_i32(out_$i36);
    goto corral_source_split_372;

  $bb14:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    out_$i30 := out_$i19;
    assume true;
    goto $bb14;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    out_$i29 := $eq.i64(out_$i28, in_$i4);
    goto corral_source_split_360;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    out_$i28 := $zext.i32.i64(out_$i27);
    goto corral_source_split_359;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i32($M.0, out_$p26);
    goto corral_source_split_358;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    out_$p26 := $bitcast.ref.ref(out_$p25);
    goto corral_source_split_357;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref($add.ref(out_$p21, $mul.ref(out_$i22, 128)), $mul.ref(0, 1)), $mul.ref(64, 1));
    goto corral_source_split_356;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    goto corral_source_split_355;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    out_$i22 := $zext.i32.i64(out_$i19);
    goto corral_source_split_354;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    out_$p21 := $load.ref($M.0, out_$p20);
    goto corral_source_split_353;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(in_$p6, $mul.ref(0, 2880)), $mul.ref(2832, 1));
    goto corral_source_split_352;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb17_dummy:
    call {:si_unique_call 1} out_$p20, out_$p21, out_$i22, out_$p25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i36, out_$i37, out_$i38, out_$i19 := v4l_stk_mmap_loop_$bb11(in_$i4, in_$p6, in_$p16, out_$p20, out_$p21, out_$i22, out_$p25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i36, out_$i37, out_$i38, out_$i19);
    return;

  exit:
    return;
}



procedure v4l_stk_mmap_loop_$bb11(in_$i4: i64, in_$p6: ref, in_$p16: ref, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$p25: ref, in_$p26: ref, in_$i27: i32, in_$i28: i64, in_$i29: i1, in_$i30: i32, in_$i36: i32, in_$i37: i32, in_$i38: i1, in_$i19: i32) returns (out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$p25: ref, out_$p26: ref, out_$i27: i32, out_$i28: i64, out_$i29: i1, out_$i30: i32, out_$i36: i32, out_$i37: i32, out_$i38: i1, out_$i19: i32);



implementation {:SIextraRecBound 3} stk_clean_iso_loop_$bb8(in_$p0: ref, in_$p8: ref, in_$p9: ref, in_$i10: i64, in_$p12: ref, in_$p13: ref, in_$i14: i64, in_$i15: i1, in_$p16: ref, in_$i17: i32, in_$i18: i1, in_$p19: ref, in_$i20: i32, in_$i21: i32, in_$i22: i1, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$p27: ref, in_$p28: ref, in_$i29: i32, in_$i30: i1, in_$i7: i32) returns (out_$p8: ref, out_$p9: ref, out_$i10: i64, out_$p12: ref, out_$p13: ref, out_$i14: i64, out_$i15: i1, out_$p16: ref, out_$i17: i32, out_$i18: i1, out_$p19: ref, out_$i20: i32, out_$i21: i32, out_$i22: i1, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$p27: ref, out_$p28: ref, out_$i29: i32, out_$i30: i1, out_$i7: i32)
{

  entry:
    out_$p8, out_$p9, out_$i10, out_$p12, out_$p13, out_$i14, out_$i15, out_$p16, out_$i17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i22, out_$p23, out_$p24, out_$i25, out_$p27, out_$p28, out_$i29, out_$i30, out_$i7 := in_$p8, in_$p9, in_$i10, in_$p12, in_$p13, in_$i14, in_$i15, in_$p16, in_$i17, in_$i18, in_$p19, in_$i20, in_$i21, in_$i22, in_$p23, in_$p24, in_$i25, in_$p27, in_$p28, in_$i29, in_$i30, in_$i7;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_612;

  $bb19:
    assume out_$i30 == 1;
    assume {:verifier.code 0} true;
    out_$i7 := out_$i29;
    goto $bb19_dummy;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    out_$i30 := $sle.i32(out_$i29, 2);
    goto corral_source_split_647;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    out_$i29 := $add.i32(out_$i7, 1);
    call {:si_unique_call 144} {:cexpr "i"} boogie_si_record_i32(out_$i29);
    goto corral_source_split_646;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 143} kfree(out_$p28);
    goto corral_source_split_645;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    out_$p28 := $load.ref($M.0, out_$p27);
    goto corral_source_split_644;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p24, $mul.ref(out_$i25, 24)), $mul.ref(0, 1));
    goto corral_source_split_643;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    goto corral_source_split_642;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    out_$i25 := $sext.i32.i64(out_$i7);
    goto corral_source_split_641;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    out_$p24 := $load.ref($M.0, out_$p23);
    goto corral_source_split_640;

  $bb18:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2880)), $mul.ref(2808, 1));
    goto corral_source_split_639;

  $bb11:
    assume !(out_$i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 142} ldv_usb_free_urb_6(out_$p13);
    goto corral_source_split_637;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 141} usb_kill_urb(out_$p13);
    goto corral_source_split_635;

  $bb15:
    assume out_$i22 == 1;
    goto corral_source_split_634;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    out_$i22 := $ne.i32(out_$i21, 0);
    goto corral_source_split_632;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    out_$i21 := $and.i32(out_$i20, 1);
    goto corral_source_split_631;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    out_$i20 := $load.i32($M.0, out_$p19);
    goto corral_source_split_630;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2880)), $mul.ref(2644, 1));
    goto corral_source_split_629;

  $bb12:
    assume out_$i18 == 1;
    goto corral_source_split_628;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    out_$i18 := $ne.i32(out_$i17, 0);
    goto corral_source_split_626;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 139} out_$i17 := atomic_read(out_$p16);
    call {:si_unique_call 140} {:cexpr "tmp"} boogie_si_record_i32(out_$i17);
    goto corral_source_split_625;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2880)), $mul.ref(2624, 1));
    goto corral_source_split_624;

  $bb10:
    assume out_$i15 == 1;
    goto corral_source_split_623;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    out_$i15 := $ne.i64(out_$i14, 0);
    goto corral_source_split_621;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    out_$i14 := $p2i.ref.i64(out_$p13);
    goto corral_source_split_620;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    out_$p13 := $load.ref($M.0, out_$p12);
    goto corral_source_split_619;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(out_$p9, $mul.ref(out_$i10, 24)), $mul.ref(16, 1));
    goto corral_source_split_618;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    goto corral_source_split_617;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    out_$i10 := $sext.i32.i64(out_$i7);
    goto corral_source_split_616;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    out_$p9 := $load.ref($M.0, out_$p8);
    goto corral_source_split_615;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2880)), $mul.ref(2808, 1));
    goto corral_source_split_614;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb13:
    assume {:verifier.code 0} true;
    assume !(out_$i18 == 1);
    goto $bb14;

  $bb16:
    assume {:verifier.code 0} true;
    assume !(out_$i22 == 1);
    goto $bb14;

  $bb19_dummy:
    call {:si_unique_call 1} out_$p8, out_$p9, out_$i10, out_$p12, out_$p13, out_$i14, out_$i15, out_$p16, out_$i17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i22, out_$p23, out_$p24, out_$i25, out_$p27, out_$p28, out_$i29, out_$i30, out_$i7 := stk_clean_iso_loop_$bb8(in_$p0, out_$p8, out_$p9, out_$i10, out_$p12, out_$p13, out_$i14, out_$i15, out_$p16, out_$i17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i22, out_$p23, out_$p24, out_$i25, out_$p27, out_$p28, out_$i29, out_$i30, out_$i7);
    return;

  exit:
    return;
}



procedure stk_clean_iso_loop_$bb8(in_$p0: ref, in_$p8: ref, in_$p9: ref, in_$i10: i64, in_$p12: ref, in_$p13: ref, in_$i14: i64, in_$i15: i1, in_$p16: ref, in_$i17: i32, in_$i18: i1, in_$p19: ref, in_$i20: i32, in_$i21: i32, in_$i22: i1, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$p27: ref, in_$p28: ref, in_$i29: i32, in_$i30: i1, in_$i7: i32) returns (out_$p8: ref, out_$p9: ref, out_$i10: i64, out_$p12: ref, out_$p13: ref, out_$i14: i64, out_$i15: i1, out_$p16: ref, out_$i17: i32, out_$i18: i1, out_$p19: ref, out_$i20: i32, out_$i21: i32, out_$i22: i1, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$p27: ref, out_$p28: ref, out_$i29: i32, out_$i30: i1, out_$i7: i32);
  modifies $M.4;



implementation stk_free_sio_buffers_loop_$bb22(in_$p0: ref, in_$i29: i32, in_$p34: ref, in_$p35: ref, in_$i36: i64, in_$p38: ref, in_$p39: ref, in_$i40: i64, in_$i41: i1, in_$p42: ref, in_$p43: ref, in_$i44: i64, in_$p46: ref, in_$p47: ref, in_$i48: i32, in_$i49: i1, in_$i33: i32) returns (out_$p34: ref, out_$p35: ref, out_$i36: i64, out_$p38: ref, out_$p39: ref, out_$i40: i64, out_$i41: i1, out_$p42: ref, out_$p43: ref, out_$i44: i64, out_$p46: ref, out_$p47: ref, out_$i48: i32, out_$i49: i1, out_$i33: i32)
{

  entry:
    out_$p34, out_$p35, out_$i36, out_$p38, out_$p39, out_$i40, out_$i41, out_$p42, out_$p43, out_$i44, out_$p46, out_$p47, out_$i48, out_$i49, out_$i33 := in_$p34, in_$p35, in_$i36, in_$p38, in_$p39, in_$i40, in_$i41, in_$p42, in_$p43, in_$i44, in_$p46, in_$p47, in_$i48, in_$i49, in_$i33;
    goto $bb22, exit;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_715;

  $bb27:
    assume out_$i49 == 1;
    assume {:verifier.code 0} true;
    out_$i33 := out_$i48;
    goto $bb27_dummy;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    out_$i49 := $slt.i32(out_$i48, in_$i29);
    goto corral_source_split_736;

  $bb26:
    assume {:verifier.code 0} true;
    out_$i48 := $add.i32(out_$i33, 1);
    call {:si_unique_call 155} {:cexpr "i"} boogie_si_record_i32(out_$i48);
    goto corral_source_split_735;

  $bb25:
    assume !(out_$i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} vfree(out_$p47);
    goto corral_source_split_733;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    out_$p47 := $load.ref($M.0, out_$p46);
    goto corral_source_split_732;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(out_$p43, $mul.ref(out_$i44, 128)), $mul.ref(88, 1));
    goto corral_source_split_731;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    goto corral_source_split_730;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    out_$i44 := $sext.i32.i64(out_$i33);
    goto corral_source_split_729;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    out_$p43 := $load.ref($M.0, out_$p42);
    goto corral_source_split_728;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2880)), $mul.ref(2832, 1));
    goto corral_source_split_727;

  $bb24:
    assume out_$i41 == 1;
    goto corral_source_split_726;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    out_$i41 := $ne.i64(out_$i40, 0);
    goto corral_source_split_724;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    out_$i40 := $p2i.ref.i64(out_$p39);
    goto corral_source_split_723;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    out_$p39 := $load.ref($M.0, out_$p38);
    goto corral_source_split_722;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(out_$p35, $mul.ref(out_$i36, 128)), $mul.ref(88, 1));
    goto corral_source_split_721;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    goto corral_source_split_720;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    out_$i36 := $sext.i32.i64(out_$i33);
    goto corral_source_split_719;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    out_$p35 := $load.ref($M.0, out_$p34);
    goto corral_source_split_718;

  $bb23:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2880)), $mul.ref(2832, 1));
    goto corral_source_split_717;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb27_dummy:
    call {:si_unique_call 1} out_$p34, out_$p35, out_$i36, out_$p38, out_$p39, out_$i40, out_$i41, out_$p42, out_$p43, out_$i44, out_$p46, out_$p47, out_$i48, out_$i49, out_$i33 := stk_free_sio_buffers_loop_$bb22(in_$p0, in_$i29, out_$p34, out_$p35, out_$i36, out_$p38, out_$p39, out_$i40, out_$i41, out_$p42, out_$p43, out_$i44, out_$p46, out_$p47, out_$i48, out_$i49, out_$i33);
    return;

  exit:
    return;
}



procedure stk_free_sio_buffers_loop_$bb22(in_$p0: ref, in_$i29: i32, in_$p34: ref, in_$p35: ref, in_$i36: i64, in_$p38: ref, in_$p39: ref, in_$i40: i64, in_$i41: i1, in_$p42: ref, in_$p43: ref, in_$i44: i64, in_$p46: ref, in_$p47: ref, in_$i48: i32, in_$i49: i1, in_$i33: i32) returns (out_$p34: ref, out_$p35: ref, out_$i36: i64, out_$p38: ref, out_$p39: ref, out_$i40: i64, out_$i41: i1, out_$p42: ref, out_$p43: ref, out_$i44: i64, out_$p46: ref, out_$p47: ref, out_$i48: i32, out_$i49: i1, out_$i33: i32);



implementation stk_free_sio_buffers_loop_$bb11(in_$p0: ref, in_$p9: ref, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$p17: ref, in_$i18: i32, in_$i19: i1, in_$i20: i32, in_$i21: i32, in_$i22: i1, in_$i12: i32) returns (out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$p17: ref, out_$i18: i32, out_$i19: i1, out_$i20: i32, out_$i21: i32, out_$i22: i1, out_$i12: i32)
{

  entry:
    out_$p13, out_$p14, out_$i15, out_$p17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i12 := in_$p13, in_$p14, in_$i15, in_$p17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i12;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_680;

  $bb16:
    assume out_$i22 == 1;
    assume {:verifier.code 0} true;
    out_$i12 := out_$i20;
    goto $bb16_dummy;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    out_$i22 := $ult.i32(out_$i20, out_$i21);
    goto corral_source_split_694;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    out_$i21 := $load.i32($M.0, in_$p9);
    goto corral_source_split_693;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i20 := $add.i32(out_$i12, 1);
    call {:si_unique_call 146} {:cexpr "i"} boogie_si_record_i32(out_$i20);
    goto corral_source_split_692;

  $bb14:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    out_$i19 := $sgt.i32(out_$i18, 0);
    goto corral_source_split_688;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    out_$i18 := $load.i32($M.0, out_$p17);
    goto corral_source_split_687;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(out_$p14, $mul.ref(out_$i15, 128)), $mul.ref(96, 1));
    goto corral_source_split_686;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    goto corral_source_split_685;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    out_$i15 := $sext.i32.i64(out_$i12);
    goto corral_source_split_684;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    out_$p14 := $load.ref($M.0, out_$p13);
    goto corral_source_split_683;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2880)), $mul.ref(2832, 1));
    goto corral_source_split_682;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb16_dummy:
    call {:si_unique_call 1} out_$p13, out_$p14, out_$i15, out_$p17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i12 := stk_free_sio_buffers_loop_$bb11(in_$p0, in_$p9, out_$p13, out_$p14, out_$i15, out_$p17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i12);
    return;

  exit:
    return;
}



procedure stk_free_sio_buffers_loop_$bb11(in_$p0: ref, in_$p9: ref, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$p17: ref, in_$i18: i32, in_$i19: i1, in_$i20: i32, in_$i21: i32, in_$i22: i1, in_$i12: i32) returns (out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$p17: ref, out_$i18: i32, out_$i19: i1, out_$i20: i32, out_$i21: i32, out_$i22: i1, out_$i12: i32);



implementation stk_sensor_inb_loop_$bb11(in_$p0: ref, in_$p3: ref, in_$i14: i32, in_$i15: i32, in_$i16: i1, in_$i13: i32, in_$i17: i32, in_$i18: i32, in_$i19: i1, in_$i20: i1) returns (out_$i14: i32, out_$i15: i32, out_$i16: i1, out_$i13: i32, out_$i17: i32, out_$i18: i32, out_$i19: i1, out_$i20: i1)
{

  entry:
    out_$i14, out_$i15, out_$i16, out_$i13, out_$i17, out_$i18, out_$i19, out_$i20 := in_$i14, in_$i15, in_$i16, in_$i13, in_$i17, in_$i18, in_$i19, in_$i20;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb14:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    out_$i13 := out_$i14;
    goto $bb14_dummy;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    out_$i16 := $ne.i32(out_$i15, 0);
    goto corral_source_split_836;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 180} out_$i15 := stk_camera_read_reg(in_$p0, 513, in_$p3);
    call {:si_unique_call 181} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i15);
    goto corral_source_split_835;

  $bb12:
    assume out_$i20 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_834;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    out_$i14 := out_$i17;
    assume true;
    goto $bb12;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    out_$i20 := $sle.i32(out_$i17, 49);
    goto corral_source_split_845;

  $bb16:
    assume out_$i19 == 1;
    goto corral_source_split_844;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    out_$i19 := $eq.i32(out_$i18, 0);
    goto corral_source_split_842;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    out_$i18 := $load.i32($M.1, in_$p3);
    goto corral_source_split_841;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i17 := $add.i32(out_$i13, 1);
    call {:si_unique_call 182} {:cexpr "i"} boogie_si_record_i32(out_$i17);
    goto corral_source_split_840;

  $bb14_dummy:
    call {:si_unique_call 1} out_$i14, out_$i15, out_$i16, out_$i13, out_$i17, out_$i18, out_$i19, out_$i20 := stk_sensor_inb_loop_$bb11(in_$p0, in_$p3, out_$i14, out_$i15, out_$i16, out_$i13, out_$i17, out_$i18, out_$i19, out_$i20);
    return;

  exit:
    return;
}



procedure stk_sensor_inb_loop_$bb11(in_$p0: ref, in_$p3: ref, in_$i14: i32, in_$i15: i32, in_$i16: i1, in_$i13: i32, in_$i17: i32, in_$i18: i32, in_$i19: i1, in_$i20: i1) returns (out_$i14: i32, out_$i15: i32, out_$i16: i1, out_$i13: i32, out_$i17: i32, out_$i18: i32, out_$i19: i1, out_$i20: i1);



implementation ldv_stop___0_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop___0_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop___0_loop_$bb1();



implementation stk_read_loop_$bb50(in_$p4: ref, in_$p6: ref, in_$p86: ref, in_$p87: ref, in_$p90: ref, in_$i91: i32, in_$i92: i32, in_$i93: i1, in_$p95: ref, in_$i96: i32, in_$i97: i1, in_$i98: i32, in_$i99: i1) returns (out_$p90: ref, out_$i91: i32, out_$i92: i32, out_$i93: i1, out_$p95: ref, out_$i96: i32, out_$i97: i1, out_$i98: i32, out_$i99: i1)
{

  entry:
    out_$p90, out_$i91, out_$i92, out_$i93, out_$p95, out_$i96, out_$i97, out_$i98, out_$i99 := in_$p90, in_$i91, in_$i92, in_$i93, in_$p95, in_$i96, in_$i97, in_$i98, in_$i99;
    goto $bb50, exit;

  $bb50:
    assume {:verifier.code 0} true;
    out_$p90 := $add.ref($add.ref(in_$p6, $mul.ref(0, 2880)), $mul.ref(2644, 1));
    goto corral_source_split_1080;

  $bb60:
    assume {:verifier.code 0} true;
    assume !(out_$i99 == 1);
    goto $bb60_dummy;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    out_$i99 := $eq.i32(out_$i98, 0);
    goto corral_source_split_1102;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 240} out_$i98 := list_empty(in_$p87);
    call {:si_unique_call 241} {:cexpr "tmp___6"} boogie_si_record_i32(out_$i98);
    goto corral_source_split_1101;

  $bb58:
    assume {:verifier.code 0} true;
    call {:si_unique_call 239} prepare_to_wait(in_$p86, in_$p4, 1);
    goto corral_source_split_1100;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    goto $bb58;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 238} schedule();
    goto corral_source_split_1098;

  $bb56:
    assume out_$i97 == 1;
    goto corral_source_split_1097;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    out_$i97 := $eq.i32(out_$i96, 0);
    goto corral_source_split_1095;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} out_$i96 := signal_pending(out_$p95);
    call {:si_unique_call 237} {:cexpr "tmp___8"} boogie_si_record_i32(out_$i96);
    goto corral_source_split_1094;

  $bb55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 235} out_$p95 := get_current();
    goto corral_source_split_1093;

  $bb52:
    assume !(out_$i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    out_$i93 := $eq.i32(out_$i92, 0);
    goto corral_source_split_1083;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    out_$i92 := $and.i32(out_$i91, 1);
    goto corral_source_split_1082;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    out_$i91 := $load.i32($M.0, out_$p90);
    goto corral_source_split_1081;

  $bb60_dummy:
    call {:si_unique_call 1} out_$p90, out_$i91, out_$i92, out_$i93, out_$p95, out_$i96, out_$i97, out_$i98, out_$i99 := stk_read_loop_$bb50(in_$p4, in_$p6, in_$p86, in_$p87, out_$p90, out_$i91, out_$i92, out_$i93, out_$p95, out_$i96, out_$i97, out_$i98, out_$i99);
    return;

  exit:
    return;
}



procedure stk_read_loop_$bb50(in_$p4: ref, in_$p6: ref, in_$p86: ref, in_$p87: ref, in_$p90: ref, in_$i91: i32, in_$i92: i32, in_$i93: i1, in_$p95: ref, in_$i96: i32, in_$i97: i1, in_$i98: i32, in_$i99: i1) returns (out_$p90: ref, out_$i91: i32, out_$i92: i32, out_$i93: i1, out_$p95: ref, out_$i96: i32, out_$i97: i1, out_$i98: i32, out_$i99: i1);



implementation stk_read_loop_$bb28(in_$p6: ref, in_$p39: ref, in_$p43: ref, in_$p44: ref, in_$i45: i64, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$i51: i64, in_$p54: ref, in_$i55: i32, in_$i56: i32, in_$i57: i1, in_$i42: i32) returns (out_$p43: ref, out_$p44: ref, out_$i45: i64, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$i51: i64, out_$p54: ref, out_$i55: i32, out_$i56: i32, out_$i57: i1, out_$i42: i32)
{

  entry:
    out_$p43, out_$p44, out_$i45, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$p54, out_$i55, out_$i56, out_$i57, out_$i42 := in_$p43, in_$p44, in_$i45, in_$p47, in_$p48, in_$p49, in_$p50, in_$i51, in_$p54, in_$i55, in_$i56, in_$i57, in_$i42;
    goto $bb28, exit;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_1007;

  $bb30:
    assume out_$i57 == 1;
    assume {:verifier.code 0} true;
    out_$i42 := out_$i55;
    goto $bb30_dummy;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    out_$i57 := $ult.i32(out_$i55, out_$i56);
    goto corral_source_split_1024;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    out_$i56 := $load.i32($M.0, in_$p39);
    goto corral_source_split_1023;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    out_$i55 := $add.i32(out_$i42, 1);
    call {:si_unique_call 224} {:cexpr "i"} boogie_si_record_i32(out_$i55);
    goto corral_source_split_1022;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p54, 2);
    goto corral_source_split_1021;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref($add.ref(out_$p50, $mul.ref(out_$i51, 128)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_1020;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    goto corral_source_split_1019;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    out_$i51 := $sext.i32.i64(out_$i42);
    goto corral_source_split_1018;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    out_$p50 := $load.ref($M.0, out_$p49);
    goto corral_source_split_1017;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(in_$p6, $mul.ref(0, 2880)), $mul.ref(2832, 1));
    goto corral_source_split_1016;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 223} list_add_tail(out_$p47, out_$p48);
    goto corral_source_split_1015;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(in_$p6, $mul.ref(0, 2880)), $mul.ref(2840, 1));
    goto corral_source_split_1014;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(out_$p44, $mul.ref(out_$i45, 128)), $mul.ref(112, 1));
    goto corral_source_split_1013;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    goto corral_source_split_1012;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    out_$i45 := $sext.i32.i64(out_$i42);
    goto corral_source_split_1011;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    out_$p44 := $load.ref($M.0, out_$p43);
    goto corral_source_split_1010;

  $bb29:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(in_$p6, $mul.ref(0, 2880)), $mul.ref(2832, 1));
    goto corral_source_split_1009;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb30_dummy:
    call {:si_unique_call 1} out_$p43, out_$p44, out_$i45, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$p54, out_$i55, out_$i56, out_$i57, out_$i42 := stk_read_loop_$bb28(in_$p6, in_$p39, out_$p43, out_$p44, out_$i45, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$p54, out_$i55, out_$i56, out_$i57, out_$i42);
    return;

  exit:
    return;
}



procedure stk_read_loop_$bb28(in_$p6: ref, in_$p39: ref, in_$p43: ref, in_$p44: ref, in_$i45: i64, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$i51: i64, in_$p54: ref, in_$i55: i32, in_$i56: i32, in_$i57: i1, in_$i42: i32) returns (out_$p43: ref, out_$p44: ref, out_$i45: i64, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$i51: i64, out_$p54: ref, out_$i55: i32, out_$i56: i32, out_$i57: i1, out_$i42: i32);
  modifies $M.0;



implementation stk_initialise_loop_$bb11(in_$p0: ref, in_$p13: ref, in_$i14: i32, in_$i15: i16, in_$i16: i32, in_$i17: i16, in_$p18: ref, in_$i19: i32, in_$i20: i8, in_$i21: i32, in_$i22: i8, in_$i23: i32, in_$i24: i1, in_$i25: i32, in_$p26: ref, in_$p27: ref, in_$i28: i32, in_$i29: i1, in_$p12: ref) returns (out_$p13: ref, out_$i14: i32, out_$i15: i16, out_$i16: i32, out_$i17: i16, out_$p18: ref, out_$i19: i32, out_$i20: i8, out_$i21: i32, out_$i22: i8, out_$i23: i32, out_$i24: i1, out_$i25: i32, out_$p26: ref, out_$p27: ref, out_$i28: i32, out_$i29: i1, out_$p12: ref)
{

  entry:
    out_$p13, out_$i14, out_$i15, out_$i16, out_$i17, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p26, out_$p27, out_$i28, out_$i29, out_$p12 := in_$p13, in_$i14, in_$i15, in_$i16, in_$i17, in_$p18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$p26, in_$p27, in_$i28, in_$i29, in_$p12;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_1202;

  $bb16:
    assume out_$i29 == 1;
    assume {:verifier.code 0} true;
    out_$p12 := out_$p26;
    goto $bb16_dummy;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    out_$i29 := $ne.i32(out_$i28, 65535);
    goto corral_source_split_1222;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i32($M.12, out_$p27);
    goto corral_source_split_1221;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p12, $mul.ref(1, 8)), $mul.ref(0, 1));
    goto corral_source_split_1220;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref(out_$p12, $mul.ref(1, 8));
    goto corral_source_split_1219;

  $bb14:
    assume !(out_$i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    out_$i25 := out_$i23;
    assume true;
    goto $bb14;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    out_$i24 := $ne.i32(out_$i23, 0);
    goto corral_source_split_1215;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 258} out_$i23 := stk_camera_write_reg(in_$p0, out_$i17, out_$i22);
    call {:si_unique_call 259} {:cexpr "ret"} boogie_si_record_i32(out_$i23);
    goto corral_source_split_1214;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    out_$i22 := $trunc.i32.i8(out_$i21);
    goto corral_source_split_1213;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    out_$i21 := $zext.i8.i32(out_$i20);
    goto corral_source_split_1212;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    out_$i20 := $trunc.i32.i8(out_$i19);
    goto corral_source_split_1211;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    out_$i19 := $load.i32($M.13, out_$p18);
    goto corral_source_split_1210;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(out_$p12, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_1209;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    out_$i17 := $trunc.i32.i16(out_$i16);
    goto corral_source_split_1208;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    out_$i16 := $zext.i16.i32(out_$i15);
    goto corral_source_split_1207;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    out_$i15 := $trunc.i32.i16(out_$i14);
    goto corral_source_split_1206;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    out_$i14 := $load.i32($M.12, out_$p13);
    goto corral_source_split_1205;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(out_$p12, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1204;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb16_dummy:
    call {:si_unique_call 1} out_$p13, out_$i14, out_$i15, out_$i16, out_$i17, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p26, out_$p27, out_$i28, out_$i29, out_$p12 := stk_initialise_loop_$bb11(in_$p0, out_$p13, out_$i14, out_$i15, out_$i16, out_$i17, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p26, out_$p27, out_$i28, out_$i29, out_$p12);
    return;

  exit:
    return;
}



procedure stk_initialise_loop_$bb11(in_$p0: ref, in_$p13: ref, in_$i14: i32, in_$i15: i16, in_$i16: i32, in_$i17: i16, in_$p18: ref, in_$i19: i32, in_$i20: i8, in_$i21: i32, in_$i22: i8, in_$i23: i32, in_$i24: i1, in_$i25: i32, in_$p26: ref, in_$p27: ref, in_$i28: i32, in_$i29: i1, in_$p12: ref) returns (out_$p13: ref, out_$i14: i32, out_$i15: i16, out_$i16: i32, out_$i17: i16, out_$p18: ref, out_$i19: i32, out_$i20: i8, out_$i21: i32, out_$i22: i8, out_$i23: i32, out_$i24: i1, out_$i25: i32, out_$p26: ref, out_$p27: ref, out_$i28: i32, out_$i29: i1, out_$p12: ref);



implementation stk_start_stream_loop_$bb17(in_$p0: ref, in_$p50: ref, in_$p51: ref, in_$i52: i64, in_$p54: ref, in_$p55: ref, in_$i56: i64, in_$i57: i1, in_$p58: ref, in_$p59: ref, in_$i60: i64, in_$p62: ref, in_$p63: ref, in_$i64: i32, in_$p65: ref, in_$i66: i1, in_$i67: i32, in_$i68: i32, in_$i69: i1, in_$i49: i32) returns (out_$p50: ref, out_$p51: ref, out_$i52: i64, out_$p54: ref, out_$p55: ref, out_$i56: i64, out_$i57: i1, out_$p58: ref, out_$p59: ref, out_$i60: i64, out_$p62: ref, out_$p63: ref, out_$i64: i32, out_$p65: ref, out_$i66: i1, out_$i67: i32, out_$i68: i32, out_$i69: i1, out_$i49: i32)
{

  entry:
    out_$p50, out_$p51, out_$i52, out_$p54, out_$p55, out_$i56, out_$i57, out_$p58, out_$p59, out_$i60, out_$p62, out_$p63, out_$i64, out_$p65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i49 := in_$p50, in_$p51, in_$i52, in_$p54, in_$p55, in_$i56, in_$i57, in_$p58, in_$p59, in_$i60, in_$p62, in_$p63, in_$i64, in_$p65, in_$i66, in_$i67, in_$i68, in_$i69, in_$i49;
    goto $bb17, exit;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_1314;

  $bb25:
    assume out_$i69 == 1;
    assume {:verifier.code 0} true;
    out_$i49 := out_$i68;
    goto $bb25_dummy;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    out_$i69 := $sle.i32(out_$i68, 2);
    goto corral_source_split_1340;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i68 := $add.i32(out_$i49, 1);
    call {:si_unique_call 290} {:cexpr "i"} boogie_si_record_i32(out_$i68);
    goto corral_source_split_1339;

  $bb20:
    assume !(out_$i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb22:
    assume !(out_$i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    out_$i67 := out_$i64;
    assume true;
    goto $bb22;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    out_$i66 := $ne.i32(out_$i64, 0);
    goto corral_source_split_1335;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} atomic_inc(out_$p65);
    goto corral_source_split_1334;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2880)), $mul.ref(2624, 1));
    goto corral_source_split_1333;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 287} out_$i64 := ldv_usb_submit_urb_2(out_$p63, 208);
    call {:si_unique_call 288} {:cexpr "ret"} boogie_si_record_i32(out_$i64);
    goto corral_source_split_1332;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    out_$p63 := $load.ref($M.0, out_$p62);
    goto corral_source_split_1331;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref(out_$p59, $mul.ref(out_$i60, 24)), $mul.ref(16, 1));
    goto corral_source_split_1330;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    goto corral_source_split_1329;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    out_$i60 := $sext.i32.i64(out_$i49);
    goto corral_source_split_1328;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    out_$p59 := $load.ref($M.0, out_$p58);
    goto corral_source_split_1327;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2880)), $mul.ref(2808, 1));
    goto corral_source_split_1326;

  $bb19:
    assume out_$i57 == 1;
    goto corral_source_split_1325;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    out_$i57 := $ne.i64(out_$i56, 0);
    goto corral_source_split_1323;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    out_$i56 := $p2i.ref.i64(out_$p55);
    goto corral_source_split_1322;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    out_$p55 := $load.ref($M.0, out_$p54);
    goto corral_source_split_1321;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(out_$p51, $mul.ref(out_$i52, 24)), $mul.ref(16, 1));
    goto corral_source_split_1320;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    goto corral_source_split_1319;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    out_$i52 := $sext.i32.i64(out_$i49);
    goto corral_source_split_1318;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    out_$p51 := $load.ref($M.0, out_$p50);
    goto corral_source_split_1317;

  $bb18:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2880)), $mul.ref(2808, 1));
    goto corral_source_split_1316;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb25_dummy:
    call {:si_unique_call 1} out_$p50, out_$p51, out_$i52, out_$p54, out_$p55, out_$i56, out_$i57, out_$p58, out_$p59, out_$i60, out_$p62, out_$p63, out_$i64, out_$p65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i49 := stk_start_stream_loop_$bb17(in_$p0, out_$p50, out_$p51, out_$i52, out_$p54, out_$p55, out_$i56, out_$i57, out_$p58, out_$p59, out_$i60, out_$p62, out_$p63, out_$i64, out_$p65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i49);
    return;

  exit:
    return;
}



procedure stk_start_stream_loop_$bb17(in_$p0: ref, in_$p50: ref, in_$p51: ref, in_$i52: i64, in_$p54: ref, in_$p55: ref, in_$i56: i64, in_$i57: i1, in_$p58: ref, in_$p59: ref, in_$i60: i64, in_$p62: ref, in_$p63: ref, in_$i64: i32, in_$p65: ref, in_$i66: i1, in_$i67: i32, in_$i68: i32, in_$i69: i1, in_$i49: i32) returns (out_$p50: ref, out_$p51: ref, out_$i52: i64, out_$p54: ref, out_$p55: ref, out_$i56: i64, out_$i57: i1, out_$p58: ref, out_$p59: ref, out_$i60: i64, out_$p62: ref, out_$p63: ref, out_$i64: i32, out_$p65: ref, out_$i66: i1, out_$i67: i32, out_$i68: i32, out_$i69: i1, out_$i49: i32);
  modifies $M.14, $M.16, $M.0, $M.2;



implementation stk_prepare_iso_loop_$bb41(in_$p0: ref, in_$p121: ref, in_$p123: ref, in_$p124: ref, in_$i125: i64, in_$p127: ref, in_$p128: ref, in_$i129: i32, in_$i130: i1, in_$i122: i32, in_$p131: ref, in_$i132: i64, in_$p134: ref, in_$p135: ref, in_$i136: i64, in_$i137: i1) returns (out_$p123: ref, out_$p124: ref, out_$i125: i64, out_$p127: ref, out_$p128: ref, out_$i129: i32, out_$i130: i1, out_$i122: i32, out_$p131: ref, out_$i132: i64, out_$p134: ref, out_$p135: ref, out_$i136: i64, out_$i137: i1)
{

  entry:
    out_$p123, out_$p124, out_$i125, out_$p127, out_$p128, out_$i129, out_$i130, out_$i122, out_$p131, out_$i132, out_$p134, out_$p135, out_$i136, out_$i137 := in_$p123, in_$p124, in_$i125, in_$p127, in_$p128, in_$i129, in_$i130, in_$i122, in_$p131, in_$i132, in_$p134, in_$p135, in_$i136, in_$i137;
    goto $bb41, exit;

  $bb41:
    assume {:verifier.code 0} true;
    goto corral_source_split_1637;

  $bb43:
    assume out_$i130 == 1;
    assume {:verifier.code 0} true;
    out_$i122 := out_$i129;
    goto $bb43_dummy;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    out_$i130 := $sle.i32(out_$i129, 2);
    goto corral_source_split_1654;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    out_$i129 := $add.i32(out_$i122, 1);
    call {:si_unique_call 349} {:cexpr "i"} boogie_si_record_i32(out_$i129);
    goto corral_source_split_1653;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} ldv_usb_free_urb_5(out_$p128);
    goto corral_source_split_1652;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    out_$p128 := $load.ref($M.0, out_$p127);
    goto corral_source_split_1651;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    out_$p127 := $add.ref($add.ref(out_$p124, $mul.ref(out_$i125, 24)), $mul.ref(16, 1));
    goto corral_source_split_1650;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    goto corral_source_split_1649;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    out_$i125 := $sext.i32.i64(out_$i122);
    goto corral_source_split_1648;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    out_$p124 := $load.ref($M.0, out_$p123);
    goto corral_source_split_1647;

  $bb42:
    assume {:verifier.code 0} true;
    out_$p123 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2880)), $mul.ref(2808, 1));
    goto corral_source_split_1646;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb46:
    assume out_$i137 == 1;
    goto corral_source_split_1656;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    out_$i137 := $ne.i64(out_$i136, 0);
    goto corral_source_split_1644;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    out_$i136 := $p2i.ref.i64(out_$p135);
    goto corral_source_split_1643;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    out_$p135 := $load.ref($M.0, out_$p134);
    goto corral_source_split_1642;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    out_$p134 := $add.ref($add.ref(out_$p131, $mul.ref(out_$i132, 24)), $mul.ref(16, 1));
    goto corral_source_split_1641;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    goto corral_source_split_1640;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    out_$i132 := $sext.i32.i64(out_$i122);
    goto corral_source_split_1639;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    out_$p131 := $load.ref($M.0, in_$p121);
    goto corral_source_split_1638;

  $bb43_dummy:
    call {:si_unique_call 1} out_$p123, out_$p124, out_$i125, out_$p127, out_$p128, out_$i129, out_$i130, out_$i122, out_$p131, out_$i132, out_$p134, out_$p135, out_$i136, out_$i137 := stk_prepare_iso_loop_$bb41(in_$p0, in_$p121, out_$p123, out_$p124, out_$i125, out_$p127, out_$p128, out_$i129, out_$i130, out_$i122, out_$p131, out_$i132, out_$p134, out_$p135, out_$i136, out_$i137);
    return;

  exit:
    return;
}



procedure stk_prepare_iso_loop_$bb41(in_$p0: ref, in_$p121: ref, in_$p123: ref, in_$p124: ref, in_$i125: i64, in_$p127: ref, in_$p128: ref, in_$i129: i32, in_$i130: i1, in_$i122: i32, in_$p131: ref, in_$i132: i64, in_$p134: ref, in_$p135: ref, in_$i136: i64, in_$i137: i1) returns (out_$p123: ref, out_$p124: ref, out_$i125: i64, out_$p127: ref, out_$p128: ref, out_$i129: i32, out_$i130: i1, out_$i122: i32, out_$p131: ref, out_$i132: i64, out_$p134: ref, out_$p135: ref, out_$i136: i64, out_$i137: i1);
  modifies $M.4;



implementation stk_prepare_iso_loop_$bb11(in_$p0: ref, in_$p5: ref, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$p24: ref, in_$p25: ref, in_$i26: i64, in_$i27: i1, in_$p28: ref, in_$i29: i64, in_$i30: i1, in_$i31: i32, in_$p33: ref, in_$p34: ref, in_$i35: i64, in_$p37: ref, in_$p39: ref, in_$p40: ref, in_$i41: i64, in_$p43: ref, in_$p44: ref, in_$i45: i64, in_$i46: i1, in_$p47: ref, in_$i48: i64, in_$i49: i1, in_$i50: i32, in_$p52: ref, in_$p53: ref, in_$i54: i64, in_$p56: ref, in_$p59: ref, in_$p60: ref, in_$i61: i64, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$i67: i64, in_$p69: ref, in_$p70: ref, in_$p57: ref, in_$p71: ref, in_$p72: ref, in_$p73: ref, in_$i74: i8, in_$i75: i32, in_$i76: i32, in_$i77: i32, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$p81: ref, in_$i82: i64, in_$p84: ref, in_$p85: ref, in_$p86: ref, in_$p87: ref, in_$p88: ref, in_$p90: ref, in_$p91: ref, in_$p92: ref, in_$p95: ref, in_$p98: ref, in_$i99: i32, in_$i100: i1, in_$i19: i32, in_$p160: ref, in_$p163: ref, in_$p166: ref, in_$p169: ref, in_$p172: ref, in_$p175: ref, in_$p178: ref, in_$p181: ref, in_$p184: ref, in_$p187: ref, in_$p190: ref, in_$p193: ref, in_$p196: ref, in_$p199: ref, in_$p202: ref, in_$p205: ref, in_$p208: ref, in_$p211: ref, in_$p214: ref, in_$p217: ref, in_$p220: ref, in_$p223: ref, in_$p226: ref, in_$p229: ref, in_$p232: ref, in_$p235: ref, in_$p238: ref, in_$p241: ref, in_$p244: ref, in_$p247: ref, in_vslice_dummy_var_52: i32, in_vslice_dummy_var_54: i32) returns (out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$p24: ref, out_$p25: ref, out_$i26: i64, out_$i27: i1, out_$p28: ref, out_$i29: i64, out_$i30: i1, out_$i31: i32, out_$p33: ref, out_$p34: ref, out_$i35: i64, out_$p37: ref, out_$p39: ref, out_$p40: ref, out_$i41: i64, out_$p43: ref, out_$p44: ref, out_$i45: i64, out_$i46: i1, out_$p47: ref, out_$i48: i64, out_$i49: i1, out_$i50: i32, out_$p52: ref, out_$p53: ref, out_$i54: i64, out_$p56: ref, out_$p59: ref, out_$p60: ref, out_$i61: i64, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$i67: i64, out_$p69: ref, out_$p70: ref, out_$p57: ref, out_$p71: ref, out_$p72: ref, out_$p73: ref, out_$i74: i8, out_$i75: i32, out_$i76: i32, out_$i77: i32, out_$p78: ref, out_$p79: ref, out_$p80: ref, out_$p81: ref, out_$i82: i64, out_$p84: ref, out_$p85: ref, out_$p86: ref, out_$p87: ref, out_$p88: ref, out_$p90: ref, out_$p91: ref, out_$p92: ref, out_$p95: ref, out_$p98: ref, out_$i99: i32, out_$i100: i1, out_$i19: i32, out_$p160: ref, out_$p163: ref, out_$p166: ref, out_$p169: ref, out_$p172: ref, out_$p175: ref, out_$p178: ref, out_$p181: ref, out_$p184: ref, out_$p187: ref, out_$p190: ref, out_$p193: ref, out_$p196: ref, out_$p199: ref, out_$p202: ref, out_$p205: ref, out_$p208: ref, out_$p211: ref, out_$p214: ref, out_$p217: ref, out_$p220: ref, out_$p223: ref, out_$p226: ref, out_$p229: ref, out_$p232: ref, out_$p235: ref, out_$p238: ref, out_$p241: ref, out_$p244: ref, out_$p247: ref, out_vslice_dummy_var_52: i32, out_vslice_dummy_var_54: i32)
{

  entry:
    out_$p20, out_$p21, out_$i22, out_$p24, out_$p25, out_$i26, out_$i27, out_$p28, out_$i29, out_$i30, out_$i31, out_$p33, out_$p34, out_$i35, out_$p37, out_$p39, out_$p40, out_$i41, out_$p43, out_$p44, out_$i45, out_$i46, out_$p47, out_$i48, out_$i49, out_$i50, out_$p52, out_$p53, out_$i54, out_$p56, out_$p59, out_$p60, out_$i61, out_$p63, out_$p64, out_$p65, out_$p66, out_$i67, out_$p69, out_$p70, out_$p57, out_$p71, out_$p72, out_$p73, out_$i74, out_$i75, out_$i76, out_$i77, out_$p78, out_$p79, out_$p80, out_$p81, out_$i82, out_$p84, out_$p85, out_$p86, out_$p87, out_$p88, out_$p90, out_$p91, out_$p92, out_$p95, out_$p98, out_$i99, out_$i100, out_$i19, out_$p160, out_$p163, out_$p166, out_$p169, out_$p172, out_$p175, out_$p178, out_$p181, out_$p184, out_$p187, out_$p190, out_$p193, out_$p196, out_$p199, out_$p202, out_$p205, out_$p208, out_$p211, out_$p214, out_$p217, out_$p220, out_$p223, out_$p226, out_$p229, out_$p232, out_$p235, out_$p238, out_$p241, out_$p244, out_$p247, out_vslice_dummy_var_52, out_vslice_dummy_var_54 := in_$p20, in_$p21, in_$i22, in_$p24, in_$p25, in_$i26, in_$i27, in_$p28, in_$i29, in_$i30, in_$i31, in_$p33, in_$p34, in_$i35, in_$p37, in_$p39, in_$p40, in_$i41, in_$p43, in_$p44, in_$i45, in_$i46, in_$p47, in_$i48, in_$i49, in_$i50, in_$p52, in_$p53, in_$i54, in_$p56, in_$p59, in_$p60, in_$i61, in_$p63, in_$p64, in_$p65, in_$p66, in_$i67, in_$p69, in_$p70, in_$p57, in_$p71, in_$p72, in_$p73, in_$i74, in_$i75, in_$i76, in_$i77, in_$p78, in_$p79, in_$p80, in_$p81, in_$i82, in_$p84, in_$p85, in_$p86, in_$p87, in_$p88, in_$p90, in_$p91, in_$p92, in_$p95, in_$p98, in_$i99, in_$i100, in_$i19, in_$p160, in_$p163, in_$p166, in_$p169, in_$p172, in_$p175, in_$p178, in_$p181, in_$p184, in_$p187, in_$p190, in_$p193, in_$p196, in_$p199, in_$p202, in_$p205, in_$p208, in_$p211, in_$p214, in_$p217, in_$p220, in_$p223, in_$p226, in_$p229, in_$p232, in_$p235, in_$p238, in_$p241, in_$p244, in_$p247, in_vslice_dummy_var_52, in_vslice_dummy_var_54;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_1491;

  $bb30:
    assume out_$i100 == 1;
    assume {:verifier.code 0} true;
    out_$i19 := out_$i99;
    goto $bb30_dummy;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    out_$i100 := $sle.i32(out_$i99, 2);
    goto corral_source_split_1605;

  $bb29:
    assume {:verifier.code 0} true;
    out_$i99 := $add.i32(out_$i19, 1);
    call {:si_unique_call 346} {:cexpr "i"} boogie_si_record_i32(out_$i99);
    goto corral_source_split_1604;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p247, 3072);
    assume {:verifier.code 0} true;
    goto $bb29;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    out_$p247 := $add.ref($add.ref($add.ref($add.ref(out_$p57, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(15, 16)), $mul.ref(4, 1));
    goto corral_source_split_1753;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p244, 46080);
    goto corral_source_split_1752;

  $bb66:
    assume {:verifier.code 0} true;
    out_$p244 := $add.ref($add.ref($add.ref($add.ref(out_$p57, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(15, 16)), $mul.ref(0, 1));
    goto corral_source_split_1751;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    goto $bb66;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p241, 3072);
    goto corral_source_split_1749;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    out_$p241 := $add.ref($add.ref($add.ref($add.ref(out_$p57, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(14, 16)), $mul.ref(4, 1));
    goto corral_source_split_1748;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p238, 43008);
    goto corral_source_split_1747;

  $bb65:
    assume {:verifier.code 0} true;
    out_$p238 := $add.ref($add.ref($add.ref($add.ref(out_$p57, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(14, 16)), $mul.ref(0, 1));
    goto corral_source_split_1746;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    goto $bb65;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p235, 3072);
    goto corral_source_split_1744;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    out_$p235 := $add.ref($add.ref($add.ref($add.ref(out_$p57, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(13, 16)), $mul.ref(4, 1));
    goto corral_source_split_1743;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p232, 39936);
    goto corral_source_split_1742;

  $bb64:
    assume {:verifier.code 0} true;
    out_$p232 := $add.ref($add.ref($add.ref($add.ref(out_$p57, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(13, 16)), $mul.ref(0, 1));
    goto corral_source_split_1741;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    goto $bb64;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p229, 3072);
    goto corral_source_split_1739;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    out_$p229 := $add.ref($add.ref($add.ref($add.ref(out_$p57, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(12, 16)), $mul.ref(4, 1));
    goto corral_source_split_1738;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p226, 36864);
    goto corral_source_split_1737;

  $bb63:
    assume {:verifier.code 0} true;
    out_$p226 := $add.ref($add.ref($add.ref($add.ref(out_$p57, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(12, 16)), $mul.ref(0, 1));
    goto corral_source_split_1736;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    goto $bb63;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p223, 3072);
    goto corral_source_split_1734;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    out_$p223 := $add.ref($add.ref($add.ref($add.ref(out_$p57, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(11, 16)), $mul.ref(4, 1));
    goto corral_source_split_1733;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p220, 33792);
    goto corral_source_split_1732;

  $bb62:
    assume {:verifier.code 0} true;
    out_$p220 := $add.ref($add.ref($add.ref($add.ref(out_$p57, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(11, 16)), $mul.ref(0, 1));
    goto corral_source_split_1731;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    goto $bb62;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p217, 3072);
    goto corral_source_split_1729;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    out_$p217 := $add.ref($add.ref($add.ref($add.ref(out_$p57, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(10, 16)), $mul.ref(4, 1));
    goto corral_source_split_1728;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p214, 30720);
    goto corral_source_split_1727;

  $bb61:
    assume {:verifier.code 0} true;
    out_$p214 := $add.ref($add.ref($add.ref($add.ref(out_$p57, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(10, 16)), $mul.ref(0, 1));
    goto corral_source_split_1726;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    goto $bb61;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p211, 3072);
    goto corral_source_split_1724;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    out_$p211 := $add.ref($add.ref($add.ref($add.ref(out_$p57, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(9, 16)), $mul.ref(4, 1));
    goto corral_source_split_1723;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p208, 27648);
    goto corral_source_split_1722;

  $bb60:
    assume {:verifier.code 0} true;
    out_$p208 := $add.ref($add.ref($add.ref($add.ref(out_$p57, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(9, 16)), $mul.ref(0, 1));
    goto corral_source_split_1721;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    goto $bb60;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p205, 3072);
    goto corral_source_split_1719;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    out_$p205 := $add.ref($add.ref($add.ref($add.ref(out_$p57, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(8, 16)), $mul.ref(4, 1));
    goto corral_source_split_1718;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p202, 24576);
    goto corral_source_split_1717;

  $bb59:
    assume {:verifier.code 0} true;
    out_$p202 := $add.ref($add.ref($add.ref($add.ref(out_$p57, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(8, 16)), $mul.ref(0, 1));
    goto corral_source_split_1716;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    goto $bb59;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p199, 3072);
    goto corral_source_split_1714;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    out_$p199 := $add.ref($add.ref($add.ref($add.ref(out_$p57, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(7, 16)), $mul.ref(4, 1));
    goto corral_source_split_1713;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p196, 21504);
    goto corral_source_split_1712;

  $bb58:
    assume {:verifier.code 0} true;
    out_$p196 := $add.ref($add.ref($add.ref($add.ref(out_$p57, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(7, 16)), $mul.ref(0, 1));
    goto corral_source_split_1711;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    goto $bb58;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p193, 3072);
    goto corral_source_split_1709;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    out_$p193 := $add.ref($add.ref($add.ref($add.ref(out_$p57, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(6, 16)), $mul.ref(4, 1));
    goto corral_source_split_1708;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p190, 18432);
    goto corral_source_split_1707;

  $bb57:
    assume {:verifier.code 0} true;
    out_$p190 := $add.ref($add.ref($add.ref($add.ref(out_$p57, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(6, 16)), $mul.ref(0, 1));
    goto corral_source_split_1706;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    goto $bb57;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p187, 3072);
    goto corral_source_split_1704;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    out_$p187 := $add.ref($add.ref($add.ref($add.ref(out_$p57, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(5, 16)), $mul.ref(4, 1));
    goto corral_source_split_1703;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p184, 15360);
    goto corral_source_split_1702;

  $bb56:
    assume {:verifier.code 0} true;
    out_$p184 := $add.ref($add.ref($add.ref($add.ref(out_$p57, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(5, 16)), $mul.ref(0, 1));
    goto corral_source_split_1701;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    goto $bb56;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p181, 3072);
    goto corral_source_split_1699;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    out_$p181 := $add.ref($add.ref($add.ref($add.ref(out_$p57, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(4, 16)), $mul.ref(4, 1));
    goto corral_source_split_1698;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p178, 12288);
    goto corral_source_split_1697;

  $bb55:
    assume {:verifier.code 0} true;
    out_$p178 := $add.ref($add.ref($add.ref($add.ref(out_$p57, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(4, 16)), $mul.ref(0, 1));
    goto corral_source_split_1696;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    goto $bb55;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p175, 3072);
    goto corral_source_split_1694;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    out_$p175 := $add.ref($add.ref($add.ref($add.ref(out_$p57, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(3, 16)), $mul.ref(4, 1));
    goto corral_source_split_1693;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p172, 9216);
    goto corral_source_split_1692;

  $bb54:
    assume {:verifier.code 0} true;
    out_$p172 := $add.ref($add.ref($add.ref($add.ref(out_$p57, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(3, 16)), $mul.ref(0, 1));
    goto corral_source_split_1691;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    goto $bb54;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p169, 3072);
    goto corral_source_split_1689;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    out_$p169 := $add.ref($add.ref($add.ref($add.ref(out_$p57, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(2, 16)), $mul.ref(4, 1));
    goto corral_source_split_1688;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p166, 6144);
    goto corral_source_split_1687;

  $bb53:
    assume {:verifier.code 0} true;
    out_$p166 := $add.ref($add.ref($add.ref($add.ref(out_$p57, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(2, 16)), $mul.ref(0, 1));
    goto corral_source_split_1686;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    goto $bb53;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p163, 3072);
    goto corral_source_split_1602;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    out_$p163 := $add.ref($add.ref($add.ref($add.ref(out_$p57, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(1, 16)), $mul.ref(4, 1));
    goto corral_source_split_1601;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p160, 3072);
    goto corral_source_split_1600;

  $bb28:
    assume {:verifier.code 0} true;
    out_$p160 := $add.ref($add.ref($add.ref($add.ref(out_$p57, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(1, 16)), $mul.ref(0, 1));
    goto corral_source_split_1599;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p98, 3072);
    goto corral_source_split_1597;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    out_$p98 := $add.ref($add.ref($add.ref($add.ref(out_$p57, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_1596;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p95, 0);
    goto corral_source_split_1595;

  $bb27:
    assume {:verifier.code 0} true;
    out_$p95 := $add.ref($add.ref($add.ref($add.ref(out_$p57, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1594;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p92, 16);
    goto corral_source_split_1592;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    out_$p92 := $add.ref($add.ref(out_$p57, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_1591;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p91, 0);
    goto corral_source_split_1590;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    out_$p91 := $add.ref($add.ref(out_$p57, $mul.ref(0, 192)), $mul.ref(160, 1));
    goto corral_source_split_1589;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p90, in_$p0);
    goto corral_source_split_1588;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    out_$p90 := $add.ref($add.ref(out_$p57, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_1587;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    goto corral_source_split_1586;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p88, stk_isoc_handler);
    goto corral_source_split_1585;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    out_$p88 := $add.ref($add.ref(out_$p57, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_1584;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p87, 49152);
    goto corral_source_split_1583;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref($add.ref(out_$p57, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_1582;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p86, out_$p85);
    goto corral_source_split_1581;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    out_$p86 := $add.ref($add.ref(out_$p57, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_1580;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    out_$p85 := $load.ref($M.0, out_$p84);
    goto corral_source_split_1579;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref($add.ref(out_$p81, $mul.ref(out_$i82, 24)), $mul.ref(0, 1));
    goto corral_source_split_1578;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    goto corral_source_split_1577;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    out_$i82 := $sext.i32.i64(out_$i19);
    goto corral_source_split_1576;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    out_$p81 := $load.ref($M.0, out_$p80);
    goto corral_source_split_1575;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2880)), $mul.ref(2808, 1));
    goto corral_source_split_1574;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p79, 2);
    goto corral_source_split_1573;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref(out_$p57, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_1572;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p78, out_$i77);
    goto corral_source_split_1571;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    out_$p78 := $add.ref($add.ref(out_$p57, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_1570;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    out_$i77 := $or.i32(out_$i76, 128);
    goto corral_source_split_1569;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} out_$i76 := __create_pipe(in_$p5, out_$i75);
    call {:si_unique_call 345} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i76);
    goto corral_source_split_1568;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    out_$i75 := $zext.i8.i32(out_$i74);
    goto corral_source_split_1567;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    out_$i74 := $load.i8($M.0, out_$p73);
    goto corral_source_split_1566;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2880)), $mul.ref(2620, 1));
    goto corral_source_split_1565;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p72, in_$p5);
    goto corral_source_split_1564;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref(out_$p57, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_1563;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p71, 1);
    goto corral_source_split_1562;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref(out_$p57, $mul.ref(0, 192)), $mul.ref(168, 1));
    goto corral_source_split_1561;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_1560;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    out_$p70 := $load.ref($M.0, out_$p69);
    assume {:verifier.code 0} true;
    out_$p57 := out_$p70;
    goto $bb25;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    out_$p57 := out_$p47;
    goto $bb25;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p56, out_$p47);
    goto corral_source_split_1558;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(out_$p53, $mul.ref(out_$i54, 24)), $mul.ref(16, 1));
    goto corral_source_split_1557;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    goto corral_source_split_1556;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    out_$i54 := $sext.i32.i64(out_$i19);
    goto corral_source_split_1555;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    out_$p53 := $load.ref($M.0, out_$p52);
    goto corral_source_split_1554;

  $bb24:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2880)), $mul.ref(2808, 1));
    goto corral_source_split_1553;

  $bb23:
    assume !(out_$i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    out_$i50 := out_$i19;
    assume true;
    goto $bb23;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    out_$i49 := $eq.i64(out_$i48, 0);
    goto corral_source_split_1533;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    out_$i48 := $p2i.ref.i64(out_$p47);
    goto corral_source_split_1532;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 340} out_$p47 := ldv_usb_alloc_urb_4(16, 208);
    goto corral_source_split_1531;

  $bb20:
    assume out_$i46 == 1;
    goto corral_source_split_1530;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    out_$i46 := $eq.i64(out_$i45, 0);
    goto corral_source_split_1528;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    out_$i45 := $p2i.ref.i64(out_$p44);
    goto corral_source_split_1527;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    out_$p44 := $load.ref($M.0, out_$p43);
    goto corral_source_split_1526;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(out_$p40, $mul.ref(out_$i41, 24)), $mul.ref(16, 1));
    goto corral_source_split_1525;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    goto corral_source_split_1524;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    out_$i41 := $sext.i32.i64(out_$i19);
    goto corral_source_split_1523;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    out_$p40 := $load.ref($M.0, out_$p39);
    goto corral_source_split_1522;

  $bb19:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2880)), $mul.ref(2808, 1));
    goto corral_source_split_1521;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 338} out_vslice_dummy_var_52 := printk.ref(.str.14);
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p37, out_$p28);
    goto corral_source_split_1519;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(out_$p34, $mul.ref(out_$i35, 24)), $mul.ref(0, 1));
    goto corral_source_split_1518;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    goto corral_source_split_1517;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    out_$i35 := $sext.i32.i64(out_$i19);
    goto corral_source_split_1516;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    out_$p34 := $load.ref($M.0, out_$p33);
    goto corral_source_split_1515;

  $bb18:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2880)), $mul.ref(2808, 1));
    goto corral_source_split_1514;

  $bb16:
    assume !(out_$i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    out_$i31 := out_$i19;
    assume true;
    goto $bb16;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    out_$i30 := $eq.i64(out_$i29, 0);
    goto corral_source_split_1505;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    out_$i29 := $p2i.ref.i64(out_$p28);
    goto corral_source_split_1504;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 337} out_$p28 := kzalloc(49152, 208);
    goto corral_source_split_1503;

  $bb13:
    assume out_$i27 == 1;
    goto corral_source_split_1502;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    out_$i27 := $eq.i64(out_$i26, 0);
    goto corral_source_split_1500;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    out_$i26 := $p2i.ref.i64(out_$p25);
    goto corral_source_split_1499;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    out_$p25 := $load.ref($M.0, out_$p24);
    goto corral_source_split_1498;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p21, $mul.ref(out_$i22, 24)), $mul.ref(0, 1));
    goto corral_source_split_1497;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    goto corral_source_split_1496;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    out_$i22 := $sext.i32.i64(out_$i19);
    goto corral_source_split_1495;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    out_$p21 := $load.ref($M.0, out_$p20);
    goto corral_source_split_1494;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2880)), $mul.ref(2808, 1));
    goto corral_source_split_1493;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb14:
    assume !(out_$i27 == 1);
    goto corral_source_split_1507;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref($add.ref(out_$p66, $mul.ref(out_$i67, 24)), $mul.ref(16, 1));
    goto corral_source_split_1548;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    goto corral_source_split_1547;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    out_$i67 := $sext.i32.i64(out_$i19);
    goto corral_source_split_1546;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    out_$p66 := $load.ref($M.0, out_$p65);
    goto corral_source_split_1545;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2880)), $mul.ref(2808, 1));
    goto corral_source_split_1544;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 342} usb_kill_urb(out_$p64);
    goto corral_source_split_1543;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    out_$p64 := $load.ref($M.0, out_$p63);
    goto corral_source_split_1542;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref(out_$p60, $mul.ref(out_$i61, 24)), $mul.ref(16, 1));
    goto corral_source_split_1541;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    goto corral_source_split_1540;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    out_$i61 := $sext.i32.i64(out_$i19);
    goto corral_source_split_1539;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    out_$p60 := $load.ref($M.0, out_$p59);
    goto corral_source_split_1538;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2880)), $mul.ref(2808, 1));
    goto corral_source_split_1537;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 341} out_vslice_dummy_var_54 := printk.ref(.str.16);
    goto corral_source_split_1536;

  $bb21:
    assume !(out_$i46 == 1);
    goto corral_source_split_1535;

  $bb30_dummy:
    call {:si_unique_call 1} out_$p20, out_$p21, out_$i22, out_$p24, out_$p25, out_$i26, out_$i27, out_$p28, out_$i29, out_$i30, out_$i31, out_$p33, out_$p34, out_$i35, out_$p37, out_$p39, out_$p40, out_$i41, out_$p43, out_$p44, out_$i45, out_$i46, out_$p47, out_$i48, out_$i49, out_$i50, out_$p52, out_$p53, out_$i54, out_$p56, out_$p59, out_$p60, out_$i61, out_$p63, out_$p64, out_$p65, out_$p66, out_$i67, out_$p69, out_$p70, out_$p57, out_$p71, out_$p72, out_$p73, out_$i74, out_$i75, out_$i76, out_$i77, out_$p78, out_$p79, out_$p80, out_$p81, out_$i82, out_$p84, out_$p85, out_$p86, out_$p87, out_$p88, out_$p90, out_$p91, out_$p92, out_$p95, out_$p98, out_$i99, out_$i100, out_$i19, out_$p160, out_$p163, out_$p166, out_$p169, out_$p172, out_$p175, out_$p178, out_$p181, out_$p184, out_$p187, out_$p190, out_$p193, out_$p196, out_$p199, out_$p202, out_$p205, out_$p208, out_$p211, out_$p214, out_$p217, out_$p220, out_$p223, out_$p226, out_$p229, out_$p232, out_$p235, out_$p238, out_$p241, out_$p244, out_$p247, out_vslice_dummy_var_52, out_vslice_dummy_var_54 := stk_prepare_iso_loop_$bb11(in_$p0, in_$p5, out_$p20, out_$p21, out_$i22, out_$p24, out_$p25, out_$i26, out_$i27, out_$p28, out_$i29, out_$i30, out_$i31, out_$p33, out_$p34, out_$i35, out_$p37, out_$p39, out_$p40, out_$i41, out_$p43, out_$p44, out_$i45, out_$i46, out_$p47, out_$i48, out_$i49, out_$i50, out_$p52, out_$p53, out_$i54, out_$p56, out_$p59, out_$p60, out_$i61, out_$p63, out_$p64, out_$p65, out_$p66, out_$i67, out_$p69, out_$p70, out_$p57, out_$p71, out_$p72, out_$p73, out_$i74, out_$i75, out_$i76, out_$i77, out_$p78, out_$p79, out_$p80, out_$p81, out_$i82, out_$p84, out_$p85, out_$p86, out_$p87, out_$p88, out_$p90, out_$p91, out_$p92, out_$p95, out_$p98, out_$i99, out_$i100, out_$i19, out_$p160, out_$p163, out_$p166, out_$p169, out_$p172, out_$p175, out_$p178, out_$p181, out_$p184, out_$p187, out_$p190, out_$p193, out_$p196, out_$p199, out_$p202, out_$p205, out_$p208, out_$p211, out_$p214, out_$p217, out_$p220, out_$p223, out_$p226, out_$p229, out_$p232, out_$p235, out_$p238, out_$p241, out_$p244, out_$p247, out_vslice_dummy_var_52, out_vslice_dummy_var_54);
    return;

  exit:
    return;
}



procedure stk_prepare_iso_loop_$bb11(in_$p0: ref, in_$p5: ref, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$p24: ref, in_$p25: ref, in_$i26: i64, in_$i27: i1, in_$p28: ref, in_$i29: i64, in_$i30: i1, in_$i31: i32, in_$p33: ref, in_$p34: ref, in_$i35: i64, in_$p37: ref, in_$p39: ref, in_$p40: ref, in_$i41: i64, in_$p43: ref, in_$p44: ref, in_$i45: i64, in_$i46: i1, in_$p47: ref, in_$i48: i64, in_$i49: i1, in_$i50: i32, in_$p52: ref, in_$p53: ref, in_$i54: i64, in_$p56: ref, in_$p59: ref, in_$p60: ref, in_$i61: i64, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$i67: i64, in_$p69: ref, in_$p70: ref, in_$p57: ref, in_$p71: ref, in_$p72: ref, in_$p73: ref, in_$i74: i8, in_$i75: i32, in_$i76: i32, in_$i77: i32, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$p81: ref, in_$i82: i64, in_$p84: ref, in_$p85: ref, in_$p86: ref, in_$p87: ref, in_$p88: ref, in_$p90: ref, in_$p91: ref, in_$p92: ref, in_$p95: ref, in_$p98: ref, in_$i99: i32, in_$i100: i1, in_$i19: i32, in_$p160: ref, in_$p163: ref, in_$p166: ref, in_$p169: ref, in_$p172: ref, in_$p175: ref, in_$p178: ref, in_$p181: ref, in_$p184: ref, in_$p187: ref, in_$p190: ref, in_$p193: ref, in_$p196: ref, in_$p199: ref, in_$p202: ref, in_$p205: ref, in_$p208: ref, in_$p211: ref, in_$p214: ref, in_$p217: ref, in_$p220: ref, in_$p223: ref, in_$p226: ref, in_$p229: ref, in_$p232: ref, in_$p235: ref, in_$p238: ref, in_$p241: ref, in_$p244: ref, in_$p247: ref, in_vslice_dummy_var_52: i32, in_vslice_dummy_var_54: i32) returns (out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$p24: ref, out_$p25: ref, out_$i26: i64, out_$i27: i1, out_$p28: ref, out_$i29: i64, out_$i30: i1, out_$i31: i32, out_$p33: ref, out_$p34: ref, out_$i35: i64, out_$p37: ref, out_$p39: ref, out_$p40: ref, out_$i41: i64, out_$p43: ref, out_$p44: ref, out_$i45: i64, out_$i46: i1, out_$p47: ref, out_$i48: i64, out_$i49: i1, out_$i50: i32, out_$p52: ref, out_$p53: ref, out_$i54: i64, out_$p56: ref, out_$p59: ref, out_$p60: ref, out_$i61: i64, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$i67: i64, out_$p69: ref, out_$p70: ref, out_$p57: ref, out_$p71: ref, out_$p72: ref, out_$p73: ref, out_$i74: i8, out_$i75: i32, out_$i76: i32, out_$i77: i32, out_$p78: ref, out_$p79: ref, out_$p80: ref, out_$p81: ref, out_$i82: i64, out_$p84: ref, out_$p85: ref, out_$p86: ref, out_$p87: ref, out_$p88: ref, out_$p90: ref, out_$p91: ref, out_$p92: ref, out_$p95: ref, out_$p98: ref, out_$i99: i32, out_$i100: i1, out_$i19: i32, out_$p160: ref, out_$p163: ref, out_$p166: ref, out_$p169: ref, out_$p172: ref, out_$p175: ref, out_$p178: ref, out_$p181: ref, out_$p184: ref, out_$p187: ref, out_$p190: ref, out_$p193: ref, out_$p196: ref, out_$p199: ref, out_$p202: ref, out_$p205: ref, out_$p208: ref, out_$p211: ref, out_$p214: ref, out_$p217: ref, out_$p220: ref, out_$p223: ref, out_$p226: ref, out_$p229: ref, out_$p232: ref, out_$p235: ref, out_$p238: ref, out_$p241: ref, out_$p244: ref, out_$p247: ref, out_vslice_dummy_var_52: i32, out_vslice_dummy_var_54: i32);
  modifies $M.0, $M.4, $CurrAddr;



implementation stk_prepare_sio_buffers_loop_$bb11(in_$p0: ref, in_$i1: i32, in_$i19: i32, in_$i20: i1, in_$i25: i32, in_$p26: ref, in_$i27: i32, in_$i28: i1, in_$i18: i32) returns (out_$i19: i32, out_$i20: i1, out_$i25: i32, out_$p26: ref, out_$i27: i32, out_$i28: i1, out_$i18: i32)
{

  entry:
    out_$i19, out_$i20, out_$i25, out_$p26, out_$i27, out_$i28, out_$i18 := in_$i19, in_$i20, in_$i25, in_$p26, in_$i27, in_$i28, in_$i18;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_1784;

  $bb16:
    assume out_$i28 == 1;
    assume {:verifier.code 0} true;
    out_$i18 := out_$i27;
    goto $bb16_dummy;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    out_$i28 := $ult.i32(out_$i27, in_$i1);
    goto corral_source_split_1799;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    out_$i27 := $add.i32(out_$i18, 1);
    call {:si_unique_call 358} {:cexpr "i"} boogie_si_record_i32(out_$i27);
    goto corral_source_split_1798;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p26, out_$i25);
    goto corral_source_split_1797;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2880)), $mul.ref(2824, 1));
    goto corral_source_split_1796;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i25 := $add.i32(out_$i18, 1);
    goto corral_source_split_1795;

  $bb14:
    assume !(out_$i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    out_$i20 := $ne.i32(out_$i19, 0);
    goto corral_source_split_1787;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 356} out_$i19 := stk_setup_siobuf(in_$p0, out_$i18);
    call {:si_unique_call 357} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i19);
    goto corral_source_split_1786;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb16_dummy:
    call {:si_unique_call 1} out_$i19, out_$i20, out_$i25, out_$p26, out_$i27, out_$i28, out_$i18 := stk_prepare_sio_buffers_loop_$bb11(in_$p0, in_$i1, out_$i19, out_$i20, out_$i25, out_$p26, out_$i27, out_$i28, out_$i18);
    return;

  exit:
    return;
}



procedure stk_prepare_sio_buffers_loop_$bb11(in_$p0: ref, in_$i1: i32, in_$i19: i32, in_$i20: i1, in_$i25: i32, in_$p26: ref, in_$i27: i32, in_$i28: i1, in_$i18: i32) returns (out_$i19: i32, out_$i20: i1, out_$i25: i32, out_$p26: ref, out_$i27: i32, out_$i28: i1, out_$i18: i32);
  modifies $M.0;



implementation stk_isoc_handler_loop_$bb32(in_$p0: ref, in_$p3: ref, in_$p49: ref, in_$i57: i64, in_$p60: ref, in_$i61: i32, in_$i62: i1, in_$i63: i64, in_$p66: ref, in_$i67: i32, in_$i68: i1, in_$i69: i64, in_$p72: ref, in_$i73: i32, in_$i78: i64, in_$p81: ref, in_$i82: i32, in_$p83: ref, in_$p84: ref, in_$i85: i64, in_$p88: ref, in_$i89: i32, in_$i90: i64, in_$p91: ref, in_$i92: i1, in_$i93: i8, in_$i94: i32, in_$i95: i1, in_$i96: i32, in_$i97: i64, in_$p98: ref, in_$p100: ref, in_$i101: i32, in_$i102: i1, in_$p104: ref, in_$i105: i32, in_$p106: ref, in_$i107: i32, in_$i108: i1, in_$i109: i32, in_$i110: i1, in_$p112: ref, in_$i113: i32, in_$i114: i32, in_$i115: i1, in_$p117: ref, in_$p118: ref, in_$p119: ref, in_$p123: ref, in_$i124: i32, in_$p125: ref, in_$i126: i32, in_$i127: i1, in_$p128: ref, in_$i129: i32, in_$i130: i1, in_$p132: ref, in_$p133: ref, in_$p134: ref, in_$p138: ref, in_$p139: ref, in_$p140: ref, in_$p141: ref, in_$p143: ref, in_$p144: ref, in_$p145: ref, in_$p146: ref, in_$p148: ref, in_$p149: ref, in_$p150: ref, in_$p135: ref, in_$p136: ref, in_$p151: ref, in_$p152: ref, in_$p120: ref, in_$p121: ref, in_$i157: i32, in_$i158: i64, in_$p159: ref, in_$p153: ref, in_$p154: ref, in_$p155: ref, in_$i156: i32, in_$p161: ref, in_$i162: i32, in_$i163: i32, in_$p164: ref, in_$i165: i32, in_$i166: i1, in_$i167: i32, in_$i168: i1, in_$i169: i32, in_$i170: i1, in_$p171: ref, in_$i172: i64, in_$p173: ref, in_$p174: ref, in_$i175: i64, in_$i176: i64, in_$p177: ref, in_$p179: ref, in_$i180: i32, in_$i181: i32, in_$p183: ref, in_$p75: ref, in_$p76: ref, in_$i77: i64, in_$i184: i32, in_$i185: i32, in_$i186: i1, in_$i53: i32, in_$i54: i64, in_$p55: ref, in_$p56: ref, in_$i187: i64, in_cmdloc_dummy_var_0: [ref]i8, in_cmdloc_dummy_var_1: [ref]i8, in_cmdloc_dummy_var_2: [ref]i8, in_vslice_dummy_var_59: i32) returns (out_$i57: i64, out_$p60: ref, out_$i61: i32, out_$i62: i1, out_$i63: i64, out_$p66: ref, out_$i67: i32, out_$i68: i1, out_$i69: i64, out_$p72: ref, out_$i73: i32, out_$i78: i64, out_$p81: ref, out_$i82: i32, out_$p83: ref, out_$p84: ref, out_$i85: i64, out_$p88: ref, out_$i89: i32, out_$i90: i64, out_$p91: ref, out_$i92: i1, out_$i93: i8, out_$i94: i32, out_$i95: i1, out_$i96: i32, out_$i97: i64, out_$p98: ref, out_$p100: ref, out_$i101: i32, out_$i102: i1, out_$p104: ref, out_$i105: i32, out_$p106: ref, out_$i107: i32, out_$i108: i1, out_$i109: i32, out_$i110: i1, out_$p112: ref, out_$i113: i32, out_$i114: i32, out_$i115: i1, out_$p117: ref, out_$p118: ref, out_$p119: ref, out_$p123: ref, out_$i124: i32, out_$p125: ref, out_$i126: i32, out_$i127: i1, out_$p128: ref, out_$i129: i32, out_$i130: i1, out_$p132: ref, out_$p133: ref, out_$p134: ref, out_$p138: ref, out_$p139: ref, out_$p140: ref, out_$p141: ref, out_$p143: ref, out_$p144: ref, out_$p145: ref, out_$p146: ref, out_$p148: ref, out_$p149: ref, out_$p150: ref, out_$p135: ref, out_$p136: ref, out_$p151: ref, out_$p152: ref, out_$p120: ref, out_$p121: ref, out_$i157: i32, out_$i158: i64, out_$p159: ref, out_$p153: ref, out_$p154: ref, out_$p155: ref, out_$i156: i32, out_$p161: ref, out_$i162: i32, out_$i163: i32, out_$p164: ref, out_$i165: i32, out_$i166: i1, out_$i167: i32, out_$i168: i1, out_$i169: i32, out_$i170: i1, out_$p171: ref, out_$i172: i64, out_$p173: ref, out_$p174: ref, out_$i175: i64, out_$i176: i64, out_$p177: ref, out_$p179: ref, out_$i180: i32, out_$i181: i32, out_$p183: ref, out_$p75: ref, out_$p76: ref, out_$i77: i64, out_$i184: i32, out_$i185: i32, out_$i186: i1, out_$i53: i32, out_$i54: i64, out_$p55: ref, out_$p56: ref, out_$i187: i64, out_cmdloc_dummy_var_0: [ref]i8, out_cmdloc_dummy_var_1: [ref]i8, out_cmdloc_dummy_var_2: [ref]i8, out_vslice_dummy_var_59: i32)
{

  entry:
    out_$i57, out_$p60, out_$i61, out_$i62, out_$i63, out_$p66, out_$i67, out_$i68, out_$i69, out_$p72, out_$i73, out_$i78, out_$p81, out_$i82, out_$p83, out_$p84, out_$i85, out_$p88, out_$i89, out_$i90, out_$p91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$p98, out_$p100, out_$i101, out_$i102, out_$p104, out_$i105, out_$p106, out_$i107, out_$i108, out_$i109, out_$i110, out_$p112, out_$i113, out_$i114, out_$i115, out_$p117, out_$p118, out_$p119, out_$p123, out_$i124, out_$p125, out_$i126, out_$i127, out_$p128, out_$i129, out_$i130, out_$p132, out_$p133, out_$p134, out_$p138, out_$p139, out_$p140, out_$p141, out_$p143, out_$p144, out_$p145, out_$p146, out_$p148, out_$p149, out_$p150, out_$p135, out_$p136, out_$p151, out_$p152, out_$p120, out_$p121, out_$i157, out_$i158, out_$p159, out_$p153, out_$p154, out_$p155, out_$i156, out_$p161, out_$i162, out_$i163, out_$p164, out_$i165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$p171, out_$i172, out_$p173, out_$p174, out_$i175, out_$i176, out_$p177, out_$p179, out_$i180, out_$i181, out_$p183, out_$p75, out_$p76, out_$i77, out_$i184, out_$i185, out_$i186, out_$i53, out_$i54, out_$p55, out_$p56, out_$i187, out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_cmdloc_dummy_var_2, out_vslice_dummy_var_59 := in_$i57, in_$p60, in_$i61, in_$i62, in_$i63, in_$p66, in_$i67, in_$i68, in_$i69, in_$p72, in_$i73, in_$i78, in_$p81, in_$i82, in_$p83, in_$p84, in_$i85, in_$p88, in_$i89, in_$i90, in_$p91, in_$i92, in_$i93, in_$i94, in_$i95, in_$i96, in_$i97, in_$p98, in_$p100, in_$i101, in_$i102, in_$p104, in_$i105, in_$p106, in_$i107, in_$i108, in_$i109, in_$i110, in_$p112, in_$i113, in_$i114, in_$i115, in_$p117, in_$p118, in_$p119, in_$p123, in_$i124, in_$p125, in_$i126, in_$i127, in_$p128, in_$i129, in_$i130, in_$p132, in_$p133, in_$p134, in_$p138, in_$p139, in_$p140, in_$p141, in_$p143, in_$p144, in_$p145, in_$p146, in_$p148, in_$p149, in_$p150, in_$p135, in_$p136, in_$p151, in_$p152, in_$p120, in_$p121, in_$i157, in_$i158, in_$p159, in_$p153, in_$p154, in_$p155, in_$i156, in_$p161, in_$i162, in_$i163, in_$p164, in_$i165, in_$i166, in_$i167, in_$i168, in_$i169, in_$i170, in_$p171, in_$i172, in_$p173, in_$p174, in_$i175, in_$i176, in_$p177, in_$p179, in_$i180, in_$i181, in_$p183, in_$p75, in_$p76, in_$i77, in_$i184, in_$i185, in_$i186, in_$i53, in_$i54, in_$p55, in_$p56, in_$i187, in_cmdloc_dummy_var_0, in_cmdloc_dummy_var_1, in_cmdloc_dummy_var_2, in_vslice_dummy_var_59;
    goto $bb32, exit;

  $bb32:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1954;

  $bb74:
    assume out_$i186 == 1;
    assume {:verifier.code 0} true;
    out_$i53, out_$i54, out_$p55, out_$p56 := out_$i184, out_$i77, out_$p76, out_$p75;
    goto $bb74_dummy;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    out_$i187 := out_$i77;
    assume true;
    goto $bb74;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    out_$i186 := $sgt.i32(out_$i185, out_$i184);
    goto corral_source_split_1976;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    out_$i185 := $load.i32($M.0, in_$p49);
    goto corral_source_split_1975;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    out_$i184 := $add.i32(out_$i53, 1);
    call {:si_unique_call 393} {:cexpr "i"} boogie_si_record_i32(out_$i184);
    goto corral_source_split_1974;

  $bb39:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1973;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    out_$p75, out_$p76, out_$i77 := out_$p153, out_$p177, out_$i175;
    goto $bb39;

  $bb72:
    assume {:verifier.code 0} true;
    out_$p75, out_$p76, out_$i77 := out_$p153, out_$p155, out_$i54;
    goto $bb39;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    out_$p75, out_$p76, out_$i77 := out_$p56, out_$p55, out_$i54;
    goto $bb39;

  $bb38:
    assume {:verifier.code 0} true;
    out_$p75, out_$p76, out_$i77 := out_$p56, out_$p55, out_$i54;
    goto $bb39;

  $bb37:
    assume !(out_$i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    goto $bb38;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} out_vslice_dummy_var_59 := printk.ref.i32.i32(.str.21, out_$i53, out_$i73);
    goto corral_source_split_1971;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    out_$i73 := $load.i32($M.0, out_$p72);
    goto corral_source_split_1970;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(out_$i69, 16)), $mul.ref(12, 1));
    goto corral_source_split_1969;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    out_$i69 := $sext.i32.i64(out_$i53);
    goto corral_source_split_1968;

  $bb36:
    assume out_$i68 == 1;
    goto corral_source_split_1967;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    out_$i68 := $ne.i32(out_$i67, $sub.i32(0, 18));
    goto corral_source_split_1965;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    out_$i67 := $load.i32($M.0, out_$p66);
    goto corral_source_split_1964;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(out_$i63, 16)), $mul.ref(12, 1));
    goto corral_source_split_1963;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    out_$i63 := $sext.i32.i64(out_$i53);
    goto corral_source_split_1962;

  $bb34:
    assume out_$i62 == 1;
    goto corral_source_split_1961;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    out_$i62 := $ne.i32(out_$i61, 0);
    goto corral_source_split_1959;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    out_$i61 := $load.i32($M.0, out_$p60);
    goto corral_source_split_1958;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(out_$i57, 16)), $mul.ref(12, 1));
    goto corral_source_split_1957;

  $bb33:
    assume {:verifier.code 0} true;
    out_$i57 := $sext.i32.i64(out_$i53);
    goto corral_source_split_1956;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb41:
    assume out_$i92 == 1;
    goto corral_source_split_1990;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    out_$i92 := $sle.i32(out_$i82, 4);
    goto corral_source_split_1988;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    out_$p91 := $add.ref(out_$p84, $mul.ref(out_$i90, 1));
    goto corral_source_split_1987;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    out_$i90 := $zext.i32.i64(out_$i89);
    goto corral_source_split_1986;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    out_$i89 := $load.i32($M.0, out_$p88);
    goto corral_source_split_1985;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    out_$p88 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(out_$i85, 16)), $mul.ref(0, 1));
    goto corral_source_split_1984;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    out_$i85 := $sext.i32.i64(out_$i53);
    goto corral_source_split_1983;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    out_$p84 := $load.ref($M.0, out_$p83);
    goto corral_source_split_1982;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    out_$p83 := $add.ref($add.ref(in_$p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_1981;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    out_$i82 := $load.i32($M.0, out_$p81);
    call {:si_unique_call 394} {:cexpr "framelen"} boogie_si_record_i32(out_$i82);
    goto corral_source_split_1980;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(out_$i78, 16)), $mul.ref(8, 1));
    goto corral_source_split_1979;

  $bb40:
    assume {:verifier.code 0} true;
    out_$i78 := $sext.i32.i64(out_$i53);
    goto corral_source_split_1978;

  $bb35:
    assume !(out_$i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb68:
    assume !(out_$i168 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb71:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb70:
    assume !(out_$i170 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb69:
    assume out_$i170 == 1;
    goto corral_source_split_2082;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    out_$i170 := $ne.i32(out_$i169, 0);
    goto corral_source_split_2080;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 407} out_$i169 := printk.ref(.str.23);
    call {:si_unique_call 408} {:cexpr "tmp___9"} boogie_si_record_i32(out_$i169);
    goto corral_source_split_2079;

  $bb67:
    assume out_$i168 == 1;
    goto corral_source_split_2078;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    out_$i168 := $ne.i32(out_$i167, 0);
    goto corral_source_split_2076;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 405} out_$i167 := __printk_ratelimit(.str.19);
    call {:si_unique_call 406} {:cexpr "tmp___8"} boogie_si_record_i32(out_$i167);
    goto corral_source_split_2075;

  $bb65:
    assume out_$i166 == 1;
    goto corral_source_split_2074;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    out_$i166 := $ugt.i32(out_$i163, out_$i165);
    goto corral_source_split_2072;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    out_$i165 := $load.i32($M.0, out_$p164);
    goto corral_source_split_2071;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    out_$p164 := $add.ref($add.ref(in_$p3, $mul.ref(0, 2880)), $mul.ref(2816, 1));
    goto corral_source_split_2070;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    out_$i163 := $add.i32(out_$i162, out_$i156);
    goto corral_source_split_2069;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    out_$i162 := $load.i32($M.0, out_$p161);
    goto corral_source_split_2068;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    out_$p161 := $add.ref($add.ref($add.ref(out_$p153, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_2067;

  $bb64:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2066;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    out_$p159 := $add.ref(out_$p84, $mul.ref(out_$i158, 1));
    assume {:verifier.code 0} true;
    out_$p153, out_$p154, out_$p155, out_$i156 := out_$p56, out_$p159, out_$p55, out_$i157;
    goto $bb64;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    out_$p153, out_$p154, out_$p155, out_$i156 := out_$p120, out_$p98, out_$p121, out_$i96;
    goto $bb64;

  $bb57:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2036;

  $bb63:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$p120, out_$p121 := out_$p151, out_$p152;
    goto $bb57;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    out_$p120, out_$p121 := out_$p56, out_$p119;
    goto $bb57;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    out_$p119 := $load.ref($M.0, out_$p118);
    goto corral_source_split_2034;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    out_$p118 := $add.ref($add.ref(out_$p56, $mul.ref(0, 128)), $mul.ref(88, 1));
    goto corral_source_split_2033;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p117, 0);
    goto corral_source_split_2032;

  $bb56:
    assume {:verifier.code 0} true;
    out_$p117 := $add.ref($add.ref($add.ref(out_$p56, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_2031;

  $bb52:
    assume !(out_$i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb54:
    assume !(out_$i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb53:
    assume out_$i115 == 1;
    goto corral_source_split_2029;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    out_$i115 := $ne.i32(out_$i114, 0);
    goto corral_source_split_2027;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} out_$i114 := printk.ref.i32.i32(.str.22, out_$i53, out_$i113);
    call {:si_unique_call 400} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i114);
    goto corral_source_split_2026;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    out_$i113 := $load.i32($M.0, out_$p112);
    goto corral_source_split_2025;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    out_$p112 := $add.ref($add.ref($add.ref(out_$p56, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_2024;

  $bb51:
    assume out_$i110 == 1;
    goto corral_source_split_2023;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    out_$i110 := $ne.i32(out_$i109, 0);
    goto corral_source_split_2021;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 397} out_$i109 := __printk_ratelimit(.str.19);
    call {:si_unique_call 398} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i109);
    goto corral_source_split_2020;

  $bb49:
    assume out_$i108 == 1;
    goto corral_source_split_2019;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    out_$i108 := $ne.i32(out_$i105, out_$i107);
    goto corral_source_split_2011;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    out_$i107 := $load.i32($M.0, out_$p106);
    goto corral_source_split_2010;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    out_$p106 := $add.ref($add.ref(in_$p3, $mul.ref(0, 2880)), $mul.ref(2816, 1));
    goto corral_source_split_2009;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    out_$i105 := $load.i32($M.0, out_$p104);
    goto corral_source_split_2008;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    out_$p104 := $add.ref($add.ref($add.ref(out_$p56, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_2007;

  $bb46:
    assume out_$i102 == 1;
    goto corral_source_split_2006;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    out_$i102 := $ne.i32(out_$i101, 0);
    goto corral_source_split_2001;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    out_$i101 := $load.i32($M.0, out_$p100);
    goto corral_source_split_2000;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    out_$p100 := $add.ref($add.ref($add.ref(out_$p56, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_1999;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    out_$p98 := $add.ref(out_$p84, $mul.ref(out_$i97, 1));
    goto corral_source_split_1998;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    out_$i96 := $add.i32(out_$i82, $sub.i32(0, 8));
    call {:si_unique_call 395} {:cexpr "framelen"} boogie_si_record_i32(out_$i96);
    out_$i97 := $add.i64(out_$i90, 8);
    goto corral_source_split_1997;

  $bb44:
    assume out_$i95 == 1;
    goto corral_source_split_1996;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    out_$i95 := $slt.i32(out_$i94, 0);
    goto corral_source_split_1994;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    out_$i94 := $sext.i8.i32(out_$i93);
    goto corral_source_split_1993;

  $bb43:
    assume {:verifier.code 0} true;
    out_$i93 := $load.i8($M.0, out_$p91);
    goto corral_source_split_1992;

  $bb42:
    assume !(out_$i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb59:
    assume !(out_$i127 == 1);
    assume {:verifier.code 0} true;
    out_$p151, out_$p152 := out_$p56, out_$p55;
    goto $bb63;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    out_$p151, out_$p152 := out_$p135, out_$p136;
    goto $bb63;

  $bb62:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2064;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    out_$p150 := $load.ref($M.0, out_$p149);
    assume {:verifier.code 0} true;
    out_$p135, out_$p136 := out_$p146, out_$p150;
    goto $bb62;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    out_$p135, out_$p136 := out_$p56, out_$p134;
    goto $bb62;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    out_$p134 := $load.ref($M.0, out_$p133);
    goto corral_source_split_2047;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    out_$p133 := $add.ref($add.ref(out_$p56, $mul.ref(0, 128)), $mul.ref(88, 1));
    goto corral_source_split_2046;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p132, 0);
    goto corral_source_split_2045;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    out_$p132 := $add.ref($add.ref($add.ref(out_$p56, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_2044;

  $bb60:
    assume out_$i130 == 1;
    goto corral_source_split_2043;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    out_$i130 := $ne.i32(out_$i129, 0);
    goto corral_source_split_2041;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 401} out_$i129 := list_is_singular(out_$p128);
    call {:si_unique_call 402} {:cexpr "tmp___7"} boogie_si_record_i32(out_$i129);
    goto corral_source_split_2040;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    out_$p128 := $add.ref($add.ref(in_$p3, $mul.ref(0, 2880)), $mul.ref(2840, 1));
    goto corral_source_split_2039;

  $bb58:
    assume out_$i127 == 1;
    goto corral_source_split_2038;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    out_$i127 := $eq.i32(out_$i124, out_$i126);
    goto corral_source_split_2017;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    out_$i126 := $load.i32($M.0, out_$p125);
    goto corral_source_split_2016;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    out_$p125 := $add.ref($add.ref(in_$p3, $mul.ref(0, 2880)), $mul.ref(2816, 1));
    goto corral_source_split_2015;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    out_$i124 := $load.i32($M.0, out_$p123);
    goto corral_source_split_2014;

  $bb48:
    assume {:verifier.code 0} true;
    out_$p123 := $add.ref($add.ref($add.ref(out_$p56, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_2013;

  $bb47:
    assume {:verifier.code 0} true;
    assume !(out_$i102 == 1);
    goto $bb48;

  $bb50:
    assume {:verifier.code 0} true;
    assume !(out_$i108 == 1);
    goto $bb48;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    out_$p149 := $add.ref($add.ref(out_$p145, $mul.ref($sub.ref(0, 112), 128)), $mul.ref(88, 1));
    goto corral_source_split_2062;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p148, 0);
    goto corral_source_split_2061;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    out_$p148 := $add.ref($add.ref($add.ref(out_$p145, $mul.ref($sub.ref(0, 112), 128)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_2060;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    out_$p146 := $add.ref(out_$p145, $mul.ref($sub.ref(0, 112), 128));
    goto corral_source_split_2059;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    out_$p145 := $bitcast.ref.ref(out_$p144);
    goto corral_source_split_2058;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    out_$p144 := $load.ref($M.0, out_$p143);
    goto corral_source_split_2057;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    out_$p143 := $add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 2880)), $mul.ref(2840, 1)), $mul.ref(0, 1));
    goto corral_source_split_2056;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 404} __wake_up(out_$p141, 3, 1, $0.ref);
    goto corral_source_split_2055;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    out_$p141 := $add.ref($add.ref(in_$p3, $mul.ref(0, 2880)), $mul.ref(2720, 1));
    goto corral_source_split_2054;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} list_move_tail(out_$p139, out_$p140);
    goto corral_source_split_2053;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    out_$p140 := $add.ref($add.ref(in_$p3, $mul.ref(0, 2880)), $mul.ref(2856, 1));
    goto corral_source_split_2052;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    out_$p139 := $load.ref($M.0, out_$p138);
    goto corral_source_split_2051;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    out_$p138 := $add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 2880)), $mul.ref(2840, 1)), $mul.ref(0, 1));
    goto corral_source_split_2050;

  $bb61:
    assume !(out_$i130 == 1);
    goto corral_source_split_2049;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    out_$i157 := $add.i32(out_$i82, $sub.i32(0, 4));
    call {:si_unique_call 396} {:cexpr "framelen"} boogie_si_record_i32(out_$i157);
    out_$i158 := $add.i64(out_$i90, 4);
    goto corral_source_split_2004;

  $bb45:
    assume !(out_$i95 == 1);
    goto corral_source_split_2003;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p183, out_$i181);
    goto corral_source_split_2097;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    out_$p183 := $add.ref($add.ref($add.ref(out_$p153, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_2096;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    out_$i181 := $add.i32(out_$i180, out_$i156);
    goto corral_source_split_2095;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    out_$i180 := $load.i32($M.0, out_$p179);
    goto corral_source_split_2094;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    out_$p179 := $add.ref($add.ref($add.ref(out_$p153, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_2093;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    out_$p177 := $add.ref(out_$p155, $mul.ref(out_$i176, 1));
    goto corral_source_split_2092;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    out_$i176 := $sext.i32.i64(out_$i156);
    goto corral_source_split_2091;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} out_$i175 := _raw_spin_lock_irqsave(out_$p174);
    call {:si_unique_call 414} {:cexpr "flags"} boogie_si_record_i64(out_$i175);
    goto corral_source_split_2090;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} out_$p174 := spinlock_check(out_$p173);
    goto corral_source_split_2089;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    out_$p173 := $add.ref($add.ref(in_$p3, $mul.ref(0, 2880)), $mul.ref(2648, 1));
    goto corral_source_split_2088;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_0 := $M.0;
    out_cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 411} out_cmdloc_dummy_var_2 := $memcpy.i8(out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_$p155, out_$p154, out_$i172, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_2;
    goto corral_source_split_2087;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    out_$i172 := $sext.i32.i64(out_$i156);
    call {:si_unique_call 410} {:cexpr "__len"} boogie_si_record_i64(out_$i172);
    goto corral_source_split_2086;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 409} spin_unlock_irqrestore(out_$p171, out_$i54);
    goto corral_source_split_2085;

  $bb73:
    assume {:verifier.code 0} true;
    out_$p171 := $add.ref($add.ref(in_$p3, $mul.ref(0, 2880)), $mul.ref(2648, 1));
    goto corral_source_split_2084;

  $bb66:
    assume !(out_$i166 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb74_dummy:
    call {:si_unique_call 1} out_$i57, out_$p60, out_$i61, out_$i62, out_$i63, out_$p66, out_$i67, out_$i68, out_$i69, out_$p72, out_$i73, out_$i78, out_$p81, out_$i82, out_$p83, out_$p84, out_$i85, out_$p88, out_$i89, out_$i90, out_$p91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$p98, out_$p100, out_$i101, out_$i102, out_$p104, out_$i105, out_$p106, out_$i107, out_$i108, out_$i109, out_$i110, out_$p112, out_$i113, out_$i114, out_$i115, out_$p117, out_$p118, out_$p119, out_$p123, out_$i124, out_$p125, out_$i126, out_$i127, out_$p128, out_$i129, out_$i130, out_$p132, out_$p133, out_$p134, out_$p138, out_$p139, out_$p140, out_$p141, out_$p143, out_$p144, out_$p145, out_$p146, out_$p148, out_$p149, out_$p150, out_$p135, out_$p136, out_$p151, out_$p152, out_$p120, out_$p121, out_$i157, out_$i158, out_$p159, out_$p153, out_$p154, out_$p155, out_$i156, out_$p161, out_$i162, out_$i163, out_$p164, out_$i165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$p171, out_$i172, out_$p173, out_$p174, out_$i175, out_$i176, out_$p177, out_$p179, out_$i180, out_$i181, out_$p183, out_$p75, out_$p76, out_$i77, out_$i184, out_$i185, out_$i186, out_$i53, out_$i54, out_$p55, out_$p56, out_$i187, out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_cmdloc_dummy_var_2, out_vslice_dummy_var_59 := stk_isoc_handler_loop_$bb32(in_$p0, in_$p3, in_$p49, out_$i57, out_$p60, out_$i61, out_$i62, out_$i63, out_$p66, out_$i67, out_$i68, out_$i69, out_$p72, out_$i73, out_$i78, out_$p81, out_$i82, out_$p83, out_$p84, out_$i85, out_$p88, out_$i89, out_$i90, out_$p91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$p98, out_$p100, out_$i101, out_$i102, out_$p104, out_$i105, out_$p106, out_$i107, out_$i108, out_$i109, out_$i110, out_$p112, out_$i113, out_$i114, out_$i115, out_$p117, out_$p118, out_$p119, out_$p123, out_$i124, out_$p125, out_$i126, out_$i127, out_$p128, out_$i129, out_$i130, out_$p132, out_$p133, out_$p134, out_$p138, out_$p139, out_$p140, out_$p141, out_$p143, out_$p144, out_$p145, out_$p146, out_$p148, out_$p149, out_$p150, out_$p135, out_$p136, out_$p151, out_$p152, out_$p120, out_$p121, out_$i157, out_$i158, out_$p159, out_$p153, out_$p154, out_$p155, out_$i156, out_$p161, out_$i162, out_$i163, out_$p164, out_$i165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$p171, out_$i172, out_$p173, out_$p174, out_$i175, out_$i176, out_$p177, out_$p179, out_$i180, out_$i181, out_$p183, out_$p75, out_$p76, out_$i77, out_$i184, out_$i185, out_$i186, out_$i53, out_$i54, out_$p55, out_$p56, out_$i187, out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_cmdloc_dummy_var_2, out_vslice_dummy_var_59);
    return;

  exit:
    return;
}



procedure stk_isoc_handler_loop_$bb32(in_$p0: ref, in_$p3: ref, in_$p49: ref, in_$i57: i64, in_$p60: ref, in_$i61: i32, in_$i62: i1, in_$i63: i64, in_$p66: ref, in_$i67: i32, in_$i68: i1, in_$i69: i64, in_$p72: ref, in_$i73: i32, in_$i78: i64, in_$p81: ref, in_$i82: i32, in_$p83: ref, in_$p84: ref, in_$i85: i64, in_$p88: ref, in_$i89: i32, in_$i90: i64, in_$p91: ref, in_$i92: i1, in_$i93: i8, in_$i94: i32, in_$i95: i1, in_$i96: i32, in_$i97: i64, in_$p98: ref, in_$p100: ref, in_$i101: i32, in_$i102: i1, in_$p104: ref, in_$i105: i32, in_$p106: ref, in_$i107: i32, in_$i108: i1, in_$i109: i32, in_$i110: i1, in_$p112: ref, in_$i113: i32, in_$i114: i32, in_$i115: i1, in_$p117: ref, in_$p118: ref, in_$p119: ref, in_$p123: ref, in_$i124: i32, in_$p125: ref, in_$i126: i32, in_$i127: i1, in_$p128: ref, in_$i129: i32, in_$i130: i1, in_$p132: ref, in_$p133: ref, in_$p134: ref, in_$p138: ref, in_$p139: ref, in_$p140: ref, in_$p141: ref, in_$p143: ref, in_$p144: ref, in_$p145: ref, in_$p146: ref, in_$p148: ref, in_$p149: ref, in_$p150: ref, in_$p135: ref, in_$p136: ref, in_$p151: ref, in_$p152: ref, in_$p120: ref, in_$p121: ref, in_$i157: i32, in_$i158: i64, in_$p159: ref, in_$p153: ref, in_$p154: ref, in_$p155: ref, in_$i156: i32, in_$p161: ref, in_$i162: i32, in_$i163: i32, in_$p164: ref, in_$i165: i32, in_$i166: i1, in_$i167: i32, in_$i168: i1, in_$i169: i32, in_$i170: i1, in_$p171: ref, in_$i172: i64, in_$p173: ref, in_$p174: ref, in_$i175: i64, in_$i176: i64, in_$p177: ref, in_$p179: ref, in_$i180: i32, in_$i181: i32, in_$p183: ref, in_$p75: ref, in_$p76: ref, in_$i77: i64, in_$i184: i32, in_$i185: i32, in_$i186: i1, in_$i53: i32, in_$i54: i64, in_$p55: ref, in_$p56: ref, in_$i187: i64, in_cmdloc_dummy_var_0: [ref]i8, in_cmdloc_dummy_var_1: [ref]i8, in_cmdloc_dummy_var_2: [ref]i8, in_vslice_dummy_var_59: i32) returns (out_$i57: i64, out_$p60: ref, out_$i61: i32, out_$i62: i1, out_$i63: i64, out_$p66: ref, out_$i67: i32, out_$i68: i1, out_$i69: i64, out_$p72: ref, out_$i73: i32, out_$i78: i64, out_$p81: ref, out_$i82: i32, out_$p83: ref, out_$p84: ref, out_$i85: i64, out_$p88: ref, out_$i89: i32, out_$i90: i64, out_$p91: ref, out_$i92: i1, out_$i93: i8, out_$i94: i32, out_$i95: i1, out_$i96: i32, out_$i97: i64, out_$p98: ref, out_$p100: ref, out_$i101: i32, out_$i102: i1, out_$p104: ref, out_$i105: i32, out_$p106: ref, out_$i107: i32, out_$i108: i1, out_$i109: i32, out_$i110: i1, out_$p112: ref, out_$i113: i32, out_$i114: i32, out_$i115: i1, out_$p117: ref, out_$p118: ref, out_$p119: ref, out_$p123: ref, out_$i124: i32, out_$p125: ref, out_$i126: i32, out_$i127: i1, out_$p128: ref, out_$i129: i32, out_$i130: i1, out_$p132: ref, out_$p133: ref, out_$p134: ref, out_$p138: ref, out_$p139: ref, out_$p140: ref, out_$p141: ref, out_$p143: ref, out_$p144: ref, out_$p145: ref, out_$p146: ref, out_$p148: ref, out_$p149: ref, out_$p150: ref, out_$p135: ref, out_$p136: ref, out_$p151: ref, out_$p152: ref, out_$p120: ref, out_$p121: ref, out_$i157: i32, out_$i158: i64, out_$p159: ref, out_$p153: ref, out_$p154: ref, out_$p155: ref, out_$i156: i32, out_$p161: ref, out_$i162: i32, out_$i163: i32, out_$p164: ref, out_$i165: i32, out_$i166: i1, out_$i167: i32, out_$i168: i1, out_$i169: i32, out_$i170: i1, out_$p171: ref, out_$i172: i64, out_$p173: ref, out_$p174: ref, out_$i175: i64, out_$i176: i64, out_$p177: ref, out_$p179: ref, out_$i180: i32, out_$i181: i32, out_$p183: ref, out_$p75: ref, out_$p76: ref, out_$i77: i64, out_$i184: i32, out_$i185: i32, out_$i186: i1, out_$i53: i32, out_$i54: i64, out_$p55: ref, out_$p56: ref, out_$i187: i64, out_cmdloc_dummy_var_0: [ref]i8, out_cmdloc_dummy_var_1: [ref]i8, out_cmdloc_dummy_var_2: [ref]i8, out_vslice_dummy_var_59: i32);
  modifies $M.0;



implementation stk_sensor_write_regvals_loop_$bb5(in_$p0: ref, in_$p6: ref, in_$i7: i32, in_$i8: i8, in_$i9: i32, in_$i10: i8, in_$p11: ref, in_$i12: i32, in_$i13: i8, in_$i14: i32, in_$i15: i8, in_$i16: i32, in_$i17: i1, in_$i18: i32, in_$p19: ref, in_$p5: ref, in_$p20: ref, in_$i21: i32, in_$i22: i1, in_$p23: ref, in_$i24: i32, in_$i25: i1) returns (out_$p6: ref, out_$i7: i32, out_$i8: i8, out_$i9: i32, out_$i10: i8, out_$p11: ref, out_$i12: i32, out_$i13: i8, out_$i14: i32, out_$i15: i8, out_$i16: i32, out_$i17: i1, out_$i18: i32, out_$p19: ref, out_$p5: ref, out_$p20: ref, out_$i21: i32, out_$i22: i1, out_$p23: ref, out_$i24: i32, out_$i25: i1)
{

  entry:
    out_$p6, out_$i7, out_$i8, out_$i9, out_$i10, out_$p11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$p19, out_$p5, out_$p20, out_$i21, out_$i22, out_$p23, out_$i24, out_$i25 := in_$p6, in_$i7, in_$i8, in_$i9, in_$i10, in_$p11, in_$i12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$p19, in_$p5, in_$p20, in_$i21, in_$i22, in_$p23, in_$i24, in_$i25;
    goto $bb5, exit;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_2246;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    out_$p5 := out_$p19;
    goto corral_source_split_2266_dummy;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref(out_$p5, $mul.ref(1, 8));
    goto corral_source_split_2266;

  $bb8:
    assume !(out_$i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    out_$i18 := out_$i16;
    assume true;
    goto $bb8;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    out_$i17 := $ne.i32(out_$i16, 0);
    goto corral_source_split_2262;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} out_$i16 := stk_sensor_outb(in_$p0, out_$i10, out_$i15);
    call {:si_unique_call 466} {:cexpr "ret"} boogie_si_record_i32(out_$i16);
    goto corral_source_split_2261;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    out_$i15 := $trunc.i32.i8(out_$i14);
    goto corral_source_split_2260;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    out_$i14 := $zext.i8.i32(out_$i13);
    goto corral_source_split_2259;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    out_$i13 := $trunc.i32.i8(out_$i12);
    goto corral_source_split_2258;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    out_$i12 := $load.i32($M.19, out_$p11);
    goto corral_source_split_2257;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(out_$p5, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2256;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    out_$i10 := $trunc.i32.i8(out_$i9);
    goto corral_source_split_2255;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    out_$i9 := $zext.i8.i32(out_$i8);
    goto corral_source_split_2254;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    out_$i8 := $trunc.i32.i8(out_$i7);
    goto corral_source_split_2253;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    out_$i7 := $load.i32($M.18, out_$p6);
    goto corral_source_split_2252;

  $bb6:
    assume {:verifier.code 0} true;
    out_$p6 := $add.ref($add.ref(out_$p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2251;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb13:
    assume {:verifier.code 0} true;
    assume out_$i25 == 1;
    goto $bb11;

  $bb10:
    assume {:verifier.code 0} true;
    assume out_$i22 == 1;
    goto $bb11;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb12;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    out_$i22 := $ne.i32(out_$i21, 255);
    goto corral_source_split_2249;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    out_$i21 := $load.i32($M.18, out_$p20);
    goto corral_source_split_2248;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(out_$p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2247;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    out_$i25 := $ne.i32(out_$i24, 255);
    goto corral_source_split_2271;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i32($M.19, out_$p23);
    goto corral_source_split_2270;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(out_$p5, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2269;

  $bb12:
    assume !(out_$i22 == 1);
    goto corral_source_split_2268;

  corral_source_split_2266_dummy:
    call {:si_unique_call 1} out_$p6, out_$i7, out_$i8, out_$i9, out_$i10, out_$p11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$p19, out_$p5, out_$p20, out_$i21, out_$i22, out_$p23, out_$i24, out_$i25 := stk_sensor_write_regvals_loop_$bb5(in_$p0, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10, out_$p11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$p19, out_$p5, out_$p20, out_$i21, out_$i22, out_$p23, out_$i24, out_$i25);
    return;

  exit:
    return;
}



procedure stk_sensor_write_regvals_loop_$bb5(in_$p0: ref, in_$p6: ref, in_$i7: i32, in_$i8: i8, in_$i9: i32, in_$i10: i8, in_$p11: ref, in_$i12: i32, in_$i13: i8, in_$i14: i32, in_$i15: i8, in_$i16: i32, in_$i17: i1, in_$i18: i32, in_$p19: ref, in_$p5: ref, in_$p20: ref, in_$i21: i32, in_$i22: i1, in_$p23: ref, in_$i24: i32, in_$i25: i1) returns (out_$p6: ref, out_$i7: i32, out_$i8: i8, out_$i9: i32, out_$i10: i8, out_$p11: ref, out_$i12: i32, out_$i13: i8, out_$i14: i32, out_$i15: i8, out_$i16: i32, out_$i17: i1, out_$i18: i32, out_$p19: ref, out_$p5: ref, out_$p20: ref, out_$i21: i32, out_$i22: i1, out_$p23: ref, out_$i24: i32, out_$i25: i1);
  modifies $M.1, $CurrAddr;



implementation stk_vidioc_dqbuf_loop_$bb19(in_$p3: ref, in_$p5: ref, in_$p36: ref, in_$p37: ref, in_$p40: ref, in_$i41: i32, in_$i42: i32, in_$i43: i1, in_$p45: ref, in_$i46: i32, in_$i47: i1, in_$i48: i32, in_$i49: i1) returns (out_$p40: ref, out_$i41: i32, out_$i42: i32, out_$i43: i1, out_$p45: ref, out_$i46: i32, out_$i47: i1, out_$i48: i32, out_$i49: i1)
{

  entry:
    out_$p40, out_$i41, out_$i42, out_$i43, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49 := in_$p40, in_$i41, in_$i42, in_$i43, in_$p45, in_$i46, in_$i47, in_$i48, in_$i49;
    goto $bb19, exit;

  $bb19:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(in_$p5, $mul.ref(0, 2880)), $mul.ref(2644, 1));
    goto corral_source_split_2700;

  $bb29:
    assume {:verifier.code 0} true;
    assume !(out_$i49 == 1);
    goto $bb29_dummy;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    out_$i49 := $eq.i32(out_$i48, 0);
    goto corral_source_split_2722;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} out_$i48 := list_empty(in_$p37);
    call {:si_unique_call 518} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i48);
    goto corral_source_split_2721;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} prepare_to_wait(in_$p36, in_$p3, 1);
    goto corral_source_split_2720;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} schedule();
    goto corral_source_split_2718;

  $bb25:
    assume out_$i47 == 1;
    goto corral_source_split_2717;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    out_$i47 := $eq.i32(out_$i46, 0);
    goto corral_source_split_2715;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} out_$i46 := signal_pending(out_$p45);
    call {:si_unique_call 514} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i46);
    goto corral_source_split_2714;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} out_$p45 := get_current();
    goto corral_source_split_2713;

  $bb21:
    assume !(out_$i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    out_$i43 := $eq.i32(out_$i42, 0);
    goto corral_source_split_2703;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    out_$i42 := $and.i32(out_$i41, 1);
    goto corral_source_split_2702;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    out_$i41 := $load.i32($M.0, out_$p40);
    goto corral_source_split_2701;

  $bb29_dummy:
    call {:si_unique_call 1} out_$p40, out_$i41, out_$i42, out_$i43, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49 := stk_vidioc_dqbuf_loop_$bb19(in_$p3, in_$p5, in_$p36, in_$p37, out_$p40, out_$i41, out_$i42, out_$i43, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49);
    return;

  exit:
    return;
}



procedure stk_vidioc_dqbuf_loop_$bb19(in_$p3: ref, in_$p5: ref, in_$p36: ref, in_$p37: ref, in_$p40: ref, in_$i41: i32, in_$i42: i32, in_$i43: i1, in_$p45: ref, in_$i46: i32, in_$i47: i1, in_$i48: i32, in_$i49: i1) returns (out_$p40: ref, out_$i41: i32, out_$i42: i32, out_$i43: i1, out_$p45: ref, out_$i46: i32, out_$i47: i1, out_$i48: i32, out_$i49: i1);



implementation stk_vidioc_streamoff_loop_$bb4(in_$p4: ref, in_$p11: ref, in_$p15: ref, in_$p16: ref, in_$i17: i64, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$p25: ref, in_$i26: i32, in_$i27: i32, in_$i28: i1, in_$i14: i32) returns (out_$p15: ref, out_$p16: ref, out_$i17: i64, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$p25: ref, out_$i26: i32, out_$i27: i32, out_$i28: i1, out_$i14: i32)
{

  entry:
    out_$p15, out_$p16, out_$i17, out_$p19, out_$p20, out_$p21, out_$i22, out_$p25, out_$i26, out_$i27, out_$i28, out_$i14 := in_$p15, in_$p16, in_$i17, in_$p19, in_$p20, in_$p21, in_$i22, in_$p25, in_$i26, in_$i27, in_$i28, in_$i14;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2813;

  $bb6:
    assume out_$i28 == 1;
    assume {:verifier.code 0} true;
    out_$i14 := out_$i26;
    goto $bb6_dummy;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    out_$i28 := $ult.i32(out_$i26, out_$i27);
    goto corral_source_split_2829;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i32($M.0, in_$p11);
    goto corral_source_split_2828;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    out_$i26 := $add.i32(out_$i14, 1);
    call {:si_unique_call 539} {:cexpr "i"} boogie_si_record_i32(out_$i26);
    goto corral_source_split_2827;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p25, 0);
    goto corral_source_split_2826;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref($add.ref(out_$p21, $mul.ref(out_$i22, 128)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_2825;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    goto corral_source_split_2824;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    out_$i22 := $sext.i32.i64(out_$i14);
    goto corral_source_split_2823;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    out_$p21 := $load.ref($M.0, out_$p20);
    goto corral_source_split_2822;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(in_$p4, $mul.ref(0, 2880)), $mul.ref(2832, 1));
    goto corral_source_split_2821;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} INIT_LIST_HEAD(out_$p19);
    goto corral_source_split_2820;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(out_$p16, $mul.ref(out_$i17, 128)), $mul.ref(112, 1));
    goto corral_source_split_2819;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    goto corral_source_split_2818;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    out_$i17 := $sext.i32.i64(out_$i14);
    goto corral_source_split_2817;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    out_$p16 := $load.ref($M.0, out_$p15);
    goto corral_source_split_2816;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(in_$p4, $mul.ref(0, 2880)), $mul.ref(2832, 1));
    goto corral_source_split_2815;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p15, out_$p16, out_$i17, out_$p19, out_$p20, out_$p21, out_$i22, out_$p25, out_$i26, out_$i27, out_$i28, out_$i14 := stk_vidioc_streamoff_loop_$bb4(in_$p4, in_$p11, out_$p15, out_$p16, out_$i17, out_$p19, out_$p20, out_$p21, out_$i22, out_$p25, out_$i26, out_$i27, out_$i28, out_$i14);
    return;

  exit:
    return;
}



procedure stk_vidioc_streamoff_loop_$bb4(in_$p4: ref, in_$p11: ref, in_$p15: ref, in_$p16: ref, in_$i17: i64, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$p25: ref, in_$i26: i32, in_$i27: i32, in_$i28: i1, in_$i14: i32) returns (out_$p15: ref, out_$p16: ref, out_$i17: i64, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$p25: ref, out_$i26: i32, out_$i27: i32, out_$i28: i1, out_$i14: i32);
  modifies $M.0;



implementation stk_camera_probe_loop_$bb27(in_$p8: ref, in_$p71: ref, in_$p73: ref, in_$p78: ref, in_$p79: ref, in_$i80: i64, in_$p82: ref, in_$p83: ref, in_$i84: i8, in_$i85: i32, in_$i86: i1, in_$i87: i32, in_$i88: i1, in_$p89: ref, in_$i93: i32, in_$i94: i8, in_$i95: i32, in_$i96: i1, in_$i77: i32) returns (out_$p78: ref, out_$p79: ref, out_$i80: i64, out_$p82: ref, out_$p83: ref, out_$i84: i8, out_$i85: i32, out_$i86: i1, out_$i87: i32, out_$i88: i1, out_$p89: ref, out_$i93: i32, out_$i94: i8, out_$i95: i32, out_$i96: i1, out_$i77: i32)
{

  entry:
    out_$p78, out_$p79, out_$i80, out_$p82, out_$p83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$p89, out_$i93, out_$i94, out_$i95, out_$i96, out_$i77 := in_$p78, in_$p79, in_$i80, in_$p82, in_$p83, in_$i84, in_$i85, in_$i86, in_$i87, in_$i88, in_$p89, in_$i93, in_$i94, in_$i95, in_$i96, in_$i77;
    goto $bb27, exit;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_3489;

  $bb36:
    assume out_$i96 == 1;
    assume {:verifier.code 0} true;
    out_$i77 := out_$i93;
    goto $bb36_dummy;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    out_$i96 := $sgt.i32(out_$i95, out_$i93);
    goto corral_source_split_3519;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    out_$i95 := $zext.i8.i32(out_$i94);
    goto corral_source_split_3518;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    out_$i94 := $load.i8($M.0, in_$p73);
    goto corral_source_split_3517;

  $bb35:
    assume {:verifier.code 0} true;
    out_$i93 := $add.i32(out_$i77, 1);
    call {:si_unique_call 649} {:cexpr "i"} boogie_si_record_i32(out_$i93);
    goto corral_source_split_3516;

  $bb30:
    assume !(out_$i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb32:
    assume !(out_$i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    out_$p89 := out_$p82;
    assume true;
    goto $bb32;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    out_$i88 := $ne.i32(out_$i87, 0);
    goto corral_source_split_3503;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} out_$i87 := usb_endpoint_is_isoc_in(out_$p82);
    call {:si_unique_call 646} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i87);
    goto corral_source_split_3502;

  $bb29:
    assume out_$i86 == 1;
    goto corral_source_split_3501;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    out_$i86 := $eq.i32(out_$i85, 0);
    goto corral_source_split_3499;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    out_$i85 := $zext.i8.i32(out_$i84);
    goto corral_source_split_3498;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    out_$i84 := $load.i8($M.0, out_$p83);
    goto corral_source_split_3497;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    out_$p83 := $add.ref($add.ref(in_$p8, $mul.ref(0, 2880)), $mul.ref(2620, 1));
    goto corral_source_split_3496;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    out_$p82 := $add.ref($add.ref(out_$p79, $mul.ref(out_$i80, 64)), $mul.ref(0, 1));
    goto corral_source_split_3495;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    goto corral_source_split_3494;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    out_$i80 := $sext.i32.i64(out_$i77);
    goto corral_source_split_3493;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    out_$p79 := $load.ref($M.0, out_$p78);
    goto corral_source_split_3492;

  $bb28:
    assume {:verifier.code 0} true;
    out_$p78 := $add.ref($add.ref(in_$p71, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3491;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb36_dummy:
    call {:si_unique_call 1} out_$p78, out_$p79, out_$i80, out_$p82, out_$p83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$p89, out_$i93, out_$i94, out_$i95, out_$i96, out_$i77 := stk_camera_probe_loop_$bb27(in_$p8, in_$p71, in_$p73, out_$p78, out_$p79, out_$i80, out_$p82, out_$p83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$p89, out_$i93, out_$i94, out_$i95, out_$i96, out_$i77);
    return;

  exit:
    return;
}



procedure stk_camera_probe_loop_$bb27(in_$p8: ref, in_$p71: ref, in_$p73: ref, in_$p78: ref, in_$p79: ref, in_$i80: i64, in_$p82: ref, in_$p83: ref, in_$i84: i8, in_$i85: i32, in_$i86: i1, in_$i87: i32, in_$i88: i1, in_$p89: ref, in_$i93: i32, in_$i94: i8, in_$i95: i32, in_$i96: i1, in_$i77: i32) returns (out_$p78: ref, out_$p79: ref, out_$i80: i64, out_$p82: ref, out_$p83: ref, out_$i84: i8, out_$i85: i32, out_$i86: i1, out_$i87: i32, out_$i88: i1, out_$p89: ref, out_$i93: i32, out_$i94: i8, out_$i95: i32, out_$i96: i1, out_$i77: i32);



implementation main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i3: i32, in_$i4: i64, in_$p6: ref, in_$i7: i64, in_$p8: ref, in_$p10: ref, in_$p12: ref, in_$p14: ref, in_$p15: ref, in_$i16: i32, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p39: ref, in_$p41: ref, in_$p43: ref, in_$p45: ref, in_$p46: ref, in_$p48: ref, in_$p50: ref, in_$i54: i32, in_$i55: i1, in_$i56: i1, in_$i57: i1, in_$i58: i1, in_$i59: i1, in_$i60: i1, in_$i61: i1, in_$i62: i1, in_$i63: i32, in_$i64: i1, in_$i65: i32, in_$i66: i1, in_$i67: i1, in_$i68: i1, in_$i69: i32, in_$i70: i1, in_$p71: ref, in_$i72: i32, in_$i73: i1, in_$p74: ref, in_$i75: i32, in_$i76: i32, in_$i77: i32, in_$i78: i1, in_$i79: i32, in_$i80: i1, in_$i81: i1, in_$i82: i1, in_$i83: i1, in_$i84: i1, in_$i85: i1, in_$i86: i1, in_$i87: i32, in_$i88: i1, in_$p89: ref, in_$i91: i32, in_$i92: i1, in_$p93: ref, in_$i95: i32, in_$i96: i1, in_$p97: ref, in_$i99: i32, in_$i100: i32, in_$i101: i32, in_$i102: i1, in_$p103: ref, in_$i105: i32, in_$i106: i1, in_$p107: ref, in_$i109: i32, in_$i110: i1, in_$p111: ref, in_$i113: i32, in_$i114: i1, in_$p115: ref, in_$i116: i32, in_$i117: i32, in_$i118: i1, in_$i119: i32, in_$i120: i32, in_$i121: i32, in_$i122: i1, in_$p123: ref, in_$i125: i32, in_$i126: i1, in_$p127: ref, in_$i129: i32, in_$i130: i1, in_$i131: i32, in_$i132: i1, in_$i133: i1, in_$i134: i1, in_$i135: i1, in_$i136: i1, in_$i137: i1, in_$i138: i32, in_$i139: i1, in_$p140: ref, in_$i141: i32, in_$i142: i32, in_$i143: i1, in_$i144: i32, in_$i145: i32, in_$i146: i32, in_$i147: i1, in_$p148: ref, in_$p149: ref, in_$i150: i32, in_$i151: i32, in_$i152: i32, in_$i153: i1, in_$i154: i32, in_$i155: i1, in_$p156: ref, in_$i157: i32, in_$i158: i32, in_$i159: i1, in_$i160: i32, in_$i161: i1, in_$i162: i32, in_$i163: i1, in_$p164: ref, in_$i165: i32, in_$i166: i32, in_$i167: i32, in_$i168: i1, in_$i169: i32, in_$i170: i1, in_$p171: ref, in_$i172: i32, in_$i173: i32, in_$i174: i32, in_$i175: i1, in_$i176: i32, in_$i177: i32, in_$i178: i1, in_$i179: i32, in_$i180: i1, in_$i181: i32, in_$i182: i1, in_$i183: i1, in_$i184: i1, in_$i185: i32, in_$i186: i1, in_$i187: i32, in_$i188: i1, in_$i189: i32, in_$i190: i1, in_$i191: i32, in_$i192: i32, in_$i193: i1, in_$i194: i32, in_$i195: i1, in_$i196: i32, in_$i197: i1, in_$i198: i32, in_$i199: i1, in_$i200: i1, in_$i201: i1, in_$i202: i1, in_$i203: i1, in_$i204: i1, in_$i205: i1, in_$i206: i1, in_$i207: i1, in_$i208: i1, in_$i209: i1, in_$i210: i1, in_$i211: i1, in_$i212: i1, in_$i213: i1, in_$i214: i1, in_$i215: i1, in_$i216: i1, in_$i217: i1, in_$i218: i1, in_$i219: i32, in_$i220: i1, in_$p221: ref, in_$i223: i32, in_$i224: i1, in_$p225: ref, in_$p226: ref, in_$i228: i32, in_$i229: i1, in_$p230: ref, in_$p231: ref, in_$i233: i32, in_$i234: i1, in_$p235: ref, in_$i237: i32, in_$i238: i1, in_$p239: ref, in_$i240: i32, in_$i242: i32, in_$i243: i1, in_$p244: ref, in_$p245: ref, in_$i247: i32, in_$i248: i1, in_$p249: ref, in_$p250: ref, in_$i252: i32, in_$i253: i1, in_$p254: ref, in_$i256: i32, in_$i257: i1, in_$p258: ref, in_$p259: ref, in_$i261: i32, in_$i262: i1, in_$p263: ref, in_$p264: ref, in_$i266: i32, in_$i267: i1, in_$p268: ref, in_$i270: i32, in_$i271: i1, in_$p272: ref, in_$p273: ref, in_$i275: i32, in_$i276: i1, in_$p277: ref, in_$i279: i32, in_$i280: i1, in_$p281: ref, in_$i283: i32, in_$i284: i1, in_$p285: ref, in_$i287: i32, in_$i288: i1, in_$p289: ref, in_$i291: i32, in_$i292: i1, in_$p293: ref, in_$p294: ref, in_$i296: i32, in_$i297: i1, in_$p298: ref, in_$i300: i32, in_$i301: i1, in_$p302: ref, in_$i303: i32, in_$i305: i32, in_$i306: i1, in_$i307: i32, in_$i308: i1, in_$i309: i1, in_$i310: i1, in_$i311: i32, in_$i312: i1, in_$i313: i32, in_$i314: i32, in_$i315: i32, in_$i316: i1, in_$i318: i32, in_$i319: i32, in_$i320: i32, in_$i321: i1, in_$i322: i32, in_$i323: i1, in_$i324: i32, in_$i325: i1, in_vslice_dummy_var_113: i32, in_vslice_dummy_var_114: i32, in_vslice_dummy_var_115: i32, in_vslice_dummy_var_116: i64, in_vslice_dummy_var_117: i32, in_vslice_dummy_var_118: i32, in_vslice_dummy_var_119: i64, in_vslice_dummy_var_120: i64, in_vslice_dummy_var_121: i32, in_vslice_dummy_var_122: i32, in_vslice_dummy_var_123: i32, in_vslice_dummy_var_124: i32, in_vslice_dummy_var_125: i32, in_vslice_dummy_var_126: i32, in_vslice_dummy_var_127: i32, in_vslice_dummy_var_128: i32, in_vslice_dummy_var_129: i32, in_vslice_dummy_var_130: i32, in_vslice_dummy_var_131: i32, in_vslice_dummy_var_132: i32, in_vslice_dummy_var_133: i32, in_vslice_dummy_var_134: i32, in_vslice_dummy_var_135: i32, in_vslice_dummy_var_136: i32, in_vslice_dummy_var_137: i32, in_vslice_dummy_var_138: i32, in_vslice_dummy_var_139: i32, in_vslice_dummy_var_140: i32, in_vslice_dummy_var_141: i32) returns (out_$i54: i32, out_$i55: i1, out_$i56: i1, out_$i57: i1, out_$i58: i1, out_$i59: i1, out_$i60: i1, out_$i61: i1, out_$i62: i1, out_$i63: i32, out_$i64: i1, out_$i65: i32, out_$i66: i1, out_$i67: i1, out_$i68: i1, out_$i69: i32, out_$i70: i1, out_$p71: ref, out_$i72: i32, out_$i73: i1, out_$p74: ref, out_$i75: i32, out_$i76: i32, out_$i77: i32, out_$i78: i1, out_$i79: i32, out_$i80: i1, out_$i81: i1, out_$i82: i1, out_$i83: i1, out_$i84: i1, out_$i85: i1, out_$i86: i1, out_$i87: i32, out_$i88: i1, out_$p89: ref, out_$i91: i32, out_$i92: i1, out_$p93: ref, out_$i95: i32, out_$i96: i1, out_$p97: ref, out_$i99: i32, out_$i100: i32, out_$i101: i32, out_$i102: i1, out_$p103: ref, out_$i105: i32, out_$i106: i1, out_$p107: ref, out_$i109: i32, out_$i110: i1, out_$p111: ref, out_$i113: i32, out_$i114: i1, out_$p115: ref, out_$i116: i32, out_$i117: i32, out_$i118: i1, out_$i119: i32, out_$i120: i32, out_$i121: i32, out_$i122: i1, out_$p123: ref, out_$i125: i32, out_$i126: i1, out_$p127: ref, out_$i129: i32, out_$i130: i1, out_$i131: i32, out_$i132: i1, out_$i133: i1, out_$i134: i1, out_$i135: i1, out_$i136: i1, out_$i137: i1, out_$i138: i32, out_$i139: i1, out_$p140: ref, out_$i141: i32, out_$i142: i32, out_$i143: i1, out_$i144: i32, out_$i145: i32, out_$i146: i32, out_$i147: i1, out_$p148: ref, out_$p149: ref, out_$i150: i32, out_$i151: i32, out_$i152: i32, out_$i153: i1, out_$i154: i32, out_$i155: i1, out_$p156: ref, out_$i157: i32, out_$i158: i32, out_$i159: i1, out_$i160: i32, out_$i161: i1, out_$i162: i32, out_$i163: i1, out_$p164: ref, out_$i165: i32, out_$i166: i32, out_$i167: i32, out_$i168: i1, out_$i169: i32, out_$i170: i1, out_$p171: ref, out_$i172: i32, out_$i173: i32, out_$i174: i32, out_$i175: i1, out_$i176: i32, out_$i177: i32, out_$i178: i1, out_$i179: i32, out_$i180: i1, out_$i181: i32, out_$i182: i1, out_$i183: i1, out_$i184: i1, out_$i185: i32, out_$i186: i1, out_$i187: i32, out_$i188: i1, out_$i189: i32, out_$i190: i1, out_$i191: i32, out_$i192: i32, out_$i193: i1, out_$i194: i32, out_$i195: i1, out_$i196: i32, out_$i197: i1, out_$i198: i32, out_$i199: i1, out_$i200: i1, out_$i201: i1, out_$i202: i1, out_$i203: i1, out_$i204: i1, out_$i205: i1, out_$i206: i1, out_$i207: i1, out_$i208: i1, out_$i209: i1, out_$i210: i1, out_$i211: i1, out_$i212: i1, out_$i213: i1, out_$i214: i1, out_$i215: i1, out_$i216: i1, out_$i217: i1, out_$i218: i1, out_$i219: i32, out_$i220: i1, out_$p221: ref, out_$i223: i32, out_$i224: i1, out_$p225: ref, out_$p226: ref, out_$i228: i32, out_$i229: i1, out_$p230: ref, out_$p231: ref, out_$i233: i32, out_$i234: i1, out_$p235: ref, out_$i237: i32, out_$i238: i1, out_$p239: ref, out_$i240: i32, out_$i242: i32, out_$i243: i1, out_$p244: ref, out_$p245: ref, out_$i247: i32, out_$i248: i1, out_$p249: ref, out_$p250: ref, out_$i252: i32, out_$i253: i1, out_$p254: ref, out_$i256: i32, out_$i257: i1, out_$p258: ref, out_$p259: ref, out_$i261: i32, out_$i262: i1, out_$p263: ref, out_$p264: ref, out_$i266: i32, out_$i267: i1, out_$p268: ref, out_$i270: i32, out_$i271: i1, out_$p272: ref, out_$p273: ref, out_$i275: i32, out_$i276: i1, out_$p277: ref, out_$i279: i32, out_$i280: i1, out_$p281: ref, out_$i283: i32, out_$i284: i1, out_$p285: ref, out_$i287: i32, out_$i288: i1, out_$p289: ref, out_$i291: i32, out_$i292: i1, out_$p293: ref, out_$p294: ref, out_$i296: i32, out_$i297: i1, out_$p298: ref, out_$i300: i32, out_$i301: i1, out_$p302: ref, out_$i303: i32, out_$i305: i32, out_$i306: i1, out_$i307: i32, out_$i308: i1, out_$i309: i1, out_$i310: i1, out_$i311: i32, out_$i312: i1, out_$i313: i32, out_$i314: i32, out_$i315: i32, out_$i316: i1, out_$i318: i32, out_$i319: i32, out_$i320: i32, out_$i321: i1, out_$i322: i32, out_$i323: i1, out_$i324: i32, out_$i325: i1, out_vslice_dummy_var_113: i32, out_vslice_dummy_var_114: i32, out_vslice_dummy_var_115: i32, out_vslice_dummy_var_116: i64, out_vslice_dummy_var_117: i32, out_vslice_dummy_var_118: i32, out_vslice_dummy_var_119: i64, out_vslice_dummy_var_120: i64, out_vslice_dummy_var_121: i32, out_vslice_dummy_var_122: i32, out_vslice_dummy_var_123: i32, out_vslice_dummy_var_124: i32, out_vslice_dummy_var_125: i32, out_vslice_dummy_var_126: i32, out_vslice_dummy_var_127: i32, out_vslice_dummy_var_128: i32, out_vslice_dummy_var_129: i32, out_vslice_dummy_var_130: i32, out_vslice_dummy_var_131: i32, out_vslice_dummy_var_132: i32, out_vslice_dummy_var_133: i32, out_vslice_dummy_var_134: i32, out_vslice_dummy_var_135: i32, out_vslice_dummy_var_136: i32, out_vslice_dummy_var_137: i32, out_vslice_dummy_var_138: i32, out_vslice_dummy_var_139: i32, out_vslice_dummy_var_140: i32, out_vslice_dummy_var_141: i32)
{

  entry:
    out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$p71, out_$i72, out_$i73, out_$p74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$p89, out_$i91, out_$i92, out_$p93, out_$i95, out_$i96, out_$p97, out_$i99, out_$i100, out_$i101, out_$i102, out_$p103, out_$i105, out_$i106, out_$p107, out_$i109, out_$i110, out_$p111, out_$i113, out_$i114, out_$p115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$p123, out_$i125, out_$i126, out_$p127, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i139, out_$p140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$p148, out_$p149, out_$i150, out_$i151, out_$i152, out_$i153, out_$i154, out_$i155, out_$p156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$i162, out_$i163, out_$p164, out_$i165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$p171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177, out_$i178, out_$i179, out_$i180, out_$i181, out_$i182, out_$i183, out_$i184, out_$i185, out_$i186, out_$i187, out_$i188, out_$i189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$i196, out_$i197, out_$i198, out_$i199, out_$i200, out_$i201, out_$i202, out_$i203, out_$i204, out_$i205, out_$i206, out_$i207, out_$i208, out_$i209, out_$i210, out_$i211, out_$i212, out_$i213, out_$i214, out_$i215, out_$i216, out_$i217, out_$i218, out_$i219, out_$i220, out_$p221, out_$i223, out_$i224, out_$p225, out_$p226, out_$i228, out_$i229, out_$p230, out_$p231, out_$i233, out_$i234, out_$p235, out_$i237, out_$i238, out_$p239, out_$i240, out_$i242, out_$i243, out_$p244, out_$p245, out_$i247, out_$i248, out_$p249, out_$p250, out_$i252, out_$i253, out_$p254, out_$i256, out_$i257, out_$p258, out_$p259, out_$i261, out_$i262, out_$p263, out_$p264, out_$i266, out_$i267, out_$p268, out_$i270, out_$i271, out_$p272, out_$p273, out_$i275, out_$i276, out_$p277, out_$i279, out_$i280, out_$p281, out_$i283, out_$i284, out_$p285, out_$i287, out_$i288, out_$p289, out_$i291, out_$i292, out_$p293, out_$p294, out_$i296, out_$i297, out_$p298, out_$i300, out_$i301, out_$p302, out_$i303, out_$i305, out_$i306, out_$i307, out_$i308, out_$i309, out_$i310, out_$i311, out_$i312, out_$i313, out_$i314, out_$i315, out_$i316, out_$i318, out_$i319, out_$i320, out_$i321, out_$i322, out_$i323, out_$i324, out_$i325, out_vslice_dummy_var_113, out_vslice_dummy_var_114, out_vslice_dummy_var_115, out_vslice_dummy_var_116, out_vslice_dummy_var_117, out_vslice_dummy_var_118, out_vslice_dummy_var_119, out_vslice_dummy_var_120, out_vslice_dummy_var_121, out_vslice_dummy_var_122, out_vslice_dummy_var_123, out_vslice_dummy_var_124, out_vslice_dummy_var_125, out_vslice_dummy_var_126, out_vslice_dummy_var_127, out_vslice_dummy_var_128, out_vslice_dummy_var_129, out_vslice_dummy_var_130, out_vslice_dummy_var_131, out_vslice_dummy_var_132, out_vslice_dummy_var_133, out_vslice_dummy_var_134, out_vslice_dummy_var_135, out_vslice_dummy_var_136, out_vslice_dummy_var_137, out_vslice_dummy_var_138, out_vslice_dummy_var_139, out_vslice_dummy_var_140, out_vslice_dummy_var_141 := in_$i54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i59, in_$i60, in_$i61, in_$i62, in_$i63, in_$i64, in_$i65, in_$i66, in_$i67, in_$i68, in_$i69, in_$i70, in_$p71, in_$i72, in_$i73, in_$p74, in_$i75, in_$i76, in_$i77, in_$i78, in_$i79, in_$i80, in_$i81, in_$i82, in_$i83, in_$i84, in_$i85, in_$i86, in_$i87, in_$i88, in_$p89, in_$i91, in_$i92, in_$p93, in_$i95, in_$i96, in_$p97, in_$i99, in_$i100, in_$i101, in_$i102, in_$p103, in_$i105, in_$i106, in_$p107, in_$i109, in_$i110, in_$p111, in_$i113, in_$i114, in_$p115, in_$i116, in_$i117, in_$i118, in_$i119, in_$i120, in_$i121, in_$i122, in_$p123, in_$i125, in_$i126, in_$p127, in_$i129, in_$i130, in_$i131, in_$i132, in_$i133, in_$i134, in_$i135, in_$i136, in_$i137, in_$i138, in_$i139, in_$p140, in_$i141, in_$i142, in_$i143, in_$i144, in_$i145, in_$i146, in_$i147, in_$p148, in_$p149, in_$i150, in_$i151, in_$i152, in_$i153, in_$i154, in_$i155, in_$p156, in_$i157, in_$i158, in_$i159, in_$i160, in_$i161, in_$i162, in_$i163, in_$p164, in_$i165, in_$i166, in_$i167, in_$i168, in_$i169, in_$i170, in_$p171, in_$i172, in_$i173, in_$i174, in_$i175, in_$i176, in_$i177, in_$i178, in_$i179, in_$i180, in_$i181, in_$i182, in_$i183, in_$i184, in_$i185, in_$i186, in_$i187, in_$i188, in_$i189, in_$i190, in_$i191, in_$i192, in_$i193, in_$i194, in_$i195, in_$i196, in_$i197, in_$i198, in_$i199, in_$i200, in_$i201, in_$i202, in_$i203, in_$i204, in_$i205, in_$i206, in_$i207, in_$i208, in_$i209, in_$i210, in_$i211, in_$i212, in_$i213, in_$i214, in_$i215, in_$i216, in_$i217, in_$i218, in_$i219, in_$i220, in_$p221, in_$i223, in_$i224, in_$p225, in_$p226, in_$i228, in_$i229, in_$p230, in_$p231, in_$i233, in_$i234, in_$p235, in_$i237, in_$i238, in_$p239, in_$i240, in_$i242, in_$i243, in_$p244, in_$p245, in_$i247, in_$i248, in_$p249, in_$p250, in_$i252, in_$i253, in_$p254, in_$i256, in_$i257, in_$p258, in_$p259, in_$i261, in_$i262, in_$p263, in_$p264, in_$i266, in_$i267, in_$p268, in_$i270, in_$i271, in_$p272, in_$p273, in_$i275, in_$i276, in_$p277, in_$i279, in_$i280, in_$p281, in_$i283, in_$i284, in_$p285, in_$i287, in_$i288, in_$p289, in_$i291, in_$i292, in_$p293, in_$p294, in_$i296, in_$i297, in_$p298, in_$i300, in_$i301, in_$p302, in_$i303, in_$i305, in_$i306, in_$i307, in_$i308, in_$i309, in_$i310, in_$i311, in_$i312, in_$i313, in_$i314, in_$i315, in_$i316, in_$i318, in_$i319, in_$i320, in_$i321, in_$i322, in_$i323, in_$i324, in_$i325, in_vslice_dummy_var_113, in_vslice_dummy_var_114, in_vslice_dummy_var_115, in_vslice_dummy_var_116, in_vslice_dummy_var_117, in_vslice_dummy_var_118, in_vslice_dummy_var_119, in_vslice_dummy_var_120, in_vslice_dummy_var_121, in_vslice_dummy_var_122, in_vslice_dummy_var_123, in_vslice_dummy_var_124, in_vslice_dummy_var_125, in_vslice_dummy_var_126, in_vslice_dummy_var_127, in_vslice_dummy_var_128, in_vslice_dummy_var_129, in_vslice_dummy_var_130, in_vslice_dummy_var_131, in_vslice_dummy_var_132, in_vslice_dummy_var_133, in_vslice_dummy_var_134, in_vslice_dummy_var_135, in_vslice_dummy_var_136, in_vslice_dummy_var_137, in_vslice_dummy_var_138, in_vslice_dummy_var_139, in_vslice_dummy_var_140, in_vslice_dummy_var_141;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 793} out_$i54 := __VERIFIER_nondet_int();
    call {:si_unique_call 794} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i54);
    call {:si_unique_call 795} {:cexpr "tmp___34"} boogie_si_record_i32(out_$i54);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb40_dummy;

  $bb317:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb315:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb303:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb283:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb178:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb148:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb92:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb21:
    assume !(out_$i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb31:
    assume !(out_$i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    $M.39 := 1;
    call {:si_unique_call 800} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_3921;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 799} stk_v4l_vm_close(out_$p71);
    goto corral_source_split_3920;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    out_$p71 := $M.33;
    goto corral_source_split_3919;

  $bb30:
    assume out_$i70 == 1;
    goto corral_source_split_3918;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    out_$i70 := $eq.i32(out_$i69, 2);
    goto corral_source_split_3916;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    out_$i69 := $M.39;
    goto corral_source_split_3915;

  $bb28:
    assume out_$i68 == 1;
    goto corral_source_split_3914;

  $bb23:
    assume out_$i66 == 1;
    assume {:verifier.code 0} true;
    out_$i68 := $eq.i32(out_$i65, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i66 := $slt.i32(out_$i65, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_3908:
    assume {:verifier.code 1} true;
    call {:si_unique_call 796} out_$i65 := __VERIFIER_nondet_int();
    call {:si_unique_call 797} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i65);
    call {:si_unique_call 798} {:cexpr "tmp___35"} boogie_si_record_i32(out_$i65);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb20:
    assume out_$i64 == 1;
    goto corral_source_split_3908;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    out_$i64 := $ne.i32(out_$i63, 0);
    goto corral_source_split_3906;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    out_$i63 := $M.39;
    goto corral_source_split_3905;

  $bb18:
    assume out_$i62 == 1;
    goto corral_source_split_3904;

  $bb14:
    assume out_$i60 == 1;
    assume {:verifier.code 0} true;
    out_$i62 := $eq.i32(out_$i54, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb3:
    assume out_$i55 == 1;
    assume {:verifier.code 0} true;
    out_$i60 := $slt.i32(out_$i54, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i55 := $slt.i32(out_$i54, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb35:
    assume !(out_$i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    $M.42 := out_$i76;
    call {:si_unique_call 803} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i76);
    goto corral_source_split_3929;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    out_$i76 := $add.i32(out_$i75, 1);
    goto corral_source_split_3928;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    out_$i75 := $M.42;
    goto corral_source_split_3927;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    $M.39 := 2;
    call {:si_unique_call 802} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_3926;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 801} stk_v4l_vm_open(out_$p74);
    goto corral_source_split_3925;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    out_$p74 := $M.33;
    goto corral_source_split_3924;

  $bb34:
    assume out_$i73 == 1;
    goto corral_source_split_3923;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    out_$i73 := $eq.i32(out_$i72, 1);
    goto corral_source_split_3912;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    out_$i72 := $M.39;
    goto corral_source_split_3911;

  $bb25:
    assume out_$i67 == 1;
    goto corral_source_split_3910;

  $bb24:
    assume !(out_$i66 == 1);
    assume {:verifier.code 0} true;
    out_$i67 := $eq.i32(out_$i65, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 804} ldv_stop();
    goto corral_source_split_3931;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb26:
    assume {:verifier.code 0} true;
    assume !(out_$i67 == 1);
    goto $bb27;

  $bb29:
    assume {:verifier.code 0} true;
    assume !(out_$i68 == 1);
    goto $bb27;

  $bb42:
    assume !(out_$i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb91:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb89:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb83:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb71:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb63:
    assume !(out_$i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    goto $bb64;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    $M.40 := 2;
    call {:si_unique_call 811} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_3970;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} out_vslice_dummy_var_114 := v4l_stk_mmap(out_$p93, in_$p12);
    goto corral_source_split_3969;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    out_$p93 := $M.35;
    goto corral_source_split_3968;

  $bb62:
    assume out_$i92 == 1;
    goto corral_source_split_3967;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    out_$i92 := $eq.i32(out_$i91, 2);
    goto corral_source_split_3965;

  $bb61:
    assume {:verifier.code 0} true;
    out_$i91 := $M.40;
    goto corral_source_split_3964;

  $bb60:
    assume !(out_$i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    goto $bb61;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    $M.40 := 1;
    call {:si_unique_call 809} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_3962;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 808} out_vslice_dummy_var_113 := v4l_stk_mmap(out_$p89, in_$p12);
    goto corral_source_split_3961;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    out_$p89 := $M.35;
    goto corral_source_split_3960;

  $bb59:
    assume out_$i88 == 1;
    goto corral_source_split_3959;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    out_$i88 := $eq.i32(out_$i87, 1);
    goto corral_source_split_3957;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    out_$i87 := $M.40;
    goto corral_source_split_3956;

  $bb57:
    assume out_$i86 == 1;
    goto corral_source_split_3955;

  $bb53:
    assume out_$i84 == 1;
    assume {:verifier.code 0} true;
    out_$i86 := $eq.i32(out_$i79, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb44:
    assume out_$i80 == 1;
    assume {:verifier.code 0} true;
    out_$i84 := $slt.i32(out_$i79, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb43:
    assume {:verifier.code 0} true;
    out_$i80 := $slt.i32(out_$i79, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  corral_source_split_3933:
    assume {:verifier.code 1} true;
    call {:si_unique_call 805} out_$i79 := __VERIFIER_nondet_int();
    call {:si_unique_call 806} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i79);
    call {:si_unique_call 807} {:cexpr "tmp___36"} boogie_si_record_i32(out_$i79);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb41:
    assume out_$i78 == 1;
    goto corral_source_split_3933;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    out_$i78 := $ne.i32(out_$i77, 0);
    goto corral_source_split_3898;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    out_$i77 := $M.40;
    goto corral_source_split_3897;

  $bb16:
    assume out_$i61 == 1;
    goto corral_source_split_3896;

  $bb15:
    assume !(out_$i60 == 1);
    assume {:verifier.code 0} true;
    out_$i61 := $slt.i32(out_$i54, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb67:
    assume !(out_$i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    goto $bb68;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    $M.42 := out_$i100;
    call {:si_unique_call 814} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i100);
    goto corral_source_split_3978;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    out_$i100 := $sub.i32(out_$i99, 1);
    goto corral_source_split_3977;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    out_$i99 := $M.42;
    goto corral_source_split_3976;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    $M.40 := 1;
    call {:si_unique_call 813} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_3975;

  SeqInstr_15:
    goto corral_source_split_3974;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 812} out_vslice_dummy_var_115 := v4l_stk_release(out_$p97);
    goto SeqInstr_14;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    out_$p97 := $M.35;
    goto corral_source_split_3973;

  $bb66:
    assume out_$i96 == 1;
    goto corral_source_split_3972;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    out_$i96 := $eq.i32(out_$i95, 2);
    goto corral_source_split_3949;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    out_$i95 := $M.40;
    goto corral_source_split_3948;

  $bb55:
    assume out_$i85 == 1;
    goto corral_source_split_3947;

  $bb54:
    assume !(out_$i84 == 1);
    assume {:verifier.code 0} true;
    out_$i85 := $slt.i32(out_$i79, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb70:
    assume !(out_$i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    goto $bb71;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    $M.40 := 2;
    call {:si_unique_call 816} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_3983;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 815} out_vslice_dummy_var_116 := v4l_stk_read(out_$p103, in_$p8, in_$i4, in_$p6);
    goto corral_source_split_3982;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    out_$p103 := $M.35;
    goto corral_source_split_3981;

  $bb69:
    assume out_$i102 == 1;
    goto corral_source_split_3980;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    out_$i102 := $eq.i32(out_$i101, 2);
    goto corral_source_split_3953;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    out_$i101 := $M.40;
    goto corral_source_split_3952;

  $bb56:
    assume !(out_$i85 == 1);
    goto corral_source_split_3951;

  $bb76:
    assume !(out_$i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    goto $bb77;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    $M.40 := 2;
    call {:si_unique_call 820} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_3996;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 819} out_vslice_dummy_var_118 := v4l_stk_poll(out_$p111, in_$p10);
    goto corral_source_split_3995;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    out_$p111 := $M.35;
    goto corral_source_split_3994;

  $bb75:
    assume out_$i110 == 1;
    goto corral_source_split_3993;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    out_$i110 := $eq.i32(out_$i109, 2);
    goto corral_source_split_3991;

  $bb74:
    assume {:verifier.code 0} true;
    out_$i109 := $M.40;
    goto corral_source_split_3990;

  $bb73:
    assume !(out_$i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    goto $bb74;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    $M.40 := 1;
    call {:si_unique_call 818} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_3988;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 817} out_vslice_dummy_var_117 := v4l_stk_poll(out_$p107, in_$p10);
    goto corral_source_split_3987;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    out_$p107 := $M.35;
    goto corral_source_split_3986;

  $bb72:
    assume out_$i106 == 1;
    goto corral_source_split_3985;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    out_$i106 := $eq.i32(out_$i105, 1);
    goto corral_source_split_3937;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    out_$i105 := $M.40;
    goto corral_source_split_3936;

  $bb46:
    assume out_$i81 == 1;
    goto corral_source_split_3935;

  $bb45:
    assume !(out_$i80 == 1);
    assume {:verifier.code 0} true;
    out_$i81 := $slt.i32(out_$i79, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb79:
    assume !(out_$i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb81:
    assume !(out_$i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    goto $bb82;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    $M.42 := out_$i120;
    call {:si_unique_call 824} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i120);
    goto corral_source_split_4009;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    out_$i120 := $add.i32(out_$i119, 1);
    goto corral_source_split_4008;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    out_$i119 := $M.42;
    goto corral_source_split_4007;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    $M.40 := 2;
    call {:si_unique_call 823} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_4006;

  $bb80:
    assume out_$i118 == 1;
    goto corral_source_split_4005;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    out_$i118 := $eq.i32(out_$i117, 0);
    goto corral_source_split_4003;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    out_$i117 := $M.47;
    goto corral_source_split_4002;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    $M.47 := out_$i116;
    call {:si_unique_call 822} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i116);
    goto corral_source_split_4001;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 821} out_$i116 := v4l_stk_open(out_$p115);
    goto corral_source_split_4000;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    out_$p115 := $M.35;
    goto corral_source_split_3999;

  $bb78:
    assume out_$i114 == 1;
    goto corral_source_split_3998;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    out_$i114 := $eq.i32(out_$i113, 1);
    goto corral_source_split_3941;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    out_$i113 := $M.40;
    goto corral_source_split_3940;

  $bb48:
    assume out_$i82 == 1;
    goto corral_source_split_3939;

  $bb47:
    assume !(out_$i81 == 1);
    assume {:verifier.code 0} true;
    out_$i82 := $slt.i32(out_$i79, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb88:
    assume !(out_$i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    goto $bb89;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    $M.40 := 2;
    call {:si_unique_call 828} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_4022;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} out_vslice_dummy_var_120 := video_ioctl2(out_$p127, in_$i3, in_$i7);
    goto corral_source_split_4021;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    out_$p127 := $M.35;
    goto corral_source_split_4020;

  $bb87:
    assume out_$i126 == 1;
    goto corral_source_split_4019;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    out_$i126 := $eq.i32(out_$i125, 2);
    goto corral_source_split_4017;

  $bb86:
    assume {:verifier.code 0} true;
    out_$i125 := $M.40;
    goto corral_source_split_4016;

  $bb85:
    assume !(out_$i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    goto $bb86;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    $M.40 := 1;
    call {:si_unique_call 826} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_4014;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 825} out_vslice_dummy_var_119 := video_ioctl2(out_$p123, in_$i3, in_$i7);
    goto corral_source_split_4013;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    out_$p123 := $M.35;
    goto corral_source_split_4012;

  $bb84:
    assume out_$i122 == 1;
    goto corral_source_split_4011;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    out_$i122 := $eq.i32(out_$i121, 1);
    goto corral_source_split_3945;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    out_$i121 := $M.40;
    goto corral_source_split_3944;

  $bb50:
    assume out_$i83 == 1;
    goto corral_source_split_3943;

  $bb49:
    assume !(out_$i82 == 1);
    assume {:verifier.code 0} true;
    out_$i83 := $eq.i32(out_$i79, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb90:
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} ldv_stop();
    goto corral_source_split_4024;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb51:
    assume {:verifier.code 0} true;
    assume !(out_$i83 == 1);
    goto $bb52;

  $bb58:
    assume {:verifier.code 0} true;
    assume !(out_$i86 == 1);
    goto $bb52;

  $bb94:
    assume !(out_$i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb115:
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb147:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb145:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb139:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb127:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb121:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb114:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb110:
    assume !(out_$i139 == 1);
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb113:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb112:
    assume !(out_$i143 == 1);
    assume {:verifier.code 0} true;
    goto $bb113;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    goto $bb113;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    $M.42 := out_$i145;
    call {:si_unique_call 836} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i145);
    goto corral_source_split_4059;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    out_$i145 := $add.i32(out_$i144, 1);
    goto corral_source_split_4058;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    out_$i144 := $M.42;
    goto corral_source_split_4057;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 835} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_4056;

  $bb111:
    assume out_$i143 == 1;
    goto corral_source_split_4055;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb111, $bb112;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    out_$i143 := $eq.i32(out_$i142, 0);
    goto corral_source_split_4053;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    out_$i142 := $M.48;
    goto corral_source_split_4052;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    $M.48 := out_$i141;
    call {:si_unique_call 834} {:cexpr "ldv_retval_4"} boogie_si_record_i32(out_$i141);
    goto corral_source_split_4051;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} out_$i141 := stk_camera_probe(out_$p140, in_$p14);
    goto corral_source_split_4050;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    out_$p140 := $M.34;
    goto corral_source_split_4049;

  $bb109:
    assume out_$i139 == 1;
    goto corral_source_split_4048;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb109, $bb110;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    out_$i139 := $eq.i32(out_$i138, 1);
    goto corral_source_split_4046;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    out_$i138 := $M.41;
    goto corral_source_split_4045;

  $bb107:
    assume out_$i137 == 1;
    goto corral_source_split_4044;

  $bb105:
    assume out_$i136 == 1;
    assume {:verifier.code 0} true;
    out_$i137 := $eq.i32(out_$i131, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  $bb96:
    assume out_$i132 == 1;
    assume {:verifier.code 0} true;
    out_$i136 := $slt.i32(out_$i131, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  $bb95:
    assume {:verifier.code 0} true;
    out_$i132 := $slt.i32(out_$i131, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  corral_source_split_4026:
    assume {:verifier.code 1} true;
    call {:si_unique_call 830} out_$i131 := __VERIFIER_nondet_int();
    call {:si_unique_call 831} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i131);
    call {:si_unique_call 832} {:cexpr "tmp___37"} boogie_si_record_i32(out_$i131);
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb93:
    assume out_$i130 == 1;
    goto corral_source_split_4026;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    out_$i130 := $ne.i32(out_$i129, 0);
    goto corral_source_split_3902;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    out_$i129 := $M.41;
    goto corral_source_split_3901;

  $bb17:
    assume !(out_$i61 == 1);
    goto corral_source_split_3900;

  $bb117:
    assume !(out_$i147 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb120:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb119:
    assume !(out_$i153 == 1);
    assume {:verifier.code 0} true;
    goto $bb120;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    goto $bb120;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    $M.41 := 3;
    call {:si_unique_call 839} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_4071;

  $bb118:
    assume out_$i153 == 1;
    goto corral_source_split_4070;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb118, $bb119;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    out_$i153 := $eq.i32(out_$i152, 0);
    goto corral_source_split_4068;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    out_$i152 := $M.49;
    goto corral_source_split_4067;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    $M.49 := out_$i151;
    call {:si_unique_call 838} {:cexpr "ldv_retval_3"} boogie_si_record_i32(out_$i151);
    goto corral_source_split_4066;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 837} out_$i151 := stk_camera_suspend(out_$p148, out_$i150);
    goto corral_source_split_4065;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    out_$i150 := $load.i32($M.36, out_$p149);
    goto corral_source_split_4064;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    out_$p149 := $add.ref($add.ref(in_$p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_4063;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    out_$p148 := $M.34;
    goto corral_source_split_4062;

  $bb116:
    assume out_$i147 == 1;
    goto corral_source_split_4061;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116, $bb117;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    out_$i147 := $eq.i32(out_$i146, 2);
    goto corral_source_split_4042;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    out_$i146 := $M.41;
    goto corral_source_split_4041;

  $bb106:
    assume !(out_$i136 == 1);
    goto corral_source_split_4040;

  $bb123:
    assume !(out_$i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb126:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb125:
    assume !(out_$i159 == 1);
    assume {:verifier.code 0} true;
    goto $bb126;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    goto $bb126;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 842} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_4081;

  $bb124:
    assume out_$i159 == 1;
    goto corral_source_split_4080;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    out_$i159 := $eq.i32(out_$i158, 0);
    goto corral_source_split_4078;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    out_$i158 := $M.50;
    goto corral_source_split_4077;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    $M.50 := out_$i157;
    call {:si_unique_call 841} {:cexpr "ldv_retval_2"} boogie_si_record_i32(out_$i157);
    goto corral_source_split_4076;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 840} out_$i157 := stk_camera_resume(out_$p156);
    goto corral_source_split_4075;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    out_$p156 := $M.34;
    goto corral_source_split_4074;

  $bb122:
    assume out_$i155 == 1;
    goto corral_source_split_4073;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb122, $bb123;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    out_$i155 := $eq.i32(out_$i154, 3);
    goto corral_source_split_4030;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    out_$i154 := $M.41;
    goto corral_source_split_4029;

  $bb98:
    assume out_$i133 == 1;
    goto corral_source_split_4028;

  $bb97:
    assume !(out_$i132 == 1);
    assume {:verifier.code 0} true;
    out_$i133 := $slt.i32(out_$i131, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb98, $bb99;

  $bb136:
    assume {:verifier.code 0} true;
    goto $bb139;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    goto $bb139;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    $M.42 := out_$i173;
    call {:si_unique_call 848} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i173);
    goto corral_source_split_4108;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    out_$i173 := $sub.i32(out_$i172, 1);
    goto corral_source_split_4107;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    out_$i172 := $M.42;
    goto corral_source_split_4106;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 847} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4105;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 846} stk_camera_disconnect(out_$p171);
    goto corral_source_split_4104;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    out_$p171 := $M.34;
    goto corral_source_split_4103;

  $bb137:
    assume out_$i170 == 1;
    goto corral_source_split_4102;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb137, $bb138;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    out_$i170 := $eq.i32(out_$i169, 0);
    goto corral_source_split_4100;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    out_$i169 := $M.51;
    goto corral_source_split_4099;

  $bb134:
    assume out_$i168 == 1;
    goto corral_source_split_4098;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb134, $bb135;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    out_$i168 := $eq.i32(out_$i167, 2);
    goto corral_source_split_4096;

  $bb133:
    assume {:verifier.code 0} true;
    out_$i167 := $M.41;
    goto corral_source_split_4095;

  $bb130:
    assume {:verifier.code 0} true;
    goto $bb133;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    goto $bb133;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    $M.42 := out_$i166;
    call {:si_unique_call 845} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i166);
    goto corral_source_split_4093;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    out_$i166 := $sub.i32(out_$i165, 1);
    goto corral_source_split_4092;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    out_$i165 := $M.42;
    goto corral_source_split_4091;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 844} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4090;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} stk_camera_disconnect(out_$p164);
    goto corral_source_split_4089;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    out_$p164 := $M.34;
    goto corral_source_split_4088;

  $bb131:
    assume out_$i163 == 1;
    goto corral_source_split_4087;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb131, $bb132;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    out_$i163 := $eq.i32(out_$i162, 0);
    goto corral_source_split_4085;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    out_$i162 := $M.51;
    goto corral_source_split_4084;

  $bb128:
    assume out_$i161 == 1;
    goto corral_source_split_4083;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb128, $bb129;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    out_$i161 := $eq.i32(out_$i160, 3);
    goto corral_source_split_4034;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    out_$i160 := $M.41;
    goto corral_source_split_4033;

  $bb100:
    assume out_$i134 == 1;
    goto corral_source_split_4032;

  $bb99:
    assume !(out_$i133 == 1);
    assume {:verifier.code 0} true;
    out_$i134 := $slt.i32(out_$i131, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  $bb129:
    assume {:verifier.code 0} true;
    assume !(out_$i161 == 1);
    goto $bb130;

  $bb132:
    assume {:verifier.code 0} true;
    assume !(out_$i163 == 1);
    goto $bb130;

  $bb135:
    assume {:verifier.code 0} true;
    assume !(out_$i168 == 1);
    goto $bb136;

  $bb138:
    assume {:verifier.code 0} true;
    assume !(out_$i170 == 1);
    goto $bb136;

  $bb141:
    assume !(out_$i175 == 1);
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb144:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb143:
    assume !(out_$i178 == 1);
    assume {:verifier.code 0} true;
    goto $bb144;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    goto $bb144;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 851} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_4117;

  $bb142:
    assume out_$i178 == 1;
    goto corral_source_split_4116;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb142, $bb143;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    out_$i178 := $eq.i32(out_$i177, 0);
    goto corral_source_split_4114;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    out_$i177 := $M.52;
    goto corral_source_split_4113;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    $M.52 := out_$i176;
    call {:si_unique_call 850} {:cexpr "ldv_retval_1"} boogie_si_record_i32(out_$i176);
    goto corral_source_split_4112;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} out_$i176 := ldv_reset_resume_1();
    goto corral_source_split_4111;

  $bb140:
    assume out_$i175 == 1;
    goto corral_source_split_4110;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb140, $bb141;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    out_$i175 := $eq.i32(out_$i174, 3);
    goto corral_source_split_4038;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    out_$i174 := $M.41;
    goto corral_source_split_4037;

  $bb102:
    assume out_$i135 == 1;
    goto corral_source_split_4036;

  $bb101:
    assume !(out_$i134 == 1);
    assume {:verifier.code 0} true;
    out_$i135 := $eq.i32(out_$i131, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb102, $bb103;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 852} ldv_stop();
    goto corral_source_split_4119;

  $bb104:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb103:
    assume {:verifier.code 0} true;
    assume !(out_$i135 == 1);
    goto $bb104;

  $bb108:
    assume {:verifier.code 0} true;
    assume !(out_$i137 == 1);
    goto $bb104;

  $bb150:
    assume !(out_$i180 == 1);
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb166:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb177:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb175:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb165:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb161:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb160:
    assume {:verifier.code 0} true;
    assume !(out_$i186 == 1);
    goto $bb161;

  $bb163:
    assume {:verifier.code 0} true;
    assume !(out_$i188 == 1);
    goto $bb161;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb163;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    out_$i188 := $eq.i32(out_$i187, 0);
    goto corral_source_split_4133;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    out_$i187 := $M.42;
    goto corral_source_split_4132;

  $bb159:
    assume out_$i186 == 1;
    goto corral_source_split_4131;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb159, $bb160;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    out_$i186 := $eq.i32(out_$i185, 2);
    goto corral_source_split_4129;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    out_$i185 := $M.43;
    goto corral_source_split_4128;

  $bb157:
    assume out_$i184 == 1;
    goto corral_source_split_4127;

  $bb152:
    assume out_$i182 == 1;
    assume {:verifier.code 0} true;
    out_$i184 := $eq.i32(out_$i181, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb157, $bb158;

  $bb151:
    assume {:verifier.code 0} true;
    out_$i182 := $slt.i32(out_$i181, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb152, $bb153;

  corral_source_split_4121:
    assume {:verifier.code 1} true;
    call {:si_unique_call 853} out_$i181 := __VERIFIER_nondet_int();
    call {:si_unique_call 854} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i181);
    call {:si_unique_call 855} {:cexpr "tmp___38"} boogie_si_record_i32(out_$i181);
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb149:
    assume out_$i180 == 1;
    goto corral_source_split_4121;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb149, $bb150;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    out_$i180 := $ne.i32(out_$i179, 0);
    goto corral_source_split_3890;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    out_$i179 := $M.43;
    goto corral_source_split_3889;

  $bb12:
    assume out_$i59 == 1;
    goto corral_source_split_3888;

  $bb5:
    assume out_$i56 == 1;
    assume {:verifier.code 0} true;
    out_$i59 := $slt.i32(out_$i54, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb4:
    assume !(out_$i55 == 1);
    assume {:verifier.code 0} true;
    out_$i56 := $slt.i32(out_$i54, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb168:
    assume !(out_$i190 == 1);
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb174:
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb173:
    assume !(out_$i195 == 1);
    assume {:verifier.code 0} true;
    goto $bb174;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    goto $bb174;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 870} ldv_initialize_vm_operations_struct_6();
    goto corral_source_split_4162;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    $M.39 := 1;
    call {:si_unique_call 869} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4161;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} ldv_initialize_v4l2_file_operations_4();
    goto corral_source_split_4160;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    $M.40 := 1;
    call {:si_unique_call 867} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_4159;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 866} ldv_initialize_v4l2_ioctl_ops_3();
    goto corral_source_split_4158;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 865} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4157;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 864} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4156;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 863} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_4155;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 862} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_4154;

  $bb172:
    assume out_$i195 == 1;
    goto corral_source_split_4153;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb172, $bb173;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    out_$i195 := $eq.i32(out_$i194, 0);
    goto corral_source_split_4151;

  $bb171:
    assume {:verifier.code 0} true;
    out_$i194 := $M.53;
    goto corral_source_split_4150;

  $bb170:
    assume !(out_$i193 == 1);
    assume {:verifier.code 0} true;
    goto $bb171;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb170;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    out_$i193 := $ne.i32(out_$i192, 0);
    goto corral_source_split_4145;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    out_$i192 := $M.53;
    goto corral_source_split_4144;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    $M.53 := out_$i191;
    call {:si_unique_call 860} {:cexpr "ldv_retval_5"} boogie_si_record_i32(out_$i191);
    goto corral_source_split_4143;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 859} out_$i191 := stk_camera_driver_init();
    goto corral_source_split_4142;

  $bb167:
    assume out_$i190 == 1;
    goto corral_source_split_4141;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb167, $bb168;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    out_$i190 := $eq.i32(out_$i189, 1);
    goto corral_source_split_4125;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    out_$i189 := $M.43;
    goto corral_source_split_4124;

  $bb154:
    assume out_$i183 == 1;
    goto corral_source_split_4123;

  $bb153:
    assume !(out_$i182 == 1);
    assume {:verifier.code 0} true;
    out_$i183 := $eq.i32(out_$i181, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb154, $bb155;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 871} ldv_stop();
    goto corral_source_split_4164;

  $bb156:
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb155:
    assume {:verifier.code 0} true;
    assume !(out_$i183 == 1);
    goto $bb156;

  $bb158:
    assume {:verifier.code 0} true;
    assume !(out_$i184 == 1);
    goto $bb156;

  $bb180:
    assume !(out_$i197 == 1);
    assume {:verifier.code 0} true;
    goto $bb283;

  $bb226:
    assume {:verifier.code 0} true;
    goto $bb283;

  $bb282:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb280:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb277:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb274:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb271:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb268:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb265:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb262:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb259:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb256:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb253:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb250:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb247:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb244:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb241:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb238:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb235:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb232:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb229:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb225:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb224:
    assume !(out_$i220 == 1);
    assume {:verifier.code 0} true;
    goto $bb225;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    goto $bb225;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 876} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4247;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 875} out_vslice_dummy_var_121 := stk_vidioc_reqbufs(out_$p221, in_$p30, in_$p45);
    goto corral_source_split_4246;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    out_$p221 := $M.28;
    goto corral_source_split_4245;

  $bb223:
    assume out_$i220 == 1;
    goto corral_source_split_4244;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb223, $bb224;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    out_$i220 := $eq.i32(out_$i219, 1);
    goto corral_source_split_4242;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    out_$i219 := $M.44;
    goto corral_source_split_4241;

  $bb221:
    assume out_$i218 == 1;
    goto corral_source_split_4240;

  $bb219:
    assume out_$i217 == 1;
    assume {:verifier.code 0} true;
    out_$i218 := $eq.i32(out_$i198, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb221, $bb222;

  $bb215:
    assume out_$i215 == 1;
    assume {:verifier.code 0} true;
    out_$i217 := $slt.i32(out_$i198, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb219, $bb220;

  $bb205:
    assume out_$i210 == 1;
    assume {:verifier.code 0} true;
    out_$i215 := $slt.i32(out_$i198, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb215, $bb216;

  $bb182:
    assume out_$i199 == 1;
    assume {:verifier.code 0} true;
    out_$i210 := $slt.i32(out_$i198, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb205, $bb206;

  $bb181:
    assume {:verifier.code 0} true;
    out_$i199 := $slt.i32(out_$i198, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb182, $bb183;

  corral_source_split_4166:
    assume {:verifier.code 1} true;
    call {:si_unique_call 872} out_$i198 := __VERIFIER_nondet_int();
    call {:si_unique_call 873} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i198);
    call {:si_unique_call 874} {:cexpr "tmp___39"} boogie_si_record_i32(out_$i198);
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb179:
    assume out_$i197 == 1;
    goto corral_source_split_4166;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb179, $bb180;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    out_$i197 := $ne.i32(out_$i196, 0);
    goto corral_source_split_3894;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    out_$i196 := $M.44;
    goto corral_source_split_3893;

  $bb13:
    assume !(out_$i59 == 1);
    goto corral_source_split_3892;

  $bb228:
    assume !(out_$i224 == 1);
    assume {:verifier.code 0} true;
    goto $bb229;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    goto $bb229;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 878} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4253;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 877} out_vslice_dummy_var_122 := v4l2_event_unsubscribe(out_$p225, out_$p226);
    goto corral_source_split_4252;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    out_$p226 := $M.30;
    goto corral_source_split_4251;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    out_$p225 := $M.32;
    goto corral_source_split_4250;

  $bb227:
    assume out_$i224 == 1;
    goto corral_source_split_4249;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb227, $bb228;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    out_$i224 := $eq.i32(out_$i223, 1);
    goto corral_source_split_4238;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    out_$i223 := $M.44;
    goto corral_source_split_4237;

  $bb220:
    assume !(out_$i217 == 1);
    goto corral_source_split_4236;

  $bb231:
    assume !(out_$i229 == 1);
    assume {:verifier.code 0} true;
    goto $bb232;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    goto $bb232;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 880} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4259;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 879} out_vslice_dummy_var_123 := stk_vidioc_try_fmt_vid_cap(out_$p230, in_$p31, out_$p231);
    goto corral_source_split_4258;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    out_$p231 := $M.29;
    goto corral_source_split_4257;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    out_$p230 := $M.28;
    goto corral_source_split_4256;

  $bb230:
    assume out_$i229 == 1;
    goto corral_source_split_4255;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb230, $bb231;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    out_$i229 := $eq.i32(out_$i228, 1);
    goto corral_source_split_4230;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    out_$i228 := $M.44;
    goto corral_source_split_4229;

  $bb217:
    assume out_$i216 == 1;
    goto corral_source_split_4228;

  $bb216:
    assume !(out_$i215 == 1);
    assume {:verifier.code 0} true;
    out_$i216 := $slt.i32(out_$i198, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb217, $bb218;

  $bb234:
    assume !(out_$i234 == 1);
    assume {:verifier.code 0} true;
    goto $bb235;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    goto $bb235;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 882} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4264;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 881} out_vslice_dummy_var_124 := v4l2_ctrl_log_status(out_$p235, in_$p17);
    goto corral_source_split_4263;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    out_$p235 := $M.28;
    goto corral_source_split_4262;

  $bb233:
    assume out_$i234 == 1;
    goto corral_source_split_4261;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb233, $bb234;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    out_$i234 := $eq.i32(out_$i233, 1);
    goto corral_source_split_4234;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    out_$i233 := $M.44;
    goto corral_source_split_4233;

  $bb218:
    assume !(out_$i216 == 1);
    goto corral_source_split_4232;

  $bb237:
    assume !(out_$i238 == 1);
    assume {:verifier.code 0} true;
    goto $bb238;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    goto $bb238;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 884} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4270;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 883} out_vslice_dummy_var_125 := stk_vidioc_streamoff(out_$p239, in_$p18, out_$i240);
    goto corral_source_split_4269;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    out_$i240 := $load.i32($M.38, in_$p2);
    goto corral_source_split_4268;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    out_$p239 := $M.28;
    goto corral_source_split_4267;

  $bb236:
    assume out_$i238 == 1;
    goto corral_source_split_4266;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb236, $bb237;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    out_$i238 := $eq.i32(out_$i237, 1);
    goto corral_source_split_4222;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    out_$i237 := $M.44;
    goto corral_source_split_4221;

  $bb213:
    assume out_$i214 == 1;
    goto corral_source_split_4220;

  $bb207:
    assume out_$i211 == 1;
    assume {:verifier.code 0} true;
    out_$i214 := $slt.i32(out_$i198, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb213, $bb214;

  $bb206:
    assume !(out_$i210 == 1);
    assume {:verifier.code 0} true;
    out_$i211 := $slt.i32(out_$i198, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb207, $bb208;

  $bb240:
    assume !(out_$i243 == 1);
    assume {:verifier.code 0} true;
    goto $bb241;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    goto $bb241;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 886} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4276;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} out_vslice_dummy_var_126 := stk_vidioc_dqbuf(out_$p244, in_$p24, out_$p245);
    goto corral_source_split_4275;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    out_$p245 := $M.31;
    goto corral_source_split_4274;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    out_$p244 := $M.28;
    goto corral_source_split_4273;

  $bb239:
    assume out_$i243 == 1;
    goto corral_source_split_4272;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb239, $bb240;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    out_$i243 := $eq.i32(out_$i242, 1);
    goto corral_source_split_4226;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    out_$i242 := $M.44;
    goto corral_source_split_4225;

  $bb214:
    assume !(out_$i214 == 1);
    goto corral_source_split_4224;

  $bb243:
    assume !(out_$i248 == 1);
    assume {:verifier.code 0} true;
    goto $bb244;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    goto $bb244;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 888} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4282;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 887} out_vslice_dummy_var_127 := stk_vidioc_querybuf(out_$p249, in_$p46, out_$p250);
    goto corral_source_split_4281;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    out_$p250 := $M.31;
    goto corral_source_split_4280;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    out_$p249 := $M.28;
    goto corral_source_split_4279;

  $bb242:
    assume out_$i248 == 1;
    goto corral_source_split_4278;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb242, $bb243;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    out_$i248 := $eq.i32(out_$i247, 1);
    goto corral_source_split_4210;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    out_$i247 := $M.44;
    goto corral_source_split_4209;

  $bb209:
    assume out_$i212 == 1;
    goto corral_source_split_4208;

  $bb208:
    assume !(out_$i211 == 1);
    assume {:verifier.code 0} true;
    out_$i212 := $slt.i32(out_$i198, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb209, $bb210;

  $bb246:
    assume !(out_$i253 == 1);
    assume {:verifier.code 0} true;
    goto $bb247;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    goto $bb247;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 890} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4287;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 889} out_vslice_dummy_var_128 := stk_vidioc_enum_fmt_vid_cap(out_$p254, in_$p27, in_$p29);
    goto corral_source_split_4286;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    out_$p254 := $M.28;
    goto corral_source_split_4285;

  $bb245:
    assume out_$i253 == 1;
    goto corral_source_split_4284;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb245, $bb246;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    out_$i253 := $eq.i32(out_$i252, 1);
    goto corral_source_split_4214;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    out_$i252 := $M.44;
    goto corral_source_split_4213;

  $bb211:
    assume out_$i213 == 1;
    goto corral_source_split_4212;

  $bb210:
    assume !(out_$i212 == 1);
    assume {:verifier.code 0} true;
    out_$i213 := $slt.i32(out_$i198, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb211, $bb212;

  $bb249:
    assume !(out_$i257 == 1);
    assume {:verifier.code 0} true;
    goto $bb250;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    goto $bb250;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 892} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4293;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 891} out_vslice_dummy_var_129 := stk_vidioc_s_fmt_vid_cap(out_$p258, in_$p36, out_$p259);
    goto corral_source_split_4292;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    out_$p259 := $M.29;
    goto corral_source_split_4291;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    out_$p258 := $M.28;
    goto corral_source_split_4290;

  $bb248:
    assume out_$i257 == 1;
    goto corral_source_split_4289;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb248, $bb249;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    out_$i257 := $eq.i32(out_$i256, 1);
    goto corral_source_split_4218;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    out_$i256 := $M.44;
    goto corral_source_split_4217;

  $bb212:
    assume !(out_$i213 == 1);
    goto corral_source_split_4216;

  $bb252:
    assume !(out_$i262 == 1);
    assume {:verifier.code 0} true;
    goto $bb253;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    goto $bb253;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 894} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4299;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 893} out_vslice_dummy_var_130 := stk_vidioc_g_fmt_vid_cap(out_$p263, in_$p26, out_$p264);
    goto corral_source_split_4298;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    out_$p264 := $M.29;
    goto corral_source_split_4297;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    out_$p263 := $M.28;
    goto corral_source_split_4296;

  $bb251:
    assume out_$i262 == 1;
    goto corral_source_split_4295;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb251, $bb252;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    out_$i262 := $eq.i32(out_$i261, 1);
    goto corral_source_split_4202;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    out_$i261 := $M.44;
    goto corral_source_split_4201;

  $bb203:
    assume out_$i209 == 1;
    goto corral_source_split_4200;

  $bb197:
    assume out_$i206 == 1;
    assume {:verifier.code 0} true;
    out_$i209 := $slt.i32(out_$i198, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb203, $bb204;

  $bb184:
    assume out_$i200 == 1;
    assume {:verifier.code 0} true;
    out_$i206 := $slt.i32(out_$i198, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb197, $bb198;

  $bb183:
    assume !(out_$i199 == 1);
    assume {:verifier.code 0} true;
    out_$i200 := $slt.i32(out_$i198, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb184, $bb185;

  $bb255:
    assume !(out_$i267 == 1);
    assume {:verifier.code 0} true;
    goto $bb256;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    goto $bb256;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 896} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4304;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 895} out_vslice_dummy_var_131 := stk_vidioc_g_input(out_$p268, in_$p20, in_$p41);
    goto corral_source_split_4303;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    out_$p268 := $M.28;
    goto corral_source_split_4302;

  $bb254:
    assume out_$i267 == 1;
    goto corral_source_split_4301;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb254, $bb255;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    out_$i267 := $eq.i32(out_$i266, 1);
    goto corral_source_split_4206;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    out_$i266 := $M.44;
    goto corral_source_split_4205;

  $bb204:
    assume !(out_$i209 == 1);
    goto corral_source_split_4204;

  $bb258:
    assume !(out_$i271 == 1);
    assume {:verifier.code 0} true;
    goto $bb259;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    goto $bb259;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 898} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4310;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 897} out_vslice_dummy_var_132 := stk_vidioc_qbuf(out_$p272, in_$p35, out_$p273);
    goto corral_source_split_4309;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    out_$p273 := $M.31;
    goto corral_source_split_4308;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    out_$p272 := $M.28;
    goto corral_source_split_4307;

  $bb257:
    assume out_$i271 == 1;
    goto corral_source_split_4306;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb257, $bb258;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    out_$i271 := $eq.i32(out_$i270, 1);
    goto corral_source_split_4190;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    out_$i270 := $M.44;
    goto corral_source_split_4189;

  $bb199:
    assume out_$i207 == 1;
    goto corral_source_split_4188;

  $bb198:
    assume !(out_$i206 == 1);
    assume {:verifier.code 0} true;
    out_$i207 := $slt.i32(out_$i198, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb199, $bb200;

  $bb261:
    assume !(out_$i276 == 1);
    assume {:verifier.code 0} true;
    goto $bb262;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    goto $bb262;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 900} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4315;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 899} out_vslice_dummy_var_133 := stk_vidioc_enum_framesizes(out_$p277, in_$p19, in_$p43);
    goto corral_source_split_4314;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    out_$p277 := $M.28;
    goto corral_source_split_4313;

  $bb260:
    assume out_$i276 == 1;
    goto corral_source_split_4312;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb260, $bb261;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    out_$i276 := $eq.i32(out_$i275, 1);
    goto corral_source_split_4194;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    out_$i275 := $M.44;
    goto corral_source_split_4193;

  $bb201:
    assume out_$i208 == 1;
    goto corral_source_split_4192;

  $bb200:
    assume !(out_$i207 == 1);
    assume {:verifier.code 0} true;
    out_$i208 := $slt.i32(out_$i198, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb201, $bb202;

  $bb264:
    assume !(out_$i280 == 1);
    assume {:verifier.code 0} true;
    goto $bb265;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    goto $bb265;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 902} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4320;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 901} out_vslice_dummy_var_134 := stk_vidioc_querycap(out_$p281, in_$p15, in_$p39);
    goto corral_source_split_4319;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    out_$p281 := $M.28;
    goto corral_source_split_4318;

  $bb263:
    assume out_$i280 == 1;
    goto corral_source_split_4317;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb263, $bb264;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    out_$i280 := $eq.i32(out_$i279, 1);
    goto corral_source_split_4198;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    out_$i279 := $M.44;
    goto corral_source_split_4197;

  $bb202:
    assume !(out_$i208 == 1);
    goto corral_source_split_4196;

  $bb267:
    assume !(out_$i284 == 1);
    assume {:verifier.code 0} true;
    goto $bb268;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    goto $bb268;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 904} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4325;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 903} out_vslice_dummy_var_135 := stk_vidioc_g_parm(out_$p285, in_$p34, in_$p33);
    goto corral_source_split_4324;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    out_$p285 := $M.28;
    goto corral_source_split_4323;

  $bb266:
    assume out_$i284 == 1;
    goto corral_source_split_4322;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb266, $bb267;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    out_$i284 := $eq.i32(out_$i283, 1);
    goto corral_source_split_4182;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    out_$i283 := $M.44;
    goto corral_source_split_4181;

  $bb195:
    assume out_$i205 == 1;
    goto corral_source_split_4180;

  $bb186:
    assume out_$i201 == 1;
    assume {:verifier.code 0} true;
    out_$i205 := $slt.i32(out_$i198, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb195, $bb196;

  $bb185:
    assume !(out_$i200 == 1);
    assume {:verifier.code 0} true;
    out_$i201 := $slt.i32(out_$i198, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb186, $bb187;

  $bb270:
    assume !(out_$i288 == 1);
    assume {:verifier.code 0} true;
    goto $bb271;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    goto $bb271;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 906} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4330;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 905} out_vslice_dummy_var_136 := stk_vidioc_enum_input(out_$p289, in_$p37, in_$p23);
    goto corral_source_split_4329;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    out_$p289 := $M.28;
    goto corral_source_split_4328;

  $bb269:
    assume out_$i288 == 1;
    goto corral_source_split_4327;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb269, $bb270;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    out_$i288 := $eq.i32(out_$i287, 1);
    goto corral_source_split_4186;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    out_$i287 := $M.44;
    goto corral_source_split_4185;

  $bb196:
    assume !(out_$i205 == 1);
    goto corral_source_split_4184;

  $bb273:
    assume !(out_$i292 == 1);
    assume {:verifier.code 0} true;
    goto $bb274;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    goto $bb274;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 908} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4336;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 907} out_vslice_dummy_var_137 := v4l2_ctrl_subscribe_event(out_$p293, out_$p294);
    goto corral_source_split_4335;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    out_$p294 := $M.30;
    goto corral_source_split_4334;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    out_$p293 := $M.32;
    goto corral_source_split_4333;

  $bb272:
    assume out_$i292 == 1;
    goto corral_source_split_4332;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb272, $bb273;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    out_$i292 := $eq.i32(out_$i291, 1);
    goto corral_source_split_4170;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    out_$i291 := $M.44;
    goto corral_source_split_4169;

  $bb188:
    assume out_$i202 == 1;
    goto corral_source_split_4168;

  $bb187:
    assume !(out_$i201 == 1);
    assume {:verifier.code 0} true;
    out_$i202 := $slt.i32(out_$i198, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb188, $bb189;

  $bb276:
    assume !(out_$i297 == 1);
    assume {:verifier.code 0} true;
    goto $bb277;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    goto $bb277;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 910} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4341;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 909} out_vslice_dummy_var_138 := stk_vidioc_s_input(out_$p298, in_$p21, in_$i16);
    goto corral_source_split_4340;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    out_$p298 := $M.28;
    goto corral_source_split_4339;

  $bb275:
    assume out_$i297 == 1;
    goto corral_source_split_4338;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb275, $bb276;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    out_$i297 := $eq.i32(out_$i296, 1);
    goto corral_source_split_4174;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    out_$i296 := $M.44;
    goto corral_source_split_4173;

  $bb190:
    assume out_$i203 == 1;
    goto corral_source_split_4172;

  $bb189:
    assume !(out_$i202 == 1);
    assume {:verifier.code 0} true;
    out_$i203 := $slt.i32(out_$i198, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb190, $bb191;

  $bb279:
    assume !(out_$i301 == 1);
    assume {:verifier.code 0} true;
    goto $bb280;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    goto $bb280;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 912} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4347;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 911} out_vslice_dummy_var_139 := stk_vidioc_streamon(out_$p302, in_$p25, out_$i303);
    goto corral_source_split_4346;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    out_$i303 := $load.i32($M.37, in_$p1);
    goto corral_source_split_4345;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    out_$p302 := $M.28;
    goto corral_source_split_4344;

  $bb278:
    assume out_$i301 == 1;
    goto corral_source_split_4343;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb278, $bb279;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    out_$i301 := $eq.i32(out_$i300, 1);
    goto corral_source_split_4178;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    out_$i300 := $M.44;
    goto corral_source_split_4177;

  $bb192:
    assume out_$i204 == 1;
    goto corral_source_split_4176;

  $bb191:
    assume !(out_$i203 == 1);
    assume {:verifier.code 0} true;
    out_$i204 := $eq.i32(out_$i198, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb192, $bb193;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    goto $bb282;

  $bb281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 913} ldv_stop();
    goto corral_source_split_4349;

  $bb194:
    assume {:verifier.code 0} true;
    goto $bb281;

  $bb193:
    assume {:verifier.code 0} true;
    assume !(out_$i204 == 1);
    goto $bb194;

  $bb222:
    assume {:verifier.code 0} true;
    assume !(out_$i218 == 1);
    goto $bb194;

  $bb285:
    assume !(out_$i306 == 1);
    assume {:verifier.code 0} true;
    goto $bb303;

  $bb297:
    assume {:verifier.code 0} true;
    goto $bb303;

  $bb302:
    assume {:verifier.code 0} true;
    goto $bb297;

  $bb300:
    assume {:verifier.code 0} true;
    goto $bb297;

  $bb296:
    assume {:verifier.code 0} true;
    goto $bb297;

  $bb295:
    assume !(out_$i312 == 1);
    assume {:verifier.code 0} true;
    goto $bb296;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    goto $bb296;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    $M.42 := out_$i314;
    call {:si_unique_call 919} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i314);
    goto corral_source_split_4366;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    out_$i314 := $sub.i32(out_$i313, 1);
    goto corral_source_split_4365;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    out_$i313 := $M.42;
    goto corral_source_split_4364;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 918} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4363;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 917} stk_v4l_dev_release(in_$p48);
    goto corral_source_split_4362;

  $bb294:
    assume out_$i312 == 1;
    goto corral_source_split_4361;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb294, $bb295;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    out_$i312 := $eq.i32(out_$i311, 2);
    goto corral_source_split_4359;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    out_$i311 := $M.45;
    goto corral_source_split_4358;

  $bb292:
    assume out_$i310 == 1;
    goto corral_source_split_4357;

  $bb287:
    assume out_$i308 == 1;
    assume {:verifier.code 0} true;
    out_$i310 := $eq.i32(out_$i307, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb292, $bb293;

  $bb286:
    assume {:verifier.code 0} true;
    out_$i308 := $slt.i32(out_$i307, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb287, $bb288;

  corral_source_split_4351:
    assume {:verifier.code 1} true;
    call {:si_unique_call 914} out_$i307 := __VERIFIER_nondet_int();
    call {:si_unique_call 915} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i307);
    call {:si_unique_call 916} {:cexpr "tmp___40"} boogie_si_record_i32(out_$i307);
    assume {:verifier.code 0} true;
    goto $bb286;

  $bb284:
    assume out_$i306 == 1;
    goto corral_source_split_4351;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb284, $bb285;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    out_$i306 := $ne.i32(out_$i305, 0);
    goto corral_source_split_3882;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    out_$i305 := $M.45;
    goto corral_source_split_3881;

  $bb7:
    assume out_$i57 == 1;
    goto corral_source_split_3880;

  $bb6:
    assume !(out_$i56 == 1);
    assume {:verifier.code 0} true;
    out_$i57 := $slt.i32(out_$i54, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb299:
    assume !(out_$i316 == 1);
    assume {:verifier.code 0} true;
    goto $bb300;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    goto $bb300;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    $M.42 := out_$i319;
    call {:si_unique_call 922} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i319);
    goto corral_source_split_4373;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    out_$i319 := $add.i32(out_$i318, 1);
    goto corral_source_split_4372;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    out_$i318 := $M.42;
    goto corral_source_split_4371;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 921} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4370;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 920} out_vslice_dummy_var_140 := ldv_probe_2();
    goto corral_source_split_4369;

  $bb298:
    assume out_$i316 == 1;
    goto corral_source_split_4368;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb298, $bb299;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    out_$i316 := $eq.i32(out_$i315, 1);
    goto corral_source_split_4355;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    out_$i315 := $M.45;
    goto corral_source_split_4354;

  $bb289:
    assume out_$i309 == 1;
    goto corral_source_split_4353;

  $bb288:
    assume !(out_$i308 == 1);
    assume {:verifier.code 0} true;
    out_$i309 := $eq.i32(out_$i307, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb289, $bb290;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    goto $bb302;

  $bb301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 923} ldv_stop();
    goto corral_source_split_4375;

  $bb291:
    assume {:verifier.code 0} true;
    goto $bb301;

  $bb290:
    assume {:verifier.code 0} true;
    assume !(out_$i309 == 1);
    goto $bb291;

  $bb293:
    assume {:verifier.code 0} true;
    assume !(out_$i310 == 1);
    goto $bb291;

  $bb305:
    assume !(out_$i321 == 1);
    assume {:verifier.code 0} true;
    goto $bb315;

  $bb312:
    assume {:verifier.code 0} true;
    goto $bb315;

  $bb314:
    assume {:verifier.code 0} true;
    goto $bb312;

  $bb311:
    assume {:verifier.code 0} true;
    goto $bb312;

  $bb310:
    assume !(out_$i325 == 1);
    assume {:verifier.code 0} true;
    goto $bb311;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    goto $bb311;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 928} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_4385;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 927} out_vslice_dummy_var_141 := stk_s_ctrl(in_$p50);
    goto corral_source_split_4384;

  $bb309:
    assume out_$i325 == 1;
    goto corral_source_split_4383;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb309, $bb310;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    out_$i325 := $eq.i32(out_$i324, 1);
    goto corral_source_split_4381;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    out_$i324 := $M.46;
    goto corral_source_split_4380;

  $bb307:
    assume out_$i323 == 1;
    goto corral_source_split_4379;

  $bb306:
    assume {:verifier.code 0} true;
    out_$i323 := $eq.i32(out_$i322, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb307, $bb308;

  corral_source_split_4377:
    assume {:verifier.code 1} true;
    call {:si_unique_call 924} out_$i322 := __VERIFIER_nondet_int();
    call {:si_unique_call 925} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i322);
    call {:si_unique_call 926} {:cexpr "tmp___41"} boogie_si_record_i32(out_$i322);
    assume {:verifier.code 0} true;
    goto $bb306;

  $bb304:
    assume out_$i321 == 1;
    goto corral_source_split_4377;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb304, $bb305;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    out_$i321 := $ne.i32(out_$i320, 0);
    goto corral_source_split_3886;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    out_$i320 := $M.46;
    goto corral_source_split_3885;

  $bb9:
    assume out_$i58 == 1;
    goto corral_source_split_3884;

  $bb8:
    assume !(out_$i57 == 1);
    assume {:verifier.code 0} true;
    out_$i58 := $eq.i32(out_$i54, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    goto $bb314;

  $bb313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 929} ldv_stop();
    goto corral_source_split_4387;

  $bb308:
    assume !(out_$i323 == 1);
    assume {:verifier.code 0} true;
    goto $bb313;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    goto $bb317;

  $bb316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 930} ldv_stop();
    goto corral_source_split_4389;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb316;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i58 == 1);
    goto $bb11;

  $bb19:
    assume {:verifier.code 0} true;
    assume !(out_$i62 == 1);
    goto $bb11;

  $bb40_dummy:
    call {:si_unique_call 1} out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$p71, out_$i72, out_$i73, out_$p74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$p89, out_$i91, out_$i92, out_$p93, out_$i95, out_$i96, out_$p97, out_$i99, out_$i100, out_$i101, out_$i102, out_$p103, out_$i105, out_$i106, out_$p107, out_$i109, out_$i110, out_$p111, out_$i113, out_$i114, out_$p115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$p123, out_$i125, out_$i126, out_$p127, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i139, out_$p140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$p148, out_$p149, out_$i150, out_$i151, out_$i152, out_$i153, out_$i154, out_$i155, out_$p156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$i162, out_$i163, out_$p164, out_$i165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$p171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177, out_$i178, out_$i179, out_$i180, out_$i181, out_$i182, out_$i183, out_$i184, out_$i185, out_$i186, out_$i187, out_$i188, out_$i189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$i196, out_$i197, out_$i198, out_$i199, out_$i200, out_$i201, out_$i202, out_$i203, out_$i204, out_$i205, out_$i206, out_$i207, out_$i208, out_$i209, out_$i210, out_$i211, out_$i212, out_$i213, out_$i214, out_$i215, out_$i216, out_$i217, out_$i218, out_$i219, out_$i220, out_$p221, out_$i223, out_$i224, out_$p225, out_$p226, out_$i228, out_$i229, out_$p230, out_$p231, out_$i233, out_$i234, out_$p235, out_$i237, out_$i238, out_$p239, out_$i240, out_$i242, out_$i243, out_$p244, out_$p245, out_$i247, out_$i248, out_$p249, out_$p250, out_$i252, out_$i253, out_$p254, out_$i256, out_$i257, out_$p258, out_$p259, out_$i261, out_$i262, out_$p263, out_$p264, out_$i266, out_$i267, out_$p268, out_$i270, out_$i271, out_$p272, out_$p273, out_$i275, out_$i276, out_$p277, out_$i279, out_$i280, out_$p281, out_$i283, out_$i284, out_$p285, out_$i287, out_$i288, out_$p289, out_$i291, out_$i292, out_$p293, out_$p294, out_$i296, out_$i297, out_$p298, out_$i300, out_$i301, out_$p302, out_$i303, out_$i305, out_$i306, out_$i307, out_$i308, out_$i309, out_$i310, out_$i311, out_$i312, out_$i313, out_$i314, out_$i315, out_$i316, out_$i318, out_$i319, out_$i320, out_$i321, out_$i322, out_$i323, out_$i324, out_$i325, out_vslice_dummy_var_113, out_vslice_dummy_var_114, out_vslice_dummy_var_115, out_vslice_dummy_var_116, out_vslice_dummy_var_117, out_vslice_dummy_var_118, out_vslice_dummy_var_119, out_vslice_dummy_var_120, out_vslice_dummy_var_121, out_vslice_dummy_var_122, out_vslice_dummy_var_123, out_vslice_dummy_var_124, out_vslice_dummy_var_125, out_vslice_dummy_var_126, out_vslice_dummy_var_127, out_vslice_dummy_var_128, out_vslice_dummy_var_129, out_vslice_dummy_var_130, out_vslice_dummy_var_131, out_vslice_dummy_var_132, out_vslice_dummy_var_133, out_vslice_dummy_var_134, out_vslice_dummy_var_135, out_vslice_dummy_var_136, out_vslice_dummy_var_137, out_vslice_dummy_var_138, out_vslice_dummy_var_139, out_vslice_dummy_var_140, out_vslice_dummy_var_141 := main_loop_$bb1(in_$p0, in_$p1, in_$p2, in_$i3, in_$i4, in_$p6, in_$i7, in_$p8, in_$p10, in_$p12, in_$p14, in_$p15, in_$i16, in_$p17, in_$p18, in_$p19, in_$p20, in_$p21, in_$p23, in_$p24, in_$p25, in_$p26, in_$p27, in_$p29, in_$p30, in_$p31, in_$p33, in_$p34, in_$p35, in_$p36, in_$p37, in_$p39, in_$p41, in_$p43, in_$p45, in_$p46, in_$p48, in_$p50, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$p71, out_$i72, out_$i73, out_$p74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$p89, out_$i91, out_$i92, out_$p93, out_$i95, out_$i96, out_$p97, out_$i99, out_$i100, out_$i101, out_$i102, out_$p103, out_$i105, out_$i106, out_$p107, out_$i109, out_$i110, out_$p111, out_$i113, out_$i114, out_$p115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$p123, out_$i125, out_$i126, out_$p127, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i139, out_$p140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$p148, out_$p149, out_$i150, out_$i151, out_$i152, out_$i153, out_$i154, out_$i155, out_$p156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$i162, out_$i163, out_$p164, out_$i165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$p171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177, out_$i178, out_$i179, out_$i180, out_$i181, out_$i182, out_$i183, out_$i184, out_$i185, out_$i186, out_$i187, out_$i188, out_$i189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$i196, out_$i197, out_$i198, out_$i199, out_$i200, out_$i201, out_$i202, out_$i203, out_$i204, out_$i205, out_$i206, out_$i207, out_$i208, out_$i209, out_$i210, out_$i211, out_$i212, out_$i213, out_$i214, out_$i215, out_$i216, out_$i217, out_$i218, out_$i219, out_$i220, out_$p221, out_$i223, out_$i224, out_$p225, out_$p226, out_$i228, out_$i229, out_$p230, out_$p231, out_$i233, out_$i234, out_$p235, out_$i237, out_$i238, out_$p239, out_$i240, out_$i242, out_$i243, out_$p244, out_$p245, out_$i247, out_$i248, out_$p249, out_$p250, out_$i252, out_$i253, out_$p254, out_$i256, out_$i257, out_$p258, out_$p259, out_$i261, out_$i262, out_$p263, out_$p264, out_$i266, out_$i267, out_$p268, out_$i270, out_$i271, out_$p272, out_$p273, out_$i275, out_$i276, out_$p277, out_$i279, out_$i280, out_$p281, out_$i283, out_$i284, out_$p285, out_$i287, out_$i288, out_$p289, out_$i291, out_$i292, out_$p293, out_$p294, out_$i296, out_$i297, out_$p298, out_$i300, out_$i301, out_$p302, out_$i303, out_$i305, out_$i306, out_$i307, out_$i308, out_$i309, out_$i310, out_$i311, out_$i312, out_$i313, out_$i314, out_$i315, out_$i316, out_$i318, out_$i319, out_$i320, out_$i321, out_$i322, out_$i323, out_$i324, out_$i325, out_vslice_dummy_var_113, out_vslice_dummy_var_114, out_vslice_dummy_var_115, out_vslice_dummy_var_116, out_vslice_dummy_var_117, out_vslice_dummy_var_118, out_vslice_dummy_var_119, out_vslice_dummy_var_120, out_vslice_dummy_var_121, out_vslice_dummy_var_122, out_vslice_dummy_var_123, out_vslice_dummy_var_124, out_vslice_dummy_var_125, out_vslice_dummy_var_126, out_vslice_dummy_var_127, out_vslice_dummy_var_128, out_vslice_dummy_var_129, out_vslice_dummy_var_130, out_vslice_dummy_var_131, out_vslice_dummy_var_132, out_vslice_dummy_var_133, out_vslice_dummy_var_134, out_vslice_dummy_var_135, out_vslice_dummy_var_136, out_vslice_dummy_var_137, out_vslice_dummy_var_138, out_vslice_dummy_var_139, out_vslice_dummy_var_140, out_vslice_dummy_var_141);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i3: i32, in_$i4: i64, in_$p6: ref, in_$i7: i64, in_$p8: ref, in_$p10: ref, in_$p12: ref, in_$p14: ref, in_$p15: ref, in_$i16: i32, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p39: ref, in_$p41: ref, in_$p43: ref, in_$p45: ref, in_$p46: ref, in_$p48: ref, in_$p50: ref, in_$i54: i32, in_$i55: i1, in_$i56: i1, in_$i57: i1, in_$i58: i1, in_$i59: i1, in_$i60: i1, in_$i61: i1, in_$i62: i1, in_$i63: i32, in_$i64: i1, in_$i65: i32, in_$i66: i1, in_$i67: i1, in_$i68: i1, in_$i69: i32, in_$i70: i1, in_$p71: ref, in_$i72: i32, in_$i73: i1, in_$p74: ref, in_$i75: i32, in_$i76: i32, in_$i77: i32, in_$i78: i1, in_$i79: i32, in_$i80: i1, in_$i81: i1, in_$i82: i1, in_$i83: i1, in_$i84: i1, in_$i85: i1, in_$i86: i1, in_$i87: i32, in_$i88: i1, in_$p89: ref, in_$i91: i32, in_$i92: i1, in_$p93: ref, in_$i95: i32, in_$i96: i1, in_$p97: ref, in_$i99: i32, in_$i100: i32, in_$i101: i32, in_$i102: i1, in_$p103: ref, in_$i105: i32, in_$i106: i1, in_$p107: ref, in_$i109: i32, in_$i110: i1, in_$p111: ref, in_$i113: i32, in_$i114: i1, in_$p115: ref, in_$i116: i32, in_$i117: i32, in_$i118: i1, in_$i119: i32, in_$i120: i32, in_$i121: i32, in_$i122: i1, in_$p123: ref, in_$i125: i32, in_$i126: i1, in_$p127: ref, in_$i129: i32, in_$i130: i1, in_$i131: i32, in_$i132: i1, in_$i133: i1, in_$i134: i1, in_$i135: i1, in_$i136: i1, in_$i137: i1, in_$i138: i32, in_$i139: i1, in_$p140: ref, in_$i141: i32, in_$i142: i32, in_$i143: i1, in_$i144: i32, in_$i145: i32, in_$i146: i32, in_$i147: i1, in_$p148: ref, in_$p149: ref, in_$i150: i32, in_$i151: i32, in_$i152: i32, in_$i153: i1, in_$i154: i32, in_$i155: i1, in_$p156: ref, in_$i157: i32, in_$i158: i32, in_$i159: i1, in_$i160: i32, in_$i161: i1, in_$i162: i32, in_$i163: i1, in_$p164: ref, in_$i165: i32, in_$i166: i32, in_$i167: i32, in_$i168: i1, in_$i169: i32, in_$i170: i1, in_$p171: ref, in_$i172: i32, in_$i173: i32, in_$i174: i32, in_$i175: i1, in_$i176: i32, in_$i177: i32, in_$i178: i1, in_$i179: i32, in_$i180: i1, in_$i181: i32, in_$i182: i1, in_$i183: i1, in_$i184: i1, in_$i185: i32, in_$i186: i1, in_$i187: i32, in_$i188: i1, in_$i189: i32, in_$i190: i1, in_$i191: i32, in_$i192: i32, in_$i193: i1, in_$i194: i32, in_$i195: i1, in_$i196: i32, in_$i197: i1, in_$i198: i32, in_$i199: i1, in_$i200: i1, in_$i201: i1, in_$i202: i1, in_$i203: i1, in_$i204: i1, in_$i205: i1, in_$i206: i1, in_$i207: i1, in_$i208: i1, in_$i209: i1, in_$i210: i1, in_$i211: i1, in_$i212: i1, in_$i213: i1, in_$i214: i1, in_$i215: i1, in_$i216: i1, in_$i217: i1, in_$i218: i1, in_$i219: i32, in_$i220: i1, in_$p221: ref, in_$i223: i32, in_$i224: i1, in_$p225: ref, in_$p226: ref, in_$i228: i32, in_$i229: i1, in_$p230: ref, in_$p231: ref, in_$i233: i32, in_$i234: i1, in_$p235: ref, in_$i237: i32, in_$i238: i1, in_$p239: ref, in_$i240: i32, in_$i242: i32, in_$i243: i1, in_$p244: ref, in_$p245: ref, in_$i247: i32, in_$i248: i1, in_$p249: ref, in_$p250: ref, in_$i252: i32, in_$i253: i1, in_$p254: ref, in_$i256: i32, in_$i257: i1, in_$p258: ref, in_$p259: ref, in_$i261: i32, in_$i262: i1, in_$p263: ref, in_$p264: ref, in_$i266: i32, in_$i267: i1, in_$p268: ref, in_$i270: i32, in_$i271: i1, in_$p272: ref, in_$p273: ref, in_$i275: i32, in_$i276: i1, in_$p277: ref, in_$i279: i32, in_$i280: i1, in_$p281: ref, in_$i283: i32, in_$i284: i1, in_$p285: ref, in_$i287: i32, in_$i288: i1, in_$p289: ref, in_$i291: i32, in_$i292: i1, in_$p293: ref, in_$p294: ref, in_$i296: i32, in_$i297: i1, in_$p298: ref, in_$i300: i32, in_$i301: i1, in_$p302: ref, in_$i303: i32, in_$i305: i32, in_$i306: i1, in_$i307: i32, in_$i308: i1, in_$i309: i1, in_$i310: i1, in_$i311: i32, in_$i312: i1, in_$i313: i32, in_$i314: i32, in_$i315: i32, in_$i316: i1, in_$i318: i32, in_$i319: i32, in_$i320: i32, in_$i321: i1, in_$i322: i32, in_$i323: i1, in_$i324: i32, in_$i325: i1, in_vslice_dummy_var_113: i32, in_vslice_dummy_var_114: i32, in_vslice_dummy_var_115: i32, in_vslice_dummy_var_116: i64, in_vslice_dummy_var_117: i32, in_vslice_dummy_var_118: i32, in_vslice_dummy_var_119: i64, in_vslice_dummy_var_120: i64, in_vslice_dummy_var_121: i32, in_vslice_dummy_var_122: i32, in_vslice_dummy_var_123: i32, in_vslice_dummy_var_124: i32, in_vslice_dummy_var_125: i32, in_vslice_dummy_var_126: i32, in_vslice_dummy_var_127: i32, in_vslice_dummy_var_128: i32, in_vslice_dummy_var_129: i32, in_vslice_dummy_var_130: i32, in_vslice_dummy_var_131: i32, in_vslice_dummy_var_132: i32, in_vslice_dummy_var_133: i32, in_vslice_dummy_var_134: i32, in_vslice_dummy_var_135: i32, in_vslice_dummy_var_136: i32, in_vslice_dummy_var_137: i32, in_vslice_dummy_var_138: i32, in_vslice_dummy_var_139: i32, in_vslice_dummy_var_140: i32, in_vslice_dummy_var_141: i32) returns (out_$i54: i32, out_$i55: i1, out_$i56: i1, out_$i57: i1, out_$i58: i1, out_$i59: i1, out_$i60: i1, out_$i61: i1, out_$i62: i1, out_$i63: i32, out_$i64: i1, out_$i65: i32, out_$i66: i1, out_$i67: i1, out_$i68: i1, out_$i69: i32, out_$i70: i1, out_$p71: ref, out_$i72: i32, out_$i73: i1, out_$p74: ref, out_$i75: i32, out_$i76: i32, out_$i77: i32, out_$i78: i1, out_$i79: i32, out_$i80: i1, out_$i81: i1, out_$i82: i1, out_$i83: i1, out_$i84: i1, out_$i85: i1, out_$i86: i1, out_$i87: i32, out_$i88: i1, out_$p89: ref, out_$i91: i32, out_$i92: i1, out_$p93: ref, out_$i95: i32, out_$i96: i1, out_$p97: ref, out_$i99: i32, out_$i100: i32, out_$i101: i32, out_$i102: i1, out_$p103: ref, out_$i105: i32, out_$i106: i1, out_$p107: ref, out_$i109: i32, out_$i110: i1, out_$p111: ref, out_$i113: i32, out_$i114: i1, out_$p115: ref, out_$i116: i32, out_$i117: i32, out_$i118: i1, out_$i119: i32, out_$i120: i32, out_$i121: i32, out_$i122: i1, out_$p123: ref, out_$i125: i32, out_$i126: i1, out_$p127: ref, out_$i129: i32, out_$i130: i1, out_$i131: i32, out_$i132: i1, out_$i133: i1, out_$i134: i1, out_$i135: i1, out_$i136: i1, out_$i137: i1, out_$i138: i32, out_$i139: i1, out_$p140: ref, out_$i141: i32, out_$i142: i32, out_$i143: i1, out_$i144: i32, out_$i145: i32, out_$i146: i32, out_$i147: i1, out_$p148: ref, out_$p149: ref, out_$i150: i32, out_$i151: i32, out_$i152: i32, out_$i153: i1, out_$i154: i32, out_$i155: i1, out_$p156: ref, out_$i157: i32, out_$i158: i32, out_$i159: i1, out_$i160: i32, out_$i161: i1, out_$i162: i32, out_$i163: i1, out_$p164: ref, out_$i165: i32, out_$i166: i32, out_$i167: i32, out_$i168: i1, out_$i169: i32, out_$i170: i1, out_$p171: ref, out_$i172: i32, out_$i173: i32, out_$i174: i32, out_$i175: i1, out_$i176: i32, out_$i177: i32, out_$i178: i1, out_$i179: i32, out_$i180: i1, out_$i181: i32, out_$i182: i1, out_$i183: i1, out_$i184: i1, out_$i185: i32, out_$i186: i1, out_$i187: i32, out_$i188: i1, out_$i189: i32, out_$i190: i1, out_$i191: i32, out_$i192: i32, out_$i193: i1, out_$i194: i32, out_$i195: i1, out_$i196: i32, out_$i197: i1, out_$i198: i32, out_$i199: i1, out_$i200: i1, out_$i201: i1, out_$i202: i1, out_$i203: i1, out_$i204: i1, out_$i205: i1, out_$i206: i1, out_$i207: i1, out_$i208: i1, out_$i209: i1, out_$i210: i1, out_$i211: i1, out_$i212: i1, out_$i213: i1, out_$i214: i1, out_$i215: i1, out_$i216: i1, out_$i217: i1, out_$i218: i1, out_$i219: i32, out_$i220: i1, out_$p221: ref, out_$i223: i32, out_$i224: i1, out_$p225: ref, out_$p226: ref, out_$i228: i32, out_$i229: i1, out_$p230: ref, out_$p231: ref, out_$i233: i32, out_$i234: i1, out_$p235: ref, out_$i237: i32, out_$i238: i1, out_$p239: ref, out_$i240: i32, out_$i242: i32, out_$i243: i1, out_$p244: ref, out_$p245: ref, out_$i247: i32, out_$i248: i1, out_$p249: ref, out_$p250: ref, out_$i252: i32, out_$i253: i1, out_$p254: ref, out_$i256: i32, out_$i257: i1, out_$p258: ref, out_$p259: ref, out_$i261: i32, out_$i262: i1, out_$p263: ref, out_$p264: ref, out_$i266: i32, out_$i267: i1, out_$p268: ref, out_$i270: i32, out_$i271: i1, out_$p272: ref, out_$p273: ref, out_$i275: i32, out_$i276: i1, out_$p277: ref, out_$i279: i32, out_$i280: i1, out_$p281: ref, out_$i283: i32, out_$i284: i1, out_$p285: ref, out_$i287: i32, out_$i288: i1, out_$p289: ref, out_$i291: i32, out_$i292: i1, out_$p293: ref, out_$p294: ref, out_$i296: i32, out_$i297: i1, out_$p298: ref, out_$i300: i32, out_$i301: i1, out_$p302: ref, out_$i303: i32, out_$i305: i32, out_$i306: i1, out_$i307: i32, out_$i308: i1, out_$i309: i1, out_$i310: i1, out_$i311: i32, out_$i312: i1, out_$i313: i32, out_$i314: i32, out_$i315: i32, out_$i316: i1, out_$i318: i32, out_$i319: i32, out_$i320: i32, out_$i321: i1, out_$i322: i32, out_$i323: i1, out_$i324: i32, out_$i325: i1, out_vslice_dummy_var_113: i32, out_vslice_dummy_var_114: i32, out_vslice_dummy_var_115: i32, out_vslice_dummy_var_116: i64, out_vslice_dummy_var_117: i32, out_vslice_dummy_var_118: i32, out_vslice_dummy_var_119: i64, out_vslice_dummy_var_120: i64, out_vslice_dummy_var_121: i32, out_vslice_dummy_var_122: i32, out_vslice_dummy_var_123: i32, out_vslice_dummy_var_124: i32, out_vslice_dummy_var_125: i32, out_vslice_dummy_var_126: i32, out_vslice_dummy_var_127: i32, out_vslice_dummy_var_128: i32, out_vslice_dummy_var_129: i32, out_vslice_dummy_var_130: i32, out_vslice_dummy_var_131: i32, out_vslice_dummy_var_132: i32, out_vslice_dummy_var_133: i32, out_vslice_dummy_var_134: i32, out_vslice_dummy_var_135: i32, out_vslice_dummy_var_136: i32, out_vslice_dummy_var_137: i32, out_vslice_dummy_var_138: i32, out_vslice_dummy_var_139: i32, out_vslice_dummy_var_140: i32, out_vslice_dummy_var_141: i32);
  modifies $M.39, $M.0, $M.42, $M.40, $M.1, $M.3, $CurrAddr, $M.5, $M.4, assertsPassed, $M.7, $M.8, $M.9, $M.10, $M.11, $M.14, $M.16, $M.2, $M.47, $M.41, $M.48, $M.49, $M.26, $M.50, $M.52, $M.33, $M.35, $M.28, $M.29, $M.30, $M.31, $M.32, $M.44, $M.45, $M.46, $M.43, $M.53, $M.51, $M.34, $M.23;



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();


