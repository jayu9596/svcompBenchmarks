var $M.0: [ref]i8;

var $M.1: [ref]i32;

var $M.2: [ref]i32;

var $M.3: [ref]ref;

var $M.4: [ref]i32;

var $M.5: [ref]ref;

var $M.6: [ref]ref;

var $M.7: [ref]i8;

var $M.8: ref;

var $M.9: i32;

var $M.10: ref;

var $M.11: i32;

var $M.12: ref;

var $M.13: i32;

var $M.14: ref;

var $M.15: i32;

var $M.16: ref;

var $M.17: [ref]i32;

var $M.18: [ref]i32;

var $M.19: ref;

var $M.20: [ref]i32;

var $M.21: [ref]ref;

var $M.22: [ref]ref;

var $M.23: [ref]ref;

var $M.24: [ref]ref;

var $M.25: [ref]i64;

var $M.26: [ref]i64;

var $M.27: i32;

var $M.28: ref;

var $M.29: [ref]i32;

var $M.30: [ref]ref;

var $M.31: i32;

var $M.32: i32;

var $M.33: i32;

var $M.34: i32;

var $M.35: ref;

var $M.36: ref;

var $M.37: i32;

var $M.38: i32;

var $M.39: i32;

var $M.40: i32;

var $M.41: i32;

var $M.42: i32;

var $M.43: i32;

var $M.44: i32;

var $M.45: [ref]i8;

var $M.49: [ref]i8;

var $M.50: [ref]i8;

var $M.56: [ref]i8;

var $M.57: [ref]i8;

var $M.58: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 398407);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 1028);

const __ksymtab_dm_register_path_selector: ref;

axiom __ksymtab_dm_register_path_selector == $sub.ref(0, 2068);

const {:count 26} __kstrtab_dm_register_path_selector: ref;

axiom __kstrtab_dm_register_path_selector == $sub.ref(0, 3118);

const _mpio_cache: ref;

axiom _mpio_cache == $sub.ref(0, 4150);

const multipath_target: ref;

axiom multipath_target == $sub.ref(0, 5390);

const kmultipathd: ref;

axiom kmultipathd == $sub.ref(0, 6422);

const kmpath_handlerd: ref;

axiom kmpath_handlerd == $sub.ref(0, 7454);

const {:count 28} __kstrtab_dm_unregister_path_selector: ref;

axiom __kstrtab_dm_unregister_path_selector == $sub.ref(0, 8506);

const _path_selectors: ref;

axiom _path_selectors == $sub.ref(0, 9546);

const _ps_lock: ref;

axiom _ps_lock == $sub.ref(0, 10730);

const ldv_retval_2: ref;

axiom ldv_retval_2 == $sub.ref(0, 11758);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 12786);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 13814);

const ldv_work_2_1: ref;

axiom ldv_work_2_1 == $sub.ref(0, 14842);

const ldv_work_2_3: ref;

axiom ldv_work_2_3 == $sub.ref(0, 15870);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 16898);

const ldv_work_1_0: ref;

axiom ldv_work_1_0 == $sub.ref(0, 17926);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 18954);

const ldv_state_variable_3: ref;

axiom ldv_state_variable_3 == $sub.ref(0, 19982);

const ldv_work_2_2: ref;

axiom ldv_work_2_2 == $sub.ref(0, 21010);

const ldv_work_struct_2_2: ref;

axiom ldv_work_struct_2_2 == $sub.ref(0, 22042);

const ldv_work_struct_1_2: ref;

axiom ldv_work_struct_1_2 == $sub.ref(0, 23074);

const ldv_work_struct_2_0: ref;

axiom ldv_work_struct_2_0 == $sub.ref(0, 24106);

const ldv_work_struct_2_3: ref;

axiom ldv_work_struct_2_3 == $sub.ref(0, 25138);

const ldv_work_1_2: ref;

axiom ldv_work_1_2 == $sub.ref(0, 26166);

const ldv_work_2_0: ref;

axiom ldv_work_2_0 == $sub.ref(0, 27194);

const ldv_work_1_1: ref;

axiom ldv_work_1_1 == $sub.ref(0, 28222);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 29250);

const multipath_target_group1: ref;

axiom multipath_target_group1 == $sub.ref(0, 30282);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 31310);

const ldv_work_1_3: ref;

axiom ldv_work_1_3 == $sub.ref(0, 32338);

const ldv_work_struct_2_1: ref;

axiom ldv_work_struct_2_1 == $sub.ref(0, 33370);

const ldv_work_struct_1_3: ref;

axiom ldv_work_struct_1_3 == $sub.ref(0, 34402);

const ldv_work_struct_1_1: ref;

axiom ldv_work_struct_1_1 == $sub.ref(0, 35434);

const ldv_work_struct_1_0: ref;

axiom ldv_work_struct_1_0 == $sub.ref(0, 36466);

const ldv_module_refcounter: ref;

axiom ldv_module_refcounter == $sub.ref(0, 37494);

const __ksymtab_dm_unregister_path_selector: ref;

axiom __ksymtab_dm_unregister_path_selector == $sub.ref(0, 38534);

const {:count 19} .str.1: ref;

axiom .str.1 == $sub.ref(0, 39577);

const {:count 9} .str.2: ref;

axiom .str.2 == $sub.ref(0, 40610);

const {:count 10} .str.6: ref;

axiom .str.6 == $sub.ref(0, 41644);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const current_task: ref;

axiom current_task == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 17} .str.28: ref;

axiom .str.28 == $sub.ref(0, 42685);

const {:count 16} .str.53: ref;

axiom .str.53 == $sub.ref(0, 43725);

const {:count 95} .str.54: ref;

axiom .str.54 == $sub.ref(0, 44844);

const {:count 14} .str.55: ref;

axiom .str.55 == $sub.ref(0, 45882);

const {:count 13} .str.56: ref;

axiom .str.56 == $sub.ref(0, 46919);

const {:count 13} .str.57: ref;

axiom .str.57 == $sub.ref(0, 47956);

const {:count 15} .str.58: ref;

axiom .str.58 == $sub.ref(0, 48995);

const {:count 10} .str.59: ref;

axiom .str.59 == $sub.ref(0, 50029);

const {:count 72} .str.60: ref;

axiom .str.60 == $sub.ref(0, 51125);

const {:count 61} .str.61: ref;

axiom .str.61 == $sub.ref(0, 52210);

const {:count 45} .str.5: ref;

axiom .str.5 == $sub.ref(0, 53279);

const system_wq: ref;

axiom system_wq == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const {:count 77} .str.65: ref;

axiom .str.65 == $sub.ref(0, 54380);

const {:count 72} .str.64: ref;

axiom .str.64 == $sub.ref(0, 55476);

const {:count 5} .str.63: ref;

axiom .str.63 == $sub.ref(0, 56505);

const {:count 68} .str.62: ref;

axiom .str.62 == $sub.ref(0, 57597);

const {:count 9} .str.66: ref;

axiom .str.66 == $sub.ref(0, 58630);

const {:count 4} .str.67: ref;

axiom .str.67 == $sub.ref(0, 59658);

const {:count 18} .str.68: ref;

axiom .str.68 == $sub.ref(0, 60700);

const {:count 20} .str.69: ref;

axiom .str.69 == $sub.ref(0, 61744);

const {:count 24} .str.70: ref;

axiom .str.70 == $sub.ref(0, 62792);

const {:count 28} .str.71: ref;

axiom .str.71 == $sub.ref(0, 63844);

const {:count 3} .str.72: ref;

axiom .str.72 == $sub.ref(0, 64871);

const {:count 6} .str.73: ref;

axiom .str.73 == $sub.ref(0, 65901);

const {:count 4} .str.74: ref;

axiom .str.74 == $sub.ref(0, 66929);

const {:count 7} .str.75: ref;

axiom .str.75 == $sub.ref(0, 67960);

const {:count 2} .str.77: ref;

axiom .str.77 == $sub.ref(0, 68986);

const {:count 2} .str.78: ref;

axiom .str.78 == $sub.ref(0, 70012);

const {:count 10} .str.76: ref;

axiom .str.76 == $sub.ref(0, 71046);

const {:count 4} .str.79: ref;

axiom .str.79 == $sub.ref(0, 72074);

const {:count 88} .str.3: ref;

axiom .str.3 == $sub.ref(0, 73186);

const {:count 65} .str.4: ref;

axiom .str.4 == $sub.ref(0, 74275);

const {:count 199} .str.80: ref;

axiom .str.80 == $sub.ref(0, 75498);

const {:count 34} .str.16: ref;

axiom .str.16 == $sub.ref(0, 76556);

const {:count 38} .str.17: ref;

axiom .str.17 == $sub.ref(0, 77618);

const {:count 25} .str.18: ref;

axiom .str.18 == $sub.ref(0, 78667);

const {:count 31} .str.19: ref;

axiom .str.19 == $sub.ref(0, 79722);

const {:count 30} .str.20: ref;

axiom .str.20 == $sub.ref(0, 80776);

const {:count 24} .str.39: ref;

axiom .str.39 == $sub.ref(0, 81824);

const {:count 32} .str.40: ref;

axiom .str.40 == $sub.ref(0, 82880);

const {:count 36} .str.41: ref;

axiom .str.41 == $sub.ref(0, 83940);

const {:count 33} .str.42: ref;

axiom .str.42 == $sub.ref(0, 84997);

const {:count 27} .str.43: ref;

axiom .str.43 == $sub.ref(0, 86048);

const {:count 16} .str.47: ref;

axiom .str.47 == $sub.ref(0, 87088);

const {:count 21} .str.48: ref;

axiom .str.48 == $sub.ref(0, 88133);

const {:count 33} .str.49: ref;

axiom .str.49 == $sub.ref(0, 89190);

const {:count 42} .str.50: ref;

axiom .str.50 == $sub.ref(0, 90256);

const {:count 34} .str.51: ref;

axiom .str.51 == $sub.ref(0, 91314);

const {:count 35} .str.52: ref;

axiom .str.52 == $sub.ref(0, 92373);

const {:count 37} .str.44: ref;

axiom .str.44 == $sub.ref(0, 93434);

const {:count 27} .str.45: ref;

axiom .str.45 == $sub.ref(0, 94485);

const {:count 33} .str.46: ref;

axiom .str.46 == $sub.ref(0, 95542);

const .str: ref;

axiom .str == $sub.ref(0, 96572);

const {:count 40} .str.33: ref;

axiom .str.33 == $sub.ref(0, 97636);

const {:count 11} .str.34: ref;

axiom .str.34 == $sub.ref(0, 98671);

const {:count 30} .str.35: ref;

axiom .str.35 == $sub.ref(0, 99725);

const {:count 25} .str.36: ref;

axiom .str.36 == $sub.ref(0, 100774);

const {:count 3} .str.37: ref;

axiom .str.37 == $sub.ref(0, 101801);

const {:count 3} .str.38: ref;

axiom .str.38 == $sub.ref(0, 102828);

const {:count 31} .str.25: ref;

axiom .str.25 == $sub.ref(0, 103883);

const {:count 41} .str.26: ref;

axiom .str.26 == $sub.ref(0, 104948);

const {:count 48} .str.27: ref;

axiom .str.27 == $sub.ref(0, 106020);

const {:count 27} .str.29: ref;

axiom .str.29 == $sub.ref(0, 107071);

const {:count 16} .str.30: ref;

axiom .str.30 == $sub.ref(0, 108111);

const {:count 20} .str.31: ref;

axiom .str.31 == $sub.ref(0, 109155);

const {:count 39} .str.32: ref;

axiom .str.32 == $sub.ref(0, 110218);

const {:count 19} .str.21: ref;

axiom .str.21 == $sub.ref(0, 111261);

const {:count 20} .str.22: ref;

axiom .str.22 == $sub.ref(0, 112305);

const {:count 17} .str.23: ref;

axiom .str.23 == $sub.ref(0, 113346);

const {:count 15} .str.24: ref;

axiom .str.24 == $sub.ref(0, 114385);

const {:count 12} .str.7: ref;

axiom .str.7 == $sub.ref(0, 115421);

const {:count 47} .str.8: ref;

axiom .str.8 == $sub.ref(0, 116492);

const {:count 10} .str.9: ref;

axiom .str.9 == $sub.ref(0, 117526);

const {:count 8} .str.10: ref;

axiom .str.10 == $sub.ref(0, 118558);

const {:count 63} .str.11: ref;

axiom .str.11 == $sub.ref(0, 119645);

const {:count 18} .str.12: ref;

axiom .str.12 == $sub.ref(0, 120687);

const {:count 16} .str.13: ref;

axiom .str.13 == $sub.ref(0, 121727);

const {:count 71} .str.14: ref;

axiom .str.14 == $sub.ref(0, 122822);

const {:count 52} .str.15: ref;

axiom .str.15 == $sub.ref(0, 123898);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 124930);

const {:count 3} .str.1.176: ref;

axiom .str.1.176 == $sub.ref(0, 125957);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 126995);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 128023);

const dm_register_path_selector: ref;

axiom dm_register_path_selector == $sub.ref(0, 129055);

procedure dm_register_path_selector($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation dm_register_path_selector($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p12: ref;
  var $i11: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 0} $p1 := _alloc_path_selector($p0);
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1} down_write(_ps_lock);
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} $p7 := __find_path_selector_type($p6);
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(96, 1));
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4} list_add($p12, _path_selectors);
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5} up_write(_ps_lock);
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    $i4 := $i11;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p1);
    goto corral_source_split_18;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3} kfree($p10);
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 17);
    goto $bb7;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 12);
    goto $bb3;
}



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 130087);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const _alloc_path_selector: ref;

axiom _alloc_path_selector == $sub.ref(0, 131119);

procedure _alloc_path_selector($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation _alloc_path_selector($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6} $p1 := kzalloc(112, 208);
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p0);
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 7} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p6, $p7, 96, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_2;
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const down_write: ref;

axiom down_write == $sub.ref(0, 132151);

procedure down_write($p0: ref);
  free requires assertsPassed;



implementation down_write($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    return;
}



const __find_path_selector_type: ref;

axiom __find_path_selector_type == $sub.ref(0, 133183);

procedure __find_path_selector_type($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation __find_path_selector_type($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p7: ref;
  var $p14: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.0, _path_selectors);
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref($sub.ref(0, 96), 112));
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 96), 112)), $mul.ref(96, 1));
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, $p2i.ref.i64(_path_selectors));
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p14 := $0.ref;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    $r := $p14;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    $p7 := $p3;
    goto $bb4;

  $bb4:
    call $p9, $p10, $i11, $i12, $p13, $p16, $p17, $p18, $p19, $p20, $i21, $i22, $p7 := __find_path_selector_type_loop_$bb4($p0, $p9, $p10, $i11, $i12, $p13, $p16, $p17, $p18, $p19, $p20, $i21, $i22, $p7);
    goto $bb4_last;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    call {:si_unique_call 8} $i11 := strcmp($p0, $p10);
    call {:si_unique_call 9} {:cexpr "tmp"} boogie_si_record_i32($i11);
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    $p13 := $p7;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 112)), $mul.ref(96, 1)), $mul.ref(0, 1));
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p18, $mul.ref($sub.ref(0, 96), 112));
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p18, $mul.ref($sub.ref(0, 96), 112)), $mul.ref(96, 1));
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, $p2i.ref.i64(_path_selectors));
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i22 == 1);
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    $p7 := $p19;
    goto $bb10_dummy;

  $bb6:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    $p14 := $p13;
    goto $bb8;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_51;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 134215);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} free_($p0);
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    return;
}



const list_add: ref;

axiom list_add == $sub.ref(0, 135247);

procedure list_add($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} __list_add($p0, $p1, $p3);
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    return;
}



const up_write: ref;

axiom up_write == $sub.ref(0, 136279);

procedure up_write($p0: ref);
  free requires assertsPassed;



implementation up_write($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    return;
}



const __list_add: ref;

axiom __list_add == $sub.ref(0, 137311);

procedure __list_add($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __list_add($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 138343);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 12} $free($p0);
    return;
}



const strcmp: ref;

axiom strcmp == $sub.ref(0, 139375);

procedure strcmp($p0: ref, $p1: ref) returns ($r: i32);



const kzalloc: ref;

axiom kzalloc == $sub.ref(0, 140407);

procedure kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $i2: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} {:cexpr "kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 14} {:cexpr "kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    $i2 := $or.i32($i1, 32768);
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    call {:si_unique_call 15} $p3 := kmalloc($i0, $i2);
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 141439);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const kmalloc: ref;

axiom kmalloc == $sub.ref(0, 142471);

procedure kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} {:cexpr "kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 17} {:cexpr "kmalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    call {:si_unique_call 18} $p2 := __kmalloc($i0, $i1);
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __kmalloc: ref;

axiom __kmalloc == $sub.ref(0, 143503);

procedure __kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} {:cexpr "__kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 20} {:cexpr "__kmalloc:arg:t"} boogie_si_record_i32($i1);
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    call {:si_unique_call 21} $p2 := ldv_malloc($i0);
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_malloc: ref;

axiom ldv_malloc == $sub.ref(0, 144535);

procedure ldv_malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_malloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 22} {:cexpr "ldv_malloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 1} true;
    call {:si_unique_call 23} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 24} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 25} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} $p4 := malloc($i0);
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 1} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 1} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 1} true;
    call {:si_unique_call 27} __VERIFIER_assume($i7);
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    $p3 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb3;
}



const malloc: ref;

axiom malloc == $sub.ref(0, 145567);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 28} $r := $malloc($i0);
    return;
}



const dm_unregister_path_selector: ref;

axiom dm_unregister_path_selector == $sub.ref(0, 146599);

procedure dm_unregister_path_selector($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dm_unregister_path_selector($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} down_write(_ps_lock);
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} $p3 := __find_path_selector_type($p2);
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 112)), $mul.ref(96, 1));
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} list_del($p7);
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} up_write(_ps_lock);
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p3);
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} kfree($p8);
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 31} up_write(_ps_lock);
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;
}



const list_del: ref;

axiom list_del == $sub.ref(0, 147631);

procedure list_del($p0: ref);
  free requires assertsPassed;



implementation list_del($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    return;
}



const multipath_ctr: ref;

axiom multipath_ctr == $sub.ref(0, 148663);

procedure multipath_ctr($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.0, $M.29, $CurrAddr, $M.27, $M.17, $M.18, $M.20, $M.21, $M.22, $M.23, $M.24, $M.7, $M.25, $M.26, $M.9, $M.11, $M.13, $M.15, $M.10, $M.12, $M.14, $M.16, assertsPassed;



implementation multipath_ctr($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p9: ref;
  var $p11: ref;
  var $p13: ref;
  var $p15: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $i25: i32;
  var $i26: i1;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $i46: i32;
  var $i47: i1;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $i53: i1;
  var $p56: ref;
  var $p57: ref;
  var $i58: i1;
  var $i59: i8;
  var $i60: i1;
  var $p61: ref;
  var $p62: ref;
  var $i63: i64;
  var $i64: i32;
  var $p65: ref;
  var $i66: i32;
  var $p67: ref;
  var $i68: i32;
  var $i69: i32;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i32;
  var $p74: ref;
  var $i75: i32;
  var $i76: i32;
  var $i77: i32;
  var $i78: i1;
  var $p79: ref;
  var $i80: i32;
  var $i81: i1;
  var $i55: i32;
  var $i82: i32;
  var $i54: i32;
  var $p83: ref;
  var $i84: i32;
  var $i85: i1;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $i27: i32;
  var $i24: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} $p3 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} $p4 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} $p5 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 38} {:cexpr "multipath_ctr:arg:argc"} boogie_si_record_i32($i1);
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p7, 0);
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p9, 1024);
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p11, .str.16);
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(1, 16)), $mul.ref(0, 1));
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p13, 0);
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(1, 16)), $mul.ref(4, 1));
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p15, 1024);
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(1, 16)), $mul.ref(8, 1));
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p17, .str.17);
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p18, $i1);
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p19, $p2);
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} $p20 := alloc_multipath($p0);
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    $i22 := $eq.i64($i21, 0);
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} $i25 := parse_features($p4, $p20);
    call {:si_unique_call 41} {:cexpr "r"} boogie_si_record_i32($i25);
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} $i28 := parse_hw_handler($p4, $p20);
    call {:si_unique_call 44} {:cexpr "r"} boogie_si_record_i32($i28);
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p3);
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p20, $mul.ref(0, 536)), $mul.ref(112, 1));
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} $i33 := dm_read_arg($p30, $p4, $p31, $p32);
    call {:si_unique_call 46} {:cexpr "r"} boogie_si_record_i32($i33);
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p3);
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($p35, $mul.ref(1, 16));
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 47} $i38 := dm_read_arg($p36, $p4, $p5, $p37);
    call {:si_unique_call 48} {:cexpr "r"} boogie_si_record_i32($i38);
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p20, $mul.ref(0, 536)), $mul.ref(112, 1));
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i41, 0);
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p20, $mul.ref(0, 536)), $mul.ref(112, 1));
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i46, 0);
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i47 == 1);
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.4, $p51);
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    $i54 := 0;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i53 == 1);
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p20, $mul.ref(0, 536)), $mul.ref(112, 1));
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    $i84 := $load.i32($M.0, $p83);
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    $i85 := $ne.i32($i84, $i54);
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(36, 1));
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p87, 1);
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(40, 1));
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p88, 1);
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(44, 1));
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p89, 1);
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    $i24 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    $r := $i24;
    return;

  $bb44:
    assume $i85 == 1;
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p86, .str.20);
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    $i27 := $sub.i32(0, 22);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} free_multipath($p20);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    $i24 := $i27;
    goto $bb3;

  SeqInstr_1:
    assume !assertsPassed;
    return;

  $bb30:
    assume $i53 == 1;
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    $i55 := 0;
    goto $bb33;

  $bb33:
    call $p56, $p57, $i58, $i59, $i60, $p61, $p65, $i66, $p67, $i68, $i69, $p70, $p71, $p72, $i73, $p74, $i75, $i76, $i77, $i78, $p79, $i80, $i81, $i55, $i82 := multipath_ctr_loop_$bb33($p4, $p5, $p20, $p51, $p56, $p57, $i58, $i59, $i60, $p61, $p65, $i66, $p67, $i68, $i69, $p70, $p71, $p72, $i73, $p74, $i75, $i76, $i77, $i78, $p79, $i80, $i81, $i55, $i82);
    goto $bb33_last;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} $p56 := parse_priority_group($p4, $p20);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p56);
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} $i58 := IS_ERR($p57);
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    $i59 := $zext.i1.i8($i58);
    call {:si_unique_call 51} {:cexpr "tmp___0"} boogie_si_record_i8($i59);
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    $i60 := $trunc.i8.i1($i59);
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    $p61 := $p56;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p20, $mul.ref(0, 536)), $mul.ref(236, 1));
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.0, $p65);
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p56, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.0, $p67);
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    $i69 := $add.i32($i66, $i68);
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p20, $mul.ref(0, 536)), $mul.ref(236, 1));
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p70, $i69);
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p56, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p20, $mul.ref(0, 536)), $mul.ref(120, 1));
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} list_add_tail($p71, $p72);
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    $i73 := $add.i32($i55, 1);
    call {:si_unique_call 56} {:cexpr "pg_count"} boogie_si_record_i32($i73);
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p56, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p74, $i73);
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.0, $p5);
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    $i76 := $sub.i32($i75, 1);
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, $i76);
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.0, $p5);
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $i78 := $eq.i32($i77, 0);
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i80 := $load.i32($M.4, $p51);
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    $i81 := $ne.i32($i80, 0);
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    $i82 := $i73;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    $i54 := $i82;
    goto $bb32;

  $bb41:
    assume $i81 == 1;
    assume {:verifier.code 0} true;
    $i55 := $i73;
    goto $bb41_dummy;

  $bb38:
    assume $i78 == 1;
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p20, $mul.ref(0, 536)), $mul.ref(256, 1));
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p79, $p56);
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb35:
    assume $i60 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p61);
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} $i63 := PTR_ERR($p62);
    call {:si_unique_call 53} {:cexpr "tmp"} boogie_si_record_i64($i63);
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    $i64 := $trunc.i64.i32($i63);
    call {:si_unique_call 54} {:cexpr "r"} boogie_si_record_i32($i64);
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    $i27 := $i64;
    goto $bb7;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb24:
    assume $i47 == 1;
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.0, $p5);
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i48, 0);
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i49 == 1);
    goto $bb26;

  $bb27:
    assume {:verifier.code 0} true;
    assume $i49 == 1;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p50, .str.19);
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    $i27 := $sub.i32(0, 22);
    goto $bb7;

  $bb18:
    assume $i42 == 1;
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p5);
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb21, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb20;

  $bb21:
    assume {:verifier.code 0} true;
    assume $i44 == 1;
    goto $bb22;

  $bb15:
    assume $i39 == 1;
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    $i27 := $i38;
    goto $bb7;

  $bb12:
    assume $i34 == 1;
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    $i27 := $i33;
    goto $bb7;

  $bb9:
    assume $i29 == 1;
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    $i27 := $i28;
    goto $bb7;

  $bb5:
    assume $i26 == 1;
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $i27 := $i25;
    goto $bb7;

  $bb1:
    assume $i22 == 1;
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p23, .str.18);
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32(0, 22);
    goto $bb3;

  $bb41_dummy:
    assume false;
    return;

  $bb33_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_211;
}



const multipath_dtr: ref;

axiom multipath_dtr == $sub.ref(0, 149695);

procedure multipath_dtr($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.20, $M.21, $M.22, $M.23, $M.24, $M.7, $M.25, $M.26, $M.9, $M.11, $M.13, $M.15, $CurrAddr, $M.27, $M.10, $M.12, $M.14, $M.16, assertsPassed;



implementation multipath_dtr($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} flush_multipath_work($p3);
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 58} free_multipath($p3);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_7:
    assume !assertsPassed;
    return;
}



const multipath_map: ref;

axiom multipath_map == $sub.ref(0, 150727);

procedure multipath_map($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.10, $M.9, $M.12, $M.11, $M.14, $M.13, $M.16, $M.15;



implementation multipath_map($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} $i3 := __multipath_map($p0, $p1, $p2, $0.ref, $0.ref);
    call {:si_unique_call 60} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const multipath_clone_and_map: ref;

axiom multipath_clone_and_map == $sub.ref(0, 151759);

procedure multipath_clone_and_map($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.10, $M.9, $M.12, $M.11, $M.14, $M.13, $M.16, $M.15;



implementation multipath_clone_and_map($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} $i4 := __multipath_map($p0, $0.ref, $p2, $p1, $p3);
    call {:si_unique_call 62} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const multipath_release_clone: ref;

axiom multipath_release_clone == $sub.ref(0, 152791);

procedure multipath_release_clone($p0: ref);
  free requires assertsPassed;



implementation multipath_release_clone($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 63} blk_put_request($p0);
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    return;
}



const multipath_end_io: ref;

axiom multipath_end_io == $sub.ref(0, 153823);

procedure multipath_end_io($p0: ref, $p1: ref, $i2: i32, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.10, $M.9, $M.12, $M.11, $M.14, $M.13, $M.16, $M.15;



implementation multipath_end_io($p0: ref, $p1: ref, $i2: i32, $p3: ref) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $i12: i32;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var vslice_dummy_var_15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 64} {:cexpr "multipath_end_io:arg:error"} boogie_si_record_i32($i2);
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p3);
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} $i14 := ldv__builtin_expect($i13, 0);
    call {:si_unique_call 66} {:cexpr "tmp"} boogie_si_record_i64($i14);
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 68} $i16 := do_end_io($p6, $p1, $i2, $p9);
    call {:si_unique_call 69} {:cexpr "r"} boogie_si_record_i32($i16);
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p9, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 71} clear_mapinfo($p6, $p3);
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb5:
    assume $i20 == 1;
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p18, $mul.ref(0, 272)), $mul.ref(16, 1));
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 72)), $mul.ref(24, 1));
    $p24 := $add.ref($add.ref($add.ref($p22, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 96)), $mul.ref(88, 1));
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i28, 0);
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i29 == 1;
    $p30 := $add.ref($add.ref($add.ref($p22, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 96)), $mul.ref(88, 1));
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p18, $mul.ref(0, 272)), $mul.ref(32, 1));
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p9, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    $i36 := $load.i64($M.0, $p35);
    call {:si_unique_call 70} vslice_dummy_var_15 := devirtbounce.1($p33, $p23, $p34, $i36);
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i15 == 1;
    call {:si_unique_call 67} devirtbounce(0, .str.80, 1314, 12);
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call multipath_end_io_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const multipath_presuspend: ref;

axiom multipath_presuspend == $sub.ref(0, 154855);

procedure multipath_presuspend($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation multipath_presuspend($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var vslice_dummy_var_16: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 72} vslice_dummy_var_16 := queue_if_no_path($p3, 0, 1);
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    return;
}



const multipath_postsuspend: ref;

axiom multipath_postsuspend == $sub.ref(0, 155887);

procedure multipath_postsuspend($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.20, $M.21, $M.22, $M.23, $M.24, $M.7, $M.25, $M.26, $M.9, $M.11, $M.13, $M.15, $CurrAddr, $M.10, $M.12, $M.14, $M.16;



implementation multipath_postsuspend($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 536)), $mul.ref(376, 1));
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 73} mutex_lock_nested($p4, 0);
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 74} flush_multipath_work($p3);
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 536)), $mul.ref(376, 1));
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 75} mutex_unlock($p5);
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    return;
}



const multipath_resume: ref;

axiom multipath_resume == $sub.ref(0, 156919);

procedure multipath_resume($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation multipath_resume($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $i8: i8;
  var $i9: i8;
  var $i10: i8;
  var $p11: ref;
  var $i12: i8;
  var $i13: i8;
  var $i14: i8;
  var $i15: i8;
  var $i16: i8;
  var $p17: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 536)), $mul.ref(40, 1));
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 76} $p5 := spinlock_check($p4);
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 77} $i6 := _raw_spin_lock_irqsave($p5);
    call {:si_unique_call 78} {:cexpr "flags"} boogie_si_record_i64($i6);
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 536)), $mul.ref(268, 1));
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    $i9 := $lshr.i8($i8, 2);
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    $i10 := $and.i8($i9, 1);
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 536)), $mul.ref(268, 1));
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    $i13 := $and.i8($i10, 1);
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    $i14 := $shl.i8($i13, 1);
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $i15 := $and.i8($i12, $sub.i8(0, 3));
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    $i16 := $or.i8($i15, $i14);
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p11, $i16);
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 536)), $mul.ref(40, 1));
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 79} spin_unlock_irqrestore($p17, $i6);
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    return;
}



const multipath_status: ref;

axiom multipath_status == $sub.ref(0, 157951);

procedure multipath_status($p0: ref, $i1: i32, $i2: i32, $p3: ref, $i4: i32);
  free requires assertsPassed;



implementation multipath_status($p0: ref, $i1: i32, $i2: i32, $p3: ref, $i4: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $i12: i1;
  var $i13: i64;
  var $p14: ref;
  var $i15: i32;
  var $i16: i64;
  var $p17: ref;
  var $i18: i8;
  var $i19: i8;
  var $i20: i32;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $i27: i1;
  var $i28: i64;
  var $p29: ref;
  var $i30: i32;
  var $i31: i64;
  var $p32: ref;
  var $i33: i8;
  var $i34: i8;
  var $i35: i8;
  var $i36: i32;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $i40: i32;
  var $i41: i32;
  var $p42: ref;
  var $i43: i32;
  var $i44: i1;
  var $i45: i32;
  var $i46: i32;
  var $p47: ref;
  var $i48: i8;
  var $i49: i8;
  var $i50: i8;
  var $i51: i32;
  var $i52: i32;
  var $i53: i32;
  var $i54: i32;
  var $i55: i32;
  var $p56: ref;
  var $p57: ref;
  var $i58: i8;
  var $i59: i32;
  var $i60: i1;
  var $i61: i1;
  var $i62: i64;
  var $p63: ref;
  var $i64: i32;
  var $i65: i64;
  var $i66: i32;
  var $i67: i32;
  var $i68: i32;
  var $i69: i32;
  var $p70: ref;
  var $i71: i32;
  var $i72: i1;
  var $i73: i1;
  var $i74: i64;
  var $p75: ref;
  var $i76: i32;
  var $i77: i64;
  var $p78: ref;
  var $i79: i32;
  var $i80: i32;
  var $i81: i32;
  var $i82: i32;
  var $i83: i32;
  var $p84: ref;
  var $i85: i32;
  var $i86: i1;
  var $i87: i1;
  var $i88: i64;
  var $p89: ref;
  var $i90: i32;
  var $i91: i64;
  var $p92: ref;
  var $i93: i32;
  var $i94: i32;
  var $i95: i32;
  var $i96: i32;
  var $i97: i32;
  var $p98: ref;
  var $p99: ref;
  var $i100: i8;
  var $i101: i32;
  var $i102: i1;
  var $i103: i1;
  var $i104: i64;
  var $p105: ref;
  var $i106: i32;
  var $i107: i64;
  var $i108: i32;
  var $i109: i32;
  var $i110: i32;
  var $i111: i32;
  var $i26: i32;
  var $p112: ref;
  var $p113: ref;
  var $i114: i64;
  var $i115: i1;
  var $i116: i1;
  var $i117: i1;
  var $i118: i64;
  var $p119: ref;
  var $i120: i32;
  var $i121: i64;
  var $i122: i32;
  var $i123: i32;
  var $i124: i32;
  var $i126: i1;
  var $i127: i64;
  var $p128: ref;
  var $i129: i32;
  var $i130: i64;
  var $p131: ref;
  var $p132: ref;
  var $i133: i32;
  var $i134: i32;
  var $i135: i32;
  var $i125: i32;
  var $i136: i1;
  var $i137: i64;
  var $p138: ref;
  var $i139: i32;
  var $i140: i64;
  var $p141: ref;
  var $i142: i32;
  var $i143: i32;
  var $i144: i32;
  var $i145: i32;
  var $p146: ref;
  var $p147: ref;
  var $i148: i64;
  var $i149: i1;
  var $p150: ref;
  var $p151: ref;
  var $p152: ref;
  var $i153: i32;
  var $p155: ref;
  var $p156: ref;
  var $i157: i64;
  var $i158: i1;
  var $p159: ref;
  var $p160: ref;
  var $p161: ref;
  var $i162: i32;
  var $p164: ref;
  var $i165: i32;
  var $i166: i1;
  var $i167: i32;
  var $i163: i32;
  var $i154: i32;
  var $i168: i1;
  var $i169: i64;
  var $p170: ref;
  var $i171: i32;
  var $i172: i64;
  var $i173: i32;
  var $i174: i32;
  var $i175: i32;
  var $i176: i1;
  var $i177: i1;
  var $i178: i1;
  var $p180: ref;
  var $p181: ref;
  var $p182: ref;
  var $p183: ref;
  var $i184: i64;
  var $p185: ref;
  var $i186: i64;
  var $i187: i1;
  var $p190: ref;
  var $i191: i32;
  var $i192: i1;
  var $p194: ref;
  var $p195: ref;
  var $i196: i64;
  var $i197: i64;
  var $i198: i1;
  var $i199: i8;
  var $i193: i8;
  var $i200: i1;
  var $i201: i64;
  var $p202: ref;
  var $i203: i32;
  var $i204: i64;
  var $i205: i32;
  var $i206: i32;
  var $i207: i32;
  var $i208: i32;
  var $p210: ref;
  var $p211: ref;
  var $p212: ref;
  var $p213: ref;
  var $i214: i64;
  var $i215: i1;
  var $p217: ref;
  var $p218: ref;
  var $p219: ref;
  var $p220: ref;
  var $p221: ref;
  var $i222: i64;
  var $p223: ref;
  var $i224: i32;
  var $i225: i32;
  var $i226: i32;
  var $i228: i1;
  var $i229: i64;
  var $p230: ref;
  var $i231: i32;
  var $i232: i64;
  var $i233: i32;
  var $i234: i32;
  var $i235: i32;
  var $i227: i32;
  var $i236: i1;
  var $i237: i64;
  var $p238: ref;
  var $i239: i32;
  var $i240: i64;
  var $p241: ref;
  var $i242: i32;
  var $p244: ref;
  var $p245: ref;
  var $p246: ref;
  var $i247: i32;
  var $i248: i32;
  var $i249: i32;
  var $i250: i32;
  var $p252: ref;
  var $p253: ref;
  var $p254: ref;
  var $p255: ref;
  var $i256: i64;
  var $p257: ref;
  var $i258: i64;
  var $i259: i1;
  var $i263: i1;
  var $i264: i64;
  var $p265: ref;
  var $i266: i32;
  var $i267: i64;
  var $p269: ref;
  var $p270: ref;
  var $p271: ref;
  var $p272: ref;
  var $p273: ref;
  var $i274: i32;
  var $i275: i1;
  var $p276: ref;
  var $p277: ref;
  var $i278: i32;
  var $i279: i32;
  var $i280: i32;
  var $i281: i32;
  var $p283: ref;
  var $p284: ref;
  var $p285: ref;
  var $p286: ref;
  var $i287: i64;
  var $i288: i1;
  var $p290: ref;
  var $p291: ref;
  var $p292: ref;
  var $p293: ref;
  var $p294: ref;
  var $p295: ref;
  var $i296: i64;
  var $p297: ref;
  var $i298: i32;
  var $i299: i32;
  var $i300: i32;
  var $i301: i32;
  var $p303: ref;
  var $p304: ref;
  var $p305: ref;
  var $p306: ref;
  var $i307: i64;
  var $i308: i1;
  var $i261: i32;
  var $p262: ref;
  var $i309: i32;
  var $i260: i32;
  var $p311: ref;
  var $p312: ref;
  var $p313: ref;
  var $p314: ref;
  var $i315: i64;
  var $i316: i1;
  var $i188: i32;
  var $p189: ref;
  var $p318: ref;
  var $p319: ref;
  var $p320: ref;
  var $p321: ref;
  var $i322: i64;
  var $p323: ref;
  var $i324: i64;
  var $i325: i1;
  var $i328: i1;
  var $i329: i64;
  var $p330: ref;
  var $i331: i32;
  var $i332: i64;
  var $p334: ref;
  var $p335: ref;
  var $p336: ref;
  var $p337: ref;
  var $i338: i32;
  var $i339: i32;
  var $i340: i32;
  var $p342: ref;
  var $p343: ref;
  var $p344: ref;
  var $p345: ref;
  var $i346: i64;
  var $i347: i1;
  var $p349: ref;
  var $p350: ref;
  var $p351: ref;
  var $p352: ref;
  var $p353: ref;
  var $i354: i64;
  var $p355: ref;
  var $i356: i32;
  var $i357: i32;
  var $i358: i32;
  var $i360: i1;
  var $i361: i64;
  var $p362: ref;
  var $i363: i32;
  var $i364: i64;
  var $i365: i32;
  var $i366: i32;
  var $i367: i32;
  var $i359: i32;
  var $i368: i1;
  var $i369: i64;
  var $p370: ref;
  var $i371: i32;
  var $i372: i64;
  var $p373: ref;
  var $i374: i32;
  var $p376: ref;
  var $p377: ref;
  var $p378: ref;
  var $i379: i32;
  var $i380: i32;
  var $i381: i32;
  var $i382: i32;
  var $p384: ref;
  var $p385: ref;
  var $p386: ref;
  var $p387: ref;
  var $i388: i64;
  var $p389: ref;
  var $i390: i64;
  var $i391: i1;
  var $i395: i1;
  var $i396: i64;
  var $p397: ref;
  var $i398: i32;
  var $i399: i64;
  var $p401: ref;
  var $p402: ref;
  var $p403: ref;
  var $p404: ref;
  var $i405: i32;
  var $i406: i32;
  var $i407: i32;
  var $p409: ref;
  var $p410: ref;
  var $p411: ref;
  var $p412: ref;
  var $i413: i64;
  var $i414: i1;
  var $p416: ref;
  var $p417: ref;
  var $p418: ref;
  var $p419: ref;
  var $p420: ref;
  var $p421: ref;
  var $i422: i64;
  var $p423: ref;
  var $i424: i32;
  var $i425: i32;
  var $i426: i32;
  var $i427: i32;
  var $p429: ref;
  var $p430: ref;
  var $p431: ref;
  var $p432: ref;
  var $i433: i64;
  var $i434: i1;
  var $i393: i32;
  var $p394: ref;
  var $i435: i32;
  var $i392: i32;
  var $p437: ref;
  var $p438: ref;
  var $p439: ref;
  var $p440: ref;
  var $i441: i64;
  var $i442: i1;
  var $i326: i32;
  var $p327: ref;
  var $p443: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 80} {:cexpr "multipath_status:arg:type"} boogie_si_record_i32($i1);
    call {:si_unique_call 81} {:cexpr "multipath_status:arg:status_flags"} boogie_si_record_i32($i2);
    call {:si_unique_call 82} {:cexpr "multipath_status:arg:maxlen"} boogie_si_record_i32($i4);
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 536)), $mul.ref(40, 1));
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 83} $p9 := spinlock_check($p8);
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 84} $i10 := _raw_spin_lock_irqsave($p9);
    call {:si_unique_call 85} {:cexpr "flags"} boogie_si_record_i64($i10);
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i1, 0);
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    $i27 := $ult.i32(0, $i4);
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    $i54 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    $i55 := $add.i32($i54, 0);
    call {:si_unique_call 91} {:cexpr "sz"} boogie_si_record_i32($i55);
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p7);
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($p56, $mul.ref(268, 1));
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    $i58 := $load.i8($M.0, $p57);
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    $i59 := $zext.i8.i32($i58);
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i59, 0);
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    $i69 := $i55;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p7, $mul.ref(0, 536)), $mul.ref(272, 1));
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.0, $p70);
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    $i72 := $ne.i32($i71, 0);
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    assume {:branchcond $i72} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    $i83 := $i69;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p7, $mul.ref(0, 536)), $mul.ref(280, 1));
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    $i85 := $load.i32($M.0, $p84);
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    $i86 := $ne.i32($i85, $sub.i32(0, 1));
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    $i97 := $i83;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    $p98 := $bitcast.ref.ref($p7);
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($p98, $mul.ref(268, 1));
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    $i100 := $load.i8($M.0, $p99);
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    $i101 := $zext.i8.i32($i100);
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    $i102 := $ne.i32($i101, 0);
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    assume {:branchcond $i102} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    $i111 := $i97;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i26 := $i111;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p7, $mul.ref(0, 536)), $mul.ref(24, 1));
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    $p113 := $load.ref($M.0, $p112);
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    $i114 := $p2i.ref.i64($p113);
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    $i115 := $eq.i64($i114, 0);
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb36;

  $bb36:
    assume !($i115 == 1);
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    $i116 := $eq.i32($i1, 0);
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    assume {:branchcond $i116} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i116 == 1);
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    $i126 := $ult.i32($i26, $i4);
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    assume {:branchcond $i126} true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    $i134 := 0;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    $i135 := $add.i32($i134, $i26);
    call {:si_unique_call 109} {:cexpr "sz"} boogie_si_record_i32($i135);
    assume {:verifier.code 0} true;
    $i125 := $i135;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    $i136 := $ult.i32($i125, $i4);
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    assume {:branchcond $i136} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i136 == 1);
    assume {:verifier.code 0} true;
    $i144 := 0;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    $i145 := $add.i32($i144, $i125);
    call {:si_unique_call 112} {:cexpr "sz"} boogie_si_record_i32($i145);
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p7, $mul.ref(0, 536)), $mul.ref(256, 1));
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    $p147 := $load.ref($M.0, $p146);
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    $i148 := $p2i.ref.i64($p147);
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    $i149 := $ne.i64($i148, 0);
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i149 == 1);
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p7, $mul.ref(0, 536)), $mul.ref(248, 1));
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    $p156 := $load.ref($M.0, $p155);
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    $i157 := $p2i.ref.i64($p156);
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    $i158 := $ne.i64($i157, 0);
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i158 == 1);
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p7, $mul.ref(0, 536)), $mul.ref(112, 1));
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    $i165 := $load.i32($M.0, $p164);
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    $i166 := $ne.i32($i165, 0);
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    $i167 := $zext.i1.i32($i166);
    call {:si_unique_call 115} {:cexpr "pg_num"} boogie_si_record_i32($i167);
    assume {:verifier.code 0} true;
    $i163 := $i167;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i154 := $i163;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    $i168 := $ult.i32($i145, $i4);
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i168 == 1);
    assume {:verifier.code 0} true;
    $i174 := 0;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    $i175 := $add.i32($i174, $i145);
    call {:si_unique_call 118} {:cexpr "sz"} boogie_si_record_i32($i175);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $i176 := $slt.i32($i1, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i176} true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i176 == 1);
    assume {:verifier.code 0} true;
    $i177 := $eq.i32($i1, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i177} true;
    goto $bb61, $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    assume !($i177 == 1);
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    $p443 := $add.ref($add.ref($p7, $mul.ref(0, 536)), $mul.ref(40, 1));
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} spin_unlock_irqrestore($p443, $i10);
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    return;

  $bb61:
    assume $i177 == 1;
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    $p318 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 536)), $mul.ref(120, 1)), $mul.ref(0, 1));
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    $p319 := $load.ref($M.0, $p318);
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    $p320 := $bitcast.ref.ref($p319);
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    $p321 := $add.ref($add.ref($p320, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    $i322 := $p2i.ref.i64($p321);
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    $p323 := $add.ref($add.ref($p7, $mul.ref(0, 536)), $mul.ref(120, 1));
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    $i324 := $p2i.ref.i64($p323);
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    $i325 := $ne.i64($i322, $i324);
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    assume {:branchcond $i325} true;
    goto $bb107, $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    assume !($i325 == 1);
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb107:
    assume $i325 == 1;
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    $i326, $p327 := $i175, $p319;
    goto $bb110;

  $bb110:
    call $i328, $i329, $p330, $i331, $i332, $p334, $p335, $p336, $p337, $i338, $i339, $i340, $p342, $p343, $p344, $p345, $i346, $i347, $p349, $p350, $p351, $p352, $p353, $i354, $p355, $i356, $i357, $i358, $i360, $i361, $p362, $i363, $i364, $i365, $i366, $i367, $i359, $i368, $i369, $p370, $i371, $i372, $p373, $i374, $p376, $p377, $p378, $i379, $i380, $i381, $i382, $p384, $p385, $p386, $p387, $i388, $p389, $i390, $i391, $i395, $i396, $p397, $i398, $i399, $p401, $p402, $p403, $p404, $i405, $i406, $i407, $p409, $p410, $p411, $p412, $i413, $i414, $p416, $p417, $p418, $p419, $p420, $p421, $i422, $p423, $i424, $i425, $i426, $i427, $p429, $p430, $p431, $p432, $i433, $i434, $i393, $p394, $i435, $i392, $p437, $p438, $p439, $p440, $i441, $i442, $i326, $p327 := multipath_status_loop_$bb110($i1, $p3, $i4, $i324, $i328, $i329, $p330, $i331, $i332, $p334, $p335, $p336, $p337, $i338, $i339, $i340, $p342, $p343, $p344, $p345, $i346, $i347, $p349, $p350, $p351, $p352, $p353, $i354, $p355, $i356, $i357, $i358, $i360, $i361, $p362, $i363, $i364, $i365, $i366, $i367, $i359, $i368, $i369, $p370, $i371, $i372, $p373, $i374, $p376, $p377, $p378, $i379, $i380, $i381, $i382, $p384, $p385, $p386, $p387, $i388, $p389, $i390, $i391, $i395, $i396, $p397, $i398, $i399, $p401, $p402, $p403, $p404, $i405, $i406, $i407, $p409, $p410, $p411, $p412, $i413, $i414, $p416, $p417, $p418, $p419, $p420, $p421, $i422, $p423, $i424, $i425, $i426, $i427, $p429, $p430, $p431, $p432, $i433, $i434, $i393, $p394, $i435, $i392, $p437, $p438, $p439, $p440, $i441, $i442, $i326, $p327);
    goto $bb110_last;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    $i328 := $ult.i32($i326, $i4);
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  $bb113:
    assume !($i328 == 1);
    assume {:verifier.code 0} true;
    $i339 := 0;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    $i340 := $add.i32($i339, $i326);
    call {:si_unique_call 140} {:cexpr "sz"} boogie_si_record_i32($i340);
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    $p342 := $add.ref($add.ref($add.ref($p327, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    $p343 := $load.ref($M.0, $p342);
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    $p344 := $add.ref($add.ref($p343, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    $p345 := $load.ref($M.0, $p344);
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    $i346 := $p2i.ref.i64($p345);
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    $i347 := $ne.i64($i346, 0);
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb115, $bb116;

  $bb116:
    assume !($i347 == 1);
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    $i360 := $ult.i32($i340, $i4);
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb118, $bb119;

  $bb119:
    assume !($i360 == 1);
    assume {:verifier.code 0} true;
    $i366 := 0;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    $i367 := $add.i32($i366, $i340);
    call {:si_unique_call 146} {:cexpr "sz"} boogie_si_record_i32($i367);
    assume {:verifier.code 0} true;
    $i359 := $i367;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    $i368 := $ult.i32($i359, $i4);
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb121, $bb122;

  $bb122:
    assume !($i368 == 1);
    assume {:verifier.code 0} true;
    $i381 := 0;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    $i382 := $add.i32($i381, $i359);
    call {:si_unique_call 149} {:cexpr "sz"} boogie_si_record_i32($i382);
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    $p384 := $add.ref($add.ref($add.ref($p327, $mul.ref(0, 72)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    $p385 := $load.ref($M.0, $p384);
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    $p386 := $bitcast.ref.ref($p385);
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    $p387 := $add.ref($add.ref($p386, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    $i388 := $p2i.ref.i64($p387);
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    $p389 := $add.ref($add.ref($p327, $mul.ref(0, 72)), $mul.ref(56, 1));
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    $i390 := $p2i.ref.i64($p389);
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    $i391 := $ne.i64($i388, $i390);
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    $i392 := $i382;
    assume true;
    goto $bb124, $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    assume !($i391 == 1);
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    $p437 := $add.ref($add.ref($add.ref($p327, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    $p438 := $load.ref($M.0, $p437);
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    $p439 := $bitcast.ref.ref($p438);
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    $p440 := $add.ref($add.ref($p439, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    $i441 := $p2i.ref.i64($p440);
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    $i442 := $ne.i64($i441, $i324);
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb138, $bb139;

  $bb139:
    assume !($i442 == 1);
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb138:
    assume $i442 == 1;
    assume {:verifier.code 0} true;
    $i326, $p327 := $i392, $p438;
    goto $bb138_dummy;

  $bb124:
    assume $i391 == 1;
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $i393, $p394 := $i382, $p385;
    goto $bb127;

  $bb127:
    call $i395, $i396, $p397, $i398, $i399, $p401, $p402, $p403, $p404, $i405, $i406, $i407, $p409, $p410, $p411, $p412, $i413, $i414, $p416, $p417, $p418, $p419, $p420, $p421, $i422, $p423, $i424, $i425, $i426, $i427, $p429, $p430, $p431, $p432, $i433, $i434, $i393, $p394, $i435 := multipath_status_loop_$bb127($i1, $p3, $i4, $i390, $i395, $i396, $p397, $i398, $i399, $p401, $p402, $p403, $p404, $i405, $i406, $i407, $p409, $p410, $p411, $p412, $i413, $i414, $p416, $p417, $p418, $p419, $p420, $p421, $i422, $p423, $i424, $i425, $i426, $i427, $p429, $p430, $p431, $p432, $i433, $i434, $i393, $p394, $i435, $p327);
    goto $bb127_last;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    $i395 := $ult.i32($i393, $i4);
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb129, $bb130;

  $bb130:
    assume !($i395 == 1);
    assume {:verifier.code 0} true;
    $i406 := 0;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    $i407 := $add.i32($i406, $i393);
    call {:si_unique_call 152} {:cexpr "sz"} boogie_si_record_i32($i407);
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    $p409 := $add.ref($add.ref($add.ref($p327, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    $p410 := $load.ref($M.0, $p409);
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    $p411 := $add.ref($add.ref($p410, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    $p412 := $load.ref($M.0, $p411);
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    $i413 := $p2i.ref.i64($p412);
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    $i414 := $ne.i64($i413, 0);
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb132, $bb133;

  $bb133:
    assume !($i414 == 1);
    assume {:verifier.code 0} true;
    $i427 := $i407;
    goto $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    $p429 := $add.ref($add.ref($add.ref($p394, $mul.ref(0, 272)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    $p430 := $load.ref($M.0, $p429);
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    $p431 := $bitcast.ref.ref($p430);
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    $p432 := $add.ref($add.ref($p431, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    $i433 := $p2i.ref.i64($p432);
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    $i434 := $ne.i64($i433, $i390);
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    $i435 := $i427;
    assume true;
    goto $bb135, $bb136;

  $bb136:
    assume !($i434 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    $i392 := $i435;
    goto $bb126;

  $bb135:
    assume $i434 == 1;
    assume {:verifier.code 0} true;
    $i393, $p394 := $i427, $p430;
    goto $bb135_dummy;

  $bb132:
    assume $i414 == 1;
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    $p416 := $add.ref($add.ref($add.ref($p327, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    $p417 := $load.ref($M.0, $p416);
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    $p418 := $add.ref($add.ref($p417, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    $p419 := $load.ref($M.0, $p418);
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    $p420 := $add.ref($add.ref($p327, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    $p421 := $add.ref($add.ref($p394, $mul.ref(0, 272)), $mul.ref(32, 1));
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $i422 := $sext.i32.i64($i407);
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    $p423 := $add.ref($p3, $mul.ref($i422, 1));
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    $i424 := $sub.i32($i4, $i407);
    call {:si_unique_call 153} $i425 := devirtbounce.2($p419, $p420, $p421, $i1, $p423, $i424);
    call {:si_unique_call 154} {:cexpr "tmp___39"} boogie_si_record_i32($i425);
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    $i426 := $add.i32($i425, $i407);
    call {:si_unique_call 155} {:cexpr "sz"} boogie_si_record_i32($i426);
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    $i427 := $i426;
    goto $bb134;

  $bb129:
    assume $i395 == 1;
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    $i396 := $sext.i32.i64($i393);
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    $p397 := $add.ref($p3, $mul.ref($i396, 1));
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    $i398 := $sub.i32($i4, $i393);
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    $i399 := $zext.i32.i64($i398);
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    $p401 := $add.ref($add.ref($add.ref($p394, $mul.ref(0, 272)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    $p402 := $load.ref($M.0, $p401);
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    $p403 := $add.ref($add.ref($p402, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    $p404 := $bitcast.ref.ref($p403);
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 150} $i405 := scnprintf.ref.i64.ref.ref($p397, $i399, .str.79, $p404);
    call {:si_unique_call 151} {:cexpr "tmp___37"} boogie_si_record_i32($i405);
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    $i406 := $i405;
    goto $bb131;

  $bb121:
    assume $i368 == 1;
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    $i369 := $sext.i32.i64($i359);
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    $p370 := $add.ref($p3, $mul.ref($i369, 1));
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    $i371 := $sub.i32($i4, $i359);
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    $i372 := $zext.i32.i64($i371);
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    $p373 := $add.ref($add.ref($p327, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    $i374 := $load.i32($M.0, $p373);
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    $p376 := $add.ref($add.ref($add.ref($p327, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    $p377 := $load.ref($M.0, $p376);
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    $p378 := $add.ref($add.ref($p377, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    $i379 := $load.i32($M.0, $p378);
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 147} $i380 := scnprintf.ref.i64.ref.i32.i32($p370, $i372, .str.75, $i374, $i379);
    call {:si_unique_call 148} {:cexpr "tmp___35"} boogie_si_record_i32($i380);
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    $i381 := $i380;
    goto $bb123;

  $bb118:
    assume $i360 == 1;
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    $i361 := $sext.i32.i64($i340);
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    $p362 := $add.ref($p3, $mul.ref($i361, 1));
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    $i363 := $sub.i32($i4, $i340);
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    $i364 := $zext.i32.i64($i363);
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 144} $i365 := scnprintf.ref.i64.ref($p362, $i364, .str.72);
    call {:si_unique_call 145} {:cexpr "tmp___33"} boogie_si_record_i32($i365);
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    $i366 := $i365;
    goto $bb120;

  $bb115:
    assume $i347 == 1;
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    $p349 := $add.ref($add.ref($add.ref($p327, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    $p350 := $load.ref($M.0, $p349);
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    $p351 := $add.ref($add.ref($p350, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    $p352 := $load.ref($M.0, $p351);
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    $p353 := $add.ref($add.ref($p327, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    $i354 := $sext.i32.i64($i340);
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    $p355 := $add.ref($p3, $mul.ref($i354, 1));
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    $i356 := $sub.i32($i4, $i340);
    call {:si_unique_call 141} $i357 := devirtbounce.2($p352, $p353, $0.ref, $i1, $p355, $i356);
    call {:si_unique_call 142} {:cexpr "tmp___32"} boogie_si_record_i32($i357);
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    $i358 := $add.i32($i357, $i340);
    call {:si_unique_call 143} {:cexpr "sz"} boogie_si_record_i32($i358);
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    $i359 := $i358;
    goto $bb117;

  $bb112:
    assume $i328 == 1;
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    $i329 := $sext.i32.i64($i326);
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    $p330 := $add.ref($p3, $mul.ref($i329, 1));
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    $i331 := $sub.i32($i4, $i326);
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    $i332 := $zext.i32.i64($i331);
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    $p334 := $add.ref($add.ref($add.ref($p327, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    $p335 := $load.ref($M.0, $p334);
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    $p336 := $add.ref($add.ref($p335, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    $p337 := $load.ref($M.0, $p336);
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 138} $i338 := scnprintf.ref.i64.ref.ref($p330, $i332, .str.79, $p337);
    call {:si_unique_call 139} {:cexpr "tmp___30"} boogie_si_record_i32($i338);
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    $i339 := $i338;
    goto $bb114;

  $bb59:
    assume $i176 == 1;
    assume {:verifier.code 0} true;
    $i178 := $eq.i32($i1, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    assume !($i178 == 1);
    goto $bb63;

  $bb64:
    assume $i178 == 1;
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 536)), $mul.ref(120, 1)), $mul.ref(0, 1));
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    $p181 := $load.ref($M.0, $p180);
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    $p182 := $bitcast.ref.ref($p181);
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p182, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    $i184 := $p2i.ref.i64($p183);
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($p7, $mul.ref(0, 536)), $mul.ref(120, 1));
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    $i186 := $p2i.ref.i64($p185);
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    $i187 := $ne.i64($i184, $i186);
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    assume {:branchcond $i187} true;
    goto $bb66, $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    assume !($i187 == 1);
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb66:
    assume $i187 == 1;
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    $i188, $p189 := $i175, $p181;
    goto $bb69;

  $bb69:
    call $p190, $i191, $i192, $p194, $p195, $i196, $i197, $i198, $i199, $i193, $i200, $i201, $p202, $i203, $i204, $i205, $i206, $i207, $i208, $p210, $p211, $p212, $p213, $i214, $i215, $p217, $p218, $p219, $p220, $p221, $i222, $p223, $i224, $i225, $i226, $i228, $i229, $p230, $i231, $i232, $i233, $i234, $i235, $i227, $i236, $i237, $p238, $i239, $i240, $p241, $i242, $p244, $p245, $p246, $i247, $i248, $i249, $i250, $p252, $p253, $p254, $p255, $i256, $p257, $i258, $i259, $i263, $i264, $p265, $i266, $i267, $p269, $p270, $p271, $p272, $p273, $i274, $i275, $p276, $p277, $i278, $i279, $i280, $i281, $p283, $p284, $p285, $p286, $i287, $i288, $p290, $p291, $p292, $p293, $p294, $p295, $i296, $p297, $i298, $i299, $i300, $i301, $p303, $p304, $p305, $p306, $i307, $i308, $i261, $p262, $i309, $i260, $p311, $p312, $p313, $p314, $i315, $i316, $i188, $p189 := multipath_status_loop_$bb69($i1, $p3, $i4, $p7, $i186, $p190, $i191, $i192, $p194, $p195, $i196, $i197, $i198, $i199, $i193, $i200, $i201, $p202, $i203, $i204, $i205, $i206, $i207, $i208, $p210, $p211, $p212, $p213, $i214, $i215, $p217, $p218, $p219, $p220, $p221, $i222, $p223, $i224, $i225, $i226, $i228, $i229, $p230, $i231, $i232, $i233, $i234, $i235, $i227, $i236, $i237, $p238, $i239, $i240, $p241, $i242, $p244, $p245, $p246, $i247, $i248, $i249, $i250, $p252, $p253, $p254, $p255, $i256, $p257, $i258, $i259, $i263, $i264, $p265, $i266, $i267, $p269, $p270, $p271, $p272, $p273, $i274, $i275, $p276, $p277, $i278, $i279, $i280, $i281, $p283, $p284, $p285, $p286, $i287, $i288, $p290, $p291, $p292, $p293, $p294, $p295, $i296, $p297, $i298, $i299, $i300, $i301, $p303, $p304, $p305, $p306, $i307, $i308, $i261, $p262, $i309, $i260, $p311, $p312, $p313, $p314, $i315, $i316, $i188, $p189);
    goto $bb69_last;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($p189, $mul.ref(0, 72)), $mul.ref(44, 1));
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    $i191 := $load.i32($M.0, $p190);
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    $i192 := $ne.i32($i191, 0);
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i192 == 1);
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($p7, $mul.ref(0, 536)), $mul.ref(248, 1));
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    $p195 := $load.ref($M.0, $p194);
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    $i196 := $p2i.ref.i64($p195);
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    $i197 := $p2i.ref.i64($p189);
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    $i198 := $eq.i64($i196, $i197);
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i198 == 1);
    assume {:verifier.code 0} true;
    $i199 := 69;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i193 := $i199;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    $i200 := $ult.i32($i188, $i4);
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i200 == 1);
    assume {:verifier.code 0} true;
    $i207 := 0;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    $i208 := $add.i32($i207, $i188);
    call {:si_unique_call 121} {:cexpr "sz"} boogie_si_record_i32($i208);
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($add.ref($p189, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    $p211 := $load.ref($M.0, $p210);
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($p211, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    $p213 := $load.ref($M.0, $p212);
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    $i214 := $p2i.ref.i64($p213);
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    $i215 := $ne.i64($i214, 0);
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i215 == 1);
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    $i228 := $ult.i32($i208, $i4);
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i228 == 1);
    assume {:verifier.code 0} true;
    $i234 := 0;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    $i235 := $add.i32($i234, $i208);
    call {:si_unique_call 127} {:cexpr "sz"} boogie_si_record_i32($i235);
    assume {:verifier.code 0} true;
    $i227 := $i235;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    $i236 := $ult.i32($i227, $i4);
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i236 == 1);
    assume {:verifier.code 0} true;
    $i249 := 0;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    $i250 := $add.i32($i249, $i227);
    call {:si_unique_call 130} {:cexpr "sz"} boogie_si_record_i32($i250);
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    $p252 := $add.ref($add.ref($add.ref($p189, $mul.ref(0, 72)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    $p253 := $load.ref($M.0, $p252);
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    $p254 := $bitcast.ref.ref($p253);
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    $p255 := $add.ref($add.ref($p254, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    $i256 := $p2i.ref.i64($p255);
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    $p257 := $add.ref($add.ref($p189, $mul.ref(0, 72)), $mul.ref(56, 1));
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    $i258 := $p2i.ref.i64($p257);
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    $i259 := $ne.i64($i256, $i258);
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    $i260 := $i250;
    assume true;
    goto $bb89, $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    assume !($i259 == 1);
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    $p311 := $add.ref($add.ref($add.ref($p189, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    $p312 := $load.ref($M.0, $p311);
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    $p313 := $bitcast.ref.ref($p312);
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    $p314 := $add.ref($add.ref($p313, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    $i315 := $p2i.ref.i64($p314);
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    $i316 := $ne.i64($i315, $i186);
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i316 == 1);
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb103:
    assume $i316 == 1;
    assume {:verifier.code 0} true;
    $i188, $p189 := $i260, $p312;
    goto $bb103_dummy;

  $bb89:
    assume $i259 == 1;
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    $i261, $p262 := $i250, $p253;
    goto $bb92;

  $bb92:
    call $i263, $i264, $p265, $i266, $i267, $p269, $p270, $p271, $p272, $p273, $i274, $i275, $p276, $p277, $i278, $i279, $i280, $i281, $p283, $p284, $p285, $p286, $i287, $i288, $p290, $p291, $p292, $p293, $p294, $p295, $i296, $p297, $i298, $i299, $i300, $i301, $p303, $p304, $p305, $p306, $i307, $i308, $i261, $p262, $i309 := multipath_status_loop_$bb92($i1, $p3, $i4, $i258, $i263, $i264, $p265, $i266, $i267, $p269, $p270, $p271, $p272, $p273, $i274, $i275, $p276, $p277, $i278, $i279, $i280, $i281, $p283, $p284, $p285, $p286, $i287, $i288, $p290, $p291, $p292, $p293, $p294, $p295, $i296, $p297, $i298, $i299, $i300, $i301, $p303, $p304, $p305, $p306, $i307, $i308, $i261, $p262, $i309, $p189);
    goto $bb92_last;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    $i263 := $ult.i32($i261, $i4);
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  $bb95:
    assume !($i263 == 1);
    assume {:verifier.code 0} true;
    $i280 := 0;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    $i281 := $add.i32($i280, $i261);
    call {:si_unique_call 133} {:cexpr "sz"} boogie_si_record_i32($i281);
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    $p283 := $add.ref($add.ref($add.ref($p189, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    $p284 := $load.ref($M.0, $p283);
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    $p285 := $add.ref($add.ref($p284, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    $p286 := $load.ref($M.0, $p285);
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    $i287 := $p2i.ref.i64($p286);
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    $i288 := $ne.i64($i287, 0);
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i288 == 1);
    assume {:verifier.code 0} true;
    $i301 := $i281;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    $p303 := $add.ref($add.ref($add.ref($p262, $mul.ref(0, 272)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    $p304 := $load.ref($M.0, $p303);
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    $p305 := $bitcast.ref.ref($p304);
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    $p306 := $add.ref($add.ref($p305, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    $i307 := $p2i.ref.i64($p306);
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    $i308 := $ne.i64($i307, $i258);
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    $i309 := $i301;
    assume true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i308 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    $i260 := $i309;
    goto $bb91;

  $bb100:
    assume $i308 == 1;
    assume {:verifier.code 0} true;
    $i261, $p262 := $i301, $p304;
    goto $bb100_dummy;

  $bb97:
    assume $i288 == 1;
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    $p290 := $add.ref($add.ref($add.ref($p189, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    $p291 := $load.ref($M.0, $p290);
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    $p292 := $add.ref($add.ref($p291, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    $p293 := $load.ref($M.0, $p292);
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    $p294 := $add.ref($add.ref($p189, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    $p295 := $add.ref($add.ref($p262, $mul.ref(0, 272)), $mul.ref(32, 1));
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    $i296 := $sext.i32.i64($i281);
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    $p297 := $add.ref($p3, $mul.ref($i296, 1));
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    $i298 := $sub.i32($i4, $i281);
    call {:si_unique_call 134} $i299 := devirtbounce.2($p293, $p294, $p295, $i1, $p297, $i298);
    call {:si_unique_call 135} {:cexpr "tmp___29"} boogie_si_record_i32($i299);
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    $i300 := $add.i32($i299, $i281);
    call {:si_unique_call 136} {:cexpr "sz"} boogie_si_record_i32($i300);
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    $i301 := $i300;
    goto $bb99;

  $bb94:
    assume $i263 == 1;
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    $i264 := $sext.i32.i64($i261);
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $p265 := $add.ref($p3, $mul.ref($i264, 1));
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    $i266 := $sub.i32($i4, $i261);
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    $i267 := $zext.i32.i64($i266);
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    $p269 := $add.ref($add.ref($add.ref($p262, $mul.ref(0, 272)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    $p270 := $load.ref($M.0, $p269);
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    $p271 := $add.ref($add.ref($p270, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    $p272 := $bitcast.ref.ref($p271);
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    $p273 := $add.ref($add.ref($p262, $mul.ref(0, 272)), $mul.ref(24, 1));
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    $i274 := $load.i32($M.0, $p273);
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    $i275 := $ne.i32($i274, 0);
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    $p276 := (if $i275 == 1 then .str.77 else .str.78);
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    $p277 := $add.ref($add.ref($p262, $mul.ref(0, 272)), $mul.ref(28, 1));
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    $i278 := $load.i32($M.0, $p277);
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} $i279 := scnprintf.ref.i64.ref.ref.ref.i32($p265, $i267, .str.76, $p272, $p276, $i278);
    call {:si_unique_call 132} {:cexpr "tmp___27"} boogie_si_record_i32($i279);
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    $i280 := $i279;
    goto $bb96;

  $bb86:
    assume $i236 == 1;
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    $i237 := $sext.i32.i64($i227);
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    $p238 := $add.ref($p3, $mul.ref($i237, 1));
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    $i239 := $sub.i32($i4, $i227);
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    $i240 := $zext.i32.i64($i239);
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($add.ref($p189, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    $i242 := $load.i32($M.0, $p241);
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($add.ref($p189, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    $p245 := $load.ref($M.0, $p244);
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    $p246 := $add.ref($add.ref($p245, $mul.ref(0, 96)), $mul.ref(20, 1));
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    $i247 := $load.i32($M.0, $p246);
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 128} $i248 := scnprintf.ref.i64.ref.i32.i32($p238, $i240, .str.75, $i242, $i247);
    call {:si_unique_call 129} {:cexpr "tmp___25"} boogie_si_record_i32($i248);
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    $i249 := $i248;
    goto $bb88;

  $bb83:
    assume $i228 == 1;
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    $i229 := $sext.i32.i64($i208);
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($p3, $mul.ref($i229, 1));
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $i231 := $sub.i32($i4, $i208);
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    $i232 := $zext.i32.i64($i231);
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 125} $i233 := scnprintf.ref.i64.ref($p230, $i232, .str.72);
    call {:si_unique_call 126} {:cexpr "tmp___23"} boogie_si_record_i32($i233);
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    $i234 := $i233;
    goto $bb85;

  $bb80:
    assume $i215 == 1;
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($add.ref($p189, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    $p218 := $load.ref($M.0, $p217);
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($add.ref($p218, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    $p220 := $load.ref($M.0, $p219);
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($p189, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    $i222 := $sext.i32.i64($i208);
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($p3, $mul.ref($i222, 1));
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    $i224 := $sub.i32($i4, $i208);
    call {:si_unique_call 122} $i225 := devirtbounce.2($p220, $p221, $0.ref, $i1, $p223, $i224);
    call {:si_unique_call 123} {:cexpr "tmp___22"} boogie_si_record_i32($i225);
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    $i226 := $add.i32($i225, $i208);
    call {:si_unique_call 124} {:cexpr "sz"} boogie_si_record_i32($i226);
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    $i227 := $i226;
    goto $bb82;

  $bb77:
    assume $i200 == 1;
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    $i201 := $sext.i32.i64($i188);
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($p3, $mul.ref($i201, 1));
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $i203 := $sub.i32($i4, $i188);
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    $i204 := $zext.i32.i64($i203);
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    $i205 := $sext.i8.i32($i193);
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 119} $i206 := scnprintf.ref.i64.ref.i32($p202, $i204, .str.74, $i205);
    call {:si_unique_call 120} {:cexpr "tmp___20"} boogie_si_record_i32($i206);
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    $i207 := $i206;
    goto $bb79;

  $bb74:
    assume $i198 == 1;
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    $i199 := 65;
    goto $bb76;

  $bb71:
    assume $i192 == 1;
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    $i193 := 68;
    goto $bb73;

  $bb55:
    assume $i168 == 1;
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    $i169 := $sext.i32.i64($i145);
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($p3, $mul.ref($i169, 1));
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    $i171 := $sub.i32($i4, $i145);
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    $i172 := $zext.i32.i64($i171);
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 116} $i173 := scnprintf.ref.i64.ref.i32($p170, $i172, .str.67, $i154);
    call {:si_unique_call 117} {:cexpr "tmp___18"} boogie_si_record_i32($i173);
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    $i174 := $i173;
    goto $bb57;

  $bb52:
    assume $i158 == 1;
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p7, $mul.ref(0, 536)), $mul.ref(248, 1));
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    $p160 := $load.ref($M.0, $p159);
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p160, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    $i162 := $load.i32($M.0, $p161);
    call {:si_unique_call 114} {:cexpr "pg_num"} boogie_si_record_i32($i162);
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    $i163 := $i162;
    goto $bb54;

  $bb49:
    assume $i149 == 1;
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p7, $mul.ref(0, 536)), $mul.ref(256, 1));
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    $p151 := $load.ref($M.0, $p150);
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p151, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    $i153 := $load.i32($M.0, $p152);
    call {:si_unique_call 113} {:cexpr "pg_num"} boogie_si_record_i32($i153);
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    $i154 := $i153;
    goto $bb51;

  $bb46:
    assume $i136 == 1;
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    $i137 := $sext.i32.i64($i125);
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($p3, $mul.ref($i137, 1));
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    $i139 := $sub.i32($i4, $i125);
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    $i140 := $zext.i32.i64($i139);
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p7, $mul.ref(0, 536)), $mul.ref(112, 1));
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    $i142 := $load.i32($M.0, $p141);
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 110} $i143 := scnprintf.ref.i64.ref.i32($p138, $i140, .str.67, $i142);
    call {:si_unique_call 111} {:cexpr "tmp___16"} boogie_si_record_i32($i143);
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    $i144 := $i143;
    goto $bb48;

  $bb43:
    assume $i126 == 1;
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    $i127 := $sext.i32.i64($i26);
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($p3, $mul.ref($i127, 1));
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    $i129 := $sub.i32($i4, $i26);
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    $i130 := $zext.i32.i64($i129);
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p7, $mul.ref(0, 536)), $mul.ref(24, 1));
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    $p132 := $load.ref($M.0, $p131);
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 107} $i133 := scnprintf.ref.i64.ref.ref($p128, $i130, .str.73, $p132);
    call {:si_unique_call 108} {:cexpr "tmp___14"} boogie_si_record_i32($i133);
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    $i134 := $i133;
    goto $bb45;

  $bb37:
    assume {:verifier.code 0} true;
    assume $i116 == 1;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i117 := $ult.i32($i26, $i4);
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    assume {:branchcond $i117} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i117 == 1);
    assume {:verifier.code 0} true;
    $i123 := 0;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    $i124 := $add.i32($i123, $i26);
    call {:si_unique_call 106} {:cexpr "sz"} boogie_si_record_i32($i124);
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    $i125 := $i124;
    goto $bb42;

  $bb39:
    assume $i117 == 1;
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    $i118 := $sext.i32.i64($i26);
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($p3, $mul.ref($i118, 1));
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    $i120 := $sub.i32($i4, $i26);
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    $i121 := $zext.i32.i64($i120);
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 104} $i122 := scnprintf.ref.i64.ref($p119, $i121, .str.72);
    call {:si_unique_call 105} {:cexpr "tmp___12"} boogie_si_record_i32($i122);
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    $i123 := $i122;
    goto $bb41;

  $bb34:
    assume {:verifier.code 0} true;
    assume $i115 == 1;
    goto $bb35;

  $bb28:
    assume $i102 == 1;
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    $i103 := $ult.i32($i97, $i4);
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    $i109 := 0;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    $i110 := $add.i32($i109, $i97);
    call {:si_unique_call 103} {:cexpr "sz"} boogie_si_record_i32($i110);
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    $i111 := $i110;
    goto $bb33;

  $bb30:
    assume $i103 == 1;
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    $i104 := $sext.i32.i64($i97);
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($p3, $mul.ref($i104, 1));
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    $i106 := $sub.i32($i4, $i97);
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    $i107 := $zext.i32.i64($i106);
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 101} $i108 := scnprintf.ref.i64.ref($p105, $i107, .str.71);
    call {:si_unique_call 102} {:cexpr "tmp___10"} boogie_si_record_i32($i108);
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    $i109 := $i108;
    goto $bb32;

  $bb22:
    assume $i86 == 1;
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    $i87 := $ult.i32($i83, $i4);
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    $i95 := 0;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    $i96 := $add.i32($i95, $i83);
    call {:si_unique_call 100} {:cexpr "sz"} boogie_si_record_i32($i96);
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    $i97 := $i96;
    goto $bb27;

  $bb24:
    assume $i87 == 1;
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    $i88 := $sext.i32.i64($i83);
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($p3, $mul.ref($i88, 1));
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    $i90 := $sub.i32($i4, $i83);
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    $i91 := $zext.i32.i64($i90);
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p7, $mul.ref(0, 536)), $mul.ref(280, 1));
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    $i93 := $load.i32($M.0, $p92);
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 98} $i94 := scnprintf.ref.i64.ref.i32($p89, $i91, .str.70, $i93);
    call {:si_unique_call 99} {:cexpr "tmp___8"} boogie_si_record_i32($i94);
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    $i95 := $i94;
    goto $bb26;

  $bb16:
    assume $i72 == 1;
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    $i73 := $ult.i32($i69, $i4);
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    $i81 := 0;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    $i82 := $add.i32($i81, $i69);
    call {:si_unique_call 97} {:cexpr "sz"} boogie_si_record_i32($i82);
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    $i83 := $i82;
    goto $bb21;

  $bb18:
    assume $i73 == 1;
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    $i74 := $sext.i32.i64($i69);
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($p3, $mul.ref($i74, 1));
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    $i76 := $sub.i32($i4, $i69);
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    $i77 := $zext.i32.i64($i76);
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p7, $mul.ref(0, 536)), $mul.ref(272, 1));
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    $i79 := $load.i32($M.0, $p78);
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 95} $i80 := scnprintf.ref.i64.ref.i32($p75, $i77, .str.69, $i79);
    call {:si_unique_call 96} {:cexpr "tmp___6"} boogie_si_record_i32($i80);
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    $i81 := $i80;
    goto $bb20;

  $bb10:
    assume $i60 == 1;
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    $i61 := $ult.i32($i55, $i4);
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    $i67 := 0;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    $i68 := $add.i32($i67, $i55);
    call {:si_unique_call 94} {:cexpr "sz"} boogie_si_record_i32($i68);
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    $i69 := $i68;
    goto $bb15;

  $bb12:
    assume $i61 == 1;
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    $i62 := $sext.i32.i64($i55);
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($p3, $mul.ref($i62, 1));
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    $i64 := $sub.i32($i4, $i55);
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    $i65 := $zext.i32.i64($i64);
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 92} $i66 := scnprintf.ref.i64.ref($p63, $i65, .str.68);
    call {:si_unique_call 93} {:cexpr "tmp___4"} boogie_si_record_i32($i66);
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    $i67 := $i66;
    goto $bb14;

  $bb7:
    assume $i27 == 1;
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64(0);
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($p3, $mul.ref($i28, 1));
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32($i4, 0);
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    $i31 := $zext.i32.i64($i30);
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p7, $mul.ref(0, 536)), $mul.ref(268, 1));
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.0, $p32);
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    $i34 := $lshr.i8($i33, 1);
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    $i35 := $and.i8($i34, 1);
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i35);
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p7, $mul.ref(0, 536)), $mul.ref(272, 1));
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    $i40 := (if $i39 == 1 then 2 else 0);
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    $i41 := $add.i32($i36, $i40);
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p7, $mul.ref(0, 536)), $mul.ref(280, 1));
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, $sub.i32(0, 1));
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    $i45 := (if $i44 == 1 then 2 else 0);
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    $i46 := $add.i32($i41, $i45);
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p7, $mul.ref(0, 536)), $mul.ref(268, 1));
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.0, $p47);
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    $i49 := $lshr.i8($i48, 3);
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    $i50 := $and.i8($i49, 1);
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    $i51 := $zext.i8.i32($i50);
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    $i52 := $add.i32($i46, $i51);
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 89} $i53 := scnprintf.ref.i64.ref.i32($p29, $i31, .str.67, $i52);
    call {:si_unique_call 90} {:cexpr "tmp___2"} boogie_si_record_i32($i53);
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    $i54 := $i53;
    goto $bb9;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    $i12 := $ult.i32(0, $i4);
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i24 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    $i25 := $add.i32($i24, 0);
    call {:si_unique_call 88} {:cexpr "sz"} boogie_si_record_i32($i25);
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    $i26 := $i25;
    goto $bb6;

  $bb3:
    assume $i12 == 1;
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64(0);
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p3, $mul.ref($i13, 1));
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32($i4, 0);
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    $i16 := $zext.i32.i64($i15);
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p7, $mul.ref(0, 536)), $mul.ref(268, 1));
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.0, $p17);
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    $i19 := $and.i8($i18, 1);
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p7, $mul.ref(0, 536)), $mul.ref(276, 1));
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 86} $i23 := scnprintf.ref.i64.ref.i32.i32($p14, $i16, .str.66, $i20, $i22);
    call {:si_unique_call 87} {:cexpr "tmp___0"} boogie_si_record_i32($i23);
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    $i24 := $i23;
    goto $bb5;

  $bb135_dummy:
    assume false;
    return;

  $bb127_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_844;

  $bb138_dummy:
    assume false;
    return;

  $bb110_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_768;

  $bb100_dummy:
    assume false;
    return;

  $bb92_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_702;

  $bb103_dummy:
    assume false;
    return;

  $bb69_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_613;
}



const multipath_message: ref;

axiom multipath_message == $sub.ref(0, 158983);

procedure multipath_message($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.17, $M.18, $CurrAddr, $M.10, $M.9, $M.12, $M.11, $M.14, $M.13, $M.16, $M.15;



implementation multipath_message($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i11: i1;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $p44: ref;
  var $i45: i32;
  var $i46: i1;
  var $p47: ref;
  var $p43: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $p57: ref;
  var $p59: ref;
  var $i60: i32;
  var $p61: ref;
  var $i10: i32;
  var $p62: ref;
  var vslice_dummy_var_17: i32;
  var vslice_dummy_var_18: i32;
  var vslice_dummy_var_19: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 157} {:cexpr "multipath_message:arg:argc"} boogie_si_record_i32($i1);
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 536)), $mul.ref(376, 1));
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} mutex_lock_nested($p7, 0);
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} $i8 := dm_suspended($p0);
    call {:si_unique_call 160} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i1, 1);
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i1, 2);
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p2);
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 171} $i23 := strcasecmp($p22, .str.55);
    call {:si_unique_call 172} {:cexpr "tmp___6"} boogie_si_record_i32($i23);
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i24 == 1);
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p2);
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 175} $i29 := strcasecmp($p28, .str.56);
    call {:si_unique_call 176} {:cexpr "tmp___5"} boogie_si_record_i32($i29);
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 0);
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i30 == 1);
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p2);
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 179} $i35 := strcasecmp($p34, .str.57);
    call {:si_unique_call 180} {:cexpr "tmp___4"} boogie_si_record_i32($i35);
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, 0);
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i36 == 1);
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p2);
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 183} $i41 := strcasecmp($p40, .str.58);
    call {:si_unique_call 184} {:cexpr "tmp___3"} boogie_si_record_i32($i41);
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i41, 0);
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i42 == 1);
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p2);
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} $i45 := strcasecmp($p44, .str.59);
    call {:si_unique_call 186} {:cexpr "tmp___2"} boogie_si_record_i32($i45);
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i45, 0);
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i46 == 1);
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p2);
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} vslice_dummy_var_18 := printk.ref.ref(.str.60, $p47);
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 22);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p6, $mul.ref(0, 536)), $mul.ref(376, 1));
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 161} mutex_unlock($p62);
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb26:
    assume $i46 == 1;
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p43 := fail_path;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} $i51 := dm_table_get_mode($p50);
    call {:si_unique_call 189} {:cexpr "tmp___7"} boogie_si_record_i32($i51);
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($p2, $mul.ref(1, 8));
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} $i54 := dm_get_device($p0, $p53, $i51, $p3);
    call {:si_unique_call 191} {:cexpr "r"} boogie_si_record_i32($i54);
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i54, 0);
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.6, $p3);
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 193} $i60 := action_dev($p6, $p59, $p43);
    call {:si_unique_call 194} {:cexpr "r"} boogie_si_record_i32($i60);
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.6, $p3);
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 195} dm_put_device($p0, $p61);
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    $i10 := $i60;
    goto $bb3;

  $bb32:
    assume $i55 == 1;
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($p2, $mul.ref(1, 8));
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 192} vslice_dummy_var_19 := printk.ref.ref(.str.61, $p57);
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    $i10 := $i54;
    goto $bb3;

  $bb23:
    assume $i42 == 1;
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    $p43 := reinstate_path;
    goto $bb25;

  $bb21:
    assume $i36 == 1;
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($p2, $mul.ref(1, 8));
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 181} $i39 := switch_pg_num($p6, $p38);
    call {:si_unique_call 182} {:cexpr "r"} boogie_si_record_i32($i39);
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    $i10 := $i39;
    goto $bb3;

  $bb19:
    assume $i30 == 1;
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($p2, $mul.ref(1, 8));
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} $i33 := bypass_pg_num($p6, $p32, 0);
    call {:si_unique_call 178} {:cexpr "r"} boogie_si_record_i32($i33);
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    $i10 := $i33;
    goto $bb3;

  $bb17:
    assume $i24 == 1;
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p2, $mul.ref(1, 8));
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} $i27 := bypass_pg_num($p6, $p26, 1);
    call {:si_unique_call 174} {:cexpr "r"} boogie_si_record_i32($i27);
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    $i10 := $i27;
    goto $bb3;

  $bb14:
    assume $i20 == 1;
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 170} vslice_dummy_var_17 := printk.ref.i32(.str.54, $i1);
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 22);
    goto $bb3;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p2);
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} $i13 := strcasecmp($p12, .str.28);
    call {:si_unique_call 163} {:cexpr "tmp___1"} boogie_si_record_i32($i13);
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 0);
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i14 == 1);
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p2);
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 166} $i17 := strcasecmp($p16, .str.53);
    call {:si_unique_call 167} {:cexpr "tmp___0"} boogie_si_record_i32($i17);
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 0);
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb9:
    assume $i18 == 1;
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} $i19 := queue_if_no_path($p6, 0, 0);
    call {:si_unique_call 169} {:cexpr "r"} boogie_si_record_i32($i19);
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    $i10 := $i19;
    goto $bb3;

  $bb7:
    assume $i14 == 1;
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 164} $i15 := queue_if_no_path($p6, 1, 0);
    call {:si_unique_call 165} {:cexpr "r"} boogie_si_record_i32($i15);
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    $i10 := $i15;
    goto $bb3;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 16);
    goto $bb3;
}



const multipath_ioctl: ref;

axiom multipath_ioctl == $sub.ref(0, 160015);

procedure multipath_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.10, $M.9, $M.12, $M.11, $M.14, $M.13, $M.16, $M.15;



implementation multipath_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $i28: i32;
  var $i29: i64;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $i33: i8;
  var $i34: i32;
  var $i35: i1;
  var $i36: i64;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $i40: i8;
  var $i41: i32;
  var $i42: i1;
  var $i44: i64;
  var $i45: i1;
  var $i46: i32;
  var $i43: i32;
  var $p47: ref;
  var $i48: i64;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $i52: i64;
  var $p53: ref;
  var $i54: i64;
  var $i55: i64;
  var $i56: i1;
  var $i57: i32;
  var $i58: i1;
  var $i59: i32;
  var $i60: i32;
  var $i61: i1;
  var $p62: ref;
  var $i63: i32;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $i67: i64;
  var $p68: ref;
  var $p69: ref;
  var $i70: i64;
  var $i71: i1;
  var $p72: ref;
  var $i73: i32;
  var $i74: i1;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $i81: i1;
  var $i82: i32;
  var $i83: i1;
  var $i85: i32;
  var $i84: i32;
  var vslice_dummy_var_20: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 196} {:cexpr "multipath_ioctl:arg:cmd"} boogie_si_record_i32($i1);
    call {:si_unique_call 197} {:cexpr "multipath_ioctl:arg:arg"} boogie_si_record_i64($i2);
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 536)), $mul.ref(40, 1));
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 198} $p7 := spinlock_check($p6);
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 199} $i8 := _raw_spin_lock_irqsave($p7);
    call {:si_unique_call 200} {:cexpr "flags"} boogie_si_record_i64($i8);
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 536)), $mul.ref(240, 1));
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p5, $mul.ref(0, 536)), $mul.ref(240, 1));
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $p27, $i28 := $0.ref, 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p14);
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p14);
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    $i37 := $eq.i64($i36, 0);
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p27);
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    $i45 := $eq.i64($i44, 0);
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    $i46 := 0;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i43 := $i46;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p5, $mul.ref(0, 536)), $mul.ref(40, 1));
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} spin_unlock_irqrestore($p47, $i8);
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    $i48 := $p2i.ref.i64($p27);
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    $i49 := $eq.i64($i48, 0);
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i49 == 1);
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p27, $mul.ref(0, 480)), $mul.ref(8, 1));
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 204} $i52 := i_size_read($p51);
    call {:si_unique_call 205} {:cexpr "tmp___1"} boogie_si_record_i64($i52);
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(24, 1));
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    $i54 := $load.i64($M.0, $p53);
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    $i55 := $ashr.i64($i52, 9);
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    $i56 := $ne.i64($i54, $i55);
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    $i60 := $i43;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i61 := $eq.i32($i60, $sub.i32(0, 107));
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i81 := $ne.i32($i60, 0);
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    $i82 := $zext.i1.i32($i81);
    call {:si_unique_call 218} {:cexpr "tmp___6"} boogie_si_record_i32($i82);
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    $i83 := $ne.i32($i82, 0);
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i83 == 1);
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} $i85 := __blkdev_driver_ioctl($p27, $i28, $i1, $i2);
    call {:si_unique_call 220} {:cexpr "tmp___5"} boogie_si_record_i32($i85);
    assume {:verifier.code 0} true;
    $i84 := $i85;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    $r := $i84;
    return;

  $bb44:
    assume $i83 == 1;
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    $i84 := $i82;
    goto $bb46;

  $bb32:
    assume $i61 == 1;
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 208} $p62 := get_current();
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} $i63 := fatal_signal_pending($p62);
    call {:si_unique_call 210} {:cexpr "tmp___4"} boogie_si_record_i32($i63);
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    $i64 := $eq.i32($i63, 0);
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb34:
    assume $i64 == 1;
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p5, $mul.ref(0, 536)), $mul.ref(40, 1));
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 211} $p66 := spinlock_check($p65);
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 212} $i67 := _raw_spin_lock_irqsave($p66);
    call {:si_unique_call 213} {:cexpr "flags"} boogie_si_record_i64($i67);
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p5, $mul.ref(0, 536)), $mul.ref(248, 1));
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.0, $p68);
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    $i70 := $p2i.ref.i64($p69);
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    $i71 := $eq.i64($i70, 0);
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p5, $mul.ref(0, 536)), $mul.ref(224, 1));
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.0, $p72);
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    $i74 := $ne.i32($i73, 0);
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    assume {:branchcond $i74} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p5, $mul.ref(0, 536)), $mul.ref(40, 1));
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 216} spin_unlock_irqrestore($p76, $i67);
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p5, $mul.ref(0, 536)), $mul.ref(16, 1));
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.0, $p77);
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p78, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.0, $p79);
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} dm_table_run_md_queue_async($p80);
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb39:
    assume $i74 == 1;
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} vslice_dummy_var_20 := __pg_init_all_paths($p5);
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb36:
    assume $i71 == 1;
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 214} __choose_pgpath($p5, 0);
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb25:
    assume $i56 == 1;
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} $i57 := scsi_verify_blk_ioctl($0.ref, $i1);
    call {:si_unique_call 207} {:cexpr "tmp___0"} boogie_si_record_i32($i57);
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    $i58 := $ne.i32($i57, 0);
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    $i59 := $i43;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    $i60 := $i59;
    goto $bb30;

  $bb27:
    assume $i58 == 1;
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    $i59 := $i57;
    goto $bb29;

  $bb22:
    assume $i49 == 1;
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb19:
    assume $i45 == 1;
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    $i46 := $sub.i32(0, 5);
    goto $bb21;

  $bb13:
    assume $i37 == 1;
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p5);
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($p38, $mul.ref(268, 1));
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.0, $p39);
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i32($i40);
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb15;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i42 == 1;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i43 := $sub.i32(0, 107);
    goto $bb18;

  $bb7:
    assume $i30 == 1;
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p5);
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($p31, $mul.ref(268, 1));
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.0, $p32);
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i33);
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb10, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb9;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i35 == 1;
    goto $bb11;

  $bb4:
    assume $i16 == 1;
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p14, $mul.ref(0, 272)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p14, $mul.ref(0, 272)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    call {:si_unique_call 202} {:cexpr "mode"} boogie_si_record_i32($i26);
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    $p27, $i28 := $p21, $i26;
    goto $bb6;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 201} __choose_pgpath($p5, 0);
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const multipath_busy: ref;

axiom multipath_busy == $sub.ref(0, 161047);

procedure multipath_busy($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation multipath_busy($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i1;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $i23: i1;
  var $i28: i32;
  var $i29: i64;
  var $i30: i64;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $i38: i1;
  var $i39: i32;
  var $i40: i64;
  var $i41: i64;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p34: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $p51: ref;
  var $i52: i64;
  var $i53: i1;
  var $p57: ref;
  var $i58: i32;
  var $i59: i1;
  var $i60: i32;
  var $i61: i1;
  var $i64: i32;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $i70: i64;
  var $i71: i1;
  var $p55: ref;
  var $i56: i32;
  var $i72: i32;
  var $i54: i32;
  var $i62: i32;
  var $i63: i32;
  var $i73: i1;
  var $i74: i32;
  var $i18: i32;
  var $p75: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 536)), $mul.ref(40, 1));
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 221} $p5 := spinlock_check($p4);
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 222} $i6 := _raw_spin_lock_irqsave($p5);
    call {:si_unique_call 223} {:cexpr "flags"} boogie_si_record_i64($i6);
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 536)), $mul.ref(228, 1));
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i9 == 1);
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 536)), $mul.ref(236, 1));
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 536)), $mul.ref(240, 1));
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    $i22 := $eq.i64($i21, 0);
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    $i23 := 0;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    $i28 := $zext.i1.i32($i23);
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    $i29 := $sext.i32.i64($i28);
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 225} $i30 := ldv__builtin_expect($i29, 0);
    call {:si_unique_call 226} {:cexpr "tmp___1"} boogie_si_record_i64($i30);
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, 0);
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i31 == 1);
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p3, $mul.ref(0, 536)), $mul.ref(248, 1));
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p36);
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i37, 0);
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    $i39 := $zext.i1.i32($i38);
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    $i40 := $sext.i32.i64($i39);
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 227} $i41 := ldv__builtin_expect($i40, 1);
    call {:si_unique_call 228} {:cexpr "tmp___0"} boogie_si_record_i64($i41);
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, 0);
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i42 == 1);
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p3, $mul.ref(0, 536)), $mul.ref(40, 1));
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 224} spin_unlock_irqrestore($p75, $i6);
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb17:
    assume $i42 == 1;
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p3, $mul.ref(0, 536)), $mul.ref(248, 1));
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p34 := $p44;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p34, $mul.ref(0, 72)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p48, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p49);
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p34, $mul.ref(0, 72)), $mul.ref(56, 1));
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    $i52 := $p2i.ref.i64($p51);
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    $i53 := $ne.i64($i50, $i52);
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    $i54 := 0;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i53 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i62, $i63 := $i54, 1;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    $i73 := $eq.i32($i62, 0);
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    $i74 := $i63;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    $i18 := $i74;
    goto $bb9;

  $bb35:
    assume $i73 == 1;
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    $i74 := 0;
    goto $bb37;

  $bb20:
    assume $i53 == 1;
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    $p55, $i56 := $p47, 0;
    goto $bb23;

  $bb23:
    call $p57, $i58, $i59, $i60, $i61, $i64, $p66, $p67, $p68, $p69, $i70, $i71, $p55, $i56, $i72 := multipath_busy_loop_$bb23($i52, $p57, $i58, $i59, $i60, $i61, $i64, $p66, $p67, $p68, $p69, $i70, $i71, $p55, $i56, $i72);
    goto $bb23_last;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p55, $mul.ref(0, 272)), $mul.ref(24, 1));
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.0, $p57);
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    $i59 := $ne.i32($i58, 0);
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    $i64 := $i56;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($p55, $mul.ref(0, 272)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p67);
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p68, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    $i70 := $p2i.ref.i64($p69);
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    $i71 := $ne.i64($i70, $i52);
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    $i72 := $i64;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    $i54 := $i72;
    goto $bb22;

  $bb32:
    assume $i71 == 1;
    assume {:verifier.code 0} true;
    $p55, $i56 := $p67, $i64;
    goto $bb32_dummy;

  $bb25:
    assume $i59 == 1;
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 229} $i60 := __pgpath_busy($p55);
    call {:si_unique_call 230} {:cexpr "tmp___2"} boogie_si_record_i32($i60);
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    $i61 := $eq.i32($i60, 0);
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i64 := 1;
    goto $bb31;

  $bb27:
    assume $i61 == 1;
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    $i62, $i63 := 1, 0;
    goto $bb29;

  $bb14:
    assume $i31 == 1;
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p3, $mul.ref(0, 536)), $mul.ref(256, 1));
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    $p34 := $p33;
    goto $bb16;

  $bb11:
    assume $i22 == 1;
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p3, $mul.ref(0, 536)), $mul.ref(256, 1));
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    assume {:verifier.code 0} true;
    $i23 := $i27;
    goto $bb13;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p3);
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p13, $mul.ref(268, 1));
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb6;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i18 := 1;
    goto $bb9;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb2;

  $bb32_dummy:
    assume false;
    return;

  $bb23_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1203;
}



const multipath_iterate_devices: ref;

axiom multipath_iterate_devices == $sub.ref(0, 162079);

procedure multipath_iterate_devices($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation multipath_iterate_devices($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $p34: ref;
  var $i35: i64;
  var $i36: i32;
  var $i37: i1;
  var $i38: i32;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $i46: i1;
  var $p28: ref;
  var $i47: i32;
  var $i27: i32;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i64;
  var $i54: i1;
  var $i16: i32;
  var $p17: ref;
  var $i55: i32;
  var $i15: i32;
  var $i39: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 536)), $mul.ref(120, 1)), $mul.ref(0, 1));
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 536)), $mul.ref(120, 1));
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i11, $i13);
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    $i15 := 0;
    assume {:branchcond $i14} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i39 := $i15;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    $r := $i39;
    return;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    $i16, $p17 := 0, $p8;
    goto $bb4;

  $bb4:
    call $p19, $p20, $p21, $p22, $i23, $p24, $i25, $i26, $p30, $p31, $p32, $i33, $p34, $i35, $i36, $i37, $i38, $p41, $p42, $p43, $p44, $i45, $i46, $p28, $i47, $i27, $p49, $p50, $p51, $p52, $i53, $i54, $i16, $p17, $i55 := multipath_iterate_devices_loop_$bb4($p0, $p1, $p2, $i13, $p19, $p20, $p21, $p22, $i23, $p24, $i25, $i26, $p30, $p31, $p32, $i33, $p34, $i35, $i36, $i37, $i38, $p41, $p42, $p43, $p44, $i45, $i46, $p28, $i47, $i27, $p49, $p50, $p51, $p52, $i53, $i54, $i16, $p17, $i55);
    goto $bb4_last;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 72)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p17, $mul.ref(0, 72)), $mul.ref(56, 1));
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i23, $i25);
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    $i27 := $i16;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p50);
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p51, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    $i53 := $p2i.ref.i64($p52);
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    $i54 := $ne.i64($i53, $i13);
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $i55 := $i27;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    $i15 := $i55;
    goto $bb3;

  $bb18:
    assume $i54 == 1;
    assume {:verifier.code 0} true;
    $i16, $p17 := $i27, $p50;
    goto $bb18_dummy;

  $bb6:
    assume $i26 == 1;
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    $p28 := $p20;
    goto $bb9;

  $bb9:
    call $p30, $p31, $p32, $i33, $p34, $i35, $i36, $i37, $i38, $p41, $p42, $p43, $p44, $i45, $i46, $p28, $i47 := multipath_iterate_devices_loop_$bb9($p0, $p1, $p2, $i25, $p30, $p31, $p32, $i33, $p34, $i35, $i36, $i37, $i38, $p41, $p42, $p43, $p44, $i45, $i46, $p28, $i47);
    goto $bb9_last;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p28, $mul.ref(0, 272)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(16, 1));
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    $i33 := $load.i64($M.0, $p32);
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(24, 1));
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.0, $p34);
    call {:si_unique_call 231} $i36 := devirtbounce.3($p1, $p0, $p31, $i33, $i35, $p2);
    call {:si_unique_call 232} {:cexpr "ret"} boogie_si_record_i32($i36);
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    $i38 := $i36;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p28, $mul.ref(0, 272)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p43, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p44);
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    $i46 := $ne.i64($i45, $i25);
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    $i47 := $i36;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    $i27 := $i47;
    goto $bb8;

  $bb15:
    assume $i46 == 1;
    assume {:verifier.code 0} true;
    $p28 := $p42;
    goto $bb15_dummy;

  $bb11:
    assume $i37 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    $i39 := $i38;
    goto $bb13;

  $bb15_dummy:
    assume false;
    return;

  $bb9_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1260;

  $bb18_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1247;
}



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 163111);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const _raw_spin_lock_irqsave: ref;

axiom _raw_spin_lock_irqsave == $sub.ref(0, 164143);

procedure _raw_spin_lock_irqsave($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation _raw_spin_lock_irqsave($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 1} true;
    call {:si_unique_call 233} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 234} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 165175);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 235} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 236} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __pgpath_busy: ref;

axiom __pgpath_busy == $sub.ref(0, 166207);

procedure __pgpath_busy($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __pgpath_busy($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 237} $p6 := bdev_get_queue($p5);
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 238} $i7 := blk_lld_busy($p6);
    call {:si_unique_call 239} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const spin_unlock_irqrestore: ref;

axiom spin_unlock_irqrestore == $sub.ref(0, 167239);

procedure spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation spin_unlock_irqrestore($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 240} {:cexpr "spin_unlock_irqrestore:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} _raw_spin_unlock_irqrestore($p3, $i1);
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irqrestore: ref;

axiom _raw_spin_unlock_irqrestore == $sub.ref(0, 168271);

procedure _raw_spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation _raw_spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 242} {:cexpr "_raw_spin_unlock_irqrestore:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    return;
}



const bdev_get_queue: ref;

axiom bdev_get_queue == $sub.ref(0, 169303);

procedure bdev_get_queue($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation bdev_get_queue($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 480)), $mul.ref(272, 1));
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1752)), $mul.ref(1672, 1));
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const blk_lld_busy: ref;

axiom blk_lld_busy == $sub.ref(0, 170335);

procedure blk_lld_busy($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation blk_lld_busy($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 1} true;
    call {:si_unique_call 243} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 244} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __choose_pgpath: ref;

axiom __choose_pgpath == $sub.ref(0, 171367);

procedure __choose_pgpath($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation __choose_pgpath($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $i6: i8;
  var $i7: i8;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $p31: ref;
  var $i32: i64;
  var $i33: i1;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $i38: i32;
  var $i39: i1;
  var $i40: i32;
  var $i41: i1;
  var $p42: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $i49: i1;
  var $p34: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i64;
  var $p56: ref;
  var $i57: i64;
  var $i58: i1;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i32;
  var $i64: i1;
  var $i65: i32;
  var $i66: i1;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i64;
  var $i73: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 245} {:cexpr "__choose_pgpath:arg:nr_bytes"} boogie_si_record_i64($i1);
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(236, 1));
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 0);
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(256, 1));
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(248, 1));
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(120, 1)), $mul.ref(0, 1));
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(120, 1));
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p31);
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    $i33 := $ne.i64($i30, $i32);
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(120, 1)), $mul.ref(0, 1));
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p52);
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p53, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    $i55 := $p2i.ref.i64($p54);
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(120, 1));
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    $i57 := $p2i.ref.i64($p56);
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    $i58 := $ne.i64($i55, $i57);
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume !($i58 == 1);
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(240, 1));
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p59, $0.ref);
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(248, 1));
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p60, $0.ref);
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb38:
    assume $i58 == 1;
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    $p61 := $p52;
    goto $bb42;

  $bb42:
    call $i40, $p61, $p62, $i63, $i64, $i65, $i66, $p68, $p69, $p70, $p71, $i72, $i73 := __choose_pgpath_loop_$bb42($p0, $i1, $i40, $i57, $p61, $p62, $i63, $i64, $i65, $i66, $p68, $p69, $p70, $p71, $i72, $i73);
    goto $bb42_last;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p61, $mul.ref(0, 72)), $mul.ref(44, 1));
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.0, $p62);
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    $i64 := $eq.i32($i63, 0);
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 252} $i65 := __choose_path_in_pg($p0, $p61, $i1);
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    $i66 := $eq.i32($i65, 0);
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    $i40 := 0;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($add.ref($p61, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.0, $p68);
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p69);
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p70, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    $i72 := $p2i.ref.i64($p71);
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    $i73 := $ne.i64($i72, $i57);
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i73 == 1);
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb51:
    assume $i73 == 1;
    assume {:verifier.code 0} true;
    $p61 := $p69;
    goto $bb51_dummy;

  $bb47:
    assume {:verifier.code 0} true;
    assume $i66 == 1;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i40, 0);
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb31:
    assume $i41 == 1;
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(232, 1));
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p42, 1);
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb44:
    assume $i64 == 1;
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb19:
    assume $i33 == 1;
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    $p34 := $p27;
    goto $bb22;

  $bb22:
    call $p35, $i36, $i37, $i38, $i39, $i40, $p44, $p45, $p46, $p47, $i48, $i49, $p34 := __choose_pgpath_loop_$bb22($p0, $i1, $i32, $p35, $i36, $i37, $i38, $i39, $i40, $p44, $p45, $p46, $p47, $i48, $i49, $p34);
    goto $bb22_last;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 72)), $mul.ref(44, 1));
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, 1);
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} $i38 := __choose_path_in_pg($p0, $p34, $i1);
    call {:si_unique_call 251} {:cexpr "tmp___1"} boogie_si_record_i32($i38);
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 0);
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    $i40 := 1;
    assume true;
    goto $bb28, $bb30;

  $bb30:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p34, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p46, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    $i48 := $p2i.ref.i64($p47);
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    $i49 := $ne.i64($i48, $i32);
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i49 == 1);
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb35:
    assume $i49 == 1;
    assume {:verifier.code 0} true;
    $p34 := $p45;
    goto $bb35_dummy;

  $bb28:
    assume {:verifier.code 0} true;
    assume $i39 == 1;
    goto $bb29;

  $bb24:
    assume $i37 == 1;
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb12:
    assume $i20 == 1;
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(248, 1));
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 248} $i23 := __choose_path_in_pg($p0, $p22, $i1);
    call {:si_unique_call 249} {:cexpr "tmp___0"} boogie_si_record_i32($i23);
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb14:
    assume $i24 == 1;
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(256, 1));
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(256, 1));
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p14, $0.ref);
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 246} $i15 := __choose_path_in_pg($p0, $p13, $i1);
    call {:si_unique_call 247} {:cexpr "tmp"} boogie_si_record_i32($i15);
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 0);
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb7:
    assume $i16 == 1;
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(268, 1));
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    $i7 := $and.i8($i6, $sub.i8(0, 2));
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p5, $i7);
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb51_dummy:
    assume false;
    return;

  $bb42_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1418;

  $bb35_dummy:
    assume false;
    return;

  $bb22_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1380;
}



const i_size_read: ref;

axiom i_size_read == $sub.ref(0, 172399);

procedure i_size_read($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation i_size_read($p0: ref) returns ($r: i64)
{
  var $p1: ref;
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1000)), $mul.ref(80, 1));
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.0, $p1);
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const scsi_verify_blk_ioctl: ref;

axiom scsi_verify_blk_ioctl == $sub.ref(0, 173431);

procedure scsi_verify_blk_ioctl($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation scsi_verify_blk_ioctl($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 253} {:cexpr "scsi_verify_blk_ioctl:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 1} true;
    call {:si_unique_call 254} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 255} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const get_current: ref;

axiom get_current == $sub.ref(0, 174463);

procedure get_current() returns ($r: ref);
  free requires assertsPassed;



implementation get_current() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} $p0 := devirtbounce.4(0, current_task);
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const fatal_signal_pending: ref;

axiom fatal_signal_pending == $sub.ref(0, 175495);

procedure fatal_signal_pending($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation fatal_signal_pending($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 257} $i1 := signal_pending($p0);
    call {:si_unique_call 258} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} $i3 := __fatal_signal_pending($p0);
    call {:si_unique_call 260} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    $i6 := $i5;
    goto $bb6;

  $bb3:
    assume $i4 == 1;
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb5;
}



const __pg_init_all_paths: ref;

axiom __pg_init_all_paths == $sub.ref(0, 176527);

procedure __pg_init_all_paths($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.10, $M.9, $M.12, $M.11, $M.14, $M.13, $M.16, $M.15;



implementation __pg_init_all_paths($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $i28: i64;
  var $i29: i64;
  var $p30: ref;
  var $p31: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i1;
  var $p44: ref;
  var $i45: i32;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $i49: i1;
  var $i50: i8;
  var $i51: i1;
  var $p52: ref;
  var $i53: i32;
  var $i54: i32;
  var $p55: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i64;
  var $p62: ref;
  var $p63: ref;
  var $i64: i64;
  var $i65: i1;
  var $p43: ref;
  var $p66: ref;
  var $i67: i32;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(228, 1));
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i3 == 1);
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref(268, 1));
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(276, 1));
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    $i12 := $add.i32($i11, 1);
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(276, 1));
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, $i12);
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(224, 1));
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, 0);
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(248, 1));
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i17, 0);
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(232, 1));
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i29 := 0;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(248, 1));
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p31, $mul.ref(0, 72)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p36);
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(248, 1));
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 72)), $mul.ref(56, 1));
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p40);
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i37, $i41);
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(228, 1));
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.0, $p66);
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    $i9 := $i67;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb17:
    assume $i42 == 1;
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    $p43 := $p34;
    goto $bb20;

  $bb20:
    call $p44, $i45, $i46, $p47, $p48, $i49, $i50, $i51, $p52, $i53, $i54, $p55, $p57, $p58, $p59, $p60, $i61, $p62, $p63, $i64, $i65, $p43 := __pg_init_all_paths_loop_$bb20($p0, $i29, $p38, $p44, $i45, $i46, $p47, $p48, $i49, $i50, $i51, $p52, $i53, $i54, $p55, $p57, $p58, $p59, $p60, $i61, $p62, $p63, $i64, $i65, $p43);
    goto $bb20_last;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p43, $mul.ref(0, 272)), $mul.ref(24, 1));
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i45, 0);
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p47 := $M.8;
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p43, $mul.ref(0, 272)), $mul.ref(48, 1));
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 263} $i49 := queue_delayed_work($p47, $p48, $i29);
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    $i50 := $zext.i1.i8($i49);
    call {:si_unique_call 264} {:cexpr "tmp"} boogie_si_record_i8($i50);
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i8.i1($i50);
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p43, $mul.ref(0, 272)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p58);
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p59, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    $i61 := $p2i.ref.i64($p60);
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p38);
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p62, $mul.ref(0, 72)), $mul.ref(56, 1));
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    $i64 := $p2i.ref.i64($p63);
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    $i65 := $ne.i64($i61, $i64);
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i65 == 1);
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb29:
    assume $i65 == 1;
    assume {:verifier.code 0} true;
    $p43 := $p58;
    goto $bb29_dummy;

  $bb26:
    assume $i51 == 1;
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(228, 1));
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.0, $p52);
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    $i54 := $add.i32($i53, 1);
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(228, 1));
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p55, $i54);
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb22:
    assume $i46 == 1;
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb11:
    assume $i21 == 1;
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(280, 1));
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, $sub.i32(0, 1));
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i24 == 1);
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    $i27 := 2000;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 261} $i28 := msecs_to_jiffies($i27);
    call {:si_unique_call 262} {:cexpr "pg_init_delay"} boogie_si_record_i64($i28);
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    $i29 := $i28;
    goto $bb16;

  $bb13:
    assume $i24 == 1;
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(280, 1));
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    $i27 := $i26;
    goto $bb15;

  $bb8:
    assume $i18 == 1;
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb6;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;

  $bb29_dummy:
    assume false;
    return;

  $bb20_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1523;
}



const dm_table_run_md_queue_async: ref;

axiom dm_table_run_md_queue_async == $sub.ref(0, 177559);

procedure dm_table_run_md_queue_async($p0: ref);
  free requires assertsPassed;



implementation dm_table_run_md_queue_async($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    return;
}



const __blkdev_driver_ioctl: ref;

axiom __blkdev_driver_ioctl == $sub.ref(0, 178591);

procedure __blkdev_driver_ioctl($p0: ref, $i1: i32, $i2: i32, $i3: i64) returns ($r: i32);
  free requires assertsPassed;



implementation __blkdev_driver_ioctl($p0: ref, $i1: i32, $i2: i32, $i3: i64) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 265} {:cexpr "__blkdev_driver_ioctl:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 266} {:cexpr "__blkdev_driver_ioctl:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 267} {:cexpr "__blkdev_driver_ioctl:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 1} true;
    call {:si_unique_call 268} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 269} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const msecs_to_jiffies: ref;

axiom msecs_to_jiffies == $sub.ref(0, 179623);

procedure msecs_to_jiffies($i0: i32) returns ($r: i64);
  free requires assertsPassed;



implementation msecs_to_jiffies($i0: i32) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 270} {:cexpr "msecs_to_jiffies:arg:m"} boogie_si_record_i32($i0);
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} $i1 := __msecs_to_jiffies($i0);
    call {:si_unique_call 272} {:cexpr "tmp___0"} boogie_si_record_i64($i1);
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const queue_delayed_work: ref;

axiom queue_delayed_work == $sub.ref(0, 180655);

procedure queue_delayed_work($p0: ref, $p1: ref, $i2: i64) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.10, $M.9, $M.12, $M.11, $M.14, $M.13, $M.16, $M.15;



implementation queue_delayed_work($p0: ref, $p1: ref, $i2: i64) returns ($r: i1)
{
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 273} {:cexpr "queue_delayed_work:arg:delay"} boogie_si_record_i64($i2);
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 274} $i3 := ldv_queue_delayed_work_on_22(8192, $p0, $p1, $i2);
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 275} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const ldv_queue_delayed_work_on_22: ref;

axiom ldv_queue_delayed_work_on_22 == $sub.ref(0, 181687);

procedure ldv_queue_delayed_work_on_22($i0: i32, $p1: ref, $p2: ref, $i3: i64) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.10, $M.9, $M.12, $M.11, $M.14, $M.13, $M.16, $M.15;



implementation ldv_queue_delayed_work_on_22($i0: i32, $p1: ref, $p2: ref, $i3: i64) returns ($r: i1)
{
  var $i4: i1;
  var $i5: i8;
  var $i6: i1;
  var $i7: i8;
  var $p8: ref;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 276} {:cexpr "ldv_queue_delayed_work_on_22:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    call {:si_unique_call 277} {:cexpr "ldv_queue_delayed_work_on_22:arg:ldv_func_arg4"} boogie_si_record_i64($i3);
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 278} $i4 := queue_delayed_work_on($i0, $p1, $p2, $i3);
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i8($i4);
    call {:si_unique_call 279} {:cexpr "tmp"} boogie_si_record_i8($i5);
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i5);
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i6);
    call {:si_unique_call 280} {:cexpr "ldv_func_res"} boogie_si_record_i8($i7);
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 281} activate_work_1($p8, 2);
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i7);
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const queue_delayed_work_on: ref;

axiom queue_delayed_work_on == $sub.ref(0, 182719);

procedure queue_delayed_work_on($i0: i32, $p1: ref, $p2: ref, $i3: i64) returns ($r: i1);
  free requires assertsPassed;



implementation queue_delayed_work_on($i0: i32, $p1: ref, $p2: ref, $i3: i64) returns ($r: i1)
{
  var $i4: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 282} {:cexpr "queue_delayed_work_on:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 283} {:cexpr "queue_delayed_work_on:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 1} true;
    call {:si_unique_call 284} $i4 := __VERIFIER_nondet_bool();
    call {:si_unique_call 285} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i4);
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const activate_work_1: ref;

axiom activate_work_1 == $sub.ref(0, 183751);

procedure activate_work_1($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.10, $M.9, $M.12, $M.11, $M.14, $M.13, $M.16, $M.15;



implementation activate_work_1($p0: ref, $i1: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} {:cexpr "activate_work_1:arg:state"} boogie_si_record_i32($i1);
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    $i2 := $M.9;
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i4 := $M.11;
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i6 := $M.13;
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i8 := $M.15;
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    $M.16 := $p0;
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    $M.15 := $i1;
    call {:si_unique_call 290} {:cexpr "ldv_work_1_3"} boogie_si_record_i32($i1);
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume $i7 == 1;
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    $M.14 := $p0;
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    $M.13 := $i1;
    call {:si_unique_call 289} {:cexpr "ldv_work_1_2"} boogie_si_record_i32($i1);
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    $M.12 := $p0;
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $M.11 := $i1;
    call {:si_unique_call 288} {:cexpr "ldv_work_1_1"} boogie_si_record_i32($i1);
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    $M.10 := $p0;
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    $M.9 := $i1;
    call {:si_unique_call 287} {:cexpr "ldv_work_1_0"} boogie_si_record_i32($i1);
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __msecs_to_jiffies: ref;

axiom __msecs_to_jiffies == $sub.ref(0, 184783);

procedure __msecs_to_jiffies($i0: i32) returns ($r: i64);
  free requires assertsPassed;



implementation __msecs_to_jiffies($i0: i32) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 291} {:cexpr "__msecs_to_jiffies:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 1} true;
    call {:si_unique_call 292} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 293} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const signal_pending: ref;

axiom signal_pending == $sub.ref(0, 185815);

procedure signal_pending($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation signal_pending($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 294} $i1 := test_tsk_thread_flag($p0, 2);
    call {:si_unique_call 295} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 296} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 297} {:cexpr "tmp___0"} boogie_si_record_i64($i5);
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i64.i32($i5);
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const __fatal_signal_pending: ref;

axiom __fatal_signal_pending == $sub.ref(0, 186847);

procedure __fatal_signal_pending($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __fatal_signal_pending($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 11744)), $mul.ref(3880, 1)), $mul.ref(16, 1));
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 298} $i3 := sigismember($p2, 9);
    call {:si_unique_call 299} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 300} $i7 := ldv__builtin_expect($i6, 0);
    call {:si_unique_call 301} {:cexpr "tmp___0"} boogie_si_record_i64($i7);
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i64.i32($i7);
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const sigismember: ref;

axiom sigismember == $sub.ref(0, 187879);

procedure sigismember($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation sigismember($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i64;
  var $p5: ref;
  var $i6: i64;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i32;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 302} {:cexpr "sigismember:arg:_sig"} boogie_si_record_i32($i1);
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    $i2 := $add.i32($i1, $sub.i32(0, 1));
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    $i3 := $sext.i32.i64($i2);
    call {:si_unique_call 303} {:cexpr "sig"} boogie_si_record_i64($i3);
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.7, $p5);
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i64.i32($i3);
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $i8 := $zext.i32.i64($i7);
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    $i9 := $lshr.i64($i6, $i8);
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i64.i32($i9);
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 1);
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;
}



const test_tsk_thread_flag: ref;

axiom test_tsk_thread_flag == $sub.ref(0, 188911);

procedure test_tsk_thread_flag($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation test_tsk_thread_flag($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 304} {:cexpr "test_tsk_thread_flag:arg:flag"} boogie_si_record_i32($i1);
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 11744)), $mul.ref(8, 1));
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.7, $p2);
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} $i5 := test_ti_thread_flag($p4, $i1);
    call {:si_unique_call 306} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const test_ti_thread_flag: ref;

axiom test_ti_thread_flag == $sub.ref(0, 189943);

procedure test_ti_thread_flag($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation test_ti_thread_flag($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} {:cexpr "test_ti_thread_flag:arg:flag"} boogie_si_record_i32($i1);
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    $i2 := $sext.i32.i64($i1);
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} $i5 := variable_test_bit($i2, $p4);
    call {:si_unique_call 309} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const variable_test_bit: ref;

axiom variable_test_bit == $sub.ref(0, 190975);

procedure variable_test_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation variable_test_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} {:cexpr "variable_test_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 311} $i2 := devirtbounce.5(0, $p1, $i0);
    call {:si_unique_call 312} {:cexpr "oldbit"} boogie_si_record_i32($i2);
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __choose_path_in_pg: ref;

axiom __choose_path_in_pg == $sub.ref(0, 192007);

procedure __choose_path_in_pg($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation __choose_path_in_pg($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} {:cexpr "__choose_path_in_pg:arg:nr_bytes"} boogie_si_record_i64($i2);
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 96)), $mul.ref(48, 1));
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(264, 1));
    call {:si_unique_call 314} $p10 := devirtbounce.6($p7, $p8, $p9, $i2);
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p10);
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p14, $mul.ref($sub.ref(0, 32), 272));
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(240, 1));
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p16, $p15);
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(248, 1));
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p1);
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i19, $i20);
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb5:
    assume $i21 == 1;
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(240, 1));
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 315} __switch_pg($p0, $p23);
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 6);
    goto $bb3;
}



const __switch_pg: ref;

axiom __switch_pg == $sub.ref(0, 193039);

procedure __switch_pg($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation __switch_pg($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i8;
  var $i12: i8;
  var $i13: i8;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i8;
  var $p18: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 272)), $mul.ref(16, 1));
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(248, 1));
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, $p3);
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(24, 1));
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(224, 1));
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, 0);
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(268, 1));
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.0, $p15);
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    $i17 := $and.i8($i16, $sub.i8(0, 2));
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p15, $i17);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(276, 1));
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, 0);
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(224, 1));
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, 1);
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(268, 1));
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    $i12 := $and.i8($i11, $sub.i8(0, 2));
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    $i13 := $or.i8($i12, 1);
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p10, $i13);
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mutex_lock_nested: ref;

axiom mutex_lock_nested == $sub.ref(0, 194071);

procedure mutex_lock_nested($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation mutex_lock_nested($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 316} {:cexpr "mutex_lock_nested:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    return;
}



const dm_suspended: ref;

axiom dm_suspended == $sub.ref(0, 195103);

procedure dm_suspended($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dm_suspended($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 1} true;
    call {:si_unique_call 317} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 318} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const strcasecmp: ref;

axiom strcasecmp == $sub.ref(0, 196135);

procedure strcasecmp($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation strcasecmp($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 1} true;
    call {:si_unique_call 319} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 320} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const queue_if_no_path: ref;

axiom queue_if_no_path == $sub.ref(0, 197167);

procedure queue_if_no_path($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation queue_if_no_path($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $i8: i8;
  var $i9: i8;
  var $i10: i8;
  var $p11: ref;
  var $i12: i8;
  var $i13: i8;
  var $i14: i8;
  var $i15: i8;
  var $i16: i8;
  var $i17: i8;
  var $p18: ref;
  var $i19: i8;
  var $i20: i8;
  var $i21: i8;
  var $i22: i8;
  var $i23: i8;
  var $i24: i8;
  var $p25: ref;
  var $i26: i8;
  var $i27: i8;
  var $i28: i8;
  var $i29: i8;
  var $i30: i8;
  var $p31: ref;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 321} {:cexpr "queue_if_no_path:arg:queue_if_no_path___0"} boogie_si_record_i32($i1);
    call {:si_unique_call 322} {:cexpr "queue_if_no_path:arg:save_old_value"} boogie_si_record_i32($i2);
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(40, 1));
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 323} $p4 := spinlock_check($p3);
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} $i5 := _raw_spin_lock_irqsave($p4);
    call {:si_unique_call 325} {:cexpr "flags"} boogie_si_record_i64($i5);
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i2, 0);
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i8($i1);
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(268, 1));
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p18);
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    $i20 := $and.i8($i17, 1);
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    $i21 := $shl.i8($i20, 2);
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    $i22 := $and.i8($i19, $sub.i8(0, 5));
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    $i23 := $or.i8($i22, $i21);
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p18, $i23);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i8($i1);
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(268, 1));
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.0, $p25);
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    $i27 := $and.i8($i24, 1);
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    $i28 := $shl.i8($i27, 1);
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    $i29 := $and.i8($i26, $sub.i8(0, 3));
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    $i30 := $or.i8($i29, $i28);
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p25, $i30);
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(40, 1));
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} spin_unlock_irqrestore($p31, $i5);
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i1, 0);
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb4:
    assume $i32 == 1;
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(16, 1));
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 327} dm_table_run_md_queue_async($p36);
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(268, 1));
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    $i9 := $lshr.i8($i8, 1);
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    $i10 := $and.i8($i9, 1);
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(268, 1));
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    $i13 := $and.i8($i10, 1);
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    $i14 := $shl.i8($i13, 2);
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    $i15 := $and.i8($i12, $sub.i8(0, 5));
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    $i16 := $or.i8($i15, $i14);
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p11, $i16);
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const printk: ref;

axiom printk == $sub.ref(0, 198199);

procedure printk.ref.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 1} true;
    call {:si_unique_call 328} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 329} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 1} true;
    call {:si_unique_call 330} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 331} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 1} true;
    call {:si_unique_call 332} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 333} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 1} true;
    call {:si_unique_call 334} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 335} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb4:
    assume {:verifier.code 1} true;
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 1} true;
    call {:si_unique_call 336} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 337} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const bypass_pg_num: ref;

axiom bypass_pg_num == $sub.ref(0, 199231);

procedure bypass_pg_num($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.17, $M.0, $CurrAddr, $M.10, $M.9, $M.12, $M.11, $M.14, $M.13, $M.16, $M.15;



implementation bypass_pg_num($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i9: i32;
  var $i10: i1;
  var $i12: i32;
  var $i13: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $i31: i32;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $i43: i1;
  var $p30: ref;
  var $p44: ref;
  var $p29: ref;
  var $p36: ref;
  var $i8: i32;
  var vslice_dummy_var_21: i32;
  var vslice_dummy_var_22: i32;
  var vslice_dummy_var_23: i32;
  var vslice_dummy_var_24: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 338} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} $p4 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 340} {:cexpr "bypass_pg_num:arg:bypassed"} boogie_si_record_i32($i2);
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p1);
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 342} $i9 := sscanf.ref.ref.ref.ref($p1, .str.63, $p3, $p4);
    call {:si_unique_call 343} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 1);
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.17, $p3);
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i13 == 1);
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(112, 1));
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.17, $p3);
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    $i18 := $ult.i32($i16, $i17);
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(120, 1)), $mul.ref(0, 1));
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(120, 1));
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i25, $i27);
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $p29 := $p22;
    assume {:branchcond $i28} true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p36 := $p29;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 347} bypass_pg($p0, $p36, $i2);
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb14:
    assume $i28 == 1;
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    $p30 := $p22;
    goto $bb17;

  $bb17:
    call $i31, $i32, $i33, $i34, $p35, $p38, $p39, $p40, $p41, $i42, $i43, $p30, $p44 := bypass_pg_num_loop_$bb17($p3, $i27, $i31, $i32, $i33, $i34, $p35, $p38, $p39, $p40, $p41, $i42, $i43, $p30, $p44);
    goto $bb17_last;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.17, $p3);
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    $i32 := $sub.i32($i31, 1);
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    $M.17 := $store.i32($M.17, $p3, $i32);
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.17, $p3);
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 0);
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    $p35 := $p30;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p30, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p40, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p41);
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    $i43 := $ne.i64($i42, $i27);
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    $p44 := $p39;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    $p29 := $p44;
    goto $bb16;

  $bb23:
    assume $i43 == 1;
    assume {:verifier.code 0} true;
    $p30 := $p39;
    goto $bb23_dummy;

  $bb19:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    $p36 := $p35;
    goto $bb21;

  $bb8:
    assume $i18 == 1;
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 346} vslice_dummy_var_24 := printk.ref(.str.62);
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 22);
    goto $bb3;

  $bb6:
    assume $i13 == 1;
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 345} vslice_dummy_var_23 := printk.ref(.str.62);
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 22);
    goto $bb3;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} vslice_dummy_var_22 := printk.ref(.str.62);
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 341} vslice_dummy_var_21 := printk.ref(.str.62);
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 22);
    goto $bb3;

  $bb23_dummy:
    assume false;
    return;

  $bb17_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1829;
}



const switch_pg_num: ref;

axiom switch_pg_num == $sub.ref(0, 200263);

procedure switch_pg_num($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.18, $CurrAddr, $M.10, $M.9, $M.12, $M.11, $M.14, $M.13, $M.16, $M.15;



implementation switch_pg_num($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i8: i32;
  var $i9: i1;
  var $i11: i32;
  var $i12: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $p32: ref;
  var $i33: i32;
  var $i34: i32;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $i46: i1;
  var $p31: ref;
  var $p47: ref;
  var $p48: ref;
  var $i7: i32;
  var vslice_dummy_var_25: i32;
  var vslice_dummy_var_26: i32;
  var vslice_dummy_var_27: i32;
  var vslice_dummy_var_28: i32;
  var vslice_dummy_var_29: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 349} $p3 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p1);
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 351} $i8 := sscanf.ref.ref.ref.ref($p1, .str.63, $p2, $p3);
    call {:si_unique_call 352} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 1);
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.18, $p2);
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i12 == 1);
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(112, 1));
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.18, $p2);
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    $i17 := $ult.i32($i15, $i16);
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(40, 1));
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 356} $p20 := spinlock_check($p19);
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} $i21 := _raw_spin_lock_irqsave($p20);
    call {:si_unique_call 358} {:cexpr "flags"} boogie_si_record_i64($i21);
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(120, 1)), $mul.ref(0, 1));
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(120, 1));
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i27, $i29);
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(40, 1));
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 359} spin_unlock_irqrestore($p47, $i21);
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(288, 1));
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 360} vslice_dummy_var_29 := schedule_work($p48);
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb14:
    assume $i30 == 1;
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    $p31 := $p24;
    goto $bb17;

  $bb17:
    call $p32, $i33, $i34, $i35, $i36, $p37, $p38, $p39, $p41, $p42, $p43, $p44, $i45, $i46, $p31 := switch_pg_num_loop_$bb17($p0, $p2, $i29, $p32, $i33, $i34, $i35, $i36, $p37, $p38, $p39, $p41, $p42, $p43, $p44, $i45, $i46, $p31);
    goto $bb17_last;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 72)), $mul.ref(44, 1));
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, 0);
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.18, $p2);
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    $i34 := $sub.i32($i33, 1);
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    $M.18 := $store.i32($M.18, $p2, $i34);
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.18, $p2);
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(240, 1));
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p37, $0.ref);
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(248, 1));
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p38, $0.ref);
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(256, 1));
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p39, $p31);
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p31, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p43, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p44);
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    $i46 := $ne.i64($i45, $i29);
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i46 == 1);
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb23:
    assume $i46 == 1;
    assume {:verifier.code 0} true;
    $p31 := $p42;
    goto $bb23_dummy;

  $bb19:
    assume $i36 == 1;
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 355} vslice_dummy_var_28 := printk.ref(.str.64);
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb3;

  $bb6:
    assume $i12 == 1;
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 354} vslice_dummy_var_27 := printk.ref(.str.64);
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb3;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 353} vslice_dummy_var_26 := printk.ref(.str.64);
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 350} vslice_dummy_var_25 := printk.ref(.str.64);
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb3;

  $bb23_dummy:
    assume false;
    return;

  $bb17_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1897;
}



const reinstate_path: ref;

axiom reinstate_path == $sub.ref(0, 201295);

procedure reinstate_path($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.10, $M.9, $M.12, $M.11, $M.14, $M.13, $M.16, $M.15;



implementation reinstate_path($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p13: ref;
  var $p14: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p30: ref;
  var $p31: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $p46: ref;
  var $i47: i32;
  var $i48: i32;
  var $p49: ref;
  var $i50: i1;
  var $p51: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i64;
  var $i56: i1;
  var $p57: ref;
  var $p58: ref;
  var $i59: i64;
  var $p60: ref;
  var $p61: ref;
  var $i62: i64;
  var $i63: i1;
  var $p64: ref;
  var $p66: ref;
  var $i67: i1;
  var $i68: i8;
  var $i69: i1;
  var $p70: ref;
  var $i71: i32;
  var $i72: i32;
  var $p73: ref;
  var $i52: i32;
  var $p74: ref;
  var $p75: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $i82: i32;
  var $p83: ref;
  var $i11: i32;
  var $i12: i32;
  var $p85: ref;
  var $i86: i1;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var vslice_dummy_var_30: i32;
  var vslice_dummy_var_31: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(16, 1));
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 536)), $mul.ref(40, 1));
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} $p6 := spinlock_check($p5);
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 362} $i7 := _raw_spin_lock_irqsave($p6);
    call {:si_unique_call 363} {:cexpr "flags"} boogie_si_record_i64($i7);
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(24, 1));
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(16, 1));
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p14, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 96)), $mul.ref(64, 1));
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    $i21 := $eq.i64($i20, 0);
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(16, 1));
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p31, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 96)), $mul.ref(64, 1));
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(16, 1));
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(32, 1));
    call {:si_unique_call 366} $i41 := devirtbounce.7($p36, $p39, $p40);
    call {:si_unique_call 367} {:cexpr "r"} boogie_si_record_i32($i41);
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(24, 1));
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p43, 1);
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p4, $mul.ref(0, 536)), $mul.ref(236, 1));
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    call {:si_unique_call 368} {:cexpr "tmp___1"} boogie_si_record_i32($i45);
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p4, $mul.ref(0, 536)), $mul.ref(236, 1));
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    $i48 := $add.i32($i47, 1);
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p4, $mul.ref(0, 536)), $mul.ref(236, 1));
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p49, $i48);
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i45, 0);
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i50 == 1);
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p4, $mul.ref(0, 536)), $mul.ref(24, 1));
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    $i55 := $p2i.ref.i64($p54);
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    $i56 := $ne.i64($i55, 0);
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i56 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i52 := 0;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p4, $mul.ref(0, 536)), $mul.ref(16, 1));
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.0, $p74);
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.0, $p77);
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p78, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    $p80 := $bitcast.ref.ref($p79);
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p4, $mul.ref(0, 536)), $mul.ref(236, 1));
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.0, $p81);
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 369} dm_path_uevent(1, $p75, $p80, $i82);
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p4, $mul.ref(0, 536)), $mul.ref(288, 1));
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 370} vslice_dummy_var_31 := schedule_work($p83);
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    $i11, $i12 := $i41, $i52;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p4, $mul.ref(0, 536)), $mul.ref(40, 1));
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 364} spin_unlock_irqrestore($p85, $i7);
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    $i86 := $ne.i32($i12, 0);
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb23:
    assume $i86 == 1;
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p4, $mul.ref(0, 536)), $mul.ref(16, 1));
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.0, $p87);
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p88, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    $p90 := $load.ref($M.0, $p89);
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 373} dm_table_run_md_queue_async($p90);
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb14:
    assume $i56 == 1;
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p4, $mul.ref(0, 536)), $mul.ref(248, 1));
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    $i59 := $p2i.ref.i64($p58);
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(16, 1));
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    $i62 := $p2i.ref.i64($p61);
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    $i63 := $eq.i64($i59, $i62);
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    assume {:branchcond $i63} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i63 == 1);
    goto $bb16;

  $bb17:
    assume $i63 == 1;
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    $p64 := $M.8;
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} $i67 := queue_work($p64, $p66);
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    $i68 := $zext.i1.i8($i67);
    call {:si_unique_call 372} {:cexpr "tmp___0"} boogie_si_record_i8($i68);
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    $i69 := $trunc.i8.i1($i68);
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    assume {:branchcond $i69} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb19:
    assume $i69 == 1;
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p4, $mul.ref(0, 536)), $mul.ref(228, 1));
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.0, $p70);
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    $i72 := $add.i32($i71, 1);
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p4, $mul.ref(0, 536)), $mul.ref(228, 1));
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p73, $i72);
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb11:
    assume $i50 == 1;
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p4, $mul.ref(0, 536)), $mul.ref(240, 1));
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p51, $0.ref);
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    $i52 := 1;
    goto $bb13;

  $bb8:
    assume $i42 == 1;
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    $i11, $i12 := $i41, 0;
    goto $bb3;

  $bb5:
    assume $i21 == 1;
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(16, 1));
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p23, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 365} vslice_dummy_var_30 := printk.ref.ref(.str.65, $p28);
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    $i11, $i12 := $sub.i32(0, 22), 0;
    goto $bb3;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    $i11, $i12 := 0, 0;
    goto $bb3;
}



const fail_path: ref;

axiom fail_path == $sub.ref(0, 202327);

procedure fail_path($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.10, $M.9, $M.12, $M.11, $M.14, $M.13, $M.16, $M.15;



implementation fail_path($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p17: ref;
  var $p18: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i32;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $i35: i32;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $i40: i64;
  var $i41: i1;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $p52: ref;
  var $p54: ref;
  var vslice_dummy_var_32: i32;
  var vslice_dummy_var_33: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(16, 1));
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 536)), $mul.ref(40, 1));
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 374} $p6 := spinlock_check($p5);
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 375} $i7 := _raw_spin_lock_irqsave($p6);
    call {:si_unique_call 376} {:cexpr "flags"} boogie_si_record_i64($i7);
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(24, 1));
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} vslice_dummy_var_32 := printk.ref.ref(.str.5, $p15);
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(16, 1));
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p18, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 96)), $mul.ref(56, 1));
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(16, 1));
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(32, 1));
    call {:si_unique_call 379} devirtbounce.8($p23, $p26, $p27);
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(24, 1));
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, 0);
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(28, 1));
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    $i31 := $add.i32($i30, 1);
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(28, 1));
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, $i31);
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p4, $mul.ref(0, 536)), $mul.ref(236, 1));
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    $i35 := $sub.i32($i34, 1);
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p4, $mul.ref(0, 536)), $mul.ref(236, 1));
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, $i35);
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p4, $mul.ref(0, 536)), $mul.ref(240, 1));
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p38);
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p0);
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    $i41 := $eq.i64($i39, $i40);
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p4, $mul.ref(0, 536)), $mul.ref(16, 1));
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p47, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p4, $mul.ref(0, 536)), $mul.ref(236, 1));
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} dm_path_uevent(0, $p44, $p49, $i51);
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p4, $mul.ref(0, 536)), $mul.ref(288, 1));
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 381} vslice_dummy_var_33 := schedule_work($p52);
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p4, $mul.ref(0, 536)), $mul.ref(40, 1));
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 377} spin_unlock_irqrestore($p54, $i7);
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb5:
    assume $i41 == 1;
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p4, $mul.ref(0, 536)), $mul.ref(240, 1));
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p42, $0.ref);
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const dm_table_get_mode: ref;

axiom dm_table_get_mode == $sub.ref(0, 203359);

procedure dm_table_get_mode($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dm_table_get_mode($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 1} true;
    call {:si_unique_call 382} $i1 := __VERIFIER_nondet_uint();
    call {:si_unique_call 383} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i1);
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const dm_get_device: ref;

axiom dm_get_device == $sub.ref(0, 204391);

procedure dm_get_device($p0: ref, $p1: ref, $i2: i32, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dm_get_device($p0: ref, $p1: ref, $i2: i32, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 384} {:cexpr "dm_get_device:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 1} true;
    call {:si_unique_call 385} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 386} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const action_dev: ref;

axiom action_dev == $sub.ref(0, 205423);

procedure action_dev($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.10, $M.9, $M.12, $M.11, $M.14, $M.13, $M.16, $M.15, $CurrAddr;



implementation action_dev($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i64;
  var $i32: i1;
  var $i33: i32;
  var $i34: i32;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $i41: i1;
  var $p25: ref;
  var $i26: i32;
  var $i42: i32;
  var $i24: i32;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $i49: i1;
  var $p13: ref;
  var $i14: i32;
  var $i50: i32;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(120, 1)), $mul.ref(0, 1));
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(120, 1));
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i8, $i10);
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 22);
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    $p13, $i14 := $p5, $sub.i32(0, 22);
    goto $bb4;

  $bb4:
    call $p16, $p17, $p18, $p19, $i20, $p21, $i22, $i23, $p28, $p29, $i30, $i31, $i32, $i33, $i34, $p36, $p37, $p38, $p39, $i40, $i41, $p25, $i26, $i42, $i24, $p44, $p45, $p46, $p47, $i48, $i49, $p13, $i14, $i50 := action_dev_loop_$bb4($p1, $p2, $i10, $p16, $p17, $p18, $p19, $i20, $p21, $i22, $i23, $p28, $p29, $i30, $i31, $i32, $i33, $i34, $p36, $p37, $p38, $p39, $i40, $i41, $p25, $i26, $i42, $i24, $p44, $p45, $p46, $p47, $i48, $i49, $p13, $i14, $i50);
    goto $bb4_last;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 72)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p13, $mul.ref(0, 72)), $mul.ref(56, 1));
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i20, $i22);
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    $i24 := $i14;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p46, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    $i48 := $p2i.ref.i64($p47);
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    $i49 := $ne.i64($i48, $i10);
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    $i50 := $i24;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    $i12 := $i50;
    goto $bb3;

  $bb17:
    assume $i49 == 1;
    assume {:verifier.code 0} true;
    $p13, $i14 := $p45, $i24;
    goto $bb17_dummy;

  $bb6:
    assume $i23 == 1;
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    $p25, $i26 := $p17, $i14;
    goto $bb9;

  $bb9:
    call $p28, $p29, $i30, $i31, $i32, $i33, $i34, $p36, $p37, $p38, $p39, $i40, $i41, $p25, $i26, $i42 := action_dev_loop_$bb9($p1, $p2, $i22, $p28, $p29, $i30, $i31, $i32, $i33, $i34, $p36, $p37, $p38, $p39, $i40, $i41, $p25, $i26, $i42);
    goto $bb9_last;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p25, $mul.ref(0, 272)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p1);
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    $i32 := $eq.i64($i30, $i31);
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    $i34 := $i26;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p25, $mul.ref(0, 272)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p39);
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    $i41 := $ne.i64($i40, $i22);
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    $i42 := $i34;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    $i24 := $i42;
    goto $bb8;

  $bb14:
    assume $i41 == 1;
    assume {:verifier.code 0} true;
    $p25, $i26 := $p37, $i34;
    goto $bb14_dummy;

  $bb11:
    assume $i32 == 1;
    call {:si_unique_call 387} $i33 := devirtbounce.9($p2, $p25);
    call {:si_unique_call 388} {:cexpr "r"} boogie_si_record_i32($i33);
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    $i34 := $i33;
    goto $bb13;

  $bb14_dummy:
    assume false;
    return;

  $bb9_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2142;

  $bb17_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2129;
}



const dm_put_device: ref;

axiom dm_put_device == $sub.ref(0, 206455);

procedure dm_put_device($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation dm_put_device($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    return;
}



const mutex_unlock: ref;

axiom mutex_unlock == $sub.ref(0, 207487);

procedure mutex_unlock($p0: ref);
  free requires assertsPassed;



implementation mutex_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    return;
}



const dm_path_uevent: ref;

axiom dm_path_uevent == $sub.ref(0, 208519);

procedure dm_path_uevent($i0: i32, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;



implementation dm_path_uevent($i0: i32, $p1: ref, $p2: ref, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 389} {:cexpr "dm_path_uevent:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 390} {:cexpr "dm_path_uevent:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    return;
}



const schedule_work: ref;

axiom schedule_work == $sub.ref(0, 209551);

procedure schedule_work($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.10, $M.9, $M.12, $M.11, $M.14, $M.13, $M.16, $M.15;



implementation schedule_work($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.0, system_wq);
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 391} $i2 := queue_work($p1, $p0);
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 392} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const queue_work: ref;

axiom queue_work == $sub.ref(0, 210583);

procedure queue_work($p0: ref, $p1: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.10, $M.9, $M.12, $M.11, $M.14, $M.13, $M.16, $M.15;



implementation queue_work($p0: ref, $p1: ref) returns ($r: i1)
{
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 393} $i2 := ldv_queue_work_on_21(8192, $p0, $p1);
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 394} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ldv_queue_work_on_21: ref;

axiom ldv_queue_work_on_21 == $sub.ref(0, 211615);

procedure ldv_queue_work_on_21($i0: i32, $p1: ref, $p2: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.10, $M.9, $M.12, $M.11, $M.14, $M.13, $M.16, $M.15;



implementation ldv_queue_work_on_21($i0: i32, $p1: ref, $p2: ref) returns ($r: i1)
{
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $i6: i8;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 395} {:cexpr "ldv_queue_work_on_21:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} $i3 := queue_work_on($i0, $p1, $p2);
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 397} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i5);
    call {:si_unique_call 398} {:cexpr "ldv_func_res"} boogie_si_record_i8($i6);
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} activate_work_1($p2, 2);
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i6);
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const queue_work_on: ref;

axiom queue_work_on == $sub.ref(0, 212647);

procedure queue_work_on($i0: i32, $p1: ref, $p2: ref) returns ($r: i1);
  free requires assertsPassed;



implementation queue_work_on($i0: i32, $p1: ref, $p2: ref) returns ($r: i1)
{
  var $i3: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 400} {:cexpr "queue_work_on:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 1} true;
    call {:si_unique_call 401} $i3 := __VERIFIER_nondet_bool();
    call {:si_unique_call 402} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i3);
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const sscanf: ref;

axiom sscanf == $sub.ref(0, 213679);

procedure sscanf.ref.ref.ref.ref($p0: ref, $p1: ref, p.2: ref, p.3: ref) returns ($r: i32);



const bypass_pg: ref;

axiom bypass_pg == $sub.ref(0, 214711);

procedure bypass_pg($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.0, $M.10, $M.9, $M.12, $M.11, $M.14, $M.13, $M.16, $M.15;



implementation bypass_pg($p0: ref, $p1: ref, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var vslice_dummy_var_34: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} {:cexpr "bypass_pg:arg:bypassed"} boogie_si_record_i32($i2);
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(40, 1));
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 404} $p4 := spinlock_check($p3);
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 405} $i5 := _raw_spin_lock_irqsave($p4);
    call {:si_unique_call 406} {:cexpr "flags"} boogie_si_record_i64($i5);
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(44, 1));
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, $i2);
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(240, 1));
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $0.ref);
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(248, 1));
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, $0.ref);
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(40, 1));
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 407} spin_unlock_irqrestore($p9, $i5);
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(288, 1));
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} vslice_dummy_var_34 := schedule_work($p10);
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    return;
}



const scnprintf: ref;

axiom scnprintf == $sub.ref(0, 215743);

procedure scnprintf.ref.i64.ref.ref($p0: ref, $i1: i64, $p2: ref, p.3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation scnprintf.ref.i64.ref.ref($p0: ref, $i1: i64, $p2: ref, p.3: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 409} {:cexpr "scnprintf:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 1} true;
    call {:si_unique_call 410} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 411} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure scnprintf.ref.i64.ref.i32.i32($p0: ref, $i1: i64, $p2: ref, p.3: i32, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation scnprintf.ref.i64.ref.i32.i32($p0: ref, $i1: i64, $p2: ref, p.3: i32, p.4: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 412} {:cexpr "scnprintf:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 1} true;
    call {:si_unique_call 413} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 414} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure scnprintf.ref.i64.ref($p0: ref, $i1: i64, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation scnprintf.ref.i64.ref($p0: ref, $i1: i64, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb2:
    assume {:verifier.code 1} true;
    call {:si_unique_call 415} {:cexpr "scnprintf:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 1} true;
    call {:si_unique_call 416} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 417} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure scnprintf.ref.i64.ref.ref.ref.i32($p0: ref, $i1: i64, $p2: ref, p.3: ref, p.4: ref, p.5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation scnprintf.ref.i64.ref.ref.ref.i32($p0: ref, $i1: i64, $p2: ref, p.3: ref, p.4: ref, p.5: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb3:
    assume {:verifier.code 1} true;
    call {:si_unique_call 418} {:cexpr "scnprintf:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 1} true;
    call {:si_unique_call 419} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 420} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure scnprintf.ref.i64.ref.i32($p0: ref, $i1: i64, $p2: ref, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation scnprintf.ref.i64.ref.i32($p0: ref, $i1: i64, $p2: ref, p.3: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb4:
    assume {:verifier.code 1} true;
    call {:si_unique_call 421} {:cexpr "scnprintf:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 1} true;
    call {:si_unique_call 422} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 423} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const flush_multipath_work: ref;

axiom flush_multipath_work == $sub.ref(0, 216775);

procedure flush_multipath_work($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.20, $M.21, $M.22, $M.23, $M.24, $M.7, $M.25, $M.26, $M.9, $M.11, $M.13, $M.15, $CurrAddr, $M.10, $M.12, $M.14, $M.16;



implementation flush_multipath_work($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $p4: ref;
  var $i5: i8;
  var $i6: i8;
  var $i7: i8;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $p16: ref;
  var $i17: i8;
  var $i18: i8;
  var $p19: ref;
  var vslice_dummy_var_35: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(40, 1));
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} $p2 := spinlock_check($p1);
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} $i3 := _raw_spin_lock_irqsave($p2);
    call {:si_unique_call 426} {:cexpr "flags"} boogie_si_record_i64($i3);
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(268, 1));
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    $i6 := $and.i8($i5, $sub.i8(0, 17));
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    $i7 := $or.i8($i6, 16);
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p4, $i7);
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(40, 1));
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} spin_unlock_irqrestore($p8, $i3);
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    $p9 := $M.8;
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 428} ldv_flush_workqueue_26($p9);
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 429} multipath_wait_for_pg_init_completion($p0);
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    $p10 := $M.19;
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} ldv_flush_workqueue_27($p10);
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(288, 1));
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 431} vslice_dummy_var_35 := ldv_flush_work_28($p11);
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(40, 1));
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 432} $p14 := spinlock_check($p13);
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} $i15 := _raw_spin_lock_irqsave($p14);
    call {:si_unique_call 434} {:cexpr "flags"} boogie_si_record_i64($i15);
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(268, 1));
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    $i18 := $and.i8($i17, $sub.i8(0, 17));
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p16, $i18);
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(40, 1));
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 435} spin_unlock_irqrestore($p19, $i15);
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    return;
}



const ldv_flush_workqueue_26: ref;

axiom ldv_flush_workqueue_26 == $sub.ref(0, 217807);

procedure ldv_flush_workqueue_26($p0: ref);
  free requires assertsPassed;
  modifies $M.9, $M.11, $M.13, $M.15, $M.0, $M.10, $M.12, $M.14, $M.16;



implementation ldv_flush_workqueue_26($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 436} flush_workqueue($p0);
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} call_and_disable_all_1(2);
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    return;
}



const multipath_wait_for_pg_init_completion: ref;

axiom multipath_wait_for_pg_init_completion == $sub.ref(0, 218839);

procedure multipath_wait_for_pg_init_completion($p0: ref);
  free requires assertsPassed;
  modifies $M.20, $M.21, $M.22, $M.23, $M.24, $M.7, $M.25, $M.26, $CurrAddr;



implementation multipath_wait_for_pg_init_completion($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $p19: ref;
  var $i20: i64;
  var $p21: ref;
  var $i22: i64;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $i26: i64;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $p33: ref;
  var $i34: i64;
  var $p35: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 439} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 441} $p4 := get_current();
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    $M.20 := $store.i32($M.20, $p5, 0);
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    $M.21 := $store.ref($M.21, $p7, $p4);
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    $M.22 := $store.ref($M.22, $p8, default_wake_function);
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    $M.23 := $store.ref($M.23, $p10, $0.ref);
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p12, $0.ref);
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(136, 1));
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 442} add_wait_queue($p13, $p1);
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(40, 1));
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $p15, $p16, $p17, $i18, $p19, $i20, $p21, $i22, $p23, $i24, $i25, $i26, $p28 := multipath_wait_for_pg_init_completion_loop_$bb1($p0, $p2, $p14, $p15, $p16, $p17, $i18, $p19, $i20, $p21, $i22, $p23, $i24, $i25, $i26, $p28);
    goto $bb1_last;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 11744)), $mul.ref(11728, 1));
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    $M.7 := $store.i64($M.7, $p16, 0);
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    $M.25 := $store.i64($M.25, $p2, 2);
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 444} $p17 := get_current();
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.25, $p2);
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p17, $mul.ref(0, 11744)), $mul.ref(0, 1));
    call {:si_unique_call 445} $i20 := devirtbounce.10(0, $p19, $i18, $p19);
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    $M.25 := $store.i64($M.25, $p2, $i20);
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} $p21 := spinlock_check($p14);
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} $i22 := _raw_spin_lock_irqsave($p21);
    call {:si_unique_call 448} {:cexpr "flags"} boogie_si_record_i64($i22);
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(228, 1));
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 0);
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    $i26 := $i22;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(40, 1));
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 453} spin_unlock_irqrestore($p28, $i22);
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 454} io_schedule();
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    goto corral_source_split_2308_dummy;

  $bb3:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(40, 1));
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 449} spin_unlock_irqrestore($p27, $i26);
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} $p29 := get_current();
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 11744)), $mul.ref(11728, 1));
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    $M.7 := $store.i64($M.7, $p30, 0);
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    $M.26 := $store.i64($M.26, $p3, 0);
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 451} $p31 := get_current();
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    $i32 := $load.i64($M.26, $p3);
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p31, $mul.ref(0, 11744)), $mul.ref(0, 1));
    call {:si_unique_call 452} $i34 := devirtbounce.10(0, $p33, $i32, $p33);
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    $M.26 := $store.i64($M.26, $p3, $i34);
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(136, 1));
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 455} remove_wait_queue($p35, $p1);
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    return;

  corral_source_split_2308_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} $p15 := get_current();
    goto corral_source_split_2278;
}



const ldv_flush_workqueue_27: ref;

axiom ldv_flush_workqueue_27 == $sub.ref(0, 219871);

procedure ldv_flush_workqueue_27($p0: ref);
  free requires assertsPassed;
  modifies $M.9, $M.11, $M.13, $M.15, $M.0, $M.10, $M.12, $M.14, $M.16;



implementation ldv_flush_workqueue_27($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 456} flush_workqueue($p0);
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} call_and_disable_all_1(2);
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    return;
}



const ldv_flush_work_28: ref;

axiom ldv_flush_work_28 == $sub.ref(0, 220903);

procedure ldv_flush_work_28($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.9, $M.11, $M.13, $M.15, $M.0, $M.10, $M.12, $M.14, $M.16;



implementation ldv_flush_work_28($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 458} $i1 := flush_work($p0);
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 459} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 460} {:cexpr "ldv_func_res"} boogie_si_record_i8($i4);
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} call_and_disable_work_1($p0);
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const flush_work: ref;

axiom flush_work == $sub.ref(0, 221935);

procedure flush_work($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation flush_work($p0: ref) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 1} true;
    call {:si_unique_call 462} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 463} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const call_and_disable_work_1: ref;

axiom call_and_disable_work_1 == $sub.ref(0, 222967);

procedure call_and_disable_work_1($p0: ref);
  free requires assertsPassed;
  modifies $M.9, $M.11, $M.13, $M.15, $M.0, $M.10, $M.12, $M.14, $M.16;



implementation call_and_disable_work_1($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i64;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $i21: i64;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i1;
  var $i29: i64;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    $i1 := $M.9;
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 2);
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i2 == 1);
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    $i3 := $M.9;
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 3);
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i9 := $M.11;
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 2);
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb11, $bb13;

  $bb13:
    assume !($i10 == 1);
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    $i11 := $M.11;
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 3);
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i17 := $M.13;
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 2);
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i18 == 1);
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    $i19 := $M.13;
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 3);
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i25 := $M.15;
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 2);
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb31;

  $bb31:
    assume !($i26 == 1);
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    $i27 := $M.15;
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 3);
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p0);
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    $p30 := $M.16;
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    $i32 := $eq.i64($i29, $i31);
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb34;

  $bb35:
    assume $i32 == 1;
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} activate_path($p0);
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    $M.15 := 1;
    call {:si_unique_call 471} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(1);
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb30;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p0);
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    $p22 := $M.14;
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i21, $i23);
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb25;

  $bb26:
    assume $i24 == 1;
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} activate_path($p0);
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    $M.13 := 1;
    call {:si_unique_call 469} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(1);
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb21;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p0);
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    $p14 := $M.12;
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i13, $i15);
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb16;

  $bb17:
    assume $i16 == 1;
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 466} activate_path($p0);
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    $M.11 := 1;
    call {:si_unique_call 467} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(1);
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb12;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p0);
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    $p6 := $M.10;
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i5, $i7);
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb6;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 464} activate_path($p0);
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    $M.9 := 1;
    call {:si_unique_call 465} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(1);
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb2;
}



const activate_path: ref;

axiom activate_path == $sub.ref(0, 223999);

procedure activate_path($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.10, $M.9, $M.12, $M.11, $M.14, $M.13, $M.16, $M.15;



implementation activate_path($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p14: ref;
  var vslice_dummy_var_36: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 48), 272));
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 48), 272)), $mul.ref(24, 1));
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p2);
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 474} pg_init_done($p14, 14);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 48), 272)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 472} $p11 := bdev_get_queue($p10);
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p2);
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 473} vslice_dummy_var_36 := scsi_dh_activate($p11, pg_init_done, $p12);
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pg_init_done: ref;

axiom pg_init_done == $sub.ref(0, 225031);

procedure pg_init_done($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0, $M.10, $M.9, $M.12, $M.11, $M.14, $M.13, $M.16, $M.15;



implementation pg_init_done($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i13: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $i14: i32;
  var $i12: i32;
  var $i29: i32;
  var $i30: i1;
  var $i19: i32;
  var $i20: i32;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $i40: i64;
  var $i41: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $i51: i32;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $i57: i32;
  var $i58: i1;
  var $p59: ref;
  var $i60: i32;
  var $i61: i1;
  var $p62: ref;
  var $i63: i8;
  var $i64: i8;
  var $p65: ref;
  var $p66: ref;
  var vslice_dummy_var_37: i32;
  var vslice_dummy_var_38: i32;
  var vslice_dummy_var_39: i32;
  var vslice_dummy_var_40: i32;
  var vslice_dummy_var_41: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 475} {:cexpr "pg_init_done:arg:errors"} boogie_si_record_i32($i1);
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 272)), $mul.ref(16, 1));
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i1, 11);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i1, 13);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i1, 15);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i1, 15);
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} vslice_dummy_var_40 := fail_path($p2);
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i19, $i20 := $i1, 0;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p6, $mul.ref(0, 536)), $mul.ref(40, 1));
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 479} $p34 := spinlock_check($p33);
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} $i35 := _raw_spin_lock_irqsave($p34);
    call {:si_unique_call 481} {:cexpr "flags"} boogie_si_record_i64($i35);
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i19, 0);
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i36 == 1);
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p6, $mul.ref(0, 536)), $mul.ref(224, 1));
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i46, 0);
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p6, $mul.ref(0, 536)), $mul.ref(228, 1));
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    $i51 := $sub.i32($i50, 1);
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p6, $mul.ref(0, 536)), $mul.ref(228, 1));
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p52, $i51);
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p6, $mul.ref(0, 536)), $mul.ref(228, 1));
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p53);
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i54, 0);
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p6, $mul.ref(0, 536)), $mul.ref(224, 1));
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.0, $p56);
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    $i58 := $ne.i32($i57, 0);
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p6, $mul.ref(0, 536)), $mul.ref(268, 1));
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    $i63 := $load.i8($M.0, $p62);
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    $i64 := $and.i8($i63, $sub.i8(0, 2));
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p62, $i64);
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p6, $mul.ref(0, 536)), $mul.ref(136, 1));
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 490} __wake_up($p65, 3, 1, $0.ref);
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p6, $mul.ref(0, 536)), $mul.ref(40, 1));
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} spin_unlock_irqrestore($p66, $i35);
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    return;

  $bb47:
    assume $i58 == 1;
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p6, $mul.ref(0, 536)), $mul.ref(232, 1));
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p59, $i20);
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} $i60 := __pg_init_all_paths($p6);
    call {:si_unique_call 489} {:cexpr "tmp___1"} boogie_si_record_i32($i60);
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    $i61 := $ne.i32($i60, 0);
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb49:
    assume $i61 == 1;
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb43:
    assume $i55 == 1;
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb40:
    assume $i47 == 1;
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(44, 1));
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p48, 0);
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb34:
    assume $i36 == 1;
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p6, $mul.ref(0, 536)), $mul.ref(240, 1));
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p38);
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p2);
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    $i41 := $eq.i64($i39, $i40);
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb36:
    assume $i41 == 1;
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 486} vslice_dummy_var_41 := printk.ref.i32(.str.4, $i19);
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p6, $mul.ref(0, 536)), $mul.ref(240, 1));
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p43, $0.ref);
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p6, $mul.ref(0, 536)), $mul.ref(248, 1));
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p44, $0.ref);
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb8:
    assume $i10 == 1;
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p6, $mul.ref(0, 536)), $mul.ref(24, 1));
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i23, 0);
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p6, $mul.ref(0, 536)), $mul.ref(24, 1));
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} vslice_dummy_var_37 := printk.ref.ref.i32(.str.3, $p26, $i1);
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} vslice_dummy_var_38 := fail_path($p2);
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    $i19, $i20 := $i1, 0;
    goto $bb25;

  $bb26:
    assume $i24 == 1;
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    $i19, $i20 := 0, 0;
    goto $bb25;

  $bb6:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i1, 13);
    assume {:verifier.code 0} true;
    $i12 := 0;
    assume {:branchcond $i11} true;
    goto $bb11, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb10;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 476} $i29 := pg_init_limit_reached($p6, $p2);
    call {:si_unique_call 477} {:cexpr "tmp"} boogie_si_record_i32($i29);
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i19, $i20 := 0, $i12;
    goto $bb25;

  $bb29:
    assume $i30 == 1;
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} vslice_dummy_var_39 := fail_path($p2);
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb4:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i1, 11);
    assume {:verifier.code 0} true;
    $i14 := 0;
    assume {:branchcond $i13} true;
    goto $bb14, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb10;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    $i12 := $i14;
    goto $bb12;

  $bb2:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i1, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i1, 10);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i16 == 1);
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    $i14 := 1;
    goto $bb15;

  $bb19:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i1, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb10;

  $bb21:
    assume $i17 == 1;
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 478} bypass_pg($p6, $p4, 1);
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    $i19, $i20 := $i1, 0;
    goto $bb25;

  $bb17:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i1, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb10;

  $bb23:
    assume $i18 == 1;
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    $i19, $i20 := $i1, 0;
    goto $bb25;
}



const scsi_dh_activate: ref;

axiom scsi_dh_activate == $sub.ref(0, 226063);

procedure scsi_dh_activate($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation scsi_dh_activate($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 1} true;
    call {:si_unique_call 491} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 492} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const pg_init_limit_reached: ref;

axiom pg_init_limit_reached == $sub.ref(0, 227095);

procedure pg_init_limit_reached($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation pg_init_limit_reached($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(40, 1));
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} $p3 := spinlock_check($p2);
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} $i4 := _raw_spin_lock_irqsave($p3);
    call {:si_unique_call 495} {:cexpr "flags"} boogie_si_record_i64($i4);
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(276, 1));
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(272, 1));
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    $i9 := $ule.i32($i6, $i8);
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i16 := 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(40, 1));
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} spin_unlock_irqrestore($p17, $i4);
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p0);
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p10, $mul.ref(268, 1));
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 0);
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb3;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(224, 1));
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, 1);
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb6;
}



const __wake_up: ref;

axiom __wake_up == $sub.ref(0, 228127);

procedure __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref);
  free requires assertsPassed;



implementation __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} {:cexpr "__wake_up:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 498} {:cexpr "__wake_up:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    return;
}



const flush_workqueue: ref;

axiom flush_workqueue == $sub.ref(0, 229159);

procedure flush_workqueue($p0: ref);
  free requires assertsPassed;



implementation flush_workqueue($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    return;
}



const call_and_disable_all_1: ref;

axiom call_and_disable_all_1 == $sub.ref(0, 230191);

procedure call_and_disable_all_1($i0: i32);
  free requires assertsPassed;
  modifies $M.9, $M.11, $M.13, $M.15, $M.0, $M.10, $M.12, $M.14, $M.16;



implementation call_and_disable_all_1($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} {:cexpr "call_and_disable_all_1:arg:state"} boogie_si_record_i32($i0);
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    $i1 := $M.9;
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, $i0);
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i4 := $M.11;
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, $i0);
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i7 := $M.13;
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, $i0);
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i10 := $M.15;
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, $i0);
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i11 == 1;
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    $p12 := $M.16;
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} call_and_disable_work_1($p12);
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    $p9 := $M.14;
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} call_and_disable_work_1($p9);
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    $p6 := $M.12;
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} call_and_disable_work_1($p6);
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $p3 := $M.10;
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} call_and_disable_work_1($p3);
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const default_wake_function: ref;

axiom default_wake_function == $sub.ref(0, 231223);

procedure default_wake_function($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32);



const add_wait_queue: ref;

axiom add_wait_queue == $sub.ref(0, 232255);

procedure add_wait_queue($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation add_wait_queue($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    return;
}



const io_schedule: ref;

axiom io_schedule == $sub.ref(0, 233287);

procedure io_schedule();
  free requires assertsPassed;



implementation io_schedule()
{
  var vslice_dummy_var_42: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} vslice_dummy_var_42 := io_schedule_timeout(9223372036854775807);
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    return;
}



const remove_wait_queue: ref;

axiom remove_wait_queue == $sub.ref(0, 234319);

procedure remove_wait_queue($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation remove_wait_queue($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    return;
}



const io_schedule_timeout: ref;

axiom io_schedule_timeout == $sub.ref(0, 235351);

procedure io_schedule_timeout($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation io_schedule_timeout($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 505} {:cexpr "io_schedule_timeout:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 1} true;
    call {:si_unique_call 506} $i1 := __VERIFIER_nondet_long();
    call {:si_unique_call 507} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i1);
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const do_end_io: ref;

axiom do_end_io == $sub.ref(0, 236383);

procedure do_end_io($p0: ref, $p1: ref, $i2: i32, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.10, $M.9, $M.12, $M.11, $M.14, $M.13, $M.16, $M.15;



implementation do_end_io($p0: ref, $p1: ref, $i2: i32, $p3: ref) returns ($r: i32)
{
  var $i4: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $i33: i1;
  var $i34: i32;
  var $i32: i32;
  var $i35: i32;
  var $p36: ref;
  var $i8: i32;
  var vslice_dummy_var_43: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} {:cexpr "do_end_io:arg:error"} boogie_si_record_i32($i2);
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i2, 0);
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 509} $i9 := noretry_error($i2);
    call {:si_unique_call 510} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(40, 1));
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} $p19 := spinlock_check($p18);
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} $i20 := _raw_spin_lock_irqsave($p19);
    call {:si_unique_call 514} {:cexpr "flags"} boogie_si_record_i64($i20);
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(236, 1));
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 0);
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i35 := 2;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(40, 1));
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} spin_unlock_irqrestore($p36, $i20);
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    $i8 := $i35;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb14:
    assume $i23 == 1;
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p0);
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p24, $mul.ref(268, 1));
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.0, $p25);
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 0);
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i28 == 1);
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i2, $sub.i32(0, 52));
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    $i34 := 2;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i32 := $i34;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    $i35 := $i32;
    goto $bb25;

  $bb22:
    assume $i33 == 1;
    call {:si_unique_call 517} {:cexpr "do_end_io:arg:r"} boogie_si_record_i32($i2);
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    $i34 := $i2;
    goto $bb24;

  $bb16:
    assume $i28 == 1;
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} $i29 := __must_push_back($p0);
    call {:si_unique_call 516} {:cexpr "tmp___1"} boogie_si_record_i32($i29);
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 0);
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    $i31 := 2;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    $i32 := $i31;
    goto $bb21;

  $bb18:
    assume $i30 == 1;
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32(0, 5);
    goto $bb20;

  $bb11:
    assume $i14 == 1;
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} vslice_dummy_var_43 := fail_path($p16);
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i10 == 1;
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    $i8 := $i2;
    goto $bb6;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 368)), $mul.ref(260, 1));
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb6;
}



const clear_mapinfo: ref;

axiom clear_mapinfo == $sub.ref(0, 237415);

procedure clear_mapinfo($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation clear_mapinfo($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p1);
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p5, $0.ref);
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p4);
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(368, 1));
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} mempool_free($p6, $p8);
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    return;
}



const mempool_free: ref;

axiom mempool_free == $sub.ref(0, 238447);

procedure mempool_free($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation mempool_free($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    return;
}



const noretry_error: ref;

axiom noretry_error == $sub.ref(0, 239479);

procedure noretry_error($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation noretry_error($i0: i32) returns ($r: i32)
{
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i32;

  $bb0:
    call {:si_unique_call 520} {:cexpr "noretry_error:arg:error"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, $sub.i32(0, 84));
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, $sub.i32(0, 61));
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i0, $sub.i32(0, 28));
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i0, $sub.i32(0, 28));
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb8, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i10 := 1;
    goto $bb25;

  $bb6:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, $sub.i32(0, 61));
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb12, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb11;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i2 == 1;
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i0, $sub.i32(0, 84));
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb15, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb11;

  $bb15:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i0, $sub.i32(0, 95));
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i0, $sub.i32(0, 95));
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb11;

  $bb20:
    assume $i8 == 1;
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb18:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i0, $sub.i32(0, 121));
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb22, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb11;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb23;
}



const __must_push_back: ref;

axiom __must_push_back == $sub.ref(0, 240511);

procedure __must_push_back($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __must_push_back($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $i8: i8;
  var $i9: i8;
  var $i10: i8;
  var $i11: i32;
  var $p12: ref;
  var $i13: i8;
  var $i14: i8;
  var $i15: i8;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref(268, 1));
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(268, 1));
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    $i9 := $lshr.i8($i8, 1);
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    $i10 := $and.i8($i9, 1);
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(268, 1));
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    $i14 := $lshr.i8($i13, 2);
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    $i15 := $and.i8($i14, 1);
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i11, $i16);
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i23 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i6 := $i23;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb4:
    assume $i17 == 1;
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(16, 1));
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 521} $i20 := dm_noflush_suspending($p19);
    call {:si_unique_call 522} {:cexpr "tmp"} boogie_si_record_i32($i20);
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i22 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    $i23 := $i22;
    goto $bb9;

  $bb6:
    assume $i21 == 1;
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    $i22 := 1;
    goto $bb8;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb3;
}



const dm_noflush_suspending: ref;

axiom dm_noflush_suspending == $sub.ref(0, 241543);

procedure dm_noflush_suspending($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dm_noflush_suspending($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 1} true;
    call {:si_unique_call 523} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 524} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const blk_put_request: ref;

axiom blk_put_request == $sub.ref(0, 242575);

procedure blk_put_request($p0: ref);
  free requires assertsPassed;



implementation blk_put_request($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    return;
}



const __multipath_map: ref;

axiom __multipath_map == $sub.ref(0, 243607);

procedure __multipath_map($p0: ref, $p1: ref, $p2: ref, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.10, $M.9, $M.12, $M.11, $M.14, $M.13, $M.16, $M.15;



implementation __multipath_map($p0: ref, $p1: ref, $p2: ref, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $i10: i32;
  var $i12: i32;
  var $i11: i32;
  var $i13: i64;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $i21: i8;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $i37: i1;
  var $i38: i32;
  var $i39: i1;
  var $i40: i32;
  var $p42: ref;
  var $p43: ref;
  var $i44: i8;
  var $i45: i32;
  var $i46: i1;
  var $p47: ref;
  var $i48: i32;
  var $i49: i1;
  var $i51: i32;
  var $i52: i1;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i64;
  var $i65: i1;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i64;
  var $i73: i64;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $i77: i64;
  var $i78: i32;
  var $i79: i32;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $i83: i1;
  var $i84: i8;
  var $i85: i1;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $i97: i64;
  var $i98: i64;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $i108: i64;
  var $i109: i1;
  var $p110: ref;
  var $p111: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $i41: i32;
  var $p122: ref;
  var $i86: i32;
  var vslice_dummy_var_44: i32;
  var vslice_dummy_var_45: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p1);
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 527} $i12 := blk_rq_bytes($p3);
    call {:si_unique_call 528} {:cexpr "tmp___0"} boogie_si_record_i32($i12);
    assume {:verifier.code 0} true;
    $i11 := $i12;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    $i13 := $zext.i32.i64($i11);
    call {:si_unique_call 529} {:cexpr "nr_bytes"} boogie_si_record_i64($i13);
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p7, $mul.ref(0, 536)), $mul.ref(40, 1));
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} spin_lock_irq($p14);
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p7, $mul.ref(0, 536)), $mul.ref(240, 1));
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i17, 0);
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i18 == 1);
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p7);
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($p19, $mul.ref(268, 1));
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.0, $p20);
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 0);
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p7, $mul.ref(0, 536)), $mul.ref(240, 1));
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p35);
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    $i37 := $eq.i64($i36, 0);
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i37 == 1);
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p7);
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($p42, $mul.ref(268, 1));
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.0, $p43);
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i44);
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb24;

  $bb24:
    assume !($i46 == 1);
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p7, $mul.ref(0, 536)), $mul.ref(224, 1));
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.0, $p47);
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    $i49 := $ne.i32($i48, 0);
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 537} $i51 := set_mapinfo($p7, $p2);
    call {:si_unique_call 538} {:cexpr "tmp___3"} boogie_si_record_i32($i51);
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    $i52 := $slt.i32($i51, 0);
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p2);
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p54);
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p55, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p56, $p35);
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p55, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p57, $i13);
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p35, $mul.ref(0, 272)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p60, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p7, $mul.ref(0, 536)), $mul.ref(40, 1));
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} spin_unlock_irq($p63);
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    $i64 := $p2i.ref.i64($p1);
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    $i65 := $ne.i64($i64, 0);
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i65 == 1);
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} $p75 := bdev_get_queue($p62);
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p3, $mul.ref(0, 368)), $mul.ref(64, 1));
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    $i77 := $load.i64($M.0, $p76);
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    $i78 := $trunc.i64.i32($i77);
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    $i79 := $and.i32($i78, 1);
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} $p80 := blk_get_request($p75, $i79, 32);
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, $p80);
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.0, $p4);
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    $p82 := $bitcast.ref.ref($p81);
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 543} $i83 := IS_ERR($p82);
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    $i84 := $zext.i1.i8($i83);
    call {:si_unique_call 544} {:cexpr "tmp___5"} boogie_si_record_i8($i84);
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    $i85 := $trunc.i8.i1($i84);
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p87 := $load.ref($M.0, $p4);
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p87, $mul.ref(0, 368)), $mul.ref(112, 1));
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p88, $0.ref);
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    $p89 := $load.ref($M.0, $p4);
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p89, $mul.ref(0, 368)), $mul.ref(104, 1));
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p90, $0.ref);
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p62, $mul.ref(0, 480)), $mul.ref(272, 1));
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.0, $p91);
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.0, $p4);
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p93, $mul.ref(0, 368)), $mul.ref(192, 1));
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p94, $p92);
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    $p95 := $load.ref($M.0, $p4);
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p95, $mul.ref(0, 368)), $mul.ref(64, 1));
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    $i97 := $load.i64($M.0, $p96);
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    $i98 := $or.i64($i97, 4);
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    $p99 := $load.ref($M.0, $p4);
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p99, $mul.ref(0, 368)), $mul.ref(64, 1));
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p100, $i98);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p35, $mul.ref(0, 272)), $mul.ref(16, 1));
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    $p102 := $load.ref($M.0, $p101);
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($add.ref($p102, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    $p105 := $load.ref($M.0, $p104);
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p105, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    $p107 := $load.ref($M.0, $p106);
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    $i108 := $p2i.ref.i64($p107);
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    $i109 := $ne.i64($i108, 0);
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    assume {:branchcond $i109} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i109 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i86 := 1;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    $r := $i86;
    return;

  $bb39:
    assume $i109 == 1;
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p35, $mul.ref(0, 272)), $mul.ref(16, 1));
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    $p111 := $load.ref($M.0, $p110);
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($add.ref($p111, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    $p114 := $load.ref($M.0, $p113);
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p114, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    $p116 := $load.ref($M.0, $p115);
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p35, $mul.ref(0, 272)), $mul.ref(16, 1));
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    $p118 := $load.ref($M.0, $p117);
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p118, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p35, $mul.ref(0, 272)), $mul.ref(32, 1));
    call {:si_unique_call 546} vslice_dummy_var_45 := devirtbounce.1($p116, $p119, $p120, $i13);
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb35:
    assume $i85 == 1;
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 545} clear_mapinfo($p7, $p2);
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    $i86 := 2;
    goto $bb37;

  $bb32:
    assume $i65 == 1;
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} $p66 := bdev_get_queue($p62);
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p1, $mul.ref(0, 368)), $mul.ref(48, 1));
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p67, $p66);
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p62, $mul.ref(0, 480)), $mul.ref(272, 1));
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.0, $p68);
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p1, $mul.ref(0, 368)), $mul.ref(192, 1));
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p70, $p69);
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p1, $mul.ref(0, 368)), $mul.ref(64, 1));
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    $i72 := $load.i64($M.0, $p71);
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    $i73 := $or.i64($i72, 4);
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p1, $mul.ref(0, 368)), $mul.ref(64, 1));
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p74, $i73);
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb29:
    assume $i52 == 1;
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    $i41 := 2;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p7, $mul.ref(0, 536)), $mul.ref(40, 1));
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} spin_unlock_irq($p122);
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    $i86 := $i41;
    goto $bb37;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i49 == 1;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} vslice_dummy_var_44 := __pg_init_all_paths($p7);
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    $i41 := 2;
    goto $bb21;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i46 == 1;
    goto $bb23;

  $bb16:
    assume $i37 == 1;
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 533} $i38 := __must_push_back($p7);
    call {:si_unique_call 534} {:cexpr "tmp___2"} boogie_si_record_i32($i38);
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 0);
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    $i40 := 2;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    $i41 := $i40;
    goto $bb21;

  $bb18:
    assume $i39 == 1;
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    $i40 := $sub.i32(0, 5);
    goto $bb20;

  $bb7:
    assume $i23 == 1;
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p7, $mul.ref(0, 536)), $mul.ref(264, 1));
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb9:
    assume $i26 == 1;
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p7, $mul.ref(0, 536)), $mul.ref(264, 1));
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32($i28, 1);
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p7, $mul.ref(0, 536)), $mul.ref(264, 1));
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, $i29);
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p7, $mul.ref(0, 536)), $mul.ref(264, 1));
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 0);
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb11:
    assume $i33 == 1;
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} __choose_pgpath($p7, $i13);
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb4:
    assume $i18 == 1;
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 531} __choose_pgpath($p7, $i13);
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 525} $i10 := blk_rq_bytes($p1);
    call {:si_unique_call 526} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    $i11 := $i10;
    goto $bb3;
}



const blk_rq_bytes: ref;

axiom blk_rq_bytes == $sub.ref(0, 244639);

procedure blk_rq_bytes($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation blk_rq_bytes($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(92, 1));
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const spin_lock_irq: ref;

axiom spin_lock_irq == $sub.ref(0, 245671);

procedure spin_lock_irq($p0: ref);
  free requires assertsPassed;



implementation spin_lock_irq($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 547} _raw_spin_lock_irq($p2);
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    return;
}



const set_mapinfo: ref;

axiom set_mapinfo == $sub.ref(0, 246703);

procedure set_mapinfo($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation set_mapinfo($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $p11: ref;
  var $i8: i32;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(368, 1));
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} $p4 := mempool_alloc($p3, 32);
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p5);
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.0;
    call {:si_unique_call 549} cmdloc_dummy_var_4 := $memset.i8(cmdloc_dummy_var_3, $p9, 0, 16, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_4;
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p1);
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, $p4);
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 12);
    goto $bb3;
}



const spin_unlock_irq: ref;

axiom spin_unlock_irq == $sub.ref(0, 247735);

procedure spin_unlock_irq($p0: ref);
  free requires assertsPassed;



implementation spin_unlock_irq($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} _raw_spin_unlock_irq($p2);
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    return;
}



const blk_get_request: ref;

axiom blk_get_request == $sub.ref(0, 248767);

procedure blk_get_request($p0: ref, $i1: i32, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation blk_get_request($p0: ref, $i1: i32, $i2: i32) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 551} {:cexpr "blk_get_request:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 552} {:cexpr "blk_get_request:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} $p3 := external_alloc();
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const IS_ERR: ref;

axiom IS_ERR == $sub.ref(0, 249799);

procedure IS_ERR($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation IS_ERR($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} $i1 := ldv_is_err($p0);
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 555} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_is_err: ref;

axiom ldv_is_err == $sub.ref(0, 250831);

procedure ldv_is_err($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation ldv_is_err($p0: ref) returns ($r: i1)
{
  var $i1: i64;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 2012);
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 251863);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 1} true;
    call {:si_unique_call 556} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 557} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const _raw_spin_unlock_irq: ref;

axiom _raw_spin_unlock_irq == $sub.ref(0, 252895);

procedure _raw_spin_unlock_irq($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    return;
}



const mempool_alloc: ref;

axiom mempool_alloc == $sub.ref(0, 253927);

procedure mempool_alloc($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation mempool_alloc($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} {:cexpr "mempool_alloc:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 559} $p2 := external_alloc();
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 254959);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const _raw_spin_lock_irq: ref;

axiom _raw_spin_lock_irq == $sub.ref(0, 255991);

procedure _raw_spin_lock_irq($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    return;
}



const free_multipath: ref;

axiom free_multipath == $sub.ref(0, 257023);

procedure free_multipath($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.20, $M.21, $M.22, $M.23, $M.24, $M.7, $M.25, $M.26, $M.27, $M.9, $M.11, $M.13, $M.15, $M.10, $M.12, $M.14, $M.16, $CurrAddr, assertsPassed;



implementation free_multipath($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p20: ref;
  var $p21: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p14: ref;
  var $p15: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(120, 1)), $mul.ref(0, 1));
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(120, 1));
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i10, $i12);
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(24, 1));
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} kfree($p27);
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(32, 1));
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} kfree($p29);
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(368, 1));
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 564} mempool_destroy($p31);
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p0);
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} kfree($p32);
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    $p14, $p15 := $p7, $p3;
    goto $bb4;

  $bb4:
    call $p16, $p17, $p18, $p20, $p21, $p23, $i24, $i25, $p14, $p15 := free_multipath_loop_$bb4($p0, $i12, $p16, $p17, $p18, $p20, $p21, $p23, $i24, $i25, $p14, $p15);
    goto $bb4_last;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} list_del($p16);
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(16, 1));
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 561} free_priority_group($p15, $p18);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p14, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p14, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, $i12);
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i25 == 1);
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    $p14, $p15 := $p21, $p14;
    goto $bb6_dummy;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2941;
}



const free_priority_group: ref;

axiom free_priority_group == $sub.ref(0, 258055);

procedure free_priority_group($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.20, $M.21, $M.22, $M.23, $M.24, $M.7, $M.25, $M.26, $M.27, $M.9, $M.11, $M.13, $M.15, $M.10, $M.12, $M.14, $M.16, $CurrAddr, assertsPassed;



implementation free_priority_group($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(24, 1));
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(56, 1));
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 568} free_pgpaths($p13, $p1);
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p0);
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 569} kfree($p14);
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 96)), $mul.ref(32, 1));
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    call {:si_unique_call 566} devirtbounce.11($p10, $p2);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 567} dm_put_path_selector($p12);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_16:
    assume !assertsPassed;
    return;

  SeqInstr_13:
    assume !assertsPassed;
    return;
}



const mempool_destroy: ref;

axiom mempool_destroy == $sub.ref(0, 259087);

procedure mempool_destroy($p0: ref);
  free requires assertsPassed;



implementation mempool_destroy($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    return;
}



const dm_put_path_selector: ref;

axiom dm_put_path_selector == $sub.ref(0, 260119);

procedure dm_put_path_selector($p0: ref);
  free requires assertsPassed;
  modifies $M.27, assertsPassed;



implementation dm_put_path_selector($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 570} down_read(_ps_lock);
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 571} $p5 := __find_path_selector_type($p4);
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} ldv_module_put_11($p10);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 572} up_read(_ps_lock);
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_19:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const free_pgpaths: ref;

axiom free_pgpaths == $sub.ref(0, 261151);

procedure free_pgpaths($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation free_pgpaths($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p30: ref;
  var $p31: ref;
  var $p33: ref;
  var $p34: ref;
  var $p36: ref;
  var $i37: i64;
  var $i38: i1;
  var $p16: ref;
  var $p17: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 272)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p7, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p0);
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i13, $i14);
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    $p16, $p17 := $p10, $p6;
    goto $bb4;

  $bb4:
    call $p18, $p19, $p20, $i21, $i22, $p24, $p25, $p26, $p27, $p28, $p30, $p31, $p33, $p34, $p36, $i37, $i38, $p16, $p17 := free_pgpaths_loop_$bb4($p1, $p4, $i14, $p18, $p19, $p20, $i21, $i22, $p24, $p25, $p26, $p27, $p28, $p30, $p31, $p33, $p34, $p36, $i37, $i38, $p16, $p17);
    goto $bb4_last;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} list_del($p18);
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p4, $mul.ref(0, 536)), $mul.ref(24, 1));
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 272)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 577} dm_put_device($p1, $p31);
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 578} free_pgpath($p17);
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p16, $mul.ref(0, 272)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p16, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p36);
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i37, $i14);
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i38 == 1);
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb9:
    assume $i38 == 1;
    assume {:verifier.code 0} true;
    $p16, $p17 := $p34, $p16;
    goto $bb9_dummy;

  $bb6:
    assume $i22 == 1;
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 272)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} $p28 := bdev_get_queue($p27);
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} scsi_dh_detach($p28);
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb9_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3027;
}



const scsi_dh_detach: ref;

axiom scsi_dh_detach == $sub.ref(0, 262183);

procedure scsi_dh_detach($p0: ref);
  free requires assertsPassed;



implementation scsi_dh_detach($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    return;
}



const free_pgpath: ref;

axiom free_pgpath == $sub.ref(0, 263215);

procedure free_pgpath($p0: ref);
  free requires assertsPassed;



implementation free_pgpath($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 579} kfree($p1);
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    return;
}



const down_read: ref;

axiom down_read == $sub.ref(0, 264247);

procedure down_read($p0: ref);
  free requires assertsPassed;



implementation down_read($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    return;
}



const ldv_module_put_11: ref;

axiom ldv_module_put_11 == $sub.ref(0, 265279);

procedure ldv_module_put_11($p0: ref);
  free requires assertsPassed;
  modifies $M.27, assertsPassed;



implementation ldv_module_put_11($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 580} ldv_module_put($p0);
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_22:
    assume !assertsPassed;
    return;
}



const up_read: ref;

axiom up_read == $sub.ref(0, 266311);

procedure up_read($p0: ref);
  free requires assertsPassed;



implementation up_read($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    return;
}



const ldv_module_put: ref;

axiom ldv_module_put == $sub.ref(0, 267343);

procedure ldv_module_put($p0: ref);
  free requires assertsPassed;
  modifies $M.27, assertsPassed;



implementation ldv_module_put($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    $i3 := $M.27;
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    $i4 := $sle.i32($i3, 1);
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i5 := $M.27;
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32($i5, 1);
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    $M.27 := $i6;
    call {:si_unique_call 582} {:cexpr "ldv_module_refcounter"} boogie_si_record_i32($i6);
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i4 == 1;
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} ldv_error();
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_25:
    assume !assertsPassed;
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 268375);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 583} __VERIFIER_error();
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_28:
    assume !assertsPassed;
    return;
}



const alloc_multipath: ref;

axiom alloc_multipath == $sub.ref(0, 269407);

procedure alloc_multipath($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation alloc_multipath($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i8;
  var $i19: i8;
  var $i20: i8;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p29: ref;
  var $p31: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i1;
  var $p43: ref;
  var $p45: ref;
  var $p47: ref;
  var $p44: ref;
  var cmdloc_dummy_var_5: [ref]i8;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var vslice_dummy_var_46: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 584} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 585} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 586} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 588} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} $i6 := dm_get_reserved_rq_based_ios();
    call {:si_unique_call 590} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} $p7 := kzalloc(536, 208);
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p44 := $p7;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    $r := $p44;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p8, $mul.ref(0, 536)), $mul.ref(120, 1));
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} INIT_LIST_HEAD($p11);
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p8, $mul.ref(0, 536)), $mul.ref(40, 1));
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 593} vslice_dummy_var_46 := spinlock_check($p12);
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 536)), $mul.ref(40, 1)), $mul.ref(0, 1));
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 594} __raw_spin_lock_init($p16, .str.21, $p1);
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p8, $mul.ref(0, 536)), $mul.ref(268, 1));
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.0, $p17);
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    $i19 := $and.i8($i18, $sub.i8(0, 2));
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    $i20 := $or.i8($i19, 1);
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p17, $i20);
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p8, $mul.ref(0, 536)), $mul.ref(280, 1));
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, $sub.i32(0, 1));
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p8, $mul.ref(0, 536)), $mul.ref(288, 1));
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 595} __init_work($p22, 0);
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p23, 137438953408);
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 536)), $mul.ref(288, 1)), $mul.ref(0, 1));
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p3);
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_5 := $M.0;
    cmdloc_dummy_var_6 := $M.0;
    call {:si_unique_call 596} cmdloc_dummy_var_7 := $memcpy.i8(cmdloc_dummy_var_5, cmdloc_dummy_var_6, $p26, $p27, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_7;
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 536)), $mul.ref(288, 1)), $mul.ref(32, 1));
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 597} lockdep_init_map($p29, .str.22, $p2, 0);
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 536)), $mul.ref(288, 1)), $mul.ref(8, 1));
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 598} INIT_LIST_HEAD($p31);
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 536)), $mul.ref(288, 1)), $mul.ref(24, 1));
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p33, trigger_event);
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p8, $mul.ref(0, 536)), $mul.ref(136, 1));
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 599} __init_waitqueue_head($p34, .str.23, $p4);
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p8, $mul.ref(0, 536)), $mul.ref(376, 1));
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 600} __mutex_init($p35, .str.24, $p5);
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    $p36 := $M.28;
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 601} $p37 := mempool_create_slab_pool($i6, $p36);
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p8, $mul.ref(0, 536)), $mul.ref(368, 1));
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p38, $p37);
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p8, $mul.ref(0, 536)), $mul.ref(368, 1));
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p40);
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    $i42 := $eq.i64($i41, 0);
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p8, $mul.ref(0, 536)), $mul.ref(16, 1));
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p45, $p0);
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p47, $p7);
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb3:
    assume $i42 == 1;
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p8);
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 602} kfree($p43);
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    $p44 := $0.ref;
    goto $bb5;
}



const parse_features: ref;

axiom parse_features == $sub.ref(0, 270439);

procedure parse_features($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.29, $M.0, $CurrAddr;



implementation parse_features($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p9: ref;
  var $p11: ref;
  var $p13: ref;
  var $p15: ref;
  var $p17: ref;
  var $p19: ref;
  var $p21: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $p32: ref;
  var $i33: i32;
  var $i34: i32;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $i42: i8;
  var $i43: i8;
  var $i44: i8;
  var $i45: i32;
  var $i46: i1;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $i54: i32;
  var $i55: i32;
  var $i56: i32;
  var $i57: i1;
  var $i58: i32;
  var $i59: i1;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i32;
  var $i65: i32;
  var $i66: i32;
  var $p67: ref;
  var $i38: i32;
  var $i68: i32;
  var $i69: i1;
  var $i70: i1;
  var $i71: i1;
  var $i72: i32;
  var $i28: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 604} $p3 := $alloc($mul.ref(48, $zext.i32.i64(1)));
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 536)), $mul.ref(16, 1));
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p7, 0);
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p9, 6);
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p11, .str.25);
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(1, 16)), $mul.ref(0, 1));
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p13, 1);
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(1, 16)), $mul.ref(4, 1));
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p15, 50);
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(1, 16)), $mul.ref(8, 1));
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p17, .str.26);
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(2, 16)), $mul.ref(0, 1));
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p19, 0);
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(2, 16)), $mul.ref(4, 1));
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p21, 60000);
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(2, 16)), $mul.ref(8, 1));
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p23, .str.27);
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p3);
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p5, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 605} $i26 := dm_read_arg_group($p24, $p0, $p2, $p25);
    call {:si_unique_call 606} {:cexpr "r"} boogie_si_record_i32($i26);
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.29, $p2);
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 0);
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i31 := $i26;
    goto $bb8;

  $bb8:
    call $i31, $p32, $i33, $i34, $i35, $i36, $i37, $i39, $i40, $p41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $p49, $p50, $p51, $p52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $p60, $p61, $p62, $p63, $i64, $i65, $i66, $p67, $i38, $i68, $i69, $i70, $i71, $i72 := parse_features_loop_$bb8($p0, $p1, $p2, $p3, $p5, $i31, $p32, $i33, $i34, $i35, $i36, $i37, $i39, $i40, $p41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $p49, $p50, $p51, $p52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $p60, $p61, $p62, $p63, $i64, $i65, $i66, $p67, $i38, $i68, $i69, $i70, $i71, $i72);
    goto $bb8_last;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 607} $p32 := dm_shift_arg($p0);
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.29, $p2);
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $i34 := $sub.i32($i33, 1);
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    $M.29 := $store.i32($M.29, $p2, $i34);
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} $i35 := strcasecmp($p32, .str.28);
    call {:si_unique_call 609} {:cexpr "tmp"} boogie_si_record_i32($i35);
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, 0);
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} $i39 := strcasecmp($p32, .str.29);
    call {:si_unique_call 613} {:cexpr "tmp___0"} boogie_si_record_i32($i39);
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, 0);
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 614} $i45 := strcasecmp($p32, .str.30);
    call {:si_unique_call 615} {:cexpr "tmp___1"} boogie_si_record_i32($i45);
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i45, 0);
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 618} $i56 := strcasecmp($p32, .str.31);
    call {:si_unique_call 619} {:cexpr "tmp___2"} boogie_si_record_i32($i56);
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i56, 0);
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i57 == 1);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p5, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p67, .str.32);
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    $i38 := $sub.i32(0, 22);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.29, $p2);
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    $i69 := $ne.i32($i68, 0);
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    $i70 := $eq.i32($i38, 0);
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    $i71 := $and.i1($i69, $i70);
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    $i72 := $i38;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i28 := $i72;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    $r := $i28;
    return;

  $bb28:
    assume $i71 == 1;
    assume {:verifier.code 0} true;
    $i31 := $i38;
    goto $bb28_dummy;

  $bb22:
    assume $i57 == 1;
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.29, $p2);
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    $i59 := $ne.i32($i58, 0);
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i59 == 1);
    goto $bb24;

  $bb25:
    assume $i59 == 1;
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p3);
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($p60, $mul.ref(2, 16));
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p1, $mul.ref(0, 536)), $mul.ref(280, 1));
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p5, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 620} $i64 := dm_read_arg($p61, $p0, $p62, $p63);
    call {:si_unique_call 621} {:cexpr "r"} boogie_si_record_i32($i64);
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.29, $p2);
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    $i66 := $sub.i32($i65, 1);
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    $M.29 := $store.i32($M.29, $p2, $i66);
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    $i38 := $i64;
    goto $bb11;

  $bb16:
    assume $i46 == 1;
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.29, $p2);
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i48 == 1);
    goto $bb18;

  $bb19:
    assume $i48 == 1;
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p3);
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($p49, $mul.ref(1, 16));
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p1, $mul.ref(0, 536)), $mul.ref(272, 1));
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p5, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} $i53 := dm_read_arg($p50, $p0, $p51, $p52);
    call {:si_unique_call 617} {:cexpr "r"} boogie_si_record_i32($i53);
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.29, $p2);
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    $i55 := $sub.i32($i54, 1);
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    $M.29 := $store.i32($M.29, $p2, $i55);
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    $i38 := $i53;
    goto $bb11;

  $bb13:
    assume $i40 == 1;
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p1, $mul.ref(0, 536)), $mul.ref(268, 1));
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    $i42 := $load.i8($M.0, $p41);
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    $i43 := $and.i8($i42, $sub.i8(0, 9));
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    $i44 := $or.i8($i43, 8);
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p41, $i44);
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    $i38 := $i31;
    goto $bb11;

  $bb9:
    assume $i36 == 1;
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} $i37 := queue_if_no_path($p1, 1, 0);
    call {:si_unique_call 611} {:cexpr "r"} boogie_si_record_i32($i37);
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    $i38 := $i37;
    goto $bb11;

  $bb5:
    assume $i30 == 1;
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    $i28 := 0;
    goto $bb3;

  $bb1:
    assume $i27 == 1;
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    $i28 := $sub.i32(0, 22);
    goto $bb3;

  $bb28_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3185;
}



const parse_hw_handler: ref;

axiom parse_hw_handler == $sub.ref(0, 271471);

procedure parse_hw_handler($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.0, $CurrAddr;



implementation parse_hw_handler($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $p32: ref;
  var $p33: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $i39: i32;
  var $i31: i32;
  var $i40: i1;
  var $p41: ref;
  var $i43: i32;
  var $i44: i1;
  var $p47: ref;
  var $p48: ref;
  var $i49: i64;
  var $p50: ref;
  var $p51: ref;
  var $i52: i64;
  var $i53: i32;
  var $i54: i32;
  var $i55: i32;
  var $i56: i32;
  var $i57: i32;
  var $i58: i32;
  var $i59: i1;
  var $i45: i32;
  var $i46: i32;
  var $i60: i32;
  var $i61: i64;
  var $p62: ref;
  var $p63: ref;
  var $i64: i64;
  var $i65: i1;
  var $p66: ref;
  var $i67: i32;
  var $i68: i32;
  var $i69: i32;
  var $i70: i64;
  var $i71: i64;
  var $p72: ref;
  var $p75: ref;
  var $p76: ref;
  var $i77: i64;
  var $p78: ref;
  var $p79: ref;
  var $i80: i32;
  var $i81: i32;
  var $i82: i64;
  var $i83: i64;
  var $p84: ref;
  var $i85: i32;
  var $i86: i32;
  var $i87: i1;
  var $i73: i32;
  var $p74: ref;
  var $i88: i32;
  var $i89: i32;
  var $i42: i32;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $i16: i32;
  var vslice_dummy_var_47: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 622} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 623} $p3 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 536)), $mul.ref(16, 1));
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p7, 0);
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p9, 1024);
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p11, .str.33);
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p3);
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p5, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 624} $i14 := dm_read_arg_group($p12, $p0, $p2, $p13);
    call {:si_unique_call 625} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.29, $p2);
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 0);
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 626} $p19 := dm_shift_arg($p0);
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 627} $p20 := kstrdup($p19, 208);
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 536)), $mul.ref(24, 1));
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p21, $p20);
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 536)), $mul.ref(24, 1));
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 628} $i24 := scsi_dh_handler_exist($p23);
    call {:si_unique_call 629} {:cexpr "tmp___6"} boogie_si_record_i32($i24);
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i25 == 1);
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 536)), $mul.ref(24, 1));
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 633} vslice_dummy_var_47 := __request_module.i1.ref.ref(1, .str.34, $p33);
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref(0, 536)), $mul.ref(24, 1));
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 634} $i37 := scsi_dh_handler_exist($p36);
    call {:si_unique_call 635} {:cexpr "tmp___4"} boogie_si_record_i32($i37);
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 0);
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    $i39 := $zext.i1.i32($i38);
    call {:si_unique_call 636} {:cexpr "tmp___5"} boogie_si_record_i32($i39);
    assume {:verifier.code 0} true;
    $i31 := $i39;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i31, 0);
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.29, $p2);
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    $i44 := $ugt.i32($i43, 1);
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i88 := $load.i32($M.29, $p2);
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    $i89 := $sub.i32($i88, 1);
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 648} dm_consume_args($p0, $i89);
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb15:
    assume $i44 == 1;
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    $i45, $i46 := 4, 0;
    goto $bb17;

  $bb17:
    call $p47, $p48, $i49, $p50, $p51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i45, $i46, $i60 := parse_hw_handler_loop_$bb17($p0, $p2, $p47, $p48, $i49, $p50, $p51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i45, $i46, $i60);
    goto $bb17_last;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.5, $p47);
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    $i49 := $sext.i32.i64($i46);
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($p48, $mul.ref($i49, 8));
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} $i52 := strlen($p51);
    call {:si_unique_call 639} {:cexpr "tmp___7"} boogie_si_record_i64($i52);
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i64.i32($i52);
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    $i54 := $add.i32($i53, $i45);
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    $i55 := $add.i32($i54, 1);
    call {:si_unique_call 640} {:cexpr "len"} boogie_si_record_i32($i55);
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    $i56 := $add.i32($i46, 1);
    call {:si_unique_call 641} {:cexpr "i"} boogie_si_record_i32($i56);
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.29, $p2);
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    $i58 := $sub.i32($i57, 2);
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    $i59 := $ule.i32($i56, $i58);
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    $i60 := $i55;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i61 := $sext.i32.i64($i60);
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} $p62 := kzalloc($i61, 208);
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p1, $mul.ref(0, 536)), $mul.ref(32, 1));
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p63, $p62);
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    $i64 := $p2i.ref.i64($p62);
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    $i65 := $eq.i64($i64, 0);
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.29, $p2);
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    $i68 := $sub.i32($i67, 1);
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 643} $i69 := sprintf.ref.ref.i32($p62, .str.37, $i68);
    call {:si_unique_call 644} {:cexpr "j"} boogie_si_record_i32($i69);
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    $i70 := $sext.i32.i64($i69);
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    $i71 := $add.i64($i70, 1);
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($p62, $mul.ref($i71, 1));
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    $i73, $p74 := 0, $p72;
    goto $bb25;

  $bb25:
    call $p75, $p76, $i77, $p78, $p79, $i80, $i81, $i82, $i83, $p84, $i85, $i86, $i87, $i73, $p74 := parse_hw_handler_loop_$bb25($p0, $p2, $p75, $p76, $i77, $p78, $p79, $i80, $i81, $i82, $i83, $p84, $i85, $i86, $i87, $i73, $p74);
    goto $bb25_last;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.5, $p75);
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    $i77 := $sext.i32.i64($i73);
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($p76, $mul.ref($i77, 8));
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.0, $p78);
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} $i80 := sprintf.ref.ref.ref($p74, .str.38, $p79);
    call {:si_unique_call 646} {:cexpr "j"} boogie_si_record_i32($i80);
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    $i81 := $add.i32($i73, 1);
    call {:si_unique_call 647} {:cexpr "i"} boogie_si_record_i32($i81);
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    $i82 := $sext.i32.i64($i80);
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    $i83 := $add.i64($i82, 1);
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($p74, $mul.ref($i83, 1));
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    $i85 := $load.i32($M.29, $p2);
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    $i86 := $sub.i32($i85, 2);
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    $i87 := $ule.i32($i81, $i86);
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb27:
    assume $i87 == 1;
    assume {:verifier.code 0} true;
    $i73, $p74 := $i81, $p84;
    goto $bb27_dummy;

  $bb22:
    assume $i65 == 1;
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p5, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p66, .str.36);
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32(0, 12);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p1, $mul.ref(0, 536)), $mul.ref(24, 1));
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.0, $p90);
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} kfree($p91);
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p1, $mul.ref(0, 536)), $mul.ref(24, 1));
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p92, $0.ref);
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    $i16 := $i42;
    goto $bb3;

  $bb19:
    assume $i59 == 1;
    assume {:verifier.code 0} true;
    $i45, $i46 := $i55, $i56;
    goto $bb19_dummy;

  $bb11:
    assume $i40 == 1;
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p5, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p41, .str.35);
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32(0, 22);
    goto $bb13;

  $bb8:
    assume $i25 == 1;
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 536)), $mul.ref(24, 1));
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 630} $i28 := scsi_dh_handler_exist($p27);
    call {:si_unique_call 631} {:cexpr "tmp___3"} boogie_si_record_i32($i28);
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 0);
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    $i30 := $zext.i1.i32($i29);
    call {:si_unique_call 632} {:cexpr "tmp___5"} boogie_si_record_i32($i30);
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    $i31 := $i30;
    goto $bb10;

  $bb5:
    assume $i18 == 1;
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb3;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 22);
    goto $bb3;

  $bb27_dummy:
    assume false;
    return;

  $bb25_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3350;

  $bb19_dummy:
    assume false;
    return;

  $bb17_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3316;
}



const dm_read_arg: ref;

axiom dm_read_arg == $sub.ref(0, 272503);

procedure dm_read_arg($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dm_read_arg($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 1} true;
    call {:si_unique_call 649} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 650} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const parse_priority_group: ref;

axiom parse_priority_group == $sub.ref(0, 273535);

procedure parse_priority_group($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.0, $M.5, $CurrAddr, $M.27, $M.29, $M.17, $M.18, $M.20, $M.21, $M.22, $M.23, $M.24, $M.7, $M.25, $M.26, $M.9, $M.11, $M.13, $M.15, $M.10, $M.12, $M.14, $M.16, assertsPassed;



implementation parse_priority_group($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $p12: ref;
  var $p14: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $i46: i1;
  var $i47: i32;
  var $i48: i32;
  var $p49: ref;
  var $i50: i32;
  var $i51: i1;
  var $p53: ref;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i1;
  var $i65: i8;
  var $i66: i1;
  var $p67: ref;
  var $p68: ref;
  var $i69: i64;
  var $i70: i32;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i32;
  var $i75: i32;
  var $i76: i1;
  var $i52: i32;
  var $i36: i32;
  var $i77: i64;
  var $p78: ref;
  var $p26: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} $p2 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 653} $p4 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p6, 1);
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p8, 1024);
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p10, .str.39);
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(1, 16)), $mul.ref(0, 1));
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p12, 0);
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(1, 16)), $mul.ref(4, 1));
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p14, 1024);
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(1, 16)), $mul.ref(8, 1));
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p16, .str.40);
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 536)), $mul.ref(16, 1));
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.4, $p19);
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    $i21 := $ule.i32($i20, 1);
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 655} $p27 := alloc_priority_group();
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    $i29 := $eq.i64($i28, 0);
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p27, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p33, $p1);
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 657} $i34 := parse_path_selector($p0, $p27, $p18);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    call {:si_unique_call 658} {:cexpr "r"} boogie_si_record_i32($i34);
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p2);
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p27, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p18, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 661} $i40 := dm_read_arg($p37, $p0, $p38, $p39);
    call {:si_unique_call 662} {:cexpr "r"} boogie_si_record_i32($i40);
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p2);
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($p42, $mul.ref(1, 16));
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p18, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 663} $i45 := dm_read_arg($p43, $p0, $p3, $p44);
    call {:si_unique_call 664} {:cexpr "r"} boogie_si_record_i32($i45);
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p3);
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    $i48 := $add.i32($i47, 1);
    call {:si_unique_call 665} {:cexpr "nr_args"} boogie_si_record_i32($i48);
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p27, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    $i51 := $ugt.i32($i50, 0);
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i51 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p26 := $p27;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    $r := $p26;
    return;

  $bb18:
    assume $i51 == 1;
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    $i52 := 0;
    goto $bb21;

  $bb21:
    call $p53, $i54, $i55, $p57, $p58, $p59, $p60, $p61, $p62, $p63, $i64, $i65, $i66, $p67, $p71, $p72, $p73, $i74, $i75, $i76, $i52 := parse_priority_group_loop_$bb21($p0, $p4, $p18, $p27, $i48, $p49, $p53, $i54, $i55, $p57, $p58, $p59, $p60, $p61, $p62, $p63, $i64, $i65, $i66, $p67, $p71, $p72, $p73, $i74, $i75, $i76, $i52);
    goto $bb21_last;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.4, $p53);
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    $i55 := $ult.i32($i54, $i48);
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p57, $i48);
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.5, $p58);
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p60, $p59);
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p27, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} $p62 := parse_path($p4, $p61, $p18);
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p62);
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 667} $i64 := IS_ERR($p63);
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    $i65 := $zext.i1.i8($i64);
    call {:si_unique_call 668} {:cexpr "tmp___2"} boogie_si_record_i8($i65);
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    $i66 := $trunc.i8.i1($i65);
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    $p67 := $p62;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p62, $mul.ref(0, 272)), $mul.ref(16, 1));
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p71, $p27);
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p62, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p27, $mul.ref(0, 72)), $mul.ref(56, 1));
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 672} list_add_tail($p72, $p73);
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 673} dm_consume_args($p0, $i48);
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    $i74 := $add.i32($i52, 1);
    call {:si_unique_call 674} {:cexpr "i"} boogie_si_record_i32($i74);
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.0, $p49);
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    $i76 := $ugt.i32($i75, $i74);
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i76 == 1);
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb29:
    assume $i76 == 1;
    assume {:verifier.code 0} true;
    $i52 := $i74;
    goto $bb29_dummy;

  $bb26:
    assume $i66 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p67);
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 669} $i69 := PTR_ERR($p68);
    call {:si_unique_call 670} {:cexpr "tmp___1"} boogie_si_record_i64($i69);
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    $i70 := $trunc.i64.i32($i69);
    call {:si_unique_call 671} {:cexpr "r"} boogie_si_record_i32($i70);
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    $i36 := $i70;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} free_priority_group($p27, $p18);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    $i77 := $sext.i32.i64($i36);
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 660} $p78 := ERR_PTR($i77);
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    $p26 := $p78;
    goto $bb3;

  SeqInstr_34:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i55 == 1;
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p18, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p56, .str.43);
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    $i36 := $sub.i32(0, 22);
    goto $bb10;

  $bb15:
    assume $i46 == 1;
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    $i36 := $i45;
    goto $bb10;

  $bb12:
    assume $i41 == 1;
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    $i36 := $i40;
    goto $bb10;

  $bb8:
    assume $i35 == 1;
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    $i36 := $i34;
    goto $bb10;

  SeqInstr_31:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i29 == 1;
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p18, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p30, .str.42);
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} $p31 := ERR_PTR($sub.i64(0, 12));
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    $p26 := $p31;
    goto $bb3;

  $bb1:
    assume $i21 == 1;
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p22, 0);
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p18, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p23, .str.41);
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 654} $p24 := ERR_PTR($sub.i64(0, 22));
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    $p26 := $p24;
    goto $bb3;

  $bb29_dummy:
    assume false;
    return;

  $bb21_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3449;
}



const PTR_ERR: ref;

axiom PTR_ERR == $sub.ref(0, 274567);

procedure PTR_ERR($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation PTR_ERR($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 675} $i1 := ldv_ptr_err($p0);
    call {:si_unique_call 676} {:cexpr "tmp"} boogie_si_record_i64($i1);
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const list_add_tail: ref;

axiom list_add_tail == $sub.ref(0, 275599);

procedure list_add_tail($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add_tail($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 677} __list_add($p0, $p3, $p1);
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    return;
}



const ldv_ptr_err: ref;

axiom ldv_ptr_err == $sub.ref(0, 276631);

procedure ldv_ptr_err($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation ldv_ptr_err($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    $i2 := $sub.i64(2012, $i1);
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ERR_PTR: ref;

axiom ERR_PTR == $sub.ref(0, 277663);

procedure ERR_PTR($i0: i64) returns ($r: ref);
  free requires assertsPassed;



implementation ERR_PTR($i0: i64) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 678} {:cexpr "ERR_PTR:arg:error"} boogie_si_record_i64($i0);
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} $p1 := ldv_err_ptr($i0);
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const alloc_priority_group: ref;

axiom alloc_priority_group == $sub.ref(0, 278695);

procedure alloc_priority_group() returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation alloc_priority_group() returns ($r: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 680} $p0 := kzalloc(72, 208);
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(56, 1));
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} INIT_LIST_HEAD($p4);
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const parse_path_selector: ref;

axiom parse_path_selector == $sub.ref(0, 279727);

procedure parse_path_selector($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.0, $M.4, $M.5, $CurrAddr, $M.27, $M.29, $M.17, $M.18, assertsPassed, $M.20, $M.21, $M.22, $M.23, $M.24, $M.7, $M.25, $M.26, $M.10, $M.9, $M.12, $M.11, $M.14, $M.13, $M.16, $M.15;



implementation parse_path_selector($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $p31: ref;
  var $i32: i32;
  var $i16: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 682} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} $p4 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p6, 0);
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p8, 1024);
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p10, .str.44);
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} $p11 := dm_shift_arg($p0);
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 685} $p12 := dm_get_path_selector($p11);
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p4);
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 686} $i19 := dm_read_arg_group($p17, $p0, $p3, $p18);
    call {:si_unique_call 687} {:cexpr "r"} boogie_si_record_i32($i19);
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p12, $mul.ref(0, 96)), $mul.ref(24, 1));
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.29, $p3);
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.5, $p25);
    call {:si_unique_call 689} $i27 := devirtbounce.12($p22, $p23, $i24, $p26);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    call {:si_unique_call 690} {:cexpr "r"} boogie_si_record_i32($i27);
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p31, $p12);
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.29, $p3);
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 692} dm_consume_args($p0, $i32);
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb8:
    assume $i28 == 1;
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} dm_put_path_selector($p12);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p29, .str.46);
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    $i16 := $i27;
    goto $bb3;

  SeqInstr_43:
    assume !assertsPassed;
    return;

  SeqInstr_40:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i20 == 1;
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} dm_put_path_selector($p12);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 22);
    goto $bb3;

  SeqInstr_37:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p15, .str.45);
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 22);
    goto $bb3;
}



const parse_path: ref;

axiom parse_path == $sub.ref(0, 280759);

procedure parse_path($p0: ref, $p1: ref, $p2: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation parse_path($p0: ref, $p1: ref, $p2: ref) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i8;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i8;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $i50: i64;
  var $i51: i1;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i64;
  var $i61: i1;
  var $p62: ref;
  var $p63: ref;
  var $i64: i32;
  var $i65: i1;
  var $p66: ref;
  var $p67: ref;
  var $i68: i32;
  var $i69: i32;
  var $i70: i1;
  var $p71: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $i77: i64;
  var $i78: i1;
  var $p79: ref;
  var $p80: ref;
  var $i81: i32;
  var $i82: i1;
  var $p83: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $i93: i32;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $i97: i32;
  var $i98: i1;
  var $p100: ref;
  var $p101: ref;
  var $i27: i32;
  var $i102: i64;
  var $p103: ref;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.4, $p6);
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} $p13 := alloc_pgpath();
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, 0);
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} $i20 := dm_table_get_mode($p19);
    call {:si_unique_call 697} {:cexpr "tmp___1"} boogie_si_record_i32($i20);
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} $p21 := dm_shift_arg($p0);
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 272)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} $i24 := dm_get_device($p2, $p21, $i20, $p23);
    call {:si_unique_call 700} {:cexpr "r"} boogie_si_record_i32($i24);
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p5);
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($p28, $mul.ref(268, 1));
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.0, $p29);
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i32($i30);
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb14;

  $bb14:
    assume !($i32 == 1);
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p5, $mul.ref(0, 536)), $mul.ref(24, 1));
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i35, 0);
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    $p43 := $0.ref;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p5);
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($p44, $mul.ref(268, 1));
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.0, $p45);
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i46);
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p5, $mul.ref(0, 536)), $mul.ref(24, 1));
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    $i60 := $p2i.ref.i64($p59);
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    $i61 := $ne.i64($i60, 0);
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.0, $p87);
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p88, $mul.ref(0, 96)), $mul.ref(40, 1));
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    $p90 := $load.ref($M.0, $p89);
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p13, $mul.ref(0, 272)), $mul.ref(32, 1));
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    $i93 := $load.i32($M.4, $p92);
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    $p95 := $load.ref($M.5, $p94);
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(72, 1));
    call {:si_unique_call 717} $i97 := devirtbounce.13($p90, $p1, $p91, $i93, $p95, $p96);
    call {:si_unique_call 718} {:cexpr "r"} boogie_si_record_i32($i97);
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    $i98 := $ne.i32($i97, 0);
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    assume {:branchcond $i98} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p12 := $p13;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    $r := $p12;
    return;

  $bb39:
    assume $i98 == 1;
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 272)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    $p101 := $load.ref($M.0, $p100);
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 719} dm_put_device($p2, $p101);
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    $i27 := $i97;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 701} free_pgpath($p13);
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    $i102 := $sext.i32.i64($i27);
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 702} $p103 := ERR_PTR($i102);
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    $p12 := $p103;
    goto $bb3;

  $bb24:
    assume $i61 == 1;
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p5, $mul.ref(0, 536)), $mul.ref(24, 1));
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 707} $i64 := scsi_dh_attach($p43, $p63);
    call {:si_unique_call 708} {:cexpr "r"} boogie_si_record_i32($i64);
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i64, $sub.i32(0, 16));
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    $i69 := $i64;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    $i70 := $slt.i32($i69, 0);
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    assume {:branchcond $i70} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p5, $mul.ref(0, 536)), $mul.ref(32, 1));
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.0, $p75);
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    $i77 := $p2i.ref.i64($p76);
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    $i78 := $ne.i64($i77, 0);
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb32:
    assume $i78 == 1;
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p5, $mul.ref(0, 536)), $mul.ref(32, 1));
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.0, $p79);
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 713} $i81 := scsi_dh_set_params($p43, $p80);
    call {:si_unique_call 714} {:cexpr "r"} boogie_si_record_i32($i81);
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    $i82 := $slt.i32($i81, 0);
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb34:
    assume $i82 == 1;
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p83, .str.50);
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 715} scsi_dh_detach($p43);
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 272)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.0, $p85);
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 716} dm_put_device($p2, $p86);
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    $i27 := $i81;
    goto $bb10;

  $bb29:
    assume $i70 == 1;
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p71, .str.49);
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 272)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.0, $p73);
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 712} dm_put_device($p2, $p74);
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    $i27 := $i69;
    goto $bb10;

  $bb26:
    assume $i65 == 1;
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 709} scsi_dh_detach($p43);
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p5, $mul.ref(0, 536)), $mul.ref(24, 1));
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 710} $i68 := scsi_dh_attach($p43, $p67);
    call {:si_unique_call 711} {:cexpr "r"} boogie_si_record_i32($i68);
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    $i69 := $i68;
    goto $bb28;

  $bb18:
    assume $i48 == 1;
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 704} $p49 := scsi_dh_attached_handler_name($p43, 208);
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p49);
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    $i51 := $ne.i64($i50, 0);
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb20:
    assume $i51 == 1;
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p5, $mul.ref(0, 536)), $mul.ref(24, 1));
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 705} kfree($p53);
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p5, $mul.ref(0, 536)), $mul.ref(24, 1));
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p54, $p49);
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p5, $mul.ref(0, 536)), $mul.ref(32, 1));
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 706} kfree($p56);
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p5, $mul.ref(0, 536)), $mul.ref(32, 1));
    goto corral_source_split_3639;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p57, $0.ref);
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb15:
    assume {:verifier.code 0} true;
    assume $i36 == 1;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 272)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.30, $p40);
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 703} $p42 := bdev_get_queue($p41);
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    $p43 := $p42;
    goto $bb17;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i32 == 1;
    goto $bb13;

  $bb8:
    assume $i25 == 1;
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p26, .str.48);
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    $i27 := $i24;
    goto $bb10;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} $p16 := ERR_PTR($sub.i64(0, 12));
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    $p12 := $p16;
    goto $bb3;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p9, .str.47);
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} $p10 := ERR_PTR($sub.i64(0, 22));
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    $p12 := $p10;
    goto $bb3;
}



const dm_consume_args: ref;

axiom dm_consume_args == $sub.ref(0, 281791);

procedure dm_consume_args($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation dm_consume_args($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 720} {:cexpr "dm_consume_args:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    return;
}



const alloc_pgpath: ref;

axiom alloc_pgpath == $sub.ref(0, 282823);

procedure alloc_pgpath() returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation alloc_pgpath() returns ($r: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p18: ref;
  var $p21: ref;
  var $p24: ref;
  var $p26: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $p34: ref;
  var cmdloc_dummy_var_8: [ref]i8;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 722} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 723} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 724} $p3 := kzalloc(272, 208);
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 272)), $mul.ref(24, 1));
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, 1);
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 272)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 725} __init_work($p9, 0);
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p10, 137438953408);
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 272)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p1);
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_8 := $M.0;
    cmdloc_dummy_var_9 := $M.0;
    call {:si_unique_call 726} cmdloc_dummy_var_10 := $memcpy.i8(cmdloc_dummy_var_8, cmdloc_dummy_var_9, $p14, $p15, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_10;
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 272)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 727} lockdep_init_map($p18, .str.51, $p0, 0);
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 272)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 728} INIT_LIST_HEAD($p21);
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 272)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p24, activate_path);
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 272)), $mul.ref(48, 1)), $mul.ref(80, 1));
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 729} init_timer_key($p26, 2097152, .str.52, $p2);
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 272)), $mul.ref(48, 1)), $mul.ref(80, 1)), $mul.ref(24, 1));
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p29, delayed_work_timer_fn);
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p4, $mul.ref(0, 272)), $mul.ref(48, 1));
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 272)), $mul.ref(48, 1)), $mul.ref(80, 1)), $mul.ref(32, 1));
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p34, $i31);
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const dm_shift_arg: ref;

axiom dm_shift_arg == $sub.ref(0, 283855);

procedure dm_shift_arg($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dm_shift_arg($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} $p1 := external_alloc();
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const scsi_dh_attached_handler_name: ref;

axiom scsi_dh_attached_handler_name == $sub.ref(0, 284887);

procedure scsi_dh_attached_handler_name($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation scsi_dh_attached_handler_name($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 731} {:cexpr "scsi_dh_attached_handler_name:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 732} $p2 := external_alloc();
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const scsi_dh_attach: ref;

axiom scsi_dh_attach == $sub.ref(0, 285919);

procedure scsi_dh_attach($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation scsi_dh_attach($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 1} true;
    call {:si_unique_call 733} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 734} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const scsi_dh_set_params: ref;

axiom scsi_dh_set_params == $sub.ref(0, 286951);

procedure scsi_dh_set_params($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation scsi_dh_set_params($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 1} true;
    call {:si_unique_call 735} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 736} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __init_work: ref;

axiom __init_work == $sub.ref(0, 287983);

procedure __init_work($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __init_work($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 737} {:cexpr "__init_work:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    return;
}



const lockdep_init_map: ref;

axiom lockdep_init_map == $sub.ref(0, 289015);

procedure lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;



implementation lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 738} {:cexpr "lockdep_init_map:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    return;
}



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0, 290047);

procedure INIT_LIST_HEAD($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $p0);
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p0);
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    return;
}



const init_timer_key: ref;

axiom init_timer_key == $sub.ref(0, 291079);

procedure init_timer_key($p0: ref, $i1: i32, $p2: ref, $p3: ref);
  free requires assertsPassed;



implementation init_timer_key($p0: ref, $i1: i32, $p2: ref, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} {:cexpr "init_timer_key:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    return;
}



const delayed_work_timer_fn: ref;

axiom delayed_work_timer_fn == $sub.ref(0, 292111);

procedure delayed_work_timer_fn($i0: i64);



const dm_get_path_selector: ref;

axiom dm_get_path_selector == $sub.ref(0, 293143);

procedure dm_get_path_selector($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.27;



implementation dm_get_path_selector($p0: ref) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p13: ref;
  var $p3: ref;
  var vslice_dummy_var_48: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 740} $p4 := get_path_selector($p0);
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $p9 := $p4;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i11 == 1);
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    $p13 := $0.ref;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    $p3 := $p13;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb8:
    assume $i11 == 1;
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    $p13 := $p9;
    goto $bb10;

  $bb5:
    assume $i6 == 1;
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} vslice_dummy_var_48 := __request_module.i1.ref.ref(1, .str, $p0);
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 742} $p8 := get_path_selector($p0);
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    $p9 := $p8;
    goto $bb7;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb3;
}



const dm_read_arg_group: ref;

axiom dm_read_arg_group == $sub.ref(0, 294175);

procedure dm_read_arg_group($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dm_read_arg_group($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 1} true;
    call {:si_unique_call 743} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 744} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const get_path_selector: ref;

axiom get_path_selector == $sub.ref(0, 295207);

procedure get_path_selector($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.27;



implementation get_path_selector($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $i8: i8;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} down_read(_ps_lock);
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} $p1 := __find_path_selector_type($p0);
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_3797;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $p13 := $p1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 749} up_read(_ps_lock);
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    $r := $p13;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 747} $i7 := ldv_try_module_get_10($p6);
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i8($i7);
    call {:si_unique_call 748} {:cexpr "tmp"} boogie_si_record_i8($i8);
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i8);
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $p12 := $p1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    $p13 := $p12;
    goto $bb9;

  $bb6:
    assume $i11 == 1;
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    $p12 := $0.ref;
    goto $bb8;

  $bb3:
    assume $i9 == 1;
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb5;
}



const __request_module: ref;

axiom __request_module == $sub.ref(0, 296239);

procedure __request_module.i1.ref.ref($i0: i1, $p1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __request_module.i1.ref.ref($i0: i1, $p1: ref, p.2: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 750} {:cexpr "__request_module:arg:arg0"} boogie_si_record_i1($i0);
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 1} true;
    call {:si_unique_call 751} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 752} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3819;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_try_module_get_10: ref;

axiom ldv_try_module_get_10 == $sub.ref(0, 297271);

procedure ldv_try_module_get_10($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.27;



implementation ldv_try_module_get_10($p0: ref) returns ($r: i1)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 753} $i1 := ldv_try_module_get($p0);
    call {:si_unique_call 754} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_try_module_get: ref;

axiom ldv_try_module_get == $sub.ref(0, 298303);

procedure ldv_try_module_get($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.27;



implementation ldv_try_module_get($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 755} $i3 := ldv_undef_int();
    call {:si_unique_call 756} {:cexpr "module_get_succeeded"} boogie_si_record_i32($i3);
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 1);
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i4 == 1);
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb5;

  $bb3:
    assume $i4 == 1;
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    $i5 := $M.27;
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    $i6 := $add.i32($i5, 1);
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    $M.27 := $i6;
    call {:si_unique_call 757} {:cexpr "ldv_module_refcounter"} boogie_si_record_i32($i6);
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    $i7 := 1;
    goto $bb5;
}



const ldv_undef_int: ref;

axiom ldv_undef_int == $sub.ref(0, 299335);

procedure ldv_undef_int() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_undef_int() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3842;

  corral_source_split_3842:
    assume {:verifier.code 1} true;
    call {:si_unique_call 758} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 759} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 760} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_err_ptr: ref;

axiom ldv_err_ptr == $sub.ref(0, 300367);

procedure ldv_err_ptr($i0: i64) returns ($r: ref);
  free requires assertsPassed;



implementation ldv_err_ptr($i0: i64) returns ($r: ref)
{
  var $i1: i64;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 761} {:cexpr "ldv_err_ptr:arg:error"} boogie_si_record_i64($i0);
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    $i1 := $sub.i64(2012, $i0);
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    $p2 := $i2p.i64.ref($i1);
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const kstrdup: ref;

axiom kstrdup == $sub.ref(0, 301399);

procedure kstrdup($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation kstrdup($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} {:cexpr "kstrdup:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 763} $p2 := external_alloc();
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const scsi_dh_handler_exist: ref;

axiom scsi_dh_handler_exist == $sub.ref(0, 302431);

procedure scsi_dh_handler_exist($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation scsi_dh_handler_exist($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 1} true;
    call {:si_unique_call 764} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 765} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const strlen: ref;

axiom strlen == $sub.ref(0, 303463);

procedure strlen($p0: ref) returns ($r: i64);



const sprintf: ref;

axiom sprintf == $sub.ref(0, 304495);

procedure sprintf.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32);



procedure sprintf.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);



const dm_get_reserved_rq_based_ios: ref;

axiom dm_get_reserved_rq_based_ios == $sub.ref(0, 305527);

procedure dm_get_reserved_rq_based_ios() returns ($r: i32);
  free requires assertsPassed;



implementation dm_get_reserved_rq_based_ios() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 1} true;
    call {:si_unique_call 766} $i0 := __VERIFIER_nondet_uint();
    call {:si_unique_call 767} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i0);
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 306559);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    return;
}



const trigger_event: ref;

axiom trigger_event == $sub.ref(0, 307591);

procedure trigger_event($p0: ref);
  free requires assertsPassed;



implementation trigger_event($p0: ref)
{
  var $p1: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 288), 536)), $mul.ref(16, 1));
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} dm_table_event($p6);
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    return;
}



const __init_waitqueue_head: ref;

axiom __init_waitqueue_head == $sub.ref(0, 308623);

procedure __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    return;
}



const __mutex_init: ref;

axiom __mutex_init == $sub.ref(0, 309655);

procedure __mutex_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __mutex_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    return;
}



const mempool_create_slab_pool: ref;

axiom mempool_create_slab_pool == $sub.ref(0, 310687);

procedure mempool_create_slab_pool($i0: i32, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation mempool_create_slab_pool($i0: i32, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 769} {:cexpr "mempool_create_slab_pool:arg:min_nr"} boogie_si_record_i32($i0);
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 770} $p3 := mempool_create($i0, mempool_alloc_slab, mempool_free_slab, $p2);
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const mempool_alloc_slab: ref;

axiom mempool_alloc_slab == $sub.ref(0, 311719);

procedure mempool_alloc_slab($i0: i32, $p1: ref) returns ($r: ref);



const mempool_free_slab: ref;

axiom mempool_free_slab == $sub.ref(0, 312751);

procedure mempool_free_slab($p0: ref, $p1: ref);



const mempool_create: ref;

axiom mempool_create == $sub.ref(0, 313783);

procedure mempool_create($i0: i32, $p1: ref, $p2: ref, $p3: ref) returns ($r: ref);
  free requires assertsPassed;



implementation mempool_create($i0: i32, $p1: ref, $p2: ref, $p3: ref) returns ($r: ref)
{
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} {:cexpr "mempool_create:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 772} $p4 := external_alloc();
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const dm_table_event: ref;

axiom dm_table_event == $sub.ref(0, 314815);

procedure dm_table_event($p0: ref);
  free requires assertsPassed;



implementation dm_table_event($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    return;
}



const ldv_init_zalloc: ref;

axiom ldv_init_zalloc == $sub.ref(0, 315847);

procedure ldv_init_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_init_zalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 773} {:cexpr "ldv_init_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} $p1 := calloc(1, $i0);
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 1} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 1} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 1} true;
    call {:si_unique_call 775} __VERIFIER_assume($i4);
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const ldv_memset: ref;

axiom ldv_memset == $sub.ref(0, 316879);

procedure ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref)
{
  var $i3: i8;
  var cmdloc_dummy_var_11: [ref]i8;
  var cmdloc_dummy_var_12: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 776} {:cexpr "ldv_memset:arg:c"} boogie_si_record_i32($i1);
    call {:si_unique_call 777} {:cexpr "ldv_memset:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i8($i1);
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_11 := $M.0;
    call {:si_unique_call 778} cmdloc_dummy_var_12 := $memset.i8(cmdloc_dummy_var_11, $p0, $i3, $i2, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_12;
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const work_init_2: ref;

axiom work_init_2 == $sub.ref(0, 317911);

procedure work_init_2();
  free requires assertsPassed;
  modifies $M.31, $M.32, $M.33, $M.34;



implementation work_init_2()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    $M.31 := 0;
    call {:si_unique_call 779} {:cexpr "ldv_work_2_0"} boogie_si_record_i32(0);
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    $M.32 := 0;
    call {:si_unique_call 780} {:cexpr "ldv_work_2_1"} boogie_si_record_i32(0);
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    $M.33 := 0;
    call {:si_unique_call 781} {:cexpr "ldv_work_2_2"} boogie_si_record_i32(0);
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    $M.34 := 0;
    call {:si_unique_call 782} {:cexpr "ldv_work_2_3"} boogie_si_record_i32(0);
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    return;
}



const work_init_1: ref;

axiom work_init_1 == $sub.ref(0, 318943);

procedure work_init_1();
  free requires assertsPassed;
  modifies $M.9, $M.11, $M.13, $M.15;



implementation work_init_1()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    $M.9 := 0;
    call {:si_unique_call 783} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(0);
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    $M.11 := 0;
    call {:si_unique_call 784} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(0);
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    $M.13 := 0;
    call {:si_unique_call 785} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(0);
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    $M.15 := 0;
    call {:si_unique_call 786} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(0);
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    return;
}



const invoke_work_1: ref;

axiom invoke_work_1 == $sub.ref(0, 319975);

procedure invoke_work_1();
  free requires assertsPassed;
  modifies $M.9, $M.11, $M.13, $M.15, $M.0, $M.10, $M.12, $M.14, $M.16;



implementation invoke_work_1()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 1} true;
    call {:si_unique_call 787} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 788} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 789} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} ldv_stop();
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    $i21 := $M.15;
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 2);
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb34;

  $bb34:
    assume !($i22 == 1);
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    $i23 := $M.15;
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 3);
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb35:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $M.15 := 4;
    call {:si_unique_call 799} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(4);
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    $p25 := $M.10;
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} activate_path($p25);
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    $M.15 := 1;
    call {:si_unique_call 801} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(1);
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb33;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    $i16 := $M.13;
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 2);
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb26, $bb28;

  $bb28:
    assume !($i17 == 1);
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    $i18 := $M.13;
    goto corral_source_split_3948;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 3);
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $M.13 := 4;
    call {:si_unique_call 796} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(4);
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    $p20 := $M.10;
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 797} activate_path($p20);
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    $M.13 := 1;
    call {:si_unique_call 798} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(1);
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb27;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    $i11 := $M.11;
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 2);
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i12 == 1);
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    $i13 := $M.11;
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 3);
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $M.11 := 4;
    call {:si_unique_call 793} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(4);
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    $p15 := $M.10;
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 794} activate_path($p15);
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    $M.11 := 1;
    call {:si_unique_call 795} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(1);
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb21;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    $i6 := $M.9;
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 2);
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i7 == 1);
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    $i8 := $M.9;
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 3);
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $M.9 := 4;
    call {:si_unique_call 790} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(4);
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    $p10 := $M.10;
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} activate_path($p10);
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    $M.9 := 1;
    call {:si_unique_call 792} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(1);
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb14;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 321007);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3962;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const ldv_target_type_3: ref;

axiom ldv_target_type_3 == $sub.ref(0, 322039);

procedure ldv_target_type_3();
  free requires assertsPassed;
  modifies $M.35, $M.0, $CurrAddr;



implementation ldv_target_type_3()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 803} $p0 := ldv_init_zalloc(88);
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    goto corral_source_split_3966;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    $M.35 := $p0;
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    return;
}



const invoke_work_2: ref;

axiom invoke_work_2 == $sub.ref(0, 323071);

procedure invoke_work_2();
  free requires assertsPassed;
  modifies $M.31, $M.32, $M.33, $M.34;



implementation invoke_work_2()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 1} true;
    call {:si_unique_call 804} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 805} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 806} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 819} ldv_stop();
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    $i21 := $M.34;
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 2);
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb34;

  $bb34:
    assume !($i22 == 1);
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    $i23 := $M.34;
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 3);
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb35:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $M.34 := 4;
    call {:si_unique_call 816} {:cexpr "ldv_work_2_3"} boogie_si_record_i32(4);
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    $p25 := $M.36;
    goto corral_source_split_4015;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 817} trigger_event($p25);
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 818} {:cexpr "ldv_work_2_3"} boogie_si_record_i32(1);
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb33;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    $i16 := $M.33;
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 2);
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb26, $bb28;

  $bb28:
    assume !($i17 == 1);
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    $i18 := $M.33;
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 3);
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $M.33 := 4;
    call {:si_unique_call 813} {:cexpr "ldv_work_2_2"} boogie_si_record_i32(4);
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    $p20 := $M.36;
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 814} trigger_event($p20);
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    $M.33 := 1;
    call {:si_unique_call 815} {:cexpr "ldv_work_2_2"} boogie_si_record_i32(1);
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb27;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    $i11 := $M.32;
    goto corral_source_split_3980;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 2);
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i12 == 1);
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    $i13 := $M.32;
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 3);
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $M.32 := 4;
    call {:si_unique_call 810} {:cexpr "ldv_work_2_1"} boogie_si_record_i32(4);
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    $p15 := $M.36;
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 811} trigger_event($p15);
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    $M.32 := 1;
    call {:si_unique_call 812} {:cexpr "ldv_work_2_1"} boogie_si_record_i32(1);
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb21;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    $i6 := $M.31;
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 2);
    goto corral_source_split_3985;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i7 == 1);
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    $i8 := $M.31;
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 3);
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $M.31 := 4;
    call {:si_unique_call 807} {:cexpr "ldv_work_2_0"} boogie_si_record_i32(4);
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    $p10 := $M.36;
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 808} trigger_event($p10);
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    $M.31 := 1;
    call {:si_unique_call 809} {:cexpr "ldv_work_2_0"} boogie_si_record_i32(1);
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb14;
}



const main: ref;

axiom main == $sub.ref(0, 324103);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.9, $M.11, $M.13, $M.15, $M.37, $M.38, $M.39, $M.40, $M.31, $M.32, $M.33, $M.34, $M.41, $M.42, $M.35, $M.1, $M.2, $M.3, $M.4, $M.5, $M.43, $M.44, $M.49, $M.28, $M.45, $M.19, $M.8, $M.50, $M.14, $M.36, $M.16, $M.12, $M.10, $M.27, $M.56, $M.57, $M.58, $CurrAddr, $M.29, $M.17, $M.18, assertsPassed, $M.20, $M.21, $M.22, $M.23, $M.24, $M.7, $M.25, $M.26;



implementation main() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p33: ref;
  var $p35: ref;
  var $p37: ref;
  var $p39: ref;
  var $p41: ref;
  var $p43: ref;
  var $p45: ref;
  var $p47: ref;
  var $i49: i32;
  var $i50: i1;
  var $i51: i1;
  var $i52: i1;
  var $i53: i1;
  var $i54: i1;
  var $i55: i32;
  var $i56: i1;
  var $i57: i32;
  var $i58: i1;
  var $i59: i32;
  var $i60: i1;
  var $i61: i1;
  var $i62: i1;
  var $i63: i32;
  var $i64: i1;
  var $i65: i32;
  var $i66: i1;
  var $i67: i32;
  var $i68: i1;
  var $i69: i32;
  var $i70: i32;
  var $i71: i1;
  var $i72: i32;
  var $i73: i1;
  var $i74: i32;
  var $i75: i1;
  var $i76: i32;
  var $i77: i1;
  var $i78: i1;
  var $i79: i1;
  var $i80: i1;
  var $i81: i1;
  var $i82: i1;
  var $i83: i1;
  var $i84: i1;
  var $i85: i1;
  var $i86: i1;
  var $i87: i1;
  var $i88: i1;
  var $i89: i1;
  var $i90: i1;
  var $i91: i1;
  var $i92: i1;
  var $i93: i32;
  var $i94: i1;
  var $p95: ref;
  var $i96: i32;
  var $i97: i32;
  var $i98: i32;
  var $i99: i1;
  var $i100: i32;
  var $i101: i32;
  var $i102: i32;
  var $i103: i1;
  var $p104: ref;
  var $i106: i32;
  var $i107: i1;
  var $p108: ref;
  var $i110: i32;
  var $i111: i1;
  var $p112: ref;
  var $i114: i32;
  var $i115: i1;
  var $p116: ref;
  var $i118: i32;
  var $i119: i1;
  var $p120: ref;
  var $i122: i32;
  var $i123: i1;
  var $p124: ref;
  var $i125: i32;
  var $i126: i32;
  var $i127: i32;
  var $i128: i1;
  var $p129: ref;
  var $i130: i32;
  var $i131: i32;
  var $i132: i32;
  var $i133: i1;
  var $p134: ref;
  var $i135: i32;
  var $i136: i32;
  var $i137: i32;
  var $i138: i1;
  var $p139: ref;
  var $i140: i32;
  var $i141: i32;
  var $i142: i32;
  var $i143: i1;
  var $i144: i32;
  var $i145: i1;
  var $i146: i32;
  var $i147: i1;
  var $i148: i32;
  var $i149: i1;
  var $i150: i32;
  var $i151: i1;
  var $i152: i32;
  var $i153: i1;
  var $p154: ref;
  var $p155: ref;
  var $i157: i32;
  var $i158: i1;
  var $p159: ref;
  var $p160: ref;
  var $i162: i32;
  var $i163: i1;
  var $p164: ref;
  var $p165: ref;
  var $i167: i32;
  var $i168: i1;
  var $p169: ref;
  var $p170: ref;
  var $i172: i32;
  var $i173: i1;
  var $p174: ref;
  var $p175: ref;
  var $i177: i32;
  var $i178: i1;
  var $p179: ref;
  var $i180: i32;
  var $i182: i32;
  var $i183: i1;
  var $p184: ref;
  var $i185: i32;
  var $i187: i32;
  var $i188: i1;
  var $p189: ref;
  var $i190: i32;
  var $i192: i32;
  var $i193: i1;
  var $p194: ref;
  var $i195: i32;
  var $i197: i32;
  var $i198: i1;
  var $p199: ref;
  var $i200: i32;
  var $i202: i32;
  var $i203: i1;
  var $p204: ref;
  var $i206: i32;
  var $i207: i1;
  var $p208: ref;
  var $i210: i32;
  var $i211: i1;
  var $p212: ref;
  var $i214: i32;
  var $i215: i1;
  var $p216: ref;
  var $i218: i32;
  var $i219: i1;
  var $p220: ref;
  var $i222: i32;
  var $i223: i1;
  var $p224: ref;
  var $i226: i32;
  var $i227: i1;
  var $p228: ref;
  var $i230: i32;
  var $i231: i1;
  var $p232: ref;
  var $i234: i32;
  var $i235: i1;
  var $p236: ref;
  var $i238: i32;
  var $i239: i1;
  var $p240: ref;
  var $i242: i32;
  var $i243: i1;
  var $p244: ref;
  var $i245: i32;
  var $i246: i1;
  var $p247: ref;
  var $i248: i32;
  var $i249: i64;
  var $i251: i32;
  var $i252: i1;
  var $p253: ref;
  var $i254: i32;
  var $i255: i64;
  var $i257: i32;
  var $i258: i1;
  var $p259: ref;
  var $i260: i32;
  var $i261: i64;
  var $i263: i32;
  var $i264: i1;
  var $p265: ref;
  var $i266: i32;
  var $i267: i64;
  var $i269: i32;
  var $i270: i1;
  var $p271: ref;
  var $i272: i32;
  var $i273: i64;
  var $i275: i32;
  var $i276: i1;
  var $p277: ref;
  var $i278: i32;
  var $i279: i32;
  var $i280: i32;
  var $i281: i32;
  var $i282: i1;
  var $p283: ref;
  var $i284: i32;
  var $i285: i32;
  var $i286: i32;
  var $i287: i32;
  var $i288: i1;
  var $p289: ref;
  var $i290: i32;
  var $i291: i32;
  var $i292: i32;
  var $i293: i32;
  var $i294: i1;
  var $p295: ref;
  var $i296: i32;
  var $i297: i32;
  var $i298: i32;
  var $i299: i32;
  var $i300: i1;
  var $p301: ref;
  var $i302: i32;
  var $i303: i32;
  var $i304: i32;
  var $i305: i32;
  var $i306: i1;
  var $p307: ref;
  var $i308: i32;
  var $i309: i1;
  var $p310: ref;
  var $i311: i32;
  var $i312: i1;
  var $p313: ref;
  var $i314: i32;
  var $i316: i32;
  var $i317: i1;
  var $p318: ref;
  var $i319: i32;
  var $i321: i32;
  var $i322: i1;
  var $p323: ref;
  var $i324: i32;
  var $i326: i32;
  var $i327: i1;
  var $p328: ref;
  var $i329: i32;
  var $i331: i32;
  var $i332: i1;
  var $p333: ref;
  var $i334: i32;
  var $i336: i32;
  var $i337: i1;
  var $i338: i32;
  var $i339: i32;
  var $i340: i1;
  var $i341: i32;
  var $i342: i1;
  var vslice_dummy_var_49: ref;
  var vslice_dummy_var_50: ref;
  var vslice_dummy_var_51: ref;
  var vslice_dummy_var_52: ref;
  var vslice_dummy_var_53: ref;
  var vslice_dummy_var_54: ref;
  var vslice_dummy_var_55: ref;
  var vslice_dummy_var_56: ref;
  var vslice_dummy_var_57: ref;
  var vslice_dummy_var_58: i32;
  var vslice_dummy_var_59: i32;
  var vslice_dummy_var_60: i32;
  var vslice_dummy_var_61: i32;
  var vslice_dummy_var_62: i32;
  var vslice_dummy_var_63: i32;
  var vslice_dummy_var_64: i32;
  var vslice_dummy_var_65: i32;
  var vslice_dummy_var_66: i32;
  var vslice_dummy_var_67: i32;
  var vslice_dummy_var_68: i32;
  var vslice_dummy_var_69: i32;
  var vslice_dummy_var_70: i32;
  var vslice_dummy_var_71: i32;
  var vslice_dummy_var_72: i32;
  var vslice_dummy_var_73: i32;
  var vslice_dummy_var_74: i32;
  var vslice_dummy_var_75: i32;
  var vslice_dummy_var_76: i32;
  var vslice_dummy_var_77: i32;
  var vslice_dummy_var_78: i32;
  var vslice_dummy_var_79: i32;
  var vslice_dummy_var_80: i32;
  var vslice_dummy_var_81: i32;
  var vslice_dummy_var_82: i32;
  var vslice_dummy_var_83: i32;
  var vslice_dummy_var_84: i32;
  var vslice_dummy_var_85: i32;
  var vslice_dummy_var_86: i32;
  var vslice_dummy_var_87: i32;
  var vslice_dummy_var_88: i32;
  var vslice_dummy_var_89: i32;
  var vslice_dummy_var_90: i32;
  var vslice_dummy_var_91: i32;
  var vslice_dummy_var_92: i32;

  $bb0:
    call {:si_unique_call 820} $initialize();
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 821} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    assume {:verifier.code 0} true;
    call {:si_unique_call 822} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 823} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 824} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 825} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 826} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} $p5 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 828} $p6 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} $p7 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 830} $p8 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 831} $p9 := ldv_init_zalloc(368);
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 832} $p11 := ldv_init_zalloc(368);
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} $p13 := ldv_init_zalloc(1);
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 834} $p14 := ldv_init_zalloc(8);
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} $p16 := ldv_init_zalloc(368);
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 836} $p18 := ldv_init_zalloc(8);
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 837} $p20 := ldv_init_zalloc(8);
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 838} $p22 := ldv_init_zalloc(8);
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 839} $p24 := ldv_init_zalloc(1);
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 840} $p25 := ldv_init_zalloc(8);
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 841} $p27 := ldv_init_zalloc(8);
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 842} $p29 := ldv_init_zalloc(368);
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} ldv_initialize();
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p0);
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 844} vslice_dummy_var_49 := ldv_memset($p31, 0, 4);
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p1);
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 845} vslice_dummy_var_50 := ldv_memset($p33, 0, 8);
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p2);
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 846} vslice_dummy_var_51 := ldv_memset($p35, 0, 4);
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p3);
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 847} vslice_dummy_var_52 := ldv_memset($p37, 0, 4);
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p4);
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 848} vslice_dummy_var_53 := ldv_memset($p39, 0, 4);
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p5);
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} vslice_dummy_var_54 := ldv_memset($p41, 0, 4);
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p6);
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 850} vslice_dummy_var_55 := ldv_memset($p43, 0, 4);
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p7);
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 851} vslice_dummy_var_56 := ldv_memset($p45, 0, 8);
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p8);
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 852} vslice_dummy_var_57 := ldv_memset($p47, 0, 4);
    goto corral_source_split_4067;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 853} work_init_1();
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 854} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    $M.38 := 0;
    call {:si_unique_call 855} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    $M.39 := 1;
    call {:si_unique_call 856} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    $M.40 := 0;
    call {:si_unique_call 857} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 858} work_init_2();
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 859} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $p95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $p104, $i106, $i107, $p108, $i110, $i111, $p112, $i114, $i115, $p116, $i118, $i119, $p120, $i122, $i123, $p124, $i125, $i126, $i127, $i128, $p129, $i130, $i131, $i132, $i133, $p134, $i135, $i136, $i137, $i138, $p139, $i140, $i141, $i142, $i143, $i144, $i145, $i146, $i147, $i148, $i149, $i150, $i151, $i152, $i153, $p154, $p155, $i157, $i158, $p159, $p160, $i162, $i163, $p164, $p165, $i167, $i168, $p169, $p170, $i172, $i173, $p174, $p175, $i177, $i178, $p179, $i180, $i182, $i183, $p184, $i185, $i187, $i188, $p189, $i190, $i192, $i193, $p194, $i195, $i197, $i198, $p199, $i200, $i202, $i203, $p204, $i206, $i207, $p208, $i210, $i211, $p212, $i214, $i215, $p216, $i218, $i219, $p220, $i222, $i223, $p224, $i226, $i227, $p228, $i230, $i231, $p232, $i234, $i235, $p236, $i238, $i239, $p240, $i242, $i243, $p244, $i245, $i246, $p247, $i248, $i249, $i251, $i252, $p253, $i254, $i255, $i257, $i258, $p259, $i260, $i261, $i263, $i264, $p265, $i266, $i267, $i269, $i270, $p271, $i272, $i273, $i275, $i276, $p277, $i278, $i279, $i280, $i281, $i282, $p283, $i284, $i285, $i286, $i287, $i288, $p289, $i290, $i291, $i292, $i293, $i294, $p295, $i296, $i297, $i298, $i299, $i300, $p301, $i302, $i303, $i304, $i305, $i306, $p307, $i308, $i309, $p310, $i311, $i312, $p313, $i314, $i316, $i317, $p318, $i319, $i321, $i322, $p323, $i324, $i326, $i327, $p328, $i329, $i331, $i332, $p333, $i334, $i336, $i337, $i338, $i339, $i340, $i341, $i342, vslice_dummy_var_58, vslice_dummy_var_59, vslice_dummy_var_60, vslice_dummy_var_61, vslice_dummy_var_62, vslice_dummy_var_63, vslice_dummy_var_64, vslice_dummy_var_65, vslice_dummy_var_66, vslice_dummy_var_67, vslice_dummy_var_68, vslice_dummy_var_69, vslice_dummy_var_70, vslice_dummy_var_71, vslice_dummy_var_72, vslice_dummy_var_73, vslice_dummy_var_74, vslice_dummy_var_75, vslice_dummy_var_76, vslice_dummy_var_77, vslice_dummy_var_78, vslice_dummy_var_79, vslice_dummy_var_80, vslice_dummy_var_81, vslice_dummy_var_82, vslice_dummy_var_83, vslice_dummy_var_84, vslice_dummy_var_85, vslice_dummy_var_86, vslice_dummy_var_87, vslice_dummy_var_88, vslice_dummy_var_89, vslice_dummy_var_90, vslice_dummy_var_91, vslice_dummy_var_92 := main_loop_$bb1($p0, $p1, $p2, $p3, $p4, $p5, $p6, $p7, $p8, $p10, $p12, $p13, $p15, $p17, $p19, $p21, $p23, $p24, $p26, $p28, $p30, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $p95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $p104, $i106, $i107, $p108, $i110, $i111, $p112, $i114, $i115, $p116, $i118, $i119, $p120, $i122, $i123, $p124, $i125, $i126, $i127, $i128, $p129, $i130, $i131, $i132, $i133, $p134, $i135, $i136, $i137, $i138, $p139, $i140, $i141, $i142, $i143, $i144, $i145, $i146, $i147, $i148, $i149, $i150, $i151, $i152, $i153, $p154, $p155, $i157, $i158, $p159, $p160, $i162, $i163, $p164, $p165, $i167, $i168, $p169, $p170, $i172, $i173, $p174, $p175, $i177, $i178, $p179, $i180, $i182, $i183, $p184, $i185, $i187, $i188, $p189, $i190, $i192, $i193, $p194, $i195, $i197, $i198, $p199, $i200, $i202, $i203, $p204, $i206, $i207, $p208, $i210, $i211, $p212, $i214, $i215, $p216, $i218, $i219, $p220, $i222, $i223, $p224, $i226, $i227, $p228, $i230, $i231, $p232, $i234, $i235, $p236, $i238, $i239, $p240, $i242, $i243, $p244, $i245, $i246, $p247, $i248, $i249, $i251, $i252, $p253, $i254, $i255, $i257, $i258, $p259, $i260, $i261, $i263, $i264, $p265, $i266, $i267, $i269, $i270, $p271, $i272, $i273, $i275, $i276, $p277, $i278, $i279, $i280, $i281, $i282, $p283, $i284, $i285, $i286, $i287, $i288, $p289, $i290, $i291, $i292, $i293, $i294, $p295, $i296, $i297, $i298, $i299, $i300, $p301, $i302, $i303, $i304, $i305, $i306, $p307, $i308, $i309, $p310, $i311, $i312, $p313, $i314, $i316, $i317, $p318, $i319, $i321, $i322, $p323, $i324, $i326, $i327, $p328, $i329, $i331, $i332, $p333, $i334, $i336, $i337, $i338, $i339, $i340, $i341, $i342, vslice_dummy_var_58, vslice_dummy_var_59, vslice_dummy_var_60, vslice_dummy_var_61, vslice_dummy_var_62, vslice_dummy_var_63, vslice_dummy_var_64, vslice_dummy_var_65, vslice_dummy_var_66, vslice_dummy_var_67, vslice_dummy_var_68, vslice_dummy_var_69, vslice_dummy_var_70, vslice_dummy_var_71, vslice_dummy_var_72, vslice_dummy_var_73, vslice_dummy_var_74, vslice_dummy_var_75, vslice_dummy_var_76, vslice_dummy_var_77, vslice_dummy_var_78, vslice_dummy_var_79, vslice_dummy_var_80, vslice_dummy_var_81, vslice_dummy_var_82, vslice_dummy_var_83, vslice_dummy_var_84, vslice_dummy_var_85, vslice_dummy_var_86, vslice_dummy_var_87, vslice_dummy_var_88, vslice_dummy_var_89, vslice_dummy_var_90, vslice_dummy_var_91, vslice_dummy_var_92);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i50 := $slt.i32($i49, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    $i51 := $slt.i32($i49, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i49, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i52 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 997} ldv_stop();
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb260:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb17_dummy;

  $bb7:
    assume $i52 == 1;
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    $i341 := $M.41;
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    $i342 := $ne.i32($i341, 0);
    goto corral_source_split_4082;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb256, $bb257;

  $bb257:
    assume !($i342 == 1);
    assume {:verifier.code 0} true;
    goto $bb258;

  $bb258:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb256:
    assume $i342 == 1;
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 996} invoke_work_2();
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    goto $bb258;

  $bb5:
    assume $i51 == 1;
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    $i74 := $M.40;
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    $i75 := $ne.i32($i74, 0);
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb255;

  $bb255:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb48:
    assume $i75 == 1;
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 1} true;
    call {:si_unique_call 877} $i76 := __VERIFIER_nondet_int();
    call {:si_unique_call 878} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i76);
    call {:si_unique_call 879} {:cexpr "tmp___13"} boogie_si_record_i32($i76);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i77 := $slt.i32($i76, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    $i78 := $slt.i32($i76, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    $i79 := $slt.i32($i76, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    $i80 := $slt.i32($i76, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    $i81 := $eq.i32($i76, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    assume !($i81 == 1);
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 995} ldv_stop();
    goto corral_source_split_4643;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    goto $bb254;

  $bb254:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb255;

  $bb59:
    assume $i81 == 1;
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    $i336 := $M.40;
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    $i337 := $eq.i32($i336, 4);
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb247, $bb248;

  $bb248:
    assume !($i337 == 1);
    assume {:verifier.code 0} true;
    goto $bb252;

  $bb252:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb247:
    assume $i337 == 1;
    goto corral_source_split_4634;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 992} $i338 := ldv_preresume_3();
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    $M.44 := $i338;
    call {:si_unique_call 993} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i338);
    goto corral_source_split_4636;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    $i339 := $M.44;
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    $i340 := $eq.i32($i339, 0);
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb249, $bb250;

  $bb250:
    assume !($i340 == 1);
    assume {:verifier.code 0} true;
    goto $bb251;

  $bb251:
    assume {:verifier.code 0} true;
    goto $bb252;

  $bb249:
    assume $i340 == 1;
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    $M.40 := 5;
    call {:si_unique_call 994} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(5);
    goto corral_source_split_4641;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    goto $bb251;

  $bb57:
    assume $i80 == 1;
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    $i311 := $M.40;
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    $i312 := $eq.i32($i311, 4);
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb232, $bb233;

  $bb233:
    assume !($i312 == 1);
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb234:
    assume {:verifier.code 0} true;
    $i316 := $M.40;
    goto corral_source_split_4598;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    $i317 := $eq.i32($i316, 1);
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb235, $bb236;

  $bb236:
    assume !($i317 == 1);
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb237:
    assume {:verifier.code 0} true;
    $i321 := $M.40;
    goto corral_source_split_4607;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    $i322 := $eq.i32($i321, 3);
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb238, $bb239;

  $bb239:
    assume !($i322 == 1);
    assume {:verifier.code 0} true;
    goto $bb240;

  $bb240:
    assume {:verifier.code 0} true;
    $i326 := $M.40;
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    $i327 := $eq.i32($i326, 2);
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb241, $bb242;

  $bb242:
    assume !($i327 == 1);
    assume {:verifier.code 0} true;
    goto $bb243;

  $bb243:
    assume {:verifier.code 0} true;
    $i331 := $M.40;
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    $i332 := $eq.i32($i331, 5);
    goto corral_source_split_4626;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb244, $bb245;

  $bb245:
    assume !($i332 == 1);
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb246:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb244:
    assume $i332 == 1;
    goto corral_source_split_4628;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    $p333 := $M.35;
    goto corral_source_split_4629;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    $i334 := $load.i32($M.0, $p3);
    goto corral_source_split_4630;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 990} vslice_dummy_var_92 := multipath_end_io($p333, $p30, $i334, $p23);
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    $M.40 := 5;
    call {:si_unique_call 991} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(5);
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb241:
    assume $i327 == 1;
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    $p328 := $M.35;
    goto corral_source_split_4620;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    $i329 := $load.i32($M.0, $p3);
    goto corral_source_split_4621;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 988} vslice_dummy_var_91 := multipath_end_io($p328, $p30, $i329, $p23);
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    $M.40 := 2;
    call {:si_unique_call 989} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4623;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    goto $bb243;

  $bb238:
    assume $i322 == 1;
    goto corral_source_split_4610;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    $p323 := $M.35;
    goto corral_source_split_4611;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    $i324 := $load.i32($M.0, $p3);
    goto corral_source_split_4612;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 986} vslice_dummy_var_90 := multipath_end_io($p323, $p30, $i324, $p23);
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    $M.40 := 3;
    call {:si_unique_call 987} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    goto $bb240;

  $bb235:
    assume $i317 == 1;
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    $p318 := $M.35;
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    $i319 := $load.i32($M.0, $p3);
    goto corral_source_split_4603;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 984} vslice_dummy_var_89 := multipath_end_io($p318, $p30, $i319, $p23);
    goto corral_source_split_4604;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    $M.40 := 1;
    call {:si_unique_call 985} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4605;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb232:
    assume $i312 == 1;
    goto corral_source_split_4592;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    $p313 := $M.35;
    goto corral_source_split_4593;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    $i314 := $load.i32($M.0, $p3);
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 982} vslice_dummy_var_88 := multipath_end_io($p313, $p30, $i314, $p23);
    goto corral_source_split_4595;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    $M.40 := 4;
    call {:si_unique_call 983} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb55:
    assume $i79 == 1;
    assume {:verifier.code 0} true;
    $i82 := $slt.i32($i76, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i82 == 1);
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    $i308 := $M.40;
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    $i309 := $eq.i32($i308, 5);
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb229, $bb230;

  $bb230:
    assume !($i309 == 1);
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb231:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb229:
    assume $i309 == 1;
    goto corral_source_split_4587;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    $p310 := $M.35;
    goto corral_source_split_4588;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 980} multipath_resume($p310);
    goto corral_source_split_4589;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    $M.40 := 2;
    call {:si_unique_call 981} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4590;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb62:
    assume $i82 == 1;
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    $i305 := $M.40;
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    $i306 := $eq.i32($i305, 2);
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb226, $bb227;

  $bb227:
    assume !($i306 == 1);
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb228:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb226:
    assume $i306 == 1;
    goto corral_source_split_4582;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    $p307 := $M.35;
    goto corral_source_split_4583;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 978} multipath_presuspend($p307);
    goto corral_source_split_4584;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    $M.40 := 3;
    call {:si_unique_call 979} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb53:
    assume $i78 == 1;
    assume {:verifier.code 0} true;
    $i83 := $slt.i32($i76, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    $i84 := $slt.i32($i76, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i84 == 1);
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    $i275 := $M.40;
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    $i276 := $eq.i32($i275, 4);
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb211, $bb212;

  $bb212:
    assume !($i276 == 1);
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb213:
    assume {:verifier.code 0} true;
    $i281 := $M.40;
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    $i282 := $eq.i32($i281, 1);
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb214, $bb215;

  $bb215:
    assume !($i282 == 1);
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb216:
    assume {:verifier.code 0} true;
    $i287 := $M.40;
    goto corral_source_split_4549;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    $i288 := $eq.i32($i287, 3);
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb217, $bb218;

  $bb218:
    assume !($i288 == 1);
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb219:
    assume {:verifier.code 0} true;
    $i293 := $M.40;
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    $i294 := $eq.i32($i293, 2);
    goto corral_source_split_4561;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb220, $bb221;

  $bb221:
    assume !($i294 == 1);
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb222:
    assume {:verifier.code 0} true;
    $i299 := $M.40;
    goto corral_source_split_4571;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    $i300 := $eq.i32($i299, 5);
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb223, $bb224;

  $bb224:
    assume !($i300 == 1);
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb225:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb223:
    assume $i300 == 1;
    goto corral_source_split_4574;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    $p301 := $M.35;
    goto corral_source_split_4575;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    $i302 := $load.i32($M.0, $p4);
    goto corral_source_split_4576;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    $i303 := $load.i32($M.0, $p8);
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    $i304 := $load.i32($M.0, $p5);
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 976} multipath_status($p301, $i302, $i303, $p13, $i304);
    goto corral_source_split_4579;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    $M.40 := 5;
    call {:si_unique_call 977} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(5);
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb220:
    assume $i294 == 1;
    goto corral_source_split_4563;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    $p295 := $M.35;
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    $i296 := $load.i32($M.0, $p4);
    goto corral_source_split_4565;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    $i297 := $load.i32($M.0, $p8);
    goto corral_source_split_4566;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    $i298 := $load.i32($M.0, $p5);
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 974} multipath_status($p295, $i296, $i297, $p13, $i298);
    goto corral_source_split_4568;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    $M.40 := 2;
    call {:si_unique_call 975} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4569;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb217:
    assume $i288 == 1;
    goto corral_source_split_4552;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    $p289 := $M.35;
    goto corral_source_split_4553;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    $i290 := $load.i32($M.0, $p4);
    goto corral_source_split_4554;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    $i291 := $load.i32($M.0, $p8);
    goto corral_source_split_4555;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    $i292 := $load.i32($M.0, $p5);
    goto corral_source_split_4556;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 972} multipath_status($p289, $i290, $i291, $p13, $i292);
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    $M.40 := 3;
    call {:si_unique_call 973} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_4558;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb214:
    assume $i282 == 1;
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    $p283 := $M.35;
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    $i284 := $load.i32($M.0, $p4);
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    $i285 := $load.i32($M.0, $p8);
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    $i286 := $load.i32($M.0, $p5);
    goto corral_source_split_4545;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 970} multipath_status($p283, $i284, $i285, $p13, $i286);
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    $M.40 := 1;
    call {:si_unique_call 971} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb211:
    assume $i276 == 1;
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    $p277 := $M.35;
    goto corral_source_split_4531;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    $i278 := $load.i32($M.0, $p4);
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    $i279 := $load.i32($M.0, $p8);
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    $i280 := $load.i32($M.0, $p5);
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 968} multipath_status($p277, $i278, $i279, $p13, $i280);
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    $M.40 := 4;
    call {:si_unique_call 969} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb66:
    assume $i84 == 1;
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    $i245 := $M.40;
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    $i246 := $eq.i32($i245, 4);
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb196, $bb197;

  $bb197:
    assume !($i246 == 1);
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    $i251 := $M.40;
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    $i252 := $eq.i32($i251, 1);
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb199, $bb200;

  $bb200:
    assume !($i252 == 1);
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    $i257 := $M.40;
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    $i258 := $eq.i32($i257, 3);
    goto corral_source_split_4501;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb202, $bb203;

  $bb203:
    assume !($i258 == 1);
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb204:
    assume {:verifier.code 0} true;
    $i263 := $M.40;
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    $i264 := $eq.i32($i263, 2);
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb205, $bb206;

  $bb206:
    assume !($i264 == 1);
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb207:
    assume {:verifier.code 0} true;
    $i269 := $M.40;
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    $i270 := $eq.i32($i269, 5);
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb208, $bb209;

  $bb209:
    assume !($i270 == 1);
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb210:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb208:
    assume $i270 == 1;
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    $p271 := $M.35;
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    $i272 := $load.i32($M.0, $p2);
    goto corral_source_split_4525;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    $i273 := $load.i64($M.0, $p1);
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 966} vslice_dummy_var_87 := multipath_ioctl($p271, $i272, $i273);
    goto corral_source_split_4527;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    $M.40 := 5;
    call {:si_unique_call 967} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(5);
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb205:
    assume $i264 == 1;
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    $p265 := $M.35;
    goto corral_source_split_4514;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    $i266 := $load.i32($M.0, $p2);
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    $i267 := $load.i64($M.0, $p1);
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 964} vslice_dummy_var_86 := multipath_ioctl($p265, $i266, $i267);
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    $M.40 := 2;
    call {:si_unique_call 965} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb202:
    assume $i258 == 1;
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    $p259 := $M.35;
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    $i260 := $load.i32($M.0, $p2);
    goto corral_source_split_4505;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    $i261 := $load.i64($M.0, $p1);
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} vslice_dummy_var_85 := multipath_ioctl($p259, $i260, $i261);
    goto corral_source_split_4507;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    $M.40 := 3;
    call {:si_unique_call 963} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb199:
    assume $i252 == 1;
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    $p253 := $M.35;
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    $i254 := $load.i32($M.0, $p2);
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    $i255 := $load.i64($M.0, $p1);
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 960} vslice_dummy_var_84 := multipath_ioctl($p253, $i254, $i255);
    goto corral_source_split_4497;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    $M.40 := 1;
    call {:si_unique_call 961} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb196:
    assume $i246 == 1;
    goto corral_source_split_4483;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    $p247 := $M.35;
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    $i248 := $load.i32($M.0, $p2);
    goto corral_source_split_4485;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    $i249 := $load.i64($M.0, $p1);
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 958} vslice_dummy_var_83 := multipath_ioctl($p247, $i248, $i249);
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    $M.40 := 4;
    call {:si_unique_call 959} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb64:
    assume $i83 == 1;
    assume {:verifier.code 0} true;
    $i85 := $slt.i32($i76, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i85 == 1);
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    $i242 := $M.40;
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    $i243 := $eq.i32($i242, 3);
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb193, $bb194;

  $bb194:
    assume !($i243 == 1);
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb195:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb193:
    assume $i243 == 1;
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    $p244 := $M.35;
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 956} multipath_postsuspend($p244);
    goto corral_source_split_4480;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    $M.40 := 4;
    call {:si_unique_call 957} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_4481;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb68:
    assume $i85 == 1;
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    $i222 := $M.40;
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    $i223 := $eq.i32($i222, 4);
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb178, $bb179;

  $bb179:
    assume !($i223 == 1);
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    $i226 := $M.40;
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    $i227 := $eq.i32($i226, 1);
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb181, $bb182;

  $bb182:
    assume !($i227 == 1);
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb183:
    assume {:verifier.code 0} true;
    $i230 := $M.40;
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    $i231 := $eq.i32($i230, 3);
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb184, $bb185;

  $bb185:
    assume !($i231 == 1);
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    $i234 := $M.40;
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    $i235 := $eq.i32($i234, 2);
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb187, $bb188;

  $bb188:
    assume !($i235 == 1);
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb189:
    assume {:verifier.code 0} true;
    $i238 := $M.40;
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    $i239 := $eq.i32($i238, 5);
    goto corral_source_split_4471;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb190, $bb191;

  $bb191:
    assume !($i239 == 1);
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb192:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb190:
    assume $i239 == 1;
    goto corral_source_split_4473;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    $p240 := $M.35;
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 954} vslice_dummy_var_82 := multipath_clone_and_map($p240, $p12, $p19, $p21);
    goto corral_source_split_4475;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    $M.40 := 5;
    call {:si_unique_call 955} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(5);
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb187:
    assume $i235 == 1;
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    $p236 := $M.35;
    goto corral_source_split_4466;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 952} vslice_dummy_var_81 := multipath_clone_and_map($p236, $p12, $p19, $p21);
    goto corral_source_split_4467;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    $M.40 := 2;
    call {:si_unique_call 953} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb184:
    assume $i231 == 1;
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    $p232 := $M.35;
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 950} vslice_dummy_var_80 := multipath_clone_and_map($p232, $p12, $p19, $p21);
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    $M.40 := 3;
    call {:si_unique_call 951} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb181:
    assume $i227 == 1;
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    $p228 := $M.35;
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 948} vslice_dummy_var_79 := multipath_clone_and_map($p228, $p12, $p19, $p21);
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    $M.40 := 1;
    call {:si_unique_call 949} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb178:
    assume $i223 == 1;
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    $p224 := $M.35;
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 946} vslice_dummy_var_78 := multipath_clone_and_map($p224, $p12, $p19, $p21);
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    $M.40 := 4;
    call {:si_unique_call 947} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb51:
    assume $i77 == 1;
    assume {:verifier.code 0} true;
    $i86 := $slt.i32($i76, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    $i87 := $slt.i32($i76, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    $i88 := $slt.i32($i76, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i88 == 1);
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    $i202 := $M.40;
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    $i203 := $eq.i32($i202, 4);
    goto corral_source_split_4174;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb163, $bb164;

  $bb164:
    assume !($i203 == 1);
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    $i206 := $M.40;
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    $i207 := $eq.i32($i206, 1);
    goto corral_source_split_4410;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb166, $bb167;

  $bb167:
    assume !($i207 == 1);
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    $i210 := $M.40;
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    $i211 := $eq.i32($i210, 3);
    goto corral_source_split_4418;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb169, $bb170;

  $bb170:
    assume !($i211 == 1);
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    $i214 := $M.40;
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    $i215 := $eq.i32($i214, 2);
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb172, $bb173;

  $bb173:
    assume !($i215 == 1);
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    $i218 := $M.40;
    goto corral_source_split_4433;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    $i219 := $eq.i32($i218, 5);
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb175, $bb176;

  $bb176:
    assume !($i219 == 1);
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb175:
    assume $i219 == 1;
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    $p220 := $M.35;
    goto corral_source_split_4437;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 944} vslice_dummy_var_77 := multipath_map($p220, $p17, $p15);
    goto corral_source_split_4438;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    $M.40 := 5;
    call {:si_unique_call 945} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(5);
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb172:
    assume $i215 == 1;
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    $p216 := $M.35;
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 942} vslice_dummy_var_76 := multipath_map($p216, $p17, $p15);
    goto corral_source_split_4430;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    $M.40 := 2;
    call {:si_unique_call 943} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb169:
    assume $i211 == 1;
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    $p212 := $M.35;
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 940} vslice_dummy_var_75 := multipath_map($p212, $p17, $p15);
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    $M.40 := 3;
    call {:si_unique_call 941} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb166:
    assume $i207 == 1;
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    $p208 := $M.35;
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} vslice_dummy_var_74 := multipath_map($p208, $p17, $p15);
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    $M.40 := 1;
    call {:si_unique_call 939} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4415;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb163:
    assume $i203 == 1;
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    $p204 := $M.35;
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 936} vslice_dummy_var_73 := multipath_map($p204, $p17, $p15);
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    $M.40 := 4;
    call {:si_unique_call 937} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_4407;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb74:
    assume $i88 == 1;
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    $i177 := $M.40;
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    $i178 := $eq.i32($i177, 4);
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb148, $bb149;

  $bb149:
    assume !($i178 == 1);
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    $i182 := $M.40;
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    $i183 := $eq.i32($i182, 1);
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb151, $bb152;

  $bb152:
    assume !($i183 == 1);
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    $i187 := $M.40;
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    $i188 := $eq.i32($i187, 3);
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb154, $bb155;

  $bb155:
    assume !($i188 == 1);
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    $i192 := $M.40;
    goto corral_source_split_4386;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    $i193 := $eq.i32($i192, 2);
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb157, $bb158;

  $bb158:
    assume !($i193 == 1);
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    $i197 := $M.40;
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    $i198 := $eq.i32($i197, 5);
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb160, $bb161;

  $bb161:
    assume !($i198 == 1);
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb160:
    assume $i198 == 1;
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    $p199 := $M.35;
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    $i200 := $load.i32($M.0, $p6);
    goto corral_source_split_4400;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 934} vslice_dummy_var_72 := multipath_message($p199, $i200, $p26);
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    $M.40 := 5;
    call {:si_unique_call 935} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(5);
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb157:
    assume $i193 == 1;
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    $p194 := $M.35;
    goto corral_source_split_4390;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    $i195 := $load.i32($M.0, $p6);
    goto corral_source_split_4391;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 932} vslice_dummy_var_71 := multipath_message($p194, $i195, $p26);
    goto corral_source_split_4392;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    $M.40 := 2;
    call {:si_unique_call 933} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb154:
    assume $i188 == 1;
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    $p189 := $M.35;
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    $i190 := $load.i32($M.0, $p6);
    goto corral_source_split_4382;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 930} vslice_dummy_var_70 := multipath_message($p189, $i190, $p26);
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    $M.40 := 3;
    call {:si_unique_call 931} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb151:
    assume $i183 == 1;
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    $p184 := $M.35;
    goto corral_source_split_4372;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    $i185 := $load.i32($M.0, $p6);
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 928} vslice_dummy_var_69 := multipath_message($p184, $i185, $p26);
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    $M.40 := 1;
    call {:si_unique_call 929} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4375;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb148:
    assume $i178 == 1;
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    $p179 := $M.35;
    goto corral_source_split_4363;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    $i180 := $load.i32($M.0, $p6);
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 926} vslice_dummy_var_68 := multipath_message($p179, $i180, $p26);
    goto corral_source_split_4365;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    $M.40 := 4;
    call {:si_unique_call 927} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb72:
    assume $i87 == 1;
    assume {:verifier.code 0} true;
    $i89 := $slt.i32($i76, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i89 == 1);
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    $i152 := $M.40;
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    $i153 := $eq.i32($i152, 4);
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb133, $bb134;

  $bb134:
    assume !($i153 == 1);
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    $i157 := $M.40;
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    $i158 := $eq.i32($i157, 1);
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb136, $bb137;

  $bb137:
    assume !($i158 == 1);
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    $i162 := $M.40;
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    $i163 := $eq.i32($i162, 3);
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb139, $bb140;

  $bb140:
    assume !($i163 == 1);
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    $i167 := $M.40;
    goto corral_source_split_4344;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    $i168 := $eq.i32($i167, 2);
    goto corral_source_split_4345;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb142, $bb143;

  $bb143:
    assume !($i168 == 1);
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    $i172 := $M.40;
    goto corral_source_split_4353;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    $i173 := $eq.i32($i172, 5);
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb145, $bb146;

  $bb146:
    assume !($i173 == 1);
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb145:
    assume $i173 == 1;
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    $p174 := $M.35;
    goto corral_source_split_4357;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    $p175 := $load.ref($M.0, $p7);
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 924} vslice_dummy_var_67 := multipath_iterate_devices($p174, $p175, $p24);
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    $M.40 := 5;
    call {:si_unique_call 925} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(5);
    goto corral_source_split_4360;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb142:
    assume $i168 == 1;
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    $p169 := $M.35;
    goto corral_source_split_4348;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    $p170 := $load.ref($M.0, $p7);
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 922} vslice_dummy_var_66 := multipath_iterate_devices($p169, $p170, $p24);
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    $M.40 := 2;
    call {:si_unique_call 923} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb139:
    assume $i163 == 1;
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    $p164 := $M.35;
    goto corral_source_split_4339;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    $p165 := $load.ref($M.0, $p7);
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 920} vslice_dummy_var_65 := multipath_iterate_devices($p164, $p165, $p24);
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    $M.40 := 3;
    call {:si_unique_call 921} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb136:
    assume $i158 == 1;
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    $p159 := $M.35;
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    $p160 := $load.ref($M.0, $p7);
    goto corral_source_split_4331;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 918} vslice_dummy_var_64 := multipath_iterate_devices($p159, $p160, $p24);
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    $M.40 := 1;
    call {:si_unique_call 919} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb133:
    assume $i153 == 1;
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    $p154 := $M.35;
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    $p155 := $load.ref($M.0, $p7);
    goto corral_source_split_4322;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 916} vslice_dummy_var_63 := multipath_iterate_devices($p154, $p155, $p24);
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    $M.40 := 4;
    call {:si_unique_call 917} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb76:
    assume $i89 == 1;
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    $i142 := $M.40;
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    $i143 := $eq.i32($i142, 4);
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb118, $bb119;

  $bb119:
    assume !($i143 == 1);
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    $i144 := $M.40;
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    $i145 := $eq.i32($i144, 1);
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb121, $bb122;

  $bb122:
    assume !($i145 == 1);
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    $i146 := $M.40;
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    $i147 := $eq.i32($i146, 3);
    goto corral_source_split_4300;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  $bb125:
    assume !($i147 == 1);
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    $i148 := $M.40;
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    $i149 := $eq.i32($i148, 2);
    goto corral_source_split_4307;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb127, $bb128;

  $bb128:
    assume !($i149 == 1);
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    $i150 := $M.40;
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    $i151 := $eq.i32($i150, 5);
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  $bb131:
    assume !($i151 == 1);
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb130:
    assume $i151 == 1;
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} multipath_release_clone($p10);
    goto corral_source_split_4317;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    $M.40 := 5;
    call {:si_unique_call 915} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(5);
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb127:
    assume $i149 == 1;
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 912} multipath_release_clone($p10);
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    $M.40 := 2;
    call {:si_unique_call 913} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4311;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb124:
    assume $i147 == 1;
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 910} multipath_release_clone($p10);
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    $M.40 := 3;
    call {:si_unique_call 911} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb121:
    assume $i145 == 1;
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 908} multipath_release_clone($p10);
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    $M.40 := 1;
    call {:si_unique_call 909} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb118:
    assume $i143 == 1;
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 906} multipath_release_clone($p10);
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    $M.40 := 4;
    call {:si_unique_call 907} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb70:
    assume $i86 == 1;
    assume {:verifier.code 0} true;
    $i90 := $slt.i32($i76, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    $i91 := $slt.i32($i76, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i91 == 1);
    goto corral_source_split_4188;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    $i122 := $M.40;
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    $i123 := $eq.i32($i122, 4);
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb107;

  $bb107:
    assume !($i123 == 1);
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    $i127 := $M.40;
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    $i128 := $eq.i32($i127, 3);
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb109, $bb110;

  $bb110:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    $i132 := $M.40;
    goto corral_source_split_4266;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    $i133 := $eq.i32($i132, 2);
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  $bb113:
    assume !($i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    $i137 := $M.40;
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    $i138 := $eq.i32($i137, 5);
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb115, $bb116;

  $bb116:
    assume !($i138 == 1);
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb115:
    assume $i138 == 1;
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    $p139 := $M.35;
    goto corral_source_split_4281;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 903} multipath_dtr($p139);
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    $M.40 := 1;
    call {:si_unique_call 904} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4283;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    $i140 := $M.38;
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    $i141 := $sub.i32($i140, 1);
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    $M.38 := $i141;
    call {:si_unique_call 905} {:cexpr "ref_cnt"} boogie_si_record_i32($i141);
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    goto $bb117;

  SeqInstr_61:
    assume !assertsPassed;
    return;

  $bb112:
    assume $i133 == 1;
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    $p134 := $M.35;
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} multipath_dtr($p134);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    goto corral_source_split_4271;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    $M.40 := 1;
    call {:si_unique_call 901} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4272;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    $i135 := $M.38;
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    $i136 := $sub.i32($i135, 1);
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    $M.38 := $i136;
    call {:si_unique_call 902} {:cexpr "ref_cnt"} boogie_si_record_i32($i136);
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    goto $bb114;

  SeqInstr_58:
    assume !assertsPassed;
    return;

  $bb109:
    assume $i128 == 1;
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    $p129 := $M.35;
    goto corral_source_split_4259;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 897} multipath_dtr($p129);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    goto corral_source_split_4260;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    $M.40 := 1;
    call {:si_unique_call 898} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    $i130 := $M.38;
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    $i131 := $sub.i32($i130, 1);
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    $M.38 := $i131;
    call {:si_unique_call 899} {:cexpr "ref_cnt"} boogie_si_record_i32($i131);
    goto corral_source_split_4264;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    goto $bb111;

  SeqInstr_55:
    assume !assertsPassed;
    return;

  $bb106:
    assume $i123 == 1;
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    $p124 := $M.35;
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 894} multipath_dtr($p124);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    $M.40 := 1;
    call {:si_unique_call 895} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4250;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    $i125 := $M.38;
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    $i126 := $sub.i32($i125, 1);
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    $M.38 := $i126;
    call {:si_unique_call 896} {:cexpr "ref_cnt"} boogie_si_record_i32($i126);
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    goto $bb108;

  SeqInstr_52:
    assume !assertsPassed;
    return;

  $bb80:
    assume $i91 == 1;
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    $i102 := $M.40;
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    $i103 := $eq.i32($i102, 4);
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    $i106 := $M.40;
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    $i107 := $eq.i32($i106, 1);
    goto corral_source_split_4216;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  $bb95:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    $i110 := $M.40;
    goto corral_source_split_4223;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    $i111 := $eq.i32($i110, 3);
    goto corral_source_split_4224;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    $i114 := $M.40;
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    $i115 := $eq.i32($i114, 2);
    goto corral_source_split_4232;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    $i118 := $M.40;
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    $i119 := $eq.i32($i118, 5);
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb103:
    assume $i119 == 1;
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    $p120 := $M.35;
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 892} vslice_dummy_var_62 := multipath_busy($p120);
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    $M.40 := 5;
    call {:si_unique_call 893} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(5);
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb100:
    assume $i115 == 1;
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    $p116 := $M.35;
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} vslice_dummy_var_61 := multipath_busy($p116);
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    $M.40 := 2;
    call {:si_unique_call 891} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb97:
    assume $i111 == 1;
    goto corral_source_split_4226;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    $p112 := $M.35;
    goto corral_source_split_4227;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 888} vslice_dummy_var_60 := multipath_busy($p112);
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    $M.40 := 3;
    call {:si_unique_call 889} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb94:
    assume $i107 == 1;
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    $p108 := $M.35;
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 886} vslice_dummy_var_59 := multipath_busy($p108);
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    $M.40 := 1;
    call {:si_unique_call 887} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4221;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb91:
    assume $i103 == 1;
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    $p104 := $M.35;
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 884} vslice_dummy_var_58 := multipath_busy($p104);
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    $M.40 := 4;
    call {:si_unique_call 885} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_4213;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb78:
    assume $i90 == 1;
    assume {:verifier.code 0} true;
    $i92 := $eq.i32($i76, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    assume !($i92 == 1);
    goto $bb61;

  $bb82:
    assume $i92 == 1;
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    $i93 := $M.40;
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    $i94 := $eq.i32($i93, 1);
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb84:
    assume $i94 == 1;
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    $p95 := $M.35;
    goto corral_source_split_4197;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    $i96 := $load.i32($M.0, $p0);
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} $i97 := multipath_ctr($p95, $i96, $p28);
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    $M.43 := $i97;
    call {:si_unique_call 881} {:cexpr "ldv_retval_2"} boogie_si_record_i32($i97);
    goto corral_source_split_4200;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    $i98 := $M.43;
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    $i99 := $eq.i32($i98, 0);
    goto corral_source_split_4202;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb86:
    assume $i99 == 1;
    goto corral_source_split_4204;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    $M.40 := 2;
    call {:si_unique_call 882} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    $i100 := $M.38;
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    $i101 := $add.i32($i100, 1);
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    $M.38 := $i101;
    call {:si_unique_call 883} {:cexpr "ref_cnt"} boogie_si_record_i32($i101);
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    goto $bb88;

  SeqInstr_49:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i50 == 1;
    assume {:verifier.code 0} true;
    $i53 := $slt.i32($i49, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i53 == 1);
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    $i57 := $M.39;
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    $i58 := $ne.i32($i57, 0);
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb18:
    assume $i58 == 1;
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 1} true;
    call {:si_unique_call 864} $i59 := __VERIFIER_nondet_int();
    call {:si_unique_call 865} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i59);
    call {:si_unique_call 866} {:cexpr "tmp___12"} boogie_si_record_i32($i59);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i60 := $slt.i32($i59, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    $i61 := $eq.i32($i59, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i61 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} ldv_stop();
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb23:
    assume $i61 == 1;
    goto corral_source_split_4097;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    $i67 := $M.39;
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    $i68 := $eq.i32($i67, 1);
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb36:
    assume $i68 == 1;
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 870} $i69 := dm_multipath_init();
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    $M.42 := $i69;
    call {:si_unique_call 871} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i69);
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    $i70 := $M.42;
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    $i71 := $eq.i32($i70, 0);
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i72 := $M.42;
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    $i73 := $ne.i32($i72, 0);
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb41:
    assume $i73 == 1;
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    $M.39 := 2;
    call {:si_unique_call 875} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_4130;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 869} ldv_check_final_state();
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_46:
    assume !assertsPassed;
    return;

  $bb38:
    assume $i71 == 1;
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    $M.39 := 3;
    call {:si_unique_call 872} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    $M.40 := 1;
    call {:si_unique_call 873} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 874} ldv_target_type_3();
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb21:
    assume $i60 == 1;
    assume {:verifier.code 0} true;
    $i62 := $eq.i32($i59, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i62 == 1);
    goto $bb25;

  $bb26:
    assume $i62 == 1;
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    $i63 := $M.39;
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    $i64 := $eq.i32($i63, 3);
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i64 == 1);
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb28:
    assume $i64 == 1;
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    $i65 := $M.38;
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    $i66 := $eq.i32($i65, 0);
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i66 == 1);
    goto $bb30;

  $bb31:
    assume $i66 == 1;
    goto corral_source_split_4109;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 867} dm_multipath_exit();
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    $M.39 := 2;
    call {:si_unique_call 868} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb10:
    assume $i53 == 1;
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i49, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i54 == 1);
    goto $bb9;

  $bb12:
    assume $i54 == 1;
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    $i55 := $M.37;
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb14:
    assume $i56 == 1;
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 863} invoke_work_1();
    goto corral_source_split_4093;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb17_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 860} $i49 := __VERIFIER_nondet_int();
    call {:si_unique_call 861} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i49);
    call {:si_unique_call 862} {:cexpr "tmp___11"} boogie_si_record_i32($i49);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 325135);

procedure ldv_initialize();
  free requires assertsPassed;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    return;
}



const dm_multipath_exit: ref;

axiom dm_multipath_exit == $sub.ref(0, 326167);

procedure dm_multipath_exit();
  free requires assertsPassed;
  modifies $M.9, $M.11, $M.13, $M.15, $M.0, $M.10, $M.12, $M.14, $M.16;



implementation dm_multipath_exit()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4652;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    $p0 := $M.8;
    goto corral_source_split_4653;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 998} ldv_destroy_workqueue_30($p0);
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    $p1 := $M.19;
    goto corral_source_split_4655;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 999} ldv_destroy_workqueue_31($p1);
    goto corral_source_split_4656;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1000} dm_unregister_target(multipath_target);
    goto corral_source_split_4657;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    $p2 := $M.28;
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1001} kmem_cache_destroy($p2);
    goto corral_source_split_4659;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    return;
}



const dm_multipath_init: ref;

axiom dm_multipath_init == $sub.ref(0, 327199);

procedure dm_multipath_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.28, $M.19, $M.8, $M.9, $M.11, $M.13, $M.15, $CurrAddr, $M.0, $M.10, $M.12, $M.14, $M.16;



implementation dm_multipath_init() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i7: i32;
  var $i8: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $p25: ref;
  var $i10: i32;
  var $p26: ref;
  var $i6: i32;
  var vslice_dummy_var_93: i32;
  var vslice_dummy_var_94: i32;
  var vslice_dummy_var_95: i32;
  var vslice_dummy_var_96: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1002} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1003} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_4661;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1004} $p2 := kmem_cache_create(.str.7, 16, 8, 0, $0.ref);
    goto corral_source_split_4662;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    $M.28 := $p2;
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    $p3 := $M.28;
    goto corral_source_split_4664;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_4665;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1005} $i7 := dm_register_target(multipath_target);
    call {:si_unique_call 1006} {:cexpr "r"} boogie_si_record_i32($i7);
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i7, 0);
    goto corral_source_split_4673;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1009} $p11 := __alloc_workqueue_key.ref.i32.i32.ref.ref(.str.10, 8, 0, $p0, .str.9);
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    $M.19 := $p11;
    goto corral_source_split_4683;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    $p12 := $M.19;
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_4685;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1012} $p16 := __alloc_workqueue_key.ref.i32.i32.ref.ref(.str.13, 131082, 1, $p1, .str.12);
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    $M.8 := $p16;
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    $p17 := $M.8;
    goto corral_source_split_4695;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    $i19 := $eq.i64($i18, 0);
    goto corral_source_split_4697;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.45, $add.ref($add.ref($add.ref(multipath_target, $mul.ref(0, 216)), $mul.ref(24, 1)), $mul.ref(0, 4)));
    goto corral_source_split_4705;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.45, $add.ref($add.ref($add.ref(multipath_target, $mul.ref(0, 216)), $mul.ref(24, 1)), $mul.ref(1, 4)));
    goto corral_source_split_4706;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.45, $add.ref($add.ref($add.ref(multipath_target, $mul.ref(0, 216)), $mul.ref(24, 1)), $mul.ref(2, 4)));
    goto corral_source_split_4707;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1015} vslice_dummy_var_96 := printk.ref.i32.i32.i32(.str.15, $i21, $i22, $i23);
    goto corral_source_split_4708;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4670;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_4699;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1013} vslice_dummy_var_95 := printk.ref(.str.14);
    goto corral_source_split_4700;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p25 := $M.19;
    goto corral_source_split_4702;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1014} ldv_destroy_workqueue_29($p25);
    goto corral_source_split_4703;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1011} dm_unregister_target(multipath_target);
    goto corral_source_split_4691;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 12);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_4678;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    $p26 := $M.28;
    goto corral_source_split_4679;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1008} kmem_cache_destroy($p26);
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    $i6 := $i10;
    goto $bb3;

  $bb9:
    assume $i14 == 1;
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1010} vslice_dummy_var_94 := printk.ref(.str.11);
    goto corral_source_split_4689;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_4675;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1007} vslice_dummy_var_93 := printk.ref.i32(.str.8, $i7);
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 22);
    goto $bb7;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 12);
    goto $bb3;
}



const ldv_preresume_3: ref;

axiom ldv_preresume_3 == $sub.ref(0, 328231);

procedure ldv_preresume_3() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_preresume_3() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4710;

  corral_source_split_4710:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1016} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1017} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 329263);

procedure ldv_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_final_state()
{
  var $i0: i32;
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4713;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    $i0 := $M.27;
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 1);
    goto corral_source_split_4715;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_4717;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1018} ldv_error();
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    goto corral_source_split_4718;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_64:
    assume !assertsPassed;
    return;
}



const kmem_cache_create: ref;

axiom kmem_cache_create == $sub.ref(0, 330295);

procedure kmem_cache_create($p0: ref, $i1: i64, $i2: i64, $i3: i64, $p4: ref) returns ($r: ref);
  free requires assertsPassed;



implementation kmem_cache_create($p0: ref, $i1: i64, $i2: i64, $i3: i64, $p4: ref) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1019} {:cexpr "kmem_cache_create:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 1020} {:cexpr "kmem_cache_create:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 1021} {:cexpr "kmem_cache_create:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1022} $p5 := external_alloc();
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const dm_register_target: ref;

axiom dm_register_target == $sub.ref(0, 331327);

procedure dm_register_target($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dm_register_target($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4724;

  corral_source_split_4724:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1023} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1024} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __alloc_workqueue_key: ref;

axiom __alloc_workqueue_key == $sub.ref(0, 332359);

procedure __alloc_workqueue_key.ref.i32.i32.ref.ref($p0: ref, $i1: i32, $i2: i32, $p3: ref, $p4: ref) returns ($r: ref);
  free requires assertsPassed;



implementation __alloc_workqueue_key.ref.i32.i32.ref.ref($p0: ref, $i1: i32, $i2: i32, $p3: ref, $p4: ref) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1025} {:cexpr "__alloc_workqueue_key:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1026} {:cexpr "__alloc_workqueue_key:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_4727;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1027} $p5 := external_alloc();
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_4729;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const ldv_destroy_workqueue_29: ref;

axiom ldv_destroy_workqueue_29 == $sub.ref(0, 333391);

procedure ldv_destroy_workqueue_29($p0: ref);
  free requires assertsPassed;
  modifies $M.9, $M.11, $M.13, $M.15, $M.0, $M.10, $M.12, $M.14, $M.16;



implementation ldv_destroy_workqueue_29($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4731;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1028} destroy_workqueue($p0);
    goto corral_source_split_4732;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1029} call_and_disable_all_1(2);
    goto corral_source_split_4733;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    return;
}



const dm_unregister_target: ref;

axiom dm_unregister_target == $sub.ref(0, 334423);

procedure dm_unregister_target($p0: ref);
  free requires assertsPassed;



implementation dm_unregister_target($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    return;
}



const kmem_cache_destroy: ref;

axiom kmem_cache_destroy == $sub.ref(0, 335455);

procedure kmem_cache_destroy($p0: ref);
  free requires assertsPassed;



implementation kmem_cache_destroy($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4737;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    return;
}



const destroy_workqueue: ref;

axiom destroy_workqueue == $sub.ref(0, 336487);

procedure destroy_workqueue($p0: ref);
  free requires assertsPassed;



implementation destroy_workqueue($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4739;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    return;
}



const ldv_destroy_workqueue_30: ref;

axiom ldv_destroy_workqueue_30 == $sub.ref(0, 337519);

procedure ldv_destroy_workqueue_30($p0: ref);
  free requires assertsPassed;
  modifies $M.9, $M.11, $M.13, $M.15, $M.0, $M.10, $M.12, $M.14, $M.16;



implementation ldv_destroy_workqueue_30($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4741;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1030} destroy_workqueue($p0);
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1031} call_and_disable_all_1(2);
    goto corral_source_split_4743;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    return;
}



const ldv_destroy_workqueue_31: ref;

axiom ldv_destroy_workqueue_31 == $sub.ref(0, 338551);

procedure ldv_destroy_workqueue_31($p0: ref);
  free requires assertsPassed;
  modifies $M.9, $M.11, $M.13, $M.15, $M.0, $M.10, $M.12, $M.14, $M.16;



implementation ldv_destroy_workqueue_31($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4745;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1032} destroy_workqueue($p0);
    goto corral_source_split_4746;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1033} call_and_disable_all_1(2);
    goto corral_source_split_4747;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 339583);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1034} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_4749;

  corral_source_split_4749:
    assume {:verifier.code 1} true;
    goto corral_source_split_4750;

  corral_source_split_4750:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_4751;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 340615);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 341647);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 342679);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4753;

  corral_source_split_4753:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_4754;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_67:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 343711);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 344743);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 345775);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 346807);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 347839);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 348871);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 349903);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 350935);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 351967);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 352999);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4756;

  corral_source_split_4756:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1035} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 1036} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1037} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_4757;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_4762;

  corral_source_split_4762:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_4763;

  corral_source_split_4763:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1038} __VERIFIER_assume($i4);
    goto corral_source_split_4764;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_4760;

  corral_source_split_4760:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 354031);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 355063);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 356095);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __VERIFIER_nondet_unsigned_int: ref;

axiom __VERIFIER_nondet_unsigned_int == $sub.ref(0, 357127);

procedure __VERIFIER_nondet_unsigned_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4766;

  corral_source_split_4766:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1039} $i0 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1040} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1041} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1042} $i1 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1043} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 1044} {:cexpr "min"} boogie_si_record_i32($i1);
    goto corral_source_split_4768;

  corral_source_split_4768:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1045} $i2 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1046} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 1047} {:cexpr "max"} boogie_si_record_i32($i2);
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_4775;

  corral_source_split_4775:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_4776;

  corral_source_split_4776:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1048} __VERIFIER_assume($i7);
    goto corral_source_split_4777;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    $i8 := $uge.i32($i0, $i1);
    goto corral_source_split_4778;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_4784;

  corral_source_split_4784:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1049} __VERIFIER_assume($i11);
    goto corral_source_split_4786;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_4782;

  corral_source_split_4782:
    assume {:verifier.code 1} true;
    $i10 := $ule.i32($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    $i5 := $uge.i32($i2, 4294967295);
    goto corral_source_split_4773;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 1} true;
    $i6 := $ule.i32($i2, 4294967295);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 358159);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __VERIFIER_nondet_long: ref;

axiom __VERIFIER_nondet_long == $sub.ref(0, 359191);

procedure __VERIFIER_nondet_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4788;

  corral_source_split_4788:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1050} $i0 := __SMACK_nondet_long();
    call {:si_unique_call 1051} {:cexpr "smack:ext:__SMACK_nondet_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1052} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    $i1 := $sge.i64($i0, $sub.i64(0, 9223372036854775808));
    goto corral_source_split_4790;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_4794;

  corral_source_split_4794:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1053} __VERIFIER_assume($i4);
    goto corral_source_split_4796;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_4792;

  corral_source_split_4792:
    assume {:verifier.code 1} true;
    $i3 := $sle.i64($i0, 9223372036854775807);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 360223);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 361255);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 362287);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 363319);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 364351);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4798;

  corral_source_split_4798:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1054} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1055} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1056} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1057} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1058} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 1059} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_4800;

  corral_source_split_4800:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1060} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1061} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 1062} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_4801;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1063} __VERIFIER_assume($i7);
    goto corral_source_split_4809;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_4816;

  corral_source_split_4816:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_4817;

  corral_source_split_4817:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1064} __VERIFIER_assume($i11);
    goto corral_source_split_4818;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4804;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_4805;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_4812;

  corral_source_split_4812:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 365383);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 366415);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 367447);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 368479);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 369511);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 370543);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 371575);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 372607);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_bool: ref;

axiom __VERIFIER_nondet_bool == $sub.ref(0, 373639);

procedure __VERIFIER_nondet_bool() returns ($r: i1);
  free requires assertsPassed;



implementation __VERIFIER_nondet_bool() returns ($r: i1)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i6: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4820;

  corral_source_split_4820:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1065} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1066} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1067} {:cexpr "x"} boogie_si_record_i8($i2);
    goto corral_source_split_4823;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_4824;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_4825;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_4826;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume {:branchcond $i5} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 1} true;
    $i7 := $trunc.i8.i1($i2);
    goto corral_source_split_4834;

  corral_source_split_4834:
    assume {:verifier.code 1} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_4835;

  corral_source_split_4835:
    assume {:verifier.code 1} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_4828;

  corral_source_split_4828:
    assume {:verifier.code 1} true;
    $i10 := $zext.i1.i32($i6);
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1068} __VERIFIER_assume($i10);
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_4831;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const __VERIFIER_nondet_uint: ref;

axiom __VERIFIER_nondet_uint == $sub.ref(0, 374671);

procedure __VERIFIER_nondet_uint() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_uint() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4838;

  corral_source_split_4838:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1069} $i0 := __VERIFIER_nondet_unsigned_int();
    call {:si_unique_call 1070} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1071} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_4839;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 375703);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1072} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 1073} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1074} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 376735);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1075} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 1076} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_4845;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 377767);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 378799);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1077} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1078} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 379831);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 380863);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 381895);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_13: [ref]i8;
  var cmdloc_dummy_var_14: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1079} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 1080} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1081} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1082} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4851;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_4852;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_4857;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1083} $p6 := malloc($i5);
    goto corral_source_split_4858;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_4859;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_13 := $M.0;
    call {:si_unique_call 1084} cmdloc_dummy_var_14 := $memset.i8(cmdloc_dummy_var_13, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_14;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 382927);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 383959);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.49, $M.28, $M.45, $M.19, $M.8, $M.50, $M.0, $M.43, $M.44, $M.42, $M.32, $M.34, $M.37, $M.9, $M.38, $M.40, $M.33, $M.14, $M.36, $M.13, $M.31, $M.11, $M.41, $M.35, $M.39, $M.15, $M.16, $M.12, $M.10, $M.27, $M.56, $M.57, $M.58;



implementation __SMACK_static_init()
{

  $bb0:
    call {:si_unique_call 1085} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    $M.49 := $store.i8($M.49, __kstrtab_dm_register_path_selector, 100);
    $M.49 := $store.i8($M.49, $add.ref($add.ref(__kstrtab_dm_register_path_selector, $mul.ref(0, 26)), $mul.ref(1, 1)), 109);
    $M.49 := $store.i8($M.49, $add.ref($add.ref(__kstrtab_dm_register_path_selector, $mul.ref(0, 26)), $mul.ref(2, 1)), 95);
    $M.49 := $store.i8($M.49, $add.ref($add.ref(__kstrtab_dm_register_path_selector, $mul.ref(0, 26)), $mul.ref(3, 1)), 114);
    $M.49 := $store.i8($M.49, $add.ref($add.ref(__kstrtab_dm_register_path_selector, $mul.ref(0, 26)), $mul.ref(4, 1)), 101);
    $M.49 := $store.i8($M.49, $add.ref($add.ref(__kstrtab_dm_register_path_selector, $mul.ref(0, 26)), $mul.ref(5, 1)), 103);
    $M.49 := $store.i8($M.49, $add.ref($add.ref(__kstrtab_dm_register_path_selector, $mul.ref(0, 26)), $mul.ref(6, 1)), 105);
    $M.49 := $store.i8($M.49, $add.ref($add.ref(__kstrtab_dm_register_path_selector, $mul.ref(0, 26)), $mul.ref(7, 1)), 115);
    $M.49 := $store.i8($M.49, $add.ref($add.ref(__kstrtab_dm_register_path_selector, $mul.ref(0, 26)), $mul.ref(8, 1)), 116);
    $M.49 := $store.i8($M.49, $add.ref($add.ref(__kstrtab_dm_register_path_selector, $mul.ref(0, 26)), $mul.ref(9, 1)), 101);
    $M.49 := $store.i8($M.49, $add.ref($add.ref(__kstrtab_dm_register_path_selector, $mul.ref(0, 26)), $mul.ref(10, 1)), 114);
    $M.49 := $store.i8($M.49, $add.ref($add.ref(__kstrtab_dm_register_path_selector, $mul.ref(0, 26)), $mul.ref(11, 1)), 95);
    $M.49 := $store.i8($M.49, $add.ref($add.ref(__kstrtab_dm_register_path_selector, $mul.ref(0, 26)), $mul.ref(12, 1)), 112);
    $M.49 := $store.i8($M.49, $add.ref($add.ref(__kstrtab_dm_register_path_selector, $mul.ref(0, 26)), $mul.ref(13, 1)), 97);
    $M.49 := $store.i8($M.49, $add.ref($add.ref(__kstrtab_dm_register_path_selector, $mul.ref(0, 26)), $mul.ref(14, 1)), 116);
    $M.49 := $store.i8($M.49, $add.ref($add.ref(__kstrtab_dm_register_path_selector, $mul.ref(0, 26)), $mul.ref(15, 1)), 104);
    $M.49 := $store.i8($M.49, $add.ref($add.ref(__kstrtab_dm_register_path_selector, $mul.ref(0, 26)), $mul.ref(16, 1)), 95);
    $M.49 := $store.i8($M.49, $add.ref($add.ref(__kstrtab_dm_register_path_selector, $mul.ref(0, 26)), $mul.ref(17, 1)), 115);
    $M.49 := $store.i8($M.49, $add.ref($add.ref(__kstrtab_dm_register_path_selector, $mul.ref(0, 26)), $mul.ref(18, 1)), 101);
    $M.49 := $store.i8($M.49, $add.ref($add.ref(__kstrtab_dm_register_path_selector, $mul.ref(0, 26)), $mul.ref(19, 1)), 108);
    $M.49 := $store.i8($M.49, $add.ref($add.ref(__kstrtab_dm_register_path_selector, $mul.ref(0, 26)), $mul.ref(20, 1)), 101);
    $M.49 := $store.i8($M.49, $add.ref($add.ref(__kstrtab_dm_register_path_selector, $mul.ref(0, 26)), $mul.ref(21, 1)), 99);
    $M.49 := $store.i8($M.49, $add.ref($add.ref(__kstrtab_dm_register_path_selector, $mul.ref(0, 26)), $mul.ref(22, 1)), 116);
    $M.49 := $store.i8($M.49, $add.ref($add.ref(__kstrtab_dm_register_path_selector, $mul.ref(0, 26)), $mul.ref(23, 1)), 111);
    $M.49 := $store.i8($M.49, $add.ref($add.ref(__kstrtab_dm_register_path_selector, $mul.ref(0, 26)), $mul.ref(24, 1)), 114);
    $M.49 := $store.i8($M.49, $add.ref($add.ref(__kstrtab_dm_register_path_selector, $mul.ref(0, 26)), $mul.ref(25, 1)), 0);
    $M.28 := $0.ref;
    $M.45 := $store.i64($M.45, multipath_target, 0);
    $M.45 := $store.ref($M.45, $add.ref($add.ref(multipath_target, $mul.ref(0, 216)), $mul.ref(8, 1)), .str.6);
    $M.45 := $store.ref($M.45, $add.ref($add.ref(multipath_target, $mul.ref(0, 216)), $mul.ref(16, 1)), __this_module);
    $M.45 := $store.i32($M.45, $add.ref($add.ref($add.ref(multipath_target, $mul.ref(0, 216)), $mul.ref(24, 1)), $mul.ref(0, 4)), 1);
    $M.45 := $store.i32($M.45, $add.ref($add.ref($add.ref(multipath_target, $mul.ref(0, 216)), $mul.ref(24, 1)), $mul.ref(1, 4)), 9);
    $M.45 := $store.i32($M.45, $add.ref($add.ref($add.ref(multipath_target, $mul.ref(0, 216)), $mul.ref(24, 1)), $mul.ref(2, 4)), 0);
    $M.45 := $store.ref($M.45, $add.ref($add.ref(multipath_target, $mul.ref(0, 216)), $mul.ref(40, 1)), multipath_ctr);
    $M.45 := $store.ref($M.45, $add.ref($add.ref(multipath_target, $mul.ref(0, 216)), $mul.ref(48, 1)), multipath_dtr);
    $M.45 := $store.ref($M.45, $add.ref($add.ref(multipath_target, $mul.ref(0, 216)), $mul.ref(56, 1)), $0.ref);
    $M.45 := $store.ref($M.45, $add.ref($add.ref(multipath_target, $mul.ref(0, 216)), $mul.ref(64, 1)), multipath_map);
    $M.45 := $store.ref($M.45, $add.ref($add.ref(multipath_target, $mul.ref(0, 216)), $mul.ref(72, 1)), multipath_clone_and_map);
    $M.45 := $store.ref($M.45, $add.ref($add.ref(multipath_target, $mul.ref(0, 216)), $mul.ref(80, 1)), multipath_release_clone);
    $M.45 := $store.ref($M.45, $add.ref($add.ref(multipath_target, $mul.ref(0, 216)), $mul.ref(88, 1)), $0.ref);
    $M.45 := $store.ref($M.45, $add.ref($add.ref(multipath_target, $mul.ref(0, 216)), $mul.ref(96, 1)), multipath_end_io);
    $M.45 := $store.ref($M.45, $add.ref($add.ref(multipath_target, $mul.ref(0, 216)), $mul.ref(104, 1)), multipath_presuspend);
    $M.45 := $store.ref($M.45, $add.ref($add.ref(multipath_target, $mul.ref(0, 216)), $mul.ref(112, 1)), $0.ref);
    $M.45 := $store.ref($M.45, $add.ref($add.ref(multipath_target, $mul.ref(0, 216)), $mul.ref(120, 1)), multipath_postsuspend);
    $M.45 := $store.ref($M.45, $add.ref($add.ref(multipath_target, $mul.ref(0, 216)), $mul.ref(128, 1)), $0.ref);
    $M.45 := $store.ref($M.45, $add.ref($add.ref(multipath_target, $mul.ref(0, 216)), $mul.ref(136, 1)), multipath_resume);
    $M.45 := $store.ref($M.45, $add.ref($add.ref(multipath_target, $mul.ref(0, 216)), $mul.ref(144, 1)), multipath_status);
    $M.45 := $store.ref($M.45, $add.ref($add.ref(multipath_target, $mul.ref(0, 216)), $mul.ref(152, 1)), multipath_message);
    $M.45 := $store.ref($M.45, $add.ref($add.ref(multipath_target, $mul.ref(0, 216)), $mul.ref(160, 1)), multipath_ioctl);
    $M.45 := $store.ref($M.45, $add.ref($add.ref(multipath_target, $mul.ref(0, 216)), $mul.ref(168, 1)), $0.ref);
    $M.45 := $store.ref($M.45, $add.ref($add.ref(multipath_target, $mul.ref(0, 216)), $mul.ref(176, 1)), multipath_busy);
    $M.45 := $store.ref($M.45, $add.ref($add.ref(multipath_target, $mul.ref(0, 216)), $mul.ref(184, 1)), multipath_iterate_devices);
    $M.45 := $store.ref($M.45, $add.ref($add.ref(multipath_target, $mul.ref(0, 216)), $mul.ref(192, 1)), $0.ref);
    $M.45 := $store.ref($M.45, $add.ref($add.ref($add.ref(multipath_target, $mul.ref(0, 216)), $mul.ref(200, 1)), $mul.ref(0, 1)), $0.ref);
    $M.45 := $store.ref($M.45, $add.ref($add.ref($add.ref(multipath_target, $mul.ref(0, 216)), $mul.ref(200, 1)), $mul.ref(8, 1)), $0.ref);
    $M.19 := $0.ref;
    $M.8 := $0.ref;
    $M.50 := $store.i8($M.50, __kstrtab_dm_unregister_path_selector, 100);
    $M.50 := $store.i8($M.50, $add.ref($add.ref(__kstrtab_dm_unregister_path_selector, $mul.ref(0, 28)), $mul.ref(1, 1)), 109);
    $M.50 := $store.i8($M.50, $add.ref($add.ref(__kstrtab_dm_unregister_path_selector, $mul.ref(0, 28)), $mul.ref(2, 1)), 95);
    $M.50 := $store.i8($M.50, $add.ref($add.ref(__kstrtab_dm_unregister_path_selector, $mul.ref(0, 28)), $mul.ref(3, 1)), 117);
    $M.50 := $store.i8($M.50, $add.ref($add.ref(__kstrtab_dm_unregister_path_selector, $mul.ref(0, 28)), $mul.ref(4, 1)), 110);
    $M.50 := $store.i8($M.50, $add.ref($add.ref(__kstrtab_dm_unregister_path_selector, $mul.ref(0, 28)), $mul.ref(5, 1)), 114);
    $M.50 := $store.i8($M.50, $add.ref($add.ref(__kstrtab_dm_unregister_path_selector, $mul.ref(0, 28)), $mul.ref(6, 1)), 101);
    $M.50 := $store.i8($M.50, $add.ref($add.ref(__kstrtab_dm_unregister_path_selector, $mul.ref(0, 28)), $mul.ref(7, 1)), 103);
    $M.50 := $store.i8($M.50, $add.ref($add.ref(__kstrtab_dm_unregister_path_selector, $mul.ref(0, 28)), $mul.ref(8, 1)), 105);
    $M.50 := $store.i8($M.50, $add.ref($add.ref(__kstrtab_dm_unregister_path_selector, $mul.ref(0, 28)), $mul.ref(9, 1)), 115);
    $M.50 := $store.i8($M.50, $add.ref($add.ref(__kstrtab_dm_unregister_path_selector, $mul.ref(0, 28)), $mul.ref(10, 1)), 116);
    $M.50 := $store.i8($M.50, $add.ref($add.ref(__kstrtab_dm_unregister_path_selector, $mul.ref(0, 28)), $mul.ref(11, 1)), 101);
    $M.50 := $store.i8($M.50, $add.ref($add.ref(__kstrtab_dm_unregister_path_selector, $mul.ref(0, 28)), $mul.ref(12, 1)), 114);
    $M.50 := $store.i8($M.50, $add.ref($add.ref(__kstrtab_dm_unregister_path_selector, $mul.ref(0, 28)), $mul.ref(13, 1)), 95);
    $M.50 := $store.i8($M.50, $add.ref($add.ref(__kstrtab_dm_unregister_path_selector, $mul.ref(0, 28)), $mul.ref(14, 1)), 112);
    $M.50 := $store.i8($M.50, $add.ref($add.ref(__kstrtab_dm_unregister_path_selector, $mul.ref(0, 28)), $mul.ref(15, 1)), 97);
    $M.50 := $store.i8($M.50, $add.ref($add.ref(__kstrtab_dm_unregister_path_selector, $mul.ref(0, 28)), $mul.ref(16, 1)), 116);
    $M.50 := $store.i8($M.50, $add.ref($add.ref(__kstrtab_dm_unregister_path_selector, $mul.ref(0, 28)), $mul.ref(17, 1)), 104);
    $M.50 := $store.i8($M.50, $add.ref($add.ref(__kstrtab_dm_unregister_path_selector, $mul.ref(0, 28)), $mul.ref(18, 1)), 95);
    $M.50 := $store.i8($M.50, $add.ref($add.ref(__kstrtab_dm_unregister_path_selector, $mul.ref(0, 28)), $mul.ref(19, 1)), 115);
    $M.50 := $store.i8($M.50, $add.ref($add.ref(__kstrtab_dm_unregister_path_selector, $mul.ref(0, 28)), $mul.ref(20, 1)), 101);
    $M.50 := $store.i8($M.50, $add.ref($add.ref(__kstrtab_dm_unregister_path_selector, $mul.ref(0, 28)), $mul.ref(21, 1)), 108);
    $M.50 := $store.i8($M.50, $add.ref($add.ref(__kstrtab_dm_unregister_path_selector, $mul.ref(0, 28)), $mul.ref(22, 1)), 101);
    $M.50 := $store.i8($M.50, $add.ref($add.ref(__kstrtab_dm_unregister_path_selector, $mul.ref(0, 28)), $mul.ref(23, 1)), 99);
    $M.50 := $store.i8($M.50, $add.ref($add.ref(__kstrtab_dm_unregister_path_selector, $mul.ref(0, 28)), $mul.ref(24, 1)), 116);
    $M.50 := $store.i8($M.50, $add.ref($add.ref(__kstrtab_dm_unregister_path_selector, $mul.ref(0, 28)), $mul.ref(25, 1)), 111);
    $M.50 := $store.i8($M.50, $add.ref($add.ref(__kstrtab_dm_unregister_path_selector, $mul.ref(0, 28)), $mul.ref(26, 1)), 114);
    $M.50 := $store.i8($M.50, $add.ref($add.ref(__kstrtab_dm_unregister_path_selector, $mul.ref(0, 28)), $mul.ref(27, 1)), 0);
    $M.0 := $store.ref($M.0, _path_selectors, _path_selectors);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(_path_selectors, $mul.ref(0, 16)), $mul.ref(8, 1)), _path_selectors);
    $M.0 := $store.i64($M.0, _ps_lock, 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(_ps_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $add.ref(_ps_lock, $mul.ref(8, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(_ps_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(8, 1)), $add.ref(_ps_lock, $mul.ref(8, 1)));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(_ps_lock, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(_ps_lock, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(_ps_lock, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(_ps_lock, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(_ps_lock, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(_ps_lock, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(_ps_lock, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(_ps_lock, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(_ps_lock, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(_ps_lock, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(_ps_lock, $mul.ref(0, 160)), $mul.ref(96, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(_ps_lock, $mul.ref(0, 160)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(_ps_lock, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(_ps_lock, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(_ps_lock, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(_ps_lock, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(24, 1)), .str.2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(_ps_lock, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(_ps_lock, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(40, 1)), 0);
    $M.43 := 0;
    call {:si_unique_call 1086} {:cexpr "ldv_retval_2"} boogie_si_record_i32(0);
    $M.44 := 0;
    call {:si_unique_call 1087} {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
    $M.42 := 0;
    call {:si_unique_call 1088} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.32 := 0;
    call {:si_unique_call 1089} {:cexpr "ldv_work_2_1"} boogie_si_record_i32(0);
    $M.34 := 0;
    call {:si_unique_call 1090} {:cexpr "ldv_work_2_3"} boogie_si_record_i32(0);
    $M.37 := 0;
    call {:si_unique_call 1091} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.9 := 0;
    call {:si_unique_call 1092} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(0);
    $M.38 := 0;
    call {:si_unique_call 1093} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.40 := 0;
    call {:si_unique_call 1094} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    $M.33 := 0;
    call {:si_unique_call 1095} {:cexpr "ldv_work_2_2"} boogie_si_record_i32(0);
    $M.14 := $0.ref;
    $M.36 := $0.ref;
    $M.13 := 0;
    call {:si_unique_call 1096} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(0);
    $M.31 := 0;
    call {:si_unique_call 1097} {:cexpr "ldv_work_2_0"} boogie_si_record_i32(0);
    $M.11 := 0;
    call {:si_unique_call 1098} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(0);
    $M.41 := 0;
    call {:si_unique_call 1099} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.35 := $0.ref;
    $M.39 := 0;
    call {:si_unique_call 1100} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.15 := 0;
    call {:si_unique_call 1101} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(0);
    $M.16 := $0.ref;
    $M.12 := $0.ref;
    $M.10 := $0.ref;
    $M.27 := 1;
    call {:si_unique_call 1102} {:cexpr "ldv_module_refcounter"} boogie_si_record_i32(1);
    $M.56 := $store.i8($M.56, .str.63, 37);
    $M.56 := $store.i8($M.56, $add.ref($add.ref(.str.63, $mul.ref(0, 5)), $mul.ref(1, 1)), 117);
    $M.56 := $store.i8($M.56, $add.ref($add.ref(.str.63, $mul.ref(0, 5)), $mul.ref(2, 1)), 37);
    $M.56 := $store.i8($M.56, $add.ref($add.ref(.str.63, $mul.ref(0, 5)), $mul.ref(3, 1)), 99);
    $M.56 := $store.i8($M.56, $add.ref($add.ref(.str.63, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.57 := $store.i8($M.57, .str.37, 37);
    $M.57 := $store.i8($M.57, $add.ref($add.ref(.str.37, $mul.ref(0, 3)), $mul.ref(1, 1)), 100);
    $M.57 := $store.i8($M.57, $add.ref($add.ref(.str.37, $mul.ref(0, 3)), $mul.ref(2, 1)), 0);
    $M.58 := $store.i8($M.58, .str.38, 37);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.38, $mul.ref(0, 3)), $mul.ref(1, 1)), 115);
    $M.58 := $store.i8($M.58, $add.ref($add.ref(.str.38, $mul.ref(0, 3)), $mul.ref(2, 1)), 0);
    call {:si_unique_call 1103} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 384991);

procedure devirtbounce(funcPtr: ref, arg: ref, arg1: i32, arg2: i64);
  free requires assertsPassed;



implementation devirtbounce(funcPtr: ref, arg: ref, arg1: i32, arg2: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 386023);

procedure devirtbounce.1(funcPtr: ref, arg: ref, arg1: ref, arg2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.1(funcPtr: ref, arg: ref, arg1: ref, arg2: i64) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 387055);

procedure devirtbounce.2(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: ref, arg4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.2(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: ref, arg4: i32) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 388087);

procedure devirtbounce.3(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: i64, arg4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.3(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: i64, arg4: ref) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 389119);

procedure devirtbounce.4(funcPtr: ref, arg: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.4(funcPtr: ref, arg: ref) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 390151);

procedure devirtbounce.5(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.5(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 391183);

procedure devirtbounce.6(funcPtr: ref, arg: ref, arg1: ref, arg2: i64) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.6(funcPtr: ref, arg: ref, arg1: ref, arg2: i64) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0, 392215);

procedure devirtbounce.7(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.7(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.8: ref;

axiom devirtbounce.8 == $sub.ref(0, 393247);

procedure devirtbounce.8(funcPtr: ref, arg: ref, arg1: ref);
  free requires assertsPassed;



implementation devirtbounce.8(funcPtr: ref, arg: ref, arg1: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i3 := $eq.ref(mempool_free_slab, $p0);
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume false;
    return;

  $bb2:
    assume $i3 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1104} mempool_free_slab($p1, $p2);
    return;
}



const devirtbounce.9: ref;

axiom devirtbounce.9 == $sub.ref(0, 394279);

procedure devirtbounce.9(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.10, $M.9, $M.12, $M.11, $M.14, $M.13, $M.16, $M.15, $CurrAddr;



implementation devirtbounce.9(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i13 := $eq.ref(fail_path, $p0);
    assume {:branchcond $i13} true;
    goto $bb6, $bb11;

  $bb11:
    assume !($i13 == 1);
    $i12 := $eq.ref(reinstate_path, $p0);
    assume true;
    goto $bb5, $bb10;

  $bb10:
    assume !($i12 == 1);
    $i11 := $eq.ref(multipath_busy, $p0);
    assume {:branchcond $i11} true;
    goto $bb4, $bb9;

  $bb9:
    assume !($i11 == 1);
    $i10 := $eq.ref(dm_unregister_path_selector, $p0);
    assume {:branchcond $i10} true;
    goto $bb3, $bb8;

  $bb8:
    assume !($i10 == 1);
    $i9 := $eq.ref(dm_register_path_selector, $p0);
    assume {:branchcond $i9} true;
    goto $bb2, $bb7;

  $bb7:
    assume !($i9 == 1);
    assume false;
    return;

  $bb2:
    assume $i9 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1105} $i2 := dm_register_path_selector($p1);
    $r := $i2;
    return;

  $bb3:
    assume $i10 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1106} $i4 := dm_unregister_path_selector($p3);
    $r := $i4;
    return;

  $bb4:
    assume $i11 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1107} $i6 := multipath_busy($p5);
    $r := $i6;
    return;

  $bb5:
    assume $i12 == 1;
    call {:si_unique_call 1108} $i7 := reinstate_path(arg);
    $r := $i7;
    return;

  $bb6:
    assume $i13 == 1;
    call {:si_unique_call 1109} $i8 := fail_path(arg);
    $r := $i8;
    return;
}



const devirtbounce.10: ref;

axiom devirtbounce.10 == $sub.ref(0, 395311);

procedure devirtbounce.10(funcPtr: ref, arg: ref, arg1: i64, arg2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.10(funcPtr: ref, arg: ref, arg1: i64, arg2: ref) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.11: ref;

axiom devirtbounce.11 == $sub.ref(0, 396343);

procedure devirtbounce.11(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.0, $M.20, $M.21, $M.22, $M.23, $M.24, $M.7, $M.25, $M.26, $M.9, $M.11, $M.13, $M.15, $M.10, $M.12, $M.14, $M.16, $CurrAddr, $M.27, assertsPassed;



implementation devirtbounce.11(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i14 := $eq.ref(trigger_event, $p0);
    assume {:branchcond $i14} true;
    goto $bb8, $bb15;

  $bb15:
    assume !($i14 == 1);
    $i13 := $eq.ref(activate_path, $p0);
    assume {:branchcond $i13} true;
    goto $bb7, $bb14;

  $bb14:
    assume !($i13 == 1);
    $i12 := $eq.ref(multipath_resume, $p0);
    assume true;
    goto $bb6, $bb13;

  $bb13:
    assume !($i12 == 1);
    $i11 := $eq.ref(multipath_postsuspend, $p0);
    assume {:branchcond $i11} true;
    goto $bb5, $bb12;

  $bb12:
    assume !($i11 == 1);
    $i10 := $eq.ref(multipath_presuspend, $p0);
    assume {:branchcond $i10} true;
    goto $bb4, $bb11;

  $bb11:
    assume !($i10 == 1);
    $i9 := $eq.ref(multipath_release_clone, $p0);
    assume {:branchcond $i9} true;
    goto $bb3, $bb10;

  $bb10:
    assume !($i9 == 1);
    $i8 := $eq.ref(multipath_dtr, $p0);
    assume {:branchcond $i8} true;
    goto $bb2, $bb9;

  $bb9:
    assume !($i8 == 1);
    assume false;
    return;

  $bb2:
    assume $i8 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1110} multipath_dtr($p1);
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    return;

  SeqInstr_70:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i9 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1111} multipath_release_clone($p2);
    return;

  $bb4:
    assume $i10 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1112} multipath_presuspend($p3);
    return;

  $bb5:
    assume $i11 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1113} multipath_postsuspend($p4);
    return;

  $bb6:
    assume $i12 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1114} multipath_resume($p5);
    return;

  $bb7:
    assume $i13 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1115} activate_path($p6);
    return;

  $bb8:
    assume $i14 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1116} trigger_event($p7);
    return;
}



const devirtbounce.12: ref;

axiom devirtbounce.12 == $sub.ref(0, 397375);

procedure devirtbounce.12(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.0, $M.29, $M.17, $M.18, $CurrAddr, $M.27, $M.20, $M.21, $M.22, $M.23, $M.24, $M.7, $M.25, $M.26, $M.10, $M.9, $M.12, $M.11, $M.14, $M.13, $M.16, $M.15, assertsPassed;



implementation devirtbounce.12(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i6 := $eq.ref(multipath_message, $p0);
    assume {:branchcond $i6} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i6 == 1);
    $i5 := $eq.ref(multipath_ctr, $p0);
    assume {:branchcond $i5} true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i5 == 1);
    assume false;
    return;

  $bb2:
    assume $i5 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1117} $i2 := multipath_ctr($p1, arg1, arg2);
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    $r := $i2;
    return;

  SeqInstr_73:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i6 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1118} $i4 := multipath_message($p3, arg1, arg2);
    $r := $i4;
    return;
}



const devirtbounce.13: ref;

axiom devirtbounce.13 == $sub.ref(0, 398407);

procedure devirtbounce.13(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: ref, arg4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.13(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: ref, arg4: ref) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.49, $M.28, $M.45, $M.19, $M.8, $M.50, $M.0, $M.43, $M.44, $M.42, $M.32, $M.34, $M.37, $M.9, $M.38, $M.40, $M.33, $M.14, $M.36, $M.13, $M.31, $M.11, $M.41, $M.35, $M.39, $M.15, $M.16, $M.12, $M.10, $M.27, $M.56, $M.57, $M.58, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 1119} __SMACK_static_init();
    call {:si_unique_call 1120} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.0, $M.9, $M.11, $M.13, $M.15, $M.37, $M.38, $M.39, $M.40, $M.31, $M.32, $M.33, $M.34, $M.41, $M.42, $M.35, $M.1, $M.2, $M.3, $M.4, $M.5, $M.43, $M.44, $M.49, $M.28, $M.45, $M.19, $M.8, $M.50, $M.14, $M.36, $M.16, $M.12, $M.10, $M.27, $M.56, $M.57, $M.58, $CurrAddr, $M.29, $M.17, $M.18, $M.20, $M.21, $M.22, $M.23, $M.24, $M.7, $M.25, $M.26;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation __find_path_selector_type_loop_$bb4(in_$p0: ref, in_$p9: ref, in_$p10: ref, in_$i11: i32, in_$i12: i1, in_$p13: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i1, in_$p7: ref) returns (out_$p9: ref, out_$p10: ref, out_$i11: i32, out_$i12: i1, out_$p13: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i1, out_$p7: ref)
{

  entry:
    out_$p9, out_$p10, out_$i11, out_$i12, out_$p13, out_$p16, out_$p17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p7 := in_$p9, in_$p10, in_$i11, in_$i12, in_$p13, in_$p16, in_$p17, in_$p18, in_$p19, in_$p20, in_$i21, in_$i22, in_$p7;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_51;

  $bb10:
    assume out_$i22 == 1;
    assume {:verifier.code 0} true;
    out_$p7 := out_$p19;
    goto $bb10_dummy;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    out_$i22 := $ne.i64(out_$i21, $p2i.ref.i64(_path_selectors));
    goto corral_source_split_68;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    out_$i21 := $p2i.ref.i64(out_$p20);
    goto corral_source_split_67;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(out_$p18, $mul.ref($sub.ref(0, 96), 112)), $mul.ref(96, 1));
    goto corral_source_split_66;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref(out_$p18, $mul.ref($sub.ref(0, 96), 112));
    goto corral_source_split_65;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    out_$p18 := $bitcast.ref.ref(out_$p17);
    goto corral_source_split_64;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    out_$p17 := $load.ref($M.0, out_$p16);
    goto corral_source_split_63;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref($add.ref(out_$p7, $mul.ref(0, 112)), $mul.ref(96, 1)), $mul.ref(0, 1));
    goto corral_source_split_62;

  $bb7:
    assume !(out_$i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    out_$p13 := out_$p7;
    assume true;
    goto $bb7;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    out_$i12 := $eq.i32(out_$i11, 0);
    goto corral_source_split_56;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    call {:si_unique_call 8} out_$i11 := strcmp(in_$p0, out_$p10);
    call {:si_unique_call 9} {:cexpr "tmp"} boogie_si_record_i32(out_$i11);
    goto corral_source_split_55;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    out_$p10 := $load.ref($M.0, out_$p9);
    goto corral_source_split_54;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref($add.ref(out_$p7, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_53;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p9, out_$p10, out_$i11, out_$i12, out_$p13, out_$p16, out_$p17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p7 := __find_path_selector_type_loop_$bb4(in_$p0, out_$p9, out_$p10, out_$i11, out_$i12, out_$p13, out_$p16, out_$p17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p7);
    return;

  exit:
    return;
}



procedure __find_path_selector_type_loop_$bb4(in_$p0: ref, in_$p9: ref, in_$p10: ref, in_$i11: i32, in_$i12: i1, in_$p13: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i1, in_$p7: ref) returns (out_$p9: ref, out_$p10: ref, out_$i11: i32, out_$i12: i1, out_$p13: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i1, out_$p7: ref);



implementation multipath_ctr_loop_$bb33(in_$p4: ref, in_$p5: ref, in_$p20: ref, in_$p51: ref, in_$p56: ref, in_$p57: ref, in_$i58: i1, in_$i59: i8, in_$i60: i1, in_$p61: ref, in_$p65: ref, in_$i66: i32, in_$p67: ref, in_$i68: i32, in_$i69: i32, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$i73: i32, in_$p74: ref, in_$i75: i32, in_$i76: i32, in_$i77: i32, in_$i78: i1, in_$p79: ref, in_$i80: i32, in_$i81: i1, in_$i55: i32, in_$i82: i32) returns (out_$p56: ref, out_$p57: ref, out_$i58: i1, out_$i59: i8, out_$i60: i1, out_$p61: ref, out_$p65: ref, out_$i66: i32, out_$p67: ref, out_$i68: i32, out_$i69: i32, out_$p70: ref, out_$p71: ref, out_$p72: ref, out_$i73: i32, out_$p74: ref, out_$i75: i32, out_$i76: i32, out_$i77: i32, out_$i78: i1, out_$p79: ref, out_$i80: i32, out_$i81: i1, out_$i55: i32, out_$i82: i32)
{

  entry:
    out_$p56, out_$p57, out_$i58, out_$i59, out_$i60, out_$p61, out_$p65, out_$i66, out_$p67, out_$i68, out_$i69, out_$p70, out_$p71, out_$p72, out_$i73, out_$p74, out_$i75, out_$i76, out_$i77, out_$i78, out_$p79, out_$i80, out_$i81, out_$i55, out_$i82 := in_$p56, in_$p57, in_$i58, in_$i59, in_$i60, in_$p61, in_$p65, in_$i66, in_$p67, in_$i68, in_$i69, in_$p70, in_$p71, in_$p72, in_$i73, in_$p74, in_$i75, in_$i76, in_$i77, in_$i78, in_$p79, in_$i80, in_$i81, in_$i55, in_$i82;
    goto $bb33, exit;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_211;

  $bb41:
    assume out_$i81 == 1;
    assume {:verifier.code 0} true;
    out_$i55 := out_$i73;
    goto $bb41_dummy;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    out_$i82 := out_$i73;
    assume true;
    goto $bb41;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    out_$i81 := $ne.i32(out_$i80, 0);
    goto corral_source_split_248;

  $bb40:
    assume {:verifier.code 0} true;
    out_$i80 := $load.i32($M.4, in_$p51);
    goto corral_source_split_247;

  $bb39:
    assume !(out_$i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p79, out_$p56);
    goto corral_source_split_245;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref(in_$p20, $mul.ref(0, 536)), $mul.ref(256, 1));
    goto corral_source_split_244;

  $bb38:
    assume out_$i78 == 1;
    goto corral_source_split_243;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    out_$i78 := $eq.i32(out_$i77, 0);
    goto corral_source_split_241;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    out_$i77 := $load.i32($M.0, in_$p5);
    goto corral_source_split_240;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, in_$p5, out_$i76);
    goto corral_source_split_239;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    out_$i76 := $sub.i32(out_$i75, 1);
    goto corral_source_split_238;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    out_$i75 := $load.i32($M.0, in_$p5);
    goto corral_source_split_237;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p74, out_$i73);
    goto corral_source_split_236;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref(out_$p56, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_235;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    out_$i73 := $add.i32(out_$i55, 1);
    call {:si_unique_call 56} {:cexpr "pg_count"} boogie_si_record_i32(out_$i73);
    goto corral_source_split_234;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} list_add_tail(out_$p71, out_$p72);
    goto corral_source_split_233;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref(in_$p20, $mul.ref(0, 536)), $mul.ref(120, 1));
    goto corral_source_split_232;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref(out_$p56, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_231;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p70, out_$i69);
    goto corral_source_split_230;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref(in_$p20, $mul.ref(0, 536)), $mul.ref(236, 1));
    goto corral_source_split_229;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    out_$i69 := $add.i32(out_$i66, out_$i68);
    goto corral_source_split_228;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    out_$i68 := $load.i32($M.0, out_$p67);
    goto corral_source_split_227;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref(out_$p56, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_226;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    out_$i66 := $load.i32($M.0, out_$p65);
    goto corral_source_split_225;

  $bb37:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(in_$p20, $mul.ref(0, 536)), $mul.ref(236, 1));
    goto corral_source_split_224;

  $bb36:
    assume !(out_$i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    out_$p61 := out_$p56;
    assume true;
    goto $bb36;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    out_$i60 := $trunc.i8.i1(out_$i59);
    goto corral_source_split_217;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    out_$i59 := $zext.i1.i8(out_$i58);
    call {:si_unique_call 51} {:cexpr "tmp___0"} boogie_si_record_i8(out_$i59);
    goto corral_source_split_216;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} out_$i58 := IS_ERR(out_$p57);
    goto corral_source_split_215;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    out_$p57 := $bitcast.ref.ref(out_$p56);
    goto corral_source_split_214;

  SeqInstr_6:
    goto corral_source_split_213;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} out_$p56 := parse_priority_group(in_$p4, in_$p20);
    goto SeqInstr_5;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb41_dummy:
    call {:si_unique_call 1} out_$p56, out_$p57, out_$i58, out_$i59, out_$i60, out_$p61, out_$p65, out_$i66, out_$p67, out_$i68, out_$i69, out_$p70, out_$p71, out_$p72, out_$i73, out_$p74, out_$i75, out_$i76, out_$i77, out_$i78, out_$p79, out_$i80, out_$i81, out_$i55, out_$i82 := multipath_ctr_loop_$bb33(in_$p4, in_$p5, in_$p20, in_$p51, out_$p56, out_$p57, out_$i58, out_$i59, out_$i60, out_$p61, out_$p65, out_$i66, out_$p67, out_$i68, out_$i69, out_$p70, out_$p71, out_$p72, out_$i73, out_$p74, out_$i75, out_$i76, out_$i77, out_$i78, out_$p79, out_$i80, out_$i81, out_$i55, out_$i82);
    return;

  exit:
    return;
}



procedure multipath_ctr_loop_$bb33(in_$p4: ref, in_$p5: ref, in_$p20: ref, in_$p51: ref, in_$p56: ref, in_$p57: ref, in_$i58: i1, in_$i59: i8, in_$i60: i1, in_$p61: ref, in_$p65: ref, in_$i66: i32, in_$p67: ref, in_$i68: i32, in_$i69: i32, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$i73: i32, in_$p74: ref, in_$i75: i32, in_$i76: i32, in_$i77: i32, in_$i78: i1, in_$p79: ref, in_$i80: i32, in_$i81: i1, in_$i55: i32, in_$i82: i32) returns (out_$p56: ref, out_$p57: ref, out_$i58: i1, out_$i59: i8, out_$i60: i1, out_$p61: ref, out_$p65: ref, out_$i66: i32, out_$p67: ref, out_$i68: i32, out_$i69: i32, out_$p70: ref, out_$p71: ref, out_$p72: ref, out_$i73: i32, out_$p74: ref, out_$i75: i32, out_$i76: i32, out_$i77: i32, out_$i78: i1, out_$p79: ref, out_$i80: i32, out_$i81: i1, out_$i55: i32, out_$i82: i32);
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $CurrAddr, $M.27, $M.29, $M.17, $M.18, $M.20, $M.21, $M.22, $M.23, $M.24, $M.7, $M.25, $M.26, $M.9, $M.11, $M.13, $M.15, $M.10, $M.12, $M.14, $M.16, assertsPassed;



implementation multipath_end_io_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} multipath_end_io_loop_$bb3();
    return;

  exit:
    return;
}



procedure multipath_end_io_loop_$bb3();



implementation multipath_status_loop_$bb127(in_$i1: i32, in_$p3: ref, in_$i4: i32, in_$i390: i64, in_$i395: i1, in_$i396: i64, in_$p397: ref, in_$i398: i32, in_$i399: i64, in_$p401: ref, in_$p402: ref, in_$p403: ref, in_$p404: ref, in_$i405: i32, in_$i406: i32, in_$i407: i32, in_$p409: ref, in_$p410: ref, in_$p411: ref, in_$p412: ref, in_$i413: i64, in_$i414: i1, in_$p416: ref, in_$p417: ref, in_$p418: ref, in_$p419: ref, in_$p420: ref, in_$p421: ref, in_$i422: i64, in_$p423: ref, in_$i424: i32, in_$i425: i32, in_$i426: i32, in_$i427: i32, in_$p429: ref, in_$p430: ref, in_$p431: ref, in_$p432: ref, in_$i433: i64, in_$i434: i1, in_$i393: i32, in_$p394: ref, in_$i435: i32, in_$p327: ref) returns (out_$i395: i1, out_$i396: i64, out_$p397: ref, out_$i398: i32, out_$i399: i64, out_$p401: ref, out_$p402: ref, out_$p403: ref, out_$p404: ref, out_$i405: i32, out_$i406: i32, out_$i407: i32, out_$p409: ref, out_$p410: ref, out_$p411: ref, out_$p412: ref, out_$i413: i64, out_$i414: i1, out_$p416: ref, out_$p417: ref, out_$p418: ref, out_$p419: ref, out_$p420: ref, out_$p421: ref, out_$i422: i64, out_$p423: ref, out_$i424: i32, out_$i425: i32, out_$i426: i32, out_$i427: i32, out_$p429: ref, out_$p430: ref, out_$p431: ref, out_$p432: ref, out_$i433: i64, out_$i434: i1, out_$i393: i32, out_$p394: ref, out_$i435: i32)
{

  entry:
    out_$i395, out_$i396, out_$p397, out_$i398, out_$i399, out_$p401, out_$p402, out_$p403, out_$p404, out_$i405, out_$i406, out_$i407, out_$p409, out_$p410, out_$p411, out_$p412, out_$i413, out_$i414, out_$p416, out_$p417, out_$p418, out_$p419, out_$p420, out_$p421, out_$i422, out_$p423, out_$i424, out_$i425, out_$i426, out_$i427, out_$p429, out_$p430, out_$p431, out_$p432, out_$i433, out_$i434, out_$i393, out_$p394, out_$i435 := in_$i395, in_$i396, in_$p397, in_$i398, in_$i399, in_$p401, in_$p402, in_$p403, in_$p404, in_$i405, in_$i406, in_$i407, in_$p409, in_$p410, in_$p411, in_$p412, in_$i413, in_$i414, in_$p416, in_$p417, in_$p418, in_$p419, in_$p420, in_$p421, in_$i422, in_$p423, in_$i424, in_$i425, in_$i426, in_$i427, in_$p429, in_$p430, in_$p431, in_$p432, in_$i433, in_$i434, in_$i393, in_$p394, in_$i435;
    goto $bb127, exit;

  $bb127:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_844;

  $bb135:
    assume out_$i434 == 1;
    assume {:verifier.code 0} true;
    out_$i393, out_$p394 := out_$i427, out_$p430;
    goto $bb135_dummy;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    out_$i435 := out_$i427;
    assume true;
    goto $bb135;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    out_$i434 := $ne.i64(out_$i433, in_$i390);
    goto corral_source_split_886;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    out_$i433 := $p2i.ref.i64(out_$p432);
    goto corral_source_split_885;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    out_$p432 := $add.ref($add.ref(out_$p431, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_884;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    out_$p431 := $bitcast.ref.ref(out_$p430);
    goto corral_source_split_883;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    out_$p430 := $load.ref($M.0, out_$p429);
    goto corral_source_split_882;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    out_$p429 := $add.ref($add.ref($add.ref(out_$p394, $mul.ref(0, 272)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_881;

  $bb134:
    assume {:verifier.code 0} true;
    goto corral_source_split_880;

  $bb133:
    assume !(out_$i414 == 1);
    assume {:verifier.code 0} true;
    out_$i427 := out_$i407;
    goto $bb134;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    out_$i427 := out_$i426;
    goto $bb134;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    out_$i426 := $add.i32(out_$i425, out_$i407);
    call {:si_unique_call 155} {:cexpr "sz"} boogie_si_record_i32(out_$i426);
    goto corral_source_split_878;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    out_$i424 := $sub.i32(in_$i4, out_$i407);
    call {:si_unique_call 153} out_$i425 := devirtbounce.2(out_$p419, out_$p420, out_$p421, in_$i1, out_$p423, out_$i424);
    call {:si_unique_call 154} {:cexpr "tmp___39"} boogie_si_record_i32(out_$i425);
    goto corral_source_split_877;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    out_$p423 := $add.ref(in_$p3, $mul.ref(out_$i422, 1));
    goto corral_source_split_876;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    out_$i422 := $sext.i32.i64(out_$i407);
    goto corral_source_split_875;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    out_$p421 := $add.ref($add.ref(out_$p394, $mul.ref(0, 272)), $mul.ref(32, 1));
    goto corral_source_split_874;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    out_$p420 := $add.ref($add.ref(in_$p327, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_873;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    out_$p419 := $load.ref($M.0, out_$p418);
    goto corral_source_split_872;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    out_$p418 := $add.ref($add.ref(out_$p417, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_871;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    out_$p417 := $load.ref($M.0, out_$p416);
    goto corral_source_split_870;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    out_$p416 := $add.ref($add.ref($add.ref(in_$p327, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_869;

  $bb132:
    assume out_$i414 == 1;
    goto corral_source_split_868;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb132, $bb133;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    out_$i414 := $ne.i64(out_$i413, 0);
    goto corral_source_split_866;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    out_$i413 := $p2i.ref.i64(out_$p412);
    goto corral_source_split_865;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    out_$p412 := $load.ref($M.0, out_$p411);
    goto corral_source_split_864;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    out_$p411 := $add.ref($add.ref(out_$p410, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_863;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    out_$p410 := $load.ref($M.0, out_$p409);
    goto corral_source_split_862;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    out_$p409 := $add.ref($add.ref($add.ref(in_$p327, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_861;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    out_$i407 := $add.i32(out_$i406, out_$i393);
    call {:si_unique_call 152} {:cexpr "sz"} boogie_si_record_i32(out_$i407);
    goto corral_source_split_860;

  $bb131:
    assume {:verifier.code 0} true;
    goto corral_source_split_859;

  $bb130:
    assume !(out_$i395 == 1);
    assume {:verifier.code 0} true;
    out_$i406 := 0;
    goto $bb131;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    out_$i406 := out_$i405;
    goto $bb131;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 150} out_$i405 := scnprintf.ref.i64.ref.ref(out_$p397, out_$i399, .str.79, out_$p404);
    call {:si_unique_call 151} {:cexpr "tmp___37"} boogie_si_record_i32(out_$i405);
    goto corral_source_split_857;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    out_$p404 := $bitcast.ref.ref(out_$p403);
    goto corral_source_split_856;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    out_$p403 := $add.ref($add.ref(out_$p402, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_855;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    out_$p402 := $load.ref($M.0, out_$p401);
    goto corral_source_split_854;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    out_$p401 := $add.ref($add.ref($add.ref(out_$p394, $mul.ref(0, 272)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_853;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    out_$i399 := $zext.i32.i64(out_$i398);
    goto corral_source_split_852;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    out_$i398 := $sub.i32(in_$i4, out_$i393);
    goto corral_source_split_851;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    out_$p397 := $add.ref(in_$p3, $mul.ref(out_$i396, 1));
    goto corral_source_split_850;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    out_$i396 := $sext.i32.i64(out_$i393);
    goto corral_source_split_849;

  $bb129:
    assume out_$i395 == 1;
    goto corral_source_split_848;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb129, $bb130;

  $bb128:
    assume {:verifier.code 0} true;
    out_$i395 := $ult.i32(out_$i393, in_$i4);
    goto corral_source_split_846;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb135_dummy:
    call {:si_unique_call 1} out_$i395, out_$i396, out_$p397, out_$i398, out_$i399, out_$p401, out_$p402, out_$p403, out_$p404, out_$i405, out_$i406, out_$i407, out_$p409, out_$p410, out_$p411, out_$p412, out_$i413, out_$i414, out_$p416, out_$p417, out_$p418, out_$p419, out_$p420, out_$p421, out_$i422, out_$p423, out_$i424, out_$i425, out_$i426, out_$i427, out_$p429, out_$p430, out_$p431, out_$p432, out_$i433, out_$i434, out_$i393, out_$p394, out_$i435 := multipath_status_loop_$bb127(in_$i1, in_$p3, in_$i4, in_$i390, out_$i395, out_$i396, out_$p397, out_$i398, out_$i399, out_$p401, out_$p402, out_$p403, out_$p404, out_$i405, out_$i406, out_$i407, out_$p409, out_$p410, out_$p411, out_$p412, out_$i413, out_$i414, out_$p416, out_$p417, out_$p418, out_$p419, out_$p420, out_$p421, out_$i422, out_$p423, out_$i424, out_$i425, out_$i426, out_$i427, out_$p429, out_$p430, out_$p431, out_$p432, out_$i433, out_$i434, out_$i393, out_$p394, out_$i435, in_$p327);
    return;

  exit:
    return;
}



procedure multipath_status_loop_$bb127(in_$i1: i32, in_$p3: ref, in_$i4: i32, in_$i390: i64, in_$i395: i1, in_$i396: i64, in_$p397: ref, in_$i398: i32, in_$i399: i64, in_$p401: ref, in_$p402: ref, in_$p403: ref, in_$p404: ref, in_$i405: i32, in_$i406: i32, in_$i407: i32, in_$p409: ref, in_$p410: ref, in_$p411: ref, in_$p412: ref, in_$i413: i64, in_$i414: i1, in_$p416: ref, in_$p417: ref, in_$p418: ref, in_$p419: ref, in_$p420: ref, in_$p421: ref, in_$i422: i64, in_$p423: ref, in_$i424: i32, in_$i425: i32, in_$i426: i32, in_$i427: i32, in_$p429: ref, in_$p430: ref, in_$p431: ref, in_$p432: ref, in_$i433: i64, in_$i434: i1, in_$i393: i32, in_$p394: ref, in_$i435: i32, in_$p327: ref) returns (out_$i395: i1, out_$i396: i64, out_$p397: ref, out_$i398: i32, out_$i399: i64, out_$p401: ref, out_$p402: ref, out_$p403: ref, out_$p404: ref, out_$i405: i32, out_$i406: i32, out_$i407: i32, out_$p409: ref, out_$p410: ref, out_$p411: ref, out_$p412: ref, out_$i413: i64, out_$i414: i1, out_$p416: ref, out_$p417: ref, out_$p418: ref, out_$p419: ref, out_$p420: ref, out_$p421: ref, out_$i422: i64, out_$p423: ref, out_$i424: i32, out_$i425: i32, out_$i426: i32, out_$i427: i32, out_$p429: ref, out_$p430: ref, out_$p431: ref, out_$p432: ref, out_$i433: i64, out_$i434: i1, out_$i393: i32, out_$p394: ref, out_$i435: i32);



implementation multipath_status_loop_$bb110(in_$i1: i32, in_$p3: ref, in_$i4: i32, in_$i324: i64, in_$i328: i1, in_$i329: i64, in_$p330: ref, in_$i331: i32, in_$i332: i64, in_$p334: ref, in_$p335: ref, in_$p336: ref, in_$p337: ref, in_$i338: i32, in_$i339: i32, in_$i340: i32, in_$p342: ref, in_$p343: ref, in_$p344: ref, in_$p345: ref, in_$i346: i64, in_$i347: i1, in_$p349: ref, in_$p350: ref, in_$p351: ref, in_$p352: ref, in_$p353: ref, in_$i354: i64, in_$p355: ref, in_$i356: i32, in_$i357: i32, in_$i358: i32, in_$i360: i1, in_$i361: i64, in_$p362: ref, in_$i363: i32, in_$i364: i64, in_$i365: i32, in_$i366: i32, in_$i367: i32, in_$i359: i32, in_$i368: i1, in_$i369: i64, in_$p370: ref, in_$i371: i32, in_$i372: i64, in_$p373: ref, in_$i374: i32, in_$p376: ref, in_$p377: ref, in_$p378: ref, in_$i379: i32, in_$i380: i32, in_$i381: i32, in_$i382: i32, in_$p384: ref, in_$p385: ref, in_$p386: ref, in_$p387: ref, in_$i388: i64, in_$p389: ref, in_$i390: i64, in_$i391: i1, in_$i395: i1, in_$i396: i64, in_$p397: ref, in_$i398: i32, in_$i399: i64, in_$p401: ref, in_$p402: ref, in_$p403: ref, in_$p404: ref, in_$i405: i32, in_$i406: i32, in_$i407: i32, in_$p409: ref, in_$p410: ref, in_$p411: ref, in_$p412: ref, in_$i413: i64, in_$i414: i1, in_$p416: ref, in_$p417: ref, in_$p418: ref, in_$p419: ref, in_$p420: ref, in_$p421: ref, in_$i422: i64, in_$p423: ref, in_$i424: i32, in_$i425: i32, in_$i426: i32, in_$i427: i32, in_$p429: ref, in_$p430: ref, in_$p431: ref, in_$p432: ref, in_$i433: i64, in_$i434: i1, in_$i393: i32, in_$p394: ref, in_$i435: i32, in_$i392: i32, in_$p437: ref, in_$p438: ref, in_$p439: ref, in_$p440: ref, in_$i441: i64, in_$i442: i1, in_$i326: i32, in_$p327: ref) returns (out_$i328: i1, out_$i329: i64, out_$p330: ref, out_$i331: i32, out_$i332: i64, out_$p334: ref, out_$p335: ref, out_$p336: ref, out_$p337: ref, out_$i338: i32, out_$i339: i32, out_$i340: i32, out_$p342: ref, out_$p343: ref, out_$p344: ref, out_$p345: ref, out_$i346: i64, out_$i347: i1, out_$p349: ref, out_$p350: ref, out_$p351: ref, out_$p352: ref, out_$p353: ref, out_$i354: i64, out_$p355: ref, out_$i356: i32, out_$i357: i32, out_$i358: i32, out_$i360: i1, out_$i361: i64, out_$p362: ref, out_$i363: i32, out_$i364: i64, out_$i365: i32, out_$i366: i32, out_$i367: i32, out_$i359: i32, out_$i368: i1, out_$i369: i64, out_$p370: ref, out_$i371: i32, out_$i372: i64, out_$p373: ref, out_$i374: i32, out_$p376: ref, out_$p377: ref, out_$p378: ref, out_$i379: i32, out_$i380: i32, out_$i381: i32, out_$i382: i32, out_$p384: ref, out_$p385: ref, out_$p386: ref, out_$p387: ref, out_$i388: i64, out_$p389: ref, out_$i390: i64, out_$i391: i1, out_$i395: i1, out_$i396: i64, out_$p397: ref, out_$i398: i32, out_$i399: i64, out_$p401: ref, out_$p402: ref, out_$p403: ref, out_$p404: ref, out_$i405: i32, out_$i406: i32, out_$i407: i32, out_$p409: ref, out_$p410: ref, out_$p411: ref, out_$p412: ref, out_$i413: i64, out_$i414: i1, out_$p416: ref, out_$p417: ref, out_$p418: ref, out_$p419: ref, out_$p420: ref, out_$p421: ref, out_$i422: i64, out_$p423: ref, out_$i424: i32, out_$i425: i32, out_$i426: i32, out_$i427: i32, out_$p429: ref, out_$p430: ref, out_$p431: ref, out_$p432: ref, out_$i433: i64, out_$i434: i1, out_$i393: i32, out_$p394: ref, out_$i435: i32, out_$i392: i32, out_$p437: ref, out_$p438: ref, out_$p439: ref, out_$p440: ref, out_$i441: i64, out_$i442: i1, out_$i326: i32, out_$p327: ref)
{

  entry:
    out_$i328, out_$i329, out_$p330, out_$i331, out_$i332, out_$p334, out_$p335, out_$p336, out_$p337, out_$i338, out_$i339, out_$i340, out_$p342, out_$p343, out_$p344, out_$p345, out_$i346, out_$i347, out_$p349, out_$p350, out_$p351, out_$p352, out_$p353, out_$i354, out_$p355, out_$i356, out_$i357, out_$i358, out_$i360, out_$i361, out_$p362, out_$i363, out_$i364, out_$i365, out_$i366, out_$i367, out_$i359, out_$i368, out_$i369, out_$p370, out_$i371, out_$i372, out_$p373, out_$i374, out_$p376, out_$p377, out_$p378, out_$i379, out_$i380, out_$i381, out_$i382, out_$p384, out_$p385, out_$p386, out_$p387, out_$i388, out_$p389, out_$i390, out_$i391, out_$i395, out_$i396, out_$p397, out_$i398, out_$i399, out_$p401, out_$p402, out_$p403, out_$p404, out_$i405, out_$i406, out_$i407, out_$p409, out_$p410, out_$p411, out_$p412, out_$i413, out_$i414, out_$p416, out_$p417, out_$p418, out_$p419, out_$p420, out_$p421, out_$i422, out_$p423, out_$i424, out_$i425, out_$i426, out_$i427, out_$p429, out_$p430, out_$p431, out_$p432, out_$i433, out_$i434, out_$i393, out_$p394, out_$i435, out_$i392, out_$p437, out_$p438, out_$p439, out_$p440, out_$i441, out_$i442, out_$i326, out_$p327 := in_$i328, in_$i329, in_$p330, in_$i331, in_$i332, in_$p334, in_$p335, in_$p336, in_$p337, in_$i338, in_$i339, in_$i340, in_$p342, in_$p343, in_$p344, in_$p345, in_$i346, in_$i347, in_$p349, in_$p350, in_$p351, in_$p352, in_$p353, in_$i354, in_$p355, in_$i356, in_$i357, in_$i358, in_$i360, in_$i361, in_$p362, in_$i363, in_$i364, in_$i365, in_$i366, in_$i367, in_$i359, in_$i368, in_$i369, in_$p370, in_$i371, in_$i372, in_$p373, in_$i374, in_$p376, in_$p377, in_$p378, in_$i379, in_$i380, in_$i381, in_$i382, in_$p384, in_$p385, in_$p386, in_$p387, in_$i388, in_$p389, in_$i390, in_$i391, in_$i395, in_$i396, in_$p397, in_$i398, in_$i399, in_$p401, in_$p402, in_$p403, in_$p404, in_$i405, in_$i406, in_$i407, in_$p409, in_$p410, in_$p411, in_$p412, in_$i413, in_$i414, in_$p416, in_$p417, in_$p418, in_$p419, in_$p420, in_$p421, in_$i422, in_$p423, in_$i424, in_$i425, in_$i426, in_$i427, in_$p429, in_$p430, in_$p431, in_$p432, in_$i433, in_$i434, in_$i393, in_$p394, in_$i435, in_$i392, in_$p437, in_$p438, in_$p439, in_$p440, in_$i441, in_$i442, in_$i326, in_$p327;
    goto $bb110, exit;

  $bb110:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_768;

  $bb138:
    assume out_$i442 == 1;
    assume {:verifier.code 0} true;
    out_$i326, out_$p327 := out_$i392, out_$p438;
    goto $bb138_dummy;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb138;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    out_$i442 := $ne.i64(out_$i441, in_$i324);
    goto corral_source_split_895;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    out_$i441 := $p2i.ref.i64(out_$p440);
    goto corral_source_split_894;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    out_$p440 := $add.ref($add.ref(out_$p439, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_893;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    out_$p439 := $bitcast.ref.ref(out_$p438);
    goto corral_source_split_892;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    out_$p438 := $load.ref($M.0, out_$p437);
    goto corral_source_split_891;

  $bb137:
    assume {:verifier.code 0} true;
    out_$p437 := $add.ref($add.ref($add.ref(out_$p327, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_890;

  $bb126:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb125:
    assume {:verifier.code 0} true;
    assume !(out_$i391 == 1);
    goto $bb126;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    out_$i392 := out_$i435;
    goto $bb126;

  $bb136:
    assume !(out_$i434 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_888;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    out_$i435 := out_$i427;
    assume true;
    goto $bb135, $bb136;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    out_$i434 := $ne.i64(out_$i433, out_$i390);
    goto corral_source_split_886;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    out_$i433 := $p2i.ref.i64(out_$p432);
    goto corral_source_split_885;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    out_$p432 := $add.ref($add.ref(out_$p431, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_884;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    out_$p431 := $bitcast.ref.ref(out_$p430);
    goto corral_source_split_883;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    out_$p430 := $load.ref($M.0, out_$p429);
    goto corral_source_split_882;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    out_$p429 := $add.ref($add.ref($add.ref(out_$p394, $mul.ref(0, 272)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_881;

  $bb134:
    assume {:verifier.code 0} true;
    goto corral_source_split_880;

  $bb133:
    assume !(out_$i414 == 1);
    assume {:verifier.code 0} true;
    out_$i427 := out_$i407;
    goto $bb134;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    out_$i427 := out_$i426;
    goto $bb134;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    out_$i426 := $add.i32(out_$i425, out_$i407);
    call {:si_unique_call 155} {:cexpr "sz"} boogie_si_record_i32(out_$i426);
    goto corral_source_split_878;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    out_$i424 := $sub.i32(in_$i4, out_$i407);
    call {:si_unique_call 153} out_$i425 := devirtbounce.2(out_$p419, out_$p420, out_$p421, in_$i1, out_$p423, out_$i424);
    call {:si_unique_call 154} {:cexpr "tmp___39"} boogie_si_record_i32(out_$i425);
    goto corral_source_split_877;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    out_$p423 := $add.ref(in_$p3, $mul.ref(out_$i422, 1));
    goto corral_source_split_876;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    out_$i422 := $sext.i32.i64(out_$i407);
    goto corral_source_split_875;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    out_$p421 := $add.ref($add.ref(out_$p394, $mul.ref(0, 272)), $mul.ref(32, 1));
    goto corral_source_split_874;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    out_$p420 := $add.ref($add.ref(out_$p327, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_873;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    out_$p419 := $load.ref($M.0, out_$p418);
    goto corral_source_split_872;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    out_$p418 := $add.ref($add.ref(out_$p417, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_871;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    out_$p417 := $load.ref($M.0, out_$p416);
    goto corral_source_split_870;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    out_$p416 := $add.ref($add.ref($add.ref(out_$p327, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_869;

  $bb132:
    assume out_$i414 == 1;
    goto corral_source_split_868;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb132, $bb133;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    out_$i414 := $ne.i64(out_$i413, 0);
    goto corral_source_split_866;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    out_$i413 := $p2i.ref.i64(out_$p412);
    goto corral_source_split_865;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    out_$p412 := $load.ref($M.0, out_$p411);
    goto corral_source_split_864;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    out_$p411 := $add.ref($add.ref(out_$p410, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_863;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    out_$p410 := $load.ref($M.0, out_$p409);
    goto corral_source_split_862;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    out_$p409 := $add.ref($add.ref($add.ref(out_$p327, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_861;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    out_$i407 := $add.i32(out_$i406, out_$i393);
    call {:si_unique_call 152} {:cexpr "sz"} boogie_si_record_i32(out_$i407);
    goto corral_source_split_860;

  $bb131:
    assume {:verifier.code 0} true;
    goto corral_source_split_859;

  $bb130:
    assume !(out_$i395 == 1);
    assume {:verifier.code 0} true;
    out_$i406 := 0;
    goto $bb131;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    out_$i406 := out_$i405;
    goto $bb131;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 150} out_$i405 := scnprintf.ref.i64.ref.ref(out_$p397, out_$i399, .str.79, out_$p404);
    call {:si_unique_call 151} {:cexpr "tmp___37"} boogie_si_record_i32(out_$i405);
    goto corral_source_split_857;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    out_$p404 := $bitcast.ref.ref(out_$p403);
    goto corral_source_split_856;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    out_$p403 := $add.ref($add.ref(out_$p402, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_855;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    out_$p402 := $load.ref($M.0, out_$p401);
    goto corral_source_split_854;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    out_$p401 := $add.ref($add.ref($add.ref(out_$p394, $mul.ref(0, 272)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_853;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    out_$i399 := $zext.i32.i64(out_$i398);
    goto corral_source_split_852;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    out_$i398 := $sub.i32(in_$i4, out_$i393);
    goto corral_source_split_851;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    out_$p397 := $add.ref(in_$p3, $mul.ref(out_$i396, 1));
    goto corral_source_split_850;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    out_$i396 := $sext.i32.i64(out_$i393);
    goto corral_source_split_849;

  $bb129:
    assume out_$i395 == 1;
    goto corral_source_split_848;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb129, $bb130;

  $bb128:
    assume {:verifier.code 0} true;
    out_$i395 := $ult.i32(out_$i393, in_$i4);
    goto corral_source_split_846;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb127:
    call out_$i395, out_$i396, out_$p397, out_$i398, out_$i399, out_$p401, out_$p402, out_$p403, out_$p404, out_$i405, out_$i406, out_$i407, out_$p409, out_$p410, out_$p411, out_$p412, out_$i413, out_$i414, out_$p416, out_$p417, out_$p418, out_$p419, out_$p420, out_$p421, out_$i422, out_$p423, out_$i424, out_$i425, out_$i426, out_$i427, out_$p429, out_$p430, out_$p431, out_$p432, out_$i433, out_$i434, out_$i393, out_$p394, out_$i435 := multipath_status_loop_$bb127(in_$i1, in_$p3, in_$i4, out_$i390, out_$i395, out_$i396, out_$p397, out_$i398, out_$i399, out_$p401, out_$p402, out_$p403, out_$p404, out_$i405, out_$i406, out_$i407, out_$p409, out_$p410, out_$p411, out_$p412, out_$i413, out_$i414, out_$p416, out_$p417, out_$p418, out_$p419, out_$p420, out_$p421, out_$i422, out_$p423, out_$i424, out_$i425, out_$i426, out_$i427, out_$p429, out_$p430, out_$p431, out_$p432, out_$i433, out_$i434, out_$i393, out_$p394, out_$i435, out_$p327);
    goto $bb127_last;

  $bb127_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_844;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    out_$i393, out_$p394 := out_$i382, out_$p385;
    goto $bb127;

  $bb135:
    assume out_$i434 == 1;
    assume {:verifier.code 0} true;
    out_$i393, out_$p394 := out_$i427, out_$p430;
    assume false;
    return;

  $bb124:
    assume out_$i391 == 1;
    goto corral_source_split_842;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    out_$i392 := out_$i382;
    assume true;
    goto $bb124, $bb125;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    out_$i391 := $ne.i64(out_$i388, out_$i390);
    goto corral_source_split_840;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    out_$i390 := $p2i.ref.i64(out_$p389);
    goto corral_source_split_839;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    out_$p389 := $add.ref($add.ref(out_$p327, $mul.ref(0, 72)), $mul.ref(56, 1));
    goto corral_source_split_838;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    out_$i388 := $p2i.ref.i64(out_$p387);
    goto corral_source_split_837;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    out_$p387 := $add.ref($add.ref(out_$p386, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_836;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    out_$p386 := $bitcast.ref.ref(out_$p385);
    goto corral_source_split_835;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    out_$p385 := $load.ref($M.0, out_$p384);
    goto corral_source_split_834;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    out_$p384 := $add.ref($add.ref($add.ref(out_$p327, $mul.ref(0, 72)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_833;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    out_$i382 := $add.i32(out_$i381, out_$i359);
    call {:si_unique_call 149} {:cexpr "sz"} boogie_si_record_i32(out_$i382);
    goto corral_source_split_832;

  $bb123:
    assume {:verifier.code 0} true;
    goto corral_source_split_831;

  $bb122:
    assume !(out_$i368 == 1);
    assume {:verifier.code 0} true;
    out_$i381 := 0;
    goto $bb123;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    out_$i381 := out_$i380;
    goto $bb123;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 147} out_$i380 := scnprintf.ref.i64.ref.i32.i32(out_$p370, out_$i372, .str.75, out_$i374, out_$i379);
    call {:si_unique_call 148} {:cexpr "tmp___35"} boogie_si_record_i32(out_$i380);
    goto corral_source_split_829;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    out_$i379 := $load.i32($M.0, out_$p378);
    goto corral_source_split_828;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    out_$p378 := $add.ref($add.ref(out_$p377, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_827;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    out_$p377 := $load.ref($M.0, out_$p376);
    goto corral_source_split_826;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    out_$p376 := $add.ref($add.ref($add.ref(out_$p327, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_825;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    out_$i374 := $load.i32($M.0, out_$p373);
    goto corral_source_split_824;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    out_$p373 := $add.ref($add.ref(out_$p327, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_823;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    out_$i372 := $zext.i32.i64(out_$i371);
    goto corral_source_split_822;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    out_$i371 := $sub.i32(in_$i4, out_$i359);
    goto corral_source_split_821;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    out_$p370 := $add.ref(in_$p3, $mul.ref(out_$i369, 1));
    goto corral_source_split_820;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    out_$i369 := $sext.i32.i64(out_$i359);
    goto corral_source_split_819;

  $bb121:
    assume out_$i368 == 1;
    goto corral_source_split_818;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb121, $bb122;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    out_$i368 := $ult.i32(out_$i359, in_$i4);
    goto corral_source_split_807;

  $bb117:
    assume {:verifier.code 0} true;
    goto corral_source_split_806;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    out_$i367 := $add.i32(out_$i366, out_$i340);
    call {:si_unique_call 146} {:cexpr "sz"} boogie_si_record_i32(out_$i367);
    assume {:verifier.code 0} true;
    out_$i359 := out_$i367;
    goto $bb117;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    out_$i359 := out_$i358;
    goto $bb117;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    out_$i358 := $add.i32(out_$i357, out_$i340);
    call {:si_unique_call 143} {:cexpr "sz"} boogie_si_record_i32(out_$i358);
    goto corral_source_split_801;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    out_$i356 := $sub.i32(in_$i4, out_$i340);
    call {:si_unique_call 141} out_$i357 := devirtbounce.2(out_$p352, out_$p353, $0.ref, in_$i1, out_$p355, out_$i356);
    call {:si_unique_call 142} {:cexpr "tmp___32"} boogie_si_record_i32(out_$i357);
    goto corral_source_split_800;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    out_$p355 := $add.ref(in_$p3, $mul.ref(out_$i354, 1));
    goto corral_source_split_799;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    out_$i354 := $sext.i32.i64(out_$i340);
    goto corral_source_split_798;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    out_$p353 := $add.ref($add.ref(out_$p327, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_797;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    out_$p352 := $load.ref($M.0, out_$p351);
    goto corral_source_split_796;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    out_$p351 := $add.ref($add.ref(out_$p350, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_795;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    out_$p350 := $load.ref($M.0, out_$p349);
    goto corral_source_split_794;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    out_$p349 := $add.ref($add.ref($add.ref(out_$p327, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_793;

  $bb115:
    assume out_$i347 == 1;
    goto corral_source_split_792;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb115, $bb116;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    out_$i347 := $ne.i64(out_$i346, 0);
    goto corral_source_split_790;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    out_$i346 := $p2i.ref.i64(out_$p345);
    goto corral_source_split_789;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    out_$p345 := $load.ref($M.0, out_$p344);
    goto corral_source_split_788;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    out_$p344 := $add.ref($add.ref(out_$p343, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_787;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    out_$p343 := $load.ref($M.0, out_$p342);
    goto corral_source_split_786;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    out_$p342 := $add.ref($add.ref($add.ref(out_$p327, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_785;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    out_$i340 := $add.i32(out_$i339, out_$i326);
    call {:si_unique_call 140} {:cexpr "sz"} boogie_si_record_i32(out_$i340);
    goto corral_source_split_784;

  $bb114:
    assume {:verifier.code 0} true;
    goto corral_source_split_783;

  $bb113:
    assume !(out_$i328 == 1);
    assume {:verifier.code 0} true;
    out_$i339 := 0;
    goto $bb114;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    out_$i339 := out_$i338;
    goto $bb114;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 138} out_$i338 := scnprintf.ref.i64.ref.ref(out_$p330, out_$i332, .str.79, out_$p337);
    call {:si_unique_call 139} {:cexpr "tmp___30"} boogie_si_record_i32(out_$i338);
    goto corral_source_split_781;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    out_$p337 := $load.ref($M.0, out_$p336);
    goto corral_source_split_780;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    out_$p336 := $add.ref($add.ref(out_$p335, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_779;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    out_$p335 := $load.ref($M.0, out_$p334);
    goto corral_source_split_778;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    out_$p334 := $add.ref($add.ref($add.ref(out_$p327, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_777;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    out_$i332 := $zext.i32.i64(out_$i331);
    goto corral_source_split_776;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    out_$i331 := $sub.i32(in_$i4, out_$i326);
    goto corral_source_split_775;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    out_$p330 := $add.ref(in_$p3, $mul.ref(out_$i329, 1));
    goto corral_source_split_774;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    out_$i329 := $sext.i32.i64(out_$i326);
    goto corral_source_split_773;

  $bb112:
    assume out_$i328 == 1;
    goto corral_source_split_772;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  $bb111:
    assume {:verifier.code 0} true;
    out_$i328 := $ult.i32(out_$i326, in_$i4);
    goto corral_source_split_770;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb120:
    assume {:verifier.code 0} true;
    goto corral_source_split_816;

  $bb119:
    assume !(out_$i360 == 1);
    assume {:verifier.code 0} true;
    out_$i366 := 0;
    goto $bb120;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    out_$i366 := out_$i365;
    goto $bb120;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 144} out_$i365 := scnprintf.ref.i64.ref(out_$p362, out_$i364, .str.72);
    call {:si_unique_call 145} {:cexpr "tmp___33"} boogie_si_record_i32(out_$i365);
    goto corral_source_split_814;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    out_$i364 := $zext.i32.i64(out_$i363);
    goto corral_source_split_813;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    out_$i363 := $sub.i32(in_$i4, out_$i340);
    goto corral_source_split_812;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    out_$p362 := $add.ref(in_$p3, $mul.ref(out_$i361, 1));
    goto corral_source_split_811;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    out_$i361 := $sext.i32.i64(out_$i340);
    goto corral_source_split_810;

  $bb118:
    assume out_$i360 == 1;
    goto corral_source_split_809;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb118, $bb119;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    out_$i360 := $ult.i32(out_$i340, in_$i4);
    goto corral_source_split_804;

  $bb116:
    assume !(out_$i347 == 1);
    goto corral_source_split_803;

  $bb138_dummy:
    call {:si_unique_call 1} out_$i328, out_$i329, out_$p330, out_$i331, out_$i332, out_$p334, out_$p335, out_$p336, out_$p337, out_$i338, out_$i339, out_$i340, out_$p342, out_$p343, out_$p344, out_$p345, out_$i346, out_$i347, out_$p349, out_$p350, out_$p351, out_$p352, out_$p353, out_$i354, out_$p355, out_$i356, out_$i357, out_$i358, out_$i360, out_$i361, out_$p362, out_$i363, out_$i364, out_$i365, out_$i366, out_$i367, out_$i359, out_$i368, out_$i369, out_$p370, out_$i371, out_$i372, out_$p373, out_$i374, out_$p376, out_$p377, out_$p378, out_$i379, out_$i380, out_$i381, out_$i382, out_$p384, out_$p385, out_$p386, out_$p387, out_$i388, out_$p389, out_$i390, out_$i391, out_$i395, out_$i396, out_$p397, out_$i398, out_$i399, out_$p401, out_$p402, out_$p403, out_$p404, out_$i405, out_$i406, out_$i407, out_$p409, out_$p410, out_$p411, out_$p412, out_$i413, out_$i414, out_$p416, out_$p417, out_$p418, out_$p419, out_$p420, out_$p421, out_$i422, out_$p423, out_$i424, out_$i425, out_$i426, out_$i427, out_$p429, out_$p430, out_$p431, out_$p432, out_$i433, out_$i434, out_$i393, out_$p394, out_$i435, out_$i392, out_$p437, out_$p438, out_$p439, out_$p440, out_$i441, out_$i442, out_$i326, out_$p327 := multipath_status_loop_$bb110(in_$i1, in_$p3, in_$i4, in_$i324, out_$i328, out_$i329, out_$p330, out_$i331, out_$i332, out_$p334, out_$p335, out_$p336, out_$p337, out_$i338, out_$i339, out_$i340, out_$p342, out_$p343, out_$p344, out_$p345, out_$i346, out_$i347, out_$p349, out_$p350, out_$p351, out_$p352, out_$p353, out_$i354, out_$p355, out_$i356, out_$i357, out_$i358, out_$i360, out_$i361, out_$p362, out_$i363, out_$i364, out_$i365, out_$i366, out_$i367, out_$i359, out_$i368, out_$i369, out_$p370, out_$i371, out_$i372, out_$p373, out_$i374, out_$p376, out_$p377, out_$p378, out_$i379, out_$i380, out_$i381, out_$i382, out_$p384, out_$p385, out_$p386, out_$p387, out_$i388, out_$p389, out_$i390, out_$i391, out_$i395, out_$i396, out_$p397, out_$i398, out_$i399, out_$p401, out_$p402, out_$p403, out_$p404, out_$i405, out_$i406, out_$i407, out_$p409, out_$p410, out_$p411, out_$p412, out_$i413, out_$i414, out_$p416, out_$p417, out_$p418, out_$p419, out_$p420, out_$p421, out_$i422, out_$p423, out_$i424, out_$i425, out_$i426, out_$i427, out_$p429, out_$p430, out_$p431, out_$p432, out_$i433, out_$i434, out_$i393, out_$p394, out_$i435, out_$i392, out_$p437, out_$p438, out_$p439, out_$p440, out_$i441, out_$i442, out_$i326, out_$p327);
    return;

  exit:
    return;
}



procedure multipath_status_loop_$bb110(in_$i1: i32, in_$p3: ref, in_$i4: i32, in_$i324: i64, in_$i328: i1, in_$i329: i64, in_$p330: ref, in_$i331: i32, in_$i332: i64, in_$p334: ref, in_$p335: ref, in_$p336: ref, in_$p337: ref, in_$i338: i32, in_$i339: i32, in_$i340: i32, in_$p342: ref, in_$p343: ref, in_$p344: ref, in_$p345: ref, in_$i346: i64, in_$i347: i1, in_$p349: ref, in_$p350: ref, in_$p351: ref, in_$p352: ref, in_$p353: ref, in_$i354: i64, in_$p355: ref, in_$i356: i32, in_$i357: i32, in_$i358: i32, in_$i360: i1, in_$i361: i64, in_$p362: ref, in_$i363: i32, in_$i364: i64, in_$i365: i32, in_$i366: i32, in_$i367: i32, in_$i359: i32, in_$i368: i1, in_$i369: i64, in_$p370: ref, in_$i371: i32, in_$i372: i64, in_$p373: ref, in_$i374: i32, in_$p376: ref, in_$p377: ref, in_$p378: ref, in_$i379: i32, in_$i380: i32, in_$i381: i32, in_$i382: i32, in_$p384: ref, in_$p385: ref, in_$p386: ref, in_$p387: ref, in_$i388: i64, in_$p389: ref, in_$i390: i64, in_$i391: i1, in_$i395: i1, in_$i396: i64, in_$p397: ref, in_$i398: i32, in_$i399: i64, in_$p401: ref, in_$p402: ref, in_$p403: ref, in_$p404: ref, in_$i405: i32, in_$i406: i32, in_$i407: i32, in_$p409: ref, in_$p410: ref, in_$p411: ref, in_$p412: ref, in_$i413: i64, in_$i414: i1, in_$p416: ref, in_$p417: ref, in_$p418: ref, in_$p419: ref, in_$p420: ref, in_$p421: ref, in_$i422: i64, in_$p423: ref, in_$i424: i32, in_$i425: i32, in_$i426: i32, in_$i427: i32, in_$p429: ref, in_$p430: ref, in_$p431: ref, in_$p432: ref, in_$i433: i64, in_$i434: i1, in_$i393: i32, in_$p394: ref, in_$i435: i32, in_$i392: i32, in_$p437: ref, in_$p438: ref, in_$p439: ref, in_$p440: ref, in_$i441: i64, in_$i442: i1, in_$i326: i32, in_$p327: ref) returns (out_$i328: i1, out_$i329: i64, out_$p330: ref, out_$i331: i32, out_$i332: i64, out_$p334: ref, out_$p335: ref, out_$p336: ref, out_$p337: ref, out_$i338: i32, out_$i339: i32, out_$i340: i32, out_$p342: ref, out_$p343: ref, out_$p344: ref, out_$p345: ref, out_$i346: i64, out_$i347: i1, out_$p349: ref, out_$p350: ref, out_$p351: ref, out_$p352: ref, out_$p353: ref, out_$i354: i64, out_$p355: ref, out_$i356: i32, out_$i357: i32, out_$i358: i32, out_$i360: i1, out_$i361: i64, out_$p362: ref, out_$i363: i32, out_$i364: i64, out_$i365: i32, out_$i366: i32, out_$i367: i32, out_$i359: i32, out_$i368: i1, out_$i369: i64, out_$p370: ref, out_$i371: i32, out_$i372: i64, out_$p373: ref, out_$i374: i32, out_$p376: ref, out_$p377: ref, out_$p378: ref, out_$i379: i32, out_$i380: i32, out_$i381: i32, out_$i382: i32, out_$p384: ref, out_$p385: ref, out_$p386: ref, out_$p387: ref, out_$i388: i64, out_$p389: ref, out_$i390: i64, out_$i391: i1, out_$i395: i1, out_$i396: i64, out_$p397: ref, out_$i398: i32, out_$i399: i64, out_$p401: ref, out_$p402: ref, out_$p403: ref, out_$p404: ref, out_$i405: i32, out_$i406: i32, out_$i407: i32, out_$p409: ref, out_$p410: ref, out_$p411: ref, out_$p412: ref, out_$i413: i64, out_$i414: i1, out_$p416: ref, out_$p417: ref, out_$p418: ref, out_$p419: ref, out_$p420: ref, out_$p421: ref, out_$i422: i64, out_$p423: ref, out_$i424: i32, out_$i425: i32, out_$i426: i32, out_$i427: i32, out_$p429: ref, out_$p430: ref, out_$p431: ref, out_$p432: ref, out_$i433: i64, out_$i434: i1, out_$i393: i32, out_$p394: ref, out_$i435: i32, out_$i392: i32, out_$p437: ref, out_$p438: ref, out_$p439: ref, out_$p440: ref, out_$i441: i64, out_$i442: i1, out_$i326: i32, out_$p327: ref);



implementation multipath_status_loop_$bb92(in_$i1: i32, in_$p3: ref, in_$i4: i32, in_$i258: i64, in_$i263: i1, in_$i264: i64, in_$p265: ref, in_$i266: i32, in_$i267: i64, in_$p269: ref, in_$p270: ref, in_$p271: ref, in_$p272: ref, in_$p273: ref, in_$i274: i32, in_$i275: i1, in_$p276: ref, in_$p277: ref, in_$i278: i32, in_$i279: i32, in_$i280: i32, in_$i281: i32, in_$p283: ref, in_$p284: ref, in_$p285: ref, in_$p286: ref, in_$i287: i64, in_$i288: i1, in_$p290: ref, in_$p291: ref, in_$p292: ref, in_$p293: ref, in_$p294: ref, in_$p295: ref, in_$i296: i64, in_$p297: ref, in_$i298: i32, in_$i299: i32, in_$i300: i32, in_$i301: i32, in_$p303: ref, in_$p304: ref, in_$p305: ref, in_$p306: ref, in_$i307: i64, in_$i308: i1, in_$i261: i32, in_$p262: ref, in_$i309: i32, in_$p189: ref) returns (out_$i263: i1, out_$i264: i64, out_$p265: ref, out_$i266: i32, out_$i267: i64, out_$p269: ref, out_$p270: ref, out_$p271: ref, out_$p272: ref, out_$p273: ref, out_$i274: i32, out_$i275: i1, out_$p276: ref, out_$p277: ref, out_$i278: i32, out_$i279: i32, out_$i280: i32, out_$i281: i32, out_$p283: ref, out_$p284: ref, out_$p285: ref, out_$p286: ref, out_$i287: i64, out_$i288: i1, out_$p290: ref, out_$p291: ref, out_$p292: ref, out_$p293: ref, out_$p294: ref, out_$p295: ref, out_$i296: i64, out_$p297: ref, out_$i298: i32, out_$i299: i32, out_$i300: i32, out_$i301: i32, out_$p303: ref, out_$p304: ref, out_$p305: ref, out_$p306: ref, out_$i307: i64, out_$i308: i1, out_$i261: i32, out_$p262: ref, out_$i309: i32)
{

  entry:
    out_$i263, out_$i264, out_$p265, out_$i266, out_$i267, out_$p269, out_$p270, out_$p271, out_$p272, out_$p273, out_$i274, out_$i275, out_$p276, out_$p277, out_$i278, out_$i279, out_$i280, out_$i281, out_$p283, out_$p284, out_$p285, out_$p286, out_$i287, out_$i288, out_$p290, out_$p291, out_$p292, out_$p293, out_$p294, out_$p295, out_$i296, out_$p297, out_$i298, out_$i299, out_$i300, out_$i301, out_$p303, out_$p304, out_$p305, out_$p306, out_$i307, out_$i308, out_$i261, out_$p262, out_$i309 := in_$i263, in_$i264, in_$p265, in_$i266, in_$i267, in_$p269, in_$p270, in_$p271, in_$p272, in_$p273, in_$i274, in_$i275, in_$p276, in_$p277, in_$i278, in_$i279, in_$i280, in_$i281, in_$p283, in_$p284, in_$p285, in_$p286, in_$i287, in_$i288, in_$p290, in_$p291, in_$p292, in_$p293, in_$p294, in_$p295, in_$i296, in_$p297, in_$i298, in_$i299, in_$i300, in_$i301, in_$p303, in_$p304, in_$p305, in_$p306, in_$i307, in_$i308, in_$i261, in_$p262, in_$i309;
    goto $bb92, exit;

  $bb92:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_702;

  $bb100:
    assume out_$i308 == 1;
    assume {:verifier.code 0} true;
    out_$i261, out_$p262 := out_$i301, out_$p304;
    goto $bb100_dummy;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    out_$i309 := out_$i301;
    assume true;
    goto $bb100;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    out_$i308 := $ne.i64(out_$i307, in_$i258);
    goto corral_source_split_750;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    out_$i307 := $p2i.ref.i64(out_$p306);
    goto corral_source_split_749;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    out_$p306 := $add.ref($add.ref(out_$p305, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_748;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    out_$p305 := $bitcast.ref.ref(out_$p304);
    goto corral_source_split_747;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    out_$p304 := $load.ref($M.0, out_$p303);
    goto corral_source_split_746;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    out_$p303 := $add.ref($add.ref($add.ref(out_$p262, $mul.ref(0, 272)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_745;

  $bb99:
    assume {:verifier.code 0} true;
    goto corral_source_split_744;

  $bb98:
    assume !(out_$i288 == 1);
    assume {:verifier.code 0} true;
    out_$i301 := out_$i281;
    goto $bb99;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    out_$i301 := out_$i300;
    goto $bb99;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    out_$i300 := $add.i32(out_$i299, out_$i281);
    call {:si_unique_call 136} {:cexpr "sz"} boogie_si_record_i32(out_$i300);
    goto corral_source_split_742;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    out_$i298 := $sub.i32(in_$i4, out_$i281);
    call {:si_unique_call 134} out_$i299 := devirtbounce.2(out_$p293, out_$p294, out_$p295, in_$i1, out_$p297, out_$i298);
    call {:si_unique_call 135} {:cexpr "tmp___29"} boogie_si_record_i32(out_$i299);
    goto corral_source_split_741;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    out_$p297 := $add.ref(in_$p3, $mul.ref(out_$i296, 1));
    goto corral_source_split_740;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    out_$i296 := $sext.i32.i64(out_$i281);
    goto corral_source_split_739;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    out_$p295 := $add.ref($add.ref(out_$p262, $mul.ref(0, 272)), $mul.ref(32, 1));
    goto corral_source_split_738;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    out_$p294 := $add.ref($add.ref(in_$p189, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_737;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    out_$p293 := $load.ref($M.0, out_$p292);
    goto corral_source_split_736;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    out_$p292 := $add.ref($add.ref(out_$p291, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_735;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    out_$p291 := $load.ref($M.0, out_$p290);
    goto corral_source_split_734;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    out_$p290 := $add.ref($add.ref($add.ref(in_$p189, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_733;

  $bb97:
    assume out_$i288 == 1;
    goto corral_source_split_732;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    out_$i288 := $ne.i64(out_$i287, 0);
    goto corral_source_split_730;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    out_$i287 := $p2i.ref.i64(out_$p286);
    goto corral_source_split_729;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    out_$p286 := $load.ref($M.0, out_$p285);
    goto corral_source_split_728;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    out_$p285 := $add.ref($add.ref(out_$p284, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_727;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    out_$p284 := $load.ref($M.0, out_$p283);
    goto corral_source_split_726;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    out_$p283 := $add.ref($add.ref($add.ref(in_$p189, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_725;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    out_$i281 := $add.i32(out_$i280, out_$i261);
    call {:si_unique_call 133} {:cexpr "sz"} boogie_si_record_i32(out_$i281);
    goto corral_source_split_724;

  $bb96:
    assume {:verifier.code 0} true;
    goto corral_source_split_723;

  $bb95:
    assume !(out_$i263 == 1);
    assume {:verifier.code 0} true;
    out_$i280 := 0;
    goto $bb96;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    out_$i280 := out_$i279;
    goto $bb96;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} out_$i279 := scnprintf.ref.i64.ref.ref.ref.i32(out_$p265, out_$i267, .str.76, out_$p272, out_$p276, out_$i278);
    call {:si_unique_call 132} {:cexpr "tmp___27"} boogie_si_record_i32(out_$i279);
    goto corral_source_split_721;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    out_$i278 := $load.i32($M.0, out_$p277);
    goto corral_source_split_720;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    out_$p277 := $add.ref($add.ref(out_$p262, $mul.ref(0, 272)), $mul.ref(28, 1));
    goto corral_source_split_719;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    out_$p276 := (if out_$i275 == 1 then .str.77 else .str.78);
    goto corral_source_split_718;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    out_$i275 := $ne.i32(out_$i274, 0);
    goto corral_source_split_717;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    out_$i274 := $load.i32($M.0, out_$p273);
    goto corral_source_split_716;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    out_$p273 := $add.ref($add.ref(out_$p262, $mul.ref(0, 272)), $mul.ref(24, 1));
    goto corral_source_split_715;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    out_$p272 := $bitcast.ref.ref(out_$p271);
    goto corral_source_split_714;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    out_$p271 := $add.ref($add.ref(out_$p270, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_713;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    out_$p270 := $load.ref($M.0, out_$p269);
    goto corral_source_split_712;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    out_$p269 := $add.ref($add.ref($add.ref(out_$p262, $mul.ref(0, 272)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_711;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    out_$i267 := $zext.i32.i64(out_$i266);
    goto corral_source_split_710;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    out_$i266 := $sub.i32(in_$i4, out_$i261);
    goto corral_source_split_709;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    out_$p265 := $add.ref(in_$p3, $mul.ref(out_$i264, 1));
    goto corral_source_split_708;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    out_$i264 := $sext.i32.i64(out_$i261);
    goto corral_source_split_707;

  $bb94:
    assume out_$i263 == 1;
    goto corral_source_split_706;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  $bb93:
    assume {:verifier.code 0} true;
    out_$i263 := $ult.i32(out_$i261, in_$i4);
    goto corral_source_split_704;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb100_dummy:
    call {:si_unique_call 1} out_$i263, out_$i264, out_$p265, out_$i266, out_$i267, out_$p269, out_$p270, out_$p271, out_$p272, out_$p273, out_$i274, out_$i275, out_$p276, out_$p277, out_$i278, out_$i279, out_$i280, out_$i281, out_$p283, out_$p284, out_$p285, out_$p286, out_$i287, out_$i288, out_$p290, out_$p291, out_$p292, out_$p293, out_$p294, out_$p295, out_$i296, out_$p297, out_$i298, out_$i299, out_$i300, out_$i301, out_$p303, out_$p304, out_$p305, out_$p306, out_$i307, out_$i308, out_$i261, out_$p262, out_$i309 := multipath_status_loop_$bb92(in_$i1, in_$p3, in_$i4, in_$i258, out_$i263, out_$i264, out_$p265, out_$i266, out_$i267, out_$p269, out_$p270, out_$p271, out_$p272, out_$p273, out_$i274, out_$i275, out_$p276, out_$p277, out_$i278, out_$i279, out_$i280, out_$i281, out_$p283, out_$p284, out_$p285, out_$p286, out_$i287, out_$i288, out_$p290, out_$p291, out_$p292, out_$p293, out_$p294, out_$p295, out_$i296, out_$p297, out_$i298, out_$i299, out_$i300, out_$i301, out_$p303, out_$p304, out_$p305, out_$p306, out_$i307, out_$i308, out_$i261, out_$p262, out_$i309, in_$p189);
    return;

  exit:
    return;
}



procedure multipath_status_loop_$bb92(in_$i1: i32, in_$p3: ref, in_$i4: i32, in_$i258: i64, in_$i263: i1, in_$i264: i64, in_$p265: ref, in_$i266: i32, in_$i267: i64, in_$p269: ref, in_$p270: ref, in_$p271: ref, in_$p272: ref, in_$p273: ref, in_$i274: i32, in_$i275: i1, in_$p276: ref, in_$p277: ref, in_$i278: i32, in_$i279: i32, in_$i280: i32, in_$i281: i32, in_$p283: ref, in_$p284: ref, in_$p285: ref, in_$p286: ref, in_$i287: i64, in_$i288: i1, in_$p290: ref, in_$p291: ref, in_$p292: ref, in_$p293: ref, in_$p294: ref, in_$p295: ref, in_$i296: i64, in_$p297: ref, in_$i298: i32, in_$i299: i32, in_$i300: i32, in_$i301: i32, in_$p303: ref, in_$p304: ref, in_$p305: ref, in_$p306: ref, in_$i307: i64, in_$i308: i1, in_$i261: i32, in_$p262: ref, in_$i309: i32, in_$p189: ref) returns (out_$i263: i1, out_$i264: i64, out_$p265: ref, out_$i266: i32, out_$i267: i64, out_$p269: ref, out_$p270: ref, out_$p271: ref, out_$p272: ref, out_$p273: ref, out_$i274: i32, out_$i275: i1, out_$p276: ref, out_$p277: ref, out_$i278: i32, out_$i279: i32, out_$i280: i32, out_$i281: i32, out_$p283: ref, out_$p284: ref, out_$p285: ref, out_$p286: ref, out_$i287: i64, out_$i288: i1, out_$p290: ref, out_$p291: ref, out_$p292: ref, out_$p293: ref, out_$p294: ref, out_$p295: ref, out_$i296: i64, out_$p297: ref, out_$i298: i32, out_$i299: i32, out_$i300: i32, out_$i301: i32, out_$p303: ref, out_$p304: ref, out_$p305: ref, out_$p306: ref, out_$i307: i64, out_$i308: i1, out_$i261: i32, out_$p262: ref, out_$i309: i32);



implementation multipath_status_loop_$bb69(in_$i1: i32, in_$p3: ref, in_$i4: i32, in_$p7: ref, in_$i186: i64, in_$p190: ref, in_$i191: i32, in_$i192: i1, in_$p194: ref, in_$p195: ref, in_$i196: i64, in_$i197: i64, in_$i198: i1, in_$i199: i8, in_$i193: i8, in_$i200: i1, in_$i201: i64, in_$p202: ref, in_$i203: i32, in_$i204: i64, in_$i205: i32, in_$i206: i32, in_$i207: i32, in_$i208: i32, in_$p210: ref, in_$p211: ref, in_$p212: ref, in_$p213: ref, in_$i214: i64, in_$i215: i1, in_$p217: ref, in_$p218: ref, in_$p219: ref, in_$p220: ref, in_$p221: ref, in_$i222: i64, in_$p223: ref, in_$i224: i32, in_$i225: i32, in_$i226: i32, in_$i228: i1, in_$i229: i64, in_$p230: ref, in_$i231: i32, in_$i232: i64, in_$i233: i32, in_$i234: i32, in_$i235: i32, in_$i227: i32, in_$i236: i1, in_$i237: i64, in_$p238: ref, in_$i239: i32, in_$i240: i64, in_$p241: ref, in_$i242: i32, in_$p244: ref, in_$p245: ref, in_$p246: ref, in_$i247: i32, in_$i248: i32, in_$i249: i32, in_$i250: i32, in_$p252: ref, in_$p253: ref, in_$p254: ref, in_$p255: ref, in_$i256: i64, in_$p257: ref, in_$i258: i64, in_$i259: i1, in_$i263: i1, in_$i264: i64, in_$p265: ref, in_$i266: i32, in_$i267: i64, in_$p269: ref, in_$p270: ref, in_$p271: ref, in_$p272: ref, in_$p273: ref, in_$i274: i32, in_$i275: i1, in_$p276: ref, in_$p277: ref, in_$i278: i32, in_$i279: i32, in_$i280: i32, in_$i281: i32, in_$p283: ref, in_$p284: ref, in_$p285: ref, in_$p286: ref, in_$i287: i64, in_$i288: i1, in_$p290: ref, in_$p291: ref, in_$p292: ref, in_$p293: ref, in_$p294: ref, in_$p295: ref, in_$i296: i64, in_$p297: ref, in_$i298: i32, in_$i299: i32, in_$i300: i32, in_$i301: i32, in_$p303: ref, in_$p304: ref, in_$p305: ref, in_$p306: ref, in_$i307: i64, in_$i308: i1, in_$i261: i32, in_$p262: ref, in_$i309: i32, in_$i260: i32, in_$p311: ref, in_$p312: ref, in_$p313: ref, in_$p314: ref, in_$i315: i64, in_$i316: i1, in_$i188: i32, in_$p189: ref) returns (out_$p190: ref, out_$i191: i32, out_$i192: i1, out_$p194: ref, out_$p195: ref, out_$i196: i64, out_$i197: i64, out_$i198: i1, out_$i199: i8, out_$i193: i8, out_$i200: i1, out_$i201: i64, out_$p202: ref, out_$i203: i32, out_$i204: i64, out_$i205: i32, out_$i206: i32, out_$i207: i32, out_$i208: i32, out_$p210: ref, out_$p211: ref, out_$p212: ref, out_$p213: ref, out_$i214: i64, out_$i215: i1, out_$p217: ref, out_$p218: ref, out_$p219: ref, out_$p220: ref, out_$p221: ref, out_$i222: i64, out_$p223: ref, out_$i224: i32, out_$i225: i32, out_$i226: i32, out_$i228: i1, out_$i229: i64, out_$p230: ref, out_$i231: i32, out_$i232: i64, out_$i233: i32, out_$i234: i32, out_$i235: i32, out_$i227: i32, out_$i236: i1, out_$i237: i64, out_$p238: ref, out_$i239: i32, out_$i240: i64, out_$p241: ref, out_$i242: i32, out_$p244: ref, out_$p245: ref, out_$p246: ref, out_$i247: i32, out_$i248: i32, out_$i249: i32, out_$i250: i32, out_$p252: ref, out_$p253: ref, out_$p254: ref, out_$p255: ref, out_$i256: i64, out_$p257: ref, out_$i258: i64, out_$i259: i1, out_$i263: i1, out_$i264: i64, out_$p265: ref, out_$i266: i32, out_$i267: i64, out_$p269: ref, out_$p270: ref, out_$p271: ref, out_$p272: ref, out_$p273: ref, out_$i274: i32, out_$i275: i1, out_$p276: ref, out_$p277: ref, out_$i278: i32, out_$i279: i32, out_$i280: i32, out_$i281: i32, out_$p283: ref, out_$p284: ref, out_$p285: ref, out_$p286: ref, out_$i287: i64, out_$i288: i1, out_$p290: ref, out_$p291: ref, out_$p292: ref, out_$p293: ref, out_$p294: ref, out_$p295: ref, out_$i296: i64, out_$p297: ref, out_$i298: i32, out_$i299: i32, out_$i300: i32, out_$i301: i32, out_$p303: ref, out_$p304: ref, out_$p305: ref, out_$p306: ref, out_$i307: i64, out_$i308: i1, out_$i261: i32, out_$p262: ref, out_$i309: i32, out_$i260: i32, out_$p311: ref, out_$p312: ref, out_$p313: ref, out_$p314: ref, out_$i315: i64, out_$i316: i1, out_$i188: i32, out_$p189: ref)
{

  entry:
    out_$p190, out_$i191, out_$i192, out_$p194, out_$p195, out_$i196, out_$i197, out_$i198, out_$i199, out_$i193, out_$i200, out_$i201, out_$p202, out_$i203, out_$i204, out_$i205, out_$i206, out_$i207, out_$i208, out_$p210, out_$p211, out_$p212, out_$p213, out_$i214, out_$i215, out_$p217, out_$p218, out_$p219, out_$p220, out_$p221, out_$i222, out_$p223, out_$i224, out_$i225, out_$i226, out_$i228, out_$i229, out_$p230, out_$i231, out_$i232, out_$i233, out_$i234, out_$i235, out_$i227, out_$i236, out_$i237, out_$p238, out_$i239, out_$i240, out_$p241, out_$i242, out_$p244, out_$p245, out_$p246, out_$i247, out_$i248, out_$i249, out_$i250, out_$p252, out_$p253, out_$p254, out_$p255, out_$i256, out_$p257, out_$i258, out_$i259, out_$i263, out_$i264, out_$p265, out_$i266, out_$i267, out_$p269, out_$p270, out_$p271, out_$p272, out_$p273, out_$i274, out_$i275, out_$p276, out_$p277, out_$i278, out_$i279, out_$i280, out_$i281, out_$p283, out_$p284, out_$p285, out_$p286, out_$i287, out_$i288, out_$p290, out_$p291, out_$p292, out_$p293, out_$p294, out_$p295, out_$i296, out_$p297, out_$i298, out_$i299, out_$i300, out_$i301, out_$p303, out_$p304, out_$p305, out_$p306, out_$i307, out_$i308, out_$i261, out_$p262, out_$i309, out_$i260, out_$p311, out_$p312, out_$p313, out_$p314, out_$i315, out_$i316, out_$i188, out_$p189 := in_$p190, in_$i191, in_$i192, in_$p194, in_$p195, in_$i196, in_$i197, in_$i198, in_$i199, in_$i193, in_$i200, in_$i201, in_$p202, in_$i203, in_$i204, in_$i205, in_$i206, in_$i207, in_$i208, in_$p210, in_$p211, in_$p212, in_$p213, in_$i214, in_$i215, in_$p217, in_$p218, in_$p219, in_$p220, in_$p221, in_$i222, in_$p223, in_$i224, in_$i225, in_$i226, in_$i228, in_$i229, in_$p230, in_$i231, in_$i232, in_$i233, in_$i234, in_$i235, in_$i227, in_$i236, in_$i237, in_$p238, in_$i239, in_$i240, in_$p241, in_$i242, in_$p244, in_$p245, in_$p246, in_$i247, in_$i248, in_$i249, in_$i250, in_$p252, in_$p253, in_$p254, in_$p255, in_$i256, in_$p257, in_$i258, in_$i259, in_$i263, in_$i264, in_$p265, in_$i266, in_$i267, in_$p269, in_$p270, in_$p271, in_$p272, in_$p273, in_$i274, in_$i275, in_$p276, in_$p277, in_$i278, in_$i279, in_$i280, in_$i281, in_$p283, in_$p284, in_$p285, in_$p286, in_$i287, in_$i288, in_$p290, in_$p291, in_$p292, in_$p293, in_$p294, in_$p295, in_$i296, in_$p297, in_$i298, in_$i299, in_$i300, in_$i301, in_$p303, in_$p304, in_$p305, in_$p306, in_$i307, in_$i308, in_$i261, in_$p262, in_$i309, in_$i260, in_$p311, in_$p312, in_$p313, in_$p314, in_$i315, in_$i316, in_$i188, in_$p189;
    goto $bb69, exit;

  $bb69:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_613;

  $bb103:
    assume out_$i316 == 1;
    assume {:verifier.code 0} true;
    out_$i188, out_$p189 := out_$i260, out_$p312;
    goto $bb103_dummy;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    out_$i316 := $ne.i64(out_$i315, in_$i186);
    goto corral_source_split_759;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    out_$i315 := $p2i.ref.i64(out_$p314);
    goto corral_source_split_758;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    out_$p314 := $add.ref($add.ref(out_$p313, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_757;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    out_$p313 := $bitcast.ref.ref(out_$p312);
    goto corral_source_split_756;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    out_$p312 := $load.ref($M.0, out_$p311);
    goto corral_source_split_755;

  $bb102:
    assume {:verifier.code 0} true;
    out_$p311 := $add.ref($add.ref($add.ref(out_$p189, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_754;

  $bb91:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb90:
    assume {:verifier.code 0} true;
    assume !(out_$i259 == 1);
    goto $bb91;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    out_$i260 := out_$i309;
    goto $bb91;

  $bb101:
    assume !(out_$i308 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_752;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    out_$i309 := out_$i301;
    assume true;
    goto $bb100, $bb101;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    out_$i308 := $ne.i64(out_$i307, out_$i258);
    goto corral_source_split_750;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    out_$i307 := $p2i.ref.i64(out_$p306);
    goto corral_source_split_749;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    out_$p306 := $add.ref($add.ref(out_$p305, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_748;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    out_$p305 := $bitcast.ref.ref(out_$p304);
    goto corral_source_split_747;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    out_$p304 := $load.ref($M.0, out_$p303);
    goto corral_source_split_746;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    out_$p303 := $add.ref($add.ref($add.ref(out_$p262, $mul.ref(0, 272)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_745;

  $bb99:
    assume {:verifier.code 0} true;
    goto corral_source_split_744;

  $bb98:
    assume !(out_$i288 == 1);
    assume {:verifier.code 0} true;
    out_$i301 := out_$i281;
    goto $bb99;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    out_$i301 := out_$i300;
    goto $bb99;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    out_$i300 := $add.i32(out_$i299, out_$i281);
    call {:si_unique_call 136} {:cexpr "sz"} boogie_si_record_i32(out_$i300);
    goto corral_source_split_742;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    out_$i298 := $sub.i32(in_$i4, out_$i281);
    call {:si_unique_call 134} out_$i299 := devirtbounce.2(out_$p293, out_$p294, out_$p295, in_$i1, out_$p297, out_$i298);
    call {:si_unique_call 135} {:cexpr "tmp___29"} boogie_si_record_i32(out_$i299);
    goto corral_source_split_741;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    out_$p297 := $add.ref(in_$p3, $mul.ref(out_$i296, 1));
    goto corral_source_split_740;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    out_$i296 := $sext.i32.i64(out_$i281);
    goto corral_source_split_739;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    out_$p295 := $add.ref($add.ref(out_$p262, $mul.ref(0, 272)), $mul.ref(32, 1));
    goto corral_source_split_738;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    out_$p294 := $add.ref($add.ref(out_$p189, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_737;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    out_$p293 := $load.ref($M.0, out_$p292);
    goto corral_source_split_736;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    out_$p292 := $add.ref($add.ref(out_$p291, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_735;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    out_$p291 := $load.ref($M.0, out_$p290);
    goto corral_source_split_734;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    out_$p290 := $add.ref($add.ref($add.ref(out_$p189, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_733;

  $bb97:
    assume out_$i288 == 1;
    goto corral_source_split_732;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    out_$i288 := $ne.i64(out_$i287, 0);
    goto corral_source_split_730;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    out_$i287 := $p2i.ref.i64(out_$p286);
    goto corral_source_split_729;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    out_$p286 := $load.ref($M.0, out_$p285);
    goto corral_source_split_728;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    out_$p285 := $add.ref($add.ref(out_$p284, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_727;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    out_$p284 := $load.ref($M.0, out_$p283);
    goto corral_source_split_726;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    out_$p283 := $add.ref($add.ref($add.ref(out_$p189, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_725;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    out_$i281 := $add.i32(out_$i280, out_$i261);
    call {:si_unique_call 133} {:cexpr "sz"} boogie_si_record_i32(out_$i281);
    goto corral_source_split_724;

  $bb96:
    assume {:verifier.code 0} true;
    goto corral_source_split_723;

  $bb95:
    assume !(out_$i263 == 1);
    assume {:verifier.code 0} true;
    out_$i280 := 0;
    goto $bb96;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    out_$i280 := out_$i279;
    goto $bb96;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} out_$i279 := scnprintf.ref.i64.ref.ref.ref.i32(out_$p265, out_$i267, .str.76, out_$p272, out_$p276, out_$i278);
    call {:si_unique_call 132} {:cexpr "tmp___27"} boogie_si_record_i32(out_$i279);
    goto corral_source_split_721;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    out_$i278 := $load.i32($M.0, out_$p277);
    goto corral_source_split_720;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    out_$p277 := $add.ref($add.ref(out_$p262, $mul.ref(0, 272)), $mul.ref(28, 1));
    goto corral_source_split_719;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    out_$p276 := (if out_$i275 == 1 then .str.77 else .str.78);
    goto corral_source_split_718;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    out_$i275 := $ne.i32(out_$i274, 0);
    goto corral_source_split_717;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    out_$i274 := $load.i32($M.0, out_$p273);
    goto corral_source_split_716;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    out_$p273 := $add.ref($add.ref(out_$p262, $mul.ref(0, 272)), $mul.ref(24, 1));
    goto corral_source_split_715;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    out_$p272 := $bitcast.ref.ref(out_$p271);
    goto corral_source_split_714;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    out_$p271 := $add.ref($add.ref(out_$p270, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_713;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    out_$p270 := $load.ref($M.0, out_$p269);
    goto corral_source_split_712;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    out_$p269 := $add.ref($add.ref($add.ref(out_$p262, $mul.ref(0, 272)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_711;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    out_$i267 := $zext.i32.i64(out_$i266);
    goto corral_source_split_710;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    out_$i266 := $sub.i32(in_$i4, out_$i261);
    goto corral_source_split_709;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    out_$p265 := $add.ref(in_$p3, $mul.ref(out_$i264, 1));
    goto corral_source_split_708;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    out_$i264 := $sext.i32.i64(out_$i261);
    goto corral_source_split_707;

  $bb94:
    assume out_$i263 == 1;
    goto corral_source_split_706;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  $bb93:
    assume {:verifier.code 0} true;
    out_$i263 := $ult.i32(out_$i261, in_$i4);
    goto corral_source_split_704;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb92:
    call out_$i263, out_$i264, out_$p265, out_$i266, out_$i267, out_$p269, out_$p270, out_$p271, out_$p272, out_$p273, out_$i274, out_$i275, out_$p276, out_$p277, out_$i278, out_$i279, out_$i280, out_$i281, out_$p283, out_$p284, out_$p285, out_$p286, out_$i287, out_$i288, out_$p290, out_$p291, out_$p292, out_$p293, out_$p294, out_$p295, out_$i296, out_$p297, out_$i298, out_$i299, out_$i300, out_$i301, out_$p303, out_$p304, out_$p305, out_$p306, out_$i307, out_$i308, out_$i261, out_$p262, out_$i309 := multipath_status_loop_$bb92(in_$i1, in_$p3, in_$i4, out_$i258, out_$i263, out_$i264, out_$p265, out_$i266, out_$i267, out_$p269, out_$p270, out_$p271, out_$p272, out_$p273, out_$i274, out_$i275, out_$p276, out_$p277, out_$i278, out_$i279, out_$i280, out_$i281, out_$p283, out_$p284, out_$p285, out_$p286, out_$i287, out_$i288, out_$p290, out_$p291, out_$p292, out_$p293, out_$p294, out_$p295, out_$i296, out_$p297, out_$i298, out_$i299, out_$i300, out_$i301, out_$p303, out_$p304, out_$p305, out_$p306, out_$i307, out_$i308, out_$i261, out_$p262, out_$i309, out_$p189);
    goto $bb92_last;

  $bb92_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_702;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    out_$i261, out_$p262 := out_$i250, out_$p253;
    goto $bb92;

  $bb100:
    assume out_$i308 == 1;
    assume {:verifier.code 0} true;
    out_$i261, out_$p262 := out_$i301, out_$p304;
    assume false;
    return;

  $bb89:
    assume out_$i259 == 1;
    goto corral_source_split_700;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    out_$i260 := out_$i250;
    assume true;
    goto $bb89, $bb90;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    out_$i259 := $ne.i64(out_$i256, out_$i258);
    goto corral_source_split_698;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    out_$i258 := $p2i.ref.i64(out_$p257);
    goto corral_source_split_697;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    out_$p257 := $add.ref($add.ref(out_$p189, $mul.ref(0, 72)), $mul.ref(56, 1));
    goto corral_source_split_696;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    out_$i256 := $p2i.ref.i64(out_$p255);
    goto corral_source_split_695;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    out_$p255 := $add.ref($add.ref(out_$p254, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_694;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    out_$p254 := $bitcast.ref.ref(out_$p253);
    goto corral_source_split_693;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    out_$p253 := $load.ref($M.0, out_$p252);
    goto corral_source_split_692;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    out_$p252 := $add.ref($add.ref($add.ref(out_$p189, $mul.ref(0, 72)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_691;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    out_$i250 := $add.i32(out_$i249, out_$i227);
    call {:si_unique_call 130} {:cexpr "sz"} boogie_si_record_i32(out_$i250);
    goto corral_source_split_690;

  $bb88:
    assume {:verifier.code 0} true;
    goto corral_source_split_689;

  $bb87:
    assume !(out_$i236 == 1);
    assume {:verifier.code 0} true;
    out_$i249 := 0;
    goto $bb88;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    out_$i249 := out_$i248;
    goto $bb88;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 128} out_$i248 := scnprintf.ref.i64.ref.i32.i32(out_$p238, out_$i240, .str.75, out_$i242, out_$i247);
    call {:si_unique_call 129} {:cexpr "tmp___25"} boogie_si_record_i32(out_$i248);
    goto corral_source_split_687;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    out_$i247 := $load.i32($M.0, out_$p246);
    goto corral_source_split_686;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    out_$p246 := $add.ref($add.ref(out_$p245, $mul.ref(0, 96)), $mul.ref(20, 1));
    goto corral_source_split_685;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    out_$p245 := $load.ref($M.0, out_$p244);
    goto corral_source_split_684;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    out_$p244 := $add.ref($add.ref($add.ref(out_$p189, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_683;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    out_$i242 := $load.i32($M.0, out_$p241);
    goto corral_source_split_682;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    out_$p241 := $add.ref($add.ref(out_$p189, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_681;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    out_$i240 := $zext.i32.i64(out_$i239);
    goto corral_source_split_680;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    out_$i239 := $sub.i32(in_$i4, out_$i227);
    goto corral_source_split_679;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    out_$p238 := $add.ref(in_$p3, $mul.ref(out_$i237, 1));
    goto corral_source_split_678;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    out_$i237 := $sext.i32.i64(out_$i227);
    goto corral_source_split_677;

  $bb86:
    assume out_$i236 == 1;
    goto corral_source_split_676;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    out_$i236 := $ult.i32(out_$i227, in_$i4);
    goto corral_source_split_665;

  $bb82:
    assume {:verifier.code 0} true;
    goto corral_source_split_664;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    out_$i235 := $add.i32(out_$i234, out_$i208);
    call {:si_unique_call 127} {:cexpr "sz"} boogie_si_record_i32(out_$i235);
    assume {:verifier.code 0} true;
    out_$i227 := out_$i235;
    goto $bb82;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    out_$i227 := out_$i226;
    goto $bb82;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    out_$i226 := $add.i32(out_$i225, out_$i208);
    call {:si_unique_call 124} {:cexpr "sz"} boogie_si_record_i32(out_$i226);
    goto corral_source_split_659;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    out_$i224 := $sub.i32(in_$i4, out_$i208);
    call {:si_unique_call 122} out_$i225 := devirtbounce.2(out_$p220, out_$p221, $0.ref, in_$i1, out_$p223, out_$i224);
    call {:si_unique_call 123} {:cexpr "tmp___22"} boogie_si_record_i32(out_$i225);
    goto corral_source_split_658;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    out_$p223 := $add.ref(in_$p3, $mul.ref(out_$i222, 1));
    goto corral_source_split_657;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    out_$i222 := $sext.i32.i64(out_$i208);
    goto corral_source_split_656;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    out_$p221 := $add.ref($add.ref(out_$p189, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_655;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    out_$p220 := $load.ref($M.0, out_$p219);
    goto corral_source_split_654;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    out_$p219 := $add.ref($add.ref(out_$p218, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_653;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    out_$p218 := $load.ref($M.0, out_$p217);
    goto corral_source_split_652;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    out_$p217 := $add.ref($add.ref($add.ref(out_$p189, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_651;

  $bb80:
    assume out_$i215 == 1;
    goto corral_source_split_650;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    out_$i215 := $ne.i64(out_$i214, 0);
    goto corral_source_split_648;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    out_$i214 := $p2i.ref.i64(out_$p213);
    goto corral_source_split_647;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    out_$p213 := $load.ref($M.0, out_$p212);
    goto corral_source_split_646;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    out_$p212 := $add.ref($add.ref(out_$p211, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_645;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    out_$p211 := $load.ref($M.0, out_$p210);
    goto corral_source_split_644;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    out_$p210 := $add.ref($add.ref($add.ref(out_$p189, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_643;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    out_$i208 := $add.i32(out_$i207, out_$i188);
    call {:si_unique_call 121} {:cexpr "sz"} boogie_si_record_i32(out_$i208);
    goto corral_source_split_642;

  $bb79:
    assume {:verifier.code 0} true;
    goto corral_source_split_641;

  $bb78:
    assume !(out_$i200 == 1);
    assume {:verifier.code 0} true;
    out_$i207 := 0;
    goto $bb79;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    out_$i207 := out_$i206;
    goto $bb79;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 119} out_$i206 := scnprintf.ref.i64.ref.i32(out_$p202, out_$i204, .str.74, out_$i205);
    call {:si_unique_call 120} {:cexpr "tmp___20"} boogie_si_record_i32(out_$i206);
    goto corral_source_split_639;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    out_$i205 := $sext.i8.i32(out_$i193);
    goto corral_source_split_638;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    out_$i204 := $zext.i32.i64(out_$i203);
    goto corral_source_split_637;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    out_$i203 := $sub.i32(in_$i4, out_$i188);
    goto corral_source_split_636;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    out_$p202 := $add.ref(in_$p3, $mul.ref(out_$i201, 1));
    goto corral_source_split_635;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    out_$i201 := $sext.i32.i64(out_$i188);
    goto corral_source_split_634;

  $bb77:
    assume out_$i200 == 1;
    goto corral_source_split_633;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    out_$i200 := $ult.i32(out_$i188, in_$i4);
    goto corral_source_split_629;

  $bb73:
    assume {:verifier.code 0} true;
    goto corral_source_split_628;

  $bb76:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$i193 := out_$i199;
    goto $bb73;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    out_$i193 := 68;
    goto $bb73;

  $bb71:
    assume out_$i192 == 1;
    goto corral_source_split_619;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    out_$i192 := $ne.i32(out_$i191, 0);
    goto corral_source_split_617;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    out_$i191 := $load.i32($M.0, out_$p190);
    goto corral_source_split_616;

  $bb70:
    assume {:verifier.code 0} true;
    out_$p190 := $add.ref($add.ref(out_$p189, $mul.ref(0, 72)), $mul.ref(44, 1));
    goto corral_source_split_615;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb75:
    assume !(out_$i198 == 1);
    assume {:verifier.code 0} true;
    out_$i199 := 69;
    goto $bb76;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    out_$i199 := 65;
    goto $bb76;

  $bb74:
    assume out_$i198 == 1;
    goto corral_source_split_631;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    out_$i198 := $eq.i64(out_$i196, out_$i197);
    goto corral_source_split_626;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    out_$i197 := $p2i.ref.i64(out_$p189);
    goto corral_source_split_625;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    out_$i196 := $p2i.ref.i64(out_$p195);
    goto corral_source_split_624;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    out_$p195 := $load.ref($M.0, out_$p194);
    goto corral_source_split_623;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    out_$p194 := $add.ref($add.ref(in_$p7, $mul.ref(0, 536)), $mul.ref(248, 1));
    goto corral_source_split_622;

  $bb72:
    assume !(out_$i192 == 1);
    goto corral_source_split_621;

  $bb85:
    assume {:verifier.code 0} true;
    goto corral_source_split_674;

  $bb84:
    assume !(out_$i228 == 1);
    assume {:verifier.code 0} true;
    out_$i234 := 0;
    goto $bb85;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    out_$i234 := out_$i233;
    goto $bb85;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 125} out_$i233 := scnprintf.ref.i64.ref(out_$p230, out_$i232, .str.72);
    call {:si_unique_call 126} {:cexpr "tmp___23"} boogie_si_record_i32(out_$i233);
    goto corral_source_split_672;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    out_$i232 := $zext.i32.i64(out_$i231);
    goto corral_source_split_671;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    out_$i231 := $sub.i32(in_$i4, out_$i208);
    goto corral_source_split_670;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    out_$p230 := $add.ref(in_$p3, $mul.ref(out_$i229, 1));
    goto corral_source_split_669;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    out_$i229 := $sext.i32.i64(out_$i208);
    goto corral_source_split_668;

  $bb83:
    assume out_$i228 == 1;
    goto corral_source_split_667;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    out_$i228 := $ult.i32(out_$i208, in_$i4);
    goto corral_source_split_662;

  $bb81:
    assume !(out_$i215 == 1);
    goto corral_source_split_661;

  $bb103_dummy:
    call {:si_unique_call 1} out_$p190, out_$i191, out_$i192, out_$p194, out_$p195, out_$i196, out_$i197, out_$i198, out_$i199, out_$i193, out_$i200, out_$i201, out_$p202, out_$i203, out_$i204, out_$i205, out_$i206, out_$i207, out_$i208, out_$p210, out_$p211, out_$p212, out_$p213, out_$i214, out_$i215, out_$p217, out_$p218, out_$p219, out_$p220, out_$p221, out_$i222, out_$p223, out_$i224, out_$i225, out_$i226, out_$i228, out_$i229, out_$p230, out_$i231, out_$i232, out_$i233, out_$i234, out_$i235, out_$i227, out_$i236, out_$i237, out_$p238, out_$i239, out_$i240, out_$p241, out_$i242, out_$p244, out_$p245, out_$p246, out_$i247, out_$i248, out_$i249, out_$i250, out_$p252, out_$p253, out_$p254, out_$p255, out_$i256, out_$p257, out_$i258, out_$i259, out_$i263, out_$i264, out_$p265, out_$i266, out_$i267, out_$p269, out_$p270, out_$p271, out_$p272, out_$p273, out_$i274, out_$i275, out_$p276, out_$p277, out_$i278, out_$i279, out_$i280, out_$i281, out_$p283, out_$p284, out_$p285, out_$p286, out_$i287, out_$i288, out_$p290, out_$p291, out_$p292, out_$p293, out_$p294, out_$p295, out_$i296, out_$p297, out_$i298, out_$i299, out_$i300, out_$i301, out_$p303, out_$p304, out_$p305, out_$p306, out_$i307, out_$i308, out_$i261, out_$p262, out_$i309, out_$i260, out_$p311, out_$p312, out_$p313, out_$p314, out_$i315, out_$i316, out_$i188, out_$p189 := multipath_status_loop_$bb69(in_$i1, in_$p3, in_$i4, in_$p7, in_$i186, out_$p190, out_$i191, out_$i192, out_$p194, out_$p195, out_$i196, out_$i197, out_$i198, out_$i199, out_$i193, out_$i200, out_$i201, out_$p202, out_$i203, out_$i204, out_$i205, out_$i206, out_$i207, out_$i208, out_$p210, out_$p211, out_$p212, out_$p213, out_$i214, out_$i215, out_$p217, out_$p218, out_$p219, out_$p220, out_$p221, out_$i222, out_$p223, out_$i224, out_$i225, out_$i226, out_$i228, out_$i229, out_$p230, out_$i231, out_$i232, out_$i233, out_$i234, out_$i235, out_$i227, out_$i236, out_$i237, out_$p238, out_$i239, out_$i240, out_$p241, out_$i242, out_$p244, out_$p245, out_$p246, out_$i247, out_$i248, out_$i249, out_$i250, out_$p252, out_$p253, out_$p254, out_$p255, out_$i256, out_$p257, out_$i258, out_$i259, out_$i263, out_$i264, out_$p265, out_$i266, out_$i267, out_$p269, out_$p270, out_$p271, out_$p272, out_$p273, out_$i274, out_$i275, out_$p276, out_$p277, out_$i278, out_$i279, out_$i280, out_$i281, out_$p283, out_$p284, out_$p285, out_$p286, out_$i287, out_$i288, out_$p290, out_$p291, out_$p292, out_$p293, out_$p294, out_$p295, out_$i296, out_$p297, out_$i298, out_$i299, out_$i300, out_$i301, out_$p303, out_$p304, out_$p305, out_$p306, out_$i307, out_$i308, out_$i261, out_$p262, out_$i309, out_$i260, out_$p311, out_$p312, out_$p313, out_$p314, out_$i315, out_$i316, out_$i188, out_$p189);
    return;

  exit:
    return;
}



procedure multipath_status_loop_$bb69(in_$i1: i32, in_$p3: ref, in_$i4: i32, in_$p7: ref, in_$i186: i64, in_$p190: ref, in_$i191: i32, in_$i192: i1, in_$p194: ref, in_$p195: ref, in_$i196: i64, in_$i197: i64, in_$i198: i1, in_$i199: i8, in_$i193: i8, in_$i200: i1, in_$i201: i64, in_$p202: ref, in_$i203: i32, in_$i204: i64, in_$i205: i32, in_$i206: i32, in_$i207: i32, in_$i208: i32, in_$p210: ref, in_$p211: ref, in_$p212: ref, in_$p213: ref, in_$i214: i64, in_$i215: i1, in_$p217: ref, in_$p218: ref, in_$p219: ref, in_$p220: ref, in_$p221: ref, in_$i222: i64, in_$p223: ref, in_$i224: i32, in_$i225: i32, in_$i226: i32, in_$i228: i1, in_$i229: i64, in_$p230: ref, in_$i231: i32, in_$i232: i64, in_$i233: i32, in_$i234: i32, in_$i235: i32, in_$i227: i32, in_$i236: i1, in_$i237: i64, in_$p238: ref, in_$i239: i32, in_$i240: i64, in_$p241: ref, in_$i242: i32, in_$p244: ref, in_$p245: ref, in_$p246: ref, in_$i247: i32, in_$i248: i32, in_$i249: i32, in_$i250: i32, in_$p252: ref, in_$p253: ref, in_$p254: ref, in_$p255: ref, in_$i256: i64, in_$p257: ref, in_$i258: i64, in_$i259: i1, in_$i263: i1, in_$i264: i64, in_$p265: ref, in_$i266: i32, in_$i267: i64, in_$p269: ref, in_$p270: ref, in_$p271: ref, in_$p272: ref, in_$p273: ref, in_$i274: i32, in_$i275: i1, in_$p276: ref, in_$p277: ref, in_$i278: i32, in_$i279: i32, in_$i280: i32, in_$i281: i32, in_$p283: ref, in_$p284: ref, in_$p285: ref, in_$p286: ref, in_$i287: i64, in_$i288: i1, in_$p290: ref, in_$p291: ref, in_$p292: ref, in_$p293: ref, in_$p294: ref, in_$p295: ref, in_$i296: i64, in_$p297: ref, in_$i298: i32, in_$i299: i32, in_$i300: i32, in_$i301: i32, in_$p303: ref, in_$p304: ref, in_$p305: ref, in_$p306: ref, in_$i307: i64, in_$i308: i1, in_$i261: i32, in_$p262: ref, in_$i309: i32, in_$i260: i32, in_$p311: ref, in_$p312: ref, in_$p313: ref, in_$p314: ref, in_$i315: i64, in_$i316: i1, in_$i188: i32, in_$p189: ref) returns (out_$p190: ref, out_$i191: i32, out_$i192: i1, out_$p194: ref, out_$p195: ref, out_$i196: i64, out_$i197: i64, out_$i198: i1, out_$i199: i8, out_$i193: i8, out_$i200: i1, out_$i201: i64, out_$p202: ref, out_$i203: i32, out_$i204: i64, out_$i205: i32, out_$i206: i32, out_$i207: i32, out_$i208: i32, out_$p210: ref, out_$p211: ref, out_$p212: ref, out_$p213: ref, out_$i214: i64, out_$i215: i1, out_$p217: ref, out_$p218: ref, out_$p219: ref, out_$p220: ref, out_$p221: ref, out_$i222: i64, out_$p223: ref, out_$i224: i32, out_$i225: i32, out_$i226: i32, out_$i228: i1, out_$i229: i64, out_$p230: ref, out_$i231: i32, out_$i232: i64, out_$i233: i32, out_$i234: i32, out_$i235: i32, out_$i227: i32, out_$i236: i1, out_$i237: i64, out_$p238: ref, out_$i239: i32, out_$i240: i64, out_$p241: ref, out_$i242: i32, out_$p244: ref, out_$p245: ref, out_$p246: ref, out_$i247: i32, out_$i248: i32, out_$i249: i32, out_$i250: i32, out_$p252: ref, out_$p253: ref, out_$p254: ref, out_$p255: ref, out_$i256: i64, out_$p257: ref, out_$i258: i64, out_$i259: i1, out_$i263: i1, out_$i264: i64, out_$p265: ref, out_$i266: i32, out_$i267: i64, out_$p269: ref, out_$p270: ref, out_$p271: ref, out_$p272: ref, out_$p273: ref, out_$i274: i32, out_$i275: i1, out_$p276: ref, out_$p277: ref, out_$i278: i32, out_$i279: i32, out_$i280: i32, out_$i281: i32, out_$p283: ref, out_$p284: ref, out_$p285: ref, out_$p286: ref, out_$i287: i64, out_$i288: i1, out_$p290: ref, out_$p291: ref, out_$p292: ref, out_$p293: ref, out_$p294: ref, out_$p295: ref, out_$i296: i64, out_$p297: ref, out_$i298: i32, out_$i299: i32, out_$i300: i32, out_$i301: i32, out_$p303: ref, out_$p304: ref, out_$p305: ref, out_$p306: ref, out_$i307: i64, out_$i308: i1, out_$i261: i32, out_$p262: ref, out_$i309: i32, out_$i260: i32, out_$p311: ref, out_$p312: ref, out_$p313: ref, out_$p314: ref, out_$i315: i64, out_$i316: i1, out_$i188: i32, out_$p189: ref);



implementation multipath_busy_loop_$bb23(in_$i52: i64, in_$p57: ref, in_$i58: i32, in_$i59: i1, in_$i60: i32, in_$i61: i1, in_$i64: i32, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$i70: i64, in_$i71: i1, in_$p55: ref, in_$i56: i32, in_$i72: i32) returns (out_$p57: ref, out_$i58: i32, out_$i59: i1, out_$i60: i32, out_$i61: i1, out_$i64: i32, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$i70: i64, out_$i71: i1, out_$p55: ref, out_$i56: i32, out_$i72: i32)
{

  entry:
    out_$p57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i64, out_$p66, out_$p67, out_$p68, out_$p69, out_$i70, out_$i71, out_$p55, out_$i56, out_$i72 := in_$p57, in_$i58, in_$i59, in_$i60, in_$i61, in_$i64, in_$p66, in_$p67, in_$p68, in_$p69, in_$i70, in_$i71, in_$p55, in_$i56, in_$i72;
    goto $bb23, exit;

  $bb23:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1203;

  $bb32:
    assume out_$i71 == 1;
    assume {:verifier.code 0} true;
    out_$p55, out_$i56 := out_$p67, out_$i64;
    goto $bb32_dummy;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    out_$i72 := out_$i64;
    assume true;
    goto $bb32;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    out_$i71 := $ne.i64(out_$i70, in_$i52);
    goto corral_source_split_1224;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    out_$i70 := $p2i.ref.i64(out_$p69);
    goto corral_source_split_1223;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref($add.ref(out_$p68, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_1222;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    out_$p68 := $bitcast.ref.ref(out_$p67);
    goto corral_source_split_1221;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    out_$p67 := $load.ref($M.0, out_$p66);
    goto corral_source_split_1220;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref($add.ref(out_$p55, $mul.ref(0, 272)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1219;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_1218;

  $bb26:
    assume !(out_$i59 == 1);
    assume {:verifier.code 0} true;
    out_$i64 := out_$i56;
    goto $bb31;

  $bb30:
    assume {:verifier.code 0} true;
    out_$i64 := 1;
    goto $bb31;

  $bb28:
    assume !(out_$i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    out_$i61 := $eq.i32(out_$i60, 0);
    goto corral_source_split_1211;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 229} out_$i60 := __pgpath_busy(out_$p55);
    call {:si_unique_call 230} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i60);
    goto corral_source_split_1210;

  $bb25:
    assume out_$i59 == 1;
    goto corral_source_split_1209;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    out_$i59 := $ne.i32(out_$i58, 0);
    goto corral_source_split_1207;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    out_$i58 := $load.i32($M.0, out_$p57);
    goto corral_source_split_1206;

  $bb24:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(out_$p55, $mul.ref(0, 272)), $mul.ref(24, 1));
    goto corral_source_split_1205;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb32_dummy:
    call {:si_unique_call 1} out_$p57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i64, out_$p66, out_$p67, out_$p68, out_$p69, out_$i70, out_$i71, out_$p55, out_$i56, out_$i72 := multipath_busy_loop_$bb23(in_$i52, out_$p57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i64, out_$p66, out_$p67, out_$p68, out_$p69, out_$i70, out_$i71, out_$p55, out_$i56, out_$i72);
    return;

  exit:
    return;
}



procedure multipath_busy_loop_$bb23(in_$i52: i64, in_$p57: ref, in_$i58: i32, in_$i59: i1, in_$i60: i32, in_$i61: i1, in_$i64: i32, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$i70: i64, in_$i71: i1, in_$p55: ref, in_$i56: i32, in_$i72: i32) returns (out_$p57: ref, out_$i58: i32, out_$i59: i1, out_$i60: i32, out_$i61: i1, out_$i64: i32, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$i70: i64, out_$i71: i1, out_$p55: ref, out_$i56: i32, out_$i72: i32);



implementation multipath_iterate_devices_loop_$bb9(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i25: i64, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$i33: i64, in_$p34: ref, in_$i35: i64, in_$i36: i32, in_$i37: i1, in_$i38: i32, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$i45: i64, in_$i46: i1, in_$p28: ref, in_$i47: i32) returns (out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$i33: i64, out_$p34: ref, out_$i35: i64, out_$i36: i32, out_$i37: i1, out_$i38: i32, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$i45: i64, out_$i46: i1, out_$p28: ref, out_$i47: i32)
{

  entry:
    out_$p30, out_$p31, out_$p32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p41, out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p28, out_$i47 := in_$p30, in_$p31, in_$p32, in_$i33, in_$p34, in_$i35, in_$i36, in_$i37, in_$i38, in_$p41, in_$p42, in_$p43, in_$p44, in_$i45, in_$i46, in_$p28, in_$i47;
    goto $bb9, exit;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_1260;

  $bb15:
    assume out_$i46 == 1;
    assume {:verifier.code 0} true;
    out_$p28 := out_$p42;
    goto $bb15_dummy;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    out_$i47 := out_$i36;
    assume true;
    goto $bb15;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    out_$i46 := $ne.i64(out_$i45, in_$i25);
    goto corral_source_split_1279;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    out_$i45 := $p2i.ref.i64(out_$p44);
    goto corral_source_split_1278;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(out_$p43, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_1277;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    out_$p43 := $bitcast.ref.ref(out_$p42);
    goto corral_source_split_1276;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    out_$p42 := $load.ref($M.0, out_$p41);
    goto corral_source_split_1275;

  $bb14:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref($add.ref(out_$p28, $mul.ref(0, 272)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1274;

  $bb12:
    assume !(out_$i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    out_$i38 := out_$i36;
    assume true;
    goto $bb12;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    out_$i37 := $ne.i32(out_$i36, 0);
    goto corral_source_split_1268;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    out_$i35 := $load.i64($M.0, out_$p34);
    call {:si_unique_call 231} out_$i36 := devirtbounce.3(in_$p1, in_$p0, out_$p31, out_$i33, out_$i35, in_$p2);
    call {:si_unique_call 232} {:cexpr "ret"} boogie_si_record_i32(out_$i36);
    goto corral_source_split_1267;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(in_$p0, $mul.ref(0, 88)), $mul.ref(24, 1));
    goto corral_source_split_1266;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i64($M.0, out_$p32);
    goto corral_source_split_1265;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(in_$p0, $mul.ref(0, 88)), $mul.ref(16, 1));
    goto corral_source_split_1264;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    out_$p31 := $load.ref($M.0, out_$p30);
    goto corral_source_split_1263;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref($add.ref(out_$p28, $mul.ref(0, 272)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_1262;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb15_dummy:
    call {:si_unique_call 1} out_$p30, out_$p31, out_$p32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p41, out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p28, out_$i47 := multipath_iterate_devices_loop_$bb9(in_$p0, in_$p1, in_$p2, in_$i25, out_$p30, out_$p31, out_$p32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p41, out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p28, out_$i47);
    return;

  exit:
    return;
}



procedure multipath_iterate_devices_loop_$bb9(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i25: i64, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$i33: i64, in_$p34: ref, in_$i35: i64, in_$i36: i32, in_$i37: i1, in_$i38: i32, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$i45: i64, in_$i46: i1, in_$p28: ref, in_$i47: i32) returns (out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$i33: i64, out_$p34: ref, out_$i35: i64, out_$i36: i32, out_$i37: i1, out_$i38: i32, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$i45: i64, out_$i46: i1, out_$p28: ref, out_$i47: i32);



implementation multipath_iterate_devices_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i13: i64, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$p24: ref, in_$i25: i64, in_$i26: i1, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$i33: i64, in_$p34: ref, in_$i35: i64, in_$i36: i32, in_$i37: i1, in_$i38: i32, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$i45: i64, in_$i46: i1, in_$p28: ref, in_$i47: i32, in_$i27: i32, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$i53: i64, in_$i54: i1, in_$i16: i32, in_$p17: ref, in_$i55: i32) returns (out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$p24: ref, out_$i25: i64, out_$i26: i1, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$i33: i64, out_$p34: ref, out_$i35: i64, out_$i36: i32, out_$i37: i1, out_$i38: i32, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$i45: i64, out_$i46: i1, out_$p28: ref, out_$i47: i32, out_$i27: i32, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$i53: i64, out_$i54: i1, out_$i16: i32, out_$p17: ref, out_$i55: i32)
{

  entry:
    out_$p19, out_$p20, out_$p21, out_$p22, out_$i23, out_$p24, out_$i25, out_$i26, out_$p30, out_$p31, out_$p32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p41, out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p28, out_$i47, out_$i27, out_$p49, out_$p50, out_$p51, out_$p52, out_$i53, out_$i54, out_$i16, out_$p17, out_$i55 := in_$p19, in_$p20, in_$p21, in_$p22, in_$i23, in_$p24, in_$i25, in_$i26, in_$p30, in_$p31, in_$p32, in_$i33, in_$p34, in_$i35, in_$i36, in_$i37, in_$i38, in_$p41, in_$p42, in_$p43, in_$p44, in_$i45, in_$i46, in_$p28, in_$i47, in_$i27, in_$p49, in_$p50, in_$p51, in_$p52, in_$i53, in_$i54, in_$i16, in_$p17, in_$i55;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1247;

  $bb18:
    assume out_$i54 == 1;
    assume {:verifier.code 0} true;
    out_$i16, out_$p17 := out_$i27, out_$p50;
    goto $bb18_dummy;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    out_$i55 := out_$i27;
    assume true;
    goto $bb18;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    out_$i54 := $ne.i64(out_$i53, in_$i13);
    goto corral_source_split_1288;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    out_$i53 := $p2i.ref.i64(out_$p52);
    goto corral_source_split_1287;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(out_$p51, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1286;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    out_$p51 := $bitcast.ref.ref(out_$p50);
    goto corral_source_split_1285;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    out_$p50 := $load.ref($M.0, out_$p49);
    goto corral_source_split_1284;

  $bb17:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref($add.ref(out_$p17, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1283;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i26 == 1);
    goto $bb8;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    out_$i27 := out_$i47;
    goto $bb8;

  $bb16:
    assume !(out_$i46 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1281;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    out_$i47 := out_$i36;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    out_$i46 := $ne.i64(out_$i45, out_$i25);
    goto corral_source_split_1279;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    out_$i45 := $p2i.ref.i64(out_$p44);
    goto corral_source_split_1278;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(out_$p43, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_1277;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    out_$p43 := $bitcast.ref.ref(out_$p42);
    goto corral_source_split_1276;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    out_$p42 := $load.ref($M.0, out_$p41);
    goto corral_source_split_1275;

  $bb14:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref($add.ref(out_$p28, $mul.ref(0, 272)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1274;

  $bb12:
    assume !(out_$i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    out_$i38 := out_$i36;
    assume true;
    goto $bb12;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    out_$i37 := $ne.i32(out_$i36, 0);
    goto corral_source_split_1268;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    out_$i35 := $load.i64($M.0, out_$p34);
    call {:si_unique_call 231} out_$i36 := devirtbounce.3(in_$p1, in_$p0, out_$p31, out_$i33, out_$i35, in_$p2);
    call {:si_unique_call 232} {:cexpr "ret"} boogie_si_record_i32(out_$i36);
    goto corral_source_split_1267;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(in_$p0, $mul.ref(0, 88)), $mul.ref(24, 1));
    goto corral_source_split_1266;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i64($M.0, out_$p32);
    goto corral_source_split_1265;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(in_$p0, $mul.ref(0, 88)), $mul.ref(16, 1));
    goto corral_source_split_1264;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    out_$p31 := $load.ref($M.0, out_$p30);
    goto corral_source_split_1263;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref($add.ref(out_$p28, $mul.ref(0, 272)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_1262;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb9:
    call out_$p30, out_$p31, out_$p32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p41, out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p28, out_$i47 := multipath_iterate_devices_loop_$bb9(in_$p0, in_$p1, in_$p2, out_$i25, out_$p30, out_$p31, out_$p32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p41, out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p28, out_$i47);
    goto $bb9_last;

  $bb9_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1260;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    out_$p28 := out_$p20;
    goto $bb9;

  $bb15:
    assume out_$i46 == 1;
    assume {:verifier.code 0} true;
    out_$p28 := out_$p42;
    assume false;
    return;

  $bb6:
    assume out_$i26 == 1;
    goto corral_source_split_1258;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    out_$i27 := out_$i16;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    out_$i26 := $ne.i64(out_$i23, out_$i25);
    goto corral_source_split_1256;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    out_$i25 := $p2i.ref.i64(out_$p24);
    goto corral_source_split_1255;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p17, $mul.ref(0, 72)), $mul.ref(56, 1));
    goto corral_source_split_1254;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    out_$i23 := $p2i.ref.i64(out_$p22);
    goto corral_source_split_1253;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(out_$p21, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_1252;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    out_$p21 := $bitcast.ref.ref(out_$p20);
    goto corral_source_split_1251;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.0, out_$p19);
    goto corral_source_split_1250;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref($add.ref(out_$p17, $mul.ref(0, 72)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_1249;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb18_dummy:
    call {:si_unique_call 1} out_$p19, out_$p20, out_$p21, out_$p22, out_$i23, out_$p24, out_$i25, out_$i26, out_$p30, out_$p31, out_$p32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p41, out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p28, out_$i47, out_$i27, out_$p49, out_$p50, out_$p51, out_$p52, out_$i53, out_$i54, out_$i16, out_$p17, out_$i55 := multipath_iterate_devices_loop_$bb4(in_$p0, in_$p1, in_$p2, in_$i13, out_$p19, out_$p20, out_$p21, out_$p22, out_$i23, out_$p24, out_$i25, out_$i26, out_$p30, out_$p31, out_$p32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p41, out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p28, out_$i47, out_$i27, out_$p49, out_$p50, out_$p51, out_$p52, out_$i53, out_$i54, out_$i16, out_$p17, out_$i55);
    return;

  exit:
    return;
}



procedure multipath_iterate_devices_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i13: i64, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$p24: ref, in_$i25: i64, in_$i26: i1, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$i33: i64, in_$p34: ref, in_$i35: i64, in_$i36: i32, in_$i37: i1, in_$i38: i32, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$i45: i64, in_$i46: i1, in_$p28: ref, in_$i47: i32, in_$i27: i32, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$i53: i64, in_$i54: i1, in_$i16: i32, in_$p17: ref, in_$i55: i32) returns (out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$p24: ref, out_$i25: i64, out_$i26: i1, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$i33: i64, out_$p34: ref, out_$i35: i64, out_$i36: i32, out_$i37: i1, out_$i38: i32, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$i45: i64, out_$i46: i1, out_$p28: ref, out_$i47: i32, out_$i27: i32, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$i53: i64, out_$i54: i1, out_$i16: i32, out_$p17: ref, out_$i55: i32);



implementation __choose_pgpath_loop_$bb42(in_$p0: ref, in_$i1: i64, in_$i40: i32, in_$i57: i64, in_$p61: ref, in_$p62: ref, in_$i63: i32, in_$i64: i1, in_$i65: i32, in_$i66: i1, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$i72: i64, in_$i73: i1) returns (out_$i40: i32, out_$p61: ref, out_$p62: ref, out_$i63: i32, out_$i64: i1, out_$i65: i32, out_$i66: i1, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$i72: i64, out_$i73: i1)
{

  entry:
    out_$i40, out_$p61, out_$p62, out_$i63, out_$i64, out_$i65, out_$i66, out_$p68, out_$p69, out_$p70, out_$p71, out_$i72, out_$i73 := in_$i40, in_$p61, in_$p62, in_$i63, in_$i64, in_$i65, in_$i66, in_$p68, in_$p69, in_$p70, in_$p71, in_$i72, in_$i73;
    goto $bb42, exit;

  $bb42:
    assume {:verifier.code 0} true;
    goto corral_source_split_1418;

  $bb51:
    assume out_$i73 == 1;
    assume {:verifier.code 0} true;
    out_$p61 := out_$p69;
    goto $bb51_dummy;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    out_$i73 := $ne.i64(out_$i72, in_$i57);
    goto corral_source_split_1434;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    out_$i72 := $p2i.ref.i64(out_$p71);
    goto corral_source_split_1433;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref(out_$p70, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1432;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    out_$p70 := $bitcast.ref.ref(out_$p69);
    goto corral_source_split_1431;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    out_$p69 := $load.ref($M.0, out_$p68);
    goto corral_source_split_1430;

  $bb50:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref($add.ref(out_$p61, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1429;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb50;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb44:
    assume out_$i64 == 1;
    goto corral_source_split_1424;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    out_$i64 := $eq.i32(out_$i63, 0);
    goto corral_source_split_1422;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    out_$i63 := $load.i32($M.0, out_$p62);
    goto corral_source_split_1421;

  $bb43:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref(out_$p61, $mul.ref(0, 72)), $mul.ref(44, 1));
    goto corral_source_split_1420;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb48:
    assume !(out_$i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    out_$i40 := 0;
    assume true;
    goto $bb48;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    out_$i66 := $eq.i32(out_$i65, 0);
    goto corral_source_split_1427;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 252} out_$i65 := __choose_path_in_pg(in_$p0, out_$p61, in_$i1);
    goto corral_source_split_1426;

  $bb45:
    assume !(out_$i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb51_dummy:
    call {:si_unique_call 1} out_$i40, out_$p61, out_$p62, out_$i63, out_$i64, out_$i65, out_$i66, out_$p68, out_$p69, out_$p70, out_$p71, out_$i72, out_$i73 := __choose_pgpath_loop_$bb42(in_$p0, in_$i1, out_$i40, in_$i57, out_$p61, out_$p62, out_$i63, out_$i64, out_$i65, out_$i66, out_$p68, out_$p69, out_$p70, out_$p71, out_$i72, out_$i73);
    return;

  exit:
    return;
}



procedure __choose_pgpath_loop_$bb42(in_$p0: ref, in_$i1: i64, in_$i40: i32, in_$i57: i64, in_$p61: ref, in_$p62: ref, in_$i63: i32, in_$i64: i1, in_$i65: i32, in_$i66: i1, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$i72: i64, in_$i73: i1) returns (out_$i40: i32, out_$p61: ref, out_$p62: ref, out_$i63: i32, out_$i64: i1, out_$i65: i32, out_$i66: i1, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$i72: i64, out_$i73: i1);
  modifies $M.0;



implementation __choose_pgpath_loop_$bb22(in_$p0: ref, in_$i1: i64, in_$i32: i64, in_$p35: ref, in_$i36: i32, in_$i37: i1, in_$i38: i32, in_$i39: i1, in_$i40: i32, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$i48: i64, in_$i49: i1, in_$p34: ref) returns (out_$p35: ref, out_$i36: i32, out_$i37: i1, out_$i38: i32, out_$i39: i1, out_$i40: i32, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$i48: i64, out_$i49: i1, out_$p34: ref)
{

  entry:
    out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$p44, out_$p45, out_$p46, out_$p47, out_$i48, out_$i49, out_$p34 := in_$p35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$p44, in_$p45, in_$p46, in_$p47, in_$i48, in_$i49, in_$p34;
    goto $bb22, exit;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_1380;

  $bb35:
    assume out_$i49 == 1;
    assume {:verifier.code 0} true;
    out_$p34 := out_$p45;
    goto $bb35_dummy;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    out_$i49 := $ne.i64(out_$i48, in_$i32);
    goto corral_source_split_1393;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    out_$i48 := $p2i.ref.i64(out_$p47);
    goto corral_source_split_1392;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(out_$p46, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1391;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    out_$p46 := $bitcast.ref.ref(out_$p45);
    goto corral_source_split_1390;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    out_$p45 := $load.ref($M.0, out_$p44);
    goto corral_source_split_1389;

  $bb26:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref($add.ref(out_$p34, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1388;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb24:
    assume out_$i37 == 1;
    goto corral_source_split_1386;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    out_$i37 := $eq.i32(out_$i36, 1);
    goto corral_source_split_1384;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    out_$i36 := $load.i32($M.0, out_$p35);
    goto corral_source_split_1383;

  $bb23:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(out_$p34, $mul.ref(0, 72)), $mul.ref(44, 1));
    goto corral_source_split_1382;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb30:
    assume !(out_$i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    out_$i40 := 1;
    assume true;
    goto $bb30;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    out_$i39 := $eq.i32(out_$i38, 0);
    goto corral_source_split_1396;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} out_$i38 := __choose_path_in_pg(in_$p0, out_$p34, in_$i1);
    call {:si_unique_call 251} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i38);
    goto corral_source_split_1395;

  $bb25:
    assume !(out_$i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb35_dummy:
    call {:si_unique_call 1} out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$p44, out_$p45, out_$p46, out_$p47, out_$i48, out_$i49, out_$p34 := __choose_pgpath_loop_$bb22(in_$p0, in_$i1, in_$i32, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$p44, out_$p45, out_$p46, out_$p47, out_$i48, out_$i49, out_$p34);
    return;

  exit:
    return;
}



procedure __choose_pgpath_loop_$bb22(in_$p0: ref, in_$i1: i64, in_$i32: i64, in_$p35: ref, in_$i36: i32, in_$i37: i1, in_$i38: i32, in_$i39: i1, in_$i40: i32, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$i48: i64, in_$i49: i1, in_$p34: ref) returns (out_$p35: ref, out_$i36: i32, out_$i37: i1, out_$i38: i32, out_$i39: i1, out_$i40: i32, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$i48: i64, out_$i49: i1, out_$p34: ref);
  modifies $M.0;



implementation __pg_init_all_paths_loop_$bb20(in_$p0: ref, in_$i29: i64, in_$p38: ref, in_$p44: ref, in_$i45: i32, in_$i46: i1, in_$p47: ref, in_$p48: ref, in_$i49: i1, in_$i50: i8, in_$i51: i1, in_$p52: ref, in_$i53: i32, in_$i54: i32, in_$p55: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$i61: i64, in_$p62: ref, in_$p63: ref, in_$i64: i64, in_$i65: i1, in_$p43: ref) returns (out_$p44: ref, out_$i45: i32, out_$i46: i1, out_$p47: ref, out_$p48: ref, out_$i49: i1, out_$i50: i8, out_$i51: i1, out_$p52: ref, out_$i53: i32, out_$i54: i32, out_$p55: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$i61: i64, out_$p62: ref, out_$p63: ref, out_$i64: i64, out_$i65: i1, out_$p43: ref)
{

  entry:
    out_$p44, out_$i45, out_$i46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$p52, out_$i53, out_$i54, out_$p55, out_$p57, out_$p58, out_$p59, out_$p60, out_$i61, out_$p62, out_$p63, out_$i64, out_$i65, out_$p43 := in_$p44, in_$i45, in_$i46, in_$p47, in_$p48, in_$i49, in_$i50, in_$i51, in_$p52, in_$i53, in_$i54, in_$p55, in_$p57, in_$p58, in_$p59, in_$p60, in_$i61, in_$p62, in_$p63, in_$i64, in_$i65, in_$p43;
    goto $bb20, exit;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_1523;

  $bb29:
    assume out_$i65 == 1;
    assume {:verifier.code 0} true;
    out_$p43 := out_$p58;
    goto $bb29_dummy;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    out_$i65 := $ne.i64(out_$i61, out_$i64);
    goto corral_source_split_1539;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    out_$i64 := $p2i.ref.i64(out_$p63);
    goto corral_source_split_1538;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref(out_$p62, $mul.ref(0, 72)), $mul.ref(56, 1));
    goto corral_source_split_1537;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    out_$p62 := $load.ref($M.0, in_$p38);
    goto corral_source_split_1536;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    out_$i61 := $p2i.ref.i64(out_$p60);
    goto corral_source_split_1535;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(out_$p59, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_1534;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    out_$p59 := $bitcast.ref.ref(out_$p58);
    goto corral_source_split_1533;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    out_$p58 := $load.ref($M.0, out_$p57);
    goto corral_source_split_1532;

  $bb24:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref($add.ref(out_$p43, $mul.ref(0, 272)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1531;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb22:
    assume out_$i46 == 1;
    goto corral_source_split_1529;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    out_$i46 := $eq.i32(out_$i45, 0);
    goto corral_source_split_1527;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    out_$i45 := $load.i32($M.0, out_$p44);
    goto corral_source_split_1526;

  $bb21:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(out_$p43, $mul.ref(0, 272)), $mul.ref(24, 1));
    goto corral_source_split_1525;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb27:
    assume !(out_$i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p55, out_$i54);
    goto corral_source_split_1552;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(in_$p0, $mul.ref(0, 536)), $mul.ref(228, 1));
    goto corral_source_split_1551;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    out_$i54 := $add.i32(out_$i53, 1);
    goto corral_source_split_1550;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    out_$i53 := $load.i32($M.0, out_$p52);
    goto corral_source_split_1549;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(in_$p0, $mul.ref(0, 536)), $mul.ref(228, 1));
    goto corral_source_split_1548;

  $bb26:
    assume out_$i51 == 1;
    goto corral_source_split_1547;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    out_$i51 := $trunc.i8.i1(out_$i50);
    goto corral_source_split_1545;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    out_$i50 := $zext.i1.i8(out_$i49);
    call {:si_unique_call 264} {:cexpr "tmp"} boogie_si_record_i8(out_$i50);
    goto corral_source_split_1544;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 263} out_$i49 := queue_delayed_work(out_$p47, out_$p48, in_$i29);
    goto corral_source_split_1543;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(out_$p43, $mul.ref(0, 272)), $mul.ref(48, 1));
    goto corral_source_split_1542;

  $bb25:
    assume {:verifier.code 0} true;
    out_$p47 := $M.8;
    goto corral_source_split_1541;

  $bb23:
    assume !(out_$i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb29_dummy:
    call {:si_unique_call 1} out_$p44, out_$i45, out_$i46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$p52, out_$i53, out_$i54, out_$p55, out_$p57, out_$p58, out_$p59, out_$p60, out_$i61, out_$p62, out_$p63, out_$i64, out_$i65, out_$p43 := __pg_init_all_paths_loop_$bb20(in_$p0, in_$i29, in_$p38, out_$p44, out_$i45, out_$i46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$p52, out_$i53, out_$i54, out_$p55, out_$p57, out_$p58, out_$p59, out_$p60, out_$i61, out_$p62, out_$p63, out_$i64, out_$i65, out_$p43);
    return;

  exit:
    return;
}



procedure __pg_init_all_paths_loop_$bb20(in_$p0: ref, in_$i29: i64, in_$p38: ref, in_$p44: ref, in_$i45: i32, in_$i46: i1, in_$p47: ref, in_$p48: ref, in_$i49: i1, in_$i50: i8, in_$i51: i1, in_$p52: ref, in_$i53: i32, in_$i54: i32, in_$p55: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$i61: i64, in_$p62: ref, in_$p63: ref, in_$i64: i64, in_$i65: i1, in_$p43: ref) returns (out_$p44: ref, out_$i45: i32, out_$i46: i1, out_$p47: ref, out_$p48: ref, out_$i49: i1, out_$i50: i8, out_$i51: i1, out_$p52: ref, out_$i53: i32, out_$i54: i32, out_$p55: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$i61: i64, out_$p62: ref, out_$p63: ref, out_$i64: i64, out_$i65: i1, out_$p43: ref);
  modifies $M.0, $M.10, $M.9, $M.12, $M.11, $M.14, $M.13, $M.16, $M.15;



implementation bypass_pg_num_loop_$bb17(in_$p3: ref, in_$i27: i64, in_$i31: i32, in_$i32: i32, in_$i33: i32, in_$i34: i1, in_$p35: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$i43: i1, in_$p30: ref, in_$p44: ref) returns (out_$i31: i32, out_$i32: i32, out_$i33: i32, out_$i34: i1, out_$p35: ref, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$i43: i1, out_$p30: ref, out_$p44: ref)
{

  entry:
    out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p38, out_$p39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p30, out_$p44 := in_$i31, in_$i32, in_$i33, in_$i34, in_$p35, in_$p38, in_$p39, in_$p40, in_$p41, in_$i42, in_$i43, in_$p30, in_$p44;
    goto $bb17, exit;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_1829;

  $bb23:
    assume out_$i43 == 1;
    assume {:verifier.code 0} true;
    out_$p30 := out_$p39;
    goto $bb23_dummy;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    out_$p44 := out_$p39;
    assume true;
    goto $bb23;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    out_$i43 := $ne.i64(out_$i42, in_$i27);
    goto corral_source_split_1847;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    out_$i42 := $p2i.ref.i64(out_$p41);
    goto corral_source_split_1846;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(out_$p40, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1845;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    out_$p40 := $bitcast.ref.ref(out_$p39);
    goto corral_source_split_1844;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    out_$p39 := $load.ref($M.0, out_$p38);
    goto corral_source_split_1843;

  $bb22:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref($add.ref(out_$p30, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1842;

  $bb20:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    out_$p35 := out_$p30;
    assume true;
    goto $bb20;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    out_$i34 := $eq.i32(out_$i33, 0);
    goto corral_source_split_1835;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i32($M.17, in_$p3);
    goto corral_source_split_1834;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    $M.17 := $store.i32($M.17, in_$p3, out_$i32);
    goto corral_source_split_1833;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    out_$i32 := $sub.i32(out_$i31, 1);
    goto corral_source_split_1832;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i32($M.17, in_$p3);
    goto corral_source_split_1831;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb23_dummy:
    call {:si_unique_call 1} out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p38, out_$p39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p30, out_$p44 := bypass_pg_num_loop_$bb17(in_$p3, in_$i27, out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p38, out_$p39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p30, out_$p44);
    return;

  exit:
    return;
}



procedure bypass_pg_num_loop_$bb17(in_$p3: ref, in_$i27: i64, in_$i31: i32, in_$i32: i32, in_$i33: i32, in_$i34: i1, in_$p35: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$i43: i1, in_$p30: ref, in_$p44: ref) returns (out_$i31: i32, out_$i32: i32, out_$i33: i32, out_$i34: i1, out_$p35: ref, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$i43: i1, out_$p30: ref, out_$p44: ref);
  modifies $M.17;



implementation switch_pg_num_loop_$bb17(in_$p0: ref, in_$p2: ref, in_$i29: i64, in_$p32: ref, in_$i33: i32, in_$i34: i32, in_$i35: i32, in_$i36: i1, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$i45: i64, in_$i46: i1, in_$p31: ref) returns (out_$p32: ref, out_$i33: i32, out_$i34: i32, out_$i35: i32, out_$i36: i1, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$i45: i64, out_$i46: i1, out_$p31: ref)
{

  entry:
    out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$p37, out_$p38, out_$p39, out_$p41, out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p31 := in_$p32, in_$i33, in_$i34, in_$i35, in_$i36, in_$p37, in_$p38, in_$p39, in_$p41, in_$p42, in_$p43, in_$p44, in_$i45, in_$i46, in_$p31;
    goto $bb17, exit;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_1897;

  $bb23:
    assume out_$i46 == 1;
    assume {:verifier.code 0} true;
    out_$p31 := out_$p42;
    goto $bb23_dummy;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    out_$i46 := $ne.i64(out_$i45, in_$i29);
    goto corral_source_split_1914;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    out_$i45 := $p2i.ref.i64(out_$p44);
    goto corral_source_split_1913;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(out_$p43, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1912;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    out_$p43 := $bitcast.ref.ref(out_$p42);
    goto corral_source_split_1911;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    out_$p42 := $load.ref($M.0, out_$p41);
    goto corral_source_split_1910;

  $bb21:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref($add.ref(out_$p31, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1909;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb19:
    assume out_$i36 == 1;
    goto corral_source_split_1907;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    out_$i36 := $ne.i32(out_$i35, 0);
    goto corral_source_split_1905;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    out_$i35 := $load.i32($M.18, in_$p2);
    goto corral_source_split_1904;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    $M.18 := $store.i32($M.18, in_$p2, out_$i34);
    goto corral_source_split_1903;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    out_$i34 := $sub.i32(out_$i33, 1);
    goto corral_source_split_1902;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i32($M.18, in_$p2);
    goto corral_source_split_1901;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p32, 0);
    goto corral_source_split_1900;

  $bb18:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(out_$p31, $mul.ref(0, 72)), $mul.ref(44, 1));
    goto corral_source_split_1899;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p39, out_$p31);
    goto corral_source_split_1921;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(in_$p0, $mul.ref(0, 536)), $mul.ref(256, 1));
    goto corral_source_split_1920;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p38, $0.ref);
    goto corral_source_split_1919;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(in_$p0, $mul.ref(0, 536)), $mul.ref(248, 1));
    goto corral_source_split_1918;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p37, $0.ref);
    goto corral_source_split_1917;

  $bb22:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(in_$p0, $mul.ref(0, 536)), $mul.ref(240, 1));
    goto corral_source_split_1916;

  $bb20:
    assume !(out_$i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb23_dummy:
    call {:si_unique_call 1} out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$p37, out_$p38, out_$p39, out_$p41, out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p31 := switch_pg_num_loop_$bb17(in_$p0, in_$p2, in_$i29, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$p37, out_$p38, out_$p39, out_$p41, out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p31);
    return;

  exit:
    return;
}



procedure switch_pg_num_loop_$bb17(in_$p0: ref, in_$p2: ref, in_$i29: i64, in_$p32: ref, in_$i33: i32, in_$i34: i32, in_$i35: i32, in_$i36: i1, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$i45: i64, in_$i46: i1, in_$p31: ref) returns (out_$p32: ref, out_$i33: i32, out_$i34: i32, out_$i35: i32, out_$i36: i1, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$i45: i64, out_$i46: i1, out_$p31: ref);
  modifies $M.18, $M.0;



implementation action_dev_loop_$bb9(in_$p1: ref, in_$p2: ref, in_$i22: i64, in_$p28: ref, in_$p29: ref, in_$i30: i64, in_$i31: i64, in_$i32: i1, in_$i33: i32, in_$i34: i32, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$i40: i64, in_$i41: i1, in_$p25: ref, in_$i26: i32, in_$i42: i32) returns (out_$p28: ref, out_$p29: ref, out_$i30: i64, out_$i31: i64, out_$i32: i1, out_$i33: i32, out_$i34: i32, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$i40: i64, out_$i41: i1, out_$p25: ref, out_$i26: i32, out_$i42: i32)
{

  entry:
    out_$p28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p36, out_$p37, out_$p38, out_$p39, out_$i40, out_$i41, out_$p25, out_$i26, out_$i42 := in_$p28, in_$p29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$p36, in_$p37, in_$p38, in_$p39, in_$i40, in_$i41, in_$p25, in_$i26, in_$i42;
    goto $bb9, exit;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2142;

  $bb14:
    assume out_$i41 == 1;
    assume {:verifier.code 0} true;
    out_$p25, out_$i26 := out_$p37, out_$i34;
    goto $bb14_dummy;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    out_$i42 := out_$i34;
    assume true;
    goto $bb14;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    out_$i41 := $ne.i64(out_$i40, in_$i22);
    goto corral_source_split_2158;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    out_$i40 := $p2i.ref.i64(out_$p39);
    goto corral_source_split_2157;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(out_$p38, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_2156;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    out_$p38 := $bitcast.ref.ref(out_$p37);
    goto corral_source_split_2155;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    out_$p37 := $load.ref($M.0, out_$p36);
    goto corral_source_split_2154;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref($add.ref(out_$p25, $mul.ref(0, 272)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2153;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_2152;

  $bb12:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    out_$i34 := out_$i26;
    goto $bb13;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    out_$i34 := out_$i33;
    goto $bb13;

  $bb11:
    assume out_$i32 == 1;
    call {:si_unique_call 387} out_$i33 := devirtbounce.9(in_$p2, out_$p25);
    call {:si_unique_call 388} {:cexpr "r"} boogie_si_record_i32(out_$i33);
    goto corral_source_split_2150;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    out_$i32 := $eq.i64(out_$i30, out_$i31);
    goto corral_source_split_2148;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    out_$i31 := $p2i.ref.i64(in_$p1);
    goto corral_source_split_2147;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    out_$i30 := $p2i.ref.i64(out_$p29);
    goto corral_source_split_2146;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    out_$p29 := $load.ref($M.0, out_$p28);
    goto corral_source_split_2145;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref($add.ref(out_$p25, $mul.ref(0, 272)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_2144;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb14_dummy:
    call {:si_unique_call 1} out_$p28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p36, out_$p37, out_$p38, out_$p39, out_$i40, out_$i41, out_$p25, out_$i26, out_$i42 := action_dev_loop_$bb9(in_$p1, in_$p2, in_$i22, out_$p28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p36, out_$p37, out_$p38, out_$p39, out_$i40, out_$i41, out_$p25, out_$i26, out_$i42);
    return;

  exit:
    return;
}



procedure action_dev_loop_$bb9(in_$p1: ref, in_$p2: ref, in_$i22: i64, in_$p28: ref, in_$p29: ref, in_$i30: i64, in_$i31: i64, in_$i32: i1, in_$i33: i32, in_$i34: i32, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$i40: i64, in_$i41: i1, in_$p25: ref, in_$i26: i32, in_$i42: i32) returns (out_$p28: ref, out_$p29: ref, out_$i30: i64, out_$i31: i64, out_$i32: i1, out_$i33: i32, out_$i34: i32, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$i40: i64, out_$i41: i1, out_$p25: ref, out_$i26: i32, out_$i42: i32);
  modifies $M.0, $M.10, $M.9, $M.12, $M.11, $M.14, $M.13, $M.16, $M.15, $CurrAddr;



implementation action_dev_loop_$bb4(in_$p1: ref, in_$p2: ref, in_$i10: i64, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$p21: ref, in_$i22: i64, in_$i23: i1, in_$p28: ref, in_$p29: ref, in_$i30: i64, in_$i31: i64, in_$i32: i1, in_$i33: i32, in_$i34: i32, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$i40: i64, in_$i41: i1, in_$p25: ref, in_$i26: i32, in_$i42: i32, in_$i24: i32, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$i48: i64, in_$i49: i1, in_$p13: ref, in_$i14: i32, in_$i50: i32) returns (out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$p21: ref, out_$i22: i64, out_$i23: i1, out_$p28: ref, out_$p29: ref, out_$i30: i64, out_$i31: i64, out_$i32: i1, out_$i33: i32, out_$i34: i32, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$i40: i64, out_$i41: i1, out_$p25: ref, out_$i26: i32, out_$i42: i32, out_$i24: i32, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$i48: i64, out_$i49: i1, out_$p13: ref, out_$i14: i32, out_$i50: i32)
{

  entry:
    out_$p16, out_$p17, out_$p18, out_$p19, out_$i20, out_$p21, out_$i22, out_$i23, out_$p28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p36, out_$p37, out_$p38, out_$p39, out_$i40, out_$i41, out_$p25, out_$i26, out_$i42, out_$i24, out_$p44, out_$p45, out_$p46, out_$p47, out_$i48, out_$i49, out_$p13, out_$i14, out_$i50 := in_$p16, in_$p17, in_$p18, in_$p19, in_$i20, in_$p21, in_$i22, in_$i23, in_$p28, in_$p29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$p36, in_$p37, in_$p38, in_$p39, in_$i40, in_$i41, in_$p25, in_$i26, in_$i42, in_$i24, in_$p44, in_$p45, in_$p46, in_$p47, in_$i48, in_$i49, in_$p13, in_$i14, in_$i50;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2129;

  $bb17:
    assume out_$i49 == 1;
    assume {:verifier.code 0} true;
    out_$p13, out_$i14 := out_$p45, out_$i24;
    goto $bb17_dummy;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    out_$i50 := out_$i24;
    assume true;
    goto $bb17;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    out_$i49 := $ne.i64(out_$i48, in_$i10);
    goto corral_source_split_2167;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    out_$i48 := $p2i.ref.i64(out_$p47);
    goto corral_source_split_2166;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(out_$p46, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2165;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    out_$p46 := $bitcast.ref.ref(out_$p45);
    goto corral_source_split_2164;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    out_$p45 := $load.ref($M.0, out_$p44);
    goto corral_source_split_2163;

  $bb16:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref($add.ref(out_$p13, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2162;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i23 == 1);
    goto $bb8;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    out_$i24 := out_$i42;
    goto $bb8;

  $bb15:
    assume !(out_$i41 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2160;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    out_$i42 := out_$i34;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    out_$i41 := $ne.i64(out_$i40, out_$i22);
    goto corral_source_split_2158;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    out_$i40 := $p2i.ref.i64(out_$p39);
    goto corral_source_split_2157;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(out_$p38, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_2156;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    out_$p38 := $bitcast.ref.ref(out_$p37);
    goto corral_source_split_2155;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    out_$p37 := $load.ref($M.0, out_$p36);
    goto corral_source_split_2154;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref($add.ref(out_$p25, $mul.ref(0, 272)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2153;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_2152;

  $bb12:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    out_$i34 := out_$i26;
    goto $bb13;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    out_$i34 := out_$i33;
    goto $bb13;

  $bb11:
    assume out_$i32 == 1;
    call {:si_unique_call 387} out_$i33 := devirtbounce.9(in_$p2, out_$p25);
    call {:si_unique_call 388} {:cexpr "r"} boogie_si_record_i32(out_$i33);
    goto corral_source_split_2150;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    out_$i32 := $eq.i64(out_$i30, out_$i31);
    goto corral_source_split_2148;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    out_$i31 := $p2i.ref.i64(in_$p1);
    goto corral_source_split_2147;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    out_$i30 := $p2i.ref.i64(out_$p29);
    goto corral_source_split_2146;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    out_$p29 := $load.ref($M.0, out_$p28);
    goto corral_source_split_2145;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref($add.ref(out_$p25, $mul.ref(0, 272)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_2144;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb9:
    call out_$p28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p36, out_$p37, out_$p38, out_$p39, out_$i40, out_$i41, out_$p25, out_$i26, out_$i42 := action_dev_loop_$bb9(in_$p1, in_$p2, out_$i22, out_$p28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p36, out_$p37, out_$p38, out_$p39, out_$i40, out_$i41, out_$p25, out_$i26, out_$i42);
    goto $bb9_last;

  $bb9_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2142;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    out_$p25, out_$i26 := out_$p17, out_$i14;
    goto $bb9;

  $bb14:
    assume out_$i41 == 1;
    assume {:verifier.code 0} true;
    out_$p25, out_$i26 := out_$p37, out_$i34;
    assume false;
    return;

  $bb6:
    assume out_$i23 == 1;
    goto corral_source_split_2140;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    out_$i24 := out_$i14;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    out_$i23 := $ne.i64(out_$i20, out_$i22);
    goto corral_source_split_2138;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    out_$i22 := $p2i.ref.i64(out_$p21);
    goto corral_source_split_2137;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p13, $mul.ref(0, 72)), $mul.ref(56, 1));
    goto corral_source_split_2136;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    out_$i20 := $p2i.ref.i64(out_$p19);
    goto corral_source_split_2135;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(out_$p18, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_2134;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    out_$p18 := $bitcast.ref.ref(out_$p17);
    goto corral_source_split_2133;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    out_$p17 := $load.ref($M.0, out_$p16);
    goto corral_source_split_2132;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref($add.ref(out_$p13, $mul.ref(0, 72)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_2131;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb17_dummy:
    call {:si_unique_call 1} out_$p16, out_$p17, out_$p18, out_$p19, out_$i20, out_$p21, out_$i22, out_$i23, out_$p28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p36, out_$p37, out_$p38, out_$p39, out_$i40, out_$i41, out_$p25, out_$i26, out_$i42, out_$i24, out_$p44, out_$p45, out_$p46, out_$p47, out_$i48, out_$i49, out_$p13, out_$i14, out_$i50 := action_dev_loop_$bb4(in_$p1, in_$p2, in_$i10, out_$p16, out_$p17, out_$p18, out_$p19, out_$i20, out_$p21, out_$i22, out_$i23, out_$p28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p36, out_$p37, out_$p38, out_$p39, out_$i40, out_$i41, out_$p25, out_$i26, out_$i42, out_$i24, out_$p44, out_$p45, out_$p46, out_$p47, out_$i48, out_$i49, out_$p13, out_$i14, out_$i50);
    return;

  exit:
    return;
}



procedure action_dev_loop_$bb4(in_$p1: ref, in_$p2: ref, in_$i10: i64, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$p21: ref, in_$i22: i64, in_$i23: i1, in_$p28: ref, in_$p29: ref, in_$i30: i64, in_$i31: i64, in_$i32: i1, in_$i33: i32, in_$i34: i32, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$i40: i64, in_$i41: i1, in_$p25: ref, in_$i26: i32, in_$i42: i32, in_$i24: i32, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$i48: i64, in_$i49: i1, in_$p13: ref, in_$i14: i32, in_$i50: i32) returns (out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$p21: ref, out_$i22: i64, out_$i23: i1, out_$p28: ref, out_$p29: ref, out_$i30: i64, out_$i31: i64, out_$i32: i1, out_$i33: i32, out_$i34: i32, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$i40: i64, out_$i41: i1, out_$p25: ref, out_$i26: i32, out_$i42: i32, out_$i24: i32, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$i48: i64, out_$i49: i1, out_$p13: ref, out_$i14: i32, out_$i50: i32);
  modifies $M.0, $M.10, $M.9, $M.12, $M.11, $M.14, $M.13, $M.16, $M.15, $CurrAddr;



implementation multipath_wait_for_pg_init_completion_loop_$bb1(in_$p0: ref, in_$p2: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$i18: i64, in_$p19: ref, in_$i20: i64, in_$p21: ref, in_$i22: i64, in_$p23: ref, in_$i24: i32, in_$i25: i1, in_$i26: i64, in_$p28: ref) returns (out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$i18: i64, out_$p19: ref, out_$i20: i64, out_$p21: ref, out_$i22: i64, out_$p23: ref, out_$i24: i32, out_$i25: i1, out_$i26: i64, out_$p28: ref)
{

  entry:
    out_$p15, out_$p16, out_$p17, out_$i18, out_$p19, out_$i20, out_$p21, out_$i22, out_$p23, out_$i24, out_$i25, out_$i26, out_$p28 := in_$p15, in_$p16, in_$p17, in_$i18, in_$p19, in_$i20, in_$p21, in_$i22, in_$p23, in_$i24, in_$i25, in_$i26, in_$p28;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} out_$p15 := get_current();
    goto corral_source_split_2278;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    goto corral_source_split_2308_dummy;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 454} io_schedule();
    goto corral_source_split_2308;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 453} spin_unlock_irqrestore(out_$p28, out_$i22);
    goto corral_source_split_2307;

  $bb6:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(in_$p0, $mul.ref(0, 536)), $mul.ref(40, 1));
    goto corral_source_split_2306;

  $bb4:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    out_$i26 := out_$i22;
    assume true;
    goto $bb4;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    out_$i25 := $eq.i32(out_$i24, 0);
    goto corral_source_split_2291;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i32($M.0, out_$p23);
    goto corral_source_split_2290;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(in_$p0, $mul.ref(0, 536)), $mul.ref(228, 1));
    goto corral_source_split_2289;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} out_$i22 := _raw_spin_lock_irqsave(out_$p21);
    call {:si_unique_call 448} {:cexpr "flags"} boogie_si_record_i64(out_$i22);
    goto corral_source_split_2288;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} out_$p21 := spinlock_check(in_$p14);
    goto corral_source_split_2287;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    goto $bb2;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    $M.25 := $store.i64($M.25, in_$p2, out_$i20);
    goto corral_source_split_2285;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(out_$p17, $mul.ref(0, 11744)), $mul.ref(0, 1));
    call {:si_unique_call 445} out_$i20 := devirtbounce.10(0, out_$p19, out_$i18, out_$p19);
    goto corral_source_split_2284;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    out_$i18 := $load.i64($M.25, in_$p2);
    goto corral_source_split_2283;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 444} out_$p17 := get_current();
    goto corral_source_split_2282;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    $M.25 := $store.i64($M.25, in_$p2, 2);
    goto corral_source_split_2281;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    $M.7 := $store.i64($M.7, out_$p16, 0);
    goto corral_source_split_2280;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(out_$p15, $mul.ref(0, 11744)), $mul.ref(11728, 1));
    goto corral_source_split_2279;

  corral_source_split_2308_dummy:
    call {:si_unique_call 1} out_$p15, out_$p16, out_$p17, out_$i18, out_$p19, out_$i20, out_$p21, out_$i22, out_$p23, out_$i24, out_$i25, out_$i26, out_$p28 := multipath_wait_for_pg_init_completion_loop_$bb1(in_$p0, in_$p2, in_$p14, out_$p15, out_$p16, out_$p17, out_$i18, out_$p19, out_$i20, out_$p21, out_$i22, out_$p23, out_$i24, out_$i25, out_$i26, out_$p28);
    return;

  exit:
    return;
}



procedure multipath_wait_for_pg_init_completion_loop_$bb1(in_$p0: ref, in_$p2: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$i18: i64, in_$p19: ref, in_$i20: i64, in_$p21: ref, in_$i22: i64, in_$p23: ref, in_$i24: i32, in_$i25: i1, in_$i26: i64, in_$p28: ref) returns (out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$i18: i64, out_$p19: ref, out_$i20: i64, out_$p21: ref, out_$i22: i64, out_$p23: ref, out_$i24: i32, out_$i25: i1, out_$i26: i64, out_$p28: ref);
  modifies $M.25, $M.7;



implementation free_multipath_loop_$bb4(in_$p0: ref, in_$i12: i64, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p20: ref, in_$p21: ref, in_$p23: ref, in_$i24: i64, in_$i25: i1, in_$p14: ref, in_$p15: ref) returns (out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$p20: ref, out_$p21: ref, out_$p23: ref, out_$i24: i64, out_$i25: i1, out_$p14: ref, out_$p15: ref)
{

  entry:
    out_$p16, out_$p17, out_$p18, out_$p20, out_$p21, out_$p23, out_$i24, out_$i25, out_$p14, out_$p15 := in_$p16, in_$p17, in_$p18, in_$p20, in_$p21, in_$p23, in_$i24, in_$i25, in_$p14, in_$p15;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2941;

  $bb6:
    assume out_$i25 == 1;
    assume {:verifier.code 0} true;
    out_$p14, out_$p15 := out_$p21, out_$p14;
    goto $bb6_dummy;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    out_$i25 := $ne.i64(out_$i24, in_$i12);
    goto corral_source_split_2953;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    out_$i24 := $p2i.ref.i64(out_$p23);
    goto corral_source_split_2952;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(out_$p14, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2951;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    goto corral_source_split_2950;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    out_$p21 := $load.ref($M.0, out_$p20);
    goto corral_source_split_2949;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref($add.ref(out_$p14, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2948;

  SeqInstr_12:
    goto corral_source_split_2947;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 561} free_priority_group(out_$p15, out_$p18);
    goto SeqInstr_11;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.0, out_$p17);
    goto corral_source_split_2946;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(in_$p0, $mul.ref(0, 536)), $mul.ref(16, 1));
    goto corral_source_split_2945;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} list_del(out_$p16);
    goto corral_source_split_2944;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(out_$p15, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2943;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p16, out_$p17, out_$p18, out_$p20, out_$p21, out_$p23, out_$i24, out_$i25, out_$p14, out_$p15 := free_multipath_loop_$bb4(in_$p0, in_$i12, out_$p16, out_$p17, out_$p18, out_$p20, out_$p21, out_$p23, out_$i24, out_$i25, out_$p14, out_$p15);
    return;

  exit:
    return;
}



procedure free_multipath_loop_$bb4(in_$p0: ref, in_$i12: i64, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p20: ref, in_$p21: ref, in_$p23: ref, in_$i24: i64, in_$i25: i1, in_$p14: ref, in_$p15: ref) returns (out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$p20: ref, out_$p21: ref, out_$p23: ref, out_$i24: i64, out_$i25: i1, out_$p14: ref, out_$p15: ref);
  modifies $M.0, $M.20, $M.21, $M.22, $M.23, $M.24, $M.7, $M.25, $M.26, $M.27, $M.9, $M.11, $M.13, $M.15, $M.10, $M.12, $M.14, $M.16, $CurrAddr, assertsPassed;



implementation free_pgpaths_loop_$bb4(in_$p1: ref, in_$p4: ref, in_$i14: i64, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i1, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p30: ref, in_$p31: ref, in_$p33: ref, in_$p34: ref, in_$p36: ref, in_$i37: i64, in_$i38: i1, in_$p16: ref, in_$p17: ref) returns (out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i1, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p30: ref, out_$p31: ref, out_$p33: ref, out_$p34: ref, out_$p36: ref, out_$i37: i64, out_$i38: i1, out_$p16: ref, out_$p17: ref)
{

  entry:
    out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p24, out_$p25, out_$p26, out_$p27, out_$p28, out_$p30, out_$p31, out_$p33, out_$p34, out_$p36, out_$i37, out_$i38, out_$p16, out_$p17 := in_$p18, in_$p19, in_$p20, in_$i21, in_$i22, in_$p24, in_$p25, in_$p26, in_$p27, in_$p28, in_$p30, in_$p31, in_$p33, in_$p34, in_$p36, in_$i37, in_$i38, in_$p16, in_$p17;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3027;

  $bb9:
    assume out_$i38 == 1;
    assume {:verifier.code 0} true;
    out_$p16, out_$p17 := out_$p34, out_$p16;
    goto $bb9_dummy;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    out_$i38 := $ne.i64(out_$i37, in_$i14);
    goto corral_source_split_3053;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    out_$i37 := $p2i.ref.i64(out_$p36);
    goto corral_source_split_3052;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(out_$p16, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_3051;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    goto corral_source_split_3050;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    out_$p34 := $load.ref($M.0, out_$p33);
    goto corral_source_split_3049;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref($add.ref(out_$p16, $mul.ref(0, 272)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3048;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 578} free_pgpath(out_$p17);
    goto corral_source_split_3047;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 577} dm_put_device(in_$p1, out_$p31);
    goto corral_source_split_3046;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    out_$p31 := $load.ref($M.0, out_$p30);
    goto corral_source_split_3045;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref($add.ref(out_$p17, $mul.ref(0, 272)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_3044;

  $bb7:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} scsi_dh_detach(out_$p28);
    goto corral_source_split_3042;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} out_$p28 := bdev_get_queue(out_$p27);
    goto corral_source_split_3041;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    out_$p27 := $load.ref($M.0, out_$p26);
    goto corral_source_split_3040;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(out_$p25, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3039;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    out_$p25 := $load.ref($M.0, out_$p24);
    goto corral_source_split_3038;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref($add.ref(out_$p17, $mul.ref(0, 272)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_3037;

  $bb6:
    assume out_$i22 == 1;
    goto corral_source_split_3036;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    out_$i22 := $ne.i64(out_$i21, 0);
    goto corral_source_split_3034;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    out_$i21 := $p2i.ref.i64(out_$p20);
    goto corral_source_split_3033;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.0, out_$p19);
    goto corral_source_split_3032;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(in_$p4, $mul.ref(0, 536)), $mul.ref(24, 1));
    goto corral_source_split_3031;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} list_del(out_$p18);
    goto corral_source_split_3030;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(out_$p17, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_3029;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb9_dummy:
    call {:si_unique_call 1} out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p24, out_$p25, out_$p26, out_$p27, out_$p28, out_$p30, out_$p31, out_$p33, out_$p34, out_$p36, out_$i37, out_$i38, out_$p16, out_$p17 := free_pgpaths_loop_$bb4(in_$p1, in_$p4, in_$i14, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p24, out_$p25, out_$p26, out_$p27, out_$p28, out_$p30, out_$p31, out_$p33, out_$p34, out_$p36, out_$i37, out_$i38, out_$p16, out_$p17);
    return;

  exit:
    return;
}



procedure free_pgpaths_loop_$bb4(in_$p1: ref, in_$p4: ref, in_$i14: i64, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i1, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p30: ref, in_$p31: ref, in_$p33: ref, in_$p34: ref, in_$p36: ref, in_$i37: i64, in_$i38: i1, in_$p16: ref, in_$p17: ref) returns (out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i1, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p30: ref, out_$p31: ref, out_$p33: ref, out_$p34: ref, out_$p36: ref, out_$i37: i64, out_$i38: i1, out_$p16: ref, out_$p17: ref);



implementation parse_features_loop_$bb8(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p5: ref, in_$i31: i32, in_$p32: ref, in_$i33: i32, in_$i34: i32, in_$i35: i32, in_$i36: i1, in_$i37: i32, in_$i39: i32, in_$i40: i1, in_$p41: ref, in_$i42: i8, in_$i43: i8, in_$i44: i8, in_$i45: i32, in_$i46: i1, in_$i47: i32, in_$i48: i1, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$i53: i32, in_$i54: i32, in_$i55: i32, in_$i56: i32, in_$i57: i1, in_$i58: i32, in_$i59: i1, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$i64: i32, in_$i65: i32, in_$i66: i32, in_$p67: ref, in_$i38: i32, in_$i68: i32, in_$i69: i1, in_$i70: i1, in_$i71: i1, in_$i72: i32) returns (out_$i31: i32, out_$p32: ref, out_$i33: i32, out_$i34: i32, out_$i35: i32, out_$i36: i1, out_$i37: i32, out_$i39: i32, out_$i40: i1, out_$p41: ref, out_$i42: i8, out_$i43: i8, out_$i44: i8, out_$i45: i32, out_$i46: i1, out_$i47: i32, out_$i48: i1, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$i53: i32, out_$i54: i32, out_$i55: i32, out_$i56: i32, out_$i57: i1, out_$i58: i32, out_$i59: i1, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$i64: i32, out_$i65: i32, out_$i66: i32, out_$p67: ref, out_$i38: i32, out_$i68: i32, out_$i69: i1, out_$i70: i1, out_$i71: i1, out_$i72: i32)
{

  entry:
    out_$i31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i39, out_$i40, out_$p41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$p49, out_$p50, out_$p51, out_$p52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$p60, out_$p61, out_$p62, out_$p63, out_$i64, out_$i65, out_$i66, out_$p67, out_$i38, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72 := in_$i31, in_$p32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i39, in_$i40, in_$p41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i47, in_$i48, in_$p49, in_$p50, in_$p51, in_$p52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i59, in_$p60, in_$p61, in_$p62, in_$p63, in_$i64, in_$i65, in_$i66, in_$p67, in_$i38, in_$i68, in_$i69, in_$i70, in_$i71, in_$i72;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_3185;

  $bb28:
    assume out_$i71 == 1;
    assume {:verifier.code 0} true;
    out_$i31 := out_$i38;
    goto $bb28_dummy;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    out_$i72 := out_$i38;
    assume true;
    goto $bb28;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    out_$i71 := $and.i1(out_$i69, out_$i70);
    goto corral_source_split_3200;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    out_$i70 := $eq.i32(out_$i38, 0);
    goto corral_source_split_3199;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    out_$i69 := $ne.i32(out_$i68, 0);
    goto corral_source_split_3198;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    out_$i68 := $load.i32($M.29, in_$p2);
    goto corral_source_split_3197;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_3196;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    out_$i38 := $sub.i32(0, 22);
    goto $bb11;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    out_$i38 := out_$i64;
    goto $bb11;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    out_$i38 := out_$i53;
    goto $bb11;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    out_$i38 := out_$i31;
    goto $bb11;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    out_$i38 := out_$i37;
    goto $bb11;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} out_$i37 := queue_if_no_path(in_$p1, 1, 0);
    call {:si_unique_call 611} {:cexpr "r"} boogie_si_record_i32(out_$i37);
    goto corral_source_split_3194;

  $bb9:
    assume out_$i36 == 1;
    goto corral_source_split_3193;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    out_$i36 := $eq.i32(out_$i35, 0);
    goto corral_source_split_3191;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} out_$i35 := strcasecmp(out_$p32, .str.28);
    call {:si_unique_call 609} {:cexpr "tmp"} boogie_si_record_i32(out_$i35);
    goto corral_source_split_3190;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    $M.29 := $store.i32($M.29, in_$p2, out_$i34);
    goto corral_source_split_3189;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    out_$i34 := $sub.i32(out_$i33, 1);
    goto corral_source_split_3188;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i32($M.29, in_$p2);
    goto corral_source_split_3187;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 607} out_$p32 := dm_shift_arg(in_$p0);
    goto corral_source_split_3186;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p41, out_$i44);
    goto corral_source_split_3210;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    out_$i44 := $or.i8(out_$i43, 8);
    goto corral_source_split_3209;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    out_$i43 := $and.i8(out_$i42, $sub.i8(0, 9));
    goto corral_source_split_3208;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    out_$i42 := $load.i8($M.0, out_$p41);
    goto corral_source_split_3207;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(in_$p1, $mul.ref(0, 536)), $mul.ref(268, 1));
    goto corral_source_split_3206;

  $bb13:
    assume out_$i40 == 1;
    goto corral_source_split_3205;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    out_$i40 := $eq.i32(out_$i39, 0);
    goto corral_source_split_3203;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} out_$i39 := strcasecmp(out_$p32, .str.29);
    call {:si_unique_call 613} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i39);
    goto corral_source_split_3202;

  $bb10:
    assume !(out_$i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    $M.29 := $store.i32($M.29, in_$p2, out_$i55);
    goto corral_source_split_3227;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    out_$i55 := $sub.i32(out_$i54, 1);
    goto corral_source_split_3226;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    out_$i54 := $load.i32($M.29, in_$p2);
    goto corral_source_split_3225;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} out_$i53 := dm_read_arg(out_$p50, in_$p0, out_$p51, out_$p52);
    call {:si_unique_call 617} {:cexpr "r"} boogie_si_record_i32(out_$i53);
    goto corral_source_split_3224;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(in_$p5, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_3223;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(in_$p1, $mul.ref(0, 536)), $mul.ref(272, 1));
    goto corral_source_split_3222;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref(out_$p49, $mul.ref(1, 16));
    goto corral_source_split_3221;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    out_$p49 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_3220;

  $bb19:
    assume out_$i48 == 1;
    goto corral_source_split_3219;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    out_$i48 := $ne.i32(out_$i47, 0);
    goto corral_source_split_3217;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    out_$i47 := $load.i32($M.29, in_$p2);
    goto corral_source_split_3216;

  $bb16:
    assume out_$i46 == 1;
    goto corral_source_split_3215;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    out_$i46 := $eq.i32(out_$i45, 0);
    goto corral_source_split_3213;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 614} out_$i45 := strcasecmp(out_$p32, .str.30);
    call {:si_unique_call 615} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i45);
    goto corral_source_split_3212;

  $bb14:
    assume !(out_$i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    $M.29 := $store.i32($M.29, in_$p2, out_$i66);
    goto corral_source_split_3244;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    out_$i66 := $sub.i32(out_$i65, 1);
    goto corral_source_split_3243;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    out_$i65 := $load.i32($M.29, in_$p2);
    goto corral_source_split_3242;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 620} out_$i64 := dm_read_arg(out_$p61, in_$p0, out_$p62, out_$p63);
    call {:si_unique_call 621} {:cexpr "r"} boogie_si_record_i32(out_$i64);
    goto corral_source_split_3241;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref(in_$p5, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_3240;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref(in_$p1, $mul.ref(0, 536)), $mul.ref(280, 1));
    goto corral_source_split_3239;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref(out_$p60, $mul.ref(2, 16));
    goto corral_source_split_3238;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    out_$p60 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_3237;

  $bb25:
    assume out_$i59 == 1;
    goto corral_source_split_3236;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    out_$i59 := $ne.i32(out_$i58, 0);
    goto corral_source_split_3234;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    out_$i58 := $load.i32($M.29, in_$p2);
    goto corral_source_split_3233;

  $bb22:
    assume out_$i57 == 1;
    goto corral_source_split_3232;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    out_$i57 := $eq.i32(out_$i56, 0);
    goto corral_source_split_3230;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 618} out_$i56 := strcasecmp(out_$p32, .str.31);
    call {:si_unique_call 619} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i56);
    goto corral_source_split_3229;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb17:
    assume {:verifier.code 0} true;
    assume !(out_$i46 == 1);
    goto $bb18;

  $bb20:
    assume {:verifier.code 0} true;
    assume !(out_$i48 == 1);
    goto $bb18;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p67, .str.32);
    goto corral_source_split_3247;

  $bb27:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref(in_$p5, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_3246;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb23:
    assume {:verifier.code 0} true;
    assume !(out_$i57 == 1);
    goto $bb24;

  $bb26:
    assume {:verifier.code 0} true;
    assume !(out_$i59 == 1);
    goto $bb24;

  $bb28_dummy:
    call {:si_unique_call 1} out_$i31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i39, out_$i40, out_$p41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$p49, out_$p50, out_$p51, out_$p52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$p60, out_$p61, out_$p62, out_$p63, out_$i64, out_$i65, out_$i66, out_$p67, out_$i38, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72 := parse_features_loop_$bb8(in_$p0, in_$p1, in_$p2, in_$p3, in_$p5, out_$i31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i39, out_$i40, out_$p41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$p49, out_$p50, out_$p51, out_$p52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$p60, out_$p61, out_$p62, out_$p63, out_$i64, out_$i65, out_$i66, out_$p67, out_$i38, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72);
    return;

  exit:
    return;
}



procedure parse_features_loop_$bb8(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p5: ref, in_$i31: i32, in_$p32: ref, in_$i33: i32, in_$i34: i32, in_$i35: i32, in_$i36: i1, in_$i37: i32, in_$i39: i32, in_$i40: i1, in_$p41: ref, in_$i42: i8, in_$i43: i8, in_$i44: i8, in_$i45: i32, in_$i46: i1, in_$i47: i32, in_$i48: i1, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$i53: i32, in_$i54: i32, in_$i55: i32, in_$i56: i32, in_$i57: i1, in_$i58: i32, in_$i59: i1, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$i64: i32, in_$i65: i32, in_$i66: i32, in_$p67: ref, in_$i38: i32, in_$i68: i32, in_$i69: i1, in_$i70: i1, in_$i71: i1, in_$i72: i32) returns (out_$i31: i32, out_$p32: ref, out_$i33: i32, out_$i34: i32, out_$i35: i32, out_$i36: i1, out_$i37: i32, out_$i39: i32, out_$i40: i1, out_$p41: ref, out_$i42: i8, out_$i43: i8, out_$i44: i8, out_$i45: i32, out_$i46: i1, out_$i47: i32, out_$i48: i1, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$i53: i32, out_$i54: i32, out_$i55: i32, out_$i56: i32, out_$i57: i1, out_$i58: i32, out_$i59: i1, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$i64: i32, out_$i65: i32, out_$i66: i32, out_$p67: ref, out_$i38: i32, out_$i68: i32, out_$i69: i1, out_$i70: i1, out_$i71: i1, out_$i72: i32);
  modifies $M.0, $M.29;



implementation parse_hw_handler_loop_$bb25(in_$p0: ref, in_$p2: ref, in_$p75: ref, in_$p76: ref, in_$i77: i64, in_$p78: ref, in_$p79: ref, in_$i80: i32, in_$i81: i32, in_$i82: i64, in_$i83: i64, in_$p84: ref, in_$i85: i32, in_$i86: i32, in_$i87: i1, in_$i73: i32, in_$p74: ref) returns (out_$p75: ref, out_$p76: ref, out_$i77: i64, out_$p78: ref, out_$p79: ref, out_$i80: i32, out_$i81: i32, out_$i82: i64, out_$i83: i64, out_$p84: ref, out_$i85: i32, out_$i86: i32, out_$i87: i1, out_$i73: i32, out_$p74: ref)
{

  entry:
    out_$p75, out_$p76, out_$i77, out_$p78, out_$p79, out_$i80, out_$i81, out_$i82, out_$i83, out_$p84, out_$i85, out_$i86, out_$i87, out_$i73, out_$p74 := in_$p75, in_$p76, in_$i77, in_$p78, in_$p79, in_$i80, in_$i81, in_$i82, in_$i83, in_$p84, in_$i85, in_$i86, in_$i87, in_$i73, in_$p74;
    goto $bb25, exit;

  $bb25:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3350;

  $bb27:
    assume out_$i87 == 1;
    assume {:verifier.code 0} true;
    out_$i73, out_$p74 := out_$i81, out_$p84;
    goto $bb27_dummy;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    out_$i87 := $ule.i32(out_$i81, out_$i86);
    goto corral_source_split_3364;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    out_$i86 := $sub.i32(out_$i85, 2);
    goto corral_source_split_3363;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    out_$i85 := $load.i32($M.29, in_$p2);
    goto corral_source_split_3362;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref(out_$p74, $mul.ref(out_$i83, 1));
    goto corral_source_split_3361;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    out_$i83 := $add.i64(out_$i82, 1);
    goto corral_source_split_3360;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    out_$i82 := $sext.i32.i64(out_$i80);
    goto corral_source_split_3359;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    out_$i81 := $add.i32(out_$i73, 1);
    call {:si_unique_call 647} {:cexpr "i"} boogie_si_record_i32(out_$i81);
    goto corral_source_split_3358;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} out_$i80 := sprintf.ref.ref.ref(out_$p74, .str.38, out_$p79);
    call {:si_unique_call 646} {:cexpr "j"} boogie_si_record_i32(out_$i80);
    goto corral_source_split_3357;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    out_$p79 := $load.ref($M.0, out_$p78);
    goto corral_source_split_3356;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    out_$p78 := $add.ref(out_$p76, $mul.ref(out_$i77, 8));
    goto corral_source_split_3355;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    out_$i77 := $sext.i32.i64(out_$i73);
    goto corral_source_split_3354;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    out_$p76 := $load.ref($M.5, out_$p75);
    goto corral_source_split_3353;

  $bb26:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref(in_$p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3352;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb27_dummy:
    call {:si_unique_call 1} out_$p75, out_$p76, out_$i77, out_$p78, out_$p79, out_$i80, out_$i81, out_$i82, out_$i83, out_$p84, out_$i85, out_$i86, out_$i87, out_$i73, out_$p74 := parse_hw_handler_loop_$bb25(in_$p0, in_$p2, out_$p75, out_$p76, out_$i77, out_$p78, out_$p79, out_$i80, out_$i81, out_$i82, out_$i83, out_$p84, out_$i85, out_$i86, out_$i87, out_$i73, out_$p74);
    return;

  exit:
    return;
}



procedure parse_hw_handler_loop_$bb25(in_$p0: ref, in_$p2: ref, in_$p75: ref, in_$p76: ref, in_$i77: i64, in_$p78: ref, in_$p79: ref, in_$i80: i32, in_$i81: i32, in_$i82: i64, in_$i83: i64, in_$p84: ref, in_$i85: i32, in_$i86: i32, in_$i87: i1, in_$i73: i32, in_$p74: ref) returns (out_$p75: ref, out_$p76: ref, out_$i77: i64, out_$p78: ref, out_$p79: ref, out_$i80: i32, out_$i81: i32, out_$i82: i64, out_$i83: i64, out_$p84: ref, out_$i85: i32, out_$i86: i32, out_$i87: i1, out_$i73: i32, out_$p74: ref);



implementation parse_hw_handler_loop_$bb17(in_$p0: ref, in_$p2: ref, in_$p47: ref, in_$p48: ref, in_$i49: i64, in_$p50: ref, in_$p51: ref, in_$i52: i64, in_$i53: i32, in_$i54: i32, in_$i55: i32, in_$i56: i32, in_$i57: i32, in_$i58: i32, in_$i59: i1, in_$i45: i32, in_$i46: i32, in_$i60: i32) returns (out_$p47: ref, out_$p48: ref, out_$i49: i64, out_$p50: ref, out_$p51: ref, out_$i52: i64, out_$i53: i32, out_$i54: i32, out_$i55: i32, out_$i56: i32, out_$i57: i32, out_$i58: i32, out_$i59: i1, out_$i45: i32, out_$i46: i32, out_$i60: i32)
{

  entry:
    out_$p47, out_$p48, out_$i49, out_$p50, out_$p51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i45, out_$i46, out_$i60 := in_$p47, in_$p48, in_$i49, in_$p50, in_$p51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i59, in_$i45, in_$i46, in_$i60;
    goto $bb17, exit;

  $bb17:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3316;

  $bb19:
    assume out_$i59 == 1;
    assume {:verifier.code 0} true;
    out_$i45, out_$i46 := out_$i55, out_$i56;
    goto $bb19_dummy;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    out_$i60 := out_$i55;
    assume true;
    goto $bb19;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    out_$i59 := $ule.i32(out_$i56, out_$i58);
    goto corral_source_split_3330;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    out_$i58 := $sub.i32(out_$i57, 2);
    goto corral_source_split_3329;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    out_$i57 := $load.i32($M.29, in_$p2);
    goto corral_source_split_3328;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    out_$i56 := $add.i32(out_$i46, 1);
    call {:si_unique_call 641} {:cexpr "i"} boogie_si_record_i32(out_$i56);
    goto corral_source_split_3327;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    out_$i55 := $add.i32(out_$i54, 1);
    call {:si_unique_call 640} {:cexpr "len"} boogie_si_record_i32(out_$i55);
    goto corral_source_split_3326;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    out_$i54 := $add.i32(out_$i53, out_$i45);
    goto corral_source_split_3325;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    out_$i53 := $trunc.i64.i32(out_$i52);
    goto corral_source_split_3324;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} out_$i52 := strlen(out_$p51);
    call {:si_unique_call 639} {:cexpr "tmp___7"} boogie_si_record_i64(out_$i52);
    goto corral_source_split_3323;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    out_$p51 := $load.ref($M.0, out_$p50);
    goto corral_source_split_3322;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref(out_$p48, $mul.ref(out_$i49, 8));
    goto corral_source_split_3321;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    out_$i49 := $sext.i32.i64(out_$i46);
    goto corral_source_split_3320;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    out_$p48 := $load.ref($M.5, out_$p47);
    goto corral_source_split_3319;

  $bb18:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(in_$p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3318;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb19_dummy:
    call {:si_unique_call 1} out_$p47, out_$p48, out_$i49, out_$p50, out_$p51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i45, out_$i46, out_$i60 := parse_hw_handler_loop_$bb17(in_$p0, in_$p2, out_$p47, out_$p48, out_$i49, out_$p50, out_$p51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i45, out_$i46, out_$i60);
    return;

  exit:
    return;
}



procedure parse_hw_handler_loop_$bb17(in_$p0: ref, in_$p2: ref, in_$p47: ref, in_$p48: ref, in_$i49: i64, in_$p50: ref, in_$p51: ref, in_$i52: i64, in_$i53: i32, in_$i54: i32, in_$i55: i32, in_$i56: i32, in_$i57: i32, in_$i58: i32, in_$i59: i1, in_$i45: i32, in_$i46: i32, in_$i60: i32) returns (out_$p47: ref, out_$p48: ref, out_$i49: i64, out_$p50: ref, out_$p51: ref, out_$i52: i64, out_$i53: i32, out_$i54: i32, out_$i55: i32, out_$i56: i32, out_$i57: i32, out_$i58: i32, out_$i59: i1, out_$i45: i32, out_$i46: i32, out_$i60: i32);



implementation parse_priority_group_loop_$bb21(in_$p0: ref, in_$p4: ref, in_$p18: ref, in_$p27: ref, in_$i48: i32, in_$p49: ref, in_$p53: ref, in_$i54: i32, in_$i55: i1, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$i64: i1, in_$i65: i8, in_$i66: i1, in_$p67: ref, in_$p71: ref, in_$p72: ref, in_$p73: ref, in_$i74: i32, in_$i75: i32, in_$i76: i1, in_$i52: i32) returns (out_$p53: ref, out_$i54: i32, out_$i55: i1, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$i64: i1, out_$i65: i8, out_$i66: i1, out_$p67: ref, out_$p71: ref, out_$p72: ref, out_$p73: ref, out_$i74: i32, out_$i75: i32, out_$i76: i1, out_$i52: i32)
{

  entry:
    out_$p53, out_$i54, out_$i55, out_$p57, out_$p58, out_$p59, out_$p60, out_$p61, out_$p62, out_$p63, out_$i64, out_$i65, out_$i66, out_$p67, out_$p71, out_$p72, out_$p73, out_$i74, out_$i75, out_$i76, out_$i52 := in_$p53, in_$i54, in_$i55, in_$p57, in_$p58, in_$p59, in_$p60, in_$p61, in_$p62, in_$p63, in_$i64, in_$i65, in_$i66, in_$p67, in_$p71, in_$p72, in_$p73, in_$i74, in_$i75, in_$i76, in_$i52;
    goto $bb21, exit;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_3449;

  $bb29:
    assume out_$i76 == 1;
    assume {:verifier.code 0} true;
    out_$i52 := out_$i74;
    goto $bb29_dummy;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    out_$i76 := $ugt.i32(out_$i75, out_$i74);
    goto corral_source_split_3485;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    out_$i75 := $load.i32($M.0, in_$p49);
    goto corral_source_split_3484;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    out_$i74 := $add.i32(out_$i52, 1);
    call {:si_unique_call 674} {:cexpr "i"} boogie_si_record_i32(out_$i74);
    goto corral_source_split_3483;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 673} dm_consume_args(in_$p0, in_$i48);
    goto corral_source_split_3482;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 672} list_add_tail(out_$p72, out_$p73);
    goto corral_source_split_3481;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref(in_$p27, $mul.ref(0, 72)), $mul.ref(56, 1));
    goto corral_source_split_3480;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref(out_$p62, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_3479;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p71, in_$p27);
    goto corral_source_split_3478;

  $bb28:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref(out_$p62, $mul.ref(0, 272)), $mul.ref(16, 1));
    goto corral_source_split_3477;

  $bb27:
    assume !(out_$i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    out_$p67 := out_$p62;
    assume true;
    goto $bb27;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    out_$i66 := $trunc.i8.i1(out_$i65);
    goto corral_source_split_3470;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    out_$i65 := $zext.i1.i8(out_$i64);
    call {:si_unique_call 668} {:cexpr "tmp___2"} boogie_si_record_i8(out_$i65);
    goto corral_source_split_3469;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 667} out_$i64 := IS_ERR(out_$p63);
    goto corral_source_split_3468;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    out_$p63 := $bitcast.ref.ref(out_$p62);
    goto corral_source_split_3467;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} out_$p62 := parse_path(in_$p4, out_$p61, in_$p18);
    goto corral_source_split_3466;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(in_$p27, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_3465;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, out_$p60, out_$p59);
    goto corral_source_split_3464;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(in_$p4, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3463;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    out_$p59 := $load.ref($M.5, out_$p58);
    goto corral_source_split_3462;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(in_$p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3461;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, out_$p57, in_$i48);
    goto corral_source_split_3460;

  $bb25:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(in_$p4, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3459;

  $bb24:
    assume !(out_$i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    out_$i55 := $ult.i32(out_$i54, in_$i48);
    goto corral_source_split_3453;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    out_$i54 := $load.i32($M.4, out_$p53);
    goto corral_source_split_3452;

  $bb22:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(in_$p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3451;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb29_dummy:
    call {:si_unique_call 1} out_$p53, out_$i54, out_$i55, out_$p57, out_$p58, out_$p59, out_$p60, out_$p61, out_$p62, out_$p63, out_$i64, out_$i65, out_$i66, out_$p67, out_$p71, out_$p72, out_$p73, out_$i74, out_$i75, out_$i76, out_$i52 := parse_priority_group_loop_$bb21(in_$p0, in_$p4, in_$p18, in_$p27, in_$i48, in_$p49, out_$p53, out_$i54, out_$i55, out_$p57, out_$p58, out_$p59, out_$p60, out_$p61, out_$p62, out_$p63, out_$i64, out_$i65, out_$i66, out_$p67, out_$p71, out_$p72, out_$p73, out_$i74, out_$i75, out_$i76, out_$i52);
    return;

  exit:
    return;
}



procedure parse_priority_group_loop_$bb21(in_$p0: ref, in_$p4: ref, in_$p18: ref, in_$p27: ref, in_$i48: i32, in_$p49: ref, in_$p53: ref, in_$i54: i32, in_$i55: i1, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$i64: i1, in_$i65: i8, in_$i66: i1, in_$p67: ref, in_$p71: ref, in_$p72: ref, in_$p73: ref, in_$i74: i32, in_$i75: i32, in_$i76: i1, in_$i52: i32) returns (out_$p53: ref, out_$i54: i32, out_$i55: i1, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$i64: i1, out_$i65: i8, out_$i66: i1, out_$p67: ref, out_$p71: ref, out_$p72: ref, out_$p73: ref, out_$i74: i32, out_$i75: i32, out_$i76: i1, out_$i52: i32);
  modifies $M.0, $CurrAddr, $M.5, $M.4;



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();



implementation main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p10: ref, in_$p12: ref, in_$p13: ref, in_$p15: ref, in_$p17: ref, in_$p19: ref, in_$p21: ref, in_$p23: ref, in_$p24: ref, in_$p26: ref, in_$p28: ref, in_$p30: ref, in_$i49: i32, in_$i50: i1, in_$i51: i1, in_$i52: i1, in_$i53: i1, in_$i54: i1, in_$i55: i32, in_$i56: i1, in_$i57: i32, in_$i58: i1, in_$i59: i32, in_$i60: i1, in_$i61: i1, in_$i62: i1, in_$i63: i32, in_$i64: i1, in_$i65: i32, in_$i66: i1, in_$i67: i32, in_$i68: i1, in_$i69: i32, in_$i70: i32, in_$i71: i1, in_$i72: i32, in_$i73: i1, in_$i74: i32, in_$i75: i1, in_$i76: i32, in_$i77: i1, in_$i78: i1, in_$i79: i1, in_$i80: i1, in_$i81: i1, in_$i82: i1, in_$i83: i1, in_$i84: i1, in_$i85: i1, in_$i86: i1, in_$i87: i1, in_$i88: i1, in_$i89: i1, in_$i90: i1, in_$i91: i1, in_$i92: i1, in_$i93: i32, in_$i94: i1, in_$p95: ref, in_$i96: i32, in_$i97: i32, in_$i98: i32, in_$i99: i1, in_$i100: i32, in_$i101: i32, in_$i102: i32, in_$i103: i1, in_$p104: ref, in_$i106: i32, in_$i107: i1, in_$p108: ref, in_$i110: i32, in_$i111: i1, in_$p112: ref, in_$i114: i32, in_$i115: i1, in_$p116: ref, in_$i118: i32, in_$i119: i1, in_$p120: ref, in_$i122: i32, in_$i123: i1, in_$p124: ref, in_$i125: i32, in_$i126: i32, in_$i127: i32, in_$i128: i1, in_$p129: ref, in_$i130: i32, in_$i131: i32, in_$i132: i32, in_$i133: i1, in_$p134: ref, in_$i135: i32, in_$i136: i32, in_$i137: i32, in_$i138: i1, in_$p139: ref, in_$i140: i32, in_$i141: i32, in_$i142: i32, in_$i143: i1, in_$i144: i32, in_$i145: i1, in_$i146: i32, in_$i147: i1, in_$i148: i32, in_$i149: i1, in_$i150: i32, in_$i151: i1, in_$i152: i32, in_$i153: i1, in_$p154: ref, in_$p155: ref, in_$i157: i32, in_$i158: i1, in_$p159: ref, in_$p160: ref, in_$i162: i32, in_$i163: i1, in_$p164: ref, in_$p165: ref, in_$i167: i32, in_$i168: i1, in_$p169: ref, in_$p170: ref, in_$i172: i32, in_$i173: i1, in_$p174: ref, in_$p175: ref, in_$i177: i32, in_$i178: i1, in_$p179: ref, in_$i180: i32, in_$i182: i32, in_$i183: i1, in_$p184: ref, in_$i185: i32, in_$i187: i32, in_$i188: i1, in_$p189: ref, in_$i190: i32, in_$i192: i32, in_$i193: i1, in_$p194: ref, in_$i195: i32, in_$i197: i32, in_$i198: i1, in_$p199: ref, in_$i200: i32, in_$i202: i32, in_$i203: i1, in_$p204: ref, in_$i206: i32, in_$i207: i1, in_$p208: ref, in_$i210: i32, in_$i211: i1, in_$p212: ref, in_$i214: i32, in_$i215: i1, in_$p216: ref, in_$i218: i32, in_$i219: i1, in_$p220: ref, in_$i222: i32, in_$i223: i1, in_$p224: ref, in_$i226: i32, in_$i227: i1, in_$p228: ref, in_$i230: i32, in_$i231: i1, in_$p232: ref, in_$i234: i32, in_$i235: i1, in_$p236: ref, in_$i238: i32, in_$i239: i1, in_$p240: ref, in_$i242: i32, in_$i243: i1, in_$p244: ref, in_$i245: i32, in_$i246: i1, in_$p247: ref, in_$i248: i32, in_$i249: i64, in_$i251: i32, in_$i252: i1, in_$p253: ref, in_$i254: i32, in_$i255: i64, in_$i257: i32, in_$i258: i1, in_$p259: ref, in_$i260: i32, in_$i261: i64, in_$i263: i32, in_$i264: i1, in_$p265: ref, in_$i266: i32, in_$i267: i64, in_$i269: i32, in_$i270: i1, in_$p271: ref, in_$i272: i32, in_$i273: i64, in_$i275: i32, in_$i276: i1, in_$p277: ref, in_$i278: i32, in_$i279: i32, in_$i280: i32, in_$i281: i32, in_$i282: i1, in_$p283: ref, in_$i284: i32, in_$i285: i32, in_$i286: i32, in_$i287: i32, in_$i288: i1, in_$p289: ref, in_$i290: i32, in_$i291: i32, in_$i292: i32, in_$i293: i32, in_$i294: i1, in_$p295: ref, in_$i296: i32, in_$i297: i32, in_$i298: i32, in_$i299: i32, in_$i300: i1, in_$p301: ref, in_$i302: i32, in_$i303: i32, in_$i304: i32, in_$i305: i32, in_$i306: i1, in_$p307: ref, in_$i308: i32, in_$i309: i1, in_$p310: ref, in_$i311: i32, in_$i312: i1, in_$p313: ref, in_$i314: i32, in_$i316: i32, in_$i317: i1, in_$p318: ref, in_$i319: i32, in_$i321: i32, in_$i322: i1, in_$p323: ref, in_$i324: i32, in_$i326: i32, in_$i327: i1, in_$p328: ref, in_$i329: i32, in_$i331: i32, in_$i332: i1, in_$p333: ref, in_$i334: i32, in_$i336: i32, in_$i337: i1, in_$i338: i32, in_$i339: i32, in_$i340: i1, in_$i341: i32, in_$i342: i1, in_vslice_dummy_var_58: i32, in_vslice_dummy_var_59: i32, in_vslice_dummy_var_60: i32, in_vslice_dummy_var_61: i32, in_vslice_dummy_var_62: i32, in_vslice_dummy_var_63: i32, in_vslice_dummy_var_64: i32, in_vslice_dummy_var_65: i32, in_vslice_dummy_var_66: i32, in_vslice_dummy_var_67: i32, in_vslice_dummy_var_68: i32, in_vslice_dummy_var_69: i32, in_vslice_dummy_var_70: i32, in_vslice_dummy_var_71: i32, in_vslice_dummy_var_72: i32, in_vslice_dummy_var_73: i32, in_vslice_dummy_var_74: i32, in_vslice_dummy_var_75: i32, in_vslice_dummy_var_76: i32, in_vslice_dummy_var_77: i32, in_vslice_dummy_var_78: i32, in_vslice_dummy_var_79: i32, in_vslice_dummy_var_80: i32, in_vslice_dummy_var_81: i32, in_vslice_dummy_var_82: i32, in_vslice_dummy_var_83: i32, in_vslice_dummy_var_84: i32, in_vslice_dummy_var_85: i32, in_vslice_dummy_var_86: i32, in_vslice_dummy_var_87: i32, in_vslice_dummy_var_88: i32, in_vslice_dummy_var_89: i32, in_vslice_dummy_var_90: i32, in_vslice_dummy_var_91: i32, in_vslice_dummy_var_92: i32) returns (out_$i49: i32, out_$i50: i1, out_$i51: i1, out_$i52: i1, out_$i53: i1, out_$i54: i1, out_$i55: i32, out_$i56: i1, out_$i57: i32, out_$i58: i1, out_$i59: i32, out_$i60: i1, out_$i61: i1, out_$i62: i1, out_$i63: i32, out_$i64: i1, out_$i65: i32, out_$i66: i1, out_$i67: i32, out_$i68: i1, out_$i69: i32, out_$i70: i32, out_$i71: i1, out_$i72: i32, out_$i73: i1, out_$i74: i32, out_$i75: i1, out_$i76: i32, out_$i77: i1, out_$i78: i1, out_$i79: i1, out_$i80: i1, out_$i81: i1, out_$i82: i1, out_$i83: i1, out_$i84: i1, out_$i85: i1, out_$i86: i1, out_$i87: i1, out_$i88: i1, out_$i89: i1, out_$i90: i1, out_$i91: i1, out_$i92: i1, out_$i93: i32, out_$i94: i1, out_$p95: ref, out_$i96: i32, out_$i97: i32, out_$i98: i32, out_$i99: i1, out_$i100: i32, out_$i101: i32, out_$i102: i32, out_$i103: i1, out_$p104: ref, out_$i106: i32, out_$i107: i1, out_$p108: ref, out_$i110: i32, out_$i111: i1, out_$p112: ref, out_$i114: i32, out_$i115: i1, out_$p116: ref, out_$i118: i32, out_$i119: i1, out_$p120: ref, out_$i122: i32, out_$i123: i1, out_$p124: ref, out_$i125: i32, out_$i126: i32, out_$i127: i32, out_$i128: i1, out_$p129: ref, out_$i130: i32, out_$i131: i32, out_$i132: i32, out_$i133: i1, out_$p134: ref, out_$i135: i32, out_$i136: i32, out_$i137: i32, out_$i138: i1, out_$p139: ref, out_$i140: i32, out_$i141: i32, out_$i142: i32, out_$i143: i1, out_$i144: i32, out_$i145: i1, out_$i146: i32, out_$i147: i1, out_$i148: i32, out_$i149: i1, out_$i150: i32, out_$i151: i1, out_$i152: i32, out_$i153: i1, out_$p154: ref, out_$p155: ref, out_$i157: i32, out_$i158: i1, out_$p159: ref, out_$p160: ref, out_$i162: i32, out_$i163: i1, out_$p164: ref, out_$p165: ref, out_$i167: i32, out_$i168: i1, out_$p169: ref, out_$p170: ref, out_$i172: i32, out_$i173: i1, out_$p174: ref, out_$p175: ref, out_$i177: i32, out_$i178: i1, out_$p179: ref, out_$i180: i32, out_$i182: i32, out_$i183: i1, out_$p184: ref, out_$i185: i32, out_$i187: i32, out_$i188: i1, out_$p189: ref, out_$i190: i32, out_$i192: i32, out_$i193: i1, out_$p194: ref, out_$i195: i32, out_$i197: i32, out_$i198: i1, out_$p199: ref, out_$i200: i32, out_$i202: i32, out_$i203: i1, out_$p204: ref, out_$i206: i32, out_$i207: i1, out_$p208: ref, out_$i210: i32, out_$i211: i1, out_$p212: ref, out_$i214: i32, out_$i215: i1, out_$p216: ref, out_$i218: i32, out_$i219: i1, out_$p220: ref, out_$i222: i32, out_$i223: i1, out_$p224: ref, out_$i226: i32, out_$i227: i1, out_$p228: ref, out_$i230: i32, out_$i231: i1, out_$p232: ref, out_$i234: i32, out_$i235: i1, out_$p236: ref, out_$i238: i32, out_$i239: i1, out_$p240: ref, out_$i242: i32, out_$i243: i1, out_$p244: ref, out_$i245: i32, out_$i246: i1, out_$p247: ref, out_$i248: i32, out_$i249: i64, out_$i251: i32, out_$i252: i1, out_$p253: ref, out_$i254: i32, out_$i255: i64, out_$i257: i32, out_$i258: i1, out_$p259: ref, out_$i260: i32, out_$i261: i64, out_$i263: i32, out_$i264: i1, out_$p265: ref, out_$i266: i32, out_$i267: i64, out_$i269: i32, out_$i270: i1, out_$p271: ref, out_$i272: i32, out_$i273: i64, out_$i275: i32, out_$i276: i1, out_$p277: ref, out_$i278: i32, out_$i279: i32, out_$i280: i32, out_$i281: i32, out_$i282: i1, out_$p283: ref, out_$i284: i32, out_$i285: i32, out_$i286: i32, out_$i287: i32, out_$i288: i1, out_$p289: ref, out_$i290: i32, out_$i291: i32, out_$i292: i32, out_$i293: i32, out_$i294: i1, out_$p295: ref, out_$i296: i32, out_$i297: i32, out_$i298: i32, out_$i299: i32, out_$i300: i1, out_$p301: ref, out_$i302: i32, out_$i303: i32, out_$i304: i32, out_$i305: i32, out_$i306: i1, out_$p307: ref, out_$i308: i32, out_$i309: i1, out_$p310: ref, out_$i311: i32, out_$i312: i1, out_$p313: ref, out_$i314: i32, out_$i316: i32, out_$i317: i1, out_$p318: ref, out_$i319: i32, out_$i321: i32, out_$i322: i1, out_$p323: ref, out_$i324: i32, out_$i326: i32, out_$i327: i1, out_$p328: ref, out_$i329: i32, out_$i331: i32, out_$i332: i1, out_$p333: ref, out_$i334: i32, out_$i336: i32, out_$i337: i1, out_$i338: i32, out_$i339: i32, out_$i340: i1, out_$i341: i32, out_$i342: i1, out_vslice_dummy_var_58: i32, out_vslice_dummy_var_59: i32, out_vslice_dummy_var_60: i32, out_vslice_dummy_var_61: i32, out_vslice_dummy_var_62: i32, out_vslice_dummy_var_63: i32, out_vslice_dummy_var_64: i32, out_vslice_dummy_var_65: i32, out_vslice_dummy_var_66: i32, out_vslice_dummy_var_67: i32, out_vslice_dummy_var_68: i32, out_vslice_dummy_var_69: i32, out_vslice_dummy_var_70: i32, out_vslice_dummy_var_71: i32, out_vslice_dummy_var_72: i32, out_vslice_dummy_var_73: i32, out_vslice_dummy_var_74: i32, out_vslice_dummy_var_75: i32, out_vslice_dummy_var_76: i32, out_vslice_dummy_var_77: i32, out_vslice_dummy_var_78: i32, out_vslice_dummy_var_79: i32, out_vslice_dummy_var_80: i32, out_vslice_dummy_var_81: i32, out_vslice_dummy_var_82: i32, out_vslice_dummy_var_83: i32, out_vslice_dummy_var_84: i32, out_vslice_dummy_var_85: i32, out_vslice_dummy_var_86: i32, out_vslice_dummy_var_87: i32, out_vslice_dummy_var_88: i32, out_vslice_dummy_var_89: i32, out_vslice_dummy_var_90: i32, out_vslice_dummy_var_91: i32, out_vslice_dummy_var_92: i32)
{

  entry:
    out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$p95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$p104, out_$i106, out_$i107, out_$p108, out_$i110, out_$i111, out_$p112, out_$i114, out_$i115, out_$p116, out_$i118, out_$i119, out_$p120, out_$i122, out_$i123, out_$p124, out_$i125, out_$i126, out_$i127, out_$i128, out_$p129, out_$i130, out_$i131, out_$i132, out_$i133, out_$p134, out_$i135, out_$i136, out_$i137, out_$i138, out_$p139, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i150, out_$i151, out_$i152, out_$i153, out_$p154, out_$p155, out_$i157, out_$i158, out_$p159, out_$p160, out_$i162, out_$i163, out_$p164, out_$p165, out_$i167, out_$i168, out_$p169, out_$p170, out_$i172, out_$i173, out_$p174, out_$p175, out_$i177, out_$i178, out_$p179, out_$i180, out_$i182, out_$i183, out_$p184, out_$i185, out_$i187, out_$i188, out_$p189, out_$i190, out_$i192, out_$i193, out_$p194, out_$i195, out_$i197, out_$i198, out_$p199, out_$i200, out_$i202, out_$i203, out_$p204, out_$i206, out_$i207, out_$p208, out_$i210, out_$i211, out_$p212, out_$i214, out_$i215, out_$p216, out_$i218, out_$i219, out_$p220, out_$i222, out_$i223, out_$p224, out_$i226, out_$i227, out_$p228, out_$i230, out_$i231, out_$p232, out_$i234, out_$i235, out_$p236, out_$i238, out_$i239, out_$p240, out_$i242, out_$i243, out_$p244, out_$i245, out_$i246, out_$p247, out_$i248, out_$i249, out_$i251, out_$i252, out_$p253, out_$i254, out_$i255, out_$i257, out_$i258, out_$p259, out_$i260, out_$i261, out_$i263, out_$i264, out_$p265, out_$i266, out_$i267, out_$i269, out_$i270, out_$p271, out_$i272, out_$i273, out_$i275, out_$i276, out_$p277, out_$i278, out_$i279, out_$i280, out_$i281, out_$i282, out_$p283, out_$i284, out_$i285, out_$i286, out_$i287, out_$i288, out_$p289, out_$i290, out_$i291, out_$i292, out_$i293, out_$i294, out_$p295, out_$i296, out_$i297, out_$i298, out_$i299, out_$i300, out_$p301, out_$i302, out_$i303, out_$i304, out_$i305, out_$i306, out_$p307, out_$i308, out_$i309, out_$p310, out_$i311, out_$i312, out_$p313, out_$i314, out_$i316, out_$i317, out_$p318, out_$i319, out_$i321, out_$i322, out_$p323, out_$i324, out_$i326, out_$i327, out_$p328, out_$i329, out_$i331, out_$i332, out_$p333, out_$i334, out_$i336, out_$i337, out_$i338, out_$i339, out_$i340, out_$i341, out_$i342, out_vslice_dummy_var_58, out_vslice_dummy_var_59, out_vslice_dummy_var_60, out_vslice_dummy_var_61, out_vslice_dummy_var_62, out_vslice_dummy_var_63, out_vslice_dummy_var_64, out_vslice_dummy_var_65, out_vslice_dummy_var_66, out_vslice_dummy_var_67, out_vslice_dummy_var_68, out_vslice_dummy_var_69, out_vslice_dummy_var_70, out_vslice_dummy_var_71, out_vslice_dummy_var_72, out_vslice_dummy_var_73, out_vslice_dummy_var_74, out_vslice_dummy_var_75, out_vslice_dummy_var_76, out_vslice_dummy_var_77, out_vslice_dummy_var_78, out_vslice_dummy_var_79, out_vslice_dummy_var_80, out_vslice_dummy_var_81, out_vslice_dummy_var_82, out_vslice_dummy_var_83, out_vslice_dummy_var_84, out_vslice_dummy_var_85, out_vslice_dummy_var_86, out_vslice_dummy_var_87, out_vslice_dummy_var_88, out_vslice_dummy_var_89, out_vslice_dummy_var_90, out_vslice_dummy_var_91, out_vslice_dummy_var_92 := in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i59, in_$i60, in_$i61, in_$i62, in_$i63, in_$i64, in_$i65, in_$i66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$i74, in_$i75, in_$i76, in_$i77, in_$i78, in_$i79, in_$i80, in_$i81, in_$i82, in_$i83, in_$i84, in_$i85, in_$i86, in_$i87, in_$i88, in_$i89, in_$i90, in_$i91, in_$i92, in_$i93, in_$i94, in_$p95, in_$i96, in_$i97, in_$i98, in_$i99, in_$i100, in_$i101, in_$i102, in_$i103, in_$p104, in_$i106, in_$i107, in_$p108, in_$i110, in_$i111, in_$p112, in_$i114, in_$i115, in_$p116, in_$i118, in_$i119, in_$p120, in_$i122, in_$i123, in_$p124, in_$i125, in_$i126, in_$i127, in_$i128, in_$p129, in_$i130, in_$i131, in_$i132, in_$i133, in_$p134, in_$i135, in_$i136, in_$i137, in_$i138, in_$p139, in_$i140, in_$i141, in_$i142, in_$i143, in_$i144, in_$i145, in_$i146, in_$i147, in_$i148, in_$i149, in_$i150, in_$i151, in_$i152, in_$i153, in_$p154, in_$p155, in_$i157, in_$i158, in_$p159, in_$p160, in_$i162, in_$i163, in_$p164, in_$p165, in_$i167, in_$i168, in_$p169, in_$p170, in_$i172, in_$i173, in_$p174, in_$p175, in_$i177, in_$i178, in_$p179, in_$i180, in_$i182, in_$i183, in_$p184, in_$i185, in_$i187, in_$i188, in_$p189, in_$i190, in_$i192, in_$i193, in_$p194, in_$i195, in_$i197, in_$i198, in_$p199, in_$i200, in_$i202, in_$i203, in_$p204, in_$i206, in_$i207, in_$p208, in_$i210, in_$i211, in_$p212, in_$i214, in_$i215, in_$p216, in_$i218, in_$i219, in_$p220, in_$i222, in_$i223, in_$p224, in_$i226, in_$i227, in_$p228, in_$i230, in_$i231, in_$p232, in_$i234, in_$i235, in_$p236, in_$i238, in_$i239, in_$p240, in_$i242, in_$i243, in_$p244, in_$i245, in_$i246, in_$p247, in_$i248, in_$i249, in_$i251, in_$i252, in_$p253, in_$i254, in_$i255, in_$i257, in_$i258, in_$p259, in_$i260, in_$i261, in_$i263, in_$i264, in_$p265, in_$i266, in_$i267, in_$i269, in_$i270, in_$p271, in_$i272, in_$i273, in_$i275, in_$i276, in_$p277, in_$i278, in_$i279, in_$i280, in_$i281, in_$i282, in_$p283, in_$i284, in_$i285, in_$i286, in_$i287, in_$i288, in_$p289, in_$i290, in_$i291, in_$i292, in_$i293, in_$i294, in_$p295, in_$i296, in_$i297, in_$i298, in_$i299, in_$i300, in_$p301, in_$i302, in_$i303, in_$i304, in_$i305, in_$i306, in_$p307, in_$i308, in_$i309, in_$p310, in_$i311, in_$i312, in_$p313, in_$i314, in_$i316, in_$i317, in_$p318, in_$i319, in_$i321, in_$i322, in_$p323, in_$i324, in_$i326, in_$i327, in_$p328, in_$i329, in_$i331, in_$i332, in_$p333, in_$i334, in_$i336, in_$i337, in_$i338, in_$i339, in_$i340, in_$i341, in_$i342, in_vslice_dummy_var_58, in_vslice_dummy_var_59, in_vslice_dummy_var_60, in_vslice_dummy_var_61, in_vslice_dummy_var_62, in_vslice_dummy_var_63, in_vslice_dummy_var_64, in_vslice_dummy_var_65, in_vslice_dummy_var_66, in_vslice_dummy_var_67, in_vslice_dummy_var_68, in_vslice_dummy_var_69, in_vslice_dummy_var_70, in_vslice_dummy_var_71, in_vslice_dummy_var_72, in_vslice_dummy_var_73, in_vslice_dummy_var_74, in_vslice_dummy_var_75, in_vslice_dummy_var_76, in_vslice_dummy_var_77, in_vslice_dummy_var_78, in_vslice_dummy_var_79, in_vslice_dummy_var_80, in_vslice_dummy_var_81, in_vslice_dummy_var_82, in_vslice_dummy_var_83, in_vslice_dummy_var_84, in_vslice_dummy_var_85, in_vslice_dummy_var_86, in_vslice_dummy_var_87, in_vslice_dummy_var_88, in_vslice_dummy_var_89, in_vslice_dummy_var_90, in_vslice_dummy_var_91, in_vslice_dummy_var_92;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 860} out_$i49 := __VERIFIER_nondet_int();
    call {:si_unique_call 861} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i49);
    call {:si_unique_call 862} {:cexpr "tmp___11"} boogie_si_record_i32(out_$i49);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb17_dummy;

  $bb260:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb258:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb255:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb15:
    assume !(out_$i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 863} invoke_work_1();
    goto corral_source_split_4093;

  $bb14:
    assume out_$i56 == 1;
    goto corral_source_split_4092;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    out_$i56 := $ne.i32(out_$i55, 0);
    goto corral_source_split_4090;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    out_$i55 := $M.37;
    goto corral_source_split_4089;

  $bb12:
    assume out_$i54 == 1;
    goto corral_source_split_4088;

  $bb10:
    assume out_$i53 == 1;
    assume {:verifier.code 0} true;
    out_$i54 := $eq.i32(out_$i49, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb3:
    assume out_$i50 == 1;
    assume {:verifier.code 0} true;
    out_$i53 := $slt.i32(out_$i49, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i50 := $slt.i32(out_$i49, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb19:
    assume !(out_$i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb29:
    assume {:verifier.code 0} true;
    assume !(out_$i64 == 1);
    goto $bb30;

  $bb32:
    assume {:verifier.code 0} true;
    assume !(out_$i66 == 1);
    goto $bb30;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    out_$i66 := $eq.i32(out_$i65, 0);
    goto corral_source_split_4107;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    out_$i65 := $M.38;
    goto corral_source_split_4106;

  $bb28:
    assume out_$i64 == 1;
    goto corral_source_split_4105;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    out_$i64 := $eq.i32(out_$i63, 3);
    goto corral_source_split_4103;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    out_$i63 := $M.39;
    goto corral_source_split_4102;

  $bb26:
    assume out_$i62 == 1;
    goto corral_source_split_4101;

  $bb21:
    assume out_$i60 == 1;
    assume {:verifier.code 0} true;
    out_$i62 := $eq.i32(out_$i59, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb20:
    assume {:verifier.code 0} true;
    out_$i60 := $slt.i32(out_$i59, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_4095:
    assume {:verifier.code 1} true;
    call {:si_unique_call 864} out_$i59 := __VERIFIER_nondet_int();
    call {:si_unique_call 865} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i59);
    call {:si_unique_call 866} {:cexpr "tmp___12"} boogie_si_record_i32(out_$i59);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb18:
    assume out_$i58 == 1;
    goto corral_source_split_4095;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    out_$i58 := $ne.i32(out_$i57, 0);
    goto corral_source_split_4086;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    out_$i57 := $M.39;
    goto corral_source_split_4085;

  $bb11:
    assume !(out_$i53 == 1);
    goto corral_source_split_4084;

  $bb37:
    assume !(out_$i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb42:
    assume !(out_$i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    out_$i73 := $ne.i32(out_$i72, 0);
    goto corral_source_split_4127;

  $bb40:
    assume {:verifier.code 0} true;
    out_$i72 := $M.42;
    goto corral_source_split_4126;

  $bb39:
    assume !(out_$i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 874} ldv_target_type_3();
    goto corral_source_split_4124;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    $M.40 := 1;
    call {:si_unique_call 873} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4123;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    $M.39 := 3;
    call {:si_unique_call 872} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_4122;

  $bb38:
    assume out_$i71 == 1;
    goto corral_source_split_4121;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    out_$i71 := $eq.i32(out_$i70, 0);
    goto corral_source_split_4119;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    out_$i70 := $M.42;
    goto corral_source_split_4118;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    $M.42 := out_$i69;
    call {:si_unique_call 871} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i69);
    goto corral_source_split_4117;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 870} out_$i69 := dm_multipath_init();
    goto corral_source_split_4116;

  $bb36:
    assume out_$i68 == 1;
    goto corral_source_split_4115;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    out_$i68 := $eq.i32(out_$i67, 1);
    goto corral_source_split_4099;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    out_$i67 := $M.39;
    goto corral_source_split_4098;

  $bb23:
    assume out_$i61 == 1;
    goto corral_source_split_4097;

  $bb22:
    assume !(out_$i60 == 1);
    assume {:verifier.code 0} true;
    out_$i61 := $eq.i32(out_$i59, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} ldv_stop();
    goto corral_source_split_4132;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb24:
    assume {:verifier.code 0} true;
    assume !(out_$i61 == 1);
    goto $bb25;

  $bb27:
    assume {:verifier.code 0} true;
    assume !(out_$i62 == 1);
    goto $bb25;

  $bb49:
    assume !(out_$i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb255;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb255;

  $bb254:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb252:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb246:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb231:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb228:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb225:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb210:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb195:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb192:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb177:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb162:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb147:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb132:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb117:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb89:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb85:
    assume !(out_$i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb88:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb87:
    assume !(out_$i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    goto $bb88;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    $M.38 := out_$i101;
    call {:si_unique_call 883} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i101);
    goto corral_source_split_4208;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    out_$i101 := $add.i32(out_$i100, 1);
    goto corral_source_split_4207;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    out_$i100 := $M.38;
    goto corral_source_split_4206;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    $M.40 := 2;
    call {:si_unique_call 882} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4205;

  $bb86:
    assume out_$i99 == 1;
    goto corral_source_split_4204;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    out_$i99 := $eq.i32(out_$i98, 0);
    goto corral_source_split_4202;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    out_$i98 := $M.43;
    goto corral_source_split_4201;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    $M.43 := out_$i97;
    call {:si_unique_call 881} {:cexpr "ldv_retval_2"} boogie_si_record_i32(out_$i97);
    goto corral_source_split_4200;

  SeqInstr_51:
    goto corral_source_split_4199;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} out_$i97 := multipath_ctr(out_$p95, out_$i96, in_$p28);
    goto SeqInstr_50;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    out_$i96 := $load.i32($M.0, in_$p0);
    goto corral_source_split_4198;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    out_$p95 := $M.35;
    goto corral_source_split_4197;

  $bb84:
    assume out_$i94 == 1;
    goto corral_source_split_4196;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    out_$i94 := $eq.i32(out_$i93, 1);
    goto corral_source_split_4194;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    out_$i93 := $M.40;
    goto corral_source_split_4193;

  $bb82:
    assume out_$i92 == 1;
    goto corral_source_split_4192;

  $bb78:
    assume out_$i90 == 1;
    assume {:verifier.code 0} true;
    out_$i92 := $eq.i32(out_$i76, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb70:
    assume out_$i86 == 1;
    assume {:verifier.code 0} true;
    out_$i90 := $slt.i32(out_$i76, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb51:
    assume out_$i77 == 1;
    assume {:verifier.code 0} true;
    out_$i86 := $slt.i32(out_$i76, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb50:
    assume {:verifier.code 0} true;
    out_$i77 := $slt.i32(out_$i76, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  corral_source_split_4134:
    assume {:verifier.code 1} true;
    call {:si_unique_call 877} out_$i76 := __VERIFIER_nondet_int();
    call {:si_unique_call 878} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i76);
    call {:si_unique_call 879} {:cexpr "tmp___13"} boogie_si_record_i32(out_$i76);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb48:
    assume out_$i75 == 1;
    goto corral_source_split_4134;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    out_$i75 := $ne.i32(out_$i74, 0);
    goto corral_source_split_4078;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    out_$i74 := $M.40;
    goto corral_source_split_4077;

  $bb5:
    assume out_$i51 == 1;
    goto corral_source_split_4076;

  $bb4:
    assume !(out_$i50 == 1);
    assume {:verifier.code 0} true;
    out_$i51 := $slt.i32(out_$i49, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb104:
    assume !(out_$i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    goto $bb105;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    $M.40 := 5;
    call {:si_unique_call 893} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(5);
    goto corral_source_split_4245;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 892} out_vslice_dummy_var_62 := multipath_busy(out_$p120);
    goto corral_source_split_4244;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    out_$p120 := $M.35;
    goto corral_source_split_4243;

  $bb103:
    assume out_$i119 == 1;
    goto corral_source_split_4242;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    out_$i119 := $eq.i32(out_$i118, 5);
    goto corral_source_split_4240;

  $bb102:
    assume {:verifier.code 0} true;
    out_$i118 := $M.40;
    goto corral_source_split_4239;

  $bb101:
    assume !(out_$i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    goto $bb102;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    $M.40 := 2;
    call {:si_unique_call 891} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4237;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} out_vslice_dummy_var_61 := multipath_busy(out_$p116);
    goto corral_source_split_4236;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    out_$p116 := $M.35;
    goto corral_source_split_4235;

  $bb100:
    assume out_$i115 == 1;
    goto corral_source_split_4234;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    out_$i115 := $eq.i32(out_$i114, 2);
    goto corral_source_split_4232;

  $bb99:
    assume {:verifier.code 0} true;
    out_$i114 := $M.40;
    goto corral_source_split_4231;

  $bb98:
    assume !(out_$i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    goto $bb99;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    $M.40 := 3;
    call {:si_unique_call 889} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_4229;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 888} out_vslice_dummy_var_60 := multipath_busy(out_$p112);
    goto corral_source_split_4228;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    out_$p112 := $M.35;
    goto corral_source_split_4227;

  $bb97:
    assume out_$i111 == 1;
    goto corral_source_split_4226;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    out_$i111 := $eq.i32(out_$i110, 3);
    goto corral_source_split_4224;

  $bb96:
    assume {:verifier.code 0} true;
    out_$i110 := $M.40;
    goto corral_source_split_4223;

  $bb95:
    assume !(out_$i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    goto $bb96;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    $M.40 := 1;
    call {:si_unique_call 887} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4221;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 886} out_vslice_dummy_var_59 := multipath_busy(out_$p108);
    goto corral_source_split_4220;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    out_$p108 := $M.35;
    goto corral_source_split_4219;

  $bb94:
    assume out_$i107 == 1;
    goto corral_source_split_4218;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    out_$i107 := $eq.i32(out_$i106, 1);
    goto corral_source_split_4216;

  $bb93:
    assume {:verifier.code 0} true;
    out_$i106 := $M.40;
    goto corral_source_split_4215;

  $bb92:
    assume !(out_$i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    goto $bb93;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    $M.40 := 4;
    call {:si_unique_call 885} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_4213;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 884} out_vslice_dummy_var_58 := multipath_busy(out_$p104);
    goto corral_source_split_4212;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    out_$p104 := $M.35;
    goto corral_source_split_4211;

  $bb91:
    assume out_$i103 == 1;
    goto corral_source_split_4210;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    out_$i103 := $eq.i32(out_$i102, 4);
    goto corral_source_split_4186;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    out_$i102 := $M.40;
    goto corral_source_split_4185;

  $bb80:
    assume out_$i91 == 1;
    goto corral_source_split_4184;

  $bb79:
    assume !(out_$i90 == 1);
    assume {:verifier.code 0} true;
    out_$i91 := $slt.i32(out_$i76, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb116:
    assume !(out_$i138 == 1);
    assume {:verifier.code 0} true;
    goto $bb117;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    goto $bb117;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    $M.38 := out_$i141;
    call {:si_unique_call 905} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i141);
    goto corral_source_split_4286;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    out_$i141 := $sub.i32(out_$i140, 1);
    goto corral_source_split_4285;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    out_$i140 := $M.38;
    goto corral_source_split_4284;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    $M.40 := 1;
    call {:si_unique_call 904} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4283;

  SeqInstr_63:
    goto corral_source_split_4282;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 903} multipath_dtr(out_$p139);
    goto SeqInstr_62;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    out_$p139 := $M.35;
    goto corral_source_split_4281;

  $bb115:
    assume out_$i138 == 1;
    goto corral_source_split_4280;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb115, $bb116;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    out_$i138 := $eq.i32(out_$i137, 5);
    goto corral_source_split_4278;

  $bb114:
    assume {:verifier.code 0} true;
    out_$i137 := $M.40;
    goto corral_source_split_4277;

  $bb113:
    assume !(out_$i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb114;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    goto $bb114;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    $M.38 := out_$i136;
    call {:si_unique_call 902} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i136);
    goto corral_source_split_4275;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    out_$i136 := $sub.i32(out_$i135, 1);
    goto corral_source_split_4274;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    out_$i135 := $M.38;
    goto corral_source_split_4273;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    $M.40 := 1;
    call {:si_unique_call 901} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4272;

  SeqInstr_60:
    goto corral_source_split_4271;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} multipath_dtr(out_$p134);
    goto SeqInstr_59;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    out_$p134 := $M.35;
    goto corral_source_split_4270;

  $bb112:
    assume out_$i133 == 1;
    goto corral_source_split_4269;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    out_$i133 := $eq.i32(out_$i132, 2);
    goto corral_source_split_4267;

  $bb111:
    assume {:verifier.code 0} true;
    out_$i132 := $M.40;
    goto corral_source_split_4266;

  $bb110:
    assume !(out_$i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb111;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    goto $bb111;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    $M.38 := out_$i131;
    call {:si_unique_call 899} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i131);
    goto corral_source_split_4264;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    out_$i131 := $sub.i32(out_$i130, 1);
    goto corral_source_split_4263;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    out_$i130 := $M.38;
    goto corral_source_split_4262;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    $M.40 := 1;
    call {:si_unique_call 898} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4261;

  SeqInstr_57:
    goto corral_source_split_4260;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 897} multipath_dtr(out_$p129);
    goto SeqInstr_56;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    out_$p129 := $M.35;
    goto corral_source_split_4259;

  $bb109:
    assume out_$i128 == 1;
    goto corral_source_split_4258;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb109, $bb110;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    out_$i128 := $eq.i32(out_$i127, 3);
    goto corral_source_split_4256;

  $bb108:
    assume {:verifier.code 0} true;
    out_$i127 := $M.40;
    goto corral_source_split_4255;

  $bb107:
    assume !(out_$i123 == 1);
    assume {:verifier.code 0} true;
    goto $bb108;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    goto $bb108;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    $M.38 := out_$i126;
    call {:si_unique_call 896} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i126);
    goto corral_source_split_4253;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    out_$i126 := $sub.i32(out_$i125, 1);
    goto corral_source_split_4252;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    out_$i125 := $M.38;
    goto corral_source_split_4251;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    $M.40 := 1;
    call {:si_unique_call 895} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4250;

  SeqInstr_54:
    goto corral_source_split_4249;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 894} multipath_dtr(out_$p124);
    goto SeqInstr_53;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    out_$p124 := $M.35;
    goto corral_source_split_4248;

  $bb106:
    assume out_$i123 == 1;
    goto corral_source_split_4247;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb107;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    out_$i123 := $eq.i32(out_$i122, 4);
    goto corral_source_split_4190;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    out_$i122 := $M.40;
    goto corral_source_split_4189;

  $bb81:
    assume !(out_$i91 == 1);
    goto corral_source_split_4188;

  $bb131:
    assume !(out_$i151 == 1);
    assume {:verifier.code 0} true;
    goto $bb132;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    goto $bb132;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    $M.40 := 5;
    call {:si_unique_call 915} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(5);
    goto corral_source_split_4318;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} multipath_release_clone(in_$p10);
    goto corral_source_split_4317;

  $bb130:
    assume out_$i151 == 1;
    goto corral_source_split_4316;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    out_$i151 := $eq.i32(out_$i150, 5);
    goto corral_source_split_4314;

  $bb129:
    assume {:verifier.code 0} true;
    out_$i150 := $M.40;
    goto corral_source_split_4313;

  $bb128:
    assume !(out_$i149 == 1);
    assume {:verifier.code 0} true;
    goto $bb129;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    goto $bb129;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    $M.40 := 2;
    call {:si_unique_call 913} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4311;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 912} multipath_release_clone(in_$p10);
    goto corral_source_split_4310;

  $bb127:
    assume out_$i149 == 1;
    goto corral_source_split_4309;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb127, $bb128;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    out_$i149 := $eq.i32(out_$i148, 2);
    goto corral_source_split_4307;

  $bb126:
    assume {:verifier.code 0} true;
    out_$i148 := $M.40;
    goto corral_source_split_4306;

  $bb125:
    assume !(out_$i147 == 1);
    assume {:verifier.code 0} true;
    goto $bb126;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    goto $bb126;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    $M.40 := 3;
    call {:si_unique_call 911} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_4304;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 910} multipath_release_clone(in_$p10);
    goto corral_source_split_4303;

  $bb124:
    assume out_$i147 == 1;
    goto corral_source_split_4302;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    out_$i147 := $eq.i32(out_$i146, 3);
    goto corral_source_split_4300;

  $bb123:
    assume {:verifier.code 0} true;
    out_$i146 := $M.40;
    goto corral_source_split_4299;

  $bb122:
    assume !(out_$i145 == 1);
    assume {:verifier.code 0} true;
    goto $bb123;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    goto $bb123;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    $M.40 := 1;
    call {:si_unique_call 909} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4297;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 908} multipath_release_clone(in_$p10);
    goto corral_source_split_4296;

  $bb121:
    assume out_$i145 == 1;
    goto corral_source_split_4295;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb121, $bb122;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    out_$i145 := $eq.i32(out_$i144, 1);
    goto corral_source_split_4293;

  $bb120:
    assume {:verifier.code 0} true;
    out_$i144 := $M.40;
    goto corral_source_split_4292;

  $bb119:
    assume !(out_$i143 == 1);
    assume {:verifier.code 0} true;
    goto $bb120;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    goto $bb120;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    $M.40 := 4;
    call {:si_unique_call 907} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_4290;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 906} multipath_release_clone(in_$p10);
    goto corral_source_split_4289;

  $bb118:
    assume out_$i143 == 1;
    goto corral_source_split_4288;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb118, $bb119;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    out_$i143 := $eq.i32(out_$i142, 4);
    goto corral_source_split_4178;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    out_$i142 := $M.40;
    goto corral_source_split_4177;

  $bb76:
    assume out_$i89 == 1;
    goto corral_source_split_4176;

  $bb72:
    assume out_$i87 == 1;
    assume {:verifier.code 0} true;
    out_$i89 := $slt.i32(out_$i76, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb71:
    assume !(out_$i86 == 1);
    assume {:verifier.code 0} true;
    out_$i87 := $slt.i32(out_$i76, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb146:
    assume !(out_$i173 == 1);
    assume {:verifier.code 0} true;
    goto $bb147;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    goto $bb147;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    $M.40 := 5;
    call {:si_unique_call 925} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(5);
    goto corral_source_split_4360;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 924} out_vslice_dummy_var_67 := multipath_iterate_devices(out_$p174, out_$p175, in_$p24);
    goto corral_source_split_4359;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    out_$p175 := $load.ref($M.0, in_$p7);
    goto corral_source_split_4358;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    out_$p174 := $M.35;
    goto corral_source_split_4357;

  $bb145:
    assume out_$i173 == 1;
    goto corral_source_split_4356;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb145, $bb146;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    out_$i173 := $eq.i32(out_$i172, 5);
    goto corral_source_split_4354;

  $bb144:
    assume {:verifier.code 0} true;
    out_$i172 := $M.40;
    goto corral_source_split_4353;

  $bb143:
    assume !(out_$i168 == 1);
    assume {:verifier.code 0} true;
    goto $bb144;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    goto $bb144;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    $M.40 := 2;
    call {:si_unique_call 923} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4351;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 922} out_vslice_dummy_var_66 := multipath_iterate_devices(out_$p169, out_$p170, in_$p24);
    goto corral_source_split_4350;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    out_$p170 := $load.ref($M.0, in_$p7);
    goto corral_source_split_4349;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    out_$p169 := $M.35;
    goto corral_source_split_4348;

  $bb142:
    assume out_$i168 == 1;
    goto corral_source_split_4347;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb142, $bb143;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    out_$i168 := $eq.i32(out_$i167, 2);
    goto corral_source_split_4345;

  $bb141:
    assume {:verifier.code 0} true;
    out_$i167 := $M.40;
    goto corral_source_split_4344;

  $bb140:
    assume !(out_$i163 == 1);
    assume {:verifier.code 0} true;
    goto $bb141;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    goto $bb141;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    $M.40 := 3;
    call {:si_unique_call 921} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_4342;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 920} out_vslice_dummy_var_65 := multipath_iterate_devices(out_$p164, out_$p165, in_$p24);
    goto corral_source_split_4341;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    out_$p165 := $load.ref($M.0, in_$p7);
    goto corral_source_split_4340;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    out_$p164 := $M.35;
    goto corral_source_split_4339;

  $bb139:
    assume out_$i163 == 1;
    goto corral_source_split_4338;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb139, $bb140;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    out_$i163 := $eq.i32(out_$i162, 3);
    goto corral_source_split_4336;

  $bb138:
    assume {:verifier.code 0} true;
    out_$i162 := $M.40;
    goto corral_source_split_4335;

  $bb137:
    assume !(out_$i158 == 1);
    assume {:verifier.code 0} true;
    goto $bb138;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    goto $bb138;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    $M.40 := 1;
    call {:si_unique_call 919} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4333;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 918} out_vslice_dummy_var_64 := multipath_iterate_devices(out_$p159, out_$p160, in_$p24);
    goto corral_source_split_4332;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    out_$p160 := $load.ref($M.0, in_$p7);
    goto corral_source_split_4331;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    out_$p159 := $M.35;
    goto corral_source_split_4330;

  $bb136:
    assume out_$i158 == 1;
    goto corral_source_split_4329;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb136, $bb137;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    out_$i158 := $eq.i32(out_$i157, 1);
    goto corral_source_split_4327;

  $bb135:
    assume {:verifier.code 0} true;
    out_$i157 := $M.40;
    goto corral_source_split_4326;

  $bb134:
    assume !(out_$i153 == 1);
    assume {:verifier.code 0} true;
    goto $bb135;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    goto $bb135;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    $M.40 := 4;
    call {:si_unique_call 917} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_4324;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 916} out_vslice_dummy_var_63 := multipath_iterate_devices(out_$p154, out_$p155, in_$p24);
    goto corral_source_split_4323;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    out_$p155 := $load.ref($M.0, in_$p7);
    goto corral_source_split_4322;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    out_$p154 := $M.35;
    goto corral_source_split_4321;

  $bb133:
    assume out_$i153 == 1;
    goto corral_source_split_4320;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb133, $bb134;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    out_$i153 := $eq.i32(out_$i152, 4);
    goto corral_source_split_4182;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    out_$i152 := $M.40;
    goto corral_source_split_4181;

  $bb77:
    assume !(out_$i89 == 1);
    goto corral_source_split_4180;

  $bb161:
    assume !(out_$i198 == 1);
    assume {:verifier.code 0} true;
    goto $bb162;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    goto $bb162;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    $M.40 := 5;
    call {:si_unique_call 935} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(5);
    goto corral_source_split_4402;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 934} out_vslice_dummy_var_72 := multipath_message(out_$p199, out_$i200, in_$p26);
    goto corral_source_split_4401;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    out_$i200 := $load.i32($M.0, in_$p6);
    goto corral_source_split_4400;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    out_$p199 := $M.35;
    goto corral_source_split_4399;

  $bb160:
    assume out_$i198 == 1;
    goto corral_source_split_4398;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb160, $bb161;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    out_$i198 := $eq.i32(out_$i197, 5);
    goto corral_source_split_4396;

  $bb159:
    assume {:verifier.code 0} true;
    out_$i197 := $M.40;
    goto corral_source_split_4395;

  $bb158:
    assume !(out_$i193 == 1);
    assume {:verifier.code 0} true;
    goto $bb159;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    goto $bb159;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    $M.40 := 2;
    call {:si_unique_call 933} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4393;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 932} out_vslice_dummy_var_71 := multipath_message(out_$p194, out_$i195, in_$p26);
    goto corral_source_split_4392;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    out_$i195 := $load.i32($M.0, in_$p6);
    goto corral_source_split_4391;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    out_$p194 := $M.35;
    goto corral_source_split_4390;

  $bb157:
    assume out_$i193 == 1;
    goto corral_source_split_4389;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb157, $bb158;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    out_$i193 := $eq.i32(out_$i192, 2);
    goto corral_source_split_4387;

  $bb156:
    assume {:verifier.code 0} true;
    out_$i192 := $M.40;
    goto corral_source_split_4386;

  $bb155:
    assume !(out_$i188 == 1);
    assume {:verifier.code 0} true;
    goto $bb156;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    goto $bb156;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    $M.40 := 3;
    call {:si_unique_call 931} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_4384;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 930} out_vslice_dummy_var_70 := multipath_message(out_$p189, out_$i190, in_$p26);
    goto corral_source_split_4383;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    out_$i190 := $load.i32($M.0, in_$p6);
    goto corral_source_split_4382;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    out_$p189 := $M.35;
    goto corral_source_split_4381;

  $bb154:
    assume out_$i188 == 1;
    goto corral_source_split_4380;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb154, $bb155;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    out_$i188 := $eq.i32(out_$i187, 3);
    goto corral_source_split_4378;

  $bb153:
    assume {:verifier.code 0} true;
    out_$i187 := $M.40;
    goto corral_source_split_4377;

  $bb152:
    assume !(out_$i183 == 1);
    assume {:verifier.code 0} true;
    goto $bb153;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    goto $bb153;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    $M.40 := 1;
    call {:si_unique_call 929} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4375;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 928} out_vslice_dummy_var_69 := multipath_message(out_$p184, out_$i185, in_$p26);
    goto corral_source_split_4374;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    out_$i185 := $load.i32($M.0, in_$p6);
    goto corral_source_split_4373;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    out_$p184 := $M.35;
    goto corral_source_split_4372;

  $bb151:
    assume out_$i183 == 1;
    goto corral_source_split_4371;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb151, $bb152;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    out_$i183 := $eq.i32(out_$i182, 1);
    goto corral_source_split_4369;

  $bb150:
    assume {:verifier.code 0} true;
    out_$i182 := $M.40;
    goto corral_source_split_4368;

  $bb149:
    assume !(out_$i178 == 1);
    assume {:verifier.code 0} true;
    goto $bb150;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    goto $bb150;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    $M.40 := 4;
    call {:si_unique_call 927} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_4366;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 926} out_vslice_dummy_var_68 := multipath_message(out_$p179, out_$i180, in_$p26);
    goto corral_source_split_4365;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    out_$i180 := $load.i32($M.0, in_$p6);
    goto corral_source_split_4364;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    out_$p179 := $M.35;
    goto corral_source_split_4363;

  $bb148:
    assume out_$i178 == 1;
    goto corral_source_split_4362;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb148, $bb149;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    out_$i178 := $eq.i32(out_$i177, 4);
    goto corral_source_split_4170;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    out_$i177 := $M.40;
    goto corral_source_split_4169;

  $bb74:
    assume out_$i88 == 1;
    goto corral_source_split_4168;

  $bb73:
    assume !(out_$i87 == 1);
    assume {:verifier.code 0} true;
    out_$i88 := $slt.i32(out_$i76, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb176:
    assume !(out_$i219 == 1);
    assume {:verifier.code 0} true;
    goto $bb177;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    goto $bb177;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    $M.40 := 5;
    call {:si_unique_call 945} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(5);
    goto corral_source_split_4439;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 944} out_vslice_dummy_var_77 := multipath_map(out_$p220, in_$p17, in_$p15);
    goto corral_source_split_4438;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    out_$p220 := $M.35;
    goto corral_source_split_4437;

  $bb175:
    assume out_$i219 == 1;
    goto corral_source_split_4436;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb175, $bb176;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    out_$i219 := $eq.i32(out_$i218, 5);
    goto corral_source_split_4434;

  $bb174:
    assume {:verifier.code 0} true;
    out_$i218 := $M.40;
    goto corral_source_split_4433;

  $bb173:
    assume !(out_$i215 == 1);
    assume {:verifier.code 0} true;
    goto $bb174;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    goto $bb174;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    $M.40 := 2;
    call {:si_unique_call 943} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4431;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 942} out_vslice_dummy_var_76 := multipath_map(out_$p216, in_$p17, in_$p15);
    goto corral_source_split_4430;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    out_$p216 := $M.35;
    goto corral_source_split_4429;

  $bb172:
    assume out_$i215 == 1;
    goto corral_source_split_4428;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb172, $bb173;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    out_$i215 := $eq.i32(out_$i214, 2);
    goto corral_source_split_4426;

  $bb171:
    assume {:verifier.code 0} true;
    out_$i214 := $M.40;
    goto corral_source_split_4425;

  $bb170:
    assume !(out_$i211 == 1);
    assume {:verifier.code 0} true;
    goto $bb171;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    goto $bb171;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    $M.40 := 3;
    call {:si_unique_call 941} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_4423;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 940} out_vslice_dummy_var_75 := multipath_map(out_$p212, in_$p17, in_$p15);
    goto corral_source_split_4422;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    out_$p212 := $M.35;
    goto corral_source_split_4421;

  $bb169:
    assume out_$i211 == 1;
    goto corral_source_split_4420;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb169, $bb170;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    out_$i211 := $eq.i32(out_$i210, 3);
    goto corral_source_split_4418;

  $bb168:
    assume {:verifier.code 0} true;
    out_$i210 := $M.40;
    goto corral_source_split_4417;

  $bb167:
    assume !(out_$i207 == 1);
    assume {:verifier.code 0} true;
    goto $bb168;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    goto $bb168;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    $M.40 := 1;
    call {:si_unique_call 939} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4415;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} out_vslice_dummy_var_74 := multipath_map(out_$p208, in_$p17, in_$p15);
    goto corral_source_split_4414;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    out_$p208 := $M.35;
    goto corral_source_split_4413;

  $bb166:
    assume out_$i207 == 1;
    goto corral_source_split_4412;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb166, $bb167;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    out_$i207 := $eq.i32(out_$i206, 1);
    goto corral_source_split_4410;

  $bb165:
    assume {:verifier.code 0} true;
    out_$i206 := $M.40;
    goto corral_source_split_4409;

  $bb164:
    assume !(out_$i203 == 1);
    assume {:verifier.code 0} true;
    goto $bb165;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    goto $bb165;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    $M.40 := 4;
    call {:si_unique_call 937} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_4407;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 936} out_vslice_dummy_var_73 := multipath_map(out_$p204, in_$p17, in_$p15);
    goto corral_source_split_4406;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    out_$p204 := $M.35;
    goto corral_source_split_4405;

  $bb163:
    assume out_$i203 == 1;
    goto corral_source_split_4404;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb163, $bb164;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    out_$i203 := $eq.i32(out_$i202, 4);
    goto corral_source_split_4174;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    out_$i202 := $M.40;
    goto corral_source_split_4173;

  $bb75:
    assume !(out_$i88 == 1);
    goto corral_source_split_4172;

  $bb191:
    assume !(out_$i239 == 1);
    assume {:verifier.code 0} true;
    goto $bb192;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    goto $bb192;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    $M.40 := 5;
    call {:si_unique_call 955} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(5);
    goto corral_source_split_4476;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 954} out_vslice_dummy_var_82 := multipath_clone_and_map(out_$p240, in_$p12, in_$p19, in_$p21);
    goto corral_source_split_4475;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    out_$p240 := $M.35;
    goto corral_source_split_4474;

  $bb190:
    assume out_$i239 == 1;
    goto corral_source_split_4473;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb190, $bb191;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    out_$i239 := $eq.i32(out_$i238, 5);
    goto corral_source_split_4471;

  $bb189:
    assume {:verifier.code 0} true;
    out_$i238 := $M.40;
    goto corral_source_split_4470;

  $bb188:
    assume !(out_$i235 == 1);
    assume {:verifier.code 0} true;
    goto $bb189;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    goto $bb189;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    $M.40 := 2;
    call {:si_unique_call 953} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4468;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 952} out_vslice_dummy_var_81 := multipath_clone_and_map(out_$p236, in_$p12, in_$p19, in_$p21);
    goto corral_source_split_4467;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    out_$p236 := $M.35;
    goto corral_source_split_4466;

  $bb187:
    assume out_$i235 == 1;
    goto corral_source_split_4465;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb187, $bb188;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    out_$i235 := $eq.i32(out_$i234, 2);
    goto corral_source_split_4463;

  $bb186:
    assume {:verifier.code 0} true;
    out_$i234 := $M.40;
    goto corral_source_split_4462;

  $bb185:
    assume !(out_$i231 == 1);
    assume {:verifier.code 0} true;
    goto $bb186;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    goto $bb186;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    $M.40 := 3;
    call {:si_unique_call 951} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_4460;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 950} out_vslice_dummy_var_80 := multipath_clone_and_map(out_$p232, in_$p12, in_$p19, in_$p21);
    goto corral_source_split_4459;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    out_$p232 := $M.35;
    goto corral_source_split_4458;

  $bb184:
    assume out_$i231 == 1;
    goto corral_source_split_4457;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb184, $bb185;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    out_$i231 := $eq.i32(out_$i230, 3);
    goto corral_source_split_4455;

  $bb183:
    assume {:verifier.code 0} true;
    out_$i230 := $M.40;
    goto corral_source_split_4454;

  $bb182:
    assume !(out_$i227 == 1);
    assume {:verifier.code 0} true;
    goto $bb183;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    goto $bb183;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    $M.40 := 1;
    call {:si_unique_call 949} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4452;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 948} out_vslice_dummy_var_79 := multipath_clone_and_map(out_$p228, in_$p12, in_$p19, in_$p21);
    goto corral_source_split_4451;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    out_$p228 := $M.35;
    goto corral_source_split_4450;

  $bb181:
    assume out_$i227 == 1;
    goto corral_source_split_4449;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb181, $bb182;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    out_$i227 := $eq.i32(out_$i226, 1);
    goto corral_source_split_4447;

  $bb180:
    assume {:verifier.code 0} true;
    out_$i226 := $M.40;
    goto corral_source_split_4446;

  $bb179:
    assume !(out_$i223 == 1);
    assume {:verifier.code 0} true;
    goto $bb180;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    goto $bb180;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    $M.40 := 4;
    call {:si_unique_call 947} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_4444;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 946} out_vslice_dummy_var_78 := multipath_clone_and_map(out_$p224, in_$p12, in_$p19, in_$p21);
    goto corral_source_split_4443;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    out_$p224 := $M.35;
    goto corral_source_split_4442;

  $bb178:
    assume out_$i223 == 1;
    goto corral_source_split_4441;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb178, $bb179;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    out_$i223 := $eq.i32(out_$i222, 4);
    goto corral_source_split_4162;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    out_$i222 := $M.40;
    goto corral_source_split_4161;

  $bb68:
    assume out_$i85 == 1;
    goto corral_source_split_4160;

  $bb64:
    assume out_$i83 == 1;
    assume {:verifier.code 0} true;
    out_$i85 := $slt.i32(out_$i76, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb53:
    assume out_$i78 == 1;
    assume {:verifier.code 0} true;
    out_$i83 := $slt.i32(out_$i76, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb52:
    assume !(out_$i77 == 1);
    assume {:verifier.code 0} true;
    out_$i78 := $slt.i32(out_$i76, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb194:
    assume !(out_$i243 == 1);
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    $M.40 := 4;
    call {:si_unique_call 957} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_4481;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 956} multipath_postsuspend(out_$p244);
    goto corral_source_split_4480;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    out_$p244 := $M.35;
    goto corral_source_split_4479;

  $bb193:
    assume out_$i243 == 1;
    goto corral_source_split_4478;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb193, $bb194;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    out_$i243 := $eq.i32(out_$i242, 3);
    goto corral_source_split_4166;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    out_$i242 := $M.40;
    goto corral_source_split_4165;

  $bb69:
    assume !(out_$i85 == 1);
    goto corral_source_split_4164;

  $bb209:
    assume !(out_$i270 == 1);
    assume {:verifier.code 0} true;
    goto $bb210;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    goto $bb210;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    $M.40 := 5;
    call {:si_unique_call 967} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(5);
    goto corral_source_split_4528;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 966} out_vslice_dummy_var_87 := multipath_ioctl(out_$p271, out_$i272, out_$i273);
    goto corral_source_split_4527;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    out_$i273 := $load.i64($M.0, in_$p1);
    goto corral_source_split_4526;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    out_$i272 := $load.i32($M.0, in_$p2);
    goto corral_source_split_4525;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    out_$p271 := $M.35;
    goto corral_source_split_4524;

  $bb208:
    assume out_$i270 == 1;
    goto corral_source_split_4523;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb208, $bb209;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    out_$i270 := $eq.i32(out_$i269, 5);
    goto corral_source_split_4521;

  $bb207:
    assume {:verifier.code 0} true;
    out_$i269 := $M.40;
    goto corral_source_split_4520;

  $bb206:
    assume !(out_$i264 == 1);
    assume {:verifier.code 0} true;
    goto $bb207;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    goto $bb207;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    $M.40 := 2;
    call {:si_unique_call 965} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4518;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 964} out_vslice_dummy_var_86 := multipath_ioctl(out_$p265, out_$i266, out_$i267);
    goto corral_source_split_4517;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    out_$i267 := $load.i64($M.0, in_$p1);
    goto corral_source_split_4516;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    out_$i266 := $load.i32($M.0, in_$p2);
    goto corral_source_split_4515;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    out_$p265 := $M.35;
    goto corral_source_split_4514;

  $bb205:
    assume out_$i264 == 1;
    goto corral_source_split_4513;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb205, $bb206;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    out_$i264 := $eq.i32(out_$i263, 2);
    goto corral_source_split_4511;

  $bb204:
    assume {:verifier.code 0} true;
    out_$i263 := $M.40;
    goto corral_source_split_4510;

  $bb203:
    assume !(out_$i258 == 1);
    assume {:verifier.code 0} true;
    goto $bb204;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    goto $bb204;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    $M.40 := 3;
    call {:si_unique_call 963} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_4508;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} out_vslice_dummy_var_85 := multipath_ioctl(out_$p259, out_$i260, out_$i261);
    goto corral_source_split_4507;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    out_$i261 := $load.i64($M.0, in_$p1);
    goto corral_source_split_4506;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    out_$i260 := $load.i32($M.0, in_$p2);
    goto corral_source_split_4505;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    out_$p259 := $M.35;
    goto corral_source_split_4504;

  $bb202:
    assume out_$i258 == 1;
    goto corral_source_split_4503;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb202, $bb203;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    out_$i258 := $eq.i32(out_$i257, 3);
    goto corral_source_split_4501;

  $bb201:
    assume {:verifier.code 0} true;
    out_$i257 := $M.40;
    goto corral_source_split_4500;

  $bb200:
    assume !(out_$i252 == 1);
    assume {:verifier.code 0} true;
    goto $bb201;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    goto $bb201;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    $M.40 := 1;
    call {:si_unique_call 961} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4498;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 960} out_vslice_dummy_var_84 := multipath_ioctl(out_$p253, out_$i254, out_$i255);
    goto corral_source_split_4497;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    out_$i255 := $load.i64($M.0, in_$p1);
    goto corral_source_split_4496;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    out_$i254 := $load.i32($M.0, in_$p2);
    goto corral_source_split_4495;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    out_$p253 := $M.35;
    goto corral_source_split_4494;

  $bb199:
    assume out_$i252 == 1;
    goto corral_source_split_4493;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb199, $bb200;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    out_$i252 := $eq.i32(out_$i251, 1);
    goto corral_source_split_4491;

  $bb198:
    assume {:verifier.code 0} true;
    out_$i251 := $M.40;
    goto corral_source_split_4490;

  $bb197:
    assume !(out_$i246 == 1);
    assume {:verifier.code 0} true;
    goto $bb198;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    goto $bb198;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    $M.40 := 4;
    call {:si_unique_call 959} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_4488;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 958} out_vslice_dummy_var_83 := multipath_ioctl(out_$p247, out_$i248, out_$i249);
    goto corral_source_split_4487;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    out_$i249 := $load.i64($M.0, in_$p1);
    goto corral_source_split_4486;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    out_$i248 := $load.i32($M.0, in_$p2);
    goto corral_source_split_4485;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    out_$p247 := $M.35;
    goto corral_source_split_4484;

  $bb196:
    assume out_$i246 == 1;
    goto corral_source_split_4483;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb196, $bb197;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    out_$i246 := $eq.i32(out_$i245, 4);
    goto corral_source_split_4154;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    out_$i245 := $M.40;
    goto corral_source_split_4153;

  $bb66:
    assume out_$i84 == 1;
    goto corral_source_split_4152;

  $bb65:
    assume !(out_$i83 == 1);
    assume {:verifier.code 0} true;
    out_$i84 := $slt.i32(out_$i76, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb224:
    assume !(out_$i300 == 1);
    assume {:verifier.code 0} true;
    goto $bb225;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    goto $bb225;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    $M.40 := 5;
    call {:si_unique_call 977} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(5);
    goto corral_source_split_4580;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 976} multipath_status(out_$p301, out_$i302, out_$i303, in_$p13, out_$i304);
    goto corral_source_split_4579;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    out_$i304 := $load.i32($M.0, in_$p5);
    goto corral_source_split_4578;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    out_$i303 := $load.i32($M.0, in_$p8);
    goto corral_source_split_4577;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    out_$i302 := $load.i32($M.0, in_$p4);
    goto corral_source_split_4576;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    out_$p301 := $M.35;
    goto corral_source_split_4575;

  $bb223:
    assume out_$i300 == 1;
    goto corral_source_split_4574;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb223, $bb224;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    out_$i300 := $eq.i32(out_$i299, 5);
    goto corral_source_split_4572;

  $bb222:
    assume {:verifier.code 0} true;
    out_$i299 := $M.40;
    goto corral_source_split_4571;

  $bb221:
    assume !(out_$i294 == 1);
    assume {:verifier.code 0} true;
    goto $bb222;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    goto $bb222;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    $M.40 := 2;
    call {:si_unique_call 975} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4569;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 974} multipath_status(out_$p295, out_$i296, out_$i297, in_$p13, out_$i298);
    goto corral_source_split_4568;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    out_$i298 := $load.i32($M.0, in_$p5);
    goto corral_source_split_4567;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    out_$i297 := $load.i32($M.0, in_$p8);
    goto corral_source_split_4566;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    out_$i296 := $load.i32($M.0, in_$p4);
    goto corral_source_split_4565;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    out_$p295 := $M.35;
    goto corral_source_split_4564;

  $bb220:
    assume out_$i294 == 1;
    goto corral_source_split_4563;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb220, $bb221;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    out_$i294 := $eq.i32(out_$i293, 2);
    goto corral_source_split_4561;

  $bb219:
    assume {:verifier.code 0} true;
    out_$i293 := $M.40;
    goto corral_source_split_4560;

  $bb218:
    assume !(out_$i288 == 1);
    assume {:verifier.code 0} true;
    goto $bb219;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    goto $bb219;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    $M.40 := 3;
    call {:si_unique_call 973} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_4558;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 972} multipath_status(out_$p289, out_$i290, out_$i291, in_$p13, out_$i292);
    goto corral_source_split_4557;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    out_$i292 := $load.i32($M.0, in_$p5);
    goto corral_source_split_4556;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    out_$i291 := $load.i32($M.0, in_$p8);
    goto corral_source_split_4555;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    out_$i290 := $load.i32($M.0, in_$p4);
    goto corral_source_split_4554;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    out_$p289 := $M.35;
    goto corral_source_split_4553;

  $bb217:
    assume out_$i288 == 1;
    goto corral_source_split_4552;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb217, $bb218;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    out_$i288 := $eq.i32(out_$i287, 3);
    goto corral_source_split_4550;

  $bb216:
    assume {:verifier.code 0} true;
    out_$i287 := $M.40;
    goto corral_source_split_4549;

  $bb215:
    assume !(out_$i282 == 1);
    assume {:verifier.code 0} true;
    goto $bb216;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    goto $bb216;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    $M.40 := 1;
    call {:si_unique_call 971} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4547;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 970} multipath_status(out_$p283, out_$i284, out_$i285, in_$p13, out_$i286);
    goto corral_source_split_4546;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    out_$i286 := $load.i32($M.0, in_$p5);
    goto corral_source_split_4545;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    out_$i285 := $load.i32($M.0, in_$p8);
    goto corral_source_split_4544;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    out_$i284 := $load.i32($M.0, in_$p4);
    goto corral_source_split_4543;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    out_$p283 := $M.35;
    goto corral_source_split_4542;

  $bb214:
    assume out_$i282 == 1;
    goto corral_source_split_4541;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb214, $bb215;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    out_$i282 := $eq.i32(out_$i281, 1);
    goto corral_source_split_4539;

  $bb213:
    assume {:verifier.code 0} true;
    out_$i281 := $M.40;
    goto corral_source_split_4538;

  $bb212:
    assume !(out_$i276 == 1);
    assume {:verifier.code 0} true;
    goto $bb213;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    goto $bb213;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    $M.40 := 4;
    call {:si_unique_call 969} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_4536;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 968} multipath_status(out_$p277, out_$i278, out_$i279, in_$p13, out_$i280);
    goto corral_source_split_4535;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    out_$i280 := $load.i32($M.0, in_$p5);
    goto corral_source_split_4534;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    out_$i279 := $load.i32($M.0, in_$p8);
    goto corral_source_split_4533;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    out_$i278 := $load.i32($M.0, in_$p4);
    goto corral_source_split_4532;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    out_$p277 := $M.35;
    goto corral_source_split_4531;

  $bb211:
    assume out_$i276 == 1;
    goto corral_source_split_4530;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb211, $bb212;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    out_$i276 := $eq.i32(out_$i275, 4);
    goto corral_source_split_4158;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    out_$i275 := $M.40;
    goto corral_source_split_4157;

  $bb67:
    assume !(out_$i84 == 1);
    goto corral_source_split_4156;

  $bb227:
    assume !(out_$i306 == 1);
    assume {:verifier.code 0} true;
    goto $bb228;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    goto $bb228;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    $M.40 := 3;
    call {:si_unique_call 979} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_4585;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 978} multipath_presuspend(out_$p307);
    goto corral_source_split_4584;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    out_$p307 := $M.35;
    goto corral_source_split_4583;

  $bb226:
    assume out_$i306 == 1;
    goto corral_source_split_4582;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb226, $bb227;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    out_$i306 := $eq.i32(out_$i305, 2);
    goto corral_source_split_4146;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    out_$i305 := $M.40;
    goto corral_source_split_4145;

  $bb62:
    assume out_$i82 == 1;
    goto corral_source_split_4144;

  $bb55:
    assume out_$i79 == 1;
    assume {:verifier.code 0} true;
    out_$i82 := $slt.i32(out_$i76, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb54:
    assume !(out_$i78 == 1);
    assume {:verifier.code 0} true;
    out_$i79 := $slt.i32(out_$i76, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb230:
    assume !(out_$i309 == 1);
    assume {:verifier.code 0} true;
    goto $bb231;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    goto $bb231;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    $M.40 := 2;
    call {:si_unique_call 981} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4590;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 980} multipath_resume(out_$p310);
    goto corral_source_split_4589;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    out_$p310 := $M.35;
    goto corral_source_split_4588;

  $bb229:
    assume out_$i309 == 1;
    goto corral_source_split_4587;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb229, $bb230;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    out_$i309 := $eq.i32(out_$i308, 5);
    goto corral_source_split_4150;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    out_$i308 := $M.40;
    goto corral_source_split_4149;

  $bb63:
    assume !(out_$i82 == 1);
    goto corral_source_split_4148;

  $bb245:
    assume !(out_$i332 == 1);
    assume {:verifier.code 0} true;
    goto $bb246;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    goto $bb246;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    $M.40 := 5;
    call {:si_unique_call 991} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(5);
    goto corral_source_split_4632;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 990} out_vslice_dummy_var_92 := multipath_end_io(out_$p333, in_$p30, out_$i334, in_$p23);
    goto corral_source_split_4631;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    out_$i334 := $load.i32($M.0, in_$p3);
    goto corral_source_split_4630;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    out_$p333 := $M.35;
    goto corral_source_split_4629;

  $bb244:
    assume out_$i332 == 1;
    goto corral_source_split_4628;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb244, $bb245;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    out_$i332 := $eq.i32(out_$i331, 5);
    goto corral_source_split_4626;

  $bb243:
    assume {:verifier.code 0} true;
    out_$i331 := $M.40;
    goto corral_source_split_4625;

  $bb242:
    assume !(out_$i327 == 1);
    assume {:verifier.code 0} true;
    goto $bb243;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    goto $bb243;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    $M.40 := 2;
    call {:si_unique_call 989} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4623;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 988} out_vslice_dummy_var_91 := multipath_end_io(out_$p328, in_$p30, out_$i329, in_$p23);
    goto corral_source_split_4622;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    out_$i329 := $load.i32($M.0, in_$p3);
    goto corral_source_split_4621;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    out_$p328 := $M.35;
    goto corral_source_split_4620;

  $bb241:
    assume out_$i327 == 1;
    goto corral_source_split_4619;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb241, $bb242;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    out_$i327 := $eq.i32(out_$i326, 2);
    goto corral_source_split_4617;

  $bb240:
    assume {:verifier.code 0} true;
    out_$i326 := $M.40;
    goto corral_source_split_4616;

  $bb239:
    assume !(out_$i322 == 1);
    assume {:verifier.code 0} true;
    goto $bb240;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    goto $bb240;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    $M.40 := 3;
    call {:si_unique_call 987} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_4614;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 986} out_vslice_dummy_var_90 := multipath_end_io(out_$p323, in_$p30, out_$i324, in_$p23);
    goto corral_source_split_4613;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    out_$i324 := $load.i32($M.0, in_$p3);
    goto corral_source_split_4612;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    out_$p323 := $M.35;
    goto corral_source_split_4611;

  $bb238:
    assume out_$i322 == 1;
    goto corral_source_split_4610;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb238, $bb239;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    out_$i322 := $eq.i32(out_$i321, 3);
    goto corral_source_split_4608;

  $bb237:
    assume {:verifier.code 0} true;
    out_$i321 := $M.40;
    goto corral_source_split_4607;

  $bb236:
    assume !(out_$i317 == 1);
    assume {:verifier.code 0} true;
    goto $bb237;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    goto $bb237;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    $M.40 := 1;
    call {:si_unique_call 985} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4605;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 984} out_vslice_dummy_var_89 := multipath_end_io(out_$p318, in_$p30, out_$i319, in_$p23);
    goto corral_source_split_4604;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    out_$i319 := $load.i32($M.0, in_$p3);
    goto corral_source_split_4603;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    out_$p318 := $M.35;
    goto corral_source_split_4602;

  $bb235:
    assume out_$i317 == 1;
    goto corral_source_split_4601;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb235, $bb236;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    out_$i317 := $eq.i32(out_$i316, 1);
    goto corral_source_split_4599;

  $bb234:
    assume {:verifier.code 0} true;
    out_$i316 := $M.40;
    goto corral_source_split_4598;

  $bb233:
    assume !(out_$i312 == 1);
    assume {:verifier.code 0} true;
    goto $bb234;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    goto $bb234;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    $M.40 := 4;
    call {:si_unique_call 983} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_4596;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 982} out_vslice_dummy_var_88 := multipath_end_io(out_$p313, in_$p30, out_$i314, in_$p23);
    goto corral_source_split_4595;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    out_$i314 := $load.i32($M.0, in_$p3);
    goto corral_source_split_4594;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    out_$p313 := $M.35;
    goto corral_source_split_4593;

  $bb232:
    assume out_$i312 == 1;
    goto corral_source_split_4592;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb232, $bb233;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    out_$i312 := $eq.i32(out_$i311, 4);
    goto corral_source_split_4138;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    out_$i311 := $M.40;
    goto corral_source_split_4137;

  $bb57:
    assume out_$i80 == 1;
    goto corral_source_split_4136;

  $bb56:
    assume !(out_$i79 == 1);
    assume {:verifier.code 0} true;
    out_$i80 := $slt.i32(out_$i76, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb248:
    assume !(out_$i337 == 1);
    assume {:verifier.code 0} true;
    goto $bb252;

  $bb251:
    assume {:verifier.code 0} true;
    goto $bb252;

  $bb250:
    assume !(out_$i340 == 1);
    assume {:verifier.code 0} true;
    goto $bb251;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    goto $bb251;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    $M.40 := 5;
    call {:si_unique_call 994} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(5);
    goto corral_source_split_4641;

  $bb249:
    assume out_$i340 == 1;
    goto corral_source_split_4640;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb249, $bb250;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    out_$i340 := $eq.i32(out_$i339, 0);
    goto corral_source_split_4638;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    out_$i339 := $M.44;
    goto corral_source_split_4637;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    $M.44 := out_$i338;
    call {:si_unique_call 993} {:cexpr "ldv_retval_1"} boogie_si_record_i32(out_$i338);
    goto corral_source_split_4636;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 992} out_$i338 := ldv_preresume_3();
    goto corral_source_split_4635;

  $bb247:
    assume out_$i337 == 1;
    goto corral_source_split_4634;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb247, $bb248;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    out_$i337 := $eq.i32(out_$i336, 4);
    goto corral_source_split_4142;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    out_$i336 := $M.40;
    goto corral_source_split_4141;

  $bb59:
    assume out_$i81 == 1;
    goto corral_source_split_4140;

  $bb58:
    assume !(out_$i80 == 1);
    assume {:verifier.code 0} true;
    out_$i81 := $eq.i32(out_$i76, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    goto $bb254;

  $bb253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 995} ldv_stop();
    goto corral_source_split_4643;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb60:
    assume {:verifier.code 0} true;
    assume !(out_$i81 == 1);
    goto $bb61;

  $bb83:
    assume {:verifier.code 0} true;
    assume !(out_$i92 == 1);
    goto $bb61;

  $bb257:
    assume !(out_$i342 == 1);
    assume {:verifier.code 0} true;
    goto $bb258;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    goto $bb258;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 996} invoke_work_2();
    goto corral_source_split_4646;

  $bb256:
    assume out_$i342 == 1;
    goto corral_source_split_4645;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb256, $bb257;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    out_$i342 := $ne.i32(out_$i341, 0);
    goto corral_source_split_4082;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    out_$i341 := $M.41;
    goto corral_source_split_4081;

  $bb7:
    assume out_$i52 == 1;
    goto corral_source_split_4080;

  $bb6:
    assume !(out_$i51 == 1);
    assume {:verifier.code 0} true;
    out_$i52 := $eq.i32(out_$i49, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 997} ldv_stop();
    goto corral_source_split_4648;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb8:
    assume {:verifier.code 0} true;
    assume !(out_$i52 == 1);
    goto $bb9;

  $bb13:
    assume {:verifier.code 0} true;
    assume !(out_$i54 == 1);
    goto $bb9;

  $bb17_dummy:
    call {:si_unique_call 1} out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$p95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$p104, out_$i106, out_$i107, out_$p108, out_$i110, out_$i111, out_$p112, out_$i114, out_$i115, out_$p116, out_$i118, out_$i119, out_$p120, out_$i122, out_$i123, out_$p124, out_$i125, out_$i126, out_$i127, out_$i128, out_$p129, out_$i130, out_$i131, out_$i132, out_$i133, out_$p134, out_$i135, out_$i136, out_$i137, out_$i138, out_$p139, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i150, out_$i151, out_$i152, out_$i153, out_$p154, out_$p155, out_$i157, out_$i158, out_$p159, out_$p160, out_$i162, out_$i163, out_$p164, out_$p165, out_$i167, out_$i168, out_$p169, out_$p170, out_$i172, out_$i173, out_$p174, out_$p175, out_$i177, out_$i178, out_$p179, out_$i180, out_$i182, out_$i183, out_$p184, out_$i185, out_$i187, out_$i188, out_$p189, out_$i190, out_$i192, out_$i193, out_$p194, out_$i195, out_$i197, out_$i198, out_$p199, out_$i200, out_$i202, out_$i203, out_$p204, out_$i206, out_$i207, out_$p208, out_$i210, out_$i211, out_$p212, out_$i214, out_$i215, out_$p216, out_$i218, out_$i219, out_$p220, out_$i222, out_$i223, out_$p224, out_$i226, out_$i227, out_$p228, out_$i230, out_$i231, out_$p232, out_$i234, out_$i235, out_$p236, out_$i238, out_$i239, out_$p240, out_$i242, out_$i243, out_$p244, out_$i245, out_$i246, out_$p247, out_$i248, out_$i249, out_$i251, out_$i252, out_$p253, out_$i254, out_$i255, out_$i257, out_$i258, out_$p259, out_$i260, out_$i261, out_$i263, out_$i264, out_$p265, out_$i266, out_$i267, out_$i269, out_$i270, out_$p271, out_$i272, out_$i273, out_$i275, out_$i276, out_$p277, out_$i278, out_$i279, out_$i280, out_$i281, out_$i282, out_$p283, out_$i284, out_$i285, out_$i286, out_$i287, out_$i288, out_$p289, out_$i290, out_$i291, out_$i292, out_$i293, out_$i294, out_$p295, out_$i296, out_$i297, out_$i298, out_$i299, out_$i300, out_$p301, out_$i302, out_$i303, out_$i304, out_$i305, out_$i306, out_$p307, out_$i308, out_$i309, out_$p310, out_$i311, out_$i312, out_$p313, out_$i314, out_$i316, out_$i317, out_$p318, out_$i319, out_$i321, out_$i322, out_$p323, out_$i324, out_$i326, out_$i327, out_$p328, out_$i329, out_$i331, out_$i332, out_$p333, out_$i334, out_$i336, out_$i337, out_$i338, out_$i339, out_$i340, out_$i341, out_$i342, out_vslice_dummy_var_58, out_vslice_dummy_var_59, out_vslice_dummy_var_60, out_vslice_dummy_var_61, out_vslice_dummy_var_62, out_vslice_dummy_var_63, out_vslice_dummy_var_64, out_vslice_dummy_var_65, out_vslice_dummy_var_66, out_vslice_dummy_var_67, out_vslice_dummy_var_68, out_vslice_dummy_var_69, out_vslice_dummy_var_70, out_vslice_dummy_var_71, out_vslice_dummy_var_72, out_vslice_dummy_var_73, out_vslice_dummy_var_74, out_vslice_dummy_var_75, out_vslice_dummy_var_76, out_vslice_dummy_var_77, out_vslice_dummy_var_78, out_vslice_dummy_var_79, out_vslice_dummy_var_80, out_vslice_dummy_var_81, out_vslice_dummy_var_82, out_vslice_dummy_var_83, out_vslice_dummy_var_84, out_vslice_dummy_var_85, out_vslice_dummy_var_86, out_vslice_dummy_var_87, out_vslice_dummy_var_88, out_vslice_dummy_var_89, out_vslice_dummy_var_90, out_vslice_dummy_var_91, out_vslice_dummy_var_92 := main_loop_$bb1(in_$p0, in_$p1, in_$p2, in_$p3, in_$p4, in_$p5, in_$p6, in_$p7, in_$p8, in_$p10, in_$p12, in_$p13, in_$p15, in_$p17, in_$p19, in_$p21, in_$p23, in_$p24, in_$p26, in_$p28, in_$p30, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$p95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$p104, out_$i106, out_$i107, out_$p108, out_$i110, out_$i111, out_$p112, out_$i114, out_$i115, out_$p116, out_$i118, out_$i119, out_$p120, out_$i122, out_$i123, out_$p124, out_$i125, out_$i126, out_$i127, out_$i128, out_$p129, out_$i130, out_$i131, out_$i132, out_$i133, out_$p134, out_$i135, out_$i136, out_$i137, out_$i138, out_$p139, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i150, out_$i151, out_$i152, out_$i153, out_$p154, out_$p155, out_$i157, out_$i158, out_$p159, out_$p160, out_$i162, out_$i163, out_$p164, out_$p165, out_$i167, out_$i168, out_$p169, out_$p170, out_$i172, out_$i173, out_$p174, out_$p175, out_$i177, out_$i178, out_$p179, out_$i180, out_$i182, out_$i183, out_$p184, out_$i185, out_$i187, out_$i188, out_$p189, out_$i190, out_$i192, out_$i193, out_$p194, out_$i195, out_$i197, out_$i198, out_$p199, out_$i200, out_$i202, out_$i203, out_$p204, out_$i206, out_$i207, out_$p208, out_$i210, out_$i211, out_$p212, out_$i214, out_$i215, out_$p216, out_$i218, out_$i219, out_$p220, out_$i222, out_$i223, out_$p224, out_$i226, out_$i227, out_$p228, out_$i230, out_$i231, out_$p232, out_$i234, out_$i235, out_$p236, out_$i238, out_$i239, out_$p240, out_$i242, out_$i243, out_$p244, out_$i245, out_$i246, out_$p247, out_$i248, out_$i249, out_$i251, out_$i252, out_$p253, out_$i254, out_$i255, out_$i257, out_$i258, out_$p259, out_$i260, out_$i261, out_$i263, out_$i264, out_$p265, out_$i266, out_$i267, out_$i269, out_$i270, out_$p271, out_$i272, out_$i273, out_$i275, out_$i276, out_$p277, out_$i278, out_$i279, out_$i280, out_$i281, out_$i282, out_$p283, out_$i284, out_$i285, out_$i286, out_$i287, out_$i288, out_$p289, out_$i290, out_$i291, out_$i292, out_$i293, out_$i294, out_$p295, out_$i296, out_$i297, out_$i298, out_$i299, out_$i300, out_$p301, out_$i302, out_$i303, out_$i304, out_$i305, out_$i306, out_$p307, out_$i308, out_$i309, out_$p310, out_$i311, out_$i312, out_$p313, out_$i314, out_$i316, out_$i317, out_$p318, out_$i319, out_$i321, out_$i322, out_$p323, out_$i324, out_$i326, out_$i327, out_$p328, out_$i329, out_$i331, out_$i332, out_$p333, out_$i334, out_$i336, out_$i337, out_$i338, out_$i339, out_$i340, out_$i341, out_$i342, out_vslice_dummy_var_58, out_vslice_dummy_var_59, out_vslice_dummy_var_60, out_vslice_dummy_var_61, out_vslice_dummy_var_62, out_vslice_dummy_var_63, out_vslice_dummy_var_64, out_vslice_dummy_var_65, out_vslice_dummy_var_66, out_vslice_dummy_var_67, out_vslice_dummy_var_68, out_vslice_dummy_var_69, out_vslice_dummy_var_70, out_vslice_dummy_var_71, out_vslice_dummy_var_72, out_vslice_dummy_var_73, out_vslice_dummy_var_74, out_vslice_dummy_var_75, out_vslice_dummy_var_76, out_vslice_dummy_var_77, out_vslice_dummy_var_78, out_vslice_dummy_var_79, out_vslice_dummy_var_80, out_vslice_dummy_var_81, out_vslice_dummy_var_82, out_vslice_dummy_var_83, out_vslice_dummy_var_84, out_vslice_dummy_var_85, out_vslice_dummy_var_86, out_vslice_dummy_var_87, out_vslice_dummy_var_88, out_vslice_dummy_var_89, out_vslice_dummy_var_90, out_vslice_dummy_var_91, out_vslice_dummy_var_92);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p10: ref, in_$p12: ref, in_$p13: ref, in_$p15: ref, in_$p17: ref, in_$p19: ref, in_$p21: ref, in_$p23: ref, in_$p24: ref, in_$p26: ref, in_$p28: ref, in_$p30: ref, in_$i49: i32, in_$i50: i1, in_$i51: i1, in_$i52: i1, in_$i53: i1, in_$i54: i1, in_$i55: i32, in_$i56: i1, in_$i57: i32, in_$i58: i1, in_$i59: i32, in_$i60: i1, in_$i61: i1, in_$i62: i1, in_$i63: i32, in_$i64: i1, in_$i65: i32, in_$i66: i1, in_$i67: i32, in_$i68: i1, in_$i69: i32, in_$i70: i32, in_$i71: i1, in_$i72: i32, in_$i73: i1, in_$i74: i32, in_$i75: i1, in_$i76: i32, in_$i77: i1, in_$i78: i1, in_$i79: i1, in_$i80: i1, in_$i81: i1, in_$i82: i1, in_$i83: i1, in_$i84: i1, in_$i85: i1, in_$i86: i1, in_$i87: i1, in_$i88: i1, in_$i89: i1, in_$i90: i1, in_$i91: i1, in_$i92: i1, in_$i93: i32, in_$i94: i1, in_$p95: ref, in_$i96: i32, in_$i97: i32, in_$i98: i32, in_$i99: i1, in_$i100: i32, in_$i101: i32, in_$i102: i32, in_$i103: i1, in_$p104: ref, in_$i106: i32, in_$i107: i1, in_$p108: ref, in_$i110: i32, in_$i111: i1, in_$p112: ref, in_$i114: i32, in_$i115: i1, in_$p116: ref, in_$i118: i32, in_$i119: i1, in_$p120: ref, in_$i122: i32, in_$i123: i1, in_$p124: ref, in_$i125: i32, in_$i126: i32, in_$i127: i32, in_$i128: i1, in_$p129: ref, in_$i130: i32, in_$i131: i32, in_$i132: i32, in_$i133: i1, in_$p134: ref, in_$i135: i32, in_$i136: i32, in_$i137: i32, in_$i138: i1, in_$p139: ref, in_$i140: i32, in_$i141: i32, in_$i142: i32, in_$i143: i1, in_$i144: i32, in_$i145: i1, in_$i146: i32, in_$i147: i1, in_$i148: i32, in_$i149: i1, in_$i150: i32, in_$i151: i1, in_$i152: i32, in_$i153: i1, in_$p154: ref, in_$p155: ref, in_$i157: i32, in_$i158: i1, in_$p159: ref, in_$p160: ref, in_$i162: i32, in_$i163: i1, in_$p164: ref, in_$p165: ref, in_$i167: i32, in_$i168: i1, in_$p169: ref, in_$p170: ref, in_$i172: i32, in_$i173: i1, in_$p174: ref, in_$p175: ref, in_$i177: i32, in_$i178: i1, in_$p179: ref, in_$i180: i32, in_$i182: i32, in_$i183: i1, in_$p184: ref, in_$i185: i32, in_$i187: i32, in_$i188: i1, in_$p189: ref, in_$i190: i32, in_$i192: i32, in_$i193: i1, in_$p194: ref, in_$i195: i32, in_$i197: i32, in_$i198: i1, in_$p199: ref, in_$i200: i32, in_$i202: i32, in_$i203: i1, in_$p204: ref, in_$i206: i32, in_$i207: i1, in_$p208: ref, in_$i210: i32, in_$i211: i1, in_$p212: ref, in_$i214: i32, in_$i215: i1, in_$p216: ref, in_$i218: i32, in_$i219: i1, in_$p220: ref, in_$i222: i32, in_$i223: i1, in_$p224: ref, in_$i226: i32, in_$i227: i1, in_$p228: ref, in_$i230: i32, in_$i231: i1, in_$p232: ref, in_$i234: i32, in_$i235: i1, in_$p236: ref, in_$i238: i32, in_$i239: i1, in_$p240: ref, in_$i242: i32, in_$i243: i1, in_$p244: ref, in_$i245: i32, in_$i246: i1, in_$p247: ref, in_$i248: i32, in_$i249: i64, in_$i251: i32, in_$i252: i1, in_$p253: ref, in_$i254: i32, in_$i255: i64, in_$i257: i32, in_$i258: i1, in_$p259: ref, in_$i260: i32, in_$i261: i64, in_$i263: i32, in_$i264: i1, in_$p265: ref, in_$i266: i32, in_$i267: i64, in_$i269: i32, in_$i270: i1, in_$p271: ref, in_$i272: i32, in_$i273: i64, in_$i275: i32, in_$i276: i1, in_$p277: ref, in_$i278: i32, in_$i279: i32, in_$i280: i32, in_$i281: i32, in_$i282: i1, in_$p283: ref, in_$i284: i32, in_$i285: i32, in_$i286: i32, in_$i287: i32, in_$i288: i1, in_$p289: ref, in_$i290: i32, in_$i291: i32, in_$i292: i32, in_$i293: i32, in_$i294: i1, in_$p295: ref, in_$i296: i32, in_$i297: i32, in_$i298: i32, in_$i299: i32, in_$i300: i1, in_$p301: ref, in_$i302: i32, in_$i303: i32, in_$i304: i32, in_$i305: i32, in_$i306: i1, in_$p307: ref, in_$i308: i32, in_$i309: i1, in_$p310: ref, in_$i311: i32, in_$i312: i1, in_$p313: ref, in_$i314: i32, in_$i316: i32, in_$i317: i1, in_$p318: ref, in_$i319: i32, in_$i321: i32, in_$i322: i1, in_$p323: ref, in_$i324: i32, in_$i326: i32, in_$i327: i1, in_$p328: ref, in_$i329: i32, in_$i331: i32, in_$i332: i1, in_$p333: ref, in_$i334: i32, in_$i336: i32, in_$i337: i1, in_$i338: i32, in_$i339: i32, in_$i340: i1, in_$i341: i32, in_$i342: i1, in_vslice_dummy_var_58: i32, in_vslice_dummy_var_59: i32, in_vslice_dummy_var_60: i32, in_vslice_dummy_var_61: i32, in_vslice_dummy_var_62: i32, in_vslice_dummy_var_63: i32, in_vslice_dummy_var_64: i32, in_vslice_dummy_var_65: i32, in_vslice_dummy_var_66: i32, in_vslice_dummy_var_67: i32, in_vslice_dummy_var_68: i32, in_vslice_dummy_var_69: i32, in_vslice_dummy_var_70: i32, in_vslice_dummy_var_71: i32, in_vslice_dummy_var_72: i32, in_vslice_dummy_var_73: i32, in_vslice_dummy_var_74: i32, in_vslice_dummy_var_75: i32, in_vslice_dummy_var_76: i32, in_vslice_dummy_var_77: i32, in_vslice_dummy_var_78: i32, in_vslice_dummy_var_79: i32, in_vslice_dummy_var_80: i32, in_vslice_dummy_var_81: i32, in_vslice_dummy_var_82: i32, in_vslice_dummy_var_83: i32, in_vslice_dummy_var_84: i32, in_vslice_dummy_var_85: i32, in_vslice_dummy_var_86: i32, in_vslice_dummy_var_87: i32, in_vslice_dummy_var_88: i32, in_vslice_dummy_var_89: i32, in_vslice_dummy_var_90: i32, in_vslice_dummy_var_91: i32, in_vslice_dummy_var_92: i32) returns (out_$i49: i32, out_$i50: i1, out_$i51: i1, out_$i52: i1, out_$i53: i1, out_$i54: i1, out_$i55: i32, out_$i56: i1, out_$i57: i32, out_$i58: i1, out_$i59: i32, out_$i60: i1, out_$i61: i1, out_$i62: i1, out_$i63: i32, out_$i64: i1, out_$i65: i32, out_$i66: i1, out_$i67: i32, out_$i68: i1, out_$i69: i32, out_$i70: i32, out_$i71: i1, out_$i72: i32, out_$i73: i1, out_$i74: i32, out_$i75: i1, out_$i76: i32, out_$i77: i1, out_$i78: i1, out_$i79: i1, out_$i80: i1, out_$i81: i1, out_$i82: i1, out_$i83: i1, out_$i84: i1, out_$i85: i1, out_$i86: i1, out_$i87: i1, out_$i88: i1, out_$i89: i1, out_$i90: i1, out_$i91: i1, out_$i92: i1, out_$i93: i32, out_$i94: i1, out_$p95: ref, out_$i96: i32, out_$i97: i32, out_$i98: i32, out_$i99: i1, out_$i100: i32, out_$i101: i32, out_$i102: i32, out_$i103: i1, out_$p104: ref, out_$i106: i32, out_$i107: i1, out_$p108: ref, out_$i110: i32, out_$i111: i1, out_$p112: ref, out_$i114: i32, out_$i115: i1, out_$p116: ref, out_$i118: i32, out_$i119: i1, out_$p120: ref, out_$i122: i32, out_$i123: i1, out_$p124: ref, out_$i125: i32, out_$i126: i32, out_$i127: i32, out_$i128: i1, out_$p129: ref, out_$i130: i32, out_$i131: i32, out_$i132: i32, out_$i133: i1, out_$p134: ref, out_$i135: i32, out_$i136: i32, out_$i137: i32, out_$i138: i1, out_$p139: ref, out_$i140: i32, out_$i141: i32, out_$i142: i32, out_$i143: i1, out_$i144: i32, out_$i145: i1, out_$i146: i32, out_$i147: i1, out_$i148: i32, out_$i149: i1, out_$i150: i32, out_$i151: i1, out_$i152: i32, out_$i153: i1, out_$p154: ref, out_$p155: ref, out_$i157: i32, out_$i158: i1, out_$p159: ref, out_$p160: ref, out_$i162: i32, out_$i163: i1, out_$p164: ref, out_$p165: ref, out_$i167: i32, out_$i168: i1, out_$p169: ref, out_$p170: ref, out_$i172: i32, out_$i173: i1, out_$p174: ref, out_$p175: ref, out_$i177: i32, out_$i178: i1, out_$p179: ref, out_$i180: i32, out_$i182: i32, out_$i183: i1, out_$p184: ref, out_$i185: i32, out_$i187: i32, out_$i188: i1, out_$p189: ref, out_$i190: i32, out_$i192: i32, out_$i193: i1, out_$p194: ref, out_$i195: i32, out_$i197: i32, out_$i198: i1, out_$p199: ref, out_$i200: i32, out_$i202: i32, out_$i203: i1, out_$p204: ref, out_$i206: i32, out_$i207: i1, out_$p208: ref, out_$i210: i32, out_$i211: i1, out_$p212: ref, out_$i214: i32, out_$i215: i1, out_$p216: ref, out_$i218: i32, out_$i219: i1, out_$p220: ref, out_$i222: i32, out_$i223: i1, out_$p224: ref, out_$i226: i32, out_$i227: i1, out_$p228: ref, out_$i230: i32, out_$i231: i1, out_$p232: ref, out_$i234: i32, out_$i235: i1, out_$p236: ref, out_$i238: i32, out_$i239: i1, out_$p240: ref, out_$i242: i32, out_$i243: i1, out_$p244: ref, out_$i245: i32, out_$i246: i1, out_$p247: ref, out_$i248: i32, out_$i249: i64, out_$i251: i32, out_$i252: i1, out_$p253: ref, out_$i254: i32, out_$i255: i64, out_$i257: i32, out_$i258: i1, out_$p259: ref, out_$i260: i32, out_$i261: i64, out_$i263: i32, out_$i264: i1, out_$p265: ref, out_$i266: i32, out_$i267: i64, out_$i269: i32, out_$i270: i1, out_$p271: ref, out_$i272: i32, out_$i273: i64, out_$i275: i32, out_$i276: i1, out_$p277: ref, out_$i278: i32, out_$i279: i32, out_$i280: i32, out_$i281: i32, out_$i282: i1, out_$p283: ref, out_$i284: i32, out_$i285: i32, out_$i286: i32, out_$i287: i32, out_$i288: i1, out_$p289: ref, out_$i290: i32, out_$i291: i32, out_$i292: i32, out_$i293: i32, out_$i294: i1, out_$p295: ref, out_$i296: i32, out_$i297: i32, out_$i298: i32, out_$i299: i32, out_$i300: i1, out_$p301: ref, out_$i302: i32, out_$i303: i32, out_$i304: i32, out_$i305: i32, out_$i306: i1, out_$p307: ref, out_$i308: i32, out_$i309: i1, out_$p310: ref, out_$i311: i32, out_$i312: i1, out_$p313: ref, out_$i314: i32, out_$i316: i32, out_$i317: i1, out_$p318: ref, out_$i319: i32, out_$i321: i32, out_$i322: i1, out_$p323: ref, out_$i324: i32, out_$i326: i32, out_$i327: i1, out_$p328: ref, out_$i329: i32, out_$i331: i32, out_$i332: i1, out_$p333: ref, out_$i334: i32, out_$i336: i32, out_$i337: i1, out_$i338: i32, out_$i339: i32, out_$i340: i1, out_$i341: i32, out_$i342: i1, out_vslice_dummy_var_58: i32, out_vslice_dummy_var_59: i32, out_vslice_dummy_var_60: i32, out_vslice_dummy_var_61: i32, out_vslice_dummy_var_62: i32, out_vslice_dummy_var_63: i32, out_vslice_dummy_var_64: i32, out_vslice_dummy_var_65: i32, out_vslice_dummy_var_66: i32, out_vslice_dummy_var_67: i32, out_vslice_dummy_var_68: i32, out_vslice_dummy_var_69: i32, out_vslice_dummy_var_70: i32, out_vslice_dummy_var_71: i32, out_vslice_dummy_var_72: i32, out_vslice_dummy_var_73: i32, out_vslice_dummy_var_74: i32, out_vslice_dummy_var_75: i32, out_vslice_dummy_var_76: i32, out_vslice_dummy_var_77: i32, out_vslice_dummy_var_78: i32, out_vslice_dummy_var_79: i32, out_vslice_dummy_var_80: i32, out_vslice_dummy_var_81: i32, out_vslice_dummy_var_82: i32, out_vslice_dummy_var_83: i32, out_vslice_dummy_var_84: i32, out_vslice_dummy_var_85: i32, out_vslice_dummy_var_86: i32, out_vslice_dummy_var_87: i32, out_vslice_dummy_var_88: i32, out_vslice_dummy_var_89: i32, out_vslice_dummy_var_90: i32, out_vslice_dummy_var_91: i32, out_vslice_dummy_var_92: i32);
  modifies $M.9, $M.11, $M.13, $M.15, $M.0, $M.10, $M.12, $M.14, $M.16, $M.35, $CurrAddr, $M.40, $M.39, $M.42, $M.28, $M.19, $M.8, $M.38, $M.43, $M.1, $M.2, $M.3, $M.4, $M.5, $M.29, $M.27, $M.17, $M.18, $M.20, $M.21, $M.22, $M.23, $M.24, $M.7, $M.25, $M.26, assertsPassed, $M.44, $M.31, $M.32, $M.33, $M.34;


