var $M.0: [ref]i8;

var $M.2: ref;

var $M.3: i32;

var $M.4: [ref]ref;

var $M.5: [ref]i8;

var $M.6: [ref]ref;

var $M.7: [ref]ref;

var $M.8: [ref]ref;

var $M.9: [ref]ref;

var $M.10: [ref]i24;

var $M.11: [ref]i8;

var $M.12: [ref]i8;

var $M.13: [ref]i8;

var $M.14: [ref]i16;

var $M.15: [ref]i16;

var $M.16: [ref]i32;

var $M.17: [ref]ref;

var $M.19: [ref]ref;

var $M.20: [ref]ref;

var $M.21: [ref]ref;

var $M.22: [ref]ref;

var $M.23: [ref]ref;

var $M.24: [ref]ref;

var $M.25: [ref]ref;

var $M.26: [ref]ref;

var $M.27: [ref]ref;

var $M.28: [ref]ref;

var $M.29: [ref]ref;

var $M.30: [ref]ref;

var $M.31: [ref]ref;

var $M.32: [ref]ref;

var $M.33: [ref]i8;

var $M.34: ref;

var $M.35: ref;

var $M.36: ref;

var $M.37: ref;

var $M.38: ref;

var $M.39: [ref]i8;

var $M.40: [ref]i8;

var $M.41: [ref]i8;

var $M.42: [ref]i8;

var $M.43: i32;

var $M.44: i32;

var $M.45: i32;

var $M.46: i32;

var $M.47: i32;

var $M.48: i32;

var $M.49: i32;

var $M.50: i32;

var $M.51: ref;

var $M.52: i32;

var $M.56: [ref]i8;

var $M.57: [ref]i16;

var $M.84: [ref]i8;

var $M.85: [ref]i8;

var $M.86: [ref]i8;

var $M.87: [ref]i8;

var $M.88: [ref]i8;

var $M.89: [ref]i8;

var $M.90: [ref]i8;

var $M.91: [ref]i8;

var $M.92: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 594157);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32848));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 1028);

const __ksymtab_team_modeop_port_enter: ref;

axiom __ksymtab_team_modeop_port_enter == $sub.ref(0, 2068);

const {:count 23} __kstrtab_team_modeop_port_enter: ref;

axiom __kstrtab_team_modeop_port_enter == $sub.ref(0, 3115);

const team_ethtool_ops: ref;

axiom team_ethtool_ops == $sub.ref(0, 4515);

const team_nl_mcgrps: ref;

axiom team_nl_mcgrps == $sub.ref(0, 5555);

const {:count 8} team_nl_option_policy: ref;

axiom team_nl_option_policy == $sub.ref(0, 6611);

const team_netdev_ops: ref;

axiom team_netdev_ops == $sub.ref(0, 8115);

const {:count 4} team_nl_policy: ref;

axiom team_nl_policy == $sub.ref(0, 9155);

const {:count 4} team_nl_ops: ref;

axiom team_nl_ops == $sub.ref(0, 10339);

const team_notifier_block: ref;

axiom team_notifier_block == $sub.ref(0, 11387);

const team_link_ops: ref;

axiom team_link_ops == $sub.ref(0, 12595);

const team_tx_busylock_key: ref;

axiom team_tx_busylock_key == $sub.ref(0, 13627);

const team_netdev_xmit_lock_key: ref;

axiom team_netdev_xmit_lock_key == $sub.ref(0, 14659);

const team_netdev_addr_lock_key: ref;

axiom team_netdev_addr_lock_key == $sub.ref(0, 15691);

const {:count 10} team_options: ref;

axiom team_options == $sub.ref(0, 17355);

const __team_no_mode: ref;

axiom __team_no_mode == $sub.ref(0, 18419);

const team_nl_family: ref;

axiom team_nl_family == $sub.ref(0, 19563);

const {:count 21} __kstrtab_team_mode_unregister: ref;

axiom __kstrtab_team_mode_unregister == $sub.ref(0, 20608);

const {:count 19} __kstrtab_team_mode_register: ref;

axiom __kstrtab_team_mode_register == $sub.ref(0, 21651);

const mode_list: ref;

axiom mode_list == $sub.ref(0, 22691);

const mode_list_lock: ref;

axiom mode_list_lock == $sub.ref(0, 23787);

const {:count 26} __kstrtab_team_options_change_check: ref;

axiom __kstrtab_team_options_change_check == $sub.ref(0, 24837);

const {:count 28} __kstrtab_team_option_inst_set_change: ref;

axiom __kstrtab_team_option_inst_set_change == $sub.ref(0, 25889);

const {:count 24} __kstrtab_team_options_unregister: ref;

axiom __kstrtab_team_options_unregister == $sub.ref(0, 26937);

const {:count 22} __kstrtab_team_options_register: ref;

axiom __kstrtab_team_options_register == $sub.ref(0, 27983);

const {:count 33} __kstrtab_team_modeop_port_change_dev_addr: ref;

axiom __kstrtab_team_modeop_port_change_dev_addr == $sub.ref(0, 29040);

const LDV_SKBS: ref;

axiom LDV_SKBS == $sub.ref(0, 30072);

const {:count 15} set_impl: ref;

axiom set_impl == $sub.ref(0, 31216);

const ldv_retval_2: ref;

axiom ldv_retval_2 == $sub.ref(0, 32244);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 33272);

const ldvarg4: ref;

axiom ldvarg4 == $sub.ref(0, 34304);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 35332);

const team_ethtool_ops_group0: ref;

axiom team_ethtool_ops_group0 == $sub.ref(0, 36364);

const ldv_state_variable_4: ref;

axiom ldv_state_variable_4 == $sub.ref(0, 37392);

const team_link_ops_group1: ref;

axiom team_link_ops_group1 == $sub.ref(0, 38424);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 39452);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 40480);

const team_link_ops_group2: ref;

axiom team_link_ops_group2 == $sub.ref(0, 41512);

const team_link_ops_group0: ref;

axiom team_link_ops_group0 == $sub.ref(0, 42544);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 43572);

const ldv_state_variable_3: ref;

axiom ldv_state_variable_3 == $sub.ref(0, 44600);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 45628);

const team_netdev_ops_group1: ref;

axiom team_netdev_ops_group1 == $sub.ref(0, 46660);

const last_index: ref;

axiom last_index == $sub.ref(0, 47688);

const __ksymtab_team_mode_unregister: ref;

axiom __ksymtab_team_mode_unregister == $sub.ref(0, 48728);

const __ksymtab_team_mode_register: ref;

axiom __ksymtab_team_mode_register == $sub.ref(0, 49768);

const __ksymtab_team_options_change_check: ref;

axiom __ksymtab_team_options_change_check == $sub.ref(0, 50808);

const __ksymtab_team_option_inst_set_change: ref;

axiom __ksymtab_team_option_inst_set_change == $sub.ref(0, 51848);

const __ksymtab_team_options_unregister: ref;

axiom __ksymtab_team_options_unregister == $sub.ref(0, 52888);

const __ksymtab_team_options_register: ref;

axiom __ksymtab_team_options_register == $sub.ref(0, 53928);

const __ksymtab_team_modeop_port_change_dev_addr: ref;

axiom __ksymtab_team_modeop_port_change_dev_addr == $sub.ref(0, 54968);

const {:count 52} .str.1: ref;

axiom .str.1 == $sub.ref(0, 56044);

const {:count 219} .str.2: ref;

axiom .str.2 == $sub.ref(0, 57287);

const {:count 24} .str.3: ref;

axiom .str.3 == $sub.ref(0, 58335);

const _ctype: ref;

axiom _ctype == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const .str: ref;

axiom .str == $sub.ref(0, 59374);

const {:count 9} .str.26: ref;

axiom .str.26 == $sub.ref(0, 60407);

const {:count 5} .str.42: ref;

axiom .str.42 == $sub.ref(0, 61436);

const {:count 19} .str.43: ref;

axiom .str.43 == $sub.ref(0, 62479);

const {:count 22} .str.44: ref;

axiom .str.44 == $sub.ref(0, 63525);

const {:count 19} .str.45: ref;

axiom .str.45 == $sub.ref(0, 64568);

const {:count 22} .str.46: ref;

axiom .str.46 == $sub.ref(0, 65614);

const {:count 8} .str.47: ref;

axiom .str.47 == $sub.ref(0, 66646);

const {:count 12} .str.48: ref;

axiom .str.48 == $sub.ref(0, 67682);

const {:count 20} .str.49: ref;

axiom .str.49 == $sub.ref(0, 68726);

const {:count 9} .str.50: ref;

axiom .str.50 == $sub.ref(0, 69759);

const {:count 9} .str.51: ref;

axiom .str.51 == $sub.ref(0, 70792);

const {:count 5} .str.11: ref;

axiom .str.11 == $sub.ref(0, 71821);

const {:count 36} .str.27: ref;

axiom .str.27 == $sub.ref(0, 72881);

const {:count 19} .str.28: ref;

axiom .str.28 == $sub.ref(0, 73924);

const {:count 9} .str.29: ref;

axiom .str.29 == $sub.ref(0, 74957);

const {:count 10} .str.30: ref;

axiom .str.30 == $sub.ref(0, 75991);

const system_wq: ref;

axiom system_wq == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 44} .str.52: ref;

axiom .str.52 == $sub.ref(0, 77059);

const {:count 50} .str.53: ref;

axiom .str.53 == $sub.ref(0, 78133);

const {:count 21} .str.54: ref;

axiom .str.54 == $sub.ref(0, 79178);

const {:count 31} .str.55: ref;

axiom .str.55 == $sub.ref(0, 80233);

const {:count 22} .str.56: ref;

axiom .str.56 == $sub.ref(0, 81279);

const {:count 13} .str.57: ref;

axiom .str.57 == $sub.ref(0, 82316);

const {:count 47} .str.32: ref;

axiom .str.32 == $sub.ref(0, 83387);

const {:count 24} .str.33: ref;

axiom .str.33 == $sub.ref(0, 84435);

const {:count 62} .str.31: ref;

axiom .str.31 == $sub.ref(0, 85521);

const {:count 45} .str.34: ref;

axiom .str.34 == $sub.ref(0, 86590);

const {:count 25} .str.4: ref;

axiom .str.4 == $sub.ref(0, 87639);

const {:count 44} .str.6: ref;

axiom .str.6 == $sub.ref(0, 88707);

const rcu_lock_map: ref;

axiom rcu_lock_map == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const __preempt_count: ref;

axiom __preempt_count == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

const {:count 42} .str.5: ref;

axiom .str.5 == $sub.ref(0, 89773);

const {:count 78} .str.7: ref;

axiom .str.7 == $sub.ref(0, 90875);

const {:count 46} .str.8: ref;

axiom .str.8 == $sub.ref(0, 91945);

const {:count 62} .str.9: ref;

axiom .str.9 == $sub.ref(0, 93031);

const {:count 62} .str.10: ref;

axiom .str.10 == $sub.ref(0, 94117);

const {:count 14} .str.12: ref;

axiom .str.12 == $sub.ref(0, 95155);

const {:count 30} .str.13: ref;

axiom .str.13 == $sub.ref(0, 96209);

const {:count 37} .str.14: ref;

axiom .str.14 == $sub.ref(0, 97270);

const {:count 26} .str.15: ref;

axiom .str.15 == $sub.ref(0, 98320);

const {:count 37} .str.16: ref;

axiom .str.16 == $sub.ref(0, 99381);

const {:count 39} .str.17: ref;

axiom .str.17 == $sub.ref(0, 100444);

const {:count 36} .str.18: ref;

axiom .str.18 == $sub.ref(0, 101504);

const {:count 41} .str.19: ref;

axiom .str.19 == $sub.ref(0, 102569);

const {:count 42} .str.20: ref;

axiom .str.20 == $sub.ref(0, 103635);

const {:count 22} .str.21: ref;

axiom .str.21 == $sub.ref(0, 104681);

const this_cpu_off: ref;

axiom this_cpu_off == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32808));

const {:count 41} .str.25: ref;

axiom .str.25 == $sub.ref(0, 105746);

const {:count 23} .str.24: ref;

axiom .str.24 == $sub.ref(0, 106793);

const {:count 32} .str.22: ref;

axiom .str.22 == $sub.ref(0, 107849);

const {:count 31} .str.23: ref;

axiom .str.23 == $sub.ref(0, 108904);

const __per_cpu_offset: ref;

axiom __per_cpu_offset == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32816));

const cpu_possible_mask: ref;

axiom cpu_possible_mask == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32824));

const nr_cpu_ids: ref;

axiom nr_cpu_ids == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32832));

const {:count 24} .str.37: ref;

axiom .str.37 == $sub.ref(0, 109952);

const {:count 31} .str.60: ref;

axiom .str.60 == $sub.ref(0, 111007);

const pv_irq_ops: ref;

axiom pv_irq_ops == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32840));

const {:count 34} .str.35: ref;

axiom .str.35 == $sub.ref(0, 112065);

const {:count 12} .str.36: ref;

axiom .str.36 == $sub.ref(0, 113101);

const {:count 27} .str.58: ref;

axiom .str.58 == $sub.ref(0, 114152);

const {:count 27} .str.59: ref;

axiom .str.59 == $sub.ref(0, 115203);

const {:count 34} .str.40: ref;

axiom .str.40 == $sub.ref(0, 116261);

const {:count 35} .str.41: ref;

axiom .str.41 == $sub.ref(0, 117320);

const {:count 34} .str.38: ref;

axiom .str.38 == $sub.ref(0, 118378);

const {:count 35} .str.39: ref;

axiom .str.39 == $sub.ref(0, 119437);

const {:count 11} .str.61: ref;

axiom .str.61 == $sub.ref(0, 120472);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32848));

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 121504);

const {:count 3} .str.1.136: ref;

axiom .str.1.136 == $sub.ref(0, 122531);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 123569);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 124597);

const team_modeop_port_enter: ref;

axiom team_modeop_port_enter == $sub.ref(0, 125629);

procedure team_modeop_port_enter($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation team_modeop_port_enter($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 0} $i2 := team_port_set_team_dev_addr($p0, $p1);
    call {:si_unique_call 1} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 126661);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const team_port_set_team_dev_addr: ref;

axiom team_port_set_team_dev_addr == $sub.ref(0, 127693);

procedure team_port_set_team_dev_addr($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation team_port_set_team_dev_addr($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(0, 1));
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 3176)), $mul.ref(840, 1));
    goto corral_source_split_9;

  corral_source_split_9:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} $i8 := __set_port_dev_addr($p3, $p7);
    call {:si_unique_call 3} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const __set_port_dev_addr: ref;

axiom __set_port_dev_addr == $sub.ref(0, 128725);

procedure __set_port_dev_addr($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation __set_port_dev_addr($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i16;
  var $p10: ref;
  var $i11: i32;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 4} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(581, 1));
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i64($i4);
    call {:si_unique_call 5} {:cexpr "__len"} boogie_si_record_i64($i5);
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_18;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 6} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p7, $p1, $i5, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_2;
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(540, 1));
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $i9 := $load.i16($M.0, $p8);
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p10, $i9);
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 7} $i11 := dev_set_mac_address($p0, $p2);
    call {:si_unique_call 8} {:cexpr "tmp"} boogie_si_record_i32($i11);
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 129757);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const dev_set_mac_address: ref;

axiom dev_set_mac_address == $sub.ref(0, 130789);

procedure dev_set_mac_address($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_set_mac_address($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 1} true;
    call {:si_unique_call 9} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 10} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const team_modeop_port_change_dev_addr: ref;

axiom team_modeop_port_change_dev_addr == $sub.ref(0, 131821);

procedure team_modeop_port_change_dev_addr($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation team_modeop_port_change_dev_addr($p0: ref, $p1: ref)
{
  var vslice_dummy_var_38: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} vslice_dummy_var_38 := team_port_set_team_dev_addr($p0, $p1);
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    return;
}



const team_options_register: ref;

axiom team_options_register == $sub.ref(0, 132853);

procedure team_options_register($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.16, $M.25, $M.26, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.31, $M.32, $M.23, $M.24, $M.4, $M.3;



implementation team_options_register($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 12} {:cexpr "team_options_register:arg:option_count"} boogie_si_record_i64($i2);
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} $i3 := __team_options_register($p0, $p1, $i2);
    call {:si_unique_call 14} {:cexpr "err"} boogie_si_record_i32($i3);
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 15} __team_options_change_check($p0);
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    $i5 := $i3;
    goto $bb3;
}



const __team_options_register: ref;

axiom __team_options_register == $sub.ref(0, 133885);

procedure __team_options_register($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.16, $M.25, $M.26, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.31, $M.32, $CurrAddr, $M.23, $M.24, $M.4, $M.3;



implementation __team_options_register($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $i9: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $i17: i32;
  var $p20: ref;
  var $p21: ref;
  var $i23: i64;
  var $p24: ref;
  var $i25: i64;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $i30: i32;
  var $i31: i32;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;
  var $p10: ref;
  var $i11: i32;
  var $i35: i1;
  var $i37: i64;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $i42: i32;
  var $i43: i32;
  var $i44: i64;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $i50: i64;
  var $i51: i1;
  var $i36: i32;
  var $p52: ref;
  var $i53: i32;
  var $i54: i1;
  var $i56: i64;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $i60: i1;
  var $i55: i32;
  var $i61: i32;
  var $i62: i32;
  var $i18: i32;
  var $i19: i32;
  var $i63: i32;
  var $i64: i1;
  var $i66: i64;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $i70: i32;
  var $i71: i1;
  var $i65: i32;
  var $p72: ref;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} {:cexpr "__team_options_register:arg:option_count"} boogie_si_record_i64($i2);
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    $i3 := $mul.i64($i2, 8);
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 17} $p4 := kzalloc($i3, 208);
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i9 := $ult.i64(0, $i2);
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i35 := $ult.i64(0, $i2);
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p5);
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} kfree($p52);
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb20:
    assume $i35 == 1;
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    $i36 := 0;
    goto $bb23;

  $bb23:
    call $i37, $p38, $p39, $i40, $i41, $i42, $i43, $i44, $p45, $p46, $p47, $p48, $i49, $i50, $i51, $i36 := __team_options_register_loop_$bb23($p0, $i2, $p5, $i37, $p38, $p39, $i40, $i41, $i42, $i43, $i44, $p45, $p46, $p47, $p48, $i49, $i50, $i51, $i36);
    goto $bb23_last;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i37 := $sext.i32.i64($i36);
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($p5, $mul.ref($i37, 8));
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} $i40 := __team_option_inst_add_option($p0, $p39);
    call {:si_unique_call 23} {:cexpr "err"} boogie_si_record_i32($i40);
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    $i42, $i43 := $i36, $i40;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i44 := $sext.i32.i64($i36);
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($p5, $mul.ref($i44, 8));
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p46, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(336, 1));
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} list_add_tail($p47, $p48);
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    $i49 := $add.i32($i36, 1);
    call {:si_unique_call 26} {:cexpr "i"} boogie_si_record_i32($i49);
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    $i50 := $sext.i32.i64($i49);
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    $i51 := $ult.i64($i50, $i2);
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i51 == 1);
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb29:
    assume $i51 == 1;
    assume {:verifier.code 0} true;
    $i36 := $i49;
    goto $bb29_dummy;

  $bb25:
    assume $i41 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i53 := $sub.i32($i42, 1);
    call {:si_unique_call 24} {:cexpr "i"} boogie_si_record_i32($i53);
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    $i54 := $sge.i32($i53, 0);
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i54 == 1);
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i61 := $trunc.i64.i32($i2);
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    $i62 := $sub.i32($i61, 1);
    call {:si_unique_call 30} {:cexpr "i"} boogie_si_record_i32($i62);
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    $i18, $i19 := $i62, $i43;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    $i63 := $sub.i32($i18, 1);
    call {:si_unique_call 19} {:cexpr "i"} boogie_si_record_i32($i63);
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    $i64 := $sge.i32($i63, 0);
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume !($i64 == 1);
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p5);
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} kfree($p72);
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    $i8 := $i19;
    goto $bb3;

  $bb40:
    assume $i64 == 1;
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    $i65 := $i63;
    goto $bb43;

  $bb43:
    call $i66, $p67, $p68, $p69, $i70, $i71, $i65 := __team_options_register_loop_$bb43($p5, $i66, $p67, $p68, $p69, $i70, $i71, $i65);
    goto $bb43_last;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i66 := $sext.i32.i64($i65);
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($p5, $mul.ref($i66, 8));
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p68);
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 31} kfree($p69);
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    $i70 := $sub.i32($i65, 1);
    call {:si_unique_call 32} {:cexpr "i"} boogie_si_record_i32($i70);
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    $i71 := $sge.i32($i70, 0);
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i71 == 1);
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb45:
    assume $i71 == 1;
    assume {:verifier.code 0} true;
    $i65 := $i70;
    goto $bb45_dummy;

  $bb32:
    assume $i54 == 1;
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    $i55 := $i53;
    goto $bb35;

  $bb35:
    call $i56, $p57, $p58, $i59, $i60, $i55 := __team_options_register_loop_$bb35($p0, $p5, $i56, $p57, $p58, $i59, $i60, $i55);
    goto $bb35_last;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i56 := $sext.i32.i64($i55);
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($p5, $mul.ref($i56, 8));
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} __team_option_inst_del_option($p0, $p58);
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    $i59 := $sub.i32($i55, 1);
    call {:si_unique_call 29} {:cexpr "i"} boogie_si_record_i32($i59);
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    $i60 := $sge.i32($i59, 0);
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i60 == 1);
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb37:
    assume $i60 == 1;
    assume {:verifier.code 0} true;
    $i55 := $i59;
    goto $bb37_dummy;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    $p10, $i11 := $p1, 0;
    goto $bb8;

  $bb8:
    call $p12, $p13, $p14, $i15, $i16, $i17, $p20, $p21, $i23, $p24, $i25, $p26, $p27, $i28, $i29, $i30, $i31, $p32, $i33, $i34, $p10, $i11 := __team_options_register_loop_$bb8($p0, $i2, $p5, $p12, $p13, $p14, $i15, $i16, $i17, $p20, $p21, $i23, $p24, $i25, $p26, $p27, $i28, $i29, $i30, $i31, $p32, $i33, $i34, $p10, $i11);
    goto $bb8_last;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p10, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    call {:si_unique_call 18} $p14 := __team_find_option($p0, $p13);
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    $i17 := $i11;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p10);
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    call {:si_unique_call 20} $p21 := kmemdup($p20, 64, 208);
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i11);
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($p5, $mul.ref($i23, 8));
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p24, $p21);
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i11);
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p5, $mul.ref($i25, 8));
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    $i29 := $eq.i64($i28, 0);
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    $i30 := $i11;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i31 := $add.i32($i11, 1);
    call {:si_unique_call 21} {:cexpr "i"} boogie_si_record_i32($i31);
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($p10, $mul.ref(1, 64));
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    $i33 := $sext.i32.i64($i31);
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    $i34 := $ult.i64($i33, $i2);
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i34 == 1);
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb17:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    $p10, $i11 := $p32, $i31;
    goto $bb17_dummy;

  $bb14:
    assume $i29 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    $i18, $i19 := $i30, $sub.i32(0, 12);
    goto $bb12;

  $bb10:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    $i18, $i19 := $i17, $sub.i32(0, 17);
    goto $bb12;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 12);
    goto $bb3;

  $bb45_dummy:
    assume false;
    return;

  $bb43_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_142;

  $bb37_dummy:
    assume false;
    return;

  $bb35_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_126;

  $bb29_dummy:
    assume false;
    return;

  $bb23_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_96;

  $bb17_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_57;
}



const __team_options_change_check: ref;

axiom __team_options_change_check == $sub.ref(0, 134917);

procedure __team_options_change_check($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.16, $M.25, $M.26, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.31, $M.32, $M.4, $M.3, $M.23, $M.24;



implementation __team_options_change_check($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p14: ref;
  var $i15: i8;
  var $i16: i1;
  var $p17: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p13: ref;
  var $i25: i32;
  var $i26: i1;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var vslice_dummy_var_39: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} $p1 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p1);
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, $p1);
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(352, 1)), $mul.ref(0, 1));
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(352, 1));
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i9, $i11);
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} $i25 := team_nl_send_event_options_get($p0, $p1);
    call {:si_unique_call 37} {:cexpr "err"} boogie_si_record_i32($i25);
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    return;

  $bb12:
    assume $i26 == 1;
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i25, $sub.i32(0, 3));
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb14;

  $bb15:
    assume $i27 == 1;
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(0, 1));
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} vslice_dummy_var_39 := netdev_warn.ref.ref.i32($p29, .str.1, $i25);
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    $p13 := $p6;
    goto $bb4;

  $bb4:
    call $p14, $i15, $i16, $p17, $p19, $p20, $p21, $p22, $i23, $i24, $p13 := __team_options_change_check_loop_$bb4($p1, $i11, $p14, $i15, $i16, $p17, $p19, $p20, $p21, $p22, $i23, $i24, $p13);
    goto $bb4_last;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i8.i1($i15);
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, $i11);
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i24 == 1);
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb9:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    $p13 := $p20;
    goto $bb9_dummy;

  $bb6:
    assume $i16 == 1;
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p13, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} list_add_tail($p17, $p1);
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb9_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_173;
}



const list_add_tail: ref;

axiom list_add_tail == $sub.ref(0, 135949);

procedure list_add_tail($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add_tail($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} __list_add($p0, $p3, $p1);
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    return;
}



const team_nl_send_event_options_get: ref;

axiom team_nl_send_event_options_get == $sub.ref(0, 136981);

procedure team_nl_send_event_options_get($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.16, $M.25, $M.26, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.31, $M.32, $M.4, $M.3, $M.23, $M.24;



implementation team_nl_send_event_options_get($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} $i2 := team_nl_send_options_get($p0, 0, 0, 0, team_nl_send_multicast, $p1);
    call {:si_unique_call 41} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const netdev_warn: ref;

axiom netdev_warn == $sub.ref(0, 138013);

procedure netdev_warn.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation netdev_warn.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 1} true;
    call {:si_unique_call 42} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 43} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure netdev_warn.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation netdev_warn.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 1} true;
    call {:si_unique_call 44} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 45} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const team_nl_send_multicast: ref;

axiom team_nl_send_multicast == $sub.ref(0, 139045);

procedure team_nl_send_multicast($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation team_nl_send_multicast($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} {:cexpr "team_nl_send_multicast:arg:portid"} boogie_si_record_i32($i2);
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 984)), $mul.ref(0, 1));
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 47} $p5 := dev_net($p4);
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} $i6 := genlmsg_multicast_netns(team_nl_family, $p5, $p0, 0, 0, 208);
    call {:si_unique_call 49} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const team_nl_send_options_get: ref;

axiom team_nl_send_options_get == $sub.ref(0, 140077);

procedure team_nl_send_options_get($p0: ref, $i1: i32, $i2: i32, $i3: i32, $p4: ref, $p5: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.16, $M.25, $M.26, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.31, $M.32, $M.4, $M.3, $M.23, $M.24;



implementation team_nl_send_options_get($p0: ref, $i1: i32, $i2: i32, $i3: i32, $p4: ref, $p5: ref) returns ($r: i32)
{
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i13: i32;
  var $p14: ref;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $i41: i64;
  var $i42: i1;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $i50: i32;
  var $i51: i32;
  var $i52: i1;
  var $i55: i1;
  var $p56: ref;
  var $i57: i32;
  var $p53: ref;
  var $i54: i32;
  var $i62: i32;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i64;
  var $i70: i1;
  var $i44: i32;
  var $p45: ref;
  var $p71: ref;
  var $p43: ref;
  var $p60: ref;
  var $i61: i8;
  var $p72: ref;
  var $p74: ref;
  var $i76: i1;
  var $p77: ref;
  var $p78: ref;
  var $i79: i32;
  var $p80: ref;
  var $i81: i64;
  var $i82: i1;
  var $i83: i32;
  var $i84: i1;
  var $i85: i32;
  var $p86: ref;
  var $p87: ref;
  var $i88: i64;
  var $i89: i1;
  var $p90: ref;
  var $i91: i32;
  var $p33: ref;
  var $p58: ref;
  var $i59: i32;
  var $p92: ref;
  var $p93: ref;
  var $i19: i32;
  var vslice_dummy_var_40: i32;
  var vslice_dummy_var_41: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 51} {:cexpr "team_nl_send_options_get:arg:portid"} boogie_si_record_i32($i1);
    call {:si_unique_call 52} {:cexpr "team_nl_send_options_get:arg:seq"} boogie_si_record_i32($i2);
    call {:si_unique_call 53} {:cexpr "team_nl_send_options_get:arg:flags"} boogie_si_record_i32($i3);
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, $0.ref);
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p9, $mul.ref($sub.ref(0, 16), 64));
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} $i11 := __send_and_alloc_skb($p6, $p0, $i1, $p4);
    call {:si_unique_call 55} {:cexpr "err"} boogie_si_record_i32($i11);
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    $i13 := $i11;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i12 == 1);
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    $p14 := $p10;
    goto $bb4;

  $bb4:
    call $p15, $i16, $i17, $i18, $p14, $p20, $i21, $p22, $i23, $i24, $p25, $p26, $p27, $p28, $i29, $i30, $i31, $p32, $p34, $p35, $i36, $i37, $p38, $p39, $i40, $i41, $i42, $p46, $i47, $i48, $p49, $i50, $i51, $i52, $i55, $p56, $i57, $p53, $i54, $i62, $p64, $p65, $p66, $p67, $p68, $i69, $i70, $i44, $p45, $p71, $p43, $p60, $i61, $p72, $p74, $i76, $p77, vslice_dummy_var_40, vslice_dummy_var_41 := team_nl_send_options_get_loop_$bb4($p0, $i1, $i2, $i3, $p4, $p5, $p6, $p15, $i16, $i17, $i18, $p14, $p20, $i21, $p22, $i23, $i24, $p25, $p26, $p27, $p28, $i29, $i30, $i31, $p32, $p34, $p35, $i36, $i37, $p38, $p39, $i40, $i41, $i42, $p46, $i47, $i48, $p49, $i50, $i51, $i52, $i55, $p56, $i57, $p53, $i54, $i62, $p64, $p65, $p66, $p67, $p68, $i69, $i70, $i44, $p45, $p71, $p43, $p60, $i61, $p72, $p74, $i76, $p77, vslice_dummy_var_40, vslice_dummy_var_41);
    goto $bb4_last;

  $bb9:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p6);
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    $i21 := $or.i32($i3, 2);
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 58} $p22 := genlmsg_put($p20, $i1, $i2, team_nl_family, $i21, 2);
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i23, 0);
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p6);
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(0, 1));
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 3176)), $mul.ref(256, 1));
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} $i30 := nla_put_u32($p25, 1, $i29);
    call {:si_unique_call 60} {:cexpr "tmp"} boogie_si_record_i32($i30);
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    $p32 := $p22;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p6);
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} $p35 := nla_nest_start($p34, 2);
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p35);
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    $i37 := $eq.i64($i36, 0);
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    $p38 := $p22;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p14, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p39);
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p5);
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i40, $i41);
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    $p43 := $p14;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p60, $i61 := $p43, 0;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p6);
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 66} vslice_dummy_var_40 := nla_nest_end($p72, $p35);
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.0, $p6);
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} vslice_dummy_var_41 := genlmsg_end($p74, $p22);
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    $i76 := $trunc.i8.i1($i61);
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    $p15, $p77 := $p60, $p22;
    assume true;
    goto $bb5, $bb39;

  $bb39:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.0, $p6);
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    $i79 := $or.i32($i3, 2);
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 69} $p80 := nlmsg_put($p78, $i1, $i2, 3, 0, $i79);
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    $i81 := $p2i.ref.i64($p80);
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    $i82 := $eq.i64($i81, 0);
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    assume {:branchcond $i82} true;
    goto $bb41, $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume !($i82 == 1);
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p90 := $load.ref($M.0, $p6);
    call {:si_unique_call 73} $i91 := devirtbounce($p4, $p90, $p0, $i1);
    call {:si_unique_call 74} {:cexpr "tmp___0"} boogie_si_record_i32($i91);
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    $i19 := $i91;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  $bb41:
    assume $i82 == 1;
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    call $i83, $i84, $i85, $p86, $p87, $i88, $i89 := team_nl_send_options_get_loop_$bb44($p0, $i1, $i2, $p4, $p6, $i79, $i83, $i84, $i85, $p86, $p87, $i88, $i89);
    goto $bb44_last;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    $i84 := $ne.i32($i83, 0);
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    $i85 := $i83;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.0, $p6);
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 72} $p87 := nlmsg_put($p86, $i1, $i2, 3, 0, $i79);
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    $i88 := $p2i.ref.i64($p87);
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    $i89 := $eq.i64($i88, 0);
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i89 == 1);
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb48:
    assume {:verifier.code 0} true;
    assume $i89 == 1;
    goto $bb48_dummy;

  $bb45:
    assume $i84 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    $p58, $i59 := $p77, $i85;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.0, $p6);
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 64} genlmsg_cancel($p92, $p58);
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.0, $p6);
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} nlmsg_free($p93);
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    $i19 := $i59;
    goto $bb8;

  $bb5:
    assume $i76 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} $i16 := __send_and_alloc_skb($p6, $p0, $i1, $p4);
    call {:si_unique_call 57} {:cexpr "err"} boogie_si_record_i32($i16);
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    $i18 := $i16;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $p14 := $p15;
    goto $bb7_dummy;

  $bb6:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $i13 := $i18;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    $i19 := $i13;
    goto $bb8;

  $bb20:
    assume $i42 == 1;
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    $i44, $p45 := 0, $p14;
    goto $bb23;

  $bb23:
    call $p46, $i47, $i48, $p49, $i50, $i51, $i62, $p64, $p65, $p66, $p67, $p68, $i69, $i70, $i44, $p45, $p71 := team_nl_send_options_get_loop_$bb23($p0, $p6, $i41, $p46, $i47, $i48, $p49, $i50, $i51, $i62, $p64, $p65, $p66, $p67, $p68, $i69, $i70, $i44, $p45, $p71);
    goto $bb23_last;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p6);
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} $i47 := team_nl_fill_one_option_get($p46, $p0, $p45);
    call {:si_unique_call 63} {:cexpr "err"} boogie_si_record_i32($i47);
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    $p49, $i50, $i51 := $p45, $i44, $i47;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i62 := $add.i32($i44, 1);
    call {:si_unique_call 68} {:cexpr "i"} boogie_si_record_i32($i62);
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($add.ref($p45, $mul.ref(0, 64)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $p64);
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p65);
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($p66, $mul.ref($sub.ref(0, 16), 64));
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p66, $mul.ref($sub.ref(0, 16), 64)), $mul.ref(16, 1));
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    $i69 := $p2i.ref.i64($p68);
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    $i70 := $ne.i64($i69, $i41);
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    $p71 := $p67;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    $p43 := $p71;
    goto $bb22;

  $bb36:
    assume $i70 == 1;
    assume {:verifier.code 0} true;
    $i44, $p45 := $i62, $p67;
    goto $bb36_dummy;

  $bb25:
    assume $i48 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i51, $sub.i32(0, 90));
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    $p53, $i54 := $p22, $i51;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p58, $i59 := $p53, $i54;
    goto $bb31;

  $bb27:
    assume $i52 == 1;
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i50, 0);
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    $p56, $i57 := $p22, $i51;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p60, $i61 := $p49, 1;
    goto $bb33;

  $bb29:
    assume $i55 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    $p58, $i59 := $p56, $i57;
    goto $bb31;

  $bb17:
    assume $i37 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    $p33 := $p38;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    $p58, $i59 := $p33, $sub.i32(0, 90);
    goto $bb31;

  $bb13:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    $p33 := $p32;
    goto $bb15;

  $bb10:
    assume $i24 == 1;
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 90);
    goto $bb8;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb2;

  $bb48_dummy:
    assume false;
    return;

  $bb44_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 70} $i83 := __send_and_alloc_skb($p6, $p0, $i1, $p4);
    call {:si_unique_call 71} {:cexpr "err"} boogie_si_record_i32($i83);
    goto corral_source_split_324;

  $bb36_dummy:
    assume false;
    return;

  $bb23_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_278;

  $bb7_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb9;
}



const __send_and_alloc_skb: ref;

axiom __send_and_alloc_skb == $sub.ref(0, 141109);

procedure __send_and_alloc_skb($p0: ref, $p1: ref, $i2: i32, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.16, $M.25, $M.26, $M.4, $M.3, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.31, $M.32, $M.23, $M.24;



implementation __send_and_alloc_skb($p0: ref, $p1: ref, $i2: i32, $p3: ref) returns ($r: i32)
{
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 75} {:cexpr "__send_and_alloc_skb:arg:portid"} boogie_si_record_i32($i2);
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p0);
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 78} $p11 := genlmsg_new(3756, 208);
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p0, $p11);
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p0);
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 12);
    goto $bb5;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p0);
    call {:si_unique_call 76} $i8 := devirtbounce($p3, $p7, $p1, $i2);
    call {:si_unique_call 77} {:cexpr "err"} boogie_si_record_i32($i8);
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb3:
    assume $i9 == 1;
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $i10 := $i8;
    goto $bb5;
}



const genlmsg_put: ref;

axiom genlmsg_put == $sub.ref(0, 142141);

procedure genlmsg_put($p0: ref, $i1: i32, $i2: i32, $p3: ref, $i4: i32, $i5: i8) returns ($r: ref);
  free requires assertsPassed;



implementation genlmsg_put($p0: ref, $i1: i32, $i2: i32, $p3: ref, $i4: i32, $i5: i8) returns ($r: ref)
{
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 79} {:cexpr "genlmsg_put:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 80} {:cexpr "genlmsg_put:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 81} {:cexpr "genlmsg_put:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 82} {:cexpr "genlmsg_put:arg:arg5"} boogie_si_record_i8($i5);
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 83} $p6 := external_alloc();
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const nla_put_u32: ref;

axiom nla_put_u32 == $sub.ref(0, 143173);

procedure nla_put_u32($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation nla_put_u32($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 84} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 85} {:cexpr "nla_put_u32:arg:attrtype"} boogie_si_record_i32($i1);
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, $i2);
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 86} $i5 := nla_put($p0, $i1, 4, $p4);
    call {:si_unique_call 87} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const nla_nest_start: ref;

axiom nla_nest_start == $sub.ref(0, 144205);

procedure nla_nest_start($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation nla_nest_start($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 88} {:cexpr "nla_nest_start:arg:attrtype"} boogie_si_record_i32($i1);
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 89} $p2 := skb_tail_pointer($p0);
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 90} $i4 := nla_put($p0, $i1, 0, $0.ref);
    call {:si_unique_call 91} {:cexpr "tmp___0"} boogie_si_record_i32($i4);
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i4, 0);
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $p2;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    $p6 := $0.ref;
    goto $bb3;
}



const team_nl_fill_one_option_get: ref;

axiom team_nl_fill_one_option_get == $sub.ref(0, 145237);

procedure team_nl_fill_one_option_get($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.16, $M.25, $M.26, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.31, $M.32, $M.23, $M.24, $M.4, $M.3;



implementation team_nl_fill_one_option_get($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $i36: i32;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $i52: i32;
  var $i53: i1;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $i60: i1;
  var $i61: i32;
  var $i62: i1;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $i66: i32;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i32;
  var $i72: i1;
  var $i73: i32;
  var $i74: i1;
  var $p75: ref;
  var $p76: ref;
  var $i77: i8;
  var $i78: i1;
  var $i79: i32;
  var $i80: i1;
  var $i81: i32;
  var $i82: i1;
  var $p83: ref;
  var $p84: ref;
  var $i85: i32;
  var $i86: i32;
  var $i87: i1;
  var $p88: ref;
  var $i89: i8;
  var $i90: i1;
  var $i91: i32;
  var $i92: i1;
  var $p93: ref;
  var $i94: i8;
  var $i95: i1;
  var $i96: i32;
  var $i97: i1;
  var $p98: ref;
  var $i10: i32;
  var vslice_dummy_var_42: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 92} $p3 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $p6);
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 93} $i8 := team_option_get($p1, $p2, $p3);
    call {:si_unique_call 94} {:cexpr "err"} boogie_si_record_i32($i8);
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 95} $p11 := nla_nest_start($p0, 1);
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 96} $i16 := nla_put_string($p0, 1, $p15);
    call {:si_unique_call 97} {:cexpr "tmp"} boogie_si_record_i32($i16);
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    $p18 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(40, 1)), $mul.ref(8, 1));
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 64)), $mul.ref(28, 1));
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i41 := $slt.i32($i40, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    $i42 := $slt.i32($i40, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    $i43 := $slt.i32($i40, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i40, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    call {:si_unique_call 123} devirtbounce.1(0, .str.2, 2293, 12);
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    call team_nl_fill_one_option_get_loop_$bb73();
    goto $bb73_last;

  $bb31:
    assume $i44 == 1;
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 107} $i81 := nla_put_u8($p0, 3, 14);
    call {:si_unique_call 108} {:cexpr "tmp___10"} boogie_si_record_i32($i81);
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    $i82 := $ne.i32($i81, 0);
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    assume {:branchcond $i82} true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    $p84 := $bitcast.ref.ref($p83);
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    $i85 := $load.i32($M.0, $p84);
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 121} $i86 := nla_put_s32($p0, 4, $i85);
    call {:si_unique_call 122} {:cexpr "tmp___11"} boogie_si_record_i32($i86);
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    $i87 := $ne.i32($i86, 0);
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(57, 1));
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    $i89 := $load.i8($M.0, $p88);
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    $i90 := $trunc.i8.i1($i89);
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    assume {:branchcond $i90} true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    $i94 := $load.i8($M.0, $p93);
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    $i95 := $trunc.i8.i1($i94);
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    call {:si_unique_call 128} vslice_dummy_var_42 := nla_nest_end($p0, $p11);
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb80:
    assume $i95 == 1;
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 126} $i96 := nla_put_flag($p0, 2);
    call {:si_unique_call 127} {:cexpr "tmp___13"} boogie_si_record_i32($i96);
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    $i97 := $ne.i32($i96, 0);
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    assume {:branchcond $i97} true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p98, 0);
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb82:
    assume $i97 == 1;
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 98} nla_nest_cancel($p0, $p11);
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 90);
    goto $bb3;

  $bb74:
    assume $i90 == 1;
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 124} $i91 := nla_put_flag($p0, 5);
    call {:si_unique_call 125} {:cexpr "tmp___12"} boogie_si_record_i32($i91);
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    $i92 := $ne.i32($i91, 0);
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    assume {:branchcond $i92} true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb76:
    assume $i92 == 1;
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb69:
    assume $i87 == 1;
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb66:
    assume $i82 == 1;
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb29:
    assume $i43 == 1;
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 105} $i73 := nla_put_u8($p0, 3, 6);
    call {:si_unique_call 106} {:cexpr "tmp___8"} boogie_si_record_i32($i73);
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    $i74 := $ne.i32($i73, 0);
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p75);
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    $i77 := $load.i8($M.0, $p76);
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    $i78 := $trunc.i8.i1($i77);
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    assume {:branchcond $i78} true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb60:
    assume $i78 == 1;
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 119} $i79 := nla_put_flag($p0, 4);
    call {:si_unique_call 120} {:cexpr "tmp___9"} boogie_si_record_i32($i79);
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    $i80 := $ne.i32($i79, 0);
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    assume {:branchcond $i80} true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb62:
    assume $i80 == 1;
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb57:
    assume $i74 == 1;
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb27:
    assume $i42 == 1;
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 103} $i61 := nla_put_u8($p0, 3, 11);
    call {:si_unique_call 104} {:cexpr "tmp___6"} boogie_si_record_i32($i61);
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    $i62 := $ne.i32($i61, 0);
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p63);
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p64, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.0, $p65);
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p67);
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p68, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.0, $p69);
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 117} $i71 := nla_put($p0, 4, $i66, $p70);
    call {:si_unique_call 118} {:cexpr "tmp___7"} boogie_si_record_i32($i71);
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    $i72 := $ne.i32($i71, 0);
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    assume {:branchcond $i72} true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb54:
    assume $i72 == 1;
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb51:
    assume $i62 == 1;
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb25:
    assume $i41 == 1;
    assume {:verifier.code 0} true;
    $i45 := $slt.i32($i40, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i45 == 1);
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 109} $i54 := nla_put_u8($p0, 3, 5);
    call {:si_unique_call 110} {:cexpr "tmp___4"} boogie_si_record_i32($i54);
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i54, 0);
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p56);
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 115} $i59 := nla_put_string($p0, 4, $p58);
    call {:si_unique_call 116} {:cexpr "tmp___5"} boogie_si_record_i32($i59);
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i59, 0);
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb48:
    assume $i60 == 1;
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb45:
    assume $i55 == 1;
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb34:
    assume $i45 == 1;
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i40, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb33;

  $bb36:
    assume $i46 == 1;
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 111} $i47 := nla_put_u8($p0, 3, 3);
    call {:si_unique_call 112} {:cexpr "tmp___2"} boogie_si_record_i32($i47);
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 113} $i52 := nla_put_u32($p0, 4, $i51);
    call {:si_unique_call 114} {:cexpr "tmp___3"} boogie_si_record_i32($i52);
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb41:
    assume $i53 == 1;
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb38:
    assume $i48 == 1;
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb18:
    assume $i34 == 1;
    $p35 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(40, 1)), $mul.ref(0, 1));
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 101} $i37 := nla_put_u32($p0, 7, $i36);
    call {:si_unique_call 102} {:cexpr "tmp___1"} boogie_si_record_i32($i37);
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb20:
    assume $i38 == 1;
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb12:
    assume $i21 == 1;
    $p22 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(40, 1)), $mul.ref(8, 1));
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 3176)), $mul.ref(256, 1));
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 99} $i28 := nla_put_u32($p0, 6, $i27);
    call {:si_unique_call 100} {:cexpr "tmp___0"} boogie_si_record_i32($i28);
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb14:
    assume $i29 == 1;
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 90);
    goto $bb3;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    $i10 := $i8;
    goto $bb3;

  $bb73_dummy:
    assume false;
    return;

  $bb73_last:
    assume {:verifier.code 0} true;
    goto $bb73_dummy;
}



const nla_nest_end: ref;

axiom nla_nest_end == $sub.ref(0, 146269);

procedure nla_nest_end($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation nla_nest_end($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i16;
  var $i5: i32;
  var $i6: i64;
  var $i7: i16;
  var $i8: i32;
  var $i9: i32;
  var $i10: i16;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 129} $p2 := skb_tail_pointer($p0);
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i16($i3);
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i4);
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p1);
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i64.i16($i6);
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i7);
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32($i5, $i8);
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i16($i9);
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p11, $i10);
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;
}



const genlmsg_end: ref;

axiom genlmsg_end == $sub.ref(0, 147301);

procedure genlmsg_end($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation genlmsg_end($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref($sub.ref(0, 20), 16));
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 130} $i4 := nlmsg_end($p0, $p3);
    call {:si_unique_call 131} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const nlmsg_put: ref;

axiom nlmsg_put == $sub.ref(0, 148333);

procedure nlmsg_put($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $i5: i32) returns ($r: ref);
  free requires assertsPassed;



implementation nlmsg_put($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $i5: i32) returns ($r: ref)
{
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $p14: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 132} {:cexpr "nlmsg_put:arg:portid"} boogie_si_record_i32($i1);
    call {:si_unique_call 133} {:cexpr "nlmsg_put:arg:seq"} boogie_si_record_i32($i2);
    call {:si_unique_call 134} {:cexpr "nlmsg_put:arg:type"} boogie_si_record_i32($i3);
    call {:si_unique_call 135} {:cexpr "nlmsg_put:arg:payload"} boogie_si_record_i32($i4);
    call {:si_unique_call 136} {:cexpr "nlmsg_put:arg:flags"} boogie_si_record_i32($i5);
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} $i6 := skb_tailroom($p0);
    call {:si_unique_call 138} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 139} $i7 := nlmsg_total_size($i4);
    call {:si_unique_call 140} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i6, $i7);
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 141} $i11 := ldv__builtin_expect($i10, 0);
    call {:si_unique_call 142} {:cexpr "tmp___1"} boogie_si_record_i64($i11);
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 143} $p14 := __nlmsg_put($p0, $i1, $i2, $i3, $i4, $i5);
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    $p13 := $p14;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    $r := $p13;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    $p13 := $0.ref;
    goto $bb3;
}



const genlmsg_cancel: ref;

axiom genlmsg_cancel == $sub.ref(0, 149365);

procedure genlmsg_cancel($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation genlmsg_cancel($p0: ref, $p1: ref)
{
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref($sub.ref(0, 20), 16));
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 144} nlmsg_cancel($p0, $p5);
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const nlmsg_free: ref;

axiom nlmsg_free == $sub.ref(0, 150397);

procedure nlmsg_free($p0: ref);
  free requires assertsPassed;
  modifies $M.4, $M.3;



implementation nlmsg_free($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 145} ldv_kfree_skb_13($p0);
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    return;
}



const ldv_kfree_skb_13: ref;

axiom ldv_kfree_skb_13 == $sub.ref(0, 151429);

procedure ldv_kfree_skb_13($p0: ref);
  free requires assertsPassed;
  modifies $M.4, $M.3;



implementation ldv_kfree_skb_13($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 146} ldv_skb_free($p1);
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    return;
}



const ldv_skb_free: ref;

axiom ldv_skb_free == $sub.ref(0, 152461);

procedure ldv_skb_free($p0: ref);
  free requires assertsPassed;
  modifies $M.4, $M.3;



implementation ldv_skb_free($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    $p1 := $M.2;
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 147} ldv_set_remove($p1, $p2);
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    return;
}



const ldv_set_remove: ref;

axiom ldv_set_remove == $sub.ref(0, 153493);

procedure ldv_set_remove($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.4, $M.3;



implementation ldv_set_remove($p0: ref, $p1: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i5: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i64;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i64;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    $i2 := $M.3;
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32(0, $i2);
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i5, $sub.i32(0, 1));
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    return;

  $bb12:
    assume $i16 == 1;
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i5, 1);
    call {:si_unique_call 149} {:cexpr "i"} boogie_si_record_i32($i17);
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    $i18 := $M.3;
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i17, $i18);
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i30 := $M.3;
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32($i30, 1);
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    $M.3 := $i31;
    call {:si_unique_call 151} {:cexpr "last_index"} boogie_si_record_i32($i31);
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb14:
    assume $i19 == 1;
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    $i20 := $i17;
    goto $bb17;

  $bb17:
    call $i20, $i21, $p22, $p23, $i24, $i25, $p26, $i27, $i28, $i29 := ldv_set_remove_loop_$bb17($i20, $i21, $p22, $p23, $i24, $i25, $p26, $i27, $i28, $i29);
    goto $bb17_last;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i20);
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref($i21, 8));
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.4, $p22);
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32($i20, 1);
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref($i25, 8));
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p26, $p23);
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    $i27 := $add.i32($i20, 1);
    call {:si_unique_call 150} {:cexpr "i"} boogie_si_record_i32($i27);
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    $i28 := $M.3;
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i27, $i28);
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb19;

  $bb19:
    assume !($i29 == 1);
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb21:
    assume $i29 == 1;
    assume {:verifier.code 0} true;
    $i20 := $i27;
    goto $bb21_dummy;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb4;

  $bb4:
    call $i4, $i6, $p7, $p8, $i9, $i10, $i11, $i12, $i13, $i14, $i15 := ldv_set_remove_loop_$bb4($p1, $i4, $i6, $p7, $p8, $i9, $i10, $i11, $i12, $i13, $i14, $i15);
    goto $bb4_last;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i4);
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref($i6, 8));
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.4, $p7);
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p1);
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i9, $i10);
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $i12 := $i4;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i4, 1);
    call {:si_unique_call 148} {:cexpr "i"} boogie_si_record_i32($i13);
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    $i14 := $M.3;
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i13, $i14);
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb6;

  $bb6:
    assume !($i15 == 1);
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb11:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i4 := $i13;
    goto $bb11_dummy;

  $bb8:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    $i5 := $i12;
    goto $bb7;

  $bb21_dummy:
    assume false;
    return;

  $bb17_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_629;

  $bb11_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_602;
}



const nlmsg_cancel: ref;

axiom nlmsg_cancel == $sub.ref(0, 154525);

procedure nlmsg_cancel($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation nlmsg_cancel($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 152} nlmsg_trim($p0, $p2);
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    return;
}



const nlmsg_trim: ref;

axiom nlmsg_trim == $sub.ref(0, 155557);

procedure nlmsg_trim($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation nlmsg_trim($p0: ref, $p1: ref)
{
  var $i2: i64;
  var $i3: i1;
  var $i4: i64;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p1);
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i4);
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32($i5, $i9);
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 153} skb_trim($p0, $i10);
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const skb_trim: ref;

axiom skb_trim == $sub.ref(0, 156589);

procedure skb_trim($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation skb_trim($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} {:cexpr "skb_trim:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    return;
}



const skb_tailroom: ref;

axiom skb_tailroom == $sub.ref(0, 157621);

procedure skb_tailroom($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation skb_tailroom($p0: ref) returns ($r: i32)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} $i1 := skb_is_nonlinear($p0);
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 156} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(204, 1));
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(200, 1));
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32($i6, $i8);
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    $i4 := $i9;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;
}



const nlmsg_total_size: ref;

axiom nlmsg_total_size == $sub.ref(0, 158653);

procedure nlmsg_total_size($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation nlmsg_total_size($i0: i32) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} {:cexpr "nlmsg_total_size:arg:payload"} boogie_si_record_i32($i0);
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} $i1 := nlmsg_msg_size($i0);
    call {:si_unique_call 159} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    $i2 := $add.i32($i1, 3);
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, $sub.i32(0, 4));
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 159685);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 161} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __nlmsg_put: ref;

axiom __nlmsg_put == $sub.ref(0, 160717);

procedure __nlmsg_put($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $i5: i32) returns ($r: ref);
  free requires assertsPassed;



implementation __nlmsg_put($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $i5: i32) returns ($r: ref)
{
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} {:cexpr "__nlmsg_put:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 163} {:cexpr "__nlmsg_put:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 164} {:cexpr "__nlmsg_put:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 165} {:cexpr "__nlmsg_put:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 166} {:cexpr "__nlmsg_put:arg:arg5"} boogie_si_record_i32($i5);
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 167} $p6 := external_alloc();
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 161749);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 1} true;
    call {:si_unique_call 168} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 169} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const nlmsg_msg_size: ref;

axiom nlmsg_msg_size == $sub.ref(0, 162781);

procedure nlmsg_msg_size($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation nlmsg_msg_size($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 170} {:cexpr "nlmsg_msg_size:arg:payload"} boogie_si_record_i32($i0);
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    $i1 := $add.i32($i0, 16);
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const skb_is_nonlinear: ref;

axiom skb_is_nonlinear == $sub.ref(0, 163813);

procedure skb_is_nonlinear($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation skb_is_nonlinear($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(108, 1));
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const nlmsg_end: ref;

axiom nlmsg_end == $sub.ref(0, 164845);

procedure nlmsg_end($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation nlmsg_end($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;
  var $i5: i64;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 171} $p2 := skb_tail_pointer($p0);
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p1);
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i64.i32($i5);
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32($i4, $i6);
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, $i7);
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const skb_tail_pointer: ref;

axiom skb_tail_pointer == $sub.ref(0, 165877);

procedure skb_tail_pointer($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation skb_tail_pointer($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i64;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(208, 1));
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(200, 1));
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    $i5 := $zext.i32.i64($i4);
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p2, $mul.ref($i5, 1));
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const team_option_get: ref;

axiom team_option_get == $sub.ref(0, 166909);

procedure team_option_get($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.16, $M.25, $M.26, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.31, $M.32, $CurrAddr, $M.23, $M.24, $M.4, $M.3;



implementation team_option_get($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    call {:si_unique_call 172} $i14 := devirtbounce.2($p13, $p0, $p2);
    call {:si_unique_call 173} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    $i9 := $i14;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 95);
    goto $bb3;
}



const nla_put_string: ref;

axiom nla_put_string == $sub.ref(0, 167941);

procedure nla_put_string($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation nla_put_string($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i64;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} {:cexpr "nla_put_string:arg:attrtype"} boogie_si_record_i32($i1);
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 175} $i3 := strlen($p2);
    call {:si_unique_call 176} {:cexpr "tmp"} boogie_si_record_i64($i3);
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    $i5 := $add.i32($i4, 1);
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} $i6 := nla_put($p0, $i1, $i5, $p2);
    call {:si_unique_call 178} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const nla_put_u8: ref;

axiom nla_put_u8 == $sub.ref(0, 168973);

procedure nla_put_u8($p0: ref, $i1: i32, $i2: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation nla_put_u8($p0: ref, $i1: i32, $i2: i8) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 179} $p3 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 180} {:cexpr "nla_put_u8:arg:attrtype"} boogie_si_record_i32($i1);
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p3, $i2);
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 181} $i4 := nla_put($p0, $i1, 1, $p3);
    call {:si_unique_call 182} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const nla_put: ref;

axiom nla_put == $sub.ref(0, 170005);

procedure nla_put($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation nla_put($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 183} {:cexpr "nla_put:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 184} {:cexpr "nla_put:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 1} true;
    call {:si_unique_call 185} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 186} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const nla_put_flag: ref;

axiom nla_put_flag == $sub.ref(0, 171037);

procedure nla_put_flag($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation nla_put_flag($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} {:cexpr "nla_put_flag:arg:attrtype"} boogie_si_record_i32($i1);
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} $i2 := nla_put($p0, $i1, 0, $0.ref);
    call {:si_unique_call 189} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const nla_put_s32: ref;

axiom nla_put_s32 == $sub.ref(0, 172069);

procedure nla_put_s32($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation nla_put_s32($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 191} {:cexpr "nla_put_s32:arg:attrtype"} boogie_si_record_i32($i1);
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, $i2);
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 192} $i5 := nla_put($p0, $i1, 4, $p4);
    call {:si_unique_call 193} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const nla_nest_cancel: ref;

axiom nla_nest_cancel == $sub.ref(0, 173101);

procedure nla_nest_cancel($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation nla_nest_cancel($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 194} nlmsg_trim($p0, $p2);
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    return;
}



const strlen: ref;

axiom strlen == $sub.ref(0, 174133);

procedure strlen($p0: ref) returns ($r: i64);



const genlmsg_new: ref;

axiom genlmsg_new == $sub.ref(0, 175165);

procedure genlmsg_new($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.4, $M.3, $M.0, $CurrAddr;



implementation genlmsg_new($i0: i64, $i1: i32) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i64;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 195} {:cexpr "genlmsg_new:arg:payload"} boogie_si_record_i64($i0);
    call {:si_unique_call 196} {:cexpr "genlmsg_new:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i64.i32($i0);
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} $i3 := genlmsg_total_size($i2);
    call {:si_unique_call 198} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 199} $p5 := nlmsg_new($i4, $i1);
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const genlmsg_total_size: ref;

axiom genlmsg_total_size == $sub.ref(0, 176197);

procedure genlmsg_total_size($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation genlmsg_total_size($i0: i32) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 200} {:cexpr "genlmsg_total_size:arg:payload"} boogie_si_record_i32($i0);
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 201} $i1 := genlmsg_msg_size($i0);
    call {:si_unique_call 202} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    $i2 := $add.i32($i1, 3);
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, $sub.i32(0, 4));
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const nlmsg_new: ref;

axiom nlmsg_new == $sub.ref(0, 177229);

procedure nlmsg_new($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.4, $M.3, $M.0, $CurrAddr;



implementation nlmsg_new($i0: i64, $i1: i32) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i32;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} {:cexpr "nlmsg_new:arg:payload"} boogie_si_record_i64($i0);
    call {:si_unique_call 204} {:cexpr "nlmsg_new:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i64.i32($i0);
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 205} $i3 := nlmsg_total_size($i2);
    call {:si_unique_call 206} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 207} $p4 := ldv_alloc_skb_12($i3, $i1);
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const ldv_alloc_skb_12: ref;

axiom ldv_alloc_skb_12 == $sub.ref(0, 178261);

procedure ldv_alloc_skb_12($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.4, $M.3, $M.0, $CurrAddr;



implementation ldv_alloc_skb_12($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 208} {:cexpr "ldv_alloc_skb_12:arg:size"} boogie_si_record_i32($i0);
    call {:si_unique_call 209} {:cexpr "ldv_alloc_skb_12:arg:priority"} boogie_si_record_i32($i1);
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 210} $p2 := ldv_skb_alloc();
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const ldv_skb_alloc: ref;

axiom ldv_skb_alloc == $sub.ref(0, 179293);

procedure ldv_skb_alloc() returns ($r: ref);
  free requires assertsPassed;
  modifies $M.4, $M.3, $M.0, $CurrAddr;



implementation ldv_skb_alloc() returns ($r: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;
  var $p5: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 211} $p0 := ldv_zalloc(232);
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    $i3 := $ne.ref($p2, $0.ref);
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    $p5 := $M.2;
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 212} ldv_set_add($p5, $p2);
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    $p4 := $p0;
    goto $bb3;
}



const ldv_zalloc: ref;

axiom ldv_zalloc == $sub.ref(0, 180325);

procedure ldv_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_zalloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 213} {:cexpr "ldv_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 1} true;
    call {:si_unique_call 214} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 215} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 216} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} $p4 := calloc(1, $i0);
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 1} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 1} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 1} true;
    call {:si_unique_call 218} __VERIFIER_assume($i7);
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    $p3 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb3;
}



const ldv_set_add: ref;

axiom ldv_set_add == $sub.ref(0, 181357);

procedure ldv_set_add($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.4, $M.3;



implementation ldv_set_add($p0: ref, $p1: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    $i2 := $M.3;
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32(0, $i2);
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i14 := $M.3;
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i14, 15);
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    return;

  $bb13:
    assume $i15 == 1;
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $i16 := $M.3;
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref($i17, 8));
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p18, $p1);
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    $i19 := $M.3;
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    $i20 := $add.i32($i19, 1);
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    $M.3 := $i20;
    call {:si_unique_call 220} {:cexpr "last_index"} boogie_si_record_i32($i20);
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb4;

  $bb4:
    call $i4, $i5, $p6, $p7, $i8, $i9, $i10, $i11, $i12, $i13 := ldv_set_add_loop_$bb4($p1, $i4, $i5, $p6, $p7, $i8, $i9, $i10, $i11, $i12, $i13);
    goto $bb4_last;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref($i5, 8));
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.4, $p6);
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p1);
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i8, $i9);
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i11 := $add.i32($i4, 1);
    call {:si_unique_call 219} {:cexpr "i"} boogie_si_record_i32($i11);
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    $i12 := $M.3;
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i11, $i12);
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb6;

  $bb6:
    assume !($i13 == 1);
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb12:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i4 := $i11;
    goto $bb12_dummy;

  $bb8:
    assume $i10 == 1;
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb12_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_822;
}



const genlmsg_msg_size: ref;

axiom genlmsg_msg_size == $sub.ref(0, 182389);

procedure genlmsg_msg_size($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation genlmsg_msg_size($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 221} {:cexpr "genlmsg_msg_size:arg:payload"} boogie_si_record_i32($i0);
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    $i1 := $add.i32($i0, 4);
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const dev_net: ref;

axiom dev_net == $sub.ref(0, 183421);

procedure dev_net($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_net($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(1264, 1));
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 222} $p2 := read_pnet($p1);
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const genlmsg_multicast_netns: ref;

axiom genlmsg_multicast_netns == $sub.ref(0, 184453);

procedure genlmsg_multicast_netns($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i32, $i5: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation genlmsg_multicast_netns($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i32, $i5: i32) returns ($r: i32)
{
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $i23: i1;
  var $i24: i32;
  var $i25: i64;
  var $i26: i64;
  var $i27: i1;
  var $i28: i1;
  var $i29: i32;
  var $i30: i64;
  var $i31: i64;
  var $i32: i1;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i33: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 223} {:cexpr "genlmsg_multicast_netns:arg:portid"} boogie_si_record_i32($i3);
    call {:si_unique_call 224} {:cexpr "genlmsg_multicast_netns:arg:group"} boogie_si_record_i32($i4);
    call {:si_unique_call 225} {:cexpr "genlmsg_multicast_netns:arg:flags"} boogie_si_record_i32($i5);
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 120)), $mul.ref(84, 1));
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.5, $p6);
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    $i8 := $ule.i32($i7, $i4);
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    call {:si_unique_call 226} {:cexpr "__ret_warn_once"} boogie_si_record_i32($i9);
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 227} $i13 := ldv__builtin_expect($i12, 0);
    call {:si_unique_call 228} {:cexpr "tmp___1"} boogie_si_record_i64($i13);
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i9, 0);
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    $i29 := $zext.i1.i32($i28);
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i29);
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 235} $i31 := ldv__builtin_expect($i30, 0);
    call {:si_unique_call 236} {:cexpr "tmp___2"} boogie_si_record_i64($i31);
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, 0);
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 120)), $mul.ref(88, 1));
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.5, $p34);
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    $i36 := $add.i32($i35, $i4);
    call {:si_unique_call 237} {:cexpr "group"} boogie_si_record_i32($i36);
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 6384)), $mul.ref(256, 1));
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 238} $i39 := nlmsg_multicast($p38, $p2, $i3, $i36, $i5);
    call {:si_unique_call 239} {:cexpr "tmp___3"} boogie_si_record_i32($i39);
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    $i33 := $i39;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    $r := $i33;
    return;

  $bb10:
    assume $i32 == 1;
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    $i33 := $sub.i32(0, 22);
    goto $bb12;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i8.i1(1);
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    $i16 := $xor.i1($i15, 1);
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i32($i16);
    call {:si_unique_call 229} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i17);
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i32($i18);
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 230} $i21 := ldv__builtin_expect($i20, 0);
    call {:si_unique_call 231} {:cexpr "tmp"} boogie_si_record_i64($i21);
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i17, 0);
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i32($i23);
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 233} $i26 := ldv__builtin_expect($i25, 0);
    call {:si_unique_call 234} {:cexpr "tmp___0"} boogie_si_record_i64($i26);
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i27 == 1;
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume $i22 == 1;
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 232} warn_slowpath_null(.str.3, 272);
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const warn_slowpath_null: ref;

axiom warn_slowpath_null == $sub.ref(0, 185485);

procedure warn_slowpath_null($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation warn_slowpath_null($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 240} {:cexpr "warn_slowpath_null:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    return;
}



const nlmsg_multicast: ref;

axiom nlmsg_multicast == $sub.ref(0, 186517);

procedure nlmsg_multicast($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation nlmsg_multicast($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} {:cexpr "nlmsg_multicast:arg:portid"} boogie_si_record_i32($i2);
    call {:si_unique_call 242} {:cexpr "nlmsg_multicast:arg:group"} boogie_si_record_i32($i3);
    call {:si_unique_call 243} {:cexpr "nlmsg_multicast:arg:flags"} boogie_si_record_i32($i4);
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, $i3);
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} $i8 := netlink_broadcast($p0, $p1, $i2, $i3, $i4);
    call {:si_unique_call 245} {:cexpr "err"} boogie_si_record_i32($i8);
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    $i9 := $sgt.i32($i8, 0);
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $i8;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;
}



const netlink_broadcast: ref;

axiom netlink_broadcast == $sub.ref(0, 187549);

procedure netlink_broadcast($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation netlink_broadcast($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 246} {:cexpr "netlink_broadcast:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 247} {:cexpr "netlink_broadcast:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 248} {:cexpr "netlink_broadcast:arg:arg4"} boogie_si_record_i32($i4);
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 1} true;
    call {:si_unique_call 249} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 250} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const read_pnet: ref;

axiom read_pnet == $sub.ref(0, 188581);

procedure read_pnet($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation read_pnet($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.0, $p0);
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const __list_add: ref;

axiom __list_add == $sub.ref(0, 189613);

procedure __list_add($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __list_add($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    return;
}



const kzalloc: ref;

axiom kzalloc == $sub.ref(0, 190645);

procedure kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $i2: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 251} {:cexpr "kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 252} {:cexpr "kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    $i2 := $or.i32($i1, 32768);
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 253} $p3 := kmalloc($i0, $i2);
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const __team_find_option: ref;

axiom __team_find_option == $sub.ref(0, 191677);

procedure __team_find_option($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation __team_find_option($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p11: ref;
  var $p17: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(336, 1)), $mul.ref(0, 1));
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(336, 1));
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i7, $i9);
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p17 := $0.ref;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    $r := $p17;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    $p11 := $p4;
    goto $bb4;

  $bb4:
    call $p12, $p13, $i14, $i15, $p16, $p19, $p20, $p21, $p22, $i23, $i24, $p11 := __team_find_option_loop_$bb4($p1, $i9, $p12, $p13, $i14, $i15, $p16, $p19, $p20, $p21, $p22, $i23, $i24, $p11);
    goto $bb4_last;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 254} $i14 := strcmp($p13, $p1);
    call {:si_unique_call 255} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 0);
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    $p16 := $p11;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, $i9);
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i24 == 1);
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    $p11 := $p20;
    goto $bb10_dummy;

  $bb6:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    $p17 := $p16;
    goto $bb8;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_945;
}



const kmemdup: ref;

axiom kmemdup == $sub.ref(0, 192709);

procedure kmemdup($p0: ref, $i1: i64, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation kmemdup($p0: ref, $i1: i64, $i2: i32) returns ($r: ref)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} {:cexpr "kmemdup:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 257} {:cexpr "kmemdup:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 258} $p3 := external_alloc();
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const __team_option_inst_add_option: ref;

axiom __team_option_inst_add_option == $sub.ref(0, 193741);

procedure __team_option_inst_add_option($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.16, $M.25, $M.26, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.31, $M.32, $CurrAddr, $M.23, $M.24, $M.4, $M.3;



implementation __team_option_inst_add_option($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $p18: ref;
  var $i7: i32;
  var $i30: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} $i5 := __team_option_inst_add($p0, $p1, $0.ref);
    call {:si_unique_call 260} {:cexpr "err"} boogie_si_record_i32($i5);
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(320, 1)), $mul.ref(0, 1));
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p11, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p11, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(320, 1));
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i14, $i16);
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i30 := 0;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    $r := $i30;
    return;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    $p18 := $p12;
    goto $bb11;

  $bb11:
    call $i19, $i20, $i21, $p23, $p24, $p25, $p26, $p27, $i28, $i29, $p18 := __team_option_inst_add_option_loop_$bb11($p0, $p1, $i16, $i19, $i20, $i21, $p23, $p24, $p25, $p26, $p27, $i28, $i29, $p18);
    goto $bb11_last;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 262} $i19 := __team_option_inst_add($p0, $p1, $p18);
    call {:si_unique_call 263} {:cexpr "err"} boogie_si_record_i32($i19);
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    $i21 := $i19;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p18, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p25, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p25, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i28, $i16);
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i29 == 1);
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb16:
    assume $i29 == 1;
    assume {:verifier.code 0} true;
    $p18 := $p26;
    goto $bb16_dummy;

  $bb13:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    $i7 := $i21;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 261} __team_option_inst_del_option($p0, $p1);
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    $i30 := $i7;
    goto $bb19;

  $bb3:
    assume $i6 == 1;
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    $i7 := $i5;
    goto $bb5;

  $bb1:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb16_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_994;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 194773);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 264} free_($p0);
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    return;
}



const __team_option_inst_del_option: ref;

axiom __team_option_inst_del_option == $sub.ref(0, 195805);

procedure __team_option_inst_del_option($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation __team_option_inst_del_option($p0: ref, $p1: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $p23: ref;
  var $p24: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p15: ref;
  var $p16: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(352, 1)), $mul.ref(0, 1));
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(352, 1));
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i11, $i13);
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    $p15, $p16 := $p8, $p4;
    goto $bb4;

  $bb4:
    call $p17, $p18, $i19, $i20, $i21, $p23, $p24, $p26, $i27, $i28, $p15, $p16 := __team_option_inst_del_option_loop_$bb4($p1, $i13, $p17, $p18, $i19, $i20, $i21, $p23, $p24, $p26, $i27, $i28, $p15, $p16);
    goto $bb4_last;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p1);
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    $i21 := $eq.i64($i19, $i20);
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p15, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p15, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, $i13);
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i28 == 1);
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb9:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    $p15, $p16 := $p24, $p15;
    goto $bb9_dummy;

  $bb6:
    assume $i21 == 1;
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 265} __team_option_inst_del($p16);
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb9_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1031;
}



const __team_option_inst_del: ref;

axiom __team_option_inst_del == $sub.ref(0, 196837);

procedure __team_option_inst_del($p0: ref);
  free requires assertsPassed;



implementation __team_option_inst_del($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 266} list_del($p1);
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 267} kfree($p2);
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    return;
}



const list_del: ref;

axiom list_del == $sub.ref(0, 197869);

procedure list_del($p0: ref);
  free requires assertsPassed;



implementation list_del($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 198901);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 268} $free($p0);
    return;
}



const __team_option_inst_add: ref;

axiom __team_option_inst_add == $sub.ref(0, 199933);

procedure __team_option_inst_add($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.16, $M.25, $M.26, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.31, $M.32, $CurrAddr, $M.23, $M.24, $M.4, $M.3;



implementation __team_option_inst_add($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p14: ref;
  var $p16: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $i8: i32;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(28, 1));
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    call {:si_unique_call 269} {:cexpr "array_size"} boogie_si_record_i32($i4);
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $i4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    $i7 := $ult.i32(0, $i6);
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb7;

  $bb7:
    call $p9, $p10, $i11, $i12, $p14, $p16, $p18, $p19, $p20, $p21, $p22, $p23, $p24, $i25, $i26, $p27, $p28, $p29, $i30, $i31, $i32, $i33, $i34, $i8 := __team_option_inst_add_loop_$bb7($p0, $p1, $p2, $i6, $p9, $p10, $i11, $i12, $p14, $p16, $p18, $p19, $p20, $p21, $p22, $p23, $p24, $i25, $i26, $p27, $p28, $p29, $i30, $i31, $i32, $i33, $i34, $i8);
    goto $bb7_last;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 270} $p9 := kmalloc(64, 208);
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p10, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p14, $p1);
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 64)), $mul.ref(40, 1)), $mul.ref(8, 1));
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p16, $p2);
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 64)), $mul.ref(40, 1)), $mul.ref(0, 1));
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, $i8);
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p10, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p19, 1);
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p10, $mul.ref(0, 64)), $mul.ref(57, 1));
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p20, 0);
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p10, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(352, 1));
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} list_add_tail($p21, $p22);
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i33 := $add.i32($i8, 1);
    call {:si_unique_call 274} {:cexpr "i"} boogie_si_record_i32($i33);
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    $i34 := $ult.i32($i33, $i6);
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i34 == 1);
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb19:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    $i8 := $i33;
    goto $bb19_dummy;

  $bb13:
    assume $i26 == 1;
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p10, $mul.ref(0, 64)), $mul.ref(40, 1));
    call {:si_unique_call 272} $i30 := devirtbounce.3($p28, $p0, $p29);
    call {:si_unique_call 273} {:cexpr "err"} boogie_si_record_i32($i30);
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    $i32 := $i30;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $i13 := $i32;
    goto $bb11;

  $bb9:
    assume $i12 == 1;
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 12);
    goto $bb11;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb3;

  $bb19_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1071;
}



const kmalloc: ref;

axiom kmalloc == $sub.ref(0, 200965);

procedure kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} {:cexpr "kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 276} {:cexpr "kmalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 277} $p2 := __kmalloc($i0, $i1);
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __kmalloc: ref;

axiom __kmalloc == $sub.ref(0, 201997);

procedure __kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 278} {:cexpr "__kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 279} {:cexpr "__kmalloc:arg:t"} boogie_si_record_i32($i1);
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} $p2 := ldv_malloc($i0);
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_malloc: ref;

axiom ldv_malloc == $sub.ref(0, 203029);

procedure ldv_malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_malloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 281} {:cexpr "ldv_malloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 1} true;
    call {:si_unique_call 282} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 283} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 284} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} $p4 := malloc($i0);
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 1} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 1} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 1} true;
    call {:si_unique_call 286} __VERIFIER_assume($i7);
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    $p3 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb3;
}



const malloc: ref;

axiom malloc == $sub.ref(0, 204061);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 287} $r := $malloc($i0);
    return;
}



const strcmp: ref;

axiom strcmp == $sub.ref(0, 205093);

procedure strcmp($p0: ref, $p1: ref) returns ($r: i32);



const team_options_unregister: ref;

axiom team_options_unregister == $sub.ref(0, 206125);

procedure team_options_unregister($p0: ref, $p1: ref, $i2: i64);



const __team_options_mark_removed: ref;

axiom __team_options_mark_removed == $sub.ref(0, 207157);

procedure __team_options_mark_removed($p0: ref, $p1: ref, $i2: i64);



const __team_options_unregister: ref;

axiom __team_options_unregister == $sub.ref(0, 208189);

procedure __team_options_unregister($p0: ref, $p1: ref, $i2: i64);
  free requires assertsPassed;



implementation __team_options_unregister($p0: ref, $p1: ref, $i2: i64)
{
  var $i3: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $i4: i32;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} {:cexpr "__team_options_unregister:arg:option_count"} boogie_si_record_i64($i2);
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    $i3 := $ult.i64(0, $i2);
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    $i4, $p5 := 0, $p1;
    goto $bb4;

  $bb4:
    call $p6, $p7, $p8, $i9, $i10, $p11, $p12, $i13, $p14, $i15, $i16, $i4, $p5 := __team_options_unregister_loop_$bb4($p0, $i2, $p6, $p7, $p8, $i9, $i10, $p11, $p12, $i13, $p14, $i15, $i16, $i4, $p5);
    goto $bb4_last;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} $p8 := __team_find_option($p0, $p7);
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i4, 1);
    call {:si_unique_call 293} {:cexpr "i"} boogie_si_record_i32($i13);
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p5, $mul.ref(1, 64));
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i13);
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    $i16 := $ult.i64($i15, $i2);
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb9:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i4, $p5 := $i13, $p14;
    goto $bb9_dummy;

  $bb6:
    assume $i10 == 1;
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} __team_option_inst_del_option($p0, $p8);
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p8, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 291} list_del($p11);
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p8);
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 292} kfree($p12);
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb9_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1139;
}



const __team_option_inst_mark_removed_option: ref;

axiom __team_option_inst_mark_removed_option == $sub.ref(0, 209221);

procedure __team_option_inst_mark_removed_option($p0: ref, $p1: ref);



const team_option_inst_set_change: ref;

axiom team_option_inst_set_change == $sub.ref(0, 210253);

procedure team_option_inst_set_change($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation team_option_inst_set_change($p0: ref)
{
  var $p1: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 40), 64)), $mul.ref(56, 1));
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p3, 1);
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    return;
}



const team_options_change_check: ref;

axiom team_options_change_check == $sub.ref(0, 211285);

procedure team_options_change_check($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.16, $M.25, $M.26, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.31, $M.32, $M.4, $M.3, $M.23, $M.24;



implementation team_options_change_check($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 294} __team_options_change_check($p0);
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    return;
}



const team_mode_register: ref;

axiom team_mode_register == $sub.ref(0, 212317);

procedure team_mode_register($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation team_mode_register($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p23: ref;
  var $p24: ref;
  var $i22: i32;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} $i3 := is_good_mode_name($p2);
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 296} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb6;

  $bb6:
    assume !($i7 == 1);
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.0, $p8);
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    $i10 := $ugt.i64($i9, 32);
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 297} $p12 := kmalloc(24, 208);
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, 0);
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 298} spin_lock(mode_list_lock);
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 299} $p18 := __find_mode($p17);
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p13, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p23, $p0);
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p13, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 302} list_add_tail($p24, mode_list);
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    $i22 := 0;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 301} spin_unlock(mode_list_lock);
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    $i11 := $i22;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb14:
    assume $i20 == 1;
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p13);
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 300} kfree($p21);
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32(0, 17);
    goto $bb16;

  $bb11:
    assume $i15 == 1;
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 12);
    goto $bb9;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb9;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb5;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;
}



const is_good_mode_name: ref;

axiom is_good_mode_name == $sub.ref(0, 213349);

procedure is_good_mode_name($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation is_good_mode_name($p0: ref) returns ($r: i1)
{
  var $i1: i8;
  var $i2: i32;
  var $i3: i1;
  var $i5: i8;
  var $i6: i32;
  var $i7: i64;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $i13: i8;
  var $i14: i32;
  var $i15: i64;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $i21: i8;
  var $i22: i32;
  var $i23: i1;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $i28: i1;
  var $p4: ref;
  var $i24: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    $i1 := $load.i8($M.0, $p0);
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    $i2 := $sext.i8.i32($i1);
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i24 := 1;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    $r := $i24;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    $p4 := $p0;
    goto $bb4;

  $bb4:
    call $i5, $i6, $i7, $p8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $p16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $p25, $i26, $i27, $i28, $p4 := is_good_mode_name_loop_$bb4($i5, $i6, $i7, $p8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $p16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $p25, $i26, $i27, $i28, $p4);
    goto $bb4_last;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref(_ctype, $mul.ref(0, 0)), $mul.ref($i7, 1));
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 3);
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p4, $mul.ref(1, 1));
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.0, $p25);
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    $i27 := $sext.i8.i32($i26);
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i28 == 1);
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb15:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    $p4 := $p25;
    goto $bb15_dummy;

  $bb6:
    assume $i12 == 1;
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p4);
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref(_ctype, $mul.ref(0, 0)), $mul.ref($i15, 1));
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i18, 4);
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 0);
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb8;

  $bb9:
    assume $i20 == 1;
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.0, $p4);
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    $i22 := $sext.i8.i32($i21);
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 95);
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb8;

  $bb11:
    assume $i23 == 1;
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    $i24 := 0;
    goto $bb13;

  $bb15_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1222;
}



const spin_lock: ref;

axiom spin_lock == $sub.ref(0, 214381);

procedure spin_lock($p0: ref);
  free requires assertsPassed;



implementation spin_lock($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 303} _raw_spin_lock($p2);
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    return;
}



const __find_mode: ref;

axiom __find_mode == $sub.ref(0, 215413);

procedure __find_mode($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation __find_mode($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p6: ref;
  var $p14: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.0, mode_list);
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, $p2i.ref.i64(mode_list));
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p14 := $0.ref;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    $r := $p14;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    $p6 := $p1;
    goto $bb4;

  $bb4:
    call $p7, $p8, $p9, $p10, $i11, $i12, $p13, $p16, $p17, $p18, $p19, $i20, $i21, $p6 := __find_mode_loop_$bb4($p0, $p7, $p8, $p9, $p10, $i11, $i12, $p13, $p16, $p17, $p18, $p19, $i20, $i21, $p6);
    goto $bb4_last;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 304} $i11 := strcmp($p10, $p0);
    call {:si_unique_call 305} {:cexpr "tmp"} boogie_si_record_i32($i11);
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    $p13 := $p6;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, $p2i.ref.i64(mode_list));
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i21 == 1);
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    $p6 := $p17;
    goto $bb10_dummy;

  $bb6:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    $p14 := $p13;
    goto $bb8;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1273;
}



const spin_unlock: ref;

axiom spin_unlock == $sub.ref(0, 216445);

procedure spin_unlock($p0: ref);
  free requires assertsPassed;



implementation spin_unlock($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 306} _raw_spin_unlock($p2);
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock: ref;

axiom _raw_spin_unlock == $sub.ref(0, 217477);

procedure _raw_spin_unlock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock: ref;

axiom _raw_spin_lock == $sub.ref(0, 218509);

procedure _raw_spin_lock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    return;
}



const team_mode_unregister: ref;

axiom team_mode_unregister == $sub.ref(0, 219541);

procedure team_mode_unregister($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation team_mode_unregister($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} spin_lock(mode_list_lock);
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} $p3 := __find_mode($p2);
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 311} spin_unlock(mode_list_lock);
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 309} list_del_init($p6);
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p3);
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} kfree($p7);
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const list_del_init: ref;

axiom list_del_init == $sub.ref(0, 220573);

procedure list_del_init($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation list_del_init($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 312} __list_del_entry($p0);
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} INIT_LIST_HEAD($p0);
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    return;
}



const __list_del_entry: ref;

axiom __list_del_entry == $sub.ref(0, 221605);

procedure __list_del_entry($p0: ref);
  free requires assertsPassed;



implementation __list_del_entry($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    return;
}



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0, 222637);

procedure INIT_LIST_HEAD($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $p0);
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p0);
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    return;
}



const team_mode_option_get: ref;

axiom team_mode_option_get == $sub.ref(0, 223669);

procedure team_mode_option_get($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation team_mode_option_get($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(368, 1));
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $p5);
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const team_mode_option_set: ref;

axiom team_mode_option_set == $sub.ref(0, 224701);

procedure team_mode_option_set($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.23, $M.24, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $CurrAddr, $M.4, $M.3, $M.16, $M.25, $M.26, $M.31, $M.32;



implementation team_mode_option_set($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 314} $i5 := team_change_mode($p0, $p4);
    call {:si_unique_call 315} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const team_notify_peers_count_get: ref;

axiom team_notify_peers_count_get == $sub.ref(0, 225733);

procedure team_notify_peers_count_get($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation team_notify_peers_count_get($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(472, 1)), $mul.ref(0, 1));
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, $i4);
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const team_notify_peers_count_set: ref;

axiom team_notify_peers_count_set == $sub.ref(0, 226765);

procedure team_notify_peers_count_set($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation team_notify_peers_count_set($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(472, 1)), $mul.ref(0, 1));
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, $i4);
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const team_notify_peers_interval_get: ref;

axiom team_notify_peers_interval_get == $sub.ref(0, 227797);

procedure team_notify_peers_interval_get($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation team_notify_peers_interval_get($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(472, 1)), $mul.ref(4, 1));
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, $i4);
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const team_notify_peers_interval_set: ref;

axiom team_notify_peers_interval_set == $sub.ref(0, 228829);

procedure team_notify_peers_interval_set($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation team_notify_peers_interval_set($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(472, 1)), $mul.ref(4, 1));
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, $i4);
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const team_mcast_rejoin_count_get: ref;

axiom team_mcast_rejoin_count_get == $sub.ref(0, 229861);

procedure team_mcast_rejoin_count_get($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation team_mcast_rejoin_count_get($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(712, 1)), $mul.ref(0, 1));
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, $i4);
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const team_mcast_rejoin_count_set: ref;

axiom team_mcast_rejoin_count_set == $sub.ref(0, 230893);

procedure team_mcast_rejoin_count_set($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation team_mcast_rejoin_count_set($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(712, 1)), $mul.ref(0, 1));
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, $i4);
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const team_mcast_rejoin_interval_get: ref;

axiom team_mcast_rejoin_interval_get == $sub.ref(0, 231925);

procedure team_mcast_rejoin_interval_get($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation team_mcast_rejoin_interval_get($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(712, 1)), $mul.ref(4, 1));
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, $i4);
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const team_mcast_rejoin_interval_set: ref;

axiom team_mcast_rejoin_interval_set == $sub.ref(0, 232957);

procedure team_mcast_rejoin_interval_set($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation team_mcast_rejoin_interval_set($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(712, 1)), $mul.ref(4, 1));
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, $i4);
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const team_port_en_option_get: ref;

axiom team_port_en_option_get == $sub.ref(0, 233989);

procedure team_port_en_option_get($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation team_port_en_option_get($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 316} $i6 := team_port_enabled($p5);
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i8($i6);
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p8, $i9);
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const team_port_en_option_set: ref;

axiom team_port_en_option_set == $sub.ref(0, 235021);

procedure team_port_en_option_set($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $CurrAddr;



implementation team_port_en_option_set($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i8;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i8);
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 318} team_port_disable($p0, $p5);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 317} team_port_enable($p0, $p5);
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const team_user_linkup_option_get: ref;

axiom team_user_linkup_option_get == $sub.ref(0, 236053);

procedure team_user_linkup_option_get($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation team_user_linkup_option_get($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $i8: i8;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 160)), $mul.ref(68, 1)), $mul.ref(0, 1));
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i8);
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i8($i9);
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p11, $i12);
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const team_user_linkup_option_set: ref;

axiom team_user_linkup_option_set == $sub.ref(0, 237085);

procedure team_user_linkup_option_set($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation team_user_linkup_option_set($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i8;
  var $i9: i1;
  var $p11: ref;
  var $i12: i8;
  var $p13: ref;
  var $p14: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i8);
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 160)), $mul.ref(68, 1)), $mul.ref(0, 1));
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i8($i9);
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p11, $i12);
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 319} team_refresh_port_linkup($p5);
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p5, $mul.ref(0, 160)), $mul.ref(40, 1));
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} __team_carrier_check($p14);
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const team_user_linkup_en_option_get: ref;

axiom team_user_linkup_en_option_get == $sub.ref(0, 238117);

procedure team_user_linkup_en_option_get($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation team_user_linkup_en_option_get($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $i8: i8;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 160)), $mul.ref(68, 1)), $mul.ref(1, 1));
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i8);
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i8($i9);
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p11, $i12);
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const team_user_linkup_en_option_set: ref;

axiom team_user_linkup_en_option_set == $sub.ref(0, 239149);

procedure team_user_linkup_en_option_set($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation team_user_linkup_en_option_set($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i8;
  var $i9: i1;
  var $p11: ref;
  var $i12: i8;
  var $p13: ref;
  var $p14: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i8);
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 160)), $mul.ref(68, 1)), $mul.ref(1, 1));
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i8($i9);
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p11, $i12);
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 321} team_refresh_port_linkup($p5);
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p5, $mul.ref(0, 160)), $mul.ref(40, 1));
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} __team_carrier_check($p14);
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const team_priority_option_get: ref;

axiom team_priority_option_get == $sub.ref(0, 240181);

procedure team_priority_option_get($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation team_priority_option_get($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 160)), $mul.ref(120, 1));
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, $i7);
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const team_priority_option_set: ref;

axiom team_priority_option_set == $sub.ref(0, 241213);

procedure team_priority_option_set($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $CurrAddr;



implementation team_priority_option_set($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    call {:si_unique_call 323} {:cexpr "priority"} boogie_si_record_i32($i8);
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 160)), $mul.ref(120, 1));
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, $i8);
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 160)), $mul.ref(120, 1));
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, $i8);
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} team_queue_override_port_prio_changed($p0, $p5);
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const team_queue_id_option_get: ref;

axiom team_queue_id_option_get == $sub.ref(0, 242245);

procedure team_queue_id_option_get($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation team_queue_id_option_get($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i16;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 160)), $mul.ref(124, 1));
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    $i7 := $load.i16($M.0, $p6);
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i7);
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i8);
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const team_queue_id_option_set: ref;

axiom team_queue_id_option_set == $sub.ref(0, 243277);

procedure team_queue_id_option_set($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $CurrAddr;



implementation team_queue_id_option_set($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i16;
  var $p10: ref;
  var $i11: i16;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i16;
  var $i15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i16($i8);
    call {:si_unique_call 325} {:cexpr "new_queue_id"} boogie_si_record_i16($i9);
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 160)), $mul.ref(124, 1));
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    $i11 := $load.i16($M.0, $p10);
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    $i12 := $zext.i16.i32($i11);
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i9);
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i12, $i13);
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i16 := $zext.i16.i32($i9);
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(0, 1));
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 3176)), $mul.ref(932, 1));
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    $i21 := $uge.i32($i16, $i20);
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i22 := $zext.i16.i32($i9);
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i32.i16($i22);
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} team_queue_override_port_change_queue_id($p0, $p5, $i23);
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb5:
    assume $i21 == 1;
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb3;
}



const team_queue_override_port_change_queue_id: ref;

axiom team_queue_override_port_change_queue_id == $sub.ref(0, 244309);

procedure team_queue_override_port_change_queue_id($p0: ref, $p1: ref, $i2: i16);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $CurrAddr;



implementation team_queue_override_port_change_queue_id($p0: ref, $p1: ref, $i2: i16)
{
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 327} {:cexpr "team_queue_override_port_change_queue_id:arg:new_queue_id"} boogie_si_record_i16($i2);
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 328} $i3 := team_port_enabled($p1);
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 329} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(124, 1));
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p7, $i2);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 330} __team_queue_override_port_del($p0, $p1);
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(124, 1));
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p6, $i2);
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 331} __team_queue_override_port_add($p0, $p1);
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} __team_queue_override_enabled_check($p0);
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const team_port_enabled: ref;

axiom team_port_enabled == $sub.ref(0, 245341);

procedure team_port_enabled($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation team_port_enabled($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(48, 1));
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, $sub.i32(0, 1));
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __team_queue_override_port_del: ref;

axiom __team_queue_override_port_del == $sub.ref(0, 246373);

procedure __team_queue_override_port_del($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation __team_queue_override_port_del($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i16;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(124, 1));
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    $i3 := $load.i16($M.0, $p2);
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i3);
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(128, 1));
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 333} list_del_rcu($p6);
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __team_queue_override_port_add: ref;

axiom __team_queue_override_port_add == $sub.ref(0, 247405);

procedure __team_queue_override_port_add($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation __team_queue_override_port_add($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i16;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i16;
  var $i8: i32;
  var $i9: i16;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $i22: i1;
  var $i23: i8;
  var $i24: i1;
  var $p25: ref;
  var $p27: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $p20: ref;
  var $p21: ref;
  var $p36: ref;
  var $p19: ref;
  var $p26: ref;
  var $p37: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(124, 1));
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    $i3 := $load.i16($M.0, $p2);
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i3);
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(124, 1));
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    $i7 := $load.i16($M.0, $p6);
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i7);
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i16($i8);
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} $p10 := __team_get_qom_list($p0, $i9);
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p13, $mul.ref($sub.ref(0, 128), 160));
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p13, $mul.ref($sub.ref(0, 128), 160)), $mul.ref(128, 1));
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p10);
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i16, $i17);
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    $p19 := $p10;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p26 := $p19;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(128, 1));
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 337} list_add_tail_rcu($p37, $p26);
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i18 == 1;
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    $p20, $p21 := $p10, $p14;
    goto $bb8;

  $bb8:
    call $i22, $i23, $i24, $p25, $p27, $p29, $p30, $p31, $p32, $p33, $i34, $i35, $p20, $p21, $p36 := __team_queue_override_port_add_loop_$bb8($p1, $i17, $i22, $i23, $i24, $p25, $p27, $p29, $p30, $p31, $p32, $p33, $i34, $i35, $p20, $p21, $p36);
    goto $bb8_last;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} $i22 := team_queue_override_port_has_gt_prio_than($p1, $p21);
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    $i23 := $zext.i1.i8($i22);
    call {:si_unique_call 336} {:cexpr "tmp"} boogie_si_record_i8($i23);
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i8.i1($i23);
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $p25 := $p20;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p21, $mul.ref(0, 160)), $mul.ref(128, 1));
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p21, $mul.ref(0, 160)), $mul.ref(128, 1)), $mul.ref(0, 1));
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($p31, $mul.ref($sub.ref(0, 128), 160));
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p31, $mul.ref($sub.ref(0, 128), 160)), $mul.ref(128, 1));
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p33);
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, $i17);
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    $p36 := $p27;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $p19 := $p36;
    goto $bb7;

  $bb14:
    assume $i35 == 1;
    assume {:verifier.code 0} true;
    $p20, $p21 := $p27, $p32;
    goto $bb14_dummy;

  $bb10:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    $p26 := $p25;
    goto $bb12;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb14_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1617;
}



const __team_queue_override_enabled_check: ref;

axiom __team_queue_override_enabled_check == $sub.ref(0, 248437);

procedure __team_queue_override_enabled_check($p0: ref);
  free requires assertsPassed;
  modifies $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.0, $CurrAddr;



implementation __team_queue_override_enabled_check($p0: ref)
{
  var $p1: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p13: ref;
  var $i14: i16;
  var $i15: i32;
  var $i16: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p12: ref;
  var $i17: i8;
  var $p26: ref;
  var $i27: i8;
  var $i28: i1;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i24;
  var $i40: i24;
  var $i41: i24;
  var $p42: ref;
  var $p43: ref;
  var $i44: i8;
  var $i45: i64;
  var $i46: i64;
  var $i47: i64;
  var $i48: i1;
  var $p49: ref;
  var $p50: ref;
  var $i51: i1;
  var $p52: ref;
  var $i54: i1;
  var $p55: ref;
  var $i56: i8;
  var vslice_dummy_var_43: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 338} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(320, 1)), $mul.ref(0, 1));
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p5, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(320, 1));
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i8, $i10);
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(449, 1));
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.0, $p26);
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i8.i1($i27);
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    $i29 := $zext.i1.i32($i28);
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i8.i1($i17);
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    $i31 := $zext.i1.i32($i30);
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i29, $i31);
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p33, .str.11);
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p34, .str.27);
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p35, .str.2);
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p36, .str.28);
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    $i39 := $load.i24($M.10, $p38);
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    $i40 := $and.i24($i39, $sub.i24(0, 262144));
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    $i41 := $or.i24($i40, 891);
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    $M.10 := $store.i24($M.10, $p38, $i41);
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p42, 0);
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.11, $p43);
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i64($i44);
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    $i46 := $and.i64($i45, 1);
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} $i47 := ldv__builtin_expect($i46, 0);
    call {:si_unique_call 340} {:cexpr "tmp"} boogie_si_record_i64($i47);
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    $i48 := $ne.i64($i47, 0);
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i54 := $trunc.i8.i1($i17);
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(449, 1));
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    $i56 := $zext.i1.i8($i54);
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p55, $i56);
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    return;

  $bb17:
    assume $i48 == 1;
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(0, 1));
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i8.i1($i17);
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    $p52 := (if $i51 == 1 then .str.29 else .str.30);
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 341} vslice_dummy_var_43 := __dynamic_netdev_dbg.ref.ref.ref.ref($p1, $p50, .str.28, $p52);
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i32 == 1;
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    $p12 := $p6;
    goto $bb4;

  $bb4:
    call $p13, $i14, $i15, $i16, $p19, $p20, $p21, $p22, $p23, $i24, $i25, $p12 := __team_queue_override_enabled_check_loop_$bb4($i10, $p13, $i14, $i15, $i16, $p19, $p20, $p21, $p22, $p23, $i24, $i25, $p12);
    goto $bb4_last;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 160)), $mul.ref(124, 1));
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    $i14 := $load.i16($M.0, $p13);
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    $i15 := $zext.i16.i32($i14);
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p21, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p21, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, $i10);
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i25 == 1);
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    $p12 := $p22;
    goto $bb10_dummy;

  $bb6:
    assume $i16 == 1;
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    $i17 := 1;
    goto $bb8;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1653;
}



const __dynamic_netdev_dbg: ref;

axiom __dynamic_netdev_dbg == $sub.ref(0, 249469);

procedure __dynamic_netdev_dbg.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_netdev_dbg.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 1} true;
    call {:si_unique_call 342} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 343} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure __dynamic_netdev_dbg.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_netdev_dbg.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 1} true;
    call {:si_unique_call 344} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 345} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __team_get_qom_list: ref;

axiom __team_get_qom_list == $sub.ref(0, 250501);

procedure __team_get_qom_list($p0: ref, $i1: i16) returns ($r: ref);
  free requires assertsPassed;



implementation __team_get_qom_list($p0: ref, $i1: i16) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 346} {:cexpr "__team_get_qom_list:arg:queue_id"} boogie_si_record_i16($i1);
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(456, 1));
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i64($i1);
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i4, $sub.i64(0, 1));
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p3, $mul.ref($i5, 16));
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const team_queue_override_port_has_gt_prio_than: ref;

axiom team_queue_override_port_has_gt_prio_than == $sub.ref(0, 251533);

procedure team_queue_override_port_has_gt_prio_than($p0: ref, $p1: ref) returns ($r: i1);
  free requires assertsPassed;



implementation team_queue_override_port_has_gt_prio_than($p0: ref, $p1: ref) returns ($r: i1)
{
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(120, 1));
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(120, 1));
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i3, $i5);
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(120, 1));
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(120, 1));
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    $i12 := $sgt.i32($i9, $i11);
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(48, 1));
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(48, 1));
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i14, $i16);
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    $i7 := 1;
    goto $bb3;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    $i7 := 1;
    goto $bb3;
}



const list_add_tail_rcu: ref;

axiom list_add_tail_rcu == $sub.ref(0, 252565);

procedure list_add_tail_rcu($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add_tail_rcu($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 347} __list_add_rcu($p0, $p3, $p1);
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    return;
}



const __list_add_rcu: ref;

axiom __list_add_rcu == $sub.ref(0, 253597);

procedure __list_add_rcu($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __list_add_rcu($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    return;
}



const list_del_rcu: ref;

axiom list_del_rcu == $sub.ref(0, 254629);

procedure list_del_rcu($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation list_del_rcu($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} __list_del_entry($p0);
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $i2p.i64.ref($sub.i64(0, 2401263026316508672)));
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    return;
}



const team_queue_override_port_prio_changed: ref;

axiom team_queue_override_port_prio_changed == $sub.ref(0, 255661);

procedure team_queue_override_port_prio_changed($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.0, $CurrAddr;



implementation team_queue_override_port_prio_changed($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i16;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i7: i8;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(124, 1));
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    $i3 := $load.i16($M.0, $p2);
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i3);
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 349} $i6 := team_port_enabled($p1);
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i6);
    call {:si_unique_call 350} {:cexpr "tmp"} boogie_si_record_i8($i7);
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i7);
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 351} __team_queue_override_port_del($p0, $p1);
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} __team_queue_override_port_add($p0, $p1);
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 353} __team_queue_override_enabled_check($p0);
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const team_refresh_port_linkup: ref;

axiom team_refresh_port_linkup == $sub.ref(0, 256693);

procedure team_refresh_port_linkup($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation team_refresh_port_linkup($p0: ref)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i1;
  var $p6: ref;
  var $i7: i8;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $p14: ref;
  var $i15: i8;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i12: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(68, 1)), $mul.ref(1, 1));
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i8.i1($i15);
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i32($i16);
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i32($i18);
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    $i12 := $i19;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i12, 0);
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(52, 1));
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    $i22 := $zext.i1.i8($i20);
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p21, $i22);
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(68, 1)), $mul.ref(0, 1));
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i7);
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    $i12 := $i11;
    goto $bb3;
}



const __team_carrier_check: ref;

axiom __team_carrier_check == $sub.ref(0, 257725);

procedure __team_carrier_check($p0: ref);
  free requires assertsPassed;



implementation __team_carrier_check($p0: ref)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p15: ref;
  var $i16: i8;
  var $i17: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $p14: ref;
  var $i18: i8;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(448, 1));
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(320, 1)), $mul.ref(0, 1));
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p7, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p7, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(320, 1));
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i10, $i12);
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i8.i1($i18);
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i27 == 1);
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(0, 1));
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 355} netif_carrier_off($p31);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb17:
    assume $i27 == 1;
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(0, 1));
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 354} netif_carrier_on($p29);
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    $p14 := $p8;
    goto $bb8;

  $bb8:
    call $p15, $i16, $i17, $p20, $p21, $p22, $p23, $p24, $i25, $i26, $p14 := __team_carrier_check_loop_$bb8($i12, $p15, $i16, $i17, $p20, $p21, $p22, $p23, $p24, $i25, $i26, $p14);
    goto $bb8_last;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 160)), $mul.ref(52, 1));
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.0, $p15);
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i8.i1($i16);
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p14, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p22, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p22, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, $i12);
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i26 == 1);
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb14:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    $p14 := $p23;
    goto $bb14_dummy;

  $bb10:
    assume $i17 == 1;
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    $i18 := 1;
    goto $bb12;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb14_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1835;
}



const netif_carrier_on: ref;

axiom netif_carrier_on == $sub.ref(0, 258757);

procedure netif_carrier_on($p0: ref);
  free requires assertsPassed;



implementation netif_carrier_on($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    return;
}



const netif_carrier_off: ref;

axiom netif_carrier_off == $sub.ref(0, 259789);

procedure netif_carrier_off($p0: ref);
  free requires assertsPassed;



implementation netif_carrier_off($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    return;
}



const team_port_enable: ref;

axiom team_port_enable == $sub.ref(0, 260821);

procedure team_port_enable($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $CurrAddr;



implementation team_port_enable($p0: ref, $p1: ref)
{
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p22: ref;
  var $p23: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 356} $i2 := team_port_enabled($p1);
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 357} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(184, 1));
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    call {:si_unique_call 358} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(184, 1));
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    $i9 := $add.i32($i8, 1);
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(184, 1));
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i9);
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(48, 1));
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, $i6);
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(48, 1));
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 359} $p14 := team_port_index_hash($p0, $i13);
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(8, 1));
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 360} hlist_add_head_rcu($p15, $p14);
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} team_adjust_ops($p0);
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 362} team_queue_override_port_add($p0, $p1);
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(376, 1)), $mul.ref(56, 1));
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 364} team_notify_peers($p0);
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 365} team_mcast_rejoin($p0);
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i20 == 1;
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(376, 1)), $mul.ref(56, 1));
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    call {:si_unique_call 363} devirtbounce.4($p23, $p0, $p1);
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const team_port_disable: ref;

axiom team_port_disable == $sub.ref(0, 261853);

procedure team_port_disable($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $CurrAddr;



implementation team_port_disable($p0: ref, $p1: ref)
{
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $p22: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 366} $i2 := team_port_enabled($p1);
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 367} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(376, 1)), $mul.ref(64, 1));
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(8, 1));
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 369} hlist_del_rcu($p15);
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(48, 1));
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 370} __reconstruct_port_hlist($p0, $i17);
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(48, 1));
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, $sub.i32(0, 1));
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(184, 1));
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    $i21 := $sub.i32($i20, 1);
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(184, 1));
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p22, $i21);
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} team_queue_override_port_del($p0, $p1);
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 372} team_adjust_ops($p0);
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 373} team_notify_peers($p0);
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 374} team_mcast_rejoin($p0);
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i11 == 1;
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(376, 1)), $mul.ref(64, 1));
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    call {:si_unique_call 368} devirtbounce.4($p14, $p0, $p1);
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;
}



const hlist_del_rcu: ref;

axiom hlist_del_rcu == $sub.ref(0, 262885);

procedure hlist_del_rcu($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation hlist_del_rcu($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 375} __hlist_del($p0);
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $i2p.i64.ref($sub.i64(0, 2401263026316508672)));
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    return;
}



const __reconstruct_port_hlist: ref;

axiom __reconstruct_port_hlist == $sub.ref(0, 263917);

procedure __reconstruct_port_hlist($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation __reconstruct_port_hlist($p0: ref, $i1: i32)
{
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} {:cexpr "__reconstruct_port_hlist:arg:rm_index"} boogie_si_record_i32($i1);
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    $i2 := $add.i32($i1, 1);
    call {:si_unique_call 377} {:cexpr "i"} boogie_si_record_i32($i2);
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(184, 1));
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    $i5 := $sgt.i32($i4, $i2);
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    $i6 := $i2;
    goto $bb4;

  $bb4:
    call $p7, $p8, $p9, $i10, $i11, $p12, $p13, $i14, $p15, $p16, $i17, $i18, $i19, $i6 := __reconstruct_port_hlist_loop_$bb4($p0, $p3, $p7, $p8, $p9, $i10, $i11, $p12, $p13, $i14, $p15, $p16, $i17, $i18, $i19, $i6);
    goto $bb4_last;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} $p7 := team_get_port_by_index($p0, $i6);
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 160)), $mul.ref(8, 1));
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 379} hlist_del_rcu($p8);
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p7, $mul.ref(0, 160)), $mul.ref(48, 1));
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32($i10, 1);
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p7, $mul.ref(0, 160)), $mul.ref(48, 1));
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, $i11);
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p7, $mul.ref(0, 160)), $mul.ref(48, 1));
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} $p15 := team_port_index_hash($p0, $i14);
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p7, $mul.ref(0, 160)), $mul.ref(8, 1));
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 381} hlist_add_head_rcu($p16, $p15);
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i6, 1);
    call {:si_unique_call 382} {:cexpr "i"} boogie_si_record_i32($i17);
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p3);
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    $i19 := $sgt.i32($i18, $i17);
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i19 == 1);
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    $i6 := $i17;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1955;
}



const team_queue_override_port_del: ref;

axiom team_queue_override_port_del == $sub.ref(0, 264949);

procedure team_queue_override_port_del($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.0, $CurrAddr;



implementation team_queue_override_port_del($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} __team_queue_override_port_del($p0, $p1);
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} __team_queue_override_enabled_check($p0);
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    return;
}



const team_adjust_ops: ref;

axiom team_adjust_ops == $sub.ref(0, 265981);

procedure team_adjust_ops($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation team_adjust_ops($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p5: ref;
  var $i6: i1;
  var $i7: i8;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $p35: ref;
  var $i36: i1;
  var $i37: i8;
  var $i38: i1;
  var $i39: i32;
  var $i40: i1;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i64;
  var $i50: i1;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p60: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(184, 1));
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 385} $i6 := team_is_mode_set($p0);
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i6);
    call {:si_unique_call 386} {:cexpr "tmp"} boogie_si_record_i8($i7);
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i7);
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i10 == 1);
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(368, 1));
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    $i20 := $eq.i64($i19, 0);
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i20 == 1);
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(368, 1));
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(376, 1)), $mul.ref(24, 1));
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p30, $p28);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(184, 1));
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 0);
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i33 == 1);
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} $i36 := team_is_mode_set($p0);
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    $i37 := $zext.i1.i8($i36);
    call {:si_unique_call 388} {:cexpr "tmp___1"} boogie_si_record_i8($i37);
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i8.i1($i37);
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    $i39 := 1;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i40 == 1);
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(368, 1));
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p46, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    $i49 := $p2i.ref.i64($p48);
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    $i50 := $eq.i64($i49, 0);
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i50 == 1);
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(368, 1));
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p54, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p56, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(376, 1)), $mul.ref(16, 1));
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p60, $p58);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    return;

  $bb22:
    assume $i50 == 1;
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(376, 1)), $mul.ref(16, 1));
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p52, team_dummy_receive);
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb19:
    assume $i40 == 1;
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(376, 1)), $mul.ref(16, 1));
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p42, team_dummy_receive);
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb16:
    assume $i38 == 1;
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    $i39 := 0;
    goto $bb18;

  $bb13:
    assume $i33 == 1;
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(376, 1)), $mul.ref(16, 1));
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p35, team_dummy_receive);
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume $i20 == 1;
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(376, 1)), $mul.ref(24, 1));
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p22, team_dummy_transmit);
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i10 == 1;
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(376, 1)), $mul.ref(24, 1));
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, team_dummy_transmit);
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb6;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(376, 1)), $mul.ref(24, 1));
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p5, team_dummy_transmit);
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const team_notify_peers: ref;

axiom team_notify_peers == $sub.ref(0, 267013);

procedure team_notify_peers($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation team_notify_peers($p0: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $i8: i8;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $p15: ref;
  var $i16: i32;
  var $p18: ref;
  var vslice_dummy_var_44: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(472, 1)), $mul.ref(0, 1));
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 0);
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(0, 1));
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 389} $i7 := netif_running($p6);
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i8($i7);
    call {:si_unique_call 390} {:cexpr "tmp"} boogie_si_record_i8($i8);
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i8);
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(472, 1)), $mul.ref(8, 1));
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(472, 1)), $mul.ref(0, 1));
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 391} atomic_set($p13, $i16);
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(472, 1)), $mul.ref(16, 1));
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} vslice_dummy_var_44 := schedule_delayed_work($p18, 0);
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb7:
    assume $i11 == 1;
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb6;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const team_mcast_rejoin: ref;

axiom team_mcast_rejoin == $sub.ref(0, 268045);

procedure team_mcast_rejoin($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation team_mcast_rejoin($p0: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $i8: i8;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $p15: ref;
  var $i16: i32;
  var $p18: ref;
  var vslice_dummy_var_45: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(712, 1)), $mul.ref(0, 1));
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 0);
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(0, 1));
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 393} $i7 := netif_running($p6);
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i8($i7);
    call {:si_unique_call 394} {:cexpr "tmp"} boogie_si_record_i8($i8);
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i8);
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(712, 1)), $mul.ref(8, 1));
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(712, 1)), $mul.ref(0, 1));
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 395} atomic_set($p13, $i16);
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(712, 1)), $mul.ref(16, 1));
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} vslice_dummy_var_45 := schedule_delayed_work($p18, 0);
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb7:
    assume $i11 == 1;
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb6;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const netif_running: ref;

axiom netif_running == $sub.ref(0, 269077);

procedure netif_running($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation netif_running($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(72, 1));
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 397} $i2 := constant_test_bit(0, $p1);
    call {:si_unique_call 398} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const atomic_set: ref;

axiom atomic_set == $sub.ref(0, 270109);

procedure atomic_set($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation atomic_set($p0: ref, $i1: i32)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} {:cexpr "atomic_set:arg:i"} boogie_si_record_i32($i1);
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i1);
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    return;
}



const schedule_delayed_work: ref;

axiom schedule_delayed_work == $sub.ref(0, 271141);

procedure schedule_delayed_work($p0: ref, $i1: i64) returns ($r: i1);
  free requires assertsPassed;



implementation schedule_delayed_work($p0: ref, $i1: i64) returns ($r: i1)
{
  var $p2: ref;
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} {:cexpr "schedule_delayed_work:arg:delay"} boogie_si_record_i64($i1);
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, system_wq);
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 401} $i3 := queue_delayed_work($p2, $p0, $i1);
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 402} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const queue_delayed_work: ref;

axiom queue_delayed_work == $sub.ref(0, 272173);

procedure queue_delayed_work($p0: ref, $p1: ref, $i2: i64) returns ($r: i1);
  free requires assertsPassed;



implementation queue_delayed_work($p0: ref, $p1: ref, $i2: i64) returns ($r: i1)
{
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} {:cexpr "queue_delayed_work:arg:delay"} boogie_si_record_i64($i2);
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 404} $i3 := queue_delayed_work_on(8192, $p0, $p1, $i2);
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 405} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const queue_delayed_work_on: ref;

axiom queue_delayed_work_on == $sub.ref(0, 273205);

procedure queue_delayed_work_on($i0: i32, $p1: ref, $p2: ref, $i3: i64) returns ($r: i1);
  free requires assertsPassed;



implementation queue_delayed_work_on($i0: i32, $p1: ref, $p2: ref, $i3: i64) returns ($r: i1)
{
  var $i4: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 406} {:cexpr "queue_delayed_work_on:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 407} {:cexpr "queue_delayed_work_on:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 1} true;
    call {:si_unique_call 408} $i4 := __VERIFIER_nondet_bool();
    call {:si_unique_call 409} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i4);
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const constant_test_bit: ref;

axiom constant_test_bit == $sub.ref(0, 274237);

procedure constant_test_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation constant_test_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $i5: i32;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 410} {:cexpr "constant_test_bit:arg:nr"} boogie_si_record_i64($i0);
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    $i2 := $ashr.i64($i0, 6);
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p1, $mul.ref($i2, 8));
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i0);
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 63);
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i6);
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    $i8 := $lshr.i64($i4, $i7);
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 1);
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const team_dummy_transmit: ref;

axiom team_dummy_transmit == $sub.ref(0, 275269);

procedure team_dummy_transmit($p0: ref, $p1: ref) returns ($r: i1);
  free requires assertsPassed;



implementation team_dummy_transmit($p0: ref, $p1: ref) returns ($r: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 411} dev_kfree_skb_any($p1);
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const team_is_mode_set: ref;

axiom team_is_mode_set == $sub.ref(0, 276301);

procedure team_is_mode_set($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation team_is_mode_set($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(368, 1));
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, $p2i.ref.i64(__team_no_mode));
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const team_dummy_receive: ref;

axiom team_dummy_receive == $sub.ref(0, 277333);

procedure team_dummy_receive($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation team_dummy_receive($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    $r := 1;
    return;
}



const dev_kfree_skb_any: ref;

axiom dev_kfree_skb_any == $sub.ref(0, 278365);

procedure dev_kfree_skb_any($p0: ref);
  free requires assertsPassed;



implementation dev_kfree_skb_any($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} __dev_kfree_skb_any($p0, 1);
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    return;
}



const __dev_kfree_skb_any: ref;

axiom __dev_kfree_skb_any == $sub.ref(0, 279397);

procedure __dev_kfree_skb_any($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __dev_kfree_skb_any($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} {:cexpr "__dev_kfree_skb_any:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    return;
}



const team_get_port_by_index: ref;

axiom team_get_port_by_index == $sub.ref(0, 280429);

procedure team_get_port_by_index($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation team_get_port_by_index($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $p12: ref;
  var $p17: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} {:cexpr "team_get_port_by_index:arg:port_index"} boogie_si_record_i32($i1);
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 415} $p2 := team_port_index_hash($p0, $i1);
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $p9 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p17 := $0.ref;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    $r := $p17;
    return;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    $p12 := $p9;
    goto $bb7;

  $bb7:
    call $p13, $i14, $i15, $p16, $p19, $p20, $i21, $i22, $p23, $p24, $p25, $i26, $i27, $p12 := team_get_port_by_index_loop_$bb7($i1, $p13, $i14, $i15, $p16, $p19, $p20, $i21, $i22, $p23, $p24, $p25, $i26, $i27, $p12);
    goto $bb7_last;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 160)), $mul.ref(48, 1));
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, $i1);
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    $p16 := $p12;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $p25 := $0.ref;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i27 == 1);
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb16:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    $p12 := $p25;
    goto $bb16_dummy;

  $bb13:
    assume $i22 == 1;
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p20);
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($p23, $mul.ref($sub.ref(0, 8), 160));
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    $p25 := $p24;
    goto $bb15;

  $bb9:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    $p17 := $p16;
    goto $bb11;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p4);
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p7, $mul.ref($sub.ref(0, 8), 160));
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    $p9 := $p8;
    goto $bb3;

  $bb16_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2194;
}



const team_port_index_hash: ref;

axiom team_port_index_hash == $sub.ref(0, 281461);

procedure team_port_index_hash($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation team_port_index_hash($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} {:cexpr "team_port_index_hash:arg:port_index"} boogie_si_record_i32($i1);
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(192, 1));
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i1);
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    $i5 := $and.i64($i4, 15);
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p3, $mul.ref($i5, 8));
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const hlist_add_head_rcu: ref;

axiom hlist_add_head_rcu == $sub.ref(0, 282493);

procedure hlist_add_head_rcu($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation hlist_add_head_rcu($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $i7: i1;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, $p3);
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, $p1);
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1(0);
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call {:si_unique_call 418} devirtbounce.5(0);
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, $p0);
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p3);
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, $p0);
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 417} __compiletime_assert_402();
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __compiletime_assert_402: ref;

axiom __compiletime_assert_402 == $sub.ref(0, 283525);

procedure __compiletime_assert_402();
  free requires assertsPassed;



implementation __compiletime_assert_402()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    return;
}



const __hlist_del: ref;

axiom __hlist_del == $sub.ref(0, 284557);

procedure __hlist_del($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation __hlist_del($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, $p2);
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p2);
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $p4);
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const team_queue_override_port_add: ref;

axiom team_queue_override_port_add == $sub.ref(0, 285589);

procedure team_queue_override_port_add($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.0, $CurrAddr;



implementation team_queue_override_port_add($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} __team_queue_override_port_add($p0, $p1);
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} __team_queue_override_enabled_check($p0);
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    return;
}



const team_change_mode: ref;

axiom team_change_mode == $sub.ref(0, 286621);

procedure team_change_mode($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.23, $M.24, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $CurrAddr, $M.4, $M.3, $M.16, $M.25, $M.26, $M.31, $M.32;



implementation team_change_mode($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i9: i1;
  var $i10: i8;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $i23: i32;
  var $i24: i1;
  var $i8: i32;
  var vslice_dummy_var_46: i32;
  var vslice_dummy_var_47: i32;
  var vslice_dummy_var_48: i32;
  var vslice_dummy_var_49: i32;
  var vslice_dummy_var_50: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(0, 1));
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(320, 1));
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} $i5 := list_empty($p4);
    call {:si_unique_call 422} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} $i9 := team_is_mode_set($p0);
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i8($i9);
    call {:si_unique_call 425} {:cexpr "tmp___0"} boogie_si_record_i8($i10);
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i10);
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 429} $p19 := team_mode_get($p1);
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    $i21 := $eq.i64($i20, 0);
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 431} $i23 := __team_change_mode($p0, $p19);
    call {:si_unique_call 432} {:cexpr "err"} boogie_si_record_i32($i23);
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 435} vslice_dummy_var_50 := netdev_info.ref.ref.ref($p3, .str.56, $p1);
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb14:
    assume $i24 == 1;
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} vslice_dummy_var_49 := netdev_err.ref.ref.ref($p3, .str.55, $p1);
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 434} team_mode_put($p19);
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    $i8 := $i23;
    goto $bb3;

  $bb11:
    assume $i21 == 1;
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} vslice_dummy_var_48 := netdev_err.ref.ref.ref($p3, .str.54, $p1);
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 22);
    goto $bb3;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(368, 1));
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 426} $i16 := strcmp($p15, $p1);
    call {:si_unique_call 427} {:cexpr "tmp___1"} boogie_si_record_i32($i16);
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 0);
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i17 == 1;
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 428} vslice_dummy_var_47 := netdev_err.ref.ref($p3, .str.53);
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 423} vslice_dummy_var_46 := netdev_err.ref.ref($p3, .str.52);
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 16);
    goto $bb3;
}



const list_empty: ref;

axiom list_empty == $sub.ref(0, 287653);

procedure list_empty($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation list_empty($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i3, $i4);
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const netdev_err: ref;

axiom netdev_err == $sub.ref(0, 288685);

procedure netdev_err.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation netdev_err.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 1} true;
    call {:si_unique_call 436} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 437} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure netdev_err.ref.ref($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation netdev_err.ref.ref($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 1} true;
    call {:si_unique_call 438} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 439} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const team_mode_get: ref;

axiom team_mode_get == $sub.ref(0, 289717);

procedure team_mode_get($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation team_mode_get($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i1;
  var $i14: i8;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var vslice_dummy_var_51: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} spin_lock(mode_list_lock);
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 441} $p1 := __find_mode($p0);
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $p6 := $p1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $p19 := $0.ref;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} spin_unlock(mode_list_lock);
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    $r := $p19;
    return;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p6, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} $i13 := try_module_get($p12);
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i8($i13);
    call {:si_unique_call 447} {:cexpr "tmp"} boogie_si_record_i8($i14);
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i8.i1($i14);
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $p18 := $p10;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    $p19 := $p18;
    goto $bb12;

  $bb9:
    assume $i17 == 1;
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    $p18 := $0.ref;
    goto $bb11;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 442} spin_unlock(mode_list_lock);
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} vslice_dummy_var_51 := __request_module.i1.ref.ref(1, .str.57, $p0);
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 444} spin_lock(mode_list_lock);
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 445} $p5 := __find_mode($p0);
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    $p6 := $p5;
    goto $bb3;
}



const __team_change_mode: ref;

axiom __team_change_mode == $sub.ref(0, 290749);

procedure __team_change_mode($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.23, $M.24, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $CurrAddr, $M.4, $M.3, $M.16, $M.25, $M.26, $M.31, $M.32;



implementation __team_change_mode($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i18: i32;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;
  var cmdloc_dummy_var_11: [ref]i8;
  var cmdloc_dummy_var_12: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 449} $i2 := team_is_mode_set($p0);
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 450} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p1);
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i16, 0);
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(368, 1));
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p31, $p1);
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    $i32 := $ugt.i64(72, 63);
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i32 == 1);
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(376, 1));
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_10 := $M.0;
    cmdloc_dummy_var_11 := $M.0;
    call {:si_unique_call 460} cmdloc_dummy_var_12 := $memcpy.i8(cmdloc_dummy_var_10, cmdloc_dummy_var_11, $p39, $p42, 72, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_12;
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} team_adjust_ops($p0);
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb17:
    assume $i32 == 1;
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(376, 1));
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_7 := $M.0;
    cmdloc_dummy_var_8 := $M.0;
    call {:si_unique_call 459} cmdloc_dummy_var_9 := $memcpy.i8(cmdloc_dummy_var_7, cmdloc_dummy_var_8, $p34, $p37, 72, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_9;
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb11:
    assume $i24 == 1;
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    call {:si_unique_call 457} $i29 := devirtbounce.7($p28, $p0);
    call {:si_unique_call 458} {:cexpr "err"} boogie_si_record_i32($i29);
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i30 == 1;
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    $i18 := $i29;
    goto $bb9;

  $bb7:
    assume $i17 == 1;
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb9;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(376, 1)), $mul.ref(8, 1));
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(376, 1));
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.0;
    call {:si_unique_call 451} cmdloc_dummy_var_4 := $memset.i8(cmdloc_dummy_var_3, $p9, 0, 72, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_4;
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} team_adjust_ops($p0);
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p7);
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(368, 1));
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 454} team_mode_put($p13);
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 455} team_set_no_mode($p0);
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(952, 1));
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_5 := $M.0;
    call {:si_unique_call 456} cmdloc_dummy_var_6 := $memset.i8(cmdloc_dummy_var_5, $p15, 0, 32, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_6;
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i11 == 1;
    call {:si_unique_call 453} devirtbounce.6($p7, $p0);
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const team_mode_put: ref;

axiom team_mode_put == $sub.ref(0, 291781);

procedure team_mode_put($p0: ref);
  free requires assertsPassed;



implementation team_mode_put($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 462} module_put($p2);
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    return;
}



const netdev_info: ref;

axiom netdev_info == $sub.ref(0, 292813);

procedure netdev_info.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation netdev_info.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 1} true;
    call {:si_unique_call 463} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 464} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const module_put: ref;

axiom module_put == $sub.ref(0, 293845);

procedure module_put($p0: ref);
  free requires assertsPassed;



implementation module_put($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    return;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 294877);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const team_set_no_mode: ref;

axiom team_set_no_mode == $sub.ref(0, 295909);

procedure team_set_no_mode($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation team_set_no_mode($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(448, 1));
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1, 0);
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(368, 1));
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, __team_no_mode);
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    return;
}



const __request_module: ref;

axiom __request_module == $sub.ref(0, 296941);

procedure __request_module.i1.ref.ref($i0: i1, $p1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __request_module.i1.ref.ref($i0: i1, $p1: ref, p.2: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 465} {:cexpr "__request_module:arg:arg0"} boogie_si_record_i1($i0);
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 1} true;
    call {:si_unique_call 466} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 467} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const try_module_get: ref;

axiom try_module_get == $sub.ref(0, 297973);

procedure try_module_get($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation try_module_get($p0: ref) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 1} true;
    call {:si_unique_call 468} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 469} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const team_setup: ref;

axiom team_setup == $sub.ref(0, 299005);

procedure team_setup($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation team_setup($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i64;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i64;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i64;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $p36: ref;
  var $i37: i64;
  var $i38: i64;
  var $p39: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} ether_setup($p0);
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(488, 1));
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, team_netdev_ops);
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(496, 1));
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, team_ethtool_ops);
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(1248, 1));
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, team_destructor);
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(944, 1));
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p4, 0);
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(520, 1));
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    $i7 := $or.i32($i6, 4096);
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(520, 1));
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, $i7);
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(524, 1));
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, $sub.i32(0, 66561));
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(524, 1));
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, $i11);
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(524, 1));
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    $i15 := $or.i32($i14, 1179648);
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(524, 1));
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, $i15);
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(208, 1));
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.0, $p17);
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    $i19 := $or.i64($i18, 4096);
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(208, 1));
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p20, $i19);
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(208, 1));
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    $i22 := $load.i64($M.0, $p21);
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    $i23 := $or.i64($i22, 16384);
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(208, 1));
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p24, $i23);
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(208, 1));
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    $i26 := $load.i64($M.0, $p25);
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    $i27 := $or.i64($i26, 8192);
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(208, 1));
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p28, $i27);
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(216, 1));
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p29, 1672187);
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(216, 1));
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    $i31 := $load.i64($M.0, $p30);
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    $i32 := $and.i64($i31, $sub.i64(0, 19));
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(216, 1));
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p33, $i32);
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(208, 1));
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.0, $p34);
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(216, 1));
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    $i37 := $load.i64($M.0, $p36);
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    $i38 := $or.i64($i35, $i37);
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(208, 1));
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p39, $i38);
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    return;
}



const team_validate: ref;

axiom team_validate == $sub.ref(0, 300037);

procedure team_validate($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation team_validate($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i1;
  var $i15: i8;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p0, $mul.ref(1, 8));
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p0, $mul.ref(1, 8));
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} $i8 := nla_len($p7);
    call {:si_unique_call 472} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 6);
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p0, $mul.ref(1, 8));
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 473} $p13 := nla_data($p12);
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 474} $i14 := is_valid_ether_addr($p13);
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i8($i14);
    call {:si_unique_call 475} {:cexpr "tmp___1"} boogie_si_record_i8($i15);
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i8.i1($i15);
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i18 == 1;
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 99);
    goto $bb5;

  $bb7:
    assume $i16 == 1;
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb9;

  $bb3:
    assume $i9 == 1;
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 22);
    goto $bb5;
}



const team_newlink: ref;

axiom team_newlink == $sub.ref(0, 301069);

procedure team_newlink($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.12;



implementation team_newlink($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p2, $mul.ref(1, 8));
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 477} $i8 := register_netdevice($p1);
    call {:si_unique_call 478} {:cexpr "err"} boogie_si_record_i32($i8);
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    $i10 := $i8;
    goto $bb6;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 476} eth_hw_addr_random($p1);
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const team_get_num_tx_queues: ref;

axiom team_get_num_tx_queues == $sub.ref(0, 302101);

procedure team_get_num_tx_queues() returns ($r: i32);
  free requires assertsPassed;



implementation team_get_num_tx_queues() returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    $r := 16;
    return;
}



const team_get_num_rx_queues: ref;

axiom team_get_num_rx_queues == $sub.ref(0, 303133);

procedure team_get_num_rx_queues() returns ($r: i32);
  free requires assertsPassed;



implementation team_get_num_rx_queues() returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    $r := 16;
    return;
}



const eth_hw_addr_random: ref;

axiom eth_hw_addr_random == $sub.ref(0, 304165);

procedure eth_hw_addr_random($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.12;



implementation eth_hw_addr_random($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(580, 1));
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1, 1);
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(840, 1));
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 479} eth_random_addr($p3);
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    return;
}



const register_netdevice: ref;

axiom register_netdevice == $sub.ref(0, 305197);

procedure register_netdevice($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation register_netdevice($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 1} true;
    call {:si_unique_call 480} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 481} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const eth_random_addr: ref;

axiom eth_random_addr == $sub.ref(0, 306229);

procedure eth_random_addr($p0: ref);
  free requires assertsPassed;
  modifies $M.12;



implementation eth_random_addr($p0: ref)
{
  var $i1: i8;
  var $i2: i32;
  var $i3: i32;
  var $i4: i8;
  var $i5: i8;
  var $i6: i32;
  var $i7: i32;
  var $i8: i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} get_random_bytes($p0, 6);
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    $i1 := $load.i8($M.12, $p0);
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    $i2 := $zext.i8.i32($i1);
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 254);
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i32.i8($i3);
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    $M.12 := $store.i8($M.12, $p0, $i4);
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.12, $p0);
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    $i7 := $or.i32($i6, 2);
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i8($i7);
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    $M.12 := $store.i8($M.12, $p0, $i8);
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    return;
}



const get_random_bytes: ref;

axiom get_random_bytes == $sub.ref(0, 307261);

procedure get_random_bytes($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation get_random_bytes($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} {:cexpr "get_random_bytes:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    return;
}



const nla_len: ref;

axiom nla_len == $sub.ref(0, 308293);

procedure nla_len($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation nla_len($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i16;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    $i2 := $load.i16($M.0, $p1);
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i2);
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, $sub.i32(0, 4));
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const nla_data: ref;

axiom nla_data == $sub.ref(0, 309325);

procedure nla_data($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation nla_data($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref(4, 1));
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const is_valid_ether_addr: ref;

axiom is_valid_ether_addr == $sub.ref(0, 310357);

procedure is_valid_ether_addr($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation is_valid_ether_addr($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i7: i8;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} $i1 := is_multicast_ether_addr($p0);
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 485} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 486} $i6 := is_zero_ether_addr($p0);
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i6);
    call {:si_unique_call 487} {:cexpr "tmp___1"} boogie_si_record_i8($i7);
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i7);
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    $i12 := $i11;
    goto $bb12;

  $bb9:
    assume $i10 == 1;
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    $i11 := 1;
    goto $bb11;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;
}



const is_multicast_ether_addr: ref;

axiom is_multicast_ether_addr == $sub.ref(0, 311389);

procedure is_multicast_ether_addr($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation is_multicast_ether_addr($p0: ref) returns ($r: i1)
{
  var $i1: i8;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    $i1 := $load.i8($M.0, $p0);
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    $i2 := $zext.i8.i32($i1);
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 1);
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const is_zero_ether_addr: ref;

axiom is_zero_ether_addr == $sub.ref(0, 312421);

procedure is_zero_ether_addr($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation is_zero_ether_addr($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $p4: ref;
  var $i5: i16;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref(4, 2));
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.0, $p4);
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    $i7 := $or.i32($i2, $i6);
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const ether_setup: ref;

axiom ether_setup == $sub.ref(0, 313453);

procedure ether_setup($p0: ref);
  free requires assertsPassed;



implementation ether_setup($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    return;
}



const team_destructor: ref;

axiom team_destructor == $sub.ref(0, 314485);

procedure team_destructor($p0: ref);
  free requires assertsPassed;



implementation team_destructor($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} $p1 := netdev_priv($p0);
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 984)), $mul.ref(8, 1));
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} free_percpu($p5);
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 490} free_netdev($p0);
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    return;
}



const netdev_priv: ref;

axiom netdev_priv == $sub.ref(0, 315517);

procedure netdev_priv($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation netdev_priv($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref(3264, 1));
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const free_percpu: ref;

axiom free_percpu == $sub.ref(0, 316549);

procedure free_percpu($p0: ref);
  free requires assertsPassed;



implementation free_percpu($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    return;
}



const free_netdev: ref;

axiom free_netdev == $sub.ref(0, 317581);

procedure free_netdev($p0: ref);
  free requires assertsPassed;



implementation free_netdev($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    return;
}



const team_device_event: ref;

axiom team_device_event == $sub.ref(0, 318613);

procedure team_device_event($p0: ref, $i1: i64, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $CurrAddr, $M.16, $M.25, $M.26, $M.4, $M.3, $M.31, $M.32, $M.23, $M.24;



implementation team_device_event($p0: ref, $i1: i64, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i8;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $i28: i1;
  var $i29: i8;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $i33: i1;
  var $i34: i8;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i8;
  var $i47: i1;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i8: i32;
  var vslice_dummy_var_52: i32;
  var vslice_dummy_var_53: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} {:cexpr "team_device_event:arg:event"} boogie_si_record_i64($i1);
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} $p4 := netdev_notifier_info_to_dev($p3);
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} $p5 := team_port_get_rtnl($p4);
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i9 := $slt.i64($i1, 11);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $slt.i64($i1, 22);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := $slt.i64($i1, 23);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i1, 23);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb12:
    assume $i12 == 1;
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p5, $mul.ref(0, 160)), $mul.ref(40, 1));
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 984)), $mul.ref(464, 1));
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.0, $p45);
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i8.i1($i46);
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i47 == 1);
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    $i8 := 32770;
    goto $bb3;

  $bb42:
    assume $i47 == 1;
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb10:
    assume $i11 == 1;
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p5, $mul.ref(0, 160)), $mul.ref(40, 1));
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p49, $mul.ref(0, 984)), $mul.ref(0, 1));
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} vslice_dummy_var_52 := call_netdevice_notifiers($i1, $p51);
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb8:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    $i13 := $slt.i64($i1, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i1, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb14;

  $bb17:
    assume $i14 == 1;
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    $i8 := 32770;
    goto $bb3;

  $bb15:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i1, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb14;

  $bb19:
    assume $i15 == 1;
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p5, $mul.ref(0, 160)), $mul.ref(40, 1));
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 495} team_compute_features($p42);
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb6:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i64($i1, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := $slt.i64($i1, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i1, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb14;

  $bb25:
    assume $i18 == 1;
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p5, $mul.ref(0, 160)), $mul.ref(40, 1));
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 984)), $mul.ref(0, 1));
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} vslice_dummy_var_53 := team_del_slave($p39, $p4);
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb23:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    $i19 := $eq.i64($i1, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb14;

  $bb27:
    assume $i19 == 1;
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p5, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} $i28 := netif_running($p27);
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    $i29 := $zext.i1.i8($i28);
    call {:si_unique_call 498} {:cexpr "tmp___2"} boogie_si_record_i8($i29);
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i8.i1($i29);
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb39:
    assume $i30 == 1;
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p5, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} $i33 := netif_carrier_ok($p32);
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    $i34 := $zext.i1.i8($i33);
    call {:si_unique_call 504} {:cexpr "tmp___1"} boogie_si_record_i8($i34);
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i8.i1($i34);
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 505} team_port_change_check($p5, $i35);
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb21:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i20 := $slt.i64($i1, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i21 := $eq.i64($i1, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb14;

  $bb31:
    assume $i21 == 1;
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} team_port_change_check($p5, 0);
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb29:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $i22 := $eq.i64($i1, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb14;

  $bb33:
    assume $i22 == 1;
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} $i23 := netif_carrier_ok($p4);
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i8($i23);
    call {:si_unique_call 501} {:cexpr "tmp___0"} boogie_si_record_i8($i24);
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i8.i1($i24);
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb35:
    assume $i25 == 1;
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} team_port_change_check($p5, 1);
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;
}



const netdev_notifier_info_to_dev: ref;

axiom netdev_notifier_info_to_dev == $sub.ref(0, 319645);

procedure netdev_notifier_info_to_dev($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation netdev_notifier_info_to_dev($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const team_port_get_rtnl: ref;

axiom team_port_get_rtnl == $sub.ref(0, 320677);

procedure team_port_get_rtnl($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation team_port_get_rtnl($p0: ref) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} $i1 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 507} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(872, 1));
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(524, 1));
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 262144);
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i12 == 1);
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    $p13 := $0.ref;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    $r := $p13;
    return;

  $bb10:
    assume $i12 == 1;
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    $p13 := $p7;
    goto $bb12;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1(1);
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} $i4 := lockdep_rtnl_is_held();
    call {:si_unique_call 509} {:cexpr "tmp___0"} boogie_si_record_i32($i4);
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i5 == 1;
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 510} lockdep_rcu_suspicious(.str.2, 90, .str.34);
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb3;
}



const netif_carrier_ok: ref;

axiom netif_carrier_ok == $sub.ref(0, 321709);

procedure netif_carrier_ok($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation netif_carrier_ok($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(72, 1));
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} $i2 := constant_test_bit(2, $p1);
    call {:si_unique_call 512} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const team_port_change_check: ref;

axiom team_port_change_check == $sub.ref(0, 322741);

procedure team_port_change_check($p0: ref, $i1: i1);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.4, $M.3, $M.16, $M.25, $M.26, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.31, $M.32, $M.23, $M.24;



implementation team_port_change_check($p0: ref, $i1: i1)
{
  var $i2: i8;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i1;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 513} {:cexpr "team_port_change_check:arg:linkup"} boogie_si_record_i1($i1);
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(40, 1));
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 984)), $mul.ref(16, 1));
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} mutex_lock_nested($p5, 0);
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i2);
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} __team_port_change_check($p0, $i6);
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 984)), $mul.ref(16, 1));
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} mutex_unlock($p7);
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    return;
}



const team_del_slave: ref;

axiom team_del_slave == $sub.ref(0, 323773);

procedure team_del_slave($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $CurrAddr, $M.16, $M.25, $M.26, $M.31, $M.32, $M.4, $M.3, $M.23, $M.24;



implementation team_del_slave($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} $p2 := netdev_priv($p0);
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 984)), $mul.ref(16, 1));
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} mutex_lock_nested($p4, 0);
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} $i5 := team_port_del($p3, $p1);
    call {:si_unique_call 520} {:cexpr "err"} boogie_si_record_i32($i5);
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 984)), $mul.ref(16, 1));
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 521} mutex_unlock($p6);
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const team_compute_features: ref;

axiom team_compute_features == $sub.ref(0, 324805);

procedure team_compute_features($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation team_compute_features($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(16, 1));
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 522} mutex_lock_nested($p1, 0);
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 523} __team_compute_features($p0);
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(16, 1));
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} mutex_unlock($p2);
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    return;
}



const call_netdevice_notifiers: ref;

axiom call_netdevice_notifiers == $sub.ref(0, 325837);

procedure call_netdevice_notifiers($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation call_netdevice_notifiers($i0: i64, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 525} {:cexpr "call_netdevice_notifiers:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 1} true;
    call {:si_unique_call 526} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 527} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const mutex_lock_nested: ref;

axiom mutex_lock_nested == $sub.ref(0, 326869);

procedure mutex_lock_nested($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation mutex_lock_nested($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} {:cexpr "mutex_lock_nested:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    return;
}



const __team_compute_features: ref;

axiom __team_compute_features == $sub.ref(0, 327901);

procedure __team_compute_features($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation __team_compute_features($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $i18: i64;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i16;
  var $i34: i32;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i16;
  var $i41: i16;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $i49: i1;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $i17: i16;
  var $i50: i16;
  var $i51: i32;
  var $i52: i32;
  var $i11: i16;
  var $i12: i32;
  var $i13: i32;
  var $i53: i64;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i32;
  var $i64: i32;
  var $i65: i32;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(320, 1)), $mul.ref(0, 1));
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(320, 1));
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i7, $i9);
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    $i11, $i12, $i13 := 14, 0, 1024;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i53 := $zext.i32.i64($i12);
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(0, 1));
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p55, $mul.ref(0, 3176)), $mul.ref(232, 1));
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p56, $i53);
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(0, 1));
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p58, $mul.ref(0, 3176)), $mul.ref(542, 1));
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p59, $i11);
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(0, 1));
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p61, $mul.ref(0, 3176)), $mul.ref(524, 1));
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.0, $p62);
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    $i64 := $and.i32($i63, $sub.i32(0, 1025));
    call {:si_unique_call 534} {:cexpr "flags"} boogie_si_record_i32($i64);
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    $i65 := $or.i32($i64, $i13);
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(0, 1));
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p67, $mul.ref(0, 3176)), $mul.ref(524, 1));
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p68, $i65);
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(0, 1));
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.0, $p69);
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} netdev_change_features($p70);
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    $i14, $p15, $i16, $i17 := 1024, $p5, 0, 14;
    goto $bb4;

  $bb4:
    call $i18, $p19, $p20, $p21, $i22, $i23, $i24, $p25, $p26, $p27, $i28, $i29, $p30, $p31, $p32, $i33, $i34, $i35, $i36, $p37, $p38, $p39, $i40, $i41, $p43, $p44, $p45, $p46, $p47, $i48, $i49, $i14, $p15, $i16, $i17, $i50, $i51, $i52 := __team_compute_features_loop_$bb4($i9, $i18, $p19, $p20, $p21, $i22, $i23, $i24, $p25, $p26, $p27, $i28, $i29, $p30, $p31, $p32, $i33, $i34, $i35, $i36, $p37, $p38, $p39, $i40, $i41, $p43, $p44, $p45, $p46, $p47, $i48, $i49, $i14, $p15, $i16, $i17, $i50, $i51, $i52);
    goto $bb4_last;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i18 := $zext.i32.i64($i16);
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p15, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 3176)), $mul.ref(232, 1));
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    $i22 := $load.i64($M.0, $p21);
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 529} $i23 := netdev_increment_features($i18, $i22, 1671291);
    call {:si_unique_call 530} {:cexpr "tmp"} boogie_si_record_i64($i23);
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i64.i32($i23);
    call {:si_unique_call 531} {:cexpr "vlan_features"} boogie_si_record_i32($i24);
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p15, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 3176)), $mul.ref(524, 1));
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i28, $i14);
    call {:si_unique_call 532} {:cexpr "dst_release_flag"} boogie_si_record_i32($i29);
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p15, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 3176)), $mul.ref(542, 1));
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    $i33 := $load.i16($M.0, $p32);
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    $i34 := $zext.i16.i32($i33);
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $i35 := $zext.i16.i32($i17);
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    $i36 := $sgt.i32($i34, $i35);
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    $i41 := $i17;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p15, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($p45, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p45, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    $i48 := $p2i.ref.i64($p47);
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    $i49 := $ne.i64($i48, $i9);
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    $i50, $i51, $i52 := $i41, $i24, $i29;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    $i11, $i12, $i13 := $i50, $i51, $i52;
    goto $bb3;

  $bb9:
    assume $i49 == 1;
    assume {:verifier.code 0} true;
    $i14, $p15, $i16, $i17 := $i29, $p46, $i24, $i41;
    goto $bb9_dummy;

  $bb6:
    assume $i36 == 1;
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p15, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 3176)), $mul.ref(542, 1));
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    $i40 := $load.i16($M.0, $p39);
    call {:si_unique_call 533} {:cexpr "max_hard_header_len"} boogie_si_record_i16($i40);
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    $i41 := $i40;
    goto $bb8;

  $bb9_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2804;
}



const mutex_unlock: ref;

axiom mutex_unlock == $sub.ref(0, 328933);

procedure mutex_unlock($p0: ref);
  free requires assertsPassed;



implementation mutex_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    return;
}



const netdev_increment_features: ref;

axiom netdev_increment_features == $sub.ref(0, 329965);

procedure netdev_increment_features($i0: i64, $i1: i64, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation netdev_increment_features($i0: i64, $i1: i64, $i2: i64) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 536} {:cexpr "netdev_increment_features:arg:arg0"} boogie_si_record_i64($i0);
    call {:si_unique_call 537} {:cexpr "netdev_increment_features:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 538} {:cexpr "netdev_increment_features:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 1} true;
    call {:si_unique_call 539} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 540} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const netdev_change_features: ref;

axiom netdev_change_features == $sub.ref(0, 330997);

procedure netdev_change_features($p0: ref);
  free requires assertsPassed;



implementation netdev_change_features($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    return;
}



const team_port_del: ref;

axiom team_port_del == $sub.ref(0, 332029);

procedure team_port_del($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $CurrAddr, $M.16, $M.25, $M.26, $M.31, $M.32, $M.4, $M.3, $M.23, $M.24;



implementation team_port_del($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i11: i1;
  var $i12: i8;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $p17: ref;
  var $p21: ref;
  var $i22: i32;
  var $p24: ref;
  var $i10: i32;
  var vslice_dummy_var_54: i32;
  var vslice_dummy_var_55: i32;
  var vslice_dummy_var_56: i32;
  var vslice_dummy_var_57: i32;
  var vslice_dummy_var_58: i32;
  var vslice_dummy_var_59: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(0, 1));
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 3176)), $mul.ref(0, 1));
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} $p6 := team_port_get_rtnl($p1);
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 543} $i11 := team_port_find($p0, $p6);
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i8($i11);
    call {:si_unique_call 544} {:cexpr "tmp"} boogie_si_record_i8($i12);
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i8.i1($i12);
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 546} team_port_disable($p0, $p6);
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p6, $mul.ref(0, 160)), $mul.ref(24, 1));
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 547} list_del_rcu($p17);
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} netdev_rx_handler_unregister($p1);
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 549} netdev_upper_dev_unlink($p1, $p3);
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} team_port_disable_netpoll($p6);
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 551} vlan_vids_del_by_dev($p1, $p3);
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} dev_uc_unsync($p1, $p3);
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} dev_mc_unsync($p1, $p3);
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} vslice_dummy_var_56 := dev_close($p1);
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 555} team_port_leave($p0, $p6);
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} __team_option_inst_mark_removed_port($p0, $p6);
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 557} __team_options_change_check($p0);
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} __team_option_inst_del_port($p0, $p6);
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 559} __team_port_change_port_removed($p6);
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} vslice_dummy_var_57 := team_port_set_orig_dev_addr($p6);
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 160)), $mul.ref(72, 1)), $mul.ref(32, 1));
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 561} vslice_dummy_var_58 := dev_set_mtu($p1, $i22);
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p6, $mul.ref(0, 160)), $mul.ref(144, 1));
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} kfree_call_rcu($p24, $i2p.i64.ref(144));
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} vslice_dummy_var_59 := netdev_info.ref.ref.ref($p3, .str.33, $p5);
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 564} __team_compute_features($p0);
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb7:
    assume $i15 == 1;
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 545} vslice_dummy_var_55 := netdev_err.ref.ref.ref($p3, .str.32, $p5);
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 2);
    goto $bb3;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} vslice_dummy_var_54 := netdev_err.ref.ref.ref($p3, .str.32, $p5);
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 2);
    goto $bb3;
}



const team_port_find: ref;

axiom team_port_find == $sub.ref(0, 333061);

procedure team_port_find($p0: ref, $p1: ref) returns ($r: i1);
  free requires assertsPassed;



implementation team_port_find($p0: ref, $p1: ref) returns ($r: i1)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p12: ref;
  var $i16: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(320, 1)), $mul.ref(0, 1));
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p5, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(320, 1));
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i8, $i10);
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    $p12 := $p6;
    goto $bb4;

  $bb4:
    call $i13, $i14, $i15, $p18, $p19, $p20, $p21, $p22, $i23, $i24, $p12 := team_port_find_loop_$bb4($p1, $i10, $i13, $i14, $i15, $p18, $p19, $p20, $p21, $p22, $i23, $i24, $p12);
    goto $bb4_last;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p1);
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i13, $i14);
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p20, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p20, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, $i10);
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i24 == 1);
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    $p12 := $p21;
    goto $bb10_dummy;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    $i16 := 1;
    goto $bb8;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2937;
}



const netdev_rx_handler_unregister: ref;

axiom netdev_rx_handler_unregister == $sub.ref(0, 334093);

procedure netdev_rx_handler_unregister($p0: ref);
  free requires assertsPassed;



implementation netdev_rx_handler_unregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    return;
}



const netdev_upper_dev_unlink: ref;

axiom netdev_upper_dev_unlink == $sub.ref(0, 335125);

procedure netdev_upper_dev_unlink($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation netdev_upper_dev_unlink($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    return;
}



const team_port_disable_netpoll: ref;

axiom team_port_disable_netpoll == $sub.ref(0, 336157);

procedure team_port_disable_netpoll($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation team_port_disable_netpoll($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(112, 1));
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(112, 1));
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p5, $0.ref);
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} synchronize_rcu_bh();
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 566} __netpoll_cleanup($p2);
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p2);
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 567} kfree($p6);
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vlan_vids_del_by_dev: ref;

axiom vlan_vids_del_by_dev == $sub.ref(0, 337189);

procedure vlan_vids_del_by_dev($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation vlan_vids_del_by_dev($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    return;
}



const dev_uc_unsync: ref;

axiom dev_uc_unsync == $sub.ref(0, 338221);

procedure dev_uc_unsync($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation dev_uc_unsync($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    return;
}



const dev_mc_unsync: ref;

axiom dev_mc_unsync == $sub.ref(0, 339253);

procedure dev_mc_unsync($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation dev_mc_unsync($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    return;
}



const dev_close: ref;

axiom dev_close == $sub.ref(0, 340285);

procedure dev_close($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_close($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 1} true;
    call {:si_unique_call 568} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 569} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const team_port_leave: ref;

axiom team_port_leave == $sub.ref(0, 341317);

procedure team_port_leave($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation team_port_leave($p0: ref, $p1: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(376, 1)), $mul.ref(40, 1));
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 3176)), $mul.ref(524, 1));
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, $sub.i32(0, 262145));
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 3176)), $mul.ref(524, 1));
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, $i14);
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(0, 1));
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 571} dev_put($p19);
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(376, 1)), $mul.ref(40, 1));
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    call {:si_unique_call 570} devirtbounce.4($p9, $p0, $p1);
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __team_option_inst_mark_removed_port: ref;

axiom __team_option_inst_mark_removed_port == $sub.ref(0, 342349);

procedure __team_option_inst_mark_removed_port($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation __team_option_inst_mark_removed_port($p0: ref, $p1: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(352, 1)), $mul.ref(0, 1));
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(352, 1));
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i7, $i9);
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    $p11 := $p4;
    goto $bb4;

  $bb4:
    call $p13, $p14, $i15, $i16, $i17, $p18, $p19, $p21, $p22, $p23, $p24, $i25, $i26, $p11 := __team_option_inst_mark_removed_port_loop_$bb4($p1, $i9, $p13, $p14, $i15, $i16, $i17, $p18, $p19, $p21, $p22, $p23, $p24, $i25, $i26, $p11);
    goto $bb4_last;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 64)), $mul.ref(40, 1)), $mul.ref(8, 1));
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p1);
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i15, $i16);
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, $i9);
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i26 == 1);
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb9:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    $p11 := $p22;
    goto $bb9_dummy;

  $bb6:
    assume $i17 == 1;
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p11, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p18, 1);
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p11, $mul.ref(0, 64)), $mul.ref(57, 1));
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p19, 1);
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb9_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3020;
}



const __team_option_inst_del_port: ref;

axiom __team_option_inst_del_port == $sub.ref(0, 343381);

procedure __team_option_inst_del_port($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation __team_option_inst_del_port($p0: ref, $p1: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i8;
  var $i21: i1;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i64;
  var $i27: i1;
  var $p29: ref;
  var $p30: ref;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;
  var $p15: ref;
  var $p16: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(352, 1)), $mul.ref(0, 1));
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(352, 1));
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i11, $i13);
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    $p15, $p16 := $p8, $p4;
    goto $bb4;

  $bb4:
    call $p17, $p18, $p19, $i20, $i21, $p23, $p24, $i25, $i26, $i27, $p29, $p30, $p32, $i33, $i34, $p15, $p16 := __team_option_inst_del_port_loop_$bb4($p1, $i13, $p17, $p18, $p19, $i20, $i21, $p23, $p24, $i25, $i26, $i27, $p29, $p30, $p32, $i33, $i34, $p15, $p16);
    goto $bb4_last;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.0, $p19);
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i8.i1($i20);
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p15, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p15, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p32);
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, $i13);
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i34 == 1);
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb12:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    $p15, $p16 := $p30, $p15;
    goto $bb12_dummy;

  $bb6:
    assume $i21 == 1;
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p16, $mul.ref(0, 64)), $mul.ref(40, 1)), $mul.ref(8, 1));
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p1);
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    $i27 := $eq.i64($i25, $i26);
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb8;

  $bb9:
    assume $i27 == 1;
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 572} __team_option_inst_del($p16);
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb12_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3058;
}



const __team_port_change_port_removed: ref;

axiom __team_port_change_port_removed == $sub.ref(0, 344413);

procedure __team_port_change_port_removed($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.4, $M.3, $M.16, $M.25, $M.26, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.31, $M.32, $M.23, $M.24;



implementation __team_port_change_port_removed($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(71, 1));
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1, 1);
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} __team_port_change_send($p0, 0);
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(40, 1));
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} __team_carrier_check($p3);
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    return;
}



const team_port_set_orig_dev_addr: ref;

axiom team_port_set_orig_dev_addr == $sub.ref(0, 345445);

procedure team_port_set_orig_dev_addr($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation team_port_set_orig_dev_addr($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(72, 1)), $mul.ref(0, 1));
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} $i6 := __set_port_dev_addr($p2, $p5);
    call {:si_unique_call 576} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const dev_set_mtu: ref;

axiom dev_set_mtu == $sub.ref(0, 346477);

procedure dev_set_mtu($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dev_set_mtu($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 577} {:cexpr "dev_set_mtu:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 1} true;
    call {:si_unique_call 578} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 579} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const kfree_call_rcu: ref;

axiom kfree_call_rcu == $sub.ref(0, 347509);

procedure kfree_call_rcu($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation kfree_call_rcu($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    return;
}



const __team_port_change_send: ref;

axiom __team_port_change_send == $sub.ref(0, 348541);

procedure __team_port_change_send($p0: ref, $i1: i1);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.4, $M.3, $M.16, $M.25, $M.26, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.31, $M.32, $M.23, $M.24;



implementation __team_port_change_send($p0: ref, $i1: i1)
{
  var $p2: ref;
  var $i3: i8;
  var $p4: ref;
  var $i5: i1;
  var $p7: ref;
  var $i8: i8;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $p16: ref;
  var $p17: ref;
  var $i18: i8;
  var $p20: ref;
  var $p22: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var vslice_dummy_var_60: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 580} $p2 := $alloc($mul.ref(44, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i1);
    call {:si_unique_call 581} {:cexpr "__team_port_change_send:arg:linkup"} boogie_si_record_i1($i1);
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(70, 1));
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p4, 1);
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i3);
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i8($i5);
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p7, $i8);
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 582} team_refresh_port_linkup($p0);
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i3);
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(56, 1)), $mul.ref(4, 1));
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p22, 0);
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(56, 1)), $mul.ref(8, 1));
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p24, 0);
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(40, 1));
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 586} $i27 := team_nl_send_event_port_get($p26, $p0);
    call {:si_unique_call 587} {:cexpr "err"} boogie_si_record_i32($i27);
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i28 == 1;
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i27, $sub.i32(0, 3));
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb10;

  $bb11:
    assume $i29 == 1;
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(40, 1));
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 984)), $mul.ref(0, 1));
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 3176)), $mul.ref(0, 1));
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 588} vslice_dummy_var_60 := netdev_warn.ref.ref.ref.i32($p33, .str.31, $p37, $i27);
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} $i12 := __ethtool_get_settings($p11, $p2);
    call {:si_unique_call 584} {:cexpr "err"} boogie_si_record_i32($i12);
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb3:
    assume $i13 == 1;
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 585} $i14 := ethtool_cmd_speed($p2);
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(56, 1)), $mul.ref(4, 1));
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, $i14);
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(14, 1));
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.13, $p17);
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(56, 1)), $mul.ref(8, 1));
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p20, $i18);
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const __ethtool_get_settings: ref;

axiom __ethtool_get_settings == $sub.ref(0, 349573);

procedure __ethtool_get_settings($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __ethtool_get_settings($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 1} true;
    call {:si_unique_call 589} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 590} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ethtool_cmd_speed: ref;

axiom ethtool_cmd_speed == $sub.ref(0, 350605);

procedure ethtool_cmd_speed($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ethtool_cmd_speed($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i16;
  var $i3: i32;
  var $i4: i32;
  var $p5: ref;
  var $i6: i16;
  var $i7: i32;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 44)), $mul.ref(28, 1));
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    $i2 := $load.i16($M.14, $p1);
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i2);
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    $i4 := $shl.i32($i3, 16);
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 44)), $mul.ref(12, 1));
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    $i6 := $load.i16($M.15, $p5);
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i6);
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $i8 := $or.i32($i4, $i7);
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const team_nl_send_event_port_get: ref;

axiom team_nl_send_event_port_get == $sub.ref(0, 351637);

procedure team_nl_send_event_port_get($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.4, $M.3, $M.16, $M.25, $M.26, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.31, $M.32, $M.23, $M.24;



implementation team_nl_send_event_port_get($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} $i2 := team_nl_send_port_list_get($p0, 0, 0, 0, team_nl_send_multicast, $p1);
    call {:si_unique_call 592} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const team_nl_send_port_list_get: ref;

axiom team_nl_send_port_list_get == $sub.ref(0, 352669);

procedure team_nl_send_port_list_get($p0: ref, $i1: i32, $i2: i32, $i3: i32, $p4: ref, $p5: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.4, $M.3, $M.16, $M.25, $M.26, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.31, $M.32, $M.23, $M.24;



implementation team_nl_send_port_list_get($p0: ref, $i1: i32, $i2: i32, $i3: i32, $p4: ref, $p5: ref) returns ($r: i32)
{
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i18: i32;
  var $p19: ref;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i1;
  var $p43: ref;
  var $i44: i64;
  var $i45: i1;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $i50: i32;
  var $i55: i64;
  var $i56: i1;
  var $p57: ref;
  var $i58: i64;
  var $p59: ref;
  var $i60: i64;
  var $i61: i1;
  var $p65: ref;
  var $i66: i32;
  var $i67: i1;
  var $p68: ref;
  var $i69: i32;
  var $i70: i32;
  var $i71: i1;
  var $i74: i1;
  var $p75: ref;
  var $i76: i32;
  var $p72: ref;
  var $i73: i32;
  var $i79: i32;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $i86: i64;
  var $i87: i1;
  var $i63: i32;
  var $p64: ref;
  var $p88: ref;
  var $p62: ref;
  var $p77: ref;
  var $i78: i8;
  var $p89: ref;
  var $i90: i8;
  var $p53: ref;
  var $i54: i8;
  var $p91: ref;
  var $p93: ref;
  var $i95: i1;
  var $p96: ref;
  var $p97: ref;
  var $i98: i32;
  var $p99: ref;
  var $i100: i64;
  var $i101: i1;
  var $i102: i32;
  var $i103: i1;
  var $i104: i32;
  var $p105: ref;
  var $p106: ref;
  var $i107: i64;
  var $i108: i1;
  var $p109: ref;
  var $i110: i32;
  var $p38: ref;
  var $p51: ref;
  var $i52: i32;
  var $p111: ref;
  var $p112: ref;
  var $i24: i32;
  var vslice_dummy_var_61: i32;
  var vslice_dummy_var_62: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 593} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 594} {:cexpr "team_nl_send_port_list_get:arg:portid"} boogie_si_record_i32($i1);
    call {:si_unique_call 595} {:cexpr "team_nl_send_port_list_get:arg:seq"} boogie_si_record_i32($i2);
    call {:si_unique_call 596} {:cexpr "team_nl_send_port_list_get:arg:flags"} boogie_si_record_i32($i3);
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, $0.ref);
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(320, 1));
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 597} $i8 := list_empty($p7);
    call {:si_unique_call 598} {:cexpr "tmp___0"} boogie_si_record_i32($i8);
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $p15 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 599} $i16 := __send_and_alloc_skb($p6, $p0, $i1, $p4);
    call {:si_unique_call 600} {:cexpr "err"} boogie_si_record_i32($i16);
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    $i18 := $i16;
    assume true;
    goto $bb4, $bb6;

  $bb6:
    assume !($i17 == 1);
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    $p19 := $p15;
    goto $bb7;

  $bb7:
    call $p20, $i21, $i22, $i23, $p19, $p25, $i26, $p27, $i28, $i29, $p30, $p31, $p32, $p33, $i34, $i35, $i36, $p37, $p39, $p40, $i41, $i42, $p43, $i44, $i45, $p46, $i47, $i48, $p49, $i50, $i55, $i56, $p57, $i58, $p59, $i60, $i61, $p65, $i66, $i67, $p68, $i69, $i70, $i71, $i74, $p75, $i76, $p72, $i73, $i79, $p81, $p82, $p83, $p84, $p85, $i86, $i87, $i63, $p64, $p88, $p62, $p77, $i78, $p89, $i90, $p53, $i54, $p91, $p93, $i95, $p96, vslice_dummy_var_61, vslice_dummy_var_62 := team_nl_send_port_list_get_loop_$bb7($p0, $i1, $i2, $i3, $p4, $p5, $p6, $p20, $i21, $i22, $i23, $p19, $p25, $i26, $p27, $i28, $i29, $p30, $p31, $p32, $p33, $i34, $i35, $i36, $p37, $p39, $p40, $i41, $i42, $p43, $i44, $i45, $p46, $i47, $i48, $p49, $i50, $i55, $i56, $p57, $i58, $p59, $i60, $i61, $p65, $i66, $i67, $p68, $i69, $i70, $i71, $i74, $p75, $i76, $p72, $i73, $i79, $p81, $p82, $p83, $p84, $p85, $i86, $i87, $i63, $p64, $p88, $p62, $p77, $i78, $p89, $i90, $p53, $i54, $p91, $p93, $i95, $p96, vslice_dummy_var_61, vslice_dummy_var_62);
    goto $bb7_last;

  $bb12:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p6);
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    $i26 := $or.i32($i3, 2);
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} $p27 := genlmsg_put($p25, $i1, $i2, team_nl_family, $i26, 3);
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    $i29 := $eq.i64($i28, 0);
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p6);
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(0, 1));
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 3176)), $mul.ref(256, 1));
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 604} $i35 := nla_put_u32($p30, 1, $i34);
    call {:si_unique_call 605} {:cexpr "tmp___1"} boogie_si_record_i32($i35);
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    $p37 := $p27;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p6);
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 606} $p40 := nla_nest_start($p39, 3);
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p40);
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    $i42 := $eq.i64($i41, 0);
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    $p43 := $p27;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p5);
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    $i45 := $ne.i64($i44, 0);
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i45 == 1);
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    $i55 := $p2i.ref.i64($p19);
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    $i56 := $ne.i64($i55, 0);
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    $p89, $i90 := $p19, 0;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p53, $i54 := $p89, $i90;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.0, $p6);
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 611} vslice_dummy_var_61 := nla_nest_end($p91, $p40);
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.0, $p6);
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} vslice_dummy_var_62 := genlmsg_end($p93, $p27);
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    $i95 := $trunc.i8.i1($i54);
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    $p20, $p96 := $p53, $p27;
    assume true;
    goto $bb8, $bb51;

  $bb51:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p97 := $load.ref($M.0, $p6);
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    $i98 := $or.i32($i3, 2);
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} $p99 := nlmsg_put($p97, $i1, $i2, 3, 0, $i98);
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    $i100 := $p2i.ref.i64($p99);
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    $i101 := $eq.i64($i100, 0);
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    assume !($i101 == 1);
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $p109 := $load.ref($M.0, $p6);
    call {:si_unique_call 620} $i110 := devirtbounce($p4, $p109, $p0, $i1);
    call {:si_unique_call 621} {:cexpr "tmp___2"} boogie_si_record_i32($i110);
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    $i24 := $i110;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    $r := $i24;
    return;

  $bb53:
    assume $i101 == 1;
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    call $i102, $i103, $i104, $p105, $p106, $i107, $i108 := team_nl_send_port_list_get_loop_$bb56($p0, $i1, $i2, $p4, $p6, $i98, $i102, $i103, $i104, $p105, $p106, $i107, $i108);
    goto $bb56_last;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    $i103 := $ne.i32($i102, 0);
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    $i104 := $i102;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $p105 := $load.ref($M.0, $p6);
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 619} $p106 := nlmsg_put($p105, $i1, $i2, 3, 0, $i98);
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    $i107 := $p2i.ref.i64($p106);
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    $i108 := $eq.i64($i107, 0);
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i108 == 1);
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb60:
    assume {:verifier.code 0} true;
    assume $i108 == 1;
    goto $bb60_dummy;

  $bb57:
    assume $i103 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    $p51, $i52 := $p96, $i104;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    $p111 := $load.ref($M.0, $p6);
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 609} genlmsg_cancel($p111, $p51);
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    $p112 := $load.ref($M.0, $p6);
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} nlmsg_free($p112);
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    $i24 := $i52;
    goto $bb11;

  $bb8:
    assume $i95 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 601} $i21 := __send_and_alloc_skb($p6, $p0, $i1, $p4);
    call {:si_unique_call 602} {:cexpr "err"} boogie_si_record_i32($i21);
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    $i23 := $i21;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $p19 := $p20;
    goto $bb10_dummy;

  $bb9:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    $i18 := $i23;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    $i24 := $i18;
    goto $bb11;

  $bb30:
    assume $i56 == 1;
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p19, $mul.ref(0, 160)), $mul.ref(24, 1));
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    $i58 := $p2i.ref.i64($p57);
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(320, 1));
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    $i60 := $p2i.ref.i64($p59);
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    $i61 := $ne.i64($i58, $i60);
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    $p62 := $p19;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i61 == 1);
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p77, $i78 := $p62, 0;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    $p89, $i90 := $p77, $i78;
    goto $bb50;

  $bb32:
    assume $i61 == 1;
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    $i63, $p64 := 0, $p19;
    goto $bb35;

  $bb35:
    call $p65, $i66, $i67, $p68, $i69, $i70, $i79, $p81, $p82, $p83, $p84, $p85, $i86, $i87, $i63, $p64, $p88 := team_nl_send_port_list_get_loop_$bb35($p6, $i60, $p65, $i66, $i67, $p68, $i69, $i70, $i79, $p81, $p82, $p83, $p84, $p85, $i86, $i87, $i63, $p64, $p88);
    goto $bb35_last;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $p6);
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} $i66 := team_nl_fill_one_port_get($p65, $p64);
    call {:si_unique_call 614} {:cexpr "err"} boogie_si_record_i32($i66);
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    $i67 := $ne.i32($i66, 0);
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    $p68, $i69, $i70 := $p64, $i63, $i66;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $i79 := $add.i32($i63, 1);
    call {:si_unique_call 615} {:cexpr "i"} boogie_si_record_i32($i79);
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($add.ref($p64, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.0, $p81);
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    $p83 := $bitcast.ref.ref($p82);
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($p83, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p83, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    $i86 := $p2i.ref.i64($p85);
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    $i87 := $ne.i64($i86, $i60);
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $p88 := $p84;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    $p62 := $p88;
    goto $bb34;

  $bb47:
    assume $i87 == 1;
    assume {:verifier.code 0} true;
    $i63, $p64 := $i79, $p84;
    goto $bb47_dummy;

  $bb37:
    assume $i67 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    $i71 := $eq.i32($i70, $sub.i32(0, 90));
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    $p72, $i73 := $p27, $i70;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p51, $i52 := $p72, $i73;
    goto $bb27;

  $bb39:
    assume $i71 == 1;
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    $i74 := $eq.i32($i69, 0);
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    $p75, $i76 := $p27, $i70;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p77, $i78 := $p68, 1;
    goto $bb44;

  $bb41:
    assume $i74 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    $p51, $i52 := $p75, $i76;
    goto $bb27;

  $bb23:
    assume $i45 == 1;
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p6);
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 607} $i47 := team_nl_fill_one_port_get($p46, $p5);
    call {:si_unique_call 608} {:cexpr "err"} boogie_si_record_i32($i47);
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    $p49, $i50 := $p27, $i47;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p53, $i54 := $p19, 0;
    goto $bb29;

  $bb25:
    assume $i48 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    $p51, $i52 := $p49, $i50;
    goto $bb27;

  $bb20:
    assume $i42 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    $p38 := $p43;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    $p51, $i52 := $p38, $sub.i32(0, 90);
    goto $bb27;

  $bb16:
    assume $i36 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    $p38 := $p37;
    goto $bb18;

  $bb13:
    assume $i29 == 1;
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32(0, 90);
    goto $bb11;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb5;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(320, 1)), $mul.ref(0, 1));
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p13, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    $p15 := $p14;
    goto $bb3;

  $bb60_dummy:
    assume false;
    return;

  $bb56_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} $i102 := __send_and_alloc_skb($p6, $p0, $i1, $p4);
    call {:si_unique_call 618} {:cexpr "err"} boogie_si_record_i32($i102);
    goto corral_source_split_3296;

  $bb47_dummy:
    assume false;
    return;

  $bb35_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3261;

  $bb10_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb12;
}



const team_nl_fill_one_port_get: ref;

axiom team_nl_fill_one_port_get == $sub.ref(0, 353701);

procedure team_nl_fill_one_port_get($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation team_nl_fill_one_port_get($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i8;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $i18: i8;
  var $i19: i1;
  var $i20: i32;
  var $i21: i1;
  var $p23: ref;
  var $i24: i8;
  var $i25: i1;
  var $i26: i32;
  var $i27: i1;
  var $p29: ref;
  var $i30: i32;
  var $i31: i32;
  var $i32: i1;
  var $p34: ref;
  var $i35: i8;
  var $i36: i32;
  var $i37: i8;
  var $i38: i32;
  var $i39: i1;
  var $i41: i32;
  var vslice_dummy_var_63: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 622} $p2 := nla_nest_start($p0, 1);
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 3176)), $mul.ref(256, 1));
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 624} $i9 := nla_put_u32($p0, 1, $i8);
    call {:si_unique_call 625} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(70, 1));
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i8.i1($i12);
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(71, 1));
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.0, $p17);
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i8.i1($i18);
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i19 == 1);
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.0, $p23);
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i8.i1($i24);
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i25 == 1);
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(56, 1)), $mul.ref(4, 1));
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} $i31 := nla_put_u32($p0, 4, $i30);
    call {:si_unique_call 633} {:cexpr "tmp___3"} boogie_si_record_i32($i31);
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i32 == 1);
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(56, 1)), $mul.ref(8, 1));
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.0, $p34);
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i35);
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i32.i8($i36);
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 634} $i38 := nla_put_u8($p0, 5, $i37);
    call {:si_unique_call 635} {:cexpr "tmp___4"} boogie_si_record_i32($i38);
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 636} vslice_dummy_var_63 := nla_nest_end($p0, $p2);
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $i41 := 0;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    $r := $i41;
    return;

  $bb26:
    assume $i39 == 1;
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 623} nla_nest_cancel($p0, $p2);
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    $i41 := $sub.i32(0, 90);
    goto $bb32;

  $bb24:
    assume $i32 == 1;
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb19:
    assume $i25 == 1;
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 630} $i26 := nla_put_flag($p0, 3);
    call {:si_unique_call 631} {:cexpr "tmp___2"} boogie_si_record_i32($i26);
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i27 == 1);
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb21:
    assume $i27 == 1;
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb14:
    assume $i19 == 1;
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 628} $i20 := nla_put_flag($p0, 6);
    call {:si_unique_call 629} {:cexpr "tmp___1"} boogie_si_record_i32($i20);
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i21 == 1);
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb16:
    assume $i21 == 1;
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume $i13 == 1;
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 626} $i14 := nla_put_flag($p0, 2);
    call {:si_unique_call 627} {:cexpr "tmp___0"} boogie_si_record_i32($i14);
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(70, 1));
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p16, 0);
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i15 == 1;
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const dev_put: ref;

axiom dev_put == $sub.ref(0, 354733);

procedure dev_put($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation dev_put($p0: ref)
{
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i64(4, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i64(4, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i64(4, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 649} __bad_size_call_parameter();
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($sub.i32(0, 1), 1);
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i32 == 1);
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($sub.i32(0, 1), $sub.i32(0, 1));
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i35 == 1);
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(1184, 1));
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    call {:si_unique_call 648} devirtbounce.9(0, $p39, $sub.i32(0, 1), $p39);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb42:
    assume $i35 == 1;
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(1184, 1));
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    call {:si_unique_call 647} devirtbounce.8(0, $p37, $p37);
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb39:
    assume $i32 == 1;
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(1184, 1));
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    call {:si_unique_call 646} devirtbounce.8(0, $p34, $p34);
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb4:
    assume $i2 == 1;
    assume {:verifier.code 0} true;
    $i4 := $eq.i64(4, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb8;

  $bb9:
    assume $i4 == 1;
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($sub.i32(0, 1), 1);
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i24 == 1);
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($sub.i32(0, 1), $sub.i32(0, 1));
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i27 == 1);
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(1184, 1));
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    call {:si_unique_call 645} devirtbounce.9(0, $p31, $sub.i32(0, 1), $p31);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb35:
    assume $i27 == 1;
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(1184, 1));
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    call {:si_unique_call 644} devirtbounce.8(0, $p29, $p29);
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb32:
    assume $i24 == 1;
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(1184, 1));
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    call {:si_unique_call 643} devirtbounce.8(0, $p26, $p26);
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i5 := $slt.i64(4, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $eq.i64(4, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb8;

  $bb13:
    assume $i6 == 1;
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($sub.i32(0, 1), 1);
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i16 == 1);
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($sub.i32(0, 1), $sub.i32(0, 1));
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i19 == 1);
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(1184, 1));
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    call {:si_unique_call 642} devirtbounce.9(0, $p23, $sub.i32(0, 1), $p23);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb28:
    assume $i19 == 1;
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(1184, 1));
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    call {:si_unique_call 641} devirtbounce.8(0, $p21, $p21);
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb25:
    assume $i16 == 1;
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(1184, 1));
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    call {:si_unique_call 640} devirtbounce.8(0, $p18, $p18);
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb11:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i7 := $eq.i64(4, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb8;

  $bb15:
    assume $i7 == 1;
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($sub.i32(0, 1), 1);
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i8 == 1);
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($sub.i32(0, 1), $sub.i32(0, 1));
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i11 == 1);
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(1184, 1));
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    call {:si_unique_call 639} devirtbounce.9(0, $p15, $sub.i32(0, 1), $p15);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb20:
    assume $i11 == 1;
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(1184, 1));
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    call {:si_unique_call 638} devirtbounce.8(0, $p13, $p13);
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume $i8 == 1;
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(1184, 1));
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    call {:si_unique_call 637} devirtbounce.8(0, $p10, $p10);
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    goto $bb19;
}



const __bad_size_call_parameter: ref;

axiom __bad_size_call_parameter == $sub.ref(0, 355765);

procedure __bad_size_call_parameter();



const synchronize_rcu_bh: ref;

axiom synchronize_rcu_bh == $sub.ref(0, 356797);

procedure synchronize_rcu_bh();
  free requires assertsPassed;



implementation synchronize_rcu_bh()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    return;
}



const __netpoll_cleanup: ref;

axiom __netpoll_cleanup == $sub.ref(0, 357829);

procedure __netpoll_cleanup($p0: ref);
  free requires assertsPassed;



implementation __netpoll_cleanup($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    return;
}



const __team_port_change_check: ref;

axiom __team_port_change_check == $sub.ref(0, 358861);

procedure __team_port_change_check($p0: ref, $i1: i1);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.4, $M.3, $M.16, $M.25, $M.26, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.31, $M.32, $M.23, $M.24;



implementation __team_port_change_check($p0: ref, $i1: i1)
{
  var $i2: i8;
  var $p4: ref;
  var $i5: i8;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 650} {:cexpr "__team_port_change_check:arg:linkup"} boogie_si_record_i1($i1);
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i5);
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i2);
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i7, $i9);
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(40, 1));
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} __team_carrier_check($p13);
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} __team_port_change_send($p0, $i11);
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const debug_lockdep_rcu_enabled: ref;

axiom debug_lockdep_rcu_enabled == $sub.ref(0, 359893);

procedure debug_lockdep_rcu_enabled() returns ($r: i32);
  free requires assertsPassed;



implementation debug_lockdep_rcu_enabled() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 1} true;
    call {:si_unique_call 653} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 654} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const lockdep_rtnl_is_held: ref;

axiom lockdep_rtnl_is_held == $sub.ref(0, 360925);

procedure lockdep_rtnl_is_held() returns ($r: i32);
  free requires assertsPassed;



implementation lockdep_rtnl_is_held() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 1} true;
    call {:si_unique_call 655} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 656} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const lockdep_rcu_suspicious: ref;

axiom lockdep_rcu_suspicious == $sub.ref(0, 361957);

procedure lockdep_rcu_suspicious($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;



implementation lockdep_rcu_suspicious($p0: ref, $i1: i32, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 657} {:cexpr "lockdep_rcu_suspicious:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    return;
}



const team_nl_cmd_noop: ref;

axiom team_nl_cmd_noop == $sub.ref(0, 362989);

procedure team_nl_cmd_noop($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.3, $CurrAddr;



implementation team_nl_cmd_noop($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $i5: i32;
  var vslice_dummy_var_64: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 658} $p2 := nlmsg_new(3760, 208);
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(4, 1));
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} $p10 := genlmsg_put($p2, $i7, $i9, team_nl_family, 0, 0);
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 661} vslice_dummy_var_64 := genlmsg_end($p2, $p10);
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} $p14 := genl_info_net($p1);
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(4, 1));
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 663} $i17 := genlmsg_unicast($p14, $p2, $i16);
    call {:si_unique_call 664} {:cexpr "tmp___0"} boogie_si_record_i32($i17);
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    $i5 := $i17;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 660} nlmsg_free($p2);
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 90);
    goto $bb3;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 12);
    goto $bb3;
}



const team_nl_cmd_options_set: ref;

axiom team_nl_cmd_options_set == $sub.ref(0, 364021);

procedure team_nl_cmd_options_set($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.16, $CurrAddr, $M.25, $M.26, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.31, $M.32, $M.23, $M.24, $M.4, $M.3;



implementation team_nl_cmd_options_set($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $i31: i32;
  var $i32: i1;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $i39: i32;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $i47: i1;
  var $p48: ref;
  var $p49: ref;
  var $i50: i8;
  var $i51: i32;
  var $i52: i1;
  var $i53: i1;
  var $i54: i1;
  var $i55: i1;
  var $i57: i1;
  var $i58: i1;
  var $i59: i1;
  var $i60: i1;
  var $i56: i32;
  var $i61: i32;
  var $p62: ref;
  var $p63: ref;
  var $i64: i1;
  var $i65: i64;
  var $i66: i1;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i64;
  var $i73: i1;
  var $i74: i32;
  var $i75: i32;
  var $p76: ref;
  var $p77: ref;
  var $i78: i64;
  var $i79: i1;
  var $i80: i32;
  var $i81: i32;
  var $i82: i8;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $i88: i64;
  var $p89: ref;
  var $i90: i64;
  var $i91: i1;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $i100: i64;
  var $i101: i1;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $i107: i32;
  var $i108: i32;
  var $p109: ref;
  var $i110: i32;
  var $i111: i1;
  var $p114: ref;
  var $p115: ref;
  var $i116: i32;
  var $i117: i1;
  var $i118: i1;
  var $p119: ref;
  var $i120: i32;
  var $i121: i1;
  var $i122: i1;
  var $p123: ref;
  var $i124: i32;
  var $i125: i1;
  var $p126: ref;
  var $i127: i1;
  var $i128: i1;
  var $i129: i1;
  var $i130: i1;
  var $i131: i1;
  var $i132: i1;
  var $i133: i32;
  var $p134: ref;
  var $p135: ref;
  var $i136: i32;
  var $i137: i1;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $i141: i32;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $p146: ref;
  var $p147: ref;
  var $p148: ref;
  var $i149: i64;
  var $i150: i1;
  var $p151: ref;
  var $p152: ref;
  var $i153: i8;
  var $i154: i32;
  var $p155: ref;
  var $p156: ref;
  var $i157: i32;
  var $i158: i1;
  var $i159: i32;
  var $p160: ref;
  var $p161: ref;
  var $p112: ref;
  var $i113: i8;
  var $p163: ref;
  var $p164: ref;
  var $p165: ref;
  var $p166: ref;
  var $i167: i64;
  var $i168: i1;
  var $i93: i8;
  var $p94: ref;
  var $i169: i8;
  var $i92: i8;
  var $i170: i1;
  var $p171: ref;
  var $i172: i32;
  var $i173: i32;
  var $i174: i1;
  var $p33: ref;
  var $i175: i32;
  var $i18: i32;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 665} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} $p3 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 667} $p4 := $alloc($mul.ref(64, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 668} $p5 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, $p3);
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $p3);
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 669} $p8 := team_nl_team_get($p1);
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p13, $mul.ref(2, 8));
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i16, 0);
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p20, $mul.ref(2, 8));
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 671} $p23 := nla_data($p22);
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p26, $mul.ref(2, 8));
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 672} $i29 := nla_len($p28);
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    $M.16 := $store.i32($M.16, $p2, $i29);
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.16, $p2);
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 673} $i31 := nla_ok($p24, $i30);
    call {:si_unique_call 674} {:cexpr "tmp___9"} boogie_si_record_i32($i31);
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 703} $i175 := team_nl_send_event_options_get($p8, $p3);
    call {:si_unique_call 704} {:cexpr "err"} boogie_si_record_i32($i175);
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    $i18 := $i175;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} team_nl_team_put($p8);
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    $i11 := $i18;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb9:
    assume $i32 == 1;
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    $p33 := $p23;
    goto $bb12;

  $bb12:
    call $i34, $i35, $p36, $i37, $i38, $i39, $p40, $p41, $i42, $i43, $p44, $p45, $i46, $i47, $p48, $p49, $i50, $i51, $i52, $i53, $i54, $i55, $i57, $i58, $i59, $i60, $i56, $i61, $p62, $p63, $i64, $i65, $i66, $p67, $p68, $p69, $p70, $p71, $i72, $i73, $i74, $i75, $p76, $p77, $i78, $i79, $i80, $i81, $i82, $p84, $p85, $p86, $p87, $i88, $p89, $i90, $i91, $p95, $p96, $p97, $p98, $p99, $i100, $i101, $p102, $p103, $p104, $p105, $p106, $i107, $i108, $p109, $i110, $i111, $p114, $p115, $i116, $i117, $i118, $p119, $i120, $i121, $i122, $p123, $i124, $i125, $p126, $i127, $i128, $i129, $i130, $i131, $i132, $i133, $p134, $p135, $i136, $i137, $p138, $p139, $p140, $i141, $p142, $p143, $p144, $p145, $p146, $p147, $p148, $i149, $i150, $p151, $p152, $i153, $i154, $p155, $p156, $i157, $i158, $i159, $p160, $p161, $p112, $i113, $p163, $p164, $p165, $p166, $i167, $i168, $i93, $p94, $i169, $i92, $i170, $p171, $i172, $i173, $i174, $p33 := team_nl_cmd_options_set_loop_$bb12($p2, $p3, $p4, $p5, $p8, $i34, $i35, $p36, $i37, $i38, $i39, $p40, $p41, $i42, $i43, $p44, $p45, $i46, $i47, $p48, $p49, $i50, $i51, $i52, $i53, $i54, $i55, $i57, $i58, $i59, $i60, $i56, $i61, $p62, $p63, $i64, $i65, $i66, $p67, $p68, $p69, $p70, $p71, $i72, $i73, $i74, $i75, $p76, $p77, $i78, $i79, $i80, $i81, $i82, $p84, $p85, $p86, $p87, $i88, $p89, $i90, $i91, $p95, $p96, $p97, $p98, $p99, $i100, $i101, $p102, $p103, $p104, $p105, $p106, $i107, $i108, $p109, $i110, $i111, $p114, $p115, $i116, $i117, $i118, $p119, $i120, $i121, $i122, $p123, $i124, $i125, $p126, $i127, $i128, $i129, $i130, $i131, $i132, $i133, $p134, $p135, $i136, $i137, $p138, $p139, $p140, $i141, $p142, $p143, $p144, $p145, $p146, $p147, $p148, $i149, $i150, $p151, $p152, $i153, $i154, $p155, $p156, $i157, $i158, $i159, $p160, $p161, $p112, $i113, $p163, $p164, $p165, $p166, $i167, $i168, $i93, $p94, $i169, $i92, $i170, $p171, $i172, $i173, $i174, $p33);
    goto $bb12_last;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 675} $i34 := nla_type($p33);
    call {:si_unique_call 676} {:cexpr "tmp___0"} boogie_si_record_i32($i34);
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 1);
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p4);
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 677} $i37 := nla_parse_nested($p36, 7, $p33, team_nl_option_policy);
    call {:si_unique_call 678} {:cexpr "err"} boogie_si_record_i32($i37);
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    $i39 := $i37;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p4, $mul.ref(0, 64)), $mul.ref(1, 8));
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.17, $p40);
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p41);
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    $i43 := $eq.i64($i42, 0);
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i43 == 1);
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p4, $mul.ref(0, 64)), $mul.ref(3, 8));
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.17, $p44);
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p45);
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    $i47 := $eq.i64($i46, 0);
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p4, $mul.ref(0, 64)), $mul.ref(3, 8));
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.17, $p48);
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} $i50 := nla_get_u8($p49);
    call {:si_unique_call 680} {:cexpr "tmp___1"} boogie_si_record_i8($i50);
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    $i51 := $zext.i8.i32($i50);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i52 := $slt.i32($i51, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    $i53 := $slt.i32($i51, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    $i54 := $slt.i32($i51, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i51, 14);
    assume {:verifier.code 0} true;
    $i56 := $i37;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i55 == 1);
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $i18 := $i56;
    goto $bb7;

  $bb33:
    assume $i55 == 1;
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    $i61 := 4;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p4, $mul.ref(0, 64)), $mul.ref(4, 8));
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.17, $p62);
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i61, 3);
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    assume !($i64 == 1);
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p4, $mul.ref(0, 64)), $mul.ref(1, 8));
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.17, $p67);
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} $p69 := nla_data($p68);
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p4, $mul.ref(0, 64)), $mul.ref(6, 8));
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.17, $p70);
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    $i72 := $p2i.ref.i64($p71);
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    $i73 := $ne.i64($i72, 0);
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    $i75 := 0;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p4, $mul.ref(0, 64)), $mul.ref(7, 8));
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.17, $p76);
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    $i78 := $p2i.ref.i64($p77);
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    $i79 := $ne.i64($i78, 0);
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    $i81, $i82 := 0, 0;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 984)), $mul.ref(352, 1)), $mul.ref(0, 1));
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.0, $p84);
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    $p86 := $bitcast.ref.ref($p85);
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p86, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    $i88 := $p2i.ref.i64($p87);
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p8, $mul.ref(0, 984)), $mul.ref(352, 1));
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    $i90 := $p2i.ref.i64($p89);
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    $i91 := $ne.i64($i88, $i90);
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    $i92 := 0;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    assume !($i91 == 1);
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    $i170 := $trunc.i8.i1($i92);
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb111, $bb112;

  $bb112:
    assume !($i170 == 1);
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 2);
    goto $bb7;

  $bb111:
    assume $i170 == 1;
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 700} $p171 := nla_next($p33, $p2);
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    $i172 := $load.i32($M.16, $p2);
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 701} $i173 := nla_ok($p171, $i172);
    call {:si_unique_call 702} {:cexpr "tmp___9"} boogie_si_record_i32($i173);
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    $i174 := $ne.i32($i173, 0);
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb114, $bb115;

  $bb115:
    assume !($i174 == 1);
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb114:
    assume $i174 == 1;
    assume {:verifier.code 0} true;
    $p33 := $p171;
    goto $bb114_dummy;

  $bb58:
    assume $i91 == 1;
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    $i93, $p94 := 0, $p85;
    goto $bb61;

  $bb61:
    call $p95, $p96, $p97, $p98, $p99, $i100, $i101, $p102, $p103, $p104, $p105, $p106, $i107, $i108, $p109, $i110, $i111, $p114, $p115, $i116, $i117, $i118, $p119, $i120, $i121, $i122, $p123, $i124, $i125, $p126, $i127, $i128, $i129, $i130, $i131, $i132, $i133, $p134, $p135, $i136, $i137, $p138, $p139, $p140, $i141, $p142, $p143, $p144, $p145, $p146, $p147, $p148, $i149, $i150, $p151, $p152, $i153, $i154, $p155, $p156, $i157, $i158, $i159, $p160, $p161, $p112, $i113, $p163, $p164, $p165, $p166, $i167, $i168, $i93, $p94, $i169 := team_nl_cmd_options_set_loop_$bb61($p3, $p5, $p8, $i61, $p63, $p69, $i75, $i81, $i82, $i90, $p95, $p96, $p97, $p98, $p99, $i100, $i101, $p102, $p103, $p104, $p105, $p106, $i107, $i108, $p109, $i110, $i111, $p114, $p115, $i116, $i117, $i118, $p119, $i120, $i121, $i122, $p123, $i124, $i125, $p126, $i127, $i128, $i129, $i130, $i131, $i132, $i133, $p134, $p135, $i136, $i137, $p138, $p139, $p140, $i141, $p142, $p143, $p144, $p145, $p146, $p147, $p148, $i149, $i150, $p151, $p152, $i153, $i154, $p155, $p156, $i157, $i158, $i159, $p160, $p161, $p112, $i113, $p163, $p164, $p165, $p166, $i167, $i168, $i93, $p94, $i169);
    goto $bb61_last;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p94, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    $p96 := $load.ref($M.0, $p95);
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p94, $mul.ref(0, 64)), $mul.ref(40, 1));
    $p98 := $add.ref($add.ref($add.ref($p94, $mul.ref(0, 64)), $mul.ref(40, 1)), $mul.ref(8, 1));
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    $p99 := $load.ref($M.0, $p98);
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    $i100 := $p2i.ref.i64($p99);
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    $i101 := $ne.i64($i100, 0);
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i101 == 1);
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    $i108 := 0;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p96, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    $i110 := $load.i32($M.0, $p109);
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    $i111 := $ne.i32($i110, $i61);
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i111 == 1);
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p96, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    $p115 := $load.ref($M.0, $p114);
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 686} $i116 := strcmp($p115, $p69);
    call {:si_unique_call 687} {:cexpr "tmp___4"} boogie_si_record_i32($i116);
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    $i117 := $ne.i32($i116, 0);
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i117 == 1);
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    $i118 := $ne.i32($i108, $i75);
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i118 == 1);
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p96, $mul.ref(0, 64)), $mul.ref(28, 1));
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    $i120 := $load.i32($M.0, $p119);
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    $i121 := $ne.i32($i120, 0);
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    assume !($i121 == 1);
    goto $bb75;

  $bb75:
    $p123 := $add.ref($add.ref($add.ref($p94, $mul.ref(0, 64)), $mul.ref(40, 1)), $mul.ref(0, 1));
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    $i124 := $load.i32($M.0, $p123);
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    $i125 := $ne.i32($i124, $i81);
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p126, $p97);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    $i127 := $slt.i32($i61, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i127 == 1);
    assume {:verifier.code 0} true;
    $i128 := $slt.i32($i61, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    $i129 := $slt.i32($i61, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i129 == 1);
    assume {:verifier.code 0} true;
    $i130 := $eq.i32($i61, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    assume !($i130 == 1);
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    call {:si_unique_call 698} devirtbounce.1(0, .str.2, 2543, 12);
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    call team_nl_cmd_options_set_loop_$bb104();
    goto $bb104_last;

  $bb92:
    assume $i130 == 1;
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} $i154 := nla_get_s32($p63);
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    $p156 := $bitcast.ref.ref($p155);
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p156, $i154);
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} $i157 := team_option_set($p8, $p94, $p5);
    call {:si_unique_call 696} {:cexpr "err"} boogie_si_record_i32($i157);
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    $i158 := $ne.i32($i157, 0);
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    $i159 := $i157;
    assume true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i158 == 1);
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p94, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p160, 1);
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p94, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} list_add($p161, $p3);
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    $p112, $i113 := $p94, 1;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($add.ref($p112, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    $p164 := $load.ref($M.0, $p163);
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    $p165 := $bitcast.ref.ref($p164);
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p165, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    $i167 := $p2i.ref.i64($p166);
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    $i168 := $ne.i64($i167, $i90);
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    $i169 := $i113;
    assume true;
    goto $bb108, $bb109;

  $bb109:
    assume !($i168 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    $i92 := $i169;
    goto $bb60;

  $bb108:
    assume $i168 == 1;
    assume {:verifier.code 0} true;
    $i93, $p94 := $i113, $p164;
    goto $bb108_dummy;

  $bb105:
    assume $i158 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    $i18 := $i159;
    goto $bb7;

  $bb90:
    assume $i129 == 1;
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    $i149 := $p2i.ref.i64($p63);
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    $i150 := $ne.i64($i149, 0);
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    $p152 := $bitcast.ref.ref($p151);
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    $i153 := $zext.i1.i8($i150);
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p152, $i153);
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb88:
    assume $i128 == 1;
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} $i141 := nla_len($p63);
    call {:si_unique_call 689} {:cexpr "tmp___7"} boogie_si_record_i32($i141);
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    $p143 := $bitcast.ref.ref($p142);
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p143, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p144, $i141);
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 690} $p145 := nla_data($p63);
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    $p147 := $bitcast.ref.ref($p146);
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p147, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p148, $p145);
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb86:
    assume $i127 == 1;
    assume {:verifier.code 0} true;
    $i131 := $slt.i32($i61, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  $bb96:
    assume !($i131 == 1);
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 692} $i136 := nla_len($p63);
    call {:si_unique_call 693} {:cexpr "tmp___5"} boogie_si_record_i32($i136);
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    $i137 := $sgt.i32($i136, 32);
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i137 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 697} $p138 := nla_data($p63);
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    $p140 := $bitcast.ref.ref($p139);
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p140, $p138);
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb100:
    assume $i137 == 1;
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 22);
    goto $bb7;

  $bb95:
    assume $i131 == 1;
    assume {:verifier.code 0} true;
    $i132 := $eq.i32($i61, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    assume !($i132 == 1);
    goto $bb94;

  $bb97:
    assume $i132 == 1;
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} $i133 := nla_get_u32($p63);
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    $p135 := $bitcast.ref.ref($p134);
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p135, $i133);
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb78:
    assume $i125 == 1;
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    $p112, $i113 := $p94, $i93;
    goto $bb68;

  $bb73:
    assume $i121 == 1;
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    $i122 := $trunc.i8.i1($i82);
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i122 == 1);
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    $p112, $i113 := $p94, $i93;
    goto $bb68;

  $bb76:
    assume {:verifier.code 0} true;
    assume $i122 == 1;
    goto $bb75;

  $bb71:
    assume $i118 == 1;
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    $p112, $i113 := $p94, $i93;
    goto $bb68;

  $bb69:
    assume $i117 == 1;
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    $p112, $i113 := $p94, $i93;
    goto $bb68;

  $bb66:
    assume $i111 == 1;
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    $p112, $i113 := $p94, $i93;
    goto $bb68;

  $bb63:
    assume $i101 == 1;
    $p102 := $add.ref($add.ref($add.ref($p94, $mul.ref(0, 64)), $mul.ref(40, 1)), $mul.ref(8, 1));
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    $p103 := $load.ref($M.0, $p102);
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p103, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    $p105 := $load.ref($M.0, $p104);
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p105, $mul.ref(0, 3176)), $mul.ref(256, 1));
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    $i107 := $load.i32($M.0, $p106);
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    $i108 := $i107;
    goto $bb65;

  $bb55:
    assume $i79 == 1;
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} $i80 := nla_get_u32($p77);
    call {:si_unique_call 685} {:cexpr "opt_array_index"} boogie_si_record_i32($i80);
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    $i81, $i82 := $i80, 1;
    goto $bb57;

  $bb52:
    assume $i73 == 1;
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 682} $i74 := nla_get_u32($p71);
    call {:si_unique_call 683} {:cexpr "tmp___3"} boogie_si_record_i32($i74);
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    $i75 := $i74;
    goto $bb54;

  $bb46:
    assume $i64 == 1;
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    $i65 := $p2i.ref.i64($p63);
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    $i66 := $eq.i64($i65, 0);
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    assume !($i66 == 1);
    goto $bb48;

  $bb49:
    assume $i66 == 1;
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 22);
    goto $bb7;

  $bb31:
    assume $i54 == 1;
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i51, 11);
    assume {:verifier.code 0} true;
    $i56 := $i37;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume !($i57 == 1);
    goto $bb35;

  $bb36:
    assume $i57 == 1;
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    $i61 := 2;
    goto $bb44;

  $bb29:
    assume $i53 == 1;
    assume {:verifier.code 0} true;
    $i58 := $eq.i32($i51, 6);
    assume {:verifier.code 0} true;
    $i56 := $i37;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume !($i58 == 1);
    goto $bb35;

  $bb38:
    assume $i58 == 1;
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    $i61 := 3;
    goto $bb44;

  $bb27:
    assume $i52 == 1;
    assume {:verifier.code 0} true;
    $i59 := $slt.i32($i51, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i59 == 1);
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    $i61 := 1;
    goto $bb44;

  $bb40:
    assume $i59 == 1;
    assume {:verifier.code 0} true;
    $i60 := $eq.i32($i51, 3);
    assume {:verifier.code 0} true;
    $i56 := $i37;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    assume !($i60 == 1);
    goto $bb35;

  $bb42:
    assume $i60 == 1;
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    $i61 := 0;
    goto $bb44;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i47 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 22);
    goto $bb7;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i43 == 1;
    goto $bb21;

  $bb17:
    assume $i38 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    $i18 := $i39;
    goto $bb7;

  $bb14:
    assume $i35 == 1;
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 22);
    goto $bb7;

  $bb5:
    assume $i17 == 1;
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 22);
    goto $bb7;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb3;

  $bb104_dummy:
    assume false;
    return;

  $bb104_last:
    assume {:verifier.code 0} true;
    goto $bb104_dummy;

  $bb108_dummy:
    assume false;
    return;

  $bb61_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3640;

  $bb114_dummy:
    assume false;
    return;

  $bb12_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3559;
}



const team_nl_cmd_options_get: ref;

axiom team_nl_cmd_options_get == $sub.ref(0, 365053);

procedure team_nl_cmd_options_get($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.16, $M.25, $M.26, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.31, $M.32, $M.4, $M.3, $M.23, $M.24;



implementation team_nl_cmd_options_get($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p19: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $p18: ref;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $i30: i32;
  var $i31: i32;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 705} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, $p2);
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, $p2);
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 706} $p5 := team_nl_team_get($p1);
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 984)), $mul.ref(352, 1)), $mul.ref(0, 1));
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p5, $mul.ref(0, 984)), $mul.ref(352, 1));
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i14, $i16);
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(4, 1));
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 708} $i31 := team_nl_send_options_get($p5, $i28, $i30, 4, team_nl_send_unicast, $p2);
    call {:si_unique_call 709} {:cexpr "err"} boogie_si_record_i32($i31);
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 710} team_nl_team_put($p5);
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    $i8 := $i31;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb5:
    assume $i17 == 1;
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    $p18 := $p11;
    goto $bb8;

  $bb8:
    call $p19, $p21, $p22, $p23, $p24, $i25, $i26, $p18 := team_nl_cmd_options_get_loop_$bb8($p2, $i16, $p19, $p21, $p22, $p23, $p24, $i25, $i26, $p18);
    goto $bb8_last;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 707} list_add_tail($p19, $p2);
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p18, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, $i16);
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i26 == 1);
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb10:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    $p18 := $p22;
    goto $bb10_dummy;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 22);
    goto $bb3;

  $bb10_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3798;
}



const team_nl_cmd_port_list_get: ref;

axiom team_nl_cmd_port_list_get == $sub.ref(0, 366085);

procedure team_nl_cmd_port_list_get($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.4, $M.3, $M.16, $M.25, $M.26, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.31, $M.32, $M.23, $M.24;



implementation team_nl_cmd_port_list_get($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 711} $p2 := team_nl_team_get($p1);
    goto corral_source_split_3819;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(4, 1));
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 712} $i10 := team_nl_send_port_list_get($p2, $i7, $i9, 4, team_nl_send_unicast, $0.ref);
    call {:si_unique_call 713} {:cexpr "err"} boogie_si_record_i32($i10);
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 714} team_nl_team_put($p2);
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    $i5 := $i10;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 22);
    goto $bb3;
}



const team_nl_team_get: ref;

axiom team_nl_team_get == $sub.ref(0, 367117);

procedure team_nl_team_get($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation team_nl_team_get($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 715} $p1 := genl_info_net($p0);
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref(1, 8));
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p10, $mul.ref(1, 8));
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 716} $i13 := nla_get_u32($p12);
    call {:si_unique_call 717} {:cexpr "tmp___0"} boogie_si_record_i32($i13);
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 718} $p14 := dev_get_by_index($p1, $i13);
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i16 == 1);
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p14, $mul.ref(0, 3176)), $mul.ref(488, 1));
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, $p2i.ref.i64(team_netdev_ops));
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 720} $p23 := netdev_priv($p14);
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 984)), $mul.ref(16, 1));
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} mutex_lock_nested($p25, 0);
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    $p8 := $p23;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p14);
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p8 := $0.ref;
    goto $bb3;

  $bb10:
    assume $i22 == 1;
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 719} dev_put($p14);
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb6;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    $p8 := $0.ref;
    goto $bb3;
}



const team_nl_send_unicast: ref;

axiom team_nl_send_unicast == $sub.ref(0, 368149);

procedure team_nl_send_unicast($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation team_nl_send_unicast($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 722} {:cexpr "team_nl_send_unicast:arg:portid"} boogie_si_record_i32($i2);
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 984)), $mul.ref(0, 1));
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 723} $p5 := dev_net($p4);
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 724} $i6 := genlmsg_unicast($p5, $p0, $i2);
    call {:si_unique_call 725} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const team_nl_team_put: ref;

axiom team_nl_team_put == $sub.ref(0, 369181);

procedure team_nl_team_put($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation team_nl_team_put($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(16, 1));
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 726} mutex_unlock($p1);
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(0, 1));
    goto corral_source_split_3882;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 727} dev_put($p3);
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    return;
}



const genlmsg_unicast: ref;

axiom genlmsg_unicast == $sub.ref(0, 370213);

procedure genlmsg_unicast($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation genlmsg_unicast($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 728} {:cexpr "genlmsg_unicast:arg:portid"} boogie_si_record_i32($i2);
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(256, 1));
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 729} $i5 := nlmsg_unicast($p4, $p1, $i2);
    call {:si_unique_call 730} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const nlmsg_unicast: ref;

axiom nlmsg_unicast == $sub.ref(0, 371245);

procedure nlmsg_unicast($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation nlmsg_unicast($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 731} {:cexpr "nlmsg_unicast:arg:portid"} boogie_si_record_i32($i2);
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 732} $i3 := netlink_unicast($p0, $p1, $i2, 64);
    call {:si_unique_call 733} {:cexpr "err"} boogie_si_record_i32($i3);
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    $i4 := $sgt.i32($i3, 0);
    goto corral_source_split_3893;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $i3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;
}



const netlink_unicast: ref;

axiom netlink_unicast == $sub.ref(0, 372277);

procedure netlink_unicast($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation netlink_unicast($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 734} {:cexpr "netlink_unicast:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 735} {:cexpr "netlink_unicast:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 1} true;
    call {:si_unique_call 736} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 737} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const genl_info_net: ref;

axiom genl_info_net == $sub.ref(0, 373309);

procedure genl_info_net($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation genl_info_net($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 738} $p2 := read_pnet($p1);
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const nla_get_u32: ref;

axiom nla_get_u32 == $sub.ref(0, 374341);

procedure nla_get_u32($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation nla_get_u32($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} $p1 := nla_data($p0);
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const dev_get_by_index: ref;

axiom dev_get_by_index == $sub.ref(0, 375373);

procedure dev_get_by_index($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_by_index($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 740} {:cexpr "dev_get_by_index:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} $p2 := external_alloc();
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const nla_type: ref;

axiom nla_type == $sub.ref(0, 376405);

procedure nla_type($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation nla_type($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i16;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    $i2 := $load.i16($M.0, $p1);
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i2);
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, $sub.i32(0, 49153));
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const nla_parse_nested: ref;

axiom nla_parse_nested == $sub.ref(0, 377437);

procedure nla_parse_nested($p0: ref, $i1: i32, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation nla_parse_nested($p0: ref, $i1: i32, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 742} {:cexpr "nla_parse_nested:arg:maxtype"} boogie_si_record_i32($i1);
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 743} $i4 := nla_len($p2);
    call {:si_unique_call 744} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} $p5 := nla_data($p2);
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} $i7 := nla_parse($p0, $i1, $p6, $i4, $p3);
    call {:si_unique_call 747} {:cexpr "tmp___1"} boogie_si_record_i32($i7);
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const nla_get_u8: ref;

axiom nla_get_u8 == $sub.ref(0, 378469);

procedure nla_get_u8($p0: ref) returns ($r: i8);
  free requires assertsPassed;



implementation nla_get_u8($p0: ref) returns ($r: i8)
{
  var $p1: ref;
  var $i2: i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} $p1 := nla_data($p0);
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const nla_get_s32: ref;

axiom nla_get_s32 == $sub.ref(0, 379501);

procedure nla_get_s32($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation nla_get_s32($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 749} $p1 := nla_data($p0);
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const team_option_set: ref;

axiom team_option_set == $sub.ref(0, 380533);

procedure team_option_set($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.16, $M.25, $M.26, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.31, $M.32, $CurrAddr, $M.23, $M.24, $M.4, $M.3;



implementation team_option_set($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_3948;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    call {:si_unique_call 750} $i14 := devirtbounce.2($p13, $p0, $p2);
    call {:si_unique_call 751} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    $i9 := $i14;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 95);
    goto $bb3;
}



const list_add: ref;

axiom list_add == $sub.ref(0, 381565);

procedure list_add($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 752} __list_add($p0, $p1, $p3);
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    return;
}



const nla_next: ref;

axiom nla_next == $sub.ref(0, 382597);

procedure nla_next($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.16;



implementation nla_next($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $i3: i16;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i64;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    $i3 := $load.i16($M.0, $p2);
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i3);
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    $i5 := $add.i32($i4, 3);
    goto corral_source_split_3962;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, $sub.i32(0, 4));
    call {:si_unique_call 753} {:cexpr "totlen"} boogie_si_record_i32($i6);
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.16, $p1);
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32($i7, $i6);
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    $M.16 := $store.i32($M.16, $p1, $i8);
    goto corral_source_split_3966;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i6);
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p0, $mul.ref($i9, 4));
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    $r := $p10;
    return;
}



const nla_ok: ref;

axiom nla_ok == $sub.ref(0, 383629);

procedure nla_ok($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation nla_ok($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i1;
  var $p4: ref;
  var $i5: i16;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i16;
  var $i10: i32;
  var $i11: i1;
  var $i3: i1;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 754} {:cexpr "nla_ok:arg:remaining"} boogie_si_record_i32($i1);
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    $i2 := $sgt.i32($i1, 3);
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    $i3 := 0;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i3);
    goto corral_source_split_3980;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.0, $p4);
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    $i7 := $ugt.i32($i6, 3);
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    $i3 := 0;
    assume {:branchcond $i7} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    $i9 := $load.i16($M.0, $p8);
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    goto corral_source_split_3985;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    $i11 := $sle.i32($i10, $i1);
    assume {:verifier.code 0} true;
    $i3 := $i11;
    goto $bb3;
}



const nla_parse: ref;

axiom nla_parse == $sub.ref(0, 384661);

procedure nla_parse($p0: ref, $i1: i32, $p2: ref, $i3: i32, $p4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation nla_parse($p0: ref, $i1: i32, $p2: ref, $i3: i32, $p4: ref) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 755} {:cexpr "nla_parse:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 756} {:cexpr "nla_parse:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 1} true;
    call {:si_unique_call 757} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 758} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const team_init: ref;

axiom team_init == $sub.ref(0, 385693);

procedure team_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.16, $M.25, $M.26, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.31, $M.32, $M.23, $M.24, $M.4, $M.3;



implementation team_init($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $i14: i32;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $i31: i32;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i24: i32;
  var $p39: ref;
  var $p40: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p98: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 759} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} $p2 := netdev_priv($p0);
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 984)), $mul.ref(0, 1));
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, $p0);
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 984)), $mul.ref(16, 1));
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 761} __mutex_init($p5, .str.36, $p1);
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} team_set_no_mode($p3);
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 763} $p6 := __alloc_percpu(48, 8);
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 984)), $mul.ref(8, 1));
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p19, $p6);
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 984)), $mul.ref(8, 1));
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    $i23 := $eq.i64($i22, 0);
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref(0, 984)), $mul.ref(192, 1));
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p27, $0.ref);
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p3, $mul.ref(0, 984)), $mul.ref(192, 1));
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p40, $mul.ref(1, 8)), $mul.ref(0, 1));
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p42, $0.ref);
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p3, $mul.ref(0, 984)), $mul.ref(192, 1));
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p44, $mul.ref(2, 8)), $mul.ref(0, 1));
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p46, $0.ref);
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p3, $mul.ref(0, 984)), $mul.ref(192, 1));
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    goto corral_source_split_4082;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p48, $mul.ref(3, 8)), $mul.ref(0, 1));
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p50, $0.ref);
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p3, $mul.ref(0, 984)), $mul.ref(192, 1));
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p52, $mul.ref(4, 8)), $mul.ref(0, 1));
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p54, $0.ref);
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p3, $mul.ref(0, 984)), $mul.ref(192, 1));
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p55);
    goto corral_source_split_4093;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p56, $mul.ref(5, 8)), $mul.ref(0, 1));
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p58, $0.ref);
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p3, $mul.ref(0, 984)), $mul.ref(192, 1));
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p59);
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p60, $mul.ref(6, 8)), $mul.ref(0, 1));
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p62, $0.ref);
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p3, $mul.ref(0, 984)), $mul.ref(192, 1));
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p63);
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p64, $mul.ref(7, 8)), $mul.ref(0, 1));
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p66, $0.ref);
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p3, $mul.ref(0, 984)), $mul.ref(192, 1));
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p67);
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    goto corral_source_split_4112;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p68, $mul.ref(8, 8)), $mul.ref(0, 1));
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p70, $0.ref);
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p3, $mul.ref(0, 984)), $mul.ref(192, 1));
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p71);
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p72, $mul.ref(9, 8)), $mul.ref(0, 1));
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p74, $0.ref);
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p3, $mul.ref(0, 984)), $mul.ref(192, 1));
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p75);
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p76, $mul.ref(10, 8)), $mul.ref(0, 1));
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p78, $0.ref);
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p3, $mul.ref(0, 984)), $mul.ref(192, 1));
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    $p80 := $bitcast.ref.ref($p79);
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    goto corral_source_split_4130;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p80, $mul.ref(11, 8)), $mul.ref(0, 1));
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p82, $0.ref);
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p3, $mul.ref(0, 984)), $mul.ref(192, 1));
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    $p84 := $bitcast.ref.ref($p83);
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p84, $mul.ref(12, 8)), $mul.ref(0, 1));
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p86, $0.ref);
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p3, $mul.ref(0, 984)), $mul.ref(192, 1));
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    $p88 := $bitcast.ref.ref($p87);
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p88, $mul.ref(13, 8)), $mul.ref(0, 1));
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p90, $0.ref);
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p3, $mul.ref(0, 984)), $mul.ref(192, 1));
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    $p92 := $bitcast.ref.ref($p91);
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p92, $mul.ref(14, 8)), $mul.ref(0, 1));
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p94, $0.ref);
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p3, $mul.ref(0, 984)), $mul.ref(192, 1));
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    $p96 := $bitcast.ref.ref($p95);
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p96, $mul.ref(15, 8)), $mul.ref(0, 1));
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p98, $0.ref);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p3, $mul.ref(0, 984)), $mul.ref(320, 1));
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} INIT_LIST_HEAD($p28);
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 769} $i29 := team_queue_override_init($p3);
    call {:si_unique_call 770} {:cexpr "err"} boogie_si_record_i32($i29);
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 772} team_adjust_ops($p3);
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p3, $mul.ref(0, 984)), $mul.ref(336, 1));
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 773} INIT_LIST_HEAD($p32);
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p3, $mul.ref(0, 984)), $mul.ref(352, 1));
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} INIT_LIST_HEAD($p33);
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 775} team_notify_peers_init($p3);
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 776} team_mcast_rejoin_init($p3);
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} $i34 := team_options_register($p3, team_options, 10);
    call {:si_unique_call 778} {:cexpr "err"} boogie_si_record_i32($i34);
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} netif_carrier_off($p0);
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} team_set_lockdep_class($p0);
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    $i24 := 0;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    $r := $i24;
    return;

  $bb24:
    assume $i35 == 1;
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} team_mcast_rejoin_fini($p3);
    goto corral_source_split_4067;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} team_notify_peers_fini($p3);
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 781} team_queue_override_fini($p3);
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    $i31 := $i34;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p3, $mul.ref(0, 984)), $mul.ref(8, 1));
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} free_percpu($p38);
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    $i24 := $i31;
    goto $bb14;

  $bb20:
    assume $i30 == 1;
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    $i31 := $i29;
    goto $bb22;

  $bb12:
    assume $i23 == 1;
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32(0, 12);
    goto $bb14;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, cpu_possible_mask);
    goto corral_source_split_4004;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} $i11 := cpumask_next($sub.i32(0, 1), $p10);
    call {:si_unique_call 765} {:cexpr "tmp___1"} boogie_si_record_i32($i11);
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i11, $i12);
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb3:
    assume $i13 == 1;
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    $i14 := $i11;
    goto $bb6;

  $bb6:
    call $p15, $i16, $i17, $i18, $i14 := team_init_loop_$bb6($p15, $i16, $i17, $i18, $i14);
    goto $bb6_last;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, cpu_possible_mask);
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} $i16 := cpumask_next($i14, $p15);
    call {:si_unique_call 767} {:cexpr "tmp___1"} boogie_si_record_i32($i16);
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_4015;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i16, $i17);
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i18 == 1);
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb8:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    $i14 := $i16;
    goto $bb8_dummy;

  $bb8_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4011;
}



const team_uninit: ref;

axiom team_uninit == $sub.ref(0, 386725);

procedure team_uninit($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.23, $M.24, $CurrAddr, $M.4, $M.3, $M.16, $M.25, $M.26, $M.31, $M.32;



implementation team_uninit($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p21: ref;
  var $p22: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $p19: ref;
  var $p20: ref;
  var $p33: ref;
  var vslice_dummy_var_65: i32;
  var vslice_dummy_var_66: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} $p1 := netdev_priv($p0);
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 984)), $mul.ref(16, 1));
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 785} mutex_lock_nested($p3, 0);
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 984)), $mul.ref(320, 1)), $mul.ref(0, 1));
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p7, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p7, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.19, $p10);
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p12, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p7, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 984)), $mul.ref(320, 1));
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i15, $i17);
    goto corral_source_split_4174;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 787} vslice_dummy_var_66 := __team_change_mode($p2, $0.ref);
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 788} __team_options_unregister($p2, team_options, 10);
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 789} team_mcast_rejoin_fini($p2);
    goto corral_source_split_4195;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 790} team_notify_peers_fini($p2);
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} team_queue_override_fini($p2);
    goto corral_source_split_4197;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref(0, 984)), $mul.ref(16, 1));
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 792} mutex_unlock($p33);
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    $p19, $p20 := $p13, $p8;
    goto $bb4;

  $bb4:
    call $p21, $p22, $p25, $p26, $p27, $p28, $p29, $i30, $i31, $p19, $p20, vslice_dummy_var_65 := team_uninit_loop_$bb4($p2, $i17, $p21, $p22, $p25, $p26, $p27, $p28, $p29, $i30, $i31, $p19, $p20, vslice_dummy_var_65);
    goto $bb4_last;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.20, $p21);
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 786} vslice_dummy_var_65 := team_port_del($p2, $p22);
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_4183;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.19, $p25);
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($p27, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p19, $mul.ref(0, 160)), $mul.ref(24, 1));
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_4188;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, $i17);
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i31 == 1);
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    $p19, $p20 := $p28, $p19;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4178;
}



const team_open: ref;

axiom team_open == $sub.ref(0, 387757);

procedure team_open($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation team_open($p0: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const team_close: ref;

axiom team_close == $sub.ref(0, 388789);

procedure team_close($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation team_close($p0: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4203;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const team_xmit: ref;

axiom team_xmit == $sub.ref(0, 389821);

procedure team_xmit($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.31, $M.32, $CurrAddr;



implementation team_xmit($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i8;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i1;
  var $i13: i8;
  var $i14: i8;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i64;
  var $i28: i64;
  var $p29: ref;
  var $p30: ref;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i1;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i1;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i1;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $i75: i1;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} $p2 := netdev_priv($p1);
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    call {:si_unique_call 794} {:cexpr "len"} boogie_si_record_i32($i5);
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 795} $i6 := team_queue_override_transmit($p3, $p0);
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i6);
    call {:si_unique_call 796} {:cexpr "tx_success"} boogie_si_record_i8($i7);
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i7);
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 984)), $mul.ref(376, 1)), $mul.ref(24, 1));
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    call {:si_unique_call 797} $i12 := devirtbounce.10($p11, $p3, $p0);
    goto corral_source_split_4216;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i8($i12);
    call {:si_unique_call 798} {:cexpr "tx_success"} boogie_si_record_i8($i13);
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    $i14 := $i13;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i8.i1($i14);
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i31 := $slt.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    $i32 := $slt.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    $i33 := $eq.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    call {:si_unique_call 815} __bad_size_call_parameter();
    goto corral_source_split_4322;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb12:
    assume $i33 == 1;
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    $i71 := $eq.i32(1, 1);
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i71 == 1);
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    $i75 := $eq.i32(1, $sub.i32(0, 1));
    goto corral_source_split_4311;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    assume {:branchcond $i75} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i75 == 1);
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p3, $mul.ref(0, 984)), $mul.ref(8, 1));
    goto corral_source_split_4319;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.0, $p79);
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p80, $mul.ref(0, 48)), $mul.ref(44, 1));
    call {:si_unique_call 814} devirtbounce.9(0, $p81, 1, $p81);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb48:
    assume $i75 == 1;
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p3, $mul.ref(0, 984)), $mul.ref(8, 1));
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.0, $p76);
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p77, $mul.ref(0, 48)), $mul.ref(44, 1));
    call {:si_unique_call 813} devirtbounce.8(0, $p78, $p78);
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb45:
    assume $i71 == 1;
    goto corral_source_split_4305;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p3, $mul.ref(0, 984)), $mul.ref(8, 1));
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.0, $p72);
    goto corral_source_split_4307;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p73, $mul.ref(0, 48)), $mul.ref(44, 1));
    call {:si_unique_call 812} devirtbounce.8(0, $p74, $p74);
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb10:
    assume $i32 == 1;
    assume {:verifier.code 0} true;
    $i34 := $eq.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb14;

  $bb15:
    assume $i34 == 1;
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    $i60 := $eq.i32(1, 1);
    goto corral_source_split_4246;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i60 == 1);
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    $i64 := $eq.i32(1, $sub.i32(0, 1));
    goto corral_source_split_4294;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i64 == 1);
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p3, $mul.ref(0, 984)), $mul.ref(8, 1));
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.0, $p68);
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p69, $mul.ref(0, 48)), $mul.ref(44, 1));
    call {:si_unique_call 811} devirtbounce.9(0, $p70, 1, $p70);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb41:
    assume $i64 == 1;
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p3, $mul.ref(0, 984)), $mul.ref(8, 1));
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_4298;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p66, $mul.ref(0, 48)), $mul.ref(44, 1));
    call {:si_unique_call 810} devirtbounce.8(0, $p67, $p67);
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb38:
    assume $i60 == 1;
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p3, $mul.ref(0, 984)), $mul.ref(8, 1));
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p62, $mul.ref(0, 48)), $mul.ref(44, 1));
    call {:si_unique_call 809} devirtbounce.8(0, $p63, $p63);
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb8:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    $i35 := $slt.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    $i36 := $eq.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb14;

  $bb19:
    assume $i36 == 1;
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32(1, 1);
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i49 == 1);
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32(1, $sub.i32(0, 1));
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i53 == 1);
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p3, $mul.ref(0, 984)), $mul.ref(8, 1));
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p58, $mul.ref(0, 48)), $mul.ref(44, 1));
    call {:si_unique_call 808} devirtbounce.9(0, $p59, 1, $p59);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb34:
    assume $i53 == 1;
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p3, $mul.ref(0, 984)), $mul.ref(8, 1));
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_4281;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p55, $mul.ref(0, 48)), $mul.ref(44, 1));
    call {:si_unique_call 807} devirtbounce.8(0, $p56, $p56);
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb31:
    assume $i49 == 1;
    goto corral_source_split_4271;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p3, $mul.ref(0, 984)), $mul.ref(8, 1));
    goto corral_source_split_4272;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p51, $mul.ref(0, 48)), $mul.ref(44, 1));
    call {:si_unique_call 806} devirtbounce.8(0, $p52, $p52);
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb17:
    assume $i35 == 1;
    assume {:verifier.code 0} true;
    $i37 := $eq.i64(4, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb14;

  $bb21:
    assume $i37 == 1;
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32(1, 1);
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i38 == 1);
    goto corral_source_split_4259;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32(1, $sub.i32(0, 1));
    goto corral_source_split_4260;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i42 == 1);
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p3, $mul.ref(0, 984)), $mul.ref(8, 1));
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p47, $mul.ref(0, 48)), $mul.ref(44, 1));
    call {:si_unique_call 805} devirtbounce.9(0, $p48, 1, $p48);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb26:
    assume $i42 == 1;
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p3, $mul.ref(0, 984)), $mul.ref(8, 1));
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_4264;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 48)), $mul.ref(44, 1));
    call {:si_unique_call 804} devirtbounce.8(0, $p45, $p45);
    goto corral_source_split_4265;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb23:
    assume $i38 == 1;
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p3, $mul.ref(0, 984)), $mul.ref(8, 1));
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p40, $mul.ref(0, 48)), $mul.ref(44, 1));
    call {:si_unique_call 803} devirtbounce.8(0, $p41, $p41);
    goto corral_source_split_4257;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb4:
    assume $i15 == 1;
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 984)), $mul.ref(8, 1));
    goto corral_source_split_4223;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    call {:si_unique_call 799} $i18 := devirtbounce.11(0, this_cpu_off, $p17);
    call {:si_unique_call 800} {:cexpr "tcp_ptr__"} boogie_si_record_i64($i18);
    goto corral_source_split_4224;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    $p19 := $i2p.i64.ref($i18);
    goto corral_source_split_4225;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_4226;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 801} u64_stats_update_begin($p20);
    goto corral_source_split_4227;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p19, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    $i22 := $load.i64($M.0, $p21);
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    $i23 := $add.i64($i22, 1);
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p19, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p24, $i23);
    goto corral_source_split_4232;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p19, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    $i26 := $load.i64($M.0, $p25);
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    $i27 := $zext.i32.i64($i5);
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    $i28 := $add.i64($i26, $i27);
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p19, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p29, $i28);
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p19, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} u64_stats_update_begin($p30);
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i14 := $i7;
    goto $bb3;
}



const team_select_queue: ref;

axiom team_select_queue == $sub.ref(0, 390853);

procedure team_select_queue($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i16);
  free requires assertsPassed;
  modifies $M.0;



implementation team_select_queue($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i16)
{
  var $i4: i1;
  var $i5: i8;
  var $i6: i1;
  var $i7: i16;
  var $i8: i32;
  var $i9: i32;
  var $i10: i16;
  var $p11: ref;
  var $p12: ref;
  var $i13: i16;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $i23: i16;
  var $i24: i32;
  var $p25: ref;
  var $i26: i32;
  var $i27: i16;
  var $i28: i32;
  var $i29: i32;
  var $i30: i16;
  var $i31: i32;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $i35: i16;
  var $i36: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 816} $i4 := skb_rx_queue_recorded($p1);
    goto corral_source_split_4325;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i8($i4);
    call {:si_unique_call 817} {:cexpr "tmp___2"} boogie_si_record_i8($i5);
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i5);
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i16($i9);
    call {:si_unique_call 821} {:cexpr "txq"} boogie_si_record_i16($i10);
    goto corral_source_split_4334;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 822} $p11 := qdisc_skb_cb($p1);
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(168, 1));
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    $i13 := $load.i16($M.0, $p12);
    goto corral_source_split_4337;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p11, $mul.ref(0, 28)), $mul.ref(4, 1));
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p14, $i13);
    goto corral_source_split_4339;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    $i15 := $zext.i16.i32($i10);
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(932, 1));
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    $i18 := $uge.i32($i15, $i17);
    goto corral_source_split_4343;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i32($i18);
    goto corral_source_split_4344;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_4345;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 823} $i21 := ldv__builtin_expect($i20, 0);
    call {:si_unique_call 824} {:cexpr "tmp___4"} boogie_si_record_i64($i21);
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i36 := $i10;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    $r := $i36;
    return;

  $bb4:
    assume $i22 == 1;
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    $i23 := $i10;
    goto $bb6;

  $bb6:
    call $i23, $i24, $p25, $i26, $i27, $i28, $i29, $i30, $i31, $p32, $i33, $i34, $i35 := team_select_queue_loop_$bb6($p0, $i23, $i24, $p25, $i26, $i27, $i28, $i29, $i30, $i31, $p32, $i33, $i34, $i35);
    goto $bb6_last;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    $i24 := $zext.i16.i32($i23);
    goto corral_source_split_4352;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(932, 1));
    goto corral_source_split_4353;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i32.i16($i26);
    goto corral_source_split_4355;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    $i28 := $zext.i16.i32($i27);
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32($i24, $i28);
    goto corral_source_split_4357;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i32.i16($i29);
    call {:si_unique_call 825} {:cexpr "txq"} boogie_si_record_i16($i30);
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    $i31 := $zext.i16.i32($i30);
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(932, 1));
    goto corral_source_split_4360;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    $i34 := $uge.i32($i31, $i33);
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    $i35 := $i30;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i36 := $i35;
    goto $bb10;

  $bb7:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    $i23 := $i30;
    goto $bb7_dummy;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 818} $i7 := skb_get_rx_queue($p1);
    call {:si_unique_call 819} {:cexpr "tmp___0"} boogie_si_record_i16($i7);
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i7);
    call {:si_unique_call 820} {:cexpr "tmp___1"} boogie_si_record_i32($i8);
    goto corral_source_split_4331;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    $i9 := $i8;
    goto $bb3;

  $bb7_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4351;
}



const team_change_rx_flags: ref;

axiom team_change_rx_flags == $sub.ref(0, 391885);

procedure team_change_rx_flags($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.21, $M.22, $CurrAddr, $M.0;



implementation team_change_rx_flags($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $p29: ref;
  var $p30: ref;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $i37: i1;
  var $i38: i32;
  var $p39: ref;
  var $p40: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $i47: i1;
  var $i48: i1;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i64;
  var $i54: i1;
  var $p21: ref;
  var vslice_dummy_var_67: i32;
  var vslice_dummy_var_68: i32;
  var vslice_dummy_var_69: i32;
  var vslice_dummy_var_70: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 826} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 828} {:cexpr "team_change_rx_flags:arg:change"} boogie_si_record_i32($i1);
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} $p4 := netdev_priv($p0);
    goto corral_source_split_4367;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 830} rcu_read_lock();
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 984)), $mul.ref(320, 1)), $mul.ref(0, 1));
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    $M.21 := $store.ref($M.21, $p2, $p8);
    goto corral_source_split_4372;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.21, $p2);
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 831} $i10 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 832} {:cexpr "tmp___0"} boogie_si_record_i32($i10);
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_4375;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p9);
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p14, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p14, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_4386;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p5, $mul.ref(0, 984)), $mul.ref(320, 1));
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i17, $i19);
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 841} rcu_read_unlock();
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    return;

  $bb7:
    assume $i20 == 1;
    goto corral_source_split_4391;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    $p21 := $p15;
    goto $bb10;

  $bb10:
    call $i22, $i23, $p24, $i25, $i26, $i27, $i28, $p29, $p30, $i32, $i33, $p34, $i35, $i36, $i37, $i38, $p39, $p40, $p43, $p44, $p45, $i46, $i47, $i48, $p50, $p51, $p52, $i53, $i54, $p21, vslice_dummy_var_68, vslice_dummy_var_69, vslice_dummy_var_70 := team_change_rx_flags_loop_$bb10($p0, $i1, $p3, $i19, $i22, $i23, $p24, $i25, $i26, $i27, $i28, $p29, $p30, $i32, $i33, $p34, $i35, $i36, $i37, $i38, $p39, $p40, $p43, $p44, $p45, $i46, $i47, $i48, $p50, $p51, $p52, $i53, $i54, $p21, vslice_dummy_var_68, vslice_dummy_var_69, vslice_dummy_var_70);
    goto $bb10_last;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i22 := $and.i32($i1, 256);
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i32 := $and.i32($i1, 512);
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p21, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    $M.22 := $store.ref($M.22, $p3, $p44);
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.22, $p3);
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 838} $i46 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 839} {:cexpr "tmp___1"} boogie_si_record_i32($i46);
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i46, 0);
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i47 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p45);
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($p50, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p50, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    $i53 := $p2i.ref.i64($p52);
    goto corral_source_split_4437;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    $i54 := $ne.i64($i53, $i19);
    goto corral_source_split_4438;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i54 == 1);
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb24:
    assume $i54 == 1;
    assume {:verifier.code 0} true;
    $p21 := $p51;
    goto $bb24_dummy;

  $bb18:
    assume $i47 == 1;
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i8.i1($u0);
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i48 == 1);
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 840} vslice_dummy_var_70 := rcu_read_lock_held();
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb21:
    assume {:verifier.code 0} true;
    assume $i48 == 1;
    goto $bb20;

  $bb15:
    assume $i33 == 1;
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(520, 1));
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    $i36 := $and.i32($i35, 512);
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_4415;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    $i38 := (if $i37 == 1 then 1 else $sub.i32(0, 1));
    call {:si_unique_call 836} {:cexpr "inc"} boogie_si_record_i32($i38);
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p21, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_4418;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 837} vslice_dummy_var_69 := dev_set_allmulti($p40, $i38);
    goto corral_source_split_4419;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb12:
    assume $i23 == 1;
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(520, 1));
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_4400;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i25, 256);
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    $i28 := (if $i27 == 1 then 1 else $sub.i32(0, 1));
    call {:si_unique_call 834} {:cexpr "inc"} boogie_si_record_i32($i28);
    goto corral_source_split_4403;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p21, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} vslice_dummy_var_68 := dev_set_promiscuity($p30, $i28);
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i8.i1($u0);
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} vslice_dummy_var_67 := rcu_read_lock_held();
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb3;

  $bb24_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4393;
}



const team_set_rx_mode: ref;

axiom team_set_rx_mode == $sub.ref(0, 392917);

procedure team_set_rx_mode($p0: ref);
  free requires assertsPassed;
  modifies $M.23, $M.24, $CurrAddr, $M.0;



implementation team_set_rx_mode($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p21: ref;
  var $p22: ref;
  var $p24: ref;
  var $p25: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $i33: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $i39: i1;
  var $p20: ref;
  var vslice_dummy_var_71: i32;
  var vslice_dummy_var_72: i32;
  var vslice_dummy_var_73: i32;
  var vslice_dummy_var_74: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 842} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 844} $p3 := netdev_priv($p0);
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 845} rcu_read_lock();
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 984)), $mul.ref(320, 1)), $mul.ref(0, 1));
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    $M.23 := $store.ref($M.23, $p1, $p7);
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.23, $p1);
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 846} $i9 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 847} {:cexpr "tmp___0"} boogie_si_record_i32($i9);
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p8);
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p13, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p13, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p4, $mul.ref(0, 984)), $mul.ref(320, 1));
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_4466;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i16, $i18);
    goto corral_source_split_4467;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 854} rcu_read_unlock();
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    return;

  $bb7:
    assume $i19 == 1;
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    $p20 := $p14;
    goto $bb10;

  $bb10:
    call $p21, $p22, $p24, $p25, $p28, $p29, $p30, $i31, $i32, $i33, $p35, $p36, $p37, $i38, $i39, $p20, vslice_dummy_var_72, vslice_dummy_var_73, vslice_dummy_var_74 := team_set_rx_mode_loop_$bb10($p0, $p2, $i18, $p21, $p22, $p24, $p25, $p28, $p29, $p30, $i31, $i32, $i33, $p35, $p36, $p37, $i38, $i39, $p20, vslice_dummy_var_72, vslice_dummy_var_73, vslice_dummy_var_74);
    goto $bb10_last;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_4473;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} vslice_dummy_var_72 := dev_uc_sync_multiple($p22, $p0);
    goto corral_source_split_4475;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p20, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_4477;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 850} vslice_dummy_var_73 := dev_mc_sync_multiple($p25, $p0);
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p20, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_4480;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p2, $p29);
    goto corral_source_split_4481;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.24, $p2);
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 851} $i31 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 852} {:cexpr "tmp___1"} boogie_si_record_i32($i31);
    goto corral_source_split_4483;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p30);
    goto corral_source_split_4492;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($p35, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p35, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p37);
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    $i39 := $ne.i64($i38, $i18);
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i39 == 1);
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb18:
    assume $i39 == 1;
    assume {:verifier.code 0} true;
    $p20 := $p36;
    goto $bb18_dummy;

  $bb12:
    assume $i32 == 1;
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i8.i1($u0);
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i33 == 1);
    goto corral_source_split_4489;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 853} vslice_dummy_var_74 := rcu_read_lock_held();
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb15:
    assume {:verifier.code 0} true;
    assume $i33 == 1;
    goto $bb14;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($u0);
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 848} vslice_dummy_var_71 := rcu_read_lock_held();
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb3;

  $bb18_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4471;
}



const team_set_mac_address: ref;

axiom team_set_mac_address == $sub.ref(0, 393949);

procedure team_set_mac_address($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.25, $M.26, $CurrAddr;



implementation team_set_mac_address($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i16;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i1;
  var $i14: i8;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $p19: ref;
  var $i20: i8;
  var $i21: i64;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $i32: i1;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $p38: ref;
  var $i39: i64;
  var $i40: i1;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $i46: i1;
  var $p48: ref;
  var $p49: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $i55: i1;
  var $i56: i1;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i64;
  var $i62: i1;
  var $p41: ref;
  var $i18: i32;
  var cmdloc_dummy_var_13: [ref]i8;
  var cmdloc_dummy_var_14: [ref]i8;
  var cmdloc_dummy_var_15: [ref]i8;
  var vslice_dummy_var_75: i32;
  var vslice_dummy_var_76: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 855} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 856} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_4502;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 857} $p5 := netdev_priv($p0);
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_4505;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(540, 1));
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    $i8 := $load.i16($M.0, $p7);
    goto corral_source_split_4507;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i8);
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 1);
    goto corral_source_split_4509;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(581, 1));
    goto corral_source_split_4527;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.0, $p19);
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i64($i20);
    call {:si_unique_call 860} {:cexpr "__len"} boogie_si_record_i64($i21);
    goto corral_source_split_4529;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(840, 1));
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_4531;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_13 := $M.0;
    cmdloc_dummy_var_14 := $M.0;
    call {:si_unique_call 861} cmdloc_dummy_var_15 := $memcpy.i8(cmdloc_dummy_var_13, cmdloc_dummy_var_14, $p23, $p25, $i21, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_15;
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 862} rcu_read_lock();
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 984)), $mul.ref(320, 1)), $mul.ref(0, 1));
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_4537;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p2, $p28);
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.25, $p2);
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 863} $i30 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 864} {:cexpr "tmp___2"} boogie_si_record_i32($i30);
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p29);
    goto corral_source_split_4549;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($p34, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p34, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_4551;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p36);
    goto corral_source_split_4552;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p6, $mul.ref(0, 984)), $mul.ref(320, 1));
    goto corral_source_split_4553;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p38);
    goto corral_source_split_4554;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    $i40 := $ne.i64($i37, $i39);
    goto corral_source_split_4555;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 870} rcu_read_unlock();
    goto corral_source_split_4591;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_4525;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb17:
    assume $i40 == 1;
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    $p41 := $p35;
    goto $bb20;

  $bb20:
    call $p43, $p44, $i45, $i46, $p48, $p49, $p51, $p52, $p53, $i54, $i55, $i56, $p58, $p59, $p60, $i61, $i62, $p41, vslice_dummy_var_76 := team_set_mac_address_loop_$bb20($p3, $p6, $i39, $p43, $p44, $i45, $i46, $p48, $p49, $p51, $p52, $p53, $i54, $i55, $i56, $p58, $p59, $p60, $i61, $i62, $p41, vslice_dummy_var_76);
    goto $bb20_last;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 984)), $mul.ref(376, 1)), $mul.ref(48, 1));
    goto corral_source_split_4561;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p44);
    goto corral_source_split_4563;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    $i46 := $ne.i64($i45, 0);
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p41, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_4570;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_4571;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p3, $p52);
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.26, $p3);
    goto corral_source_split_4573;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 867} $i54 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 868} {:cexpr "tmp___3"} boogie_si_record_i32($i54);
    goto corral_source_split_4574;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i54, 0);
    goto corral_source_split_4575;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i55 == 1);
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p53);
    goto corral_source_split_4583;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($p58, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_4584;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p58, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    $i61 := $p2i.ref.i64($p60);
    goto corral_source_split_4586;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    $i62 := $ne.i64($i61, $i39);
    goto corral_source_split_4587;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i62 == 1);
    goto corral_source_split_4589;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb31:
    assume $i62 == 1;
    assume {:verifier.code 0} true;
    $p41 := $p59;
    goto $bb31_dummy;

  $bb25:
    assume $i55 == 1;
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i8.i1($u0);
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i56 == 1);
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 869} vslice_dummy_var_76 := rcu_read_lock_held();
    goto corral_source_split_4581;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb28:
    assume {:verifier.code 0} true;
    assume $i56 == 1;
    goto $bb27;

  $bb22:
    assume $i46 == 1;
    goto corral_source_split_4566;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 984)), $mul.ref(376, 1)), $mul.ref(48, 1));
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    call {:si_unique_call 866} devirtbounce.4($p49, $p6, $p41);
    goto corral_source_split_4568;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb11:
    assume $i31 == 1;
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i8.i1($u0);
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i32 == 1);
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 865} vslice_dummy_var_75 := rcu_read_lock_held();
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i32 == 1;
    goto $bb13;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 858} $i13 := is_valid_ether_addr($p12);
    goto corral_source_split_4514;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i8($i13);
    call {:si_unique_call 859} {:cexpr "tmp___0"} boogie_si_record_i8($i14);
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i8.i1($i14);
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb6:
    assume $i17 == 1;
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 99);
    goto $bb8;

  $bb3:
    assume $i15 == 1;
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb5;

  $bb31_dummy:
    assume false;
    return;

  $bb20_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4559;
}



const team_change_mtu: ref;

axiom team_change_mtu == $sub.ref(0, 394981);

procedure team_change_mtu($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation team_change_mtu($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $p16: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $p47: ref;
  var $i48: i64;
  var $i49: i1;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i64;
  var $i63: i1;
  var $p50: ref;
  var $p64: ref;
  var $p65: ref;
  var $i39: i32;
  var vslice_dummy_var_77: i32;
  var vslice_dummy_var_78: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 871} {:cexpr "team_change_mtu:arg:new_mtu"} boogie_si_record_i32($i1);
    goto corral_source_split_4593;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 872} $p2 := netdev_priv($p0);
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4595;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 984)), $mul.ref(16, 1));
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 873} mutex_lock_nested($p4, 0);
    goto corral_source_split_4597;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 984)), $mul.ref(464, 1));
    goto corral_source_split_4598;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p5, 1);
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 984)), $mul.ref(320, 1)), $mul.ref(0, 1));
    goto corral_source_split_4600;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p9, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_4603;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p9, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_4604;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_4605;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 984)), $mul.ref(320, 1));
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_4607;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i12, $i14);
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p3, $mul.ref(0, 984)), $mul.ref(464, 1));
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p36, 0);
    goto corral_source_split_4647;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p3, $mul.ref(0, 984)), $mul.ref(16, 1));
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 877} mutex_unlock($p37);
    goto corral_source_split_4649;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(536, 1));
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p38, $i1);
    goto corral_source_split_4651;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    $i39 := 0;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_4653;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    $r := $i39;
    return;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_4610;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    $p16 := $p10;
    goto $bb4;

  $bb4:
    call $p17, $p18, $i19, $i20, $p21, $i22, $p29, $p30, $p31, $p32, $p33, $i34, $i35, $p16 := team_change_mtu_loop_$bb4($i1, $i14, $p17, $p18, $i19, $i20, $p21, $i22, $p29, $p30, $p31, $p32, $p33, $i34, $i35, $p16);
    goto $bb4_last;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_4615;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 874} $i19 := dev_set_mtu($p18, $i1);
    call {:si_unique_call 875} {:cexpr "err"} boogie_si_record_i32($i19);
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    $p21, $i22 := $p16, $i19;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p16, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_4636;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($p31, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_4639;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p31, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p33);
    goto corral_source_split_4641;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, $i14);
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i35 == 1);
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i35 == 1;
    assume {:verifier.code 0} true;
    $p16 := $p32;
    goto $bb10_dummy;

  $bb6:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p21, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_4620;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_4621;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 3176)), $mul.ref(0, 1));
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_4623;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} vslice_dummy_var_77 := netdev_err.ref.ref.ref($p0, .str.60, $p26);
    goto corral_source_split_4624;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p21, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_4626;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_4628;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($p43, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_4629;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p43, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_4630;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p45);
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p3, $mul.ref(0, 984)), $mul.ref(320, 1));
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    $i48 := $p2i.ref.i64($p47);
    goto corral_source_split_4633;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    $i49 := $ne.i64($i46, $i48);
    goto corral_source_split_4634;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i49 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p3, $mul.ref(0, 984)), $mul.ref(464, 1));
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p64, 0);
    goto corral_source_split_4675;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p3, $mul.ref(0, 984)), $mul.ref(16, 1));
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 879} mutex_unlock($p65);
    goto corral_source_split_4677;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    $i39 := $i22;
    goto $bb13;

  $bb14:
    assume $i49 == 1;
    goto corral_source_split_4655;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    $p50 := $p44;
    goto $bb17;

  $bb17:
    call $p51, $p52, $p53, $i54, $p57, $p58, $p59, $p60, $p61, $i62, $i63, $p50, vslice_dummy_var_78 := team_change_mtu_loop_$bb17($p0, $i48, $p51, $p52, $p53, $i54, $p57, $p58, $p59, $p60, $p61, $i62, $i63, $p50, vslice_dummy_var_78);
    goto $bb17_last;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_4659;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(536, 1));
    goto corral_source_split_4661;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p53);
    goto corral_source_split_4662;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 878} vslice_dummy_var_78 := dev_set_mtu($p52, $i54);
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p50, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_4664;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_4665;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p58);
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($p59, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_4667;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p59, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    $i62 := $p2i.ref.i64($p61);
    goto corral_source_split_4669;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    $i63 := $ne.i64($i62, $i48);
    goto corral_source_split_4670;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i63 == 1);
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb19:
    assume $i63 == 1;
    assume {:verifier.code 0} true;
    $p50 := $p60;
    goto $bb19_dummy;

  $bb19_dummy:
    assume false;
    return;

  $bb17_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4657;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4612;
}



const team_get_stats64: ref;

axiom team_get_stats64 == $sub.ref(0, 396013);

procedure team_get_stats64($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation team_get_stats64($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i64;
  var $p17: ref;
  var $i18: i64;
  var $i19: i64;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $i24: i64;
  var $p25: ref;
  var $i26: i64;
  var $p27: ref;
  var $i28: i64;
  var $p29: ref;
  var $i30: i64;
  var $p31: ref;
  var $i32: i64;
  var $p33: ref;
  var $i34: i1;
  var $i35: i8;
  var $i36: i1;
  var $i37: i64;
  var $i38: i64;
  var $i39: i64;
  var $i40: i64;
  var $i41: i64;
  var $p42: ref;
  var $i43: i64;
  var $i44: i64;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $i48: i64;
  var $p49: ref;
  var $p50: ref;
  var $i51: i64;
  var $i52: i64;
  var $p53: ref;
  var $p54: ref;
  var $i55: i64;
  var $i56: i64;
  var $p57: ref;
  var $p58: ref;
  var $i59: i64;
  var $i60: i64;
  var $p61: ref;
  var $p62: ref;
  var $i63: i32;
  var $i64: i32;
  var $p65: ref;
  var $i66: i32;
  var $i67: i32;
  var $p68: ref;
  var $i69: i32;
  var $i70: i32;
  var $i71: i1;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i72: i32;
  var $i73: i32;
  var $i8: i32;
  var $i9: i32;
  var $i74: i64;
  var $p75: ref;
  var $i76: i64;
  var $p77: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4679;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} $p2 := netdev_priv($p0);
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4681;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, cpu_possible_mask);
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 881} $i5 := cpumask_next($sub.i32(0, 1), $p4);
    call {:si_unique_call 882} {:cexpr "tmp___1"} boogie_si_record_i32($i5);
    goto corral_source_split_4683;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i5, $i6);
    goto corral_source_split_4685;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    $i8, $i9 := 0, 0;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i74 := $zext.i32.i64($i8);
    goto corral_source_split_4754;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(48, 1));
    goto corral_source_split_4755;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p75, $i74);
    goto corral_source_split_4756;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    $i76 := $zext.i32.i64($i9);
    goto corral_source_split_4757;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(56, 1));
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p77, $i76);
    goto corral_source_split_4759;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_4687;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    $i10, $i11, $i12 := $i5, 0, 0;
    goto $bb4;

  $bb4:
    call $p13, $p14, $i15, $i16, $p17, $i18, $i19, $p20, $p21, $i22, $p23, $i24, $p25, $i26, $p27, $i28, $p29, $i30, $p31, $i32, $p33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $p42, $i43, $i44, $p45, $p46, $i47, $i48, $p49, $p50, $i51, $i52, $p53, $p54, $i55, $i56, $p57, $p58, $i59, $i60, $p61, $p62, $i63, $i64, $p65, $i66, $i67, $p68, $i69, $i70, $i71, $i10, $i11, $i12, $i72, $i73 := team_get_stats64_loop_$bb4($p1, $p3, $p13, $p14, $i15, $i16, $p17, $i18, $i19, $p20, $p21, $i22, $p23, $i24, $p25, $i26, $p27, $i28, $p29, $i30, $p31, $i32, $p33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $p42, $i43, $i44, $p45, $p46, $i47, $i48, $p49, $p50, $i51, $i52, $p53, $p54, $i55, $i56, $p57, $p58, $i59, $i60, $p61, $p62, $i63, $i64, $p65, $i66, $i67, $p68, $i69, $i70, $i71, $i10, $i11, $i12, $i72, $i73);
    goto $bb4_last;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 984)), $mul.ref(8, 1));
    goto corral_source_split_4691;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    call {:si_unique_call 883} $i15 := devirtbounce.12(0, $p14);
    call {:si_unique_call 884} {:cexpr "__ptr"} boogie_si_record_i64($i15);
    goto corral_source_split_4692;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i10);
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref($i16, 8));
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.0, $p17);
    goto corral_source_split_4695;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    $i19 := $add.i64($i18, $i15);
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    $p20 := $i2p.i64.ref($i19);
    goto corral_source_split_4697;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    call $p21, $i22, $p23, $i24, $p25, $i26, $p27, $i28, $p29, $i30, $p31, $i32, $p33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41 := team_get_stats64_loop_$bb6($p20, $p21, $i22, $p23, $i24, $p25, $i26, $p27, $i28, $p29, $i30, $p31, $i32, $p33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41);
    goto $bb6_last;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} $i22 := u64_stats_fetch_begin_irq($p21);
    call {:si_unique_call 886} {:cexpr "start"} boogie_si_record_i32($i22);
    goto corral_source_split_4700;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p20, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_4701;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    $i24 := $load.i64($M.0, $p23);
    call {:si_unique_call 887} {:cexpr "rx_packets"} boogie_si_record_i64($i24);
    goto corral_source_split_4702;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p20, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_4703;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    $i26 := $load.i64($M.0, $p25);
    call {:si_unique_call 888} {:cexpr "rx_bytes"} boogie_si_record_i64($i26);
    goto corral_source_split_4704;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p20, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_4705;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    $i28 := $load.i64($M.0, $p27);
    call {:si_unique_call 889} {:cexpr "rx_multicast"} boogie_si_record_i64($i28);
    goto corral_source_split_4706;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p20, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_4707;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.0, $p29);
    call {:si_unique_call 890} {:cexpr "tx_packets"} boogie_si_record_i64($i30);
    goto corral_source_split_4708;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p20, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_4709;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    $i32 := $load.i64($M.0, $p31);
    call {:si_unique_call 891} {:cexpr "tx_bytes"} boogie_si_record_i64($i32);
    goto corral_source_split_4710;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p20, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 892} $i34 := u64_stats_fetch_retry_irq($p33, $i22);
    goto corral_source_split_4712;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    $i35 := $zext.i1.i8($i34);
    call {:si_unique_call 893} {:cexpr "tmp___0"} boogie_si_record_i8($i35);
    goto corral_source_split_4713;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i8.i1($i35);
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    $i37, $i38, $i39, $i40, $i41 := $i24, $i26, $i28, $i30, $i32;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_4716;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    $i43 := $load.i64($M.0, $p42);
    goto corral_source_split_4717;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    $i44 := $add.i64($i43, $i37);
    goto corral_source_split_4718;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_4719;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p45, $i44);
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(16, 1));
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    $i47 := $load.i64($M.0, $p46);
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    $i48 := $add.i64($i47, $i38);
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(16, 1));
    goto corral_source_split_4724;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p49, $i48);
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(64, 1));
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    $i51 := $load.i64($M.0, $p50);
    goto corral_source_split_4727;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    $i52 := $add.i64($i51, $i39);
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(64, 1));
    goto corral_source_split_4729;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p53, $i52);
    goto corral_source_split_4730;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(8, 1));
    goto corral_source_split_4731;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    $i55 := $load.i64($M.0, $p54);
    goto corral_source_split_4732;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    $i56 := $add.i64($i55, $i40);
    goto corral_source_split_4733;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(8, 1));
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p57, $i56);
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(24, 1));
    goto corral_source_split_4736;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    $i59 := $load.i64($M.0, $p58);
    goto corral_source_split_4737;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    $i60 := $add.i64($i59, $i41);
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(24, 1));
    goto corral_source_split_4739;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p61, $i60);
    goto corral_source_split_4740;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p20, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_4741;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.0, $p62);
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    $i64 := $add.i32($i63, $i12);
    call {:si_unique_call 894} {:cexpr "rx_dropped"} boogie_si_record_i32($i64);
    goto corral_source_split_4743;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p20, $mul.ref(0, 48)), $mul.ref(44, 1));
    goto corral_source_split_4744;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.0, $p65);
    goto corral_source_split_4745;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    $i67 := $add.i32($i66, $i11);
    call {:si_unique_call 895} {:cexpr "tx_dropped"} boogie_si_record_i32($i67);
    goto corral_source_split_4746;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, cpu_possible_mask);
    goto corral_source_split_4747;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 896} $i69 := cpumask_next($i10, $p68);
    call {:si_unique_call 897} {:cexpr "tmp___1"} boogie_si_record_i32($i69);
    goto corral_source_split_4748;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_4749;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    $i71 := $slt.i32($i69, $i70);
    goto corral_source_split_4750;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    $i72, $i73 := $i64, $i67;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4752;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    $i8, $i9 := $i72, $i73;
    goto $bb3;

  $bb10:
    assume $i71 == 1;
    assume {:verifier.code 0} true;
    $i10, $i11, $i12 := $i69, $i67, $i64;
    goto $bb10_dummy;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i36 == 1;
    goto $bb7_dummy;

  $bb7_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_4699;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4689;
}



const team_vlan_rx_add_vid: ref;

axiom team_vlan_rx_add_vid == $sub.ref(0, 397045);

procedure team_vlan_rx_add_vid($p0: ref, $i1: i16, $i2: i16) returns ($r: i32);
  free requires assertsPassed;



implementation team_vlan_rx_add_vid($p0: ref, $i1: i16, $i2: i16) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i16;
  var $i21: i32;
  var $i22: i16;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $i26: i32;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;
  var $p16: ref;
  var $p35: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i64;
  var $p44: ref;
  var $i45: i64;
  var $i46: i1;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $i51: i16;
  var $i52: i32;
  var $i53: i16;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i64;
  var $i61: i1;
  var $p47: ref;
  var $p62: ref;
  var $i36: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 898} {:cexpr "team_vlan_rx_add_vid:arg:proto"} boogie_si_record_i16($i1);
    call {:si_unique_call 899} {:cexpr "team_vlan_rx_add_vid:arg:vid"} boogie_si_record_i16($i2);
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} $p3 := netdev_priv($p0);
    goto corral_source_split_4762;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4763;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 984)), $mul.ref(16, 1));
    goto corral_source_split_4764;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 901} mutex_lock_nested($p5, 0);
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 984)), $mul.ref(320, 1)), $mul.ref(0, 1));
    goto corral_source_split_4766;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_4768;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p9, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p9, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_4771;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 984)), $mul.ref(320, 1));
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_4773;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i12, $i14);
    goto corral_source_split_4774;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p4, $mul.ref(0, 984)), $mul.ref(16, 1));
    goto corral_source_split_4811;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 904} mutex_unlock($p35);
    goto corral_source_split_4812;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    $i36 := 0;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    $r := $i36;
    return;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_4776;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    $p16 := $p10;
    goto $bb4;

  $bb4:
    call $p17, $p18, $i19, $i20, $i21, $i22, $i23, $i24, $p25, $i26, $p28, $p29, $p30, $p31, $p32, $i33, $i34, $p16 := team_vlan_rx_add_vid_loop_$bb4($i1, $i2, $i14, $p17, $p18, $i19, $i20, $i21, $i22, $i23, $i24, $p25, $i26, $p28, $p29, $p30, $p31, $p32, $i33, $i34, $p16);
    goto $bb4_last;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_4781;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    $i19 := $zext.i16.i32($i1);
    goto corral_source_split_4782;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i16($i19);
    goto corral_source_split_4783;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    $i21 := $zext.i16.i32($i2);
    goto corral_source_split_4784;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i32.i16($i21);
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 902} $i23 := vlan_vid_add($p18, $i20, $i22);
    call {:si_unique_call 903} {:cexpr "err"} boogie_si_record_i32($i23);
    goto corral_source_split_4786;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_4787;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    $p25, $i26 := $p16, $i23;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p16, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_4801;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_4803;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($p30, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_4804;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p30, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_4805;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p32);
    goto corral_source_split_4806;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, $i14);
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i34 == 1);
    goto corral_source_split_4809;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    $p16 := $p31;
    goto $bb10_dummy;

  $bb6:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p25, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_4791;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_4792;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_4793;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($p40, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_4794;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p40, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p42);
    goto corral_source_split_4796;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p4, $mul.ref(0, 984)), $mul.ref(320, 1));
    goto corral_source_split_4797;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p44);
    goto corral_source_split_4798;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    $i46 := $ne.i64($i43, $i45);
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p4, $mul.ref(0, 984)), $mul.ref(16, 1));
    goto corral_source_split_4837;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 906} mutex_unlock($p62);
    goto corral_source_split_4838;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    $i36 := $i26;
    goto $bb13;

  $bb14:
    assume $i46 == 1;
    goto corral_source_split_4816;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    $p47 := $p41;
    goto $bb17;

  $bb17:
    call $p48, $p49, $i50, $i51, $i52, $i53, $p55, $p56, $p57, $p58, $p59, $i60, $i61, $p47 := team_vlan_rx_add_vid_loop_$bb17($i1, $i2, $i45, $p48, $p49, $i50, $i51, $i52, $i53, $p55, $p56, $p57, $p58, $p59, $i60, $i61, $p47);
    goto $bb17_last;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p47, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_4820;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    $i50 := $zext.i16.i32($i1);
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i32.i16($i50);
    goto corral_source_split_4823;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    $i52 := $zext.i16.i32($i2);
    goto corral_source_split_4824;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i32.i16($i52);
    goto corral_source_split_4825;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 905} vlan_vid_del($p49, $i51, $i53);
    goto corral_source_split_4826;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p47, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_4827;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_4828;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p56);
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($p57, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p57, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_4831;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    $i60 := $p2i.ref.i64($p59);
    goto corral_source_split_4832;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    $i61 := $ne.i64($i60, $i45);
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i61 == 1);
    goto corral_source_split_4835;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb19:
    assume $i61 == 1;
    assume {:verifier.code 0} true;
    $p47 := $p58;
    goto $bb19_dummy;

  $bb19_dummy:
    assume false;
    return;

  $bb17_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4818;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4778;
}



const team_vlan_rx_kill_vid: ref;

axiom team_vlan_rx_kill_vid == $sub.ref(0, 398077);

procedure team_vlan_rx_kill_vid($p0: ref, $i1: i16, $i2: i16) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.27, $M.28, $CurrAddr, $M.0;



implementation team_vlan_rx_kill_vid($p0: ref, $i1: i16, $i2: i16) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i16;
  var $i27: i32;
  var $i28: i16;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $i35: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $i41: i1;
  var $p22: ref;
  var vslice_dummy_var_79: i32;
  var vslice_dummy_var_80: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 907} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 908} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 909} {:cexpr "team_vlan_rx_kill_vid:arg:proto"} boogie_si_record_i16($i1);
    call {:si_unique_call 910} {:cexpr "team_vlan_rx_kill_vid:arg:vid"} boogie_si_record_i16($i2);
    goto corral_source_split_4840;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 911} $p5 := netdev_priv($p0);
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 912} rcu_read_lock();
    goto corral_source_split_4843;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 984)), $mul.ref(320, 1)), $mul.ref(0, 1));
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_4845;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    $M.27 := $store.ref($M.27, $p3, $p9);
    goto corral_source_split_4846;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.27, $p3);
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 913} $i11 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 914} {:cexpr "tmp___0"} boogie_si_record_i32($i11);
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p10);
    goto corral_source_split_4857;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p15, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_4858;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p15, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_4859;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_4860;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p6, $mul.ref(0, 984)), $mul.ref(320, 1));
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_4862;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i18, $i20);
    goto corral_source_split_4863;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 920} rcu_read_unlock();
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb7:
    assume $i21 == 1;
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    $p22 := $p16;
    goto $bb10;

  $bb10:
    call $p23, $p24, $i25, $i26, $i27, $i28, $p30, $p31, $p32, $i33, $i34, $i35, $p37, $p38, $p39, $i40, $i41, $p22, vslice_dummy_var_80 := team_vlan_rx_kill_vid_loop_$bb10($i1, $i2, $p4, $i20, $p23, $p24, $i25, $i26, $i27, $i28, $p30, $p31, $p32, $i33, $i34, $i35, $p37, $p38, $p39, $i40, $i41, $p22, vslice_dummy_var_80);
    goto $bb10_last;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_4869;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_4870;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    $i25 := $zext.i16.i32($i1);
    goto corral_source_split_4871;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i32.i16($i25);
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    $i27 := $zext.i16.i32($i2);
    goto corral_source_split_4873;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i32.i16($i27);
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 916} vlan_vid_del($p24, $i26, $i28);
    goto corral_source_split_4875;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p22, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_4876;

  corral_source_split_4876:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_4877;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    $M.28 := $store.ref($M.28, $p4, $p31);
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.28, $p4);
    goto corral_source_split_4879;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 917} $i33 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 918} {:cexpr "tmp___1"} boogie_si_record_i32($i33);
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_4881;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p32);
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($p37, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_4890;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p37, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p39);
    goto corral_source_split_4892;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    $i41 := $ne.i64($i40, $i20);
    goto corral_source_split_4893;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i41 == 1);
    goto corral_source_split_4895;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb18:
    assume $i41 == 1;
    assume {:verifier.code 0} true;
    $p22 := $p38;
    goto $bb18_dummy;

  $bb12:
    assume $i34 == 1;
    goto corral_source_split_4883;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i8.i1($u0);
    goto corral_source_split_4884;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i35 == 1);
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 919} vslice_dummy_var_80 := rcu_read_lock_held();
    goto corral_source_split_4887;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb15:
    assume {:verifier.code 0} true;
    assume $i35 == 1;
    goto $bb14;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_4851;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i8.i1($u0);
    goto corral_source_split_4852;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 915} vslice_dummy_var_79 := rcu_read_lock_held();
    goto corral_source_split_4855;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb3;

  $bb18_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4867;
}



const team_poll_controller: ref;

axiom team_poll_controller == $sub.ref(0, 399109);

procedure team_poll_controller($p0: ref);
  free requires assertsPassed;



implementation team_poll_controller($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4899;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    return;
}



const team_netpoll_setup: ref;

axiom team_netpoll_setup == $sub.ref(0, 400141);

procedure team_netpoll_setup($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation team_netpoll_setup($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p16: ref;
  var $i29: i32;
  var $i15: i32;
  var $i20: i32;
  var $p30: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4901;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 921} $p2 := netdev_priv($p0);
    goto corral_source_split_4902;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4903;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 984)), $mul.ref(16, 1));
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 922} mutex_lock_nested($p4, 0);
    goto corral_source_split_4905;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 984)), $mul.ref(320, 1)), $mul.ref(0, 1));
    goto corral_source_split_4906;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_4908;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p8, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_4909;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p8, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_4911;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 984)), $mul.ref(320, 1));
    goto corral_source_split_4912;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_4913;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i11, $i13);
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    $i15 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i20 := $i15;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_4926;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p3, $mul.ref(0, 984)), $mul.ref(16, 1));
    goto corral_source_split_4927;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 926} mutex_unlock($p30);
    goto corral_source_split_4928;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_4916;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    $p16 := $p9;
    goto $bb4;

  $bb4:
    call $i17, $i18, $i19, $p22, $p23, $p24, $p25, $p26, $i27, $i28, $p16, $i29 := team_netpoll_setup_loop_$bb4($p3, $i13, $i17, $i18, $i19, $p22, $p23, $p24, $p25, $p26, $i27, $i28, $p16, $i29);
    goto $bb4_last;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 923} $i17 := team_port_enable_netpoll($p3, $p16);
    call {:si_unique_call 924} {:cexpr "err"} boogie_si_record_i32($i17);
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_4921;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    $i19 := $i17;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p16, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_4930;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p24, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_4933;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p24, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_4934;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_4935;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, $i13);
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    $i29 := $i17;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    $i15 := $i29;
    goto $bb3;

  $bb10:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    $p16 := $p25;
    goto $bb10_dummy;

  $bb6:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4923;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 925} __team_netpoll_cleanup($p3);
    goto corral_source_split_4924;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    $i20 := $i19;
    goto $bb8;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4918;
}



const team_netpoll_cleanup: ref;

axiom team_netpoll_cleanup == $sub.ref(0, 401173);

procedure team_netpoll_cleanup($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation team_netpoll_cleanup($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4940;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 927} $p1 := netdev_priv($p0);
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4942;

  corral_source_split_4942:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 984)), $mul.ref(16, 1));
    goto corral_source_split_4943;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 928} mutex_lock_nested($p3, 0);
    goto corral_source_split_4944;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 929} __team_netpoll_cleanup($p2);
    goto corral_source_split_4945;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 984)), $mul.ref(16, 1));
    goto corral_source_split_4946;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 930} mutex_unlock($p4);
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    return;
}



const team_add_slave: ref;

axiom team_add_slave == $sub.ref(0, 402205);

procedure team_add_slave($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $CurrAddr, $M.16, $M.25, $M.26, $M.31, $M.32, $M.23, $M.24, $M.4, $M.3;



implementation team_add_slave($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4949;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 931} $p2 := netdev_priv($p0);
    goto corral_source_split_4950;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4951;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 984)), $mul.ref(16, 1));
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 932} mutex_lock_nested($p4, 0);
    goto corral_source_split_4953;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 933} $i5 := team_port_add($p3, $p1);
    call {:si_unique_call 934} {:cexpr "err"} boogie_si_record_i32($i5);
    goto corral_source_split_4954;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 984)), $mul.ref(16, 1));
    goto corral_source_split_4955;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 935} mutex_unlock($p6);
    goto corral_source_split_4956;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const team_fix_features: ref;

axiom team_fix_features == $sub.ref(0, 403237);

procedure team_fix_features($p0: ref, $i1: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.29, $M.30, $CurrAddr, $M.0;



implementation team_fix_features($p0: ref, $i1: i64) returns ($r: i64)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i64;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $i37: i1;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $i43: i1;
  var $p24: ref;
  var $i25: i64;
  var $i44: i64;
  var $i23: i64;
  var vslice_dummy_var_81: i32;
  var vslice_dummy_var_82: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 936} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 937} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 938} {:cexpr "team_fix_features:arg:features"} boogie_si_record_i64($i1);
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 939} $p4 := netdev_priv($p0);
    goto corral_source_split_4959;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    call {:si_unique_call 940} {:cexpr "team_fix_features:arg:mask"} boogie_si_record_i64($i1);
    goto corral_source_split_4960;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    $i6 := $and.i64($i1, $sub.i64(0, 2032738));
    call {:si_unique_call 941} {:cexpr "features"} boogie_si_record_i64($i6);
    goto corral_source_split_4961;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    $i7 := $or.i64($i6, 34361835520);
    call {:si_unique_call 942} {:cexpr "features"} boogie_si_record_i64($i7);
    goto corral_source_split_4962;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 943} rcu_read_lock();
    goto corral_source_split_4963;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 984)), $mul.ref(320, 1)), $mul.ref(0, 1));
    goto corral_source_split_4964;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_4965;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    $M.29 := $store.ref($M.29, $p2, $p10);
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.29, $p2);
    goto corral_source_split_4967;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 944} $i12 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 945} {:cexpr "tmp___0"} boogie_si_record_i32($i12);
    goto corral_source_split_4968;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p11);
    goto corral_source_split_4977;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p16, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_4978;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p16, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_4980;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p5, $mul.ref(0, 984)), $mul.ref(320, 1));
    goto corral_source_split_4981;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_4982;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i19, $i21);
    goto corral_source_split_4983;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    $i23 := $i7;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 952} rcu_read_unlock();
    goto corral_source_split_5015;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    $r := $i23;
    return;

  $bb7:
    assume $i22 == 1;
    goto corral_source_split_4985;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    $p24, $i25 := $p17, $i7;
    goto $bb10;

  $bb10:
    call $p26, $p27, $p28, $i29, $i30, $p32, $p33, $p34, $i35, $i36, $i37, $p39, $p40, $p41, $i42, $i43, $p24, $i25, $i44, vslice_dummy_var_82 := team_fix_features_loop_$bb10($i1, $p3, $i21, $p26, $p27, $p28, $i29, $i30, $p32, $p33, $p34, $i35, $i36, $i37, $p39, $p40, $p41, $i42, $i43, $p24, $i25, $i44, vslice_dummy_var_82);
    goto $bb10_last;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p24, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_4989;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_4990;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 3176)), $mul.ref(208, 1));
    goto corral_source_split_4991;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    $i29 := $load.i64($M.0, $p28);
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 947} $i30 := netdev_increment_features($i25, $i29, $i1);
    call {:si_unique_call 948} {:cexpr "features"} boogie_si_record_i64($i30);
    goto corral_source_split_4993;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p24, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_4994;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_4995;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    $M.30 := $store.ref($M.30, $p3, $p33);
    goto corral_source_split_4996;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.30, $p3);
    goto corral_source_split_4997;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 949} $i35 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 950} {:cexpr "tmp___1"} boogie_si_record_i32($i35);
    goto corral_source_split_4998;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_4999;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p34);
    goto corral_source_split_5007;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($p39, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_5008;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p39, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_5009;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p41);
    goto corral_source_split_5010;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    $i43 := $ne.i64($i42, $i21);
    goto corral_source_split_5011;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    $i44 := $i30;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    $i23 := $i44;
    goto $bb9;

  $bb18:
    assume $i43 == 1;
    assume {:verifier.code 0} true;
    $p24, $i25 := $p40, $i30;
    goto $bb18_dummy;

  $bb12:
    assume $i36 == 1;
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i8.i1($u0);
    goto corral_source_split_5002;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i37 == 1);
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 951} vslice_dummy_var_82 := rcu_read_lock_held();
    goto corral_source_split_5005;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb15:
    assume {:verifier.code 0} true;
    assume $i37 == 1;
    goto $bb14;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_4971;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i8.i1($u0);
    goto corral_source_split_4972;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    goto corral_source_split_4974;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 946} vslice_dummy_var_81 := rcu_read_lock_held();
    goto corral_source_split_4975;

  corral_source_split_4975:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb3;

  $bb18_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4987;
}



const team_change_carrier: ref;

axiom team_change_carrier == $sub.ref(0, 404269);

procedure team_change_carrier($p0: ref, $i1: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation team_change_carrier($p0: ref, $i1: i1) returns ($r: i32)
{
  var $i2: i8;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 953} {:cexpr "team_change_carrier:arg:new_carrier"} boogie_si_record_i1($i1);
    goto corral_source_split_5017;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 954} $p3 := netdev_priv($p0);
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5019;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 984)), $mul.ref(448, 1));
    goto corral_source_split_5020;

  corral_source_split_5020:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p5, 1);
    goto corral_source_split_5021;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i2);
    goto corral_source_split_5022;

  corral_source_split_5022:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_5027;

  corral_source_split_5027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 956} netif_carrier_off($p0);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_5024;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 955} netif_carrier_on($p0);
    goto corral_source_split_5025;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const rcu_read_lock: ref;

axiom rcu_read_lock == $sub.ref(0, 405301);

procedure rcu_read_lock();
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation rcu_read_lock()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5029;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 957} __rcu_read_lock();
    goto corral_source_split_5030;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 958} rcu_lock_acquire(rcu_lock_map);
    goto corral_source_split_5031;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 959} $i0 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 960} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_5032;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_5033;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_5035;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i8.i1(1);
    goto corral_source_split_5036;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    goto corral_source_split_5038;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 961} $i3 := rcu_is_watching();
    goto corral_source_split_5039;

  corral_source_split_5039:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 962} {:cexpr "tmp___0"} boogie_si_record_i8($i4);
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_5041;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_5045;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_5046;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i7 == 1;
    goto corral_source_split_5048;

  corral_source_split_5048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 963} lockdep_rcu_suspicious(.str.4, 871, .str.5);
    goto corral_source_split_5049;

  corral_source_split_5049:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb6:
    assume $i5 == 1;
    goto corral_source_split_5043;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb3;
}



const rcu_read_lock_held: ref;

axiom rcu_read_lock_held == $sub.ref(0, 406333);

procedure rcu_read_lock_held() returns ($r: i32);
  free requires assertsPassed;



implementation rcu_read_lock_held() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;
  var $i9: i8;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 964} $i0 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 965} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_5052;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_5053;

  corral_source_split_5053:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 966} $i3 := rcu_is_watching();
    goto corral_source_split_5059;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 967} {:cexpr "tmp___0"} boogie_si_record_i8($i4);
    goto corral_source_split_5060;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_5061;

  corral_source_split_5061:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_5065;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_5066;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 968} $i8 := rcu_lockdep_current_cpu_online();
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i8($i8);
    call {:si_unique_call 969} {:cexpr "tmp___2"} boogie_si_record_i8($i9);
    goto corral_source_split_5071;

  corral_source_split_5071:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1($i9);
    goto corral_source_split_5072;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := 1;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_5076;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_5077;

  corral_source_split_5077:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 970} $i13 := lock_is_held(rcu_lock_map);
    call {:si_unique_call 971} {:cexpr "tmp___4"} boogie_si_record_i32($i13);
    goto corral_source_split_5081;

  corral_source_split_5081:
    assume {:verifier.code 0} true;
    $i2 := $i13;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5057;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  $bb14:
    assume $i12 == 1;
    goto corral_source_split_5079;

  corral_source_split_5079:
    assume {:verifier.code 0} true;
    $i2 := 0;
    goto $bb3;

  $bb11:
    assume $i10 == 1;
    goto corral_source_split_5074;

  corral_source_split_5074:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb13;

  $bb8:
    assume $i7 == 1;
    goto corral_source_split_5068;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    $i2 := 0;
    goto $bb3;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_5063;

  corral_source_split_5063:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb7;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_5055;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    $i2 := 1;
    goto $bb3;
}



const rcu_read_unlock: ref;

axiom rcu_read_unlock == $sub.ref(0, 407365);

procedure rcu_read_unlock();
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation rcu_read_unlock()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5083;

  corral_source_split_5083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 972} $i0 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 973} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_5084;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_5085;

  corral_source_split_5085:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 977} rcu_lock_release(rcu_lock_map);
    goto corral_source_split_5103;

  corral_source_split_5103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 978} __rcu_read_unlock();
    goto corral_source_split_5104;

  corral_source_split_5104:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_5087;

  corral_source_split_5087:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i8.i1(1);
    goto corral_source_split_5088;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    goto corral_source_split_5090;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 974} $i3 := rcu_is_watching();
    goto corral_source_split_5091;

  corral_source_split_5091:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 975} {:cexpr "tmp___0"} boogie_si_record_i8($i4);
    goto corral_source_split_5092;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_5093;

  corral_source_split_5093:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_5097;

  corral_source_split_5097:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_5098;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i7 == 1;
    goto corral_source_split_5100;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 976} lockdep_rcu_suspicious(.str.4, 892, .str.6);
    goto corral_source_split_5101;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb6:
    assume $i5 == 1;
    goto corral_source_split_5095;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb3;
}



const rcu_is_watching: ref;

axiom rcu_is_watching == $sub.ref(0, 408397);

procedure rcu_is_watching() returns ($r: i1);
  free requires assertsPassed;



implementation rcu_is_watching() returns ($r: i1)
{
  var $i0: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5106;

  corral_source_split_5106:
    assume {:verifier.code 1} true;
    call {:si_unique_call 979} $i0 := __VERIFIER_nondet_bool();
    call {:si_unique_call 980} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i0);
    goto corral_source_split_5107;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const rcu_lock_release: ref;

axiom rcu_lock_release == $sub.ref(0, 409429);

procedure rcu_lock_release($p0: ref);
  free requires assertsPassed;



implementation rcu_lock_release($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5109;

  corral_source_split_5109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 981} lock_release($p0, 1, 0);
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    return;
}



const __rcu_read_unlock: ref;

axiom __rcu_read_unlock == $sub.ref(0, 410461);

procedure __rcu_read_unlock();
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation __rcu_read_unlock()
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 982} devirtbounce.5(0);
    goto corral_source_split_5112;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 983} __preempt_count_sub(1);
    goto corral_source_split_5113;

  corral_source_split_5113:
    assume {:verifier.code 0} true;
    return;
}



const __preempt_count_sub: ref;

axiom __preempt_count_sub == $sub.ref(0, 411493);

procedure __preempt_count_sub($i0: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation __preempt_count_sub($i0: i32)
{
  var $i1: i1;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 984} {:cexpr "__preempt_count_sub:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_5115;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32(0, 1);
    goto corral_source_split_5116;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_5120;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32(0, $sub.i32(0, 1));
    goto corral_source_split_5121;

  corral_source_split_5121:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32(0, $i0);
    call {:si_unique_call 987} devirtbounce.9(0, __preempt_count, $i3, __preempt_count);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i2 == 1;
    call {:si_unique_call 986} devirtbounce.8(0, __preempt_count, __preempt_count);
    goto corral_source_split_5123;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i1 == 1;
    call {:si_unique_call 985} devirtbounce.8(0, __preempt_count, __preempt_count);
    goto corral_source_split_5118;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const lock_release: ref;

axiom lock_release == $sub.ref(0, 412525);

procedure lock_release($p0: ref, $i1: i32, $i2: i64);
  free requires assertsPassed;



implementation lock_release($p0: ref, $i1: i32, $i2: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 988} {:cexpr "lock_release:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 989} {:cexpr "lock_release:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_5127;

  corral_source_split_5127:
    assume {:verifier.code 0} true;
    return;
}



const rcu_lockdep_current_cpu_online: ref;

axiom rcu_lockdep_current_cpu_online == $sub.ref(0, 413557);

procedure rcu_lockdep_current_cpu_online() returns ($r: i1);
  free requires assertsPassed;



implementation rcu_lockdep_current_cpu_online() returns ($r: i1)
{
  var $i0: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5129;

  corral_source_split_5129:
    assume {:verifier.code 1} true;
    call {:si_unique_call 990} $i0 := __VERIFIER_nondet_bool();
    call {:si_unique_call 991} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i0);
    goto corral_source_split_5130;

  corral_source_split_5130:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const lock_is_held: ref;

axiom lock_is_held == $sub.ref(0, 414589);

procedure lock_is_held($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation lock_is_held($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 1} true;
    call {:si_unique_call 992} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 993} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5133;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __rcu_read_lock: ref;

axiom __rcu_read_lock == $sub.ref(0, 415621);

procedure __rcu_read_lock();
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation __rcu_read_lock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5135;

  corral_source_split_5135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 994} __preempt_count_add(1);
    call {:si_unique_call 995} devirtbounce.5(0);
    goto corral_source_split_5136;

  corral_source_split_5136:
    assume {:verifier.code 0} true;
    return;
}



const rcu_lock_acquire: ref;

axiom rcu_lock_acquire == $sub.ref(0, 416653);

procedure rcu_lock_acquire($p0: ref);
  free requires assertsPassed;



implementation rcu_lock_acquire($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5138;

  corral_source_split_5138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 996} lock_acquire($p0, 0, 0, 2, 0, $0.ref, 0);
    goto corral_source_split_5139;

  corral_source_split_5139:
    assume {:verifier.code 0} true;
    return;
}



const lock_acquire: ref;

axiom lock_acquire == $sub.ref(0, 417685);

procedure lock_acquire($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $p5: ref, $i6: i64);
  free requires assertsPassed;



implementation lock_acquire($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $p5: ref, $i6: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 997} {:cexpr "lock_acquire:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 998} {:cexpr "lock_acquire:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 999} {:cexpr "lock_acquire:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 1000} {:cexpr "lock_acquire:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 1001} {:cexpr "lock_acquire:arg:arg6"} boogie_si_record_i64($i6);
    goto corral_source_split_5141;

  corral_source_split_5141:
    assume {:verifier.code 0} true;
    return;
}



const __preempt_count_add: ref;

axiom __preempt_count_add == $sub.ref(0, 418717);

procedure __preempt_count_add($i0: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation __preempt_count_add($i0: i32)
{
  var $i1: i1;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1002} {:cexpr "__preempt_count_add:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_5143;

  corral_source_split_5143:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32(0, 1);
    goto corral_source_split_5144;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_5148;

  corral_source_split_5148:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32(0, $sub.i32(0, 1));
    goto corral_source_split_5149;

  corral_source_split_5149:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    call {:si_unique_call 1005} devirtbounce.9(0, __preempt_count, $i0, __preempt_count);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i2 == 1;
    call {:si_unique_call 1004} devirtbounce.8(0, __preempt_count, __preempt_count);
    goto corral_source_split_5151;

  corral_source_split_5151:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i1 == 1;
    call {:si_unique_call 1003} devirtbounce.8(0, __preempt_count, __preempt_count);
    goto corral_source_split_5146;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const team_port_add: ref;

axiom team_port_add == $sub.ref(0, 419749);

procedure team_port_add($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $CurrAddr, $M.16, $M.25, $M.26, $M.31, $M.32, $M.23, $M.24, $M.4, $M.3;



implementation team_port_add($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $p19: ref;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $i23: i1;
  var $i24: i8;
  var $i25: i1;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i32;
  var $i31: i32;
  var $i32: i1;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $i38: i64;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $i52: i32;
  var $i53: i1;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i24;
  var $i61: i24;
  var $i62: i24;
  var $p63: ref;
  var $p64: ref;
  var $i65: i8;
  var $i66: i64;
  var $i67: i64;
  var $i68: i64;
  var $i69: i1;
  var $p72: ref;
  var $i73: i8;
  var $i74: i64;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $i80: i32;
  var $i81: i1;
  var $i84: i32;
  var $i85: i1;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $i92: i24;
  var $i93: i24;
  var $i94: i24;
  var $p95: ref;
  var $p96: ref;
  var $i97: i8;
  var $i98: i64;
  var $i99: i64;
  var $i100: i64;
  var $i101: i1;
  var $i104: i32;
  var $i105: i1;
  var $i108: i32;
  var $i109: i1;
  var $i112: i32;
  var $i113: i1;
  var $p116: ref;
  var $i117: i32;
  var $i118: i1;
  var $i121: i32;
  var $i122: i1;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $i127: i1;
  var $i128: i8;
  var $i129: i1;
  var $i120: i32;
  var $i115: i32;
  var $i111: i32;
  var $i107: i32;
  var $i103: i32;
  var $i83: i32;
  var $p134: ref;
  var $i135: i32;
  var $i71: i32;
  var $p137: ref;
  var $i13: i32;
  var cmdloc_dummy_var_16: [ref]i8;
  var cmdloc_dummy_var_17: [ref]i8;
  var cmdloc_dummy_var_18: [ref]i8;
  var vslice_dummy_var_83: i32;
  var vslice_dummy_var_84: i32;
  var vslice_dummy_var_85: i32;
  var vslice_dummy_var_86: i32;
  var vslice_dummy_var_87: i32;
  var vslice_dummy_var_88: i32;
  var vslice_dummy_var_89: i32;
  var vslice_dummy_var_90: i32;
  var vslice_dummy_var_91: i32;
  var vslice_dummy_var_92: i32;
  var vslice_dummy_var_93: i32;
  var vslice_dummy_var_94: i32;
  var vslice_dummy_var_95: i32;
  var vslice_dummy_var_96: i32;
  var vslice_dummy_var_97: i32;
  var vslice_dummy_var_98: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1006} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1007} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_5153;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(0, 1));
    goto corral_source_split_5154;

  corral_source_split_5154:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_5155;

  corral_source_split_5155:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 3176)), $mul.ref(0, 1));
    goto corral_source_split_5156;

  corral_source_split_5156:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_5157;

  corral_source_split_5157:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 3176)), $mul.ref(520, 1));
    goto corral_source_split_5158;

  corral_source_split_5158:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_5159;

  corral_source_split_5159:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 8);
    goto corral_source_split_5160;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_5161;

  corral_source_split_5161:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 3176)), $mul.ref(524, 1));
    goto corral_source_split_5168;

  corral_source_split_5168:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_5169;

  corral_source_split_5169:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i15, 262144);
    goto corral_source_split_5170;

  corral_source_split_5170:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_5171;

  corral_source_split_5171:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 3176)), $mul.ref(208, 1));
    goto corral_source_split_5176;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    $i20 := $load.i64($M.0, $p19);
    goto corral_source_split_5177;

  corral_source_split_5177:
    assume {:verifier.code 0} true;
    $i21 := $and.i64($i20, 1024);
    goto corral_source_split_5178;

  corral_source_split_5178:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_5179;

  corral_source_split_5179:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1013} $i27 := team_dev_type_check_change($p5, $p1);
    call {:si_unique_call 1014} {:cexpr "err"} boogie_si_record_i32($i27);
    goto corral_source_split_5189;

  corral_source_split_5189:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_5190;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 3176)), $mul.ref(520, 1));
    goto corral_source_split_5194;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_5195;

  corral_source_split_5195:
    assume {:verifier.code 0} true;
    $i31 := $and.i32($i30, 1);
    goto corral_source_split_5196;

  corral_source_split_5196:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_5197;

  corral_source_split_5197:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(368, 1));
    goto corral_source_split_5202;

  corral_source_split_5202:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_5203;

  corral_source_split_5203:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5204;

  corral_source_split_5204:
    assume {:verifier.code 0} true;
    $i37 := $load.i64($M.0, $p36);
    goto corral_source_split_5205;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    $i38 := $add.i64($i37, 160);
    goto corral_source_split_5206;

  corral_source_split_5206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1016} $p39 := kzalloc($i38, 208);
    goto corral_source_split_5207;

  corral_source_split_5207:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_5208;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p40);
    goto corral_source_split_5209;

  corral_source_split_5209:
    assume {:verifier.code 0} true;
    $i42 := $eq.i64($i41, 0);
    goto corral_source_split_5210;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p40, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_5214;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p43, $p1);
    goto corral_source_split_5215;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p40, $mul.ref(0, 160)), $mul.ref(40, 1));
    goto corral_source_split_5216;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p44, $p0);
    goto corral_source_split_5217;

  corral_source_split_5217:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p40, $mul.ref(0, 160)), $mul.ref(128, 1));
    goto corral_source_split_5218;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1017} INIT_LIST_HEAD($p45);
    goto corral_source_split_5219;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p1, $mul.ref(0, 3176)), $mul.ref(536, 1));
    goto corral_source_split_5220;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_5221;

  corral_source_split_5221:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p40, $mul.ref(0, 160)), $mul.ref(72, 1)), $mul.ref(32, 1));
    goto corral_source_split_5222;

  corral_source_split_5222:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p49, $i47);
    goto corral_source_split_5223;

  corral_source_split_5223:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p5, $mul.ref(0, 3176)), $mul.ref(536, 1));
    goto corral_source_split_5224;

  corral_source_split_5224:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    goto corral_source_split_5225;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1018} $i52 := dev_set_mtu($p1, $i51);
    call {:si_unique_call 1019} {:cexpr "err"} boogie_si_record_i32($i52);
    goto corral_source_split_5226;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_5227;

  corral_source_split_5227:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p1, $mul.ref(0, 3176)), $mul.ref(581, 1));
    goto corral_source_split_5260;

  corral_source_split_5260:
    assume {:verifier.code 0} true;
    $i73 := $load.i8($M.0, $p72);
    goto corral_source_split_5261;

  corral_source_split_5261:
    assume {:verifier.code 0} true;
    $i74 := $zext.i8.i64($i73);
    call {:si_unique_call 1024} {:cexpr "__len"} boogie_si_record_i64($i74);
    goto corral_source_split_5262;

  corral_source_split_5262:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($p40, $mul.ref(0, 160)), $mul.ref(72, 1)), $mul.ref(0, 1));
    goto corral_source_split_5263;

  corral_source_split_5263:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p76);
    goto corral_source_split_5264;

  corral_source_split_5264:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p1, $mul.ref(0, 3176)), $mul.ref(840, 1));
    goto corral_source_split_5265;

  corral_source_split_5265:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.0, $p78);
    goto corral_source_split_5266;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_16 := $M.0;
    cmdloc_dummy_var_17 := $M.0;
    call {:si_unique_call 1025} cmdloc_dummy_var_18 := $memcpy.i8(cmdloc_dummy_var_16, cmdloc_dummy_var_17, $p77, $p79, $i74, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_18;
    goto corral_source_split_5267;

  corral_source_split_5267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1026} $i80 := team_port_enter($p0, $p40);
    call {:si_unique_call 1027} {:cexpr "err"} boogie_si_record_i32($i80);
    goto corral_source_split_5268;

  corral_source_split_5268:
    assume {:verifier.code 0} true;
    $i81 := $ne.i32($i80, 0);
    goto corral_source_split_5269;

  corral_source_split_5269:
    assume {:verifier.code 0} true;
    assume {:branchcond $i81} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1030} $i84 := dev_open($p1);
    call {:si_unique_call 1031} {:cexpr "err"} boogie_si_record_i32($i84);
    goto corral_source_split_5279;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    $i85 := $ne.i32($i84, 0);
    goto corral_source_split_5280;

  corral_source_split_5280:
    assume {:verifier.code 0} true;
    assume {:branchcond $i85} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1037} $i104 := vlan_vids_add_by_dev($p1, $p5);
    call {:si_unique_call 1038} {:cexpr "err"} boogie_si_record_i32($i104);
    goto corral_source_split_5313;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    $i105 := $ne.i32($i104, 0);
    goto corral_source_split_5314;

  corral_source_split_5314:
    assume {:verifier.code 0} true;
    assume {:branchcond $i105} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1041} $i108 := team_port_enable_netpoll($p0, $p40);
    call {:si_unique_call 1042} {:cexpr "err"} boogie_si_record_i32($i108);
    goto corral_source_split_5322;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    $i109 := $ne.i32($i108, 0);
    goto corral_source_split_5323;

  corral_source_split_5323:
    assume {:verifier.code 0} true;
    assume {:branchcond $i109} true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i109 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1045} $i112 := netdev_master_upper_dev_link($p1, $p5);
    call {:si_unique_call 1046} {:cexpr "err"} boogie_si_record_i32($i112);
    goto corral_source_split_5331;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    $i113 := $ne.i32($i112, 0);
    goto corral_source_split_5332;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    assume {:branchcond $i113} true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p116 := $bitcast.ref.ref($p40);
    goto corral_source_split_5340;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1049} $i117 := netdev_rx_handler_register($p1, team_handle_frame, $p116);
    call {:si_unique_call 1050} {:cexpr "err"} boogie_si_record_i32($i117);
    goto corral_source_split_5341;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    $i118 := $ne.i32($i117, 0);
    goto corral_source_split_5342;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1053} $i121 := __team_option_inst_add_port($p0, $p40);
    call {:si_unique_call 1054} {:cexpr "err"} boogie_si_record_i32($i121);
    goto corral_source_split_5350;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    $i122 := $ne.i32($i121, 0);
    goto corral_source_split_5351;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p40, $mul.ref(0, 160)), $mul.ref(48, 1));
    goto corral_source_split_5358;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p124, $sub.i32(0, 1));
    goto corral_source_split_5359;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p40, $mul.ref(0, 160)), $mul.ref(24, 1));
    goto corral_source_split_5360;

  corral_source_split_5360:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(320, 1));
    goto corral_source_split_5361;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1057} list_add_tail_rcu($p125, $p126);
    goto corral_source_split_5362;

  corral_source_split_5362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1058} team_port_enable($p0, $p40);
    goto corral_source_split_5363;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1059} __team_compute_features($p0);
    goto corral_source_split_5364;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1060} $i127 := netif_carrier_ok($p1);
    goto corral_source_split_5365;

  corral_source_split_5365:
    assume {:verifier.code 0} true;
    $i128 := $zext.i1.i8($i127);
    call {:si_unique_call 1061} {:cexpr "tmp___3"} boogie_si_record_i8($i128);
    goto corral_source_split_5366;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    $i129 := $trunc.i8.i1($i128);
    goto corral_source_split_5367;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1062} __team_port_change_port_added($p40, $i129);
    goto corral_source_split_5368;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1063} __team_options_change_check($p0);
    goto corral_source_split_5369;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1064} vslice_dummy_var_98 := netdev_info.ref.ref.ref($p5, .str.21, $p7);
    goto corral_source_split_5370;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5166;

  corral_source_split_5166:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb57:
    assume $i122 == 1;
    goto corral_source_split_5353;

  corral_source_split_5353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1055} vslice_dummy_var_97 := netdev_err.ref.ref.ref($p5, .str.20, $p7);
    goto corral_source_split_5354;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1056} netdev_rx_handler_unregister($p1);
    goto corral_source_split_5356;

  corral_source_split_5356:
    assume {:verifier.code 0} true;
    $i120 := $i121;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto corral_source_split_5347;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1052} netdev_upper_dev_unlink($p1, $p5);
    goto corral_source_split_5348;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    $i115 := $i120;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto corral_source_split_5337;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1048} team_port_disable_netpoll($p40);
    goto corral_source_split_5338;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    $i111 := $i115;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto corral_source_split_5328;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1044} vlan_vids_del_by_dev($p1, $p5);
    goto corral_source_split_5329;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    $i107 := $i111;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto corral_source_split_5319;

  corral_source_split_5319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1040} vslice_dummy_var_93 := dev_close($p1);
    goto corral_source_split_5320;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    $i103 := $i107;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_5309;

  corral_source_split_5309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1035} team_port_leave($p0, $p40);
    goto corral_source_split_5310;

  corral_source_split_5310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1036} vslice_dummy_var_91 := team_port_set_orig_dev_addr($p40);
    goto corral_source_split_5311;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    $i83 := $i103;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_5274;

  corral_source_split_5274:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($add.ref($p40, $mul.ref(0, 160)), $mul.ref(72, 1)), $mul.ref(32, 1));
    goto corral_source_split_5275;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    $i135 := $load.i32($M.0, $p134);
    goto corral_source_split_5276;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1029} vslice_dummy_var_89 := dev_set_mtu($p1, $i135);
    goto corral_source_split_5277;

  corral_source_split_5277:
    assume {:verifier.code 0} true;
    $i71 := $i83;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_5256;

  corral_source_split_5256:
    assume {:verifier.code 0} true;
    $p137 := $bitcast.ref.ref($p40);
    goto corral_source_split_5257;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1023} kfree($p137);
    goto corral_source_split_5258;

  corral_source_split_5258:
    assume {:verifier.code 0} true;
    $i13 := $i71;
    goto $bb3;

  $bb53:
    assume $i118 == 1;
    goto corral_source_split_5344;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1051} vslice_dummy_var_96 := netdev_err.ref.ref.ref($p5, .str.19, $p7);
    goto corral_source_split_5345;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    $i120 := $i117;
    goto $bb55;

  $bb49:
    assume $i113 == 1;
    goto corral_source_split_5334;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1047} vslice_dummy_var_95 := netdev_err.ref.ref.ref($p5, .str.18, $p7);
    goto corral_source_split_5335;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    $i115 := $i112;
    goto $bb51;

  $bb45:
    assume $i109 == 1;
    goto corral_source_split_5325;

  corral_source_split_5325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1043} vslice_dummy_var_94 := netdev_err.ref.ref.ref($p5, .str.17, $p7);
    goto corral_source_split_5326;

  corral_source_split_5326:
    assume {:verifier.code 0} true;
    $i111 := $i108;
    goto $bb47;

  $bb41:
    assume $i105 == 1;
    goto corral_source_split_5316;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1039} vslice_dummy_var_92 := netdev_err.ref.ref.ref($p5, .str.16, $p7);
    goto corral_source_split_5317;

  corral_source_split_5317:
    assume {:verifier.code 0} true;
    $i107 := $i104;
    goto $bb43;

  $bb34:
    assume $i85 == 1;
    goto corral_source_split_5282;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5283;

  corral_source_split_5283:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p86, .str.11);
    goto corral_source_split_5284;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5285;

  corral_source_split_5285:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p87, .str.12);
    goto corral_source_split_5286;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5287;

  corral_source_split_5287:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p88, .str.2);
    goto corral_source_split_5288;

  corral_source_split_5288:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5289;

  corral_source_split_5289:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p89, .str.15);
    goto corral_source_split_5290;

  corral_source_split_5290:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5291;

  corral_source_split_5291:
    assume {:verifier.code 0} true;
    $p91 := $bitcast.ref.ref($p90);
    goto corral_source_split_5292;

  corral_source_split_5292:
    assume {:verifier.code 0} true;
    $i92 := $load.i24($M.10, $p91);
    goto corral_source_split_5293;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    $i93 := $and.i24($i92, $sub.i24(0, 262144));
    goto corral_source_split_5294;

  corral_source_split_5294:
    assume {:verifier.code 0} true;
    $i94 := $or.i24($i93, 1184);
    goto corral_source_split_5295;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    $M.10 := $store.i24($M.10, $p91, $i94);
    goto corral_source_split_5296;

  corral_source_split_5296:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5297;

  corral_source_split_5297:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p95, 0);
    goto corral_source_split_5298;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5299;

  corral_source_split_5299:
    assume {:verifier.code 0} true;
    $i97 := $load.i8($M.11, $p96);
    goto corral_source_split_5300;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    $i98 := $zext.i8.i64($i97);
    goto corral_source_split_5301;

  corral_source_split_5301:
    assume {:verifier.code 0} true;
    $i99 := $and.i64($i98, 1);
    goto corral_source_split_5302;

  corral_source_split_5302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1032} $i100 := ldv__builtin_expect($i99, 0);
    call {:si_unique_call 1033} {:cexpr "tmp___2"} boogie_si_record_i64($i100);
    goto corral_source_split_5303;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    $i101 := $ne.i64($i100, 0);
    goto corral_source_split_5304;

  corral_source_split_5304:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i103 := $i84;
    goto $bb39;

  $bb36:
    assume $i101 == 1;
    goto corral_source_split_5306;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1034} vslice_dummy_var_90 := __dynamic_netdev_dbg.ref.ref.ref.ref($p3, $p5, .str.15, $p7);
    goto corral_source_split_5307;

  corral_source_split_5307:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb30:
    assume $i81 == 1;
    goto corral_source_split_5271;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1028} vslice_dummy_var_88 := netdev_err.ref.ref.ref($p5, .str.14, $p7);
    goto corral_source_split_5272;

  corral_source_split_5272:
    assume {:verifier.code 0} true;
    $i83 := $i80;
    goto $bb32;

  $bb23:
    assume $i53 == 1;
    goto corral_source_split_5229;

  corral_source_split_5229:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5230;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p54, .str.11);
    goto corral_source_split_5231;

  corral_source_split_5231:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5232;

  corral_source_split_5232:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p55, .str.12);
    goto corral_source_split_5233;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5234;

  corral_source_split_5234:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p56, .str.2);
    goto corral_source_split_5235;

  corral_source_split_5235:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5236;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p57, .str.13);
    goto corral_source_split_5237;

  corral_source_split_5237:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5238;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p58);
    goto corral_source_split_5239;

  corral_source_split_5239:
    assume {:verifier.code 0} true;
    $i60 := $load.i24($M.10, $p59);
    goto corral_source_split_5240;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    $i61 := $and.i24($i60, $sub.i24(0, 262144));
    goto corral_source_split_5241;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    $i62 := $or.i24($i61, 1168);
    goto corral_source_split_5242;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    $M.10 := $store.i24($M.10, $p59, $i62);
    goto corral_source_split_5243;

  corral_source_split_5243:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5244;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p63, 0);
    goto corral_source_split_5245;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5246;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    $i65 := $load.i8($M.11, $p64);
    goto corral_source_split_5247;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    $i66 := $zext.i8.i64($i65);
    goto corral_source_split_5248;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    $i67 := $and.i64($i66, 1);
    goto corral_source_split_5249;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1020} $i68 := ldv__builtin_expect($i67, 0);
    call {:si_unique_call 1021} {:cexpr "tmp___1"} boogie_si_record_i64($i68);
    goto corral_source_split_5250;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    $i69 := $ne.i64($i68, 0);
    goto corral_source_split_5251;

  corral_source_split_5251:
    assume {:verifier.code 0} true;
    assume {:branchcond $i69} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i71 := $i52;
    goto $bb28;

  $bb25:
    assume $i69 == 1;
    goto corral_source_split_5253;

  corral_source_split_5253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1022} vslice_dummy_var_87 := __dynamic_netdev_dbg.ref.ref.ref.i32($p2, $p5, .str.13, $i52);
    goto corral_source_split_5254;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb20:
    assume $i42 == 1;
    goto corral_source_split_5212;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 12);
    goto $bb3;

  $bb17:
    assume $i32 == 1;
    goto corral_source_split_5199;

  corral_source_split_5199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1015} vslice_dummy_var_86 := netdev_err.ref.ref.ref($p5, .str.10, $p7);
    goto corral_source_split_5200;

  corral_source_split_5200:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 16);
    goto $bb3;

  $bb14:
    assume $i28 == 1;
    goto corral_source_split_5192;

  corral_source_split_5192:
    assume {:verifier.code 0} true;
    $i13 := $i27;
    goto $bb3;

  $bb8:
    assume $i22 == 1;
    goto corral_source_split_5181;

  corral_source_split_5181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1010} $i23 := vlan_uses_dev($p5);
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i8($i23);
    call {:si_unique_call 1011} {:cexpr "tmp"} boogie_si_record_i8($i24);
    goto corral_source_split_5183;

  corral_source_split_5183:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i8.i1($i24);
    goto corral_source_split_5184;

  corral_source_split_5184:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i25 == 1;
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1012} vslice_dummy_var_85 := netdev_err.ref.ref.ref($p5, .str.9, $p7);
    goto corral_source_split_5187;

  corral_source_split_5187:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 1);
    goto $bb3;

  $bb5:
    assume $i17 == 1;
    goto corral_source_split_5173;

  corral_source_split_5173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1009} vslice_dummy_var_84 := netdev_err.ref.ref.ref($p5, .str.8, $p7);
    goto corral_source_split_5174;

  corral_source_split_5174:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 16);
    goto $bb3;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_5163;

  corral_source_split_5163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1008} vslice_dummy_var_83 := netdev_err.ref.ref.ref($p5, .str.7, $p7);
    goto corral_source_split_5164;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 22);
    goto $bb3;
}



const vlan_uses_dev: ref;

axiom vlan_uses_dev == $sub.ref(0, 420781);

procedure vlan_uses_dev($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation vlan_uses_dev($p0: ref) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5372;

  corral_source_split_5372:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1065} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 1066} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_5373;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const team_dev_type_check_change: ref;

axiom team_dev_type_check_change == $sub.ref(0, 421813);

procedure team_dev_type_check_change($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation team_dev_type_check_change($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i16;
  var $i8: i32;
  var $p9: ref;
  var $i10: i16;
  var $i11: i32;
  var $i12: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $i13: i32;
  var vslice_dummy_var_99: i32;
  var vslice_dummy_var_100: i32;
  var vslice_dummy_var_101: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5375;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1067} $p2 := netdev_priv($p0);
    goto corral_source_split_5376;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_5377;

  corral_source_split_5377:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 3176)), $mul.ref(0, 1));
    goto corral_source_split_5378;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_5379;

  corral_source_split_5379:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(540, 1));
    goto corral_source_split_5380;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    $i7 := $load.i16($M.0, $p6);
    goto corral_source_split_5381;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i7);
    goto corral_source_split_5382;

  corral_source_split_5382:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 3176)), $mul.ref(540, 1));
    goto corral_source_split_5383;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    $i10 := $load.i16($M.0, $p9);
    goto corral_source_split_5384;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i10);
    goto corral_source_split_5385;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i8, $i11);
    goto corral_source_split_5386;

  corral_source_split_5386:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 984)), $mul.ref(320, 1));
    goto corral_source_split_5392;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1068} $i15 := list_empty($p14);
    call {:si_unique_call 1069} {:cexpr "tmp___0"} boogie_si_record_i32($i15);
    goto corral_source_split_5393;

  corral_source_split_5393:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 0);
    goto corral_source_split_5394;

  corral_source_split_5394:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1071} $i18 := call_netdevice_notifiers(14, $p0);
    call {:si_unique_call 1072} {:cexpr "err"} boogie_si_record_i32($i18);
    goto corral_source_split_5399;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1073} $i19 := notifier_to_errno($i18);
    call {:si_unique_call 1074} {:cexpr "err"} boogie_si_record_i32($i19);
    goto corral_source_split_5400;

  corral_source_split_5400:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_5401;

  corral_source_split_5401:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1076} dev_uc_flush($p0);
    goto corral_source_split_5406;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1077} dev_mc_flush($p0);
    goto corral_source_split_5407;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1078} team_setup_by_port($p0, $p1);
    goto corral_source_split_5408;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1079} vslice_dummy_var_101 := call_netdevice_notifiers(15, $p0);
    goto corral_source_split_5409;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5390;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb8:
    assume $i20 == 1;
    goto corral_source_split_5403;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1075} vslice_dummy_var_100 := netdev_err.ref.ref($p0, .str.23);
    goto corral_source_split_5404;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    $i13 := $i19;
    goto $bb3;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_5396;

  corral_source_split_5396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1070} vslice_dummy_var_99 := netdev_err.ref.ref.ref($p0, .str.22, $p5);
    goto corral_source_split_5397;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 16);
    goto $bb3;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_5388;

  corral_source_split_5388:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb3;
}



const team_port_enter: ref;

axiom team_port_enter == $sub.ref(0, 422845);

procedure team_port_enter($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.16, $M.25, $M.26, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.31, $M.32, $CurrAddr, $M.23, $M.24, $M.4, $M.3;



implementation team_port_enter($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i31: i32;
  var vslice_dummy_var_102: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5411;

  corral_source_split_5411:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(0, 1));
    goto corral_source_split_5412;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_5413;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1080} dev_hold($p3);
    goto corral_source_split_5414;

  corral_source_split_5414:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_5415;

  corral_source_split_5415:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_5416;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 3176)), $mul.ref(524, 1));
    goto corral_source_split_5417;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_5418;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    $i8 := $or.i32($i7, 262144);
    goto corral_source_split_5419;

  corral_source_split_5419:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_5420;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_5421;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 3176)), $mul.ref(524, 1));
    goto corral_source_split_5422;

  corral_source_split_5422:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, $i8);
    goto corral_source_split_5423;

  corral_source_split_5423:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(376, 1)), $mul.ref(32, 1));
    goto corral_source_split_5424;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_5425;

  corral_source_split_5425:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_5426;

  corral_source_split_5426:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_5427;

  corral_source_split_5427:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_5428;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i31 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_5458;

  corral_source_split_5458:
    assume {:verifier.code 0} true;
    $r := $i31;
    return;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_5430;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(376, 1)), $mul.ref(32, 1));
    goto corral_source_split_5431;

  corral_source_split_5431:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_5432;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    call {:si_unique_call 1081} $i22 := devirtbounce.13($p21, $p0, $p1);
    call {:si_unique_call 1082} {:cexpr "err"} boogie_si_record_i32($i22);
    goto corral_source_split_5433;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_5434;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb3:
    assume $i23 == 1;
    goto corral_source_split_5436;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(0, 1));
    goto corral_source_split_5437;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_5438;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_5439;

  corral_source_split_5439:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_5440;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 3176)), $mul.ref(0, 1));
    goto corral_source_split_5441;

  corral_source_split_5441:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_5442;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1083} vslice_dummy_var_102 := netdev_err.ref.ref.ref($p25, .str.14, $p29);
    goto corral_source_split_5443;

  corral_source_split_5443:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_5445;

  corral_source_split_5445:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_5446;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 3176)), $mul.ref(524, 1));
    goto corral_source_split_5447;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_5448;

  corral_source_split_5448:
    assume {:verifier.code 0} true;
    $i36 := $and.i32($i35, $sub.i32(0, 262145));
    goto corral_source_split_5449;

  corral_source_split_5449:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_5450;

  corral_source_split_5450:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_5451;

  corral_source_split_5451:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 3176)), $mul.ref(524, 1));
    goto corral_source_split_5452;

  corral_source_split_5452:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, $i36);
    goto corral_source_split_5453;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(0, 1));
    goto corral_source_split_5454;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_5455;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1084} dev_put($p41);
    goto corral_source_split_5456;

  corral_source_split_5456:
    assume {:verifier.code 0} true;
    $i31 := $i22;
    goto $bb8;
}



const dev_open: ref;

axiom dev_open == $sub.ref(0, 423877);

procedure dev_open($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_open($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5460;

  corral_source_split_5460:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1085} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1086} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5461;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const vlan_vids_add_by_dev: ref;

axiom vlan_vids_add_by_dev == $sub.ref(0, 424909);

procedure vlan_vids_add_by_dev($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vlan_vids_add_by_dev($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5463;

  corral_source_split_5463:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1087} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1088} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_5464;

  corral_source_split_5464:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const team_port_enable_netpoll: ref;

axiom team_port_enable_netpoll == $sub.ref(0, 425941);

procedure team_port_enable_netpoll($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation team_port_enable_netpoll($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5466;

  corral_source_split_5466:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(0, 1));
    goto corral_source_split_5467;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_5468;

  corral_source_split_5468:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 3176)), $mul.ref(1256, 1));
    goto corral_source_split_5469;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_5470;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_5471;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_5472;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1089} $p9 := kzalloc(160, 208);
    goto corral_source_split_5478;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_5479;

  corral_source_split_5479:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_5480;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_5481;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_5485;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_5486;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1090} $i15 := __netpoll_setup($p10, $p14);
    call {:si_unique_call 1091} {:cexpr "err"} boogie_si_record_i32($i15);
    goto corral_source_split_5487;

  corral_source_split_5487:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_5488;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(112, 1));
    goto corral_source_split_5494;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p18, $p9);
    goto corral_source_split_5495;

  corral_source_split_5495:
    assume {:verifier.code 0} true;
    $i8 := $i15;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5476;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_5490;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p10);
    goto corral_source_split_5491;

  corral_source_split_5491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1092} kfree($p17);
    goto corral_source_split_5492;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    $i8 := $i15;
    goto $bb3;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_5483;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 12);
    goto $bb3;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_5474;

  corral_source_split_5474:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;
}



const netdev_master_upper_dev_link: ref;

axiom netdev_master_upper_dev_link == $sub.ref(0, 426973);

procedure netdev_master_upper_dev_link($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation netdev_master_upper_dev_link($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5497;

  corral_source_split_5497:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1093} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1094} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_5498;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const team_handle_frame: ref;

axiom team_handle_frame == $sub.ref(0, 428005);

procedure team_handle_frame($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.3, $CurrAddr;



implementation team_handle_frame($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i1;
  var $i12: i8;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i16: i32;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i64;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $p33: ref;
  var $i34: i32;
  var $i35: i64;
  var $i36: i64;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i8;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $i44: i64;
  var $i45: i64;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i1;
  var $i52: i1;
  var $i53: i1;
  var $i54: i1;
  var $i55: i1;
  var $i56: i1;
  var $i57: i1;
  var $i58: i1;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i1;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i1;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i1;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $i80: i1;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $i84: i1;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $i91: i1;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $i95: i1;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5500;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.0, $p0);
    goto corral_source_split_5501;

  corral_source_split_5501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1095} $p2 := skb_share_check($p1, 32);
    goto corral_source_split_5502;

  corral_source_split_5502:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_5503;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_5504;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p0, $p2);
    goto corral_source_split_5510;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(32, 1));
    goto corral_source_split_5511;

  corral_source_split_5511:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_5512;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1096} $p8 := team_port_get_rcu($p7);
    goto corral_source_split_5513;

  corral_source_split_5513:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 160)), $mul.ref(40, 1));
    goto corral_source_split_5514;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_5515;

  corral_source_split_5515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1097} $i11 := team_port_enabled($p8);
    goto corral_source_split_5516;

  corral_source_split_5516:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i8($i11);
    call {:si_unique_call 1098} {:cexpr "tmp"} boogie_si_record_i8($i12);
    goto corral_source_split_5517;

  corral_source_split_5517:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i8.i1($i12);
    goto corral_source_split_5518;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := 1;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_5522;

  corral_source_split_5522:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_5523;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i15 == 1);
    goto corral_source_split_5527;

  corral_source_split_5527:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 984)), $mul.ref(376, 1)), $mul.ref(16, 1));
    goto corral_source_split_5528;

  corral_source_split_5528:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    call {:si_unique_call 1099} $i20 := devirtbounce.14($p19, $p10, $p8, $p2);
    call {:si_unique_call 1100} {:cexpr "res"} boogie_si_record_i32($i20);
    assume {:verifier.code 0} true;
    $i16 := $i20;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_5530;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i16, 1);
    goto corral_source_split_5531;

  corral_source_split_5531:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i51 := $slt.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    $i52 := $slt.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    $i53 := $eq.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i53 == 1);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1117} __bad_size_call_parameter();
    goto corral_source_split_5652;

  corral_source_split_5652:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i5 := $i16;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5508;

  corral_source_split_5508:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb22:
    assume $i53 == 1;
    goto corral_source_split_5572;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    $i91 := $eq.i32(1, 1);
    goto corral_source_split_5573;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i91 == 1);
    goto corral_source_split_5640;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    $i95 := $eq.i32(1, $sub.i32(0, 1));
    goto corral_source_split_5641;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i95 == 1);
    goto corral_source_split_5648;

  corral_source_split_5648:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p10, $mul.ref(0, 984)), $mul.ref(8, 1));
    goto corral_source_split_5649;

  corral_source_split_5649:
    assume {:verifier.code 0} true;
    $p100 := $load.ref($M.0, $p99);
    goto corral_source_split_5650;

  corral_source_split_5650:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p100, $mul.ref(0, 48)), $mul.ref(40, 1));
    call {:si_unique_call 1116} devirtbounce.9(0, $p101, 1, $p101);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb58:
    assume $i95 == 1;
    goto corral_source_split_5643;

  corral_source_split_5643:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p10, $mul.ref(0, 984)), $mul.ref(8, 1));
    goto corral_source_split_5644;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    $p97 := $load.ref($M.0, $p96);
    goto corral_source_split_5645;

  corral_source_split_5645:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p97, $mul.ref(0, 48)), $mul.ref(40, 1));
    call {:si_unique_call 1115} devirtbounce.8(0, $p98, $p98);
    goto corral_source_split_5646;

  corral_source_split_5646:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb55:
    assume $i91 == 1;
    goto corral_source_split_5635;

  corral_source_split_5635:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p10, $mul.ref(0, 984)), $mul.ref(8, 1));
    goto corral_source_split_5636;

  corral_source_split_5636:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.0, $p92);
    goto corral_source_split_5637;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p93, $mul.ref(0, 48)), $mul.ref(40, 1));
    call {:si_unique_call 1114} devirtbounce.8(0, $p94, $p94);
    goto corral_source_split_5638;

  corral_source_split_5638:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb20:
    assume $i52 == 1;
    assume {:verifier.code 0} true;
    $i54 := $eq.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i54 == 1);
    goto $bb24;

  $bb25:
    assume $i54 == 1;
    goto corral_source_split_5575;

  corral_source_split_5575:
    assume {:verifier.code 0} true;
    $i80 := $eq.i32(1, 1);
    goto corral_source_split_5576;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    assume {:branchcond $i80} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i80 == 1);
    goto corral_source_split_5623;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    $i84 := $eq.i32(1, $sub.i32(0, 1));
    goto corral_source_split_5624;

  corral_source_split_5624:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i84 == 1);
    goto corral_source_split_5631;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p10, $mul.ref(0, 984)), $mul.ref(8, 1));
    goto corral_source_split_5632;

  corral_source_split_5632:
    assume {:verifier.code 0} true;
    $p89 := $load.ref($M.0, $p88);
    goto corral_source_split_5633;

  corral_source_split_5633:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p89, $mul.ref(0, 48)), $mul.ref(40, 1));
    call {:si_unique_call 1113} devirtbounce.9(0, $p90, 1, $p90);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb51:
    assume $i84 == 1;
    goto corral_source_split_5626;

  corral_source_split_5626:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p10, $mul.ref(0, 984)), $mul.ref(8, 1));
    goto corral_source_split_5627;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.0, $p85);
    goto corral_source_split_5628;

  corral_source_split_5628:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p86, $mul.ref(0, 48)), $mul.ref(40, 1));
    call {:si_unique_call 1112} devirtbounce.8(0, $p87, $p87);
    goto corral_source_split_5629;

  corral_source_split_5629:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb48:
    assume $i80 == 1;
    goto corral_source_split_5618;

  corral_source_split_5618:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p10, $mul.ref(0, 984)), $mul.ref(8, 1));
    goto corral_source_split_5619;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.0, $p81);
    goto corral_source_split_5620;

  corral_source_split_5620:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p82, $mul.ref(0, 48)), $mul.ref(40, 1));
    call {:si_unique_call 1111} devirtbounce.8(0, $p83, $p83);
    goto corral_source_split_5621;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb18:
    assume $i51 == 1;
    assume {:verifier.code 0} true;
    $i55 := $slt.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    $i56 := $eq.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i56 == 1);
    goto $bb24;

  $bb29:
    assume $i56 == 1;
    goto corral_source_split_5578;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    $i69 := $eq.i32(1, 1);
    goto corral_source_split_5579;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    assume {:branchcond $i69} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i69 == 1);
    goto corral_source_split_5606;

  corral_source_split_5606:
    assume {:verifier.code 0} true;
    $i73 := $eq.i32(1, $sub.i32(0, 1));
    goto corral_source_split_5607;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i73 == 1);
    goto corral_source_split_5614;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p10, $mul.ref(0, 984)), $mul.ref(8, 1));
    goto corral_source_split_5615;

  corral_source_split_5615:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.0, $p77);
    goto corral_source_split_5616;

  corral_source_split_5616:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p78, $mul.ref(0, 48)), $mul.ref(40, 1));
    call {:si_unique_call 1110} devirtbounce.9(0, $p79, 1, $p79);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb44:
    assume $i73 == 1;
    goto corral_source_split_5609;

  corral_source_split_5609:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p10, $mul.ref(0, 984)), $mul.ref(8, 1));
    goto corral_source_split_5610;

  corral_source_split_5610:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.0, $p74);
    goto corral_source_split_5611;

  corral_source_split_5611:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p75, $mul.ref(0, 48)), $mul.ref(40, 1));
    call {:si_unique_call 1109} devirtbounce.8(0, $p76, $p76);
    goto corral_source_split_5612;

  corral_source_split_5612:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb41:
    assume $i69 == 1;
    goto corral_source_split_5601;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p10, $mul.ref(0, 984)), $mul.ref(8, 1));
    goto corral_source_split_5602;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.0, $p70);
    goto corral_source_split_5603;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p71, $mul.ref(0, 48)), $mul.ref(40, 1));
    call {:si_unique_call 1108} devirtbounce.8(0, $p72, $p72);
    goto corral_source_split_5604;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb27:
    assume $i55 == 1;
    assume {:verifier.code 0} true;
    $i57 := $eq.i64(4, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i57 == 1);
    goto $bb24;

  $bb31:
    assume $i57 == 1;
    goto corral_source_split_5581;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    $i58 := $eq.i32(1, 1);
    goto corral_source_split_5582;

  corral_source_split_5582:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i58 == 1);
    goto corral_source_split_5589;

  corral_source_split_5589:
    assume {:verifier.code 0} true;
    $i62 := $eq.i32(1, $sub.i32(0, 1));
    goto corral_source_split_5590;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i62 == 1);
    goto corral_source_split_5597;

  corral_source_split_5597:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p10, $mul.ref(0, 984)), $mul.ref(8, 1));
    goto corral_source_split_5598;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_5599;

  corral_source_split_5599:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p67, $mul.ref(0, 48)), $mul.ref(40, 1));
    call {:si_unique_call 1107} devirtbounce.9(0, $p68, 1, $p68);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb36:
    assume $i62 == 1;
    goto corral_source_split_5592;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p10, $mul.ref(0, 984)), $mul.ref(8, 1));
    goto corral_source_split_5593;

  corral_source_split_5593:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_5594;

  corral_source_split_5594:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p64, $mul.ref(0, 48)), $mul.ref(40, 1));
    call {:si_unique_call 1106} devirtbounce.8(0, $p65, $p65);
    goto corral_source_split_5595;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb33:
    assume $i58 == 1;
    goto corral_source_split_5584;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p10, $mul.ref(0, 984)), $mul.ref(8, 1));
    goto corral_source_split_5585;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_5586;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p60, $mul.ref(0, 48)), $mul.ref(40, 1));
    call {:si_unique_call 1105} devirtbounce.8(0, $p61, $p61);
    goto corral_source_split_5587;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb11:
    assume $i21 == 1;
    goto corral_source_split_5533;

  corral_source_split_5533:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p10, $mul.ref(0, 984)), $mul.ref(8, 1));
    goto corral_source_split_5534;

  corral_source_split_5534:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    call {:si_unique_call 1101} $i24 := devirtbounce.11(0, this_cpu_off, $p23);
    call {:si_unique_call 1102} {:cexpr "tcp_ptr__"} boogie_si_record_i64($i24);
    goto corral_source_split_5535;

  corral_source_split_5535:
    assume {:verifier.code 0} true;
    $p25 := $i2p.i64.ref($i24);
    goto corral_source_split_5536;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_5537;

  corral_source_split_5537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1103} u64_stats_update_begin($p26);
    goto corral_source_split_5538;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p25, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_5539;

  corral_source_split_5539:
    assume {:verifier.code 0} true;
    $i28 := $load.i64($M.0, $p27);
    goto corral_source_split_5540;

  corral_source_split_5540:
    assume {:verifier.code 0} true;
    $i29 := $add.i64($i28, 1);
    goto corral_source_split_5541;

  corral_source_split_5541:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p25, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_5542;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p30, $i29);
    goto corral_source_split_5543;

  corral_source_split_5543:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p25, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_5544;

  corral_source_split_5544:
    assume {:verifier.code 0} true;
    $i32 := $load.i64($M.0, $p31);
    goto corral_source_split_5545;

  corral_source_split_5545:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_5546;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_5547;

  corral_source_split_5547:
    assume {:verifier.code 0} true;
    $i35 := $zext.i32.i64($i34);
    goto corral_source_split_5548;

  corral_source_split_5548:
    assume {:verifier.code 0} true;
    $i36 := $add.i64($i32, $i35);
    goto corral_source_split_5549;

  corral_source_split_5549:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p25, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_5550;

  corral_source_split_5550:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p37, $i36);
    goto corral_source_split_5551;

  corral_source_split_5551:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p2);
    goto corral_source_split_5552;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($p38, $mul.ref(125, 1));
    goto corral_source_split_5553;

  corral_source_split_5553:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.0, $p39);
    goto corral_source_split_5554;

  corral_source_split_5554:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i32($i40);
    goto corral_source_split_5555;

  corral_source_split_5555:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i41, 2);
    goto corral_source_split_5556;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p25, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_5565;

  corral_source_split_5565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1104} u64_stats_update_begin($p47);
    goto corral_source_split_5566;

  corral_source_split_5566:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p10, $mul.ref(0, 984)), $mul.ref(0, 1));
    goto corral_source_split_5567;

  corral_source_split_5567:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_5568;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(32, 1));
    goto corral_source_split_5569;

  corral_source_split_5569:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p50, $p49);
    goto corral_source_split_5570;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i42 == 1;
    goto corral_source_split_5558;

  corral_source_split_5558:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p25, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_5559;

  corral_source_split_5559:
    assume {:verifier.code 0} true;
    $i44 := $load.i64($M.0, $p43);
    goto corral_source_split_5560;

  corral_source_split_5560:
    assume {:verifier.code 0} true;
    $i45 := $add.i64($i44, 1);
    goto corral_source_split_5561;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p25, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_5562;

  corral_source_split_5562:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p46, $i45);
    goto corral_source_split_5563;

  corral_source_split_5563:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_5525;

  corral_source_split_5525:
    assume {:verifier.code 0} true;
    $i16 := 2;
    goto $bb10;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_5520;

  corral_source_split_5520:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb7;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5506;

  corral_source_split_5506:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;
}



const netdev_rx_handler_register: ref;

axiom netdev_rx_handler_register == $sub.ref(0, 429037);

procedure netdev_rx_handler_register($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation netdev_rx_handler_register($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5654;

  corral_source_split_5654:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1118} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1119} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_5655;

  corral_source_split_5655:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __team_option_inst_add_port: ref;

axiom __team_option_inst_add_port == $sub.ref(0, 430069);

procedure __team_option_inst_add_port($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.16, $M.25, $M.26, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.31, $M.32, $CurrAddr, $M.23, $M.24, $M.4, $M.3;



implementation __team_option_inst_add_port($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p12: ref;
  var $i13: i8;
  var $i14: i1;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p11: ref;
  var $i25: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5657;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(336, 1)), $mul.ref(0, 1));
    goto corral_source_split_5658;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_5659;

  corral_source_split_5659:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_5660;

  corral_source_split_5660:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_5661;

  corral_source_split_5661:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_5662;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(336, 1));
    goto corral_source_split_5663;

  corral_source_split_5663:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_5664;

  corral_source_split_5664:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i7, $i9);
    goto corral_source_split_5665;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i25 := 0;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_5693;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    $r := $i25;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_5667;

  corral_source_split_5667:
    assume {:verifier.code 0} true;
    $p11 := $p4;
    goto $bb4;

  $bb4:
    call $p12, $i13, $i14, $i15, $i16, $i17, $p19, $p20, $p21, $p22, $i23, $i24, $p11 := __team_option_inst_add_port_loop_$bb4($p0, $p1, $i9, $p12, $i13, $i14, $i15, $i16, $i17, $p19, $p20, $p21, $p22, $i23, $i24, $p11);
    goto $bb4_last;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_5671;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_5672;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i8.i1($i13);
    goto corral_source_split_5673;

  corral_source_split_5673:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i14 == 1);
    goto corral_source_split_5675;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5677;

  corral_source_split_5677:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_5678;

  corral_source_split_5678:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_5679;

  corral_source_split_5679:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_5680;

  corral_source_split_5680:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_5681;

  corral_source_split_5681:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, $i9);
    goto corral_source_split_5682;

  corral_source_split_5682:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i24 == 1);
    goto corral_source_split_5691;

  corral_source_split_5691:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb14:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    $p11 := $p20;
    goto $bb14_dummy;

  $bb6:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1120} $i15 := __team_option_inst_add($p0, $p11, $p1);
    call {:si_unique_call 1121} {:cexpr "err"} boogie_si_record_i32($i15);
    goto corral_source_split_5684;

  corral_source_split_5684:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_5685;

  corral_source_split_5685:
    assume {:verifier.code 0} true;
    $i17 := $i15;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb10:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_5687;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1122} __team_option_inst_del_port($p0, $p1);
    goto corral_source_split_5689;

  corral_source_split_5689:
    assume {:verifier.code 0} true;
    $i25 := $i17;
    goto $bb17;

  $bb14_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5669;
}



const __team_port_change_port_added: ref;

axiom __team_port_change_port_added == $sub.ref(0, 431101);

procedure __team_port_change_port_added($p0: ref, $i1: i1);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.4, $M.3, $M.16, $M.25, $M.26, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.31, $M.32, $M.23, $M.24;



implementation __team_port_change_port_added($p0: ref, $i1: i1)
{
  var $i2: i8;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1123} {:cexpr "__team_port_change_port_added:arg:linkup"} boogie_si_record_i1($i1);
    goto corral_source_split_5695;

  corral_source_split_5695:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_5696;

  corral_source_split_5696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1124} __team_port_change_send($p0, $i3);
    goto corral_source_split_5697;

  corral_source_split_5697:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(40, 1));
    goto corral_source_split_5698;

  corral_source_split_5698:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_5699;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1125} __team_carrier_check($p5);
    goto corral_source_split_5700;

  corral_source_split_5700:
    assume {:verifier.code 0} true;
    return;
}



const skb_share_check: ref;

axiom skb_share_check == $sub.ref(0, 432133);

procedure skb_share_check($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.4, $M.3;



implementation skb_share_check($p0: ref, $i1: i32) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1126} {:cexpr "skb_share_check:arg:pri"} boogie_si_record_i32($i1);
    goto corral_source_split_5702;

  corral_source_split_5702:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 16);
    goto corral_source_split_5703;

  corral_source_split_5703:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_5704;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1128} $i4 := skb_shared($p0);
    call {:si_unique_call 1129} {:cexpr "tmp___1"} boogie_si_record_i32($i4);
    goto corral_source_split_5709;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_5710;

  corral_source_split_5710:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $p13 := $p0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_5726;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    $r := $p13;
    return;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_5712;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1130} $p6 := skb_clone($p0, $i1);
    goto corral_source_split_5713;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_5714;

  corral_source_split_5714:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_5715;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_5716;

  corral_source_split_5716:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_5717;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1131} $i11 := ldv__builtin_expect($i10, 1);
    call {:si_unique_call 1132} {:cexpr "tmp___0"} boogie_si_record_i64($i11);
    goto corral_source_split_5718;

  corral_source_split_5718:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_5719;

  corral_source_split_5719:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i12 == 1);
    goto corral_source_split_5724;

  corral_source_split_5724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1134} ldv_kfree_skb_6($p0);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p13 := $p6;
    goto $bb9;

  $bb6:
    assume $i12 == 1;
    goto corral_source_split_5721;

  corral_source_split_5721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1133} ldv_consume_skb_5($p0);
    goto corral_source_split_5722;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5706;

  corral_source_split_5706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1127} __might_sleep(.str.24, 1074, 0);
    goto corral_source_split_5707;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const team_port_get_rcu: ref;

axiom team_port_get_rcu == $sub.ref(0, 433165);

procedure team_port_get_rcu($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation team_port_get_rcu($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5728;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(872, 1));
    goto corral_source_split_5729;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_5730;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1135} $i3 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 1136} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_5731;

  corral_source_split_5731:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_5732;

  corral_source_split_5732:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_5744;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(524, 1));
    goto corral_source_split_5745;

  corral_source_split_5745:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_5746;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 262144);
    goto corral_source_split_5747;

  corral_source_split_5747:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_5748;

  corral_source_split_5748:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i12 == 1);
    goto corral_source_split_5752;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    $p13 := $0.ref;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_5754;

  corral_source_split_5754:
    assume {:verifier.code 0} true;
    $r := $p13;
    return;

  $bb10:
    assume $i12 == 1;
    goto corral_source_split_5750;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    $p13 := $p2;
    goto $bb12;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5734;

  corral_source_split_5734:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1(1);
    goto corral_source_split_5735;

  corral_source_split_5735:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    goto corral_source_split_5737;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1137} $i6 := rcu_read_lock_held();
    call {:si_unique_call 1138} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_5738;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_5739;

  corral_source_split_5739:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i7 == 1;
    goto corral_source_split_5741;

  corral_source_split_5741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1139} lockdep_rcu_suspicious(.str.2, 83, .str.25);
    goto corral_source_split_5742;

  corral_source_split_5742:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb3;
}



const u64_stats_update_begin: ref;

axiom u64_stats_update_begin == $sub.ref(0, 434197);

procedure u64_stats_update_begin($p0: ref);
  free requires assertsPassed;



implementation u64_stats_update_begin($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5756;

  corral_source_split_5756:
    assume {:verifier.code 0} true;
    return;
}



const __might_sleep: ref;

axiom __might_sleep == $sub.ref(0, 435229);

procedure __might_sleep($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;



implementation __might_sleep($p0: ref, $i1: i32, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1140} {:cexpr "__might_sleep:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1141} {:cexpr "__might_sleep:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_5758;

  corral_source_split_5758:
    assume {:verifier.code 0} true;
    return;
}



const skb_shared: ref;

axiom skb_shared == $sub.ref(0, 436261);

procedure skb_shared($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation skb_shared($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5760;

  corral_source_split_5760:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(228, 1));
    goto corral_source_split_5761;

  corral_source_split_5761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1142} $i2 := atomic_read($p1);
    call {:si_unique_call 1143} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_5762;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 1);
    goto corral_source_split_5763;

  corral_source_split_5763:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_5764;

  corral_source_split_5764:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const skb_clone: ref;

axiom skb_clone == $sub.ref(0, 437293);

procedure skb_clone($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation skb_clone($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1144} {:cexpr "skb_clone:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_5766;

  corral_source_split_5766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1145} $p2 := external_alloc();
    goto corral_source_split_5767;

  corral_source_split_5767:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_5768;

  corral_source_split_5768:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const ldv_consume_skb_5: ref;

axiom ldv_consume_skb_5 == $sub.ref(0, 438325);

procedure ldv_consume_skb_5($p0: ref);
  free requires assertsPassed;
  modifies $M.4, $M.3;



implementation ldv_consume_skb_5($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5770;

  corral_source_split_5770:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_5771;

  corral_source_split_5771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1146} ldv_skb_free($p1);
    goto corral_source_split_5772;

  corral_source_split_5772:
    assume {:verifier.code 0} true;
    return;
}



const ldv_kfree_skb_6: ref;

axiom ldv_kfree_skb_6 == $sub.ref(0, 439357);

procedure ldv_kfree_skb_6($p0: ref);
  free requires assertsPassed;
  modifies $M.4, $M.3;



implementation ldv_kfree_skb_6($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5774;

  corral_source_split_5774:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_5775;

  corral_source_split_5775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1147} ldv_skb_free($p1);
    goto corral_source_split_5776;

  corral_source_split_5776:
    assume {:verifier.code 0} true;
    return;
}



const atomic_read: ref;

axiom atomic_read == $sub.ref(0, 440389);

procedure atomic_read($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_read($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5778;

  corral_source_split_5778:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_5779;

  corral_source_split_5779:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_5780;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __netpoll_setup: ref;

axiom __netpoll_setup == $sub.ref(0, 441421);

procedure __netpoll_setup($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __netpoll_setup($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5782;

  corral_source_split_5782:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1148} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1149} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_5783;

  corral_source_split_5783:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const dev_hold: ref;

axiom dev_hold == $sub.ref(0, 442453);

procedure dev_hold($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation dev_hold($p0: ref)
{
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i64(4, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i64(4, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i64(4, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1162} __bad_size_call_parameter();
    goto corral_source_split_5853;

  corral_source_split_5853:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_5785;

  corral_source_split_5785:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32(1, 1);
    goto corral_source_split_5786;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i32 == 1);
    goto corral_source_split_5843;

  corral_source_split_5843:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32(1, $sub.i32(0, 1));
    goto corral_source_split_5844;

  corral_source_split_5844:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i35 == 1);
    goto corral_source_split_5850;

  corral_source_split_5850:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(1184, 1));
    goto corral_source_split_5851;

  corral_source_split_5851:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    call {:si_unique_call 1161} devirtbounce.9(0, $p39, 1, $p39);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb42:
    assume $i35 == 1;
    goto corral_source_split_5846;

  corral_source_split_5846:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(1184, 1));
    goto corral_source_split_5847;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    call {:si_unique_call 1160} devirtbounce.8(0, $p37, $p37);
    goto corral_source_split_5848;

  corral_source_split_5848:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb39:
    assume $i32 == 1;
    goto corral_source_split_5839;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(1184, 1));
    goto corral_source_split_5840;

  corral_source_split_5840:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    call {:si_unique_call 1159} devirtbounce.8(0, $p34, $p34);
    goto corral_source_split_5841;

  corral_source_split_5841:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb4:
    assume $i2 == 1;
    assume {:verifier.code 0} true;
    $i4 := $eq.i64(4, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb8;

  $bb9:
    assume $i4 == 1;
    goto corral_source_split_5788;

  corral_source_split_5788:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32(1, 1);
    goto corral_source_split_5789;

  corral_source_split_5789:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i24 == 1);
    goto corral_source_split_5829;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32(1, $sub.i32(0, 1));
    goto corral_source_split_5830;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i27 == 1);
    goto corral_source_split_5836;

  corral_source_split_5836:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(1184, 1));
    goto corral_source_split_5837;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    call {:si_unique_call 1158} devirtbounce.9(0, $p31, 1, $p31);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb35:
    assume $i27 == 1;
    goto corral_source_split_5832;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(1184, 1));
    goto corral_source_split_5833;

  corral_source_split_5833:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    call {:si_unique_call 1157} devirtbounce.8(0, $p29, $p29);
    goto corral_source_split_5834;

  corral_source_split_5834:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb32:
    assume $i24 == 1;
    goto corral_source_split_5825;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(1184, 1));
    goto corral_source_split_5826;

  corral_source_split_5826:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    call {:si_unique_call 1156} devirtbounce.8(0, $p26, $p26);
    goto corral_source_split_5827;

  corral_source_split_5827:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i5 := $slt.i64(4, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $eq.i64(4, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb8;

  $bb13:
    assume $i6 == 1;
    goto corral_source_split_5791;

  corral_source_split_5791:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32(1, 1);
    goto corral_source_split_5792;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i16 == 1);
    goto corral_source_split_5815;

  corral_source_split_5815:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32(1, $sub.i32(0, 1));
    goto corral_source_split_5816;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i19 == 1);
    goto corral_source_split_5822;

  corral_source_split_5822:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(1184, 1));
    goto corral_source_split_5823;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    call {:si_unique_call 1155} devirtbounce.9(0, $p23, 1, $p23);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb28:
    assume $i19 == 1;
    goto corral_source_split_5818;

  corral_source_split_5818:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(1184, 1));
    goto corral_source_split_5819;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    call {:si_unique_call 1154} devirtbounce.8(0, $p21, $p21);
    goto corral_source_split_5820;

  corral_source_split_5820:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb25:
    assume $i16 == 1;
    goto corral_source_split_5811;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(1184, 1));
    goto corral_source_split_5812;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    call {:si_unique_call 1153} devirtbounce.8(0, $p18, $p18);
    goto corral_source_split_5813;

  corral_source_split_5813:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb11:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i7 := $eq.i64(4, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb8;

  $bb15:
    assume $i7 == 1;
    goto corral_source_split_5794;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32(1, 1);
    goto corral_source_split_5795;

  corral_source_split_5795:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i8 == 1);
    goto corral_source_split_5801;

  corral_source_split_5801:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32(1, $sub.i32(0, 1));
    goto corral_source_split_5802;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i11 == 1);
    goto corral_source_split_5808;

  corral_source_split_5808:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(1184, 1));
    goto corral_source_split_5809;

  corral_source_split_5809:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    call {:si_unique_call 1152} devirtbounce.9(0, $p15, 1, $p15);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb20:
    assume $i11 == 1;
    goto corral_source_split_5804;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(1184, 1));
    goto corral_source_split_5805;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    call {:si_unique_call 1151} devirtbounce.8(0, $p13, $p13);
    goto corral_source_split_5806;

  corral_source_split_5806:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume $i8 == 1;
    goto corral_source_split_5797;

  corral_source_split_5797:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(1184, 1));
    goto corral_source_split_5798;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    call {:si_unique_call 1150} devirtbounce.8(0, $p10, $p10);
    goto corral_source_split_5799;

  corral_source_split_5799:
    assume {:verifier.code 0} true;
    goto $bb19;
}



const notifier_to_errno: ref;

axiom notifier_to_errno == $sub.ref(0, 443485);

procedure notifier_to_errno($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation notifier_to_errno($i0: i32) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1163} {:cexpr "notifier_to_errno:arg:ret"} boogie_si_record_i32($i0);
    goto corral_source_split_5855;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    $i1 := $and.i32($i0, $sub.i32(0, 32769));
    call {:si_unique_call 1164} {:cexpr "ret"} boogie_si_record_i32($i1);
    goto corral_source_split_5856;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    $i2 := $sgt.i32($i1, 1);
    goto corral_source_split_5857;

  corral_source_split_5857:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_5862;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5864;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5859;

  corral_source_split_5859:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32(1, $i1);
    goto corral_source_split_5860;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    $i4 := $i3;
    goto $bb3;
}



const dev_uc_flush: ref;

axiom dev_uc_flush == $sub.ref(0, 444517);

procedure dev_uc_flush($p0: ref);
  free requires assertsPassed;



implementation dev_uc_flush($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5866;

  corral_source_split_5866:
    assume {:verifier.code 0} true;
    return;
}



const dev_mc_flush: ref;

axiom dev_mc_flush == $sub.ref(0, 445549);

procedure dev_mc_flush($p0: ref);
  free requires assertsPassed;



implementation dev_mc_flush($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5868;

  corral_source_split_5868:
    assume {:verifier.code 0} true;
    return;
}



const team_setup_by_port: ref;

axiom team_setup_by_port == $sub.ref(0, 446581);

procedure team_setup_by_port($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation team_setup_by_port($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i16;
  var $p7: ref;
  var $p8: ref;
  var $i9: i16;
  var $p10: ref;
  var $p11: ref;
  var $i12: i8;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $i18: i8;
  var $i19: i64;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var cmdloc_dummy_var_19: [ref]i8;
  var cmdloc_dummy_var_20: [ref]i8;
  var cmdloc_dummy_var_21: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5870;

  corral_source_split_5870:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 3176)), $mul.ref(512, 1));
    goto corral_source_split_5871;

  corral_source_split_5871:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_5872;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(512, 1));
    goto corral_source_split_5873;

  corral_source_split_5873:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, $p3);
    goto corral_source_split_5874;

  corral_source_split_5874:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 3176)), $mul.ref(540, 1));
    goto corral_source_split_5875;

  corral_source_split_5875:
    assume {:verifier.code 0} true;
    $i6 := $load.i16($M.0, $p5);
    goto corral_source_split_5876;

  corral_source_split_5876:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(540, 1));
    goto corral_source_split_5877;

  corral_source_split_5877:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p7, $i6);
    goto corral_source_split_5878;

  corral_source_split_5878:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 3176)), $mul.ref(542, 1));
    goto corral_source_split_5879;

  corral_source_split_5879:
    assume {:verifier.code 0} true;
    $i9 := $load.i16($M.0, $p8);
    goto corral_source_split_5880;

  corral_source_split_5880:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(542, 1));
    goto corral_source_split_5881;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p10, $i9);
    goto corral_source_split_5882;

  corral_source_split_5882:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 3176)), $mul.ref(581, 1));
    goto corral_source_split_5883;

  corral_source_split_5883:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_5884;

  corral_source_split_5884:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(581, 1));
    goto corral_source_split_5885;

  corral_source_split_5885:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p13, $i12);
    goto corral_source_split_5886;

  corral_source_split_5886:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 3176)), $mul.ref(536, 1));
    goto corral_source_split_5887;

  corral_source_split_5887:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_5888;

  corral_source_split_5888:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(536, 1));
    goto corral_source_split_5889;

  corral_source_split_5889:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, $i15);
    goto corral_source_split_5890;

  corral_source_split_5890:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 3176)), $mul.ref(581, 1));
    goto corral_source_split_5891;

  corral_source_split_5891:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.0, $p17);
    goto corral_source_split_5892;

  corral_source_split_5892:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i64($i18);
    call {:si_unique_call 1165} {:cexpr "__len"} boogie_si_record_i64($i19);
    goto corral_source_split_5893;

  corral_source_split_5893:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(888, 1));
    goto corral_source_split_5894;

  corral_source_split_5894:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_5895;

  corral_source_split_5895:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 3176)), $mul.ref(888, 1));
    goto corral_source_split_5896;

  corral_source_split_5896:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_5897;

  corral_source_split_5897:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_19 := $M.0;
    cmdloc_dummy_var_20 := $M.0;
    call {:si_unique_call 1166} cmdloc_dummy_var_21 := $memcpy.i8(cmdloc_dummy_var_19, cmdloc_dummy_var_20, $p21, $p23, $i19, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_21;
    goto corral_source_split_5898;

  corral_source_split_5898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1167} eth_hw_addr_inherit($p0, $p1);
    goto corral_source_split_5899;

  corral_source_split_5899:
    assume {:verifier.code 0} true;
    return;
}



const eth_hw_addr_inherit: ref;

axiom eth_hw_addr_inherit == $sub.ref(0, 447613);

procedure eth_hw_addr_inherit($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation eth_hw_addr_inherit($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i8;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5901;

  corral_source_split_5901:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 3176)), $mul.ref(580, 1));
    goto corral_source_split_5902;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_5903;

  corral_source_split_5903:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(580, 1));
    goto corral_source_split_5904;

  corral_source_split_5904:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p4, $i3);
    goto corral_source_split_5905;

  corral_source_split_5905:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(840, 1));
    goto corral_source_split_5906;

  corral_source_split_5906:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_5907;

  corral_source_split_5907:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 3176)), $mul.ref(840, 1));
    goto corral_source_split_5908;

  corral_source_split_5908:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_5909;

  corral_source_split_5909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1168} ether_addr_copy($p6, $p8);
    goto corral_source_split_5910;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    return;
}



const ether_addr_copy: ref;

axiom ether_addr_copy == $sub.ref(0, 448645);

procedure ether_addr_copy($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation ether_addr_copy($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i16;
  var $p8: ref;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5912;

  corral_source_split_5912:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5913;

  corral_source_split_5913:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_5914;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_5915;

  corral_source_split_5915:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, $i3);
    goto corral_source_split_5916;

  corral_source_split_5916:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p1);
    goto corral_source_split_5917;

  corral_source_split_5917:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref(4, 2));
    goto corral_source_split_5918;

  corral_source_split_5918:
    assume {:verifier.code 0} true;
    $i7 := $load.i16($M.0, $p6);
    goto corral_source_split_5919;

  corral_source_split_5919:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p0);
    goto corral_source_split_5920;

  corral_source_split_5920:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p8, $mul.ref(4, 2));
    goto corral_source_split_5921;

  corral_source_split_5921:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p9, $i7);
    goto corral_source_split_5922;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    return;
}



const __team_netpoll_cleanup: ref;

axiom __team_netpoll_cleanup == $sub.ref(0, 449677);

procedure __team_netpoll_cleanup($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation __team_netpoll_cleanup($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5924;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(320, 1)), $mul.ref(0, 1));
    goto corral_source_split_5925;

  corral_source_split_5925:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_5926;

  corral_source_split_5926:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5927;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_5928;

  corral_source_split_5928:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_5929;

  corral_source_split_5929:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_5930;

  corral_source_split_5930:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(320, 1));
    goto corral_source_split_5931;

  corral_source_split_5931:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_5932;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i7, $i9);
    goto corral_source_split_5933;

  corral_source_split_5933:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_5935;

  corral_source_split_5935:
    assume {:verifier.code 0} true;
    $p11 := $p5;
    goto $bb4;

  $bb4:
    call $p13, $p14, $p15, $p16, $p17, $i18, $i19, $p11 := __team_netpoll_cleanup_loop_$bb4($i9, $p13, $p14, $p15, $p16, $p17, $i18, $i19, $p11);
    goto $bb4_last;

  corral_source_split_5937:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1169} team_port_disable_netpoll($p11);
    goto corral_source_split_5939;

  corral_source_split_5939:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_5940;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_5941;

  corral_source_split_5941:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_5942;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p15, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_5943;

  corral_source_split_5943:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p15, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_5944;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_5945;

  corral_source_split_5945:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, $i9);
    goto corral_source_split_5946;

  corral_source_split_5946:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i19 == 1);
    goto corral_source_split_5948;

  corral_source_split_5948:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    $p11 := $p16;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5937;
}



const vlan_vid_del: ref;

axiom vlan_vid_del == $sub.ref(0, 450709);

procedure vlan_vid_del($p0: ref, $i1: i16, $i2: i16);
  free requires assertsPassed;



implementation vlan_vid_del($p0: ref, $i1: i16, $i2: i16)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1170} {:cexpr "vlan_vid_del:arg:arg1"} boogie_si_record_i16($i1);
    call {:si_unique_call 1171} {:cexpr "vlan_vid_del:arg:arg2"} boogie_si_record_i16($i2);
    goto corral_source_split_5950;

  corral_source_split_5950:
    assume {:verifier.code 0} true;
    return;
}



const vlan_vid_add: ref;

axiom vlan_vid_add == $sub.ref(0, 451741);

procedure vlan_vid_add($p0: ref, $i1: i16, $i2: i16) returns ($r: i32);
  free requires assertsPassed;



implementation vlan_vid_add($p0: ref, $i1: i16, $i2: i16) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1172} {:cexpr "vlan_vid_add:arg:arg1"} boogie_si_record_i16($i1);
    call {:si_unique_call 1173} {:cexpr "vlan_vid_add:arg:arg2"} boogie_si_record_i16($i2);
    goto corral_source_split_5952;

  corral_source_split_5952:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1174} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1175} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_5953;

  corral_source_split_5953:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const u64_stats_fetch_begin_irq: ref;

axiom u64_stats_fetch_begin_irq == $sub.ref(0, 452773);

procedure u64_stats_fetch_begin_irq($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation u64_stats_fetch_begin_irq($p0: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5955;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const u64_stats_fetch_retry_irq: ref;

axiom u64_stats_fetch_retry_irq == $sub.ref(0, 453805);

procedure u64_stats_fetch_retry_irq($p0: ref, $i1: i32) returns ($r: i1);
  free requires assertsPassed;



implementation u64_stats_fetch_retry_irq($p0: ref, $i1: i32) returns ($r: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1176} {:cexpr "u64_stats_fetch_retry_irq:arg:start"} boogie_si_record_i32($i1);
    goto corral_source_split_5957;

  corral_source_split_5957:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const cpumask_next: ref;

axiom cpumask_next == $sub.ref(0, 454837);

procedure cpumask_next($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation cpumask_next($i0: i32, $p1: ref) returns ($r: i32)
{
  var $i2: i1;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i64;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i32;
  var vslice_dummy_var_103: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1177} {:cexpr "cpumask_next:arg:n"} boogie_si_record_i32($i0);
    goto corral_source_split_5959;

  corral_source_split_5959:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i0, $sub.i32(0, 1));
    goto corral_source_split_5960;

  corral_source_split_5960:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 1024)), $mul.ref(0, 1));
    goto corral_source_split_5965;

  corral_source_split_5965:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_5966;

  corral_source_split_5966:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_5967;

  corral_source_split_5967:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_5968;

  corral_source_split_5968:
    assume {:verifier.code 0} true;
    $i8 := $add.i32($i0, 1);
    goto corral_source_split_5969;

  corral_source_split_5969:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_5970;

  corral_source_split_5970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1179} $i10 := find_next_bit($p5, $i7, $i9);
    call {:si_unique_call 1180} {:cexpr "tmp"} boogie_si_record_i64($i10);
    goto corral_source_split_5971;

  corral_source_split_5971:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i64.i32($i10);
    goto corral_source_split_5972;

  corral_source_split_5972:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5962;

  corral_source_split_5962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1178} vslice_dummy_var_103 := cpumask_check($i0);
    goto corral_source_split_5963;

  corral_source_split_5963:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const cpumask_check: ref;

axiom cpumask_check == $sub.ref(0, 455869);

procedure cpumask_check($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation cpumask_check($i0: i32) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $i22: i1;
  var $i23: i32;
  var $i24: i64;
  var vslice_dummy_var_104: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1181} {:cexpr "cpumask_check:arg:cpu"} boogie_si_record_i32($i0);
    goto corral_source_split_5974;

  corral_source_split_5974:
    assume {:verifier.code 0} true;
    $i1 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_5975;

  corral_source_split_5975:
    assume {:verifier.code 0} true;
    $i2 := $ule.i32($i1, $i0);
    goto corral_source_split_5976;

  corral_source_split_5976:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    call {:si_unique_call 1182} {:cexpr "__ret_warn_once"} boogie_si_record_i32($i3);
    goto corral_source_split_5977;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_5978;

  corral_source_split_5978:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_5979;

  corral_source_split_5979:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_5980;

  corral_source_split_5980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1183} $i7 := ldv__builtin_expect($i6, 0);
    call {:si_unique_call 1184} {:cexpr "tmp___1"} boogie_si_record_i64($i7);
    goto corral_source_split_5981;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_5982;

  corral_source_split_5982:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i3, 0);
    goto corral_source_split_6005;

  corral_source_split_6005:
    assume {:verifier.code 0} true;
    $i23 := $zext.i1.i32($i22);
    goto corral_source_split_6006;

  corral_source_split_6006:
    assume {:verifier.code 0} true;
    $i24 := $sext.i32.i64($i23);
    goto corral_source_split_6007;

  corral_source_split_6007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1191} vslice_dummy_var_104 := ldv__builtin_expect($i24, 0);
    goto corral_source_split_6008;

  corral_source_split_6008:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_5984;

  corral_source_split_5984:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1(1);
    goto corral_source_split_5985;

  corral_source_split_5985:
    assume {:verifier.code 0} true;
    $i10 := $xor.i1($i9, 1);
    goto corral_source_split_5986;

  corral_source_split_5986:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    call {:si_unique_call 1185} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i11);
    goto corral_source_split_5987;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_5988;

  corral_source_split_5988:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i12);
    goto corral_source_split_5989;

  corral_source_split_5989:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_5990;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1186} $i15 := ldv__builtin_expect($i14, 0);
    call {:si_unique_call 1187} {:cexpr "tmp"} boogie_si_record_i64($i15);
    goto corral_source_split_5991;

  corral_source_split_5991:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_5992;

  corral_source_split_5992:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i11, 0);
    goto corral_source_split_5997;

  corral_source_split_5997:
    assume {:verifier.code 0} true;
    $i18 := $zext.i1.i32($i17);
    goto corral_source_split_5998;

  corral_source_split_5998:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i18);
    goto corral_source_split_5999;

  corral_source_split_5999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1189} $i20 := ldv__builtin_expect($i19, 0);
    call {:si_unique_call 1190} {:cexpr "tmp___0"} boogie_si_record_i64($i20);
    goto corral_source_split_6000;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_6001;

  corral_source_split_6001:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i21 == 1;
    goto corral_source_split_6003;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume $i16 == 1;
    goto corral_source_split_5994;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1188} warn_slowpath_null(.str.37, 108);
    goto corral_source_split_5995;

  corral_source_split_5995:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const find_next_bit: ref;

axiom find_next_bit == $sub.ref(0, 456901);

procedure find_next_bit($p0: ref, $i1: i64, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation find_next_bit($p0: ref, $i1: i64, $i2: i64) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1192} {:cexpr "find_next_bit:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 1193} {:cexpr "find_next_bit:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_6010;

  corral_source_split_6010:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1194} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1195} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_6011;

  corral_source_split_6011:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const dev_uc_sync_multiple: ref;

axiom dev_uc_sync_multiple == $sub.ref(0, 457933);

procedure dev_uc_sync_multiple($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_uc_sync_multiple($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6013;

  corral_source_split_6013:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1196} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1197} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_6014;

  corral_source_split_6014:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const dev_mc_sync_multiple: ref;

axiom dev_mc_sync_multiple == $sub.ref(0, 458965);

procedure dev_mc_sync_multiple($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_mc_sync_multiple($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6016;

  corral_source_split_6016:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1198} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1199} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_6017;

  corral_source_split_6017:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const dev_set_promiscuity: ref;

axiom dev_set_promiscuity == $sub.ref(0, 459997);

procedure dev_set_promiscuity($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dev_set_promiscuity($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1200} {:cexpr "dev_set_promiscuity:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_6019;

  corral_source_split_6019:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1201} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1202} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_6020;

  corral_source_split_6020:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const dev_set_allmulti: ref;

axiom dev_set_allmulti == $sub.ref(0, 461029);

procedure dev_set_allmulti($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dev_set_allmulti($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1203} {:cexpr "dev_set_allmulti:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_6022;

  corral_source_split_6022:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1204} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1205} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_6023;

  corral_source_split_6023:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const skb_rx_queue_recorded: ref;

axiom skb_rx_queue_recorded == $sub.ref(0, 462061);

procedure skb_rx_queue_recorded($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation skb_rx_queue_recorded($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i16;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6025;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(168, 1));
    goto corral_source_split_6026;

  corral_source_split_6026:
    assume {:verifier.code 0} true;
    $i2 := $load.i16($M.0, $p1);
    goto corral_source_split_6027;

  corral_source_split_6027:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i2);
    goto corral_source_split_6028;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_6029;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const skb_get_rx_queue: ref;

axiom skb_get_rx_queue == $sub.ref(0, 463093);

procedure skb_get_rx_queue($p0: ref) returns ($r: i16);
  free requires assertsPassed;



implementation skb_get_rx_queue($p0: ref) returns ($r: i16)
{
  var $p1: ref;
  var $i2: i16;
  var $i3: i32;
  var $i4: i32;
  var $i5: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6031;

  corral_source_split_6031:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(168, 1));
    goto corral_source_split_6032;

  corral_source_split_6032:
    assume {:verifier.code 0} true;
    $i2 := $load.i16($M.0, $p1);
    goto corral_source_split_6033;

  corral_source_split_6033:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i2);
    goto corral_source_split_6034;

  corral_source_split_6034:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, 65535);
    goto corral_source_split_6035;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i32.i16($i4);
    goto corral_source_split_6036;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const qdisc_skb_cb: ref;

axiom qdisc_skb_cb == $sub.ref(0, 464125);

procedure qdisc_skb_cb($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation qdisc_skb_cb($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6038;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_6039;

  corral_source_split_6039:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_6040;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const team_queue_override_transmit: ref;

axiom team_queue_override_transmit == $sub.ref(0, 465157);

procedure team_queue_override_transmit($p0: ref, $p1: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.31, $M.32, $M.0, $CurrAddr;



implementation team_queue_override_transmit($p0: ref, $p1: ref) returns ($r: i1)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i1;
  var $p7: ref;
  var $i8: i16;
  var $i9: i32;
  var $i10: i1;
  var $p12: ref;
  var $i13: i16;
  var $i14: i32;
  var $i15: i16;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $i22: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i64;
  var $i29: i1;
  var $i31: i32;
  var $i32: i1;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $i39: i1;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $i45: i1;
  var $p30: ref;
  var $i11: i1;
  var vslice_dummy_var_105: i32;
  var vslice_dummy_var_106: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1206} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1207} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_6042;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(449, 1));
    goto corral_source_split_6043;

  corral_source_split_6043:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    goto corral_source_split_6044;

  corral_source_split_6044:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i5);
    goto corral_source_split_6045;

  corral_source_split_6045:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_6053;

  corral_source_split_6053:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_6047;

  corral_source_split_6047:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(168, 1));
    goto corral_source_split_6048;

  corral_source_split_6048:
    assume {:verifier.code 0} true;
    $i8 := $load.i16($M.0, $p7);
    goto corral_source_split_6049;

  corral_source_split_6049:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i8);
    goto corral_source_split_6050;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_6051;

  corral_source_split_6051:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(168, 1));
    goto corral_source_split_6055;

  corral_source_split_6055:
    assume {:verifier.code 0} true;
    $i13 := $load.i16($M.0, $p12);
    goto corral_source_split_6056;

  corral_source_split_6056:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i13);
    goto corral_source_split_6057;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i16($i14);
    goto corral_source_split_6058;

  corral_source_split_6058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1208} $p16 := __team_get_qom_list($p0, $i15);
    goto corral_source_split_6059;

  corral_source_split_6059:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6060;

  corral_source_split_6060:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_6061;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    $M.31 := $store.ref($M.31, $p2, $p18);
    goto corral_source_split_6062;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.31, $p2);
    goto corral_source_split_6063;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1209} $i20 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 1210} {:cexpr "tmp"} boogie_si_record_i32($i20);
    goto corral_source_split_6064;

  corral_source_split_6064:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_6065;

  corral_source_split_6065:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p19);
    goto corral_source_split_6073;

  corral_source_split_6073:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p24, $mul.ref($sub.ref(0, 128), 160));
    goto corral_source_split_6074;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p24, $mul.ref($sub.ref(0, 128), 160)), $mul.ref(128, 1));
    goto corral_source_split_6075;

  corral_source_split_6075:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_6076;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p16);
    goto corral_source_split_6077;

  corral_source_split_6077:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i27, $i28);
    goto corral_source_split_6078;

  corral_source_split_6078:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb6;

  $bb14:
    assume $i29 == 1;
    goto corral_source_split_6080;

  corral_source_split_6080:
    assume {:verifier.code 0} true;
    $p30 := $p25;
    goto $bb17;

  $bb17:
    call $i31, $i32, $p34, $p35, $p36, $i37, $i38, $i39, $p41, $p42, $p43, $i44, $i45, $p30, vslice_dummy_var_106 := team_queue_override_transmit_loop_$bb17($p0, $p1, $p3, $i28, $i31, $i32, $p34, $p35, $p36, $i37, $i38, $i39, $p41, $p42, $p43, $i44, $i45, $p30, vslice_dummy_var_106);
    goto $bb17_last;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1212} $i31 := team_dev_queue_xmit($p0, $p30, $p1);
    call {:si_unique_call 1213} {:cexpr "tmp___0"} boogie_si_record_i32($i31);
    goto corral_source_split_6084;

  corral_source_split_6084:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i31, 0);
    goto corral_source_split_6085;

  corral_source_split_6085:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p30, $mul.ref(0, 160)), $mul.ref(128, 1)), $mul.ref(0, 1));
    goto corral_source_split_6089;

  corral_source_split_6089:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_6090;

  corral_source_split_6090:
    assume {:verifier.code 0} true;
    $M.32 := $store.ref($M.32, $p3, $p35);
    goto corral_source_split_6091;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.32, $p3);
    goto corral_source_split_6092;

  corral_source_split_6092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1214} $i37 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 1215} {:cexpr "tmp___1"} boogie_si_record_i32($i37);
    goto corral_source_split_6093;

  corral_source_split_6093:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_6094;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p36);
    goto corral_source_split_6102;

  corral_source_split_6102:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($p41, $mul.ref($sub.ref(0, 128), 160));
    goto corral_source_split_6103;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p41, $mul.ref($sub.ref(0, 128), 160)), $mul.ref(128, 1));
    goto corral_source_split_6104;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p43);
    goto corral_source_split_6105;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    $i45 := $ne.i64($i44, $i28);
    goto corral_source_split_6106;

  corral_source_split_6106:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i45 == 1);
    goto corral_source_split_6108;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb28:
    assume $i45 == 1;
    assume {:verifier.code 0} true;
    $p30 := $p42;
    goto $bb28_dummy;

  $bb22:
    assume $i38 == 1;
    goto corral_source_split_6096;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i8.i1($u0);
    goto corral_source_split_6097;

  corral_source_split_6097:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i39 == 1);
    goto corral_source_split_6099;

  corral_source_split_6099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1216} vslice_dummy_var_106 := rcu_read_lock_held();
    goto corral_source_split_6100;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i39 == 1;
    goto $bb24;

  $bb19:
    assume $i32 == 1;
    goto corral_source_split_6087;

  corral_source_split_6087:
    assume {:verifier.code 0} true;
    $i11 := 1;
    goto $bb6;

  $bb8:
    assume $i21 == 1;
    goto corral_source_split_6067;

  corral_source_split_6067:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i8.i1($u0);
    goto corral_source_split_6068;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i22 == 1);
    goto corral_source_split_6070;

  corral_source_split_6070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1211} vslice_dummy_var_105 := rcu_read_lock_held();
    goto corral_source_split_6071;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb10;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb3;

  $bb28_dummy:
    assume false;
    return;

  $bb17_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6082;
}



const team_dev_queue_xmit: ref;

axiom team_dev_queue_xmit == $sub.ref(0, 466189);

procedure team_dev_queue_xmit($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation team_dev_queue_xmit($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i16;
  var $i6: i32;
  var $i7: i16;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i1;
  var $i14: i8;
  var $i15: i1;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $i20: i32;
  var $i19: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6110;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1217} $p3 := qdisc_skb_cb($p2);
    goto corral_source_split_6111;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 28)), $mul.ref(4, 1));
    goto corral_source_split_6112;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.0, $p4);
    goto corral_source_split_6113;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    goto corral_source_split_6114;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i16($i6);
    goto corral_source_split_6115;

  corral_source_split_6115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1218} skb_set_queue_mapping($p2, $i7);
    goto corral_source_split_6116;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_6117;

  corral_source_split_6117:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_6118;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(32, 1));
    goto corral_source_split_6119;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, $p9);
    goto corral_source_split_6120;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(0, 1));
    goto corral_source_split_6121;

  corral_source_split_6121:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_6122;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1219} $i13 := netpoll_tx_running($p12);
    goto corral_source_split_6123;

  corral_source_split_6123:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i8($i13);
    call {:si_unique_call 1220} {:cexpr "tmp___0"} boogie_si_record_i8($i14);
    goto corral_source_split_6124;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i8.i1($i14);
    goto corral_source_split_6125;

  corral_source_split_6125:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i64($i15);
    goto corral_source_split_6126;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1221} $i17 := ldv__builtin_expect($i16, 0);
    call {:si_unique_call 1222} {:cexpr "tmp___1"} boogie_si_record_i64($i17);
    goto corral_source_split_6127;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_6128;

  corral_source_split_6128:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1224} $i20 := dev_queue_xmit($p2);
    call {:si_unique_call 1225} {:cexpr "tmp___2"} boogie_si_record_i32($i20);
    goto corral_source_split_6135;

  corral_source_split_6135:
    assume {:verifier.code 0} true;
    $i19 := $i20;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6133;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_6130;

  corral_source_split_6130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1223} team_netpoll_send_skb($p1, $p2);
    goto corral_source_split_6131;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb3;
}



const skb_set_queue_mapping: ref;

axiom skb_set_queue_mapping == $sub.ref(0, 467221);

procedure skb_set_queue_mapping($p0: ref, $i1: i16);
  free requires assertsPassed;
  modifies $M.0;



implementation skb_set_queue_mapping($p0: ref, $i1: i16)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1226} {:cexpr "skb_set_queue_mapping:arg:queue_mapping"} boogie_si_record_i16($i1);
    goto corral_source_split_6137;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(168, 1));
    goto corral_source_split_6138;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p2, $i1);
    goto corral_source_split_6139;

  corral_source_split_6139:
    assume {:verifier.code 0} true;
    return;
}



const netpoll_tx_running: ref;

axiom netpoll_tx_running == $sub.ref(0, 468253);

procedure netpoll_tx_running($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation netpoll_tx_running($p0: ref) returns ($r: i1)
{
  var $i1: i64;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6141;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1227} $i1 := arch_local_save_flags();
    call {:si_unique_call 1228} {:cexpr "_flags"} boogie_si_record_i64($i1);
    goto corral_source_split_6142;

  corral_source_split_6142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1229} $i2 := arch_irqs_disabled_flags($i1);
    call {:si_unique_call 1230} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_6143;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_6144;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const team_netpoll_send_skb: ref;

axiom team_netpoll_send_skb == $sub.ref(0, 469285);

procedure team_netpoll_send_skb($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation team_netpoll_send_skb($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6146;

  corral_source_split_6146:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(112, 1));
    goto corral_source_split_6147;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_6148;

  corral_source_split_6148:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_6149;

  corral_source_split_6149:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_6150;

  corral_source_split_6150:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_6152;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1231} netpoll_send_skb($p3, $p1);
    goto corral_source_split_6153;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const dev_queue_xmit: ref;

axiom dev_queue_xmit == $sub.ref(0, 470317);

procedure dev_queue_xmit($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_queue_xmit($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6155;

  corral_source_split_6155:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1232} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1233} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_6156;

  corral_source_split_6156:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const netpoll_send_skb: ref;

axiom netpoll_send_skb == $sub.ref(0, 471349);

procedure netpoll_send_skb($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation netpoll_send_skb($p0: ref, $p1: ref)
{
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6158;

  corral_source_split_6158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1234} $i2 := arch_local_irq_save();
    call {:si_unique_call 1235} {:cexpr "flags"} boogie_si_record_i64($i2);
    goto corral_source_split_6159;

  corral_source_split_6159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1236} trace_hardirqs_off();
    goto corral_source_split_6160;

  corral_source_split_6160:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_6161;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_6162;

  corral_source_split_6162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1237} netpoll_send_skb_on_dev($p0, $p1, $p4);
    goto corral_source_split_6163;

  corral_source_split_6163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1238} $i5 := arch_irqs_disabled_flags($i2);
    call {:si_unique_call 1239} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_6164;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_6165;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_6171;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1242} trace_hardirqs_on();
    goto corral_source_split_6172;

  corral_source_split_6172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1243} arch_local_irq_restore($i2);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_6167;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1240} arch_local_irq_restore($i2);
    goto corral_source_split_6168;

  corral_source_split_6168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1241} trace_hardirqs_off();
    goto corral_source_split_6169;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const arch_local_irq_save: ref;

axiom arch_local_irq_save == $sub.ref(0, 472381);

procedure arch_local_irq_save() returns ($r: i64);
  free requires assertsPassed;



implementation arch_local_irq_save() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6174;

  corral_source_split_6174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1244} $i0 := arch_local_save_flags();
    call {:si_unique_call 1245} {:cexpr "f"} boogie_si_record_i64($i0);
    goto corral_source_split_6175;

  corral_source_split_6175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1246} arch_local_irq_disable();
    goto corral_source_split_6176;

  corral_source_split_6176:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const trace_hardirqs_off: ref;

axiom trace_hardirqs_off == $sub.ref(0, 473413);

procedure trace_hardirqs_off();
  free requires assertsPassed;



implementation trace_hardirqs_off()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6178;

  corral_source_split_6178:
    assume {:verifier.code 0} true;
    return;
}



const netpoll_send_skb_on_dev: ref;

axiom netpoll_send_skb_on_dev == $sub.ref(0, 474445);

procedure netpoll_send_skb_on_dev($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation netpoll_send_skb_on_dev($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6180;

  corral_source_split_6180:
    assume {:verifier.code 0} true;
    return;
}



const arch_irqs_disabled_flags: ref;

axiom arch_irqs_disabled_flags == $sub.ref(0, 475477);

procedure arch_irqs_disabled_flags($i0: i64) returns ($r: i32);
  free requires assertsPassed;



implementation arch_irqs_disabled_flags($i0: i64) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1247} {:cexpr "arch_irqs_disabled_flags:arg:flags"} boogie_si_record_i64($i0);
    goto corral_source_split_6182;

  corral_source_split_6182:
    assume {:verifier.code 0} true;
    $i1 := $and.i64($i0, 512);
    goto corral_source_split_6183;

  corral_source_split_6183:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_6184;

  corral_source_split_6184:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_6185;

  corral_source_split_6185:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const arch_local_irq_restore: ref;

axiom arch_local_irq_restore == $sub.ref(0, 476509);

procedure arch_local_irq_restore($i0: i64);
  free requires assertsPassed;



implementation arch_local_irq_restore($i0: i64)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $i8: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1248} {:cexpr "arch_local_irq_restore:arg:f"} boogie_si_record_i64($i0);
    goto corral_source_split_6187;

  corral_source_split_6187:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.0, $add.ref($add.ref($add.ref(pv_irq_ops, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(0, 1)));
    goto corral_source_split_6188;

  corral_source_split_6188:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_6189;

  corral_source_split_6189:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_6190;

  corral_source_split_6190:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_6191;

  corral_source_split_6191:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_6192;

  corral_source_split_6192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1249} $i6 := ldv__builtin_expect($i5, 0);
    call {:si_unique_call 1250} {:cexpr "tmp"} boogie_si_record_i64($i6);
    goto corral_source_split_6193;

  corral_source_split_6193:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_6194;

  corral_source_split_6194:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call {:si_unique_call 1252} $i8 := devirtbounce.15(0, 45, $add.ref($add.ref($add.ref(pv_irq_ops, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(0, 1)), 1, $i0);
    call {:si_unique_call 1253} {:cexpr "__eax"} boogie_si_record_i64($i8);
    goto corral_source_split_6198;

  corral_source_split_6198:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    call {:si_unique_call 1251} devirtbounce.1(0, .str.35, 809, 12);
    goto corral_source_split_6196;

  corral_source_split_6196:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call arch_local_irq_restore_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const trace_hardirqs_on: ref;

axiom trace_hardirqs_on == $sub.ref(0, 477541);

procedure trace_hardirqs_on();
  free requires assertsPassed;



implementation trace_hardirqs_on()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6200;

  corral_source_split_6200:
    assume {:verifier.code 0} true;
    return;
}



const arch_local_save_flags: ref;

axiom arch_local_save_flags == $sub.ref(0, 478573);

procedure arch_local_save_flags() returns ($r: i64);
  free requires assertsPassed;



implementation arch_local_save_flags() returns ($r: i64)
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6202;

  corral_source_split_6202:
    assume {:verifier.code 0} true;
    $p0 := $load.ref($M.0, pv_irq_ops);
    goto corral_source_split_6203;

  corral_source_split_6203:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_6204;

  corral_source_split_6204:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_6205;

  corral_source_split_6205:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_6206;

  corral_source_split_6206:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_6207;

  corral_source_split_6207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1254} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 1255} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_6208;

  corral_source_split_6208:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_6209;

  corral_source_split_6209:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call {:si_unique_call 1257} $i7 := devirtbounce.16(0, 44, pv_irq_ops, 1);
    call {:si_unique_call 1258} {:cexpr "__eax"} boogie_si_record_i64($i7);
    goto corral_source_split_6213;

  corral_source_split_6213:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i6 == 1;
    call {:si_unique_call 1256} devirtbounce.1(0, .str.35, 804, 12);
    goto corral_source_split_6211;

  corral_source_split_6211:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call arch_local_save_flags_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const arch_local_irq_disable: ref;

axiom arch_local_irq_disable == $sub.ref(0, 479605);

procedure arch_local_irq_disable();
  free requires assertsPassed;



implementation arch_local_irq_disable()
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6215;

  corral_source_split_6215:
    assume {:verifier.code 0} true;
    $p0 := $load.ref($M.0, $add.ref($add.ref($add.ref(pv_irq_ops, $mul.ref(0, 56)), $mul.ref(16, 1)), $mul.ref(0, 1)));
    goto corral_source_split_6216;

  corral_source_split_6216:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_6217;

  corral_source_split_6217:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_6218;

  corral_source_split_6218:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_6219;

  corral_source_split_6219:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_6220;

  corral_source_split_6220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1259} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 1260} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_6221;

  corral_source_split_6221:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_6222;

  corral_source_split_6222:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call {:si_unique_call 1262} $i7 := devirtbounce.16(0, 46, $add.ref($add.ref($add.ref(pv_irq_ops, $mul.ref(0, 56)), $mul.ref(16, 1)), $mul.ref(0, 1)), 1);
    call {:si_unique_call 1263} {:cexpr "__eax"} boogie_si_record_i64($i7);
    goto corral_source_split_6226;

  corral_source_split_6226:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    call {:si_unique_call 1261} devirtbounce.1(0, .str.35, 814, 12);
    goto corral_source_split_6224;

  corral_source_split_6224:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call arch_local_irq_disable_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const team_mcast_rejoin_fini: ref;

axiom team_mcast_rejoin_fini == $sub.ref(0, 480637);

procedure team_mcast_rejoin_fini($p0: ref);
  free requires assertsPassed;



implementation team_mcast_rejoin_fini($p0: ref)
{
  var $p2: ref;
  var vslice_dummy_var_107: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6228;

  corral_source_split_6228:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(712, 1)), $mul.ref(16, 1));
    goto corral_source_split_6229;

  corral_source_split_6229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1264} vslice_dummy_var_107 := cancel_delayed_work_sync($p2);
    goto corral_source_split_6230;

  corral_source_split_6230:
    assume {:verifier.code 0} true;
    return;
}



const team_notify_peers_fini: ref;

axiom team_notify_peers_fini == $sub.ref(0, 481669);

procedure team_notify_peers_fini($p0: ref);
  free requires assertsPassed;



implementation team_notify_peers_fini($p0: ref)
{
  var $p2: ref;
  var vslice_dummy_var_108: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6232;

  corral_source_split_6232:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(472, 1)), $mul.ref(16, 1));
    goto corral_source_split_6233;

  corral_source_split_6233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1265} vslice_dummy_var_108 := cancel_delayed_work_sync($p2);
    goto corral_source_split_6234;

  corral_source_split_6234:
    assume {:verifier.code 0} true;
    return;
}



const team_queue_override_fini: ref;

axiom team_queue_override_fini == $sub.ref(0, 482701);

procedure team_queue_override_fini($p0: ref);
  free requires assertsPassed;



implementation team_queue_override_fini($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6236;

  corral_source_split_6236:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(456, 1));
    goto corral_source_split_6237;

  corral_source_split_6237:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_6238;

  corral_source_split_6238:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_6239;

  corral_source_split_6239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1266} kfree($p3);
    goto corral_source_split_6240;

  corral_source_split_6240:
    assume {:verifier.code 0} true;
    return;
}



const cancel_delayed_work_sync: ref;

axiom cancel_delayed_work_sync == $sub.ref(0, 483733);

procedure cancel_delayed_work_sync($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation cancel_delayed_work_sync($p0: ref) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6242;

  corral_source_split_6242:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1267} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 1268} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_6243;

  corral_source_split_6243:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __mutex_init: ref;

axiom __mutex_init == $sub.ref(0, 484765);

procedure __mutex_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __mutex_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6245;

  corral_source_split_6245:
    assume {:verifier.code 0} true;
    return;
}



const __alloc_percpu: ref;

axiom __alloc_percpu == $sub.ref(0, 485797);

procedure __alloc_percpu($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;



implementation __alloc_percpu($i0: i64, $i1: i64) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1269} {:cexpr "__alloc_percpu:arg:arg0"} boogie_si_record_i64($i0);
    call {:si_unique_call 1270} {:cexpr "__alloc_percpu:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_6247;

  corral_source_split_6247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1271} $p2 := external_alloc();
    goto corral_source_split_6248;

  corral_source_split_6248:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const team_queue_override_init: ref;

axiom team_queue_override_init == $sub.ref(0, 486829);

procedure team_queue_override_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation team_queue_override_init($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i8: i64;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $i15: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $i16: i32;
  var $p17: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6250;

  corral_source_split_6250:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(0, 1));
    goto corral_source_split_6251;

  corral_source_split_6251:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_6252;

  corral_source_split_6252:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 3176)), $mul.ref(928, 1));
    goto corral_source_split_6253;

  corral_source_split_6253:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_6254;

  corral_source_split_6254:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32($i4, 1);
    call {:si_unique_call 1272} {:cexpr "queue_cnt"} boogie_si_record_i32($i5);
    goto corral_source_split_6255;

  corral_source_split_6255:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_6256;

  corral_source_split_6256:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i8 := $zext.i32.i64($i5);
    goto corral_source_split_6262;

  corral_source_split_6262:
    assume {:verifier.code 0} true;
    $i9 := $mul.i64($i8, 16);
    goto corral_source_split_6263;

  corral_source_split_6263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1273} $p10 := kmalloc($i9, 208);
    goto corral_source_split_6264;

  corral_source_split_6264:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_6265;

  corral_source_split_6265:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_6266;

  corral_source_split_6266:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_6267;

  corral_source_split_6267:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(456, 1));
    goto corral_source_split_6271;

  corral_source_split_6271:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p14, $p10);
    goto corral_source_split_6272;

  corral_source_split_6272:
    assume {:verifier.code 0} true;
    $i15 := $ult.i32(0, $i5);
    goto corral_source_split_6273;

  corral_source_split_6273:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6260;

  corral_source_split_6260:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_6275;

  corral_source_split_6275:
    assume {:verifier.code 0} true;
    $i16, $p17 := 0, $p10;
    goto $bb11;

  $bb11:
    call $p18, $i19, $i20, $i16, $p17 := team_queue_override_init_loop_$bb11($i5, $p18, $i19, $i20, $i16, $p17);
    goto $bb11_last;

  corral_source_split_6277:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p17, $mul.ref(1, 16));
    goto corral_source_split_6279;

  corral_source_split_6279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1274} INIT_LIST_HEAD($p17);
    goto corral_source_split_6280;

  corral_source_split_6280:
    assume {:verifier.code 0} true;
    $i19 := $add.i32($i16, 1);
    call {:si_unique_call 1275} {:cexpr "i"} boogie_si_record_i32($i19);
    goto corral_source_split_6281;

  corral_source_split_6281:
    assume {:verifier.code 0} true;
    $i20 := $ult.i32($i19, $i5);
    goto corral_source_split_6282;

  corral_source_split_6282:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i20 == 1);
    goto corral_source_split_6284;

  corral_source_split_6284:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb13:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $i16, $p17 := $i19, $p18;
    goto $bb13_dummy;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_6269;

  corral_source_split_6269:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 12);
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_6258;

  corral_source_split_6258:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb13_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6277;
}



const team_notify_peers_init: ref;

axiom team_notify_peers_init == $sub.ref(0, 487861);

procedure team_notify_peers_init($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation team_notify_peers_init($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p6: ref;
  var $p7: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p17: ref;
  var $p21: ref;
  var $p25: ref;
  var $p28: ref;
  var $p32: ref;
  var $p34: ref;
  var $i35: i64;
  var $p39: ref;
  var cmdloc_dummy_var_22: [ref]i8;
  var cmdloc_dummy_var_23: [ref]i8;
  var cmdloc_dummy_var_24: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1276} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1277} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1278} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_6286;

  corral_source_split_6286:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(472, 1)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_6287;

  corral_source_split_6287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1279} __init_work($p6, 0);
    goto corral_source_split_6288;

  corral_source_split_6288:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_6289;

  corral_source_split_6289:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p7, 137438953408);
    goto corral_source_split_6290;

  corral_source_split_6290:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(472, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6291;

  corral_source_split_6291:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_6292;

  corral_source_split_6292:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p2);
    goto corral_source_split_6293;

  corral_source_split_6293:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_22 := $M.0;
    cmdloc_dummy_var_23 := $M.0;
    call {:si_unique_call 1280} cmdloc_dummy_var_24 := $memcpy.i8(cmdloc_dummy_var_22, cmdloc_dummy_var_23, $p12, $p13, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_24;
    goto corral_source_split_6294;

  corral_source_split_6294:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(472, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_6295;

  corral_source_split_6295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1281} lockdep_init_map($p17, .str.38, $p1, 0);
    goto corral_source_split_6296;

  corral_source_split_6296:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(472, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_6297;

  corral_source_split_6297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1282} INIT_LIST_HEAD($p21);
    goto corral_source_split_6298;

  corral_source_split_6298:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(472, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_6299;

  corral_source_split_6299:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p25, team_notify_peers_work);
    goto corral_source_split_6300;

  corral_source_split_6300:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(472, 1)), $mul.ref(16, 1)), $mul.ref(80, 1));
    goto corral_source_split_6301;

  corral_source_split_6301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1283} init_timer_key($p28, 2, .str.39, $p3);
    goto corral_source_split_6302;

  corral_source_split_6302:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(472, 1)), $mul.ref(16, 1)), $mul.ref(80, 1)), $mul.ref(32, 1));
    goto corral_source_split_6303;

  corral_source_split_6303:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p32, delayed_work_timer_fn);
    goto corral_source_split_6304;

  corral_source_split_6304:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(472, 1)), $mul.ref(16, 1));
    goto corral_source_split_6305;

  corral_source_split_6305:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    goto corral_source_split_6306;

  corral_source_split_6306:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(472, 1)), $mul.ref(16, 1)), $mul.ref(80, 1)), $mul.ref(40, 1));
    goto corral_source_split_6307;

  corral_source_split_6307:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p39, $i35);
    goto corral_source_split_6308;

  corral_source_split_6308:
    assume {:verifier.code 0} true;
    return;
}



const team_mcast_rejoin_init: ref;

axiom team_mcast_rejoin_init == $sub.ref(0, 488893);

procedure team_mcast_rejoin_init($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation team_mcast_rejoin_init($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p6: ref;
  var $p7: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p17: ref;
  var $p21: ref;
  var $p25: ref;
  var $p28: ref;
  var $p32: ref;
  var $p34: ref;
  var $i35: i64;
  var $p39: ref;
  var cmdloc_dummy_var_25: [ref]i8;
  var cmdloc_dummy_var_26: [ref]i8;
  var cmdloc_dummy_var_27: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1284} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1285} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1286} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_6310;

  corral_source_split_6310:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(712, 1)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_6311;

  corral_source_split_6311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1287} __init_work($p6, 0);
    goto corral_source_split_6312;

  corral_source_split_6312:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_6313;

  corral_source_split_6313:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p7, 137438953408);
    goto corral_source_split_6314;

  corral_source_split_6314:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(712, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6315;

  corral_source_split_6315:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_6316;

  corral_source_split_6316:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p2);
    goto corral_source_split_6317;

  corral_source_split_6317:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_25 := $M.0;
    cmdloc_dummy_var_26 := $M.0;
    call {:si_unique_call 1288} cmdloc_dummy_var_27 := $memcpy.i8(cmdloc_dummy_var_25, cmdloc_dummy_var_26, $p12, $p13, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_27;
    goto corral_source_split_6318;

  corral_source_split_6318:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(712, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_6319;

  corral_source_split_6319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1289} lockdep_init_map($p17, .str.40, $p1, 0);
    goto corral_source_split_6320;

  corral_source_split_6320:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(712, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_6321;

  corral_source_split_6321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1290} INIT_LIST_HEAD($p21);
    goto corral_source_split_6322;

  corral_source_split_6322:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(712, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_6323;

  corral_source_split_6323:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p25, team_mcast_rejoin_work);
    goto corral_source_split_6324;

  corral_source_split_6324:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(712, 1)), $mul.ref(16, 1)), $mul.ref(80, 1));
    goto corral_source_split_6325;

  corral_source_split_6325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1291} init_timer_key($p28, 2, .str.41, $p3);
    goto corral_source_split_6326;

  corral_source_split_6326:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(712, 1)), $mul.ref(16, 1)), $mul.ref(80, 1)), $mul.ref(32, 1));
    goto corral_source_split_6327;

  corral_source_split_6327:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p32, delayed_work_timer_fn);
    goto corral_source_split_6328;

  corral_source_split_6328:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(712, 1)), $mul.ref(16, 1));
    goto corral_source_split_6329;

  corral_source_split_6329:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    goto corral_source_split_6330;

  corral_source_split_6330:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 984)), $mul.ref(712, 1)), $mul.ref(16, 1)), $mul.ref(80, 1)), $mul.ref(40, 1));
    goto corral_source_split_6331;

  corral_source_split_6331:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p39, $i35);
    goto corral_source_split_6332;

  corral_source_split_6332:
    assume {:verifier.code 0} true;
    return;
}



const team_set_lockdep_class: ref;

axiom team_set_lockdep_class == $sub.ref(0, 489925);

procedure team_set_lockdep_class($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation team_set_lockdep_class($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6334;

  corral_source_split_6334:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(592, 1)), $mul.ref(0, 1));
    goto corral_source_split_6335;

  corral_source_split_6335:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_6336;

  corral_source_split_6336:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_6337;

  corral_source_split_6337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1292} lockdep_init_map($p4, .str.58, team_netdev_addr_lock_key, 0);
    goto corral_source_split_6338;

  corral_source_split_6338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1293} netdev_for_each_tx_queue($p0, team_set_lockdep_class_one, $0.ref);
    goto corral_source_split_6339;

  corral_source_split_6339:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(2888, 1));
    goto corral_source_split_6340;

  corral_source_split_6340:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p5, team_tx_busylock_key);
    goto corral_source_split_6341;

  corral_source_split_6341:
    assume {:verifier.code 0} true;
    return;
}



const lockdep_init_map: ref;

axiom lockdep_init_map == $sub.ref(0, 490957);

procedure lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;



implementation lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1294} {:cexpr "lockdep_init_map:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_6343;

  corral_source_split_6343:
    assume {:verifier.code 0} true;
    return;
}



const team_set_lockdep_class_one: ref;

axiom team_set_lockdep_class_one == $sub.ref(0, 491989);

procedure team_set_lockdep_class_one($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation team_set_lockdep_class_one($p0: ref, $p1: ref, $p2: ref)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6345;

  corral_source_split_6345:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 496)), $mul.ref(328, 1)), $mul.ref(0, 1));
    goto corral_source_split_6346;

  corral_source_split_6346:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_6347;

  corral_source_split_6347:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_6348;

  corral_source_split_6348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1295} lockdep_init_map($p6, .str.59, team_netdev_xmit_lock_key, 0);
    goto corral_source_split_6349;

  corral_source_split_6349:
    assume {:verifier.code 0} true;
    return;
}



const netdev_for_each_tx_queue: ref;

axiom netdev_for_each_tx_queue == $sub.ref(0, 493021);

procedure netdev_for_each_tx_queue($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation netdev_for_each_tx_queue($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6351;

  corral_source_split_6351:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(928, 1));
    goto corral_source_split_6352;

  corral_source_split_6352:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_6353;

  corral_source_split_6353:
    assume {:verifier.code 0} true;
    $i5 := $ugt.i32($i4, 0);
    goto corral_source_split_6354;

  corral_source_split_6354:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_6356;

  corral_source_split_6356:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb4;

  $bb4:
    call $p7, $p8, $i9, $p10, $i11, $i12, $i13, $i6 := netdev_for_each_tx_queue_loop_$bb4($p0, $p1, $p2, $p3, $p7, $p8, $i9, $p10, $i11, $i12, $i13, $i6);
    goto $bb4_last;

  corral_source_split_6358:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(920, 1));
    goto corral_source_split_6360;

  corral_source_split_6360:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_6361;

  corral_source_split_6361:
    assume {:verifier.code 0} true;
    $i9 := $zext.i32.i64($i6);
    goto corral_source_split_6362;

  corral_source_split_6362:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p8, $mul.ref($i9, 496));
    call {:si_unique_call 1296} devirtbounce.17($p1, $p0, $p10, $p2);
    goto corral_source_split_6363;

  corral_source_split_6363:
    assume {:verifier.code 0} true;
    $i11 := $add.i32($i6, 1);
    call {:si_unique_call 1297} {:cexpr "i"} boogie_si_record_i32($i11);
    goto corral_source_split_6364;

  corral_source_split_6364:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p3);
    goto corral_source_split_6365;

  corral_source_split_6365:
    assume {:verifier.code 0} true;
    $i13 := $ugt.i32($i12, $i11);
    goto corral_source_split_6366;

  corral_source_split_6366:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i13 == 1);
    goto corral_source_split_6368;

  corral_source_split_6368:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i6 := $i11;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6358;
}



const __init_work: ref;

axiom __init_work == $sub.ref(0, 494053);

procedure __init_work($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __init_work($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1298} {:cexpr "__init_work:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_6370;

  corral_source_split_6370:
    assume {:verifier.code 0} true;
    return;
}



const team_mcast_rejoin_work: ref;

axiom team_mcast_rejoin_work == $sub.ref(0, 495085);

procedure team_mcast_rejoin_work($p0: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation team_mcast_rejoin_work($p0: ref)
{
  var $p1: ref;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i64;
  var $p20: ref;
  var vslice_dummy_var_109: i1;
  var vslice_dummy_var_110: i32;
  var vslice_dummy_var_111: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6372;

  corral_source_split_6372:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_6373;

  corral_source_split_6373:
    assume {:verifier.code 0} true;
    goto corral_source_split_6374;

  corral_source_split_6374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1299} $i3 := rtnl_trylock();
    call {:si_unique_call 1300} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_6375;

  corral_source_split_6375:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 0);
    goto corral_source_split_6376;

  corral_source_split_6376:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 728), 984)), $mul.ref(0, 1));
    goto corral_source_split_6382;

  corral_source_split_6382:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_6383;

  corral_source_split_6383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1302} vslice_dummy_var_110 := call_netdevice_notifiers(22, $p9);
    goto corral_source_split_6384;

  corral_source_split_6384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1303} rtnl_unlock();
    goto corral_source_split_6385;

  corral_source_split_6385:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 728), 984)), $mul.ref(712, 1)), $mul.ref(8, 1));
    goto corral_source_split_6386;

  corral_source_split_6386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1304} $i13 := atomic_dec_and_test($p12);
    call {:si_unique_call 1305} {:cexpr "tmp___1"} boogie_si_record_i32($i13);
    goto corral_source_split_6387;

  corral_source_split_6387:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 0);
    goto corral_source_split_6388;

  corral_source_split_6388:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_6390;

  corral_source_split_6390:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 728), 984)), $mul.ref(712, 1)), $mul.ref(4, 1));
    goto corral_source_split_6391;

  corral_source_split_6391:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_6392;

  corral_source_split_6392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1306} $i18 := msecs_to_jiffies($i17);
    call {:si_unique_call 1307} {:cexpr "tmp___0"} boogie_si_record_i64($i18);
    goto corral_source_split_6393;

  corral_source_split_6393:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 728), 984)), $mul.ref(712, 1)), $mul.ref(16, 1));
    goto corral_source_split_6394;

  corral_source_split_6394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1308} vslice_dummy_var_111 := schedule_delayed_work($p20, $i18);
    goto corral_source_split_6395;

  corral_source_split_6395:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_6378;

  corral_source_split_6378:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 728), 984)), $mul.ref(712, 1)), $mul.ref(16, 1));
    goto corral_source_split_6379;

  corral_source_split_6379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1301} vslice_dummy_var_109 := schedule_delayed_work($p6, 0);
    goto corral_source_split_6380;

  corral_source_split_6380:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const init_timer_key: ref;

axiom init_timer_key == $sub.ref(0, 496117);

procedure init_timer_key($p0: ref, $i1: i32, $p2: ref, $p3: ref);
  free requires assertsPassed;



implementation init_timer_key($p0: ref, $i1: i32, $p2: ref, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1309} {:cexpr "init_timer_key:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_6397;

  corral_source_split_6397:
    assume {:verifier.code 0} true;
    return;
}



const delayed_work_timer_fn: ref;

axiom delayed_work_timer_fn == $sub.ref(0, 497149);

procedure delayed_work_timer_fn($i0: i64);



const rtnl_trylock: ref;

axiom rtnl_trylock == $sub.ref(0, 498181);

procedure rtnl_trylock() returns ($r: i32);
  free requires assertsPassed;



implementation rtnl_trylock() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6399;

  corral_source_split_6399:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1310} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1311} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_6400;

  corral_source_split_6400:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const rtnl_unlock: ref;

axiom rtnl_unlock == $sub.ref(0, 499213);

procedure rtnl_unlock();
  free requires assertsPassed;



implementation rtnl_unlock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6402;

  corral_source_split_6402:
    assume {:verifier.code 0} true;
    return;
}



const atomic_dec_and_test: ref;

axiom atomic_dec_and_test == $sub.ref(0, 500245);

procedure atomic_dec_and_test($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation atomic_dec_and_test($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1312} $p1 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    goto corral_source_split_6404;

  corral_source_split_6404:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 1313} devirtbounce.18(0, $p2, $p1, $p2);
    goto corral_source_split_6405;

  corral_source_split_6405:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.33, $p1);
    goto corral_source_split_6406;

  corral_source_split_6406:
    assume {:verifier.code 0} true;
    $i4 := $sext.i8.i32($i3);
    goto corral_source_split_6407;

  corral_source_split_6407:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_6408;

  corral_source_split_6408:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_6409;

  corral_source_split_6409:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const msecs_to_jiffies: ref;

axiom msecs_to_jiffies == $sub.ref(0, 501277);

procedure msecs_to_jiffies($i0: i32) returns ($r: i64);
  free requires assertsPassed;



implementation msecs_to_jiffies($i0: i32) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1314} {:cexpr "msecs_to_jiffies:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_6411;

  corral_source_split_6411:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1315} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1316} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_6412;

  corral_source_split_6412:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const team_notify_peers_work: ref;

axiom team_notify_peers_work == $sub.ref(0, 502309);

procedure team_notify_peers_work($p0: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation team_notify_peers_work($p0: ref)
{
  var $p1: ref;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i64;
  var $p20: ref;
  var vslice_dummy_var_112: i1;
  var vslice_dummy_var_113: i32;
  var vslice_dummy_var_114: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6414;

  corral_source_split_6414:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_6415;

  corral_source_split_6415:
    assume {:verifier.code 0} true;
    goto corral_source_split_6416;

  corral_source_split_6416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1317} $i3 := rtnl_trylock();
    call {:si_unique_call 1318} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_6417;

  corral_source_split_6417:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 0);
    goto corral_source_split_6418;

  corral_source_split_6418:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 488), 984)), $mul.ref(0, 1));
    goto corral_source_split_6424;

  corral_source_split_6424:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_6425;

  corral_source_split_6425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1320} vslice_dummy_var_113 := call_netdevice_notifiers(19, $p9);
    goto corral_source_split_6426;

  corral_source_split_6426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1321} rtnl_unlock();
    goto corral_source_split_6427;

  corral_source_split_6427:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 488), 984)), $mul.ref(472, 1)), $mul.ref(8, 1));
    goto corral_source_split_6428;

  corral_source_split_6428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1322} $i13 := atomic_dec_and_test($p12);
    call {:si_unique_call 1323} {:cexpr "tmp___1"} boogie_si_record_i32($i13);
    goto corral_source_split_6429;

  corral_source_split_6429:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 0);
    goto corral_source_split_6430;

  corral_source_split_6430:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_6432;

  corral_source_split_6432:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 488), 984)), $mul.ref(472, 1)), $mul.ref(4, 1));
    goto corral_source_split_6433;

  corral_source_split_6433:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_6434;

  corral_source_split_6434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1324} $i18 := msecs_to_jiffies($i17);
    call {:si_unique_call 1325} {:cexpr "tmp___0"} boogie_si_record_i64($i18);
    goto corral_source_split_6435;

  corral_source_split_6435:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 488), 984)), $mul.ref(472, 1)), $mul.ref(16, 1));
    goto corral_source_split_6436;

  corral_source_split_6436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1326} vslice_dummy_var_114 := schedule_delayed_work($p20, $i18);
    goto corral_source_split_6437;

  corral_source_split_6437:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_6420;

  corral_source_split_6420:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 488), 984)), $mul.ref(472, 1)), $mul.ref(16, 1));
    goto corral_source_split_6421;

  corral_source_split_6421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1319} vslice_dummy_var_112 := schedule_delayed_work($p6, 0);
    goto corral_source_split_6422;

  corral_source_split_6422:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const team_ethtool_get_drvinfo: ref;

axiom team_ethtool_get_drvinfo == $sub.ref(0, 503341);

procedure team_ethtool_get_drvinfo($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation team_ethtool_get_drvinfo($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var vslice_dummy_var_115: i64;
  var vslice_dummy_var_116: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6439;

  corral_source_split_6439:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 196)), $mul.ref(4, 1));
    goto corral_source_split_6440;

  corral_source_split_6440:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_6441;

  corral_source_split_6441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1327} vslice_dummy_var_115 := strlcpy($p3, .str.11, 32);
    goto corral_source_split_6442;

  corral_source_split_6442:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 196)), $mul.ref(36, 1));
    goto corral_source_split_6443;

  corral_source_split_6443:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6444;

  corral_source_split_6444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1328} vslice_dummy_var_116 := strlcpy($p6, .str.61, 32);
    goto corral_source_split_6445;

  corral_source_split_6445:
    assume {:verifier.code 0} true;
    return;
}



const ethtool_op_get_link: ref;

axiom ethtool_op_get_link == $sub.ref(0, 504373);

procedure ethtool_op_get_link($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ethtool_op_get_link($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6447;

  corral_source_split_6447:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1329} $i1 := __VERIFIER_nondet_uint();
    call {:si_unique_call 1330} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i1);
    goto corral_source_split_6448;

  corral_source_split_6448:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const strlcpy: ref;

axiom strlcpy == $sub.ref(0, 505405);

procedure strlcpy($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation strlcpy($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1331} {:cexpr "strlcpy:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_6450;

  corral_source_split_6450:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1332} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1333} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_6451;

  corral_source_split_6451:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 506437);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6453;

  corral_source_split_6453:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1334} __VERIFIER_error();
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    goto corral_source_split_6455;

  corral_source_split_6455:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1:
    assume !assertsPassed;
    return;
}



const ldv_net_device_ops_4: ref;

axiom ldv_net_device_ops_4 == $sub.ref(0, 507469);

procedure ldv_net_device_ops_4();
  free requires assertsPassed;
  modifies $M.34, $M.0, $CurrAddr;



implementation ldv_net_device_ops_4()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6457;

  corral_source_split_6457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1335} $p0 := ldv_zalloc(3264);
    goto corral_source_split_6458;

  corral_source_split_6458:
    assume {:verifier.code 0} true;
    goto corral_source_split_6459;

  corral_source_split_6459:
    assume {:verifier.code 0} true;
    $M.34 := $p0;
    goto corral_source_split_6460;

  corral_source_split_6460:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_rtnl_link_ops_2: ref;

axiom ldv_initialize_rtnl_link_ops_2 == $sub.ref(0, 508501);

procedure ldv_initialize_rtnl_link_ops_2();
  free requires assertsPassed;
  modifies $M.35, $M.36, $M.37, $M.0, $CurrAddr;



implementation ldv_initialize_rtnl_link_ops_2()
{
  var $p0: ref;
  var $p2: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6462;

  corral_source_split_6462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1336} $p0 := ldv_zalloc(8);
    goto corral_source_split_6463;

  corral_source_split_6463:
    assume {:verifier.code 0} true;
    goto corral_source_split_6464;

  corral_source_split_6464:
    assume {:verifier.code 0} true;
    $M.35 := $p0;
    goto corral_source_split_6465;

  corral_source_split_6465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1337} $p2 := ldv_zalloc(3264);
    goto corral_source_split_6466;

  corral_source_split_6466:
    assume {:verifier.code 0} true;
    goto corral_source_split_6467;

  corral_source_split_6467:
    assume {:verifier.code 0} true;
    $M.36 := $p2;
    goto corral_source_split_6468;

  corral_source_split_6468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1338} $p4 := ldv_zalloc(8);
    goto corral_source_split_6469;

  corral_source_split_6469:
    assume {:verifier.code 0} true;
    goto corral_source_split_6470;

  corral_source_split_6470:
    assume {:verifier.code 0} true;
    $M.37 := $p4;
    goto corral_source_split_6471;

  corral_source_split_6471:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_ethtool_ops_3: ref;

axiom ldv_initialize_ethtool_ops_3 == $sub.ref(0, 509533);

procedure ldv_initialize_ethtool_ops_3();
  free requires assertsPassed;
  modifies $M.38, $M.0, $CurrAddr;



implementation ldv_initialize_ethtool_ops_3()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6473;

  corral_source_split_6473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1339} $p0 := ldv_zalloc(3264);
    goto corral_source_split_6474;

  corral_source_split_6474:
    assume {:verifier.code 0} true;
    goto corral_source_split_6475;

  corral_source_split_6475:
    assume {:verifier.code 0} true;
    $M.38 := $p0;
    goto corral_source_split_6476;

  corral_source_split_6476:
    assume {:verifier.code 0} true;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 510565);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48, $M.27, $M.28, $M.49, $M.0, $M.29, $M.30, $M.50, $M.23, $M.24, $M.21, $M.22, $M.25, $M.26, $M.52, $M.35, $M.36, $M.37, $M.38, $M.34, $M.56, $M.57, $M.84, $M.5, $M.85, $M.86, $M.87, $M.88, $M.89, $M.90, $M.91, $M.92, $M.2, $M.4, $M.51, $M.3, $CurrAddr, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.31, $M.32, assertsPassed, $M.12, $M.16;



implementation main() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i16;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i16;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i32;
  var $i37: i1;
  var $i38: i32;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $i48: i1;
  var $i49: i1;
  var $i50: i1;
  var $i51: i1;
  var $i52: i1;
  var $i53: i1;
  var $i54: i1;
  var $i55: i1;
  var $i56: i1;
  var $i57: i1;
  var $i58: i1;
  var $i59: i1;
  var $i60: i32;
  var $i61: i1;
  var $p62: ref;
  var $i63: i16;
  var $i64: i32;
  var $i65: i16;
  var $i66: i32;
  var $i67: i16;
  var $i69: i32;
  var $i70: i1;
  var $p71: ref;
  var $i72: i16;
  var $i73: i32;
  var $i74: i16;
  var $i75: i32;
  var $i76: i16;
  var $i78: i32;
  var $i79: i1;
  var $p80: ref;
  var $i81: i16;
  var $i82: i32;
  var $i83: i16;
  var $i84: i32;
  var $i85: i16;
  var $i87: i32;
  var $i88: i1;
  var $p89: ref;
  var $p90: ref;
  var $i92: i32;
  var $i93: i1;
  var $p94: ref;
  var $p95: ref;
  var $i97: i32;
  var $i98: i1;
  var $p99: ref;
  var $p100: ref;
  var $i102: i32;
  var $i103: i1;
  var $p104: ref;
  var $i105: i16;
  var $i106: i32;
  var $i107: i16;
  var $i108: i32;
  var $i109: i16;
  var $i111: i32;
  var $i112: i1;
  var $p113: ref;
  var $i114: i16;
  var $i115: i32;
  var $i116: i16;
  var $i117: i32;
  var $i118: i16;
  var $i120: i32;
  var $i121: i1;
  var $p122: ref;
  var $i123: i16;
  var $i124: i32;
  var $i125: i16;
  var $i126: i32;
  var $i127: i16;
  var $i129: i32;
  var $i130: i1;
  var $p131: ref;
  var $p132: ref;
  var $i134: i32;
  var $i135: i1;
  var $p136: ref;
  var $p137: ref;
  var $i139: i32;
  var $i140: i1;
  var $p141: ref;
  var $p142: ref;
  var $i144: i32;
  var $i145: i1;
  var $p146: ref;
  var $i147: i32;
  var $i148: i32;
  var $i149: i1;
  var $i150: i32;
  var $i151: i1;
  var $p152: ref;
  var $i154: i32;
  var $i155: i1;
  var $p156: ref;
  var $i157: i64;
  var $i159: i32;
  var $i160: i1;
  var $p161: ref;
  var $i162: i64;
  var $i164: i32;
  var $i165: i1;
  var $p166: ref;
  var $i167: i64;
  var $i169: i32;
  var $i170: i1;
  var $p171: ref;
  var $i172: i32;
  var $i173: i32;
  var $i174: i1;
  var $i175: i32;
  var $i176: i32;
  var $i177: i32;
  var $i178: i1;
  var $p179: ref;
  var $i180: i32;
  var $i181: i1;
  var $p182: ref;
  var $i183: i32;
  var $i184: i1;
  var $p185: ref;
  var $i186: i32;
  var $i187: i1;
  var $p188: ref;
  var $i190: i32;
  var $i191: i1;
  var $p192: ref;
  var $i193: i32;
  var $i194: i1;
  var $p195: ref;
  var $i196: i32;
  var $i197: i1;
  var $p198: ref;
  var $i199: i32;
  var $i200: i1;
  var $p201: ref;
  var $i202: i32;
  var $i203: i1;
  var $p204: ref;
  var $i205: i32;
  var $i206: i1;
  var $p207: ref;
  var $i208: i32;
  var $i209: i1;
  var $p210: ref;
  var $i211: i32;
  var $i212: i1;
  var $p213: ref;
  var $i214: i32;
  var $i215: i1;
  var $p216: ref;
  var $i217: i32;
  var $i218: i1;
  var $p219: ref;
  var $i221: i32;
  var $i222: i1;
  var $p223: ref;
  var $i225: i32;
  var $i226: i1;
  var $p227: ref;
  var $i229: i32;
  var $i230: i1;
  var $p231: ref;
  var $p232: ref;
  var $i234: i32;
  var $i235: i1;
  var $p236: ref;
  var $p237: ref;
  var $i239: i32;
  var $i240: i1;
  var $p241: ref;
  var $p242: ref;
  var $i244: i32;
  var $i245: i1;
  var $p246: ref;
  var $i248: i32;
  var $i249: i1;
  var $p250: ref;
  var $i252: i32;
  var $i253: i1;
  var $p254: ref;
  var $i255: i32;
  var $i256: i32;
  var $i257: i32;
  var $i258: i1;
  var $p259: ref;
  var $i260: i8;
  var $i261: i1;
  var $i263: i32;
  var $i264: i1;
  var $p265: ref;
  var $i266: i8;
  var $i267: i1;
  var $i269: i32;
  var $i270: i1;
  var $p271: ref;
  var $i272: i8;
  var $i273: i1;
  var $i275: i32;
  var $i276: i1;
  var $p277: ref;
  var $i279: i32;
  var $i280: i1;
  var $p281: ref;
  var $i283: i32;
  var $i284: i1;
  var $p285: ref;
  var $i287: i32;
  var $i288: i1;
  var $p289: ref;
  var $i291: i32;
  var $i292: i1;
  var $p293: ref;
  var $i295: i32;
  var $i296: i1;
  var $p297: ref;
  var $i299: i32;
  var $i300: i1;
  var $i301: i32;
  var $i302: i1;
  var $i303: i32;
  var $i304: i1;
  var $i306: i32;
  var $i307: i1;
  var $i308: i32;
  var $i309: i1;
  var $i310: i1;
  var $i311: i1;
  var $i312: i32;
  var $i313: i1;
  var $i314: i32;
  var $i315: i1;
  var $i316: i32;
  var $i317: i1;
  var $i318: i32;
  var $i319: i32;
  var $i320: i1;
  var $i321: i32;
  var $i322: i1;
  var $i323: i32;
  var $i324: i1;
  var $i325: i32;
  var $i326: i1;
  var $i327: i1;
  var $i328: i1;
  var $i329: i32;
  var $i330: i1;
  var $p331: ref;
  var $i332: i32;
  var $i333: i1;
  var $p334: ref;
  var $i336: i32;
  var $i337: i1;
  var $i338: i32;
  var $i339: i1;
  var $i340: i1;
  var $i341: i1;
  var $i342: i1;
  var $i343: i1;
  var $i344: i1;
  var $i345: i1;
  var $i346: i1;
  var $i347: i32;
  var $i348: i1;
  var $p349: ref;
  var $i350: i32;
  var $i351: i32;
  var $i352: i32;
  var $i353: i1;
  var $i355: i32;
  var $i356: i1;
  var $i358: i32;
  var $i359: i1;
  var $i361: i32;
  var $i362: i1;
  var $p363: ref;
  var $p364: ref;
  var $i366: i32;
  var $i367: i1;
  var $p368: ref;
  var $p369: ref;
  var $i371: i32;
  var $i372: i1;
  var $p373: ref;
  var $p374: ref;
  var $i376: i32;
  var $i377: i1;
  var $i379: i32;
  var $i380: i1;
  var $i382: i32;
  var $i383: i1;
  var $i385: i32;
  var $i386: i1;
  var $p387: ref;
  var $p388: ref;
  var $p389: ref;
  var $i391: i32;
  var $i392: i1;
  var $p393: ref;
  var $p394: ref;
  var $p395: ref;
  var $i397: i32;
  var $i398: i1;
  var $p399: ref;
  var $p400: ref;
  var $p401: ref;
  var $i403: i32;
  var $i404: i1;
  var $i406: i32;
  var $i407: i32;
  var $i408: i32;
  var $i409: i1;
  var $i411: i32;
  var $i412: i32;
  var $i413: i32;
  var $i414: i1;
  var cmdloc_dummy_var_28: [ref]i8;
  var cmdloc_dummy_var_29: [ref]i8;
  var cmdloc_dummy_var_30: [ref]i8;
  var cmdloc_dummy_var_31: [ref]i8;
  var cmdloc_dummy_var_32: [ref]i8;
  var cmdloc_dummy_var_33: [ref]i8;
  var cmdloc_dummy_var_34: [ref]i8;
  var cmdloc_dummy_var_35: [ref]i8;
  var vslice_dummy_var_117: i32;
  var vslice_dummy_var_118: i32;
  var vslice_dummy_var_119: i32;
  var vslice_dummy_var_120: i32;
  var vslice_dummy_var_121: i32;
  var vslice_dummy_var_122: i32;
  var vslice_dummy_var_123: i32;
  var vslice_dummy_var_124: i32;
  var vslice_dummy_var_125: i32;
  var vslice_dummy_var_126: i32;
  var vslice_dummy_var_127: i32;
  var vslice_dummy_var_128: i32;
  var vslice_dummy_var_129: i32;
  var vslice_dummy_var_130: i64;
  var vslice_dummy_var_131: i64;
  var vslice_dummy_var_132: i64;
  var vslice_dummy_var_133: i32;
  var vslice_dummy_var_134: i32;
  var vslice_dummy_var_135: i32;
  var vslice_dummy_var_136: i32;
  var vslice_dummy_var_137: i16;
  var vslice_dummy_var_138: i16;
  var vslice_dummy_var_139: i16;
  var vslice_dummy_var_140: i32;
  var vslice_dummy_var_141: i32;
  var vslice_dummy_var_142: i32;
  var vslice_dummy_var_143: i32;
  var vslice_dummy_var_144: i32;
  var vslice_dummy_var_145: i32;
  var vslice_dummy_var_146: i32;
  var vslice_dummy_var_147: i32;
  var vslice_dummy_var_148: ref;
  var vslice_dummy_var_149: ref;
  var vslice_dummy_var_150: ref;
  var vslice_dummy_var_151: i32;
  var vslice_dummy_var_152: i32;
  var vslice_dummy_var_153: i32;
  var vslice_dummy_var_154: i32;
  var vslice_dummy_var_155: i32;
  var vslice_dummy_var_156: i32;
  var vslice_dummy_var_157: i32;
  var vslice_dummy_var_158: i32;
  var vslice_dummy_var_159: i32;
  var vslice_dummy_var_160: i32;
  var vslice_dummy_var_161: i32;
  var vslice_dummy_var_162: i32;
  var vslice_dummy_var_163: i32;
  var vslice_dummy_var_164: i32;
  var vslice_dummy_var_165: i32;
  var vslice_dummy_var_166: i32;
  var vslice_dummy_var_167: i32;

  $bb0:
    call {:si_unique_call 1340} $initialize();
    goto corral_source_split_6478;

  corral_source_split_6478:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1341} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    assume {:verifier.code 0} true;
    call {:si_unique_call 1342} $p0 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1343} $p1 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1344} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1345} $p3 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    goto corral_source_split_6479;

  corral_source_split_6479:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1346} $i4 := __VERIFIER_nondet_u16();
    call {:si_unique_call 1347} {:cexpr "smack:ext:__VERIFIER_nondet_u16"} boogie_si_record_i16($i4);
    call {:si_unique_call 1348} {:cexpr "tmp"} boogie_si_record_i16($i4);
    goto corral_source_split_6480;

  corral_source_split_6480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1349} $p5 := ldv_zalloc(448);
    goto corral_source_split_6481;

  corral_source_split_6481:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6482;

  corral_source_split_6482:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1350} $i7 := __VERIFIER_nondet_int();
    call {:si_unique_call 1351} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i7);
    call {:si_unique_call 1352} {:cexpr "tmp___1"} boogie_si_record_i32($i7);
    goto corral_source_split_6483;

  corral_source_split_6483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1353} $p8 := ldv_zalloc(184);
    goto corral_source_split_6484;

  corral_source_split_6484:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_6485;

  corral_source_split_6485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1354} $p10 := ldv_zalloc(1);
    goto corral_source_split_6486;

  corral_source_split_6486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1355} $p11 := ldv_zalloc(232);
    goto corral_source_split_6487;

  corral_source_split_6487:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_6488;

  corral_source_split_6488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1356} $p13 := ldv_zalloc(1);
    goto corral_source_split_6489;

  corral_source_split_6489:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1357} $i14 := __VERIFIER_nondet_int();
    call {:si_unique_call 1358} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i14);
    call {:si_unique_call 1359} {:cexpr "tmp___6"} boogie_si_record_i32($i14);
    goto corral_source_split_6490;

  corral_source_split_6490:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1360} $i15 := __VERIFIER_nondet_u16();
    call {:si_unique_call 1361} {:cexpr "smack:ext:__VERIFIER_nondet_u16"} boogie_si_record_i16($i15);
    call {:si_unique_call 1362} {:cexpr "tmp___7"} boogie_si_record_i16($i15);
    goto corral_source_split_6491;

  corral_source_split_6491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1363} $p16 := ldv_zalloc(232);
    goto corral_source_split_6492;

  corral_source_split_6492:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_6493;

  corral_source_split_6493:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1364} $i18 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1365} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i18);
    call {:si_unique_call 1366} {:cexpr "tmp___9"} boogie_si_record_i64($i18);
    goto corral_source_split_6494;

  corral_source_split_6494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1367} $p19 := ldv_zalloc(1);
    goto corral_source_split_6495;

  corral_source_split_6495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1368} $p20 := ldv_zalloc(24);
    goto corral_source_split_6496;

  corral_source_split_6496:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_6497;

  corral_source_split_6497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1369} $p22 := ldv_zalloc(196);
    goto corral_source_split_6498;

  corral_source_split_6498:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_6499;

  corral_source_split_6499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1370} $p24 := ldv_zalloc(7168);
    goto corral_source_split_6500;

  corral_source_split_6500:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_6501;

  corral_source_split_6501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1371} ldv_initialize();
    goto corral_source_split_6502;

  corral_source_split_6502:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p0);
    goto corral_source_split_6503;

  corral_source_split_6503:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_28 := $M.39;
    call {:si_unique_call 1372} cmdloc_dummy_var_29 := $memset.i8(cmdloc_dummy_var_28, $p26, 0, 2, $zext.i32.i64(2), 0 == 1);
    $M.39 := cmdloc_dummy_var_29;
    goto corral_source_split_6504;

  corral_source_split_6504:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p1);
    goto corral_source_split_6505;

  corral_source_split_6505:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_30 := $M.40;
    call {:si_unique_call 1373} cmdloc_dummy_var_31 := $memset.i8(cmdloc_dummy_var_30, $p27, 0, 2, $zext.i32.i64(2), 0 == 1);
    $M.40 := cmdloc_dummy_var_31;
    goto corral_source_split_6506;

  corral_source_split_6506:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p2);
    goto corral_source_split_6507;

  corral_source_split_6507:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_32 := $M.41;
    call {:si_unique_call 1374} cmdloc_dummy_var_33 := $memset.i8(cmdloc_dummy_var_32, $p28, 0, 8, $zext.i32.i64(8), 0 == 1);
    $M.41 := cmdloc_dummy_var_33;
    goto corral_source_split_6508;

  corral_source_split_6508:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_34 := $M.42;
    call {:si_unique_call 1375} cmdloc_dummy_var_35 := $memset.i8(cmdloc_dummy_var_34, $p3, 0, 1, $zext.i32.i64(1), 0 == 1);
    $M.42 := cmdloc_dummy_var_35;
    goto corral_source_split_6509;

  corral_source_split_6509:
    assume {:verifier.code 0} true;
    $M.43 := 0;
    call {:si_unique_call 1376} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    goto corral_source_split_6510;

  corral_source_split_6510:
    assume {:verifier.code 0} true;
    $M.44 := 0;
    call {:si_unique_call 1377} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    goto corral_source_split_6511;

  corral_source_split_6511:
    assume {:verifier.code 0} true;
    $M.45 := 0;
    call {:si_unique_call 1378} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_6512;

  corral_source_split_6512:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1379} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_6513;

  corral_source_split_6513:
    assume {:verifier.code 0} true;
    $M.47 := 0;
    call {:si_unique_call 1380} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_6514;

  corral_source_split_6514:
    assume {:verifier.code 0} true;
    $M.48 := 0;
    call {:si_unique_call 1381} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    goto corral_source_split_6515;

  corral_source_split_6515:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $p62, $i63, $i64, $i65, $i66, $i67, $i69, $i70, $p71, $i72, $i73, $i74, $i75, $i76, $i78, $i79, $p80, $i81, $i82, $i83, $i84, $i85, $i87, $i88, $p89, $p90, $i92, $i93, $p94, $p95, $i97, $i98, $p99, $p100, $i102, $i103, $p104, $i105, $i106, $i107, $i108, $i109, $i111, $i112, $p113, $i114, $i115, $i116, $i117, $i118, $i120, $i121, $p122, $i123, $i124, $i125, $i126, $i127, $i129, $i130, $p131, $p132, $i134, $i135, $p136, $p137, $i139, $i140, $p141, $p142, $i144, $i145, $p146, $i147, $i148, $i149, $i150, $i151, $p152, $i154, $i155, $p156, $i157, $i159, $i160, $p161, $i162, $i164, $i165, $p166, $i167, $i169, $i170, $p171, $i172, $i173, $i174, $i175, $i176, $i177, $i178, $p179, $i180, $i181, $p182, $i183, $i184, $p185, $i186, $i187, $p188, $i190, $i191, $p192, $i193, $i194, $p195, $i196, $i197, $p198, $i199, $i200, $p201, $i202, $i203, $p204, $i205, $i206, $p207, $i208, $i209, $p210, $i211, $i212, $p213, $i214, $i215, $p216, $i217, $i218, $p219, $i221, $i222, $p223, $i225, $i226, $p227, $i229, $i230, $p231, $p232, $i234, $i235, $p236, $p237, $i239, $i240, $p241, $p242, $i244, $i245, $p246, $i248, $i249, $p250, $i252, $i253, $p254, $i255, $i256, $i257, $i258, $p259, $i260, $i261, $i263, $i264, $p265, $i266, $i267, $i269, $i270, $p271, $i272, $i273, $i275, $i276, $p277, $i279, $i280, $p281, $i283, $i284, $p285, $i287, $i288, $p289, $i291, $i292, $p293, $i295, $i296, $p297, $i299, $i300, $i301, $i302, $i303, $i304, $i306, $i307, $i308, $i309, $i310, $i311, $i312, $i313, $i314, $i315, $i316, $i317, $i318, $i319, $i320, $i321, $i322, $i323, $i324, $i325, $i326, $i327, $i328, $i329, $i330, $p331, $i332, $i333, $p334, $i336, $i337, $i338, $i339, $i340, $i341, $i342, $i343, $i344, $i345, $i346, $i347, $i348, $p349, $i350, $i351, $i352, $i353, $i355, $i356, $i358, $i359, $i361, $i362, $p363, $p364, $i366, $i367, $p368, $p369, $i371, $i372, $p373, $p374, $i376, $i377, $i379, $i380, $i382, $i383, $i385, $i386, $p387, $p388, $p389, $i391, $i392, $p393, $p394, $p395, $i397, $i398, $p399, $p400, $p401, $i403, $i404, $i406, $i407, $i408, $i409, $i411, $i412, $i413, $i414, vslice_dummy_var_117, vslice_dummy_var_118, vslice_dummy_var_119, vslice_dummy_var_120, vslice_dummy_var_121, vslice_dummy_var_122, vslice_dummy_var_123, vslice_dummy_var_124, vslice_dummy_var_125, vslice_dummy_var_126, vslice_dummy_var_127, vslice_dummy_var_128, vslice_dummy_var_129, vslice_dummy_var_130, vslice_dummy_var_131, vslice_dummy_var_132, vslice_dummy_var_133, vslice_dummy_var_134, vslice_dummy_var_135, vslice_dummy_var_136, vslice_dummy_var_137, vslice_dummy_var_138, vslice_dummy_var_139, vslice_dummy_var_140, vslice_dummy_var_141, vslice_dummy_var_142, vslice_dummy_var_143, vslice_dummy_var_144, vslice_dummy_var_145, vslice_dummy_var_146, vslice_dummy_var_147, vslice_dummy_var_148, vslice_dummy_var_149, vslice_dummy_var_150, vslice_dummy_var_151, vslice_dummy_var_152, vslice_dummy_var_153, vslice_dummy_var_154, vslice_dummy_var_155, vslice_dummy_var_156, vslice_dummy_var_157, vslice_dummy_var_158, vslice_dummy_var_159, vslice_dummy_var_160, vslice_dummy_var_161, vslice_dummy_var_162, vslice_dummy_var_163, vslice_dummy_var_164, vslice_dummy_var_165, vslice_dummy_var_166, vslice_dummy_var_167 := main_loop_$bb1($p0, $p1, $p2, $p3, $i4, $p6, $i7, $p9, $p10, $p12, $p13, $i14, $i15, $p17, $i18, $p19, $p21, $p23, $p25, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $p62, $i63, $i64, $i65, $i66, $i67, $i69, $i70, $p71, $i72, $i73, $i74, $i75, $i76, $i78, $i79, $p80, $i81, $i82, $i83, $i84, $i85, $i87, $i88, $p89, $p90, $i92, $i93, $p94, $p95, $i97, $i98, $p99, $p100, $i102, $i103, $p104, $i105, $i106, $i107, $i108, $i109, $i111, $i112, $p113, $i114, $i115, $i116, $i117, $i118, $i120, $i121, $p122, $i123, $i124, $i125, $i126, $i127, $i129, $i130, $p131, $p132, $i134, $i135, $p136, $p137, $i139, $i140, $p141, $p142, $i144, $i145, $p146, $i147, $i148, $i149, $i150, $i151, $p152, $i154, $i155, $p156, $i157, $i159, $i160, $p161, $i162, $i164, $i165, $p166, $i167, $i169, $i170, $p171, $i172, $i173, $i174, $i175, $i176, $i177, $i178, $p179, $i180, $i181, $p182, $i183, $i184, $p185, $i186, $i187, $p188, $i190, $i191, $p192, $i193, $i194, $p195, $i196, $i197, $p198, $i199, $i200, $p201, $i202, $i203, $p204, $i205, $i206, $p207, $i208, $i209, $p210, $i211, $i212, $p213, $i214, $i215, $p216, $i217, $i218, $p219, $i221, $i222, $p223, $i225, $i226, $p227, $i229, $i230, $p231, $p232, $i234, $i235, $p236, $p237, $i239, $i240, $p241, $p242, $i244, $i245, $p246, $i248, $i249, $p250, $i252, $i253, $p254, $i255, $i256, $i257, $i258, $p259, $i260, $i261, $i263, $i264, $p265, $i266, $i267, $i269, $i270, $p271, $i272, $i273, $i275, $i276, $p277, $i279, $i280, $p281, $i283, $i284, $p285, $i287, $i288, $p289, $i291, $i292, $p293, $i295, $i296, $p297, $i299, $i300, $i301, $i302, $i303, $i304, $i306, $i307, $i308, $i309, $i310, $i311, $i312, $i313, $i314, $i315, $i316, $i317, $i318, $i319, $i320, $i321, $i322, $i323, $i324, $i325, $i326, $i327, $i328, $i329, $i330, $p331, $i332, $i333, $p334, $i336, $i337, $i338, $i339, $i340, $i341, $i342, $i343, $i344, $i345, $i346, $i347, $i348, $p349, $i350, $i351, $i352, $i353, $i355, $i356, $i358, $i359, $i361, $i362, $p363, $p364, $i366, $i367, $p368, $p369, $i371, $i372, $p373, $p374, $i376, $i377, $i379, $i380, $i382, $i383, $i385, $i386, $p387, $p388, $p389, $i391, $i392, $p393, $p394, $p395, $i397, $i398, $p399, $p400, $p401, $i403, $i404, $i406, $i407, $i408, $i409, $i411, $i412, $i413, $i414, vslice_dummy_var_117, vslice_dummy_var_118, vslice_dummy_var_119, vslice_dummy_var_120, vslice_dummy_var_121, vslice_dummy_var_122, vslice_dummy_var_123, vslice_dummy_var_124, vslice_dummy_var_125, vslice_dummy_var_126, vslice_dummy_var_127, vslice_dummy_var_128, vslice_dummy_var_129, vslice_dummy_var_130, vslice_dummy_var_131, vslice_dummy_var_132, vslice_dummy_var_133, vslice_dummy_var_134, vslice_dummy_var_135, vslice_dummy_var_136, vslice_dummy_var_137, vslice_dummy_var_138, vslice_dummy_var_139, vslice_dummy_var_140, vslice_dummy_var_141, vslice_dummy_var_142, vslice_dummy_var_143, vslice_dummy_var_144, vslice_dummy_var_145, vslice_dummy_var_146, vslice_dummy_var_147, vslice_dummy_var_148, vslice_dummy_var_149, vslice_dummy_var_150, vslice_dummy_var_151, vslice_dummy_var_152, vslice_dummy_var_153, vslice_dummy_var_154, vslice_dummy_var_155, vslice_dummy_var_156, vslice_dummy_var_157, vslice_dummy_var_158, vslice_dummy_var_159, vslice_dummy_var_160, vslice_dummy_var_161, vslice_dummy_var_162, vslice_dummy_var_163, vslice_dummy_var_164, vslice_dummy_var_165, vslice_dummy_var_166, vslice_dummy_var_167);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i30 := $slt.i32($i29, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i29, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    $i32 := $slt.i32($i29, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i29, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb354;

  $bb354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1562} ldv_stop();
    goto corral_source_split_7243;

  corral_source_split_7243:
    assume {:verifier.code 0} true;
    goto $bb355;

  $bb355:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb219:
    assume {:verifier.code 0} true;
    goto $bb219_dummy;

  $bb9:
    assume $i33 == 1;
    goto corral_source_split_6525;

  corral_source_split_6525:
    assume {:verifier.code 0} true;
    $i336 := $M.48;
    goto corral_source_split_6526;

  corral_source_split_6526:
    assume {:verifier.code 0} true;
    $i337 := $ne.i32($i336, 0);
    goto corral_source_split_6527;

  corral_source_split_6527:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb282, $bb283;

  $bb283:
    assume !($i337 == 1);
    assume {:verifier.code 0} true;
    goto $bb353;

  $bb353:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb282:
    assume $i337 == 1;
    goto corral_source_split_7095;

  corral_source_split_7095:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1523} $i338 := __VERIFIER_nondet_int();
    call {:si_unique_call 1524} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i338);
    call {:si_unique_call 1525} {:cexpr "tmp___19"} boogie_si_record_i32($i338);
    assume {:verifier.code 0} true;
    goto $bb284;

  $bb284:
    assume {:verifier.code 0} true;
    $i339 := $slt.i32($i338, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb285, $bb286;

  $bb286:
    assume !($i339 == 1);
    assume {:verifier.code 0} true;
    $i340 := $slt.i32($i338, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb287, $bb288;

  $bb288:
    assume !($i340 == 1);
    assume {:verifier.code 0} true;
    $i341 := $slt.i32($i338, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb289, $bb290;

  $bb290:
    assume !($i341 == 1);
    assume {:verifier.code 0} true;
    $i342 := $eq.i32($i338, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb291, $bb292;

  $bb292:
    assume {:verifier.code 0} true;
    assume !($i342 == 1);
    goto $bb293;

  $bb293:
    assume {:verifier.code 0} true;
    goto $bb351;

  $bb351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1561} ldv_stop();
    goto corral_source_split_7241;

  corral_source_split_7241:
    assume {:verifier.code 0} true;
    goto $bb352;

  $bb352:
    assume {:verifier.code 0} true;
    goto $bb305;

  $bb305:
    assume {:verifier.code 0} true;
    goto $bb353;

  $bb291:
    assume $i342 == 1;
    goto corral_source_split_7101;

  corral_source_split_7101:
    assume {:verifier.code 0} true;
    $i413 := $M.48;
    goto corral_source_split_7102;

  corral_source_split_7102:
    assume {:verifier.code 0} true;
    $i414 := $eq.i32($i413, 2);
    goto corral_source_split_7103;

  corral_source_split_7103:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb348, $bb349;

  $bb349:
    assume !($i414 == 1);
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb350:
    assume {:verifier.code 0} true;
    goto $bb305;

  $bb348:
    assume $i414 == 1;
    goto corral_source_split_7237;

  corral_source_split_7237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1559} vslice_dummy_var_167 := ldv_init_2();
    goto corral_source_split_7238;

  corral_source_split_7238:
    assume {:verifier.code 0} true;
    $M.48 := 3;
    call {:si_unique_call 1560} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_7239;

  corral_source_split_7239:
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb289:
    assume $i341 == 1;
    goto corral_source_split_7097;

  corral_source_split_7097:
    assume {:verifier.code 0} true;
    $i403 := $M.48;
    goto corral_source_split_7098;

  corral_source_split_7098:
    assume {:verifier.code 0} true;
    $i404 := $eq.i32($i403, 3);
    goto corral_source_split_7099;

  corral_source_split_7099:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb342, $bb343;

  $bb343:
    assume !($i404 == 1);
    assume {:verifier.code 0} true;
    goto $bb344;

  $bb344:
    assume {:verifier.code 0} true;
    $i408 := $M.48;
    goto corral_source_split_7227;

  corral_source_split_7227:
    assume {:verifier.code 0} true;
    $i409 := $eq.i32($i408, 2);
    goto corral_source_split_7228;

  corral_source_split_7228:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb345, $bb346;

  $bb346:
    assume !($i409 == 1);
    assume {:verifier.code 0} true;
    goto $bb347;

  $bb347:
    assume {:verifier.code 0} true;
    goto $bb305;

  $bb345:
    assume $i409 == 1;
    goto corral_source_split_7230;

  corral_source_split_7230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1556} vslice_dummy_var_166 := ldv_release_2();
    goto corral_source_split_7231;

  corral_source_split_7231:
    assume {:verifier.code 0} true;
    $M.48 := 1;
    call {:si_unique_call 1557} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_7232;

  corral_source_split_7232:
    assume {:verifier.code 0} true;
    $i411 := $M.45;
    goto corral_source_split_7233;

  corral_source_split_7233:
    assume {:verifier.code 0} true;
    $i412 := $sub.i32($i411, 1);
    goto corral_source_split_7234;

  corral_source_split_7234:
    assume {:verifier.code 0} true;
    $M.45 := $i412;
    call {:si_unique_call 1558} {:cexpr "ref_cnt"} boogie_si_record_i32($i412);
    goto corral_source_split_7235;

  corral_source_split_7235:
    assume {:verifier.code 0} true;
    goto $bb347;

  $bb342:
    assume $i404 == 1;
    goto corral_source_split_7220;

  corral_source_split_7220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1553} vslice_dummy_var_165 := ldv_release_2();
    goto corral_source_split_7221;

  corral_source_split_7221:
    assume {:verifier.code 0} true;
    $M.48 := 1;
    call {:si_unique_call 1554} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_7222;

  corral_source_split_7222:
    assume {:verifier.code 0} true;
    $i406 := $M.45;
    goto corral_source_split_7223;

  corral_source_split_7223:
    assume {:verifier.code 0} true;
    $i407 := $sub.i32($i406, 1);
    goto corral_source_split_7224;

  corral_source_split_7224:
    assume {:verifier.code 0} true;
    $M.45 := $i407;
    call {:si_unique_call 1555} {:cexpr "ref_cnt"} boogie_si_record_i32($i407);
    goto corral_source_split_7225;

  corral_source_split_7225:
    assume {:verifier.code 0} true;
    goto $bb344;

  $bb287:
    assume $i340 == 1;
    assume {:verifier.code 0} true;
    $i343 := $slt.i32($i338, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb294, $bb295;

  $bb295:
    assume !($i343 == 1);
    goto corral_source_split_7109;

  corral_source_split_7109:
    assume {:verifier.code 0} true;
    $i385 := $M.48;
    goto corral_source_split_7110;

  corral_source_split_7110:
    assume {:verifier.code 0} true;
    $i386 := $eq.i32($i385, 1);
    goto corral_source_split_7111;

  corral_source_split_7111:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb333, $bb334;

  $bb334:
    assume !($i386 == 1);
    assume {:verifier.code 0} true;
    goto $bb335;

  $bb335:
    assume {:verifier.code 0} true;
    $i391 := $M.48;
    goto corral_source_split_7200;

  corral_source_split_7200:
    assume {:verifier.code 0} true;
    $i392 := $eq.i32($i391, 3);
    goto corral_source_split_7201;

  corral_source_split_7201:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb336, $bb337;

  $bb337:
    assume !($i392 == 1);
    assume {:verifier.code 0} true;
    goto $bb338;

  $bb338:
    assume {:verifier.code 0} true;
    $i397 := $M.48;
    goto corral_source_split_7210;

  corral_source_split_7210:
    assume {:verifier.code 0} true;
    $i398 := $eq.i32($i397, 2);
    goto corral_source_split_7211;

  corral_source_split_7211:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb339, $bb340;

  $bb340:
    assume !($i398 == 1);
    assume {:verifier.code 0} true;
    goto $bb341;

  $bb341:
    assume {:verifier.code 0} true;
    goto $bb305;

  $bb339:
    assume $i398 == 1;
    goto corral_source_split_7213;

  corral_source_split_7213:
    assume {:verifier.code 0} true;
    $p399 := $M.36;
    goto corral_source_split_7214;

  corral_source_split_7214:
    assume {:verifier.code 0} true;
    $p400 := $M.35;
    goto corral_source_split_7215;

  corral_source_split_7215:
    assume {:verifier.code 0} true;
    $p401 := $M.37;
    goto corral_source_split_7216;

  corral_source_split_7216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1551} vslice_dummy_var_164 := team_newlink($p25, $p399, $p400, $p401);
    goto corral_source_split_7217;

  corral_source_split_7217:
    assume {:verifier.code 0} true;
    $M.48 := 2;
    call {:si_unique_call 1552} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_7218;

  corral_source_split_7218:
    assume {:verifier.code 0} true;
    goto $bb341;

  $bb336:
    assume $i392 == 1;
    goto corral_source_split_7203;

  corral_source_split_7203:
    assume {:verifier.code 0} true;
    $p393 := $M.36;
    goto corral_source_split_7204;

  corral_source_split_7204:
    assume {:verifier.code 0} true;
    $p394 := $M.35;
    goto corral_source_split_7205;

  corral_source_split_7205:
    assume {:verifier.code 0} true;
    $p395 := $M.37;
    goto corral_source_split_7206;

  corral_source_split_7206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1549} vslice_dummy_var_163 := team_newlink($p25, $p393, $p394, $p395);
    goto corral_source_split_7207;

  corral_source_split_7207:
    assume {:verifier.code 0} true;
    $M.48 := 3;
    call {:si_unique_call 1550} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_7208;

  corral_source_split_7208:
    assume {:verifier.code 0} true;
    goto $bb338;

  $bb333:
    assume $i386 == 1;
    goto corral_source_split_7193;

  corral_source_split_7193:
    assume {:verifier.code 0} true;
    $p387 := $M.36;
    goto corral_source_split_7194;

  corral_source_split_7194:
    assume {:verifier.code 0} true;
    $p388 := $M.35;
    goto corral_source_split_7195;

  corral_source_split_7195:
    assume {:verifier.code 0} true;
    $p389 := $M.37;
    goto corral_source_split_7196;

  corral_source_split_7196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1547} vslice_dummy_var_162 := team_newlink($p25, $p387, $p388, $p389);
    goto corral_source_split_7197;

  corral_source_split_7197:
    assume {:verifier.code 0} true;
    $M.48 := 1;
    call {:si_unique_call 1548} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_7198;

  corral_source_split_7198:
    assume {:verifier.code 0} true;
    goto $bb335;

  $bb294:
    assume $i343 == 1;
    goto corral_source_split_7105;

  corral_source_split_7105:
    assume {:verifier.code 0} true;
    $i376 := $M.48;
    goto corral_source_split_7106;

  corral_source_split_7106:
    assume {:verifier.code 0} true;
    $i377 := $eq.i32($i376, 1);
    goto corral_source_split_7107;

  corral_source_split_7107:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb324, $bb325;

  $bb325:
    assume !($i377 == 1);
    assume {:verifier.code 0} true;
    goto $bb326;

  $bb326:
    assume {:verifier.code 0} true;
    $i379 := $M.48;
    goto corral_source_split_7179;

  corral_source_split_7179:
    assume {:verifier.code 0} true;
    $i380 := $eq.i32($i379, 3);
    goto corral_source_split_7180;

  corral_source_split_7180:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb327, $bb328;

  $bb328:
    assume !($i380 == 1);
    assume {:verifier.code 0} true;
    goto $bb329;

  $bb329:
    assume {:verifier.code 0} true;
    $i382 := $M.48;
    goto corral_source_split_7186;

  corral_source_split_7186:
    assume {:verifier.code 0} true;
    $i383 := $eq.i32($i382, 2);
    goto corral_source_split_7187;

  corral_source_split_7187:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb330, $bb331;

  $bb331:
    assume !($i383 == 1);
    assume {:verifier.code 0} true;
    goto $bb332;

  $bb332:
    assume {:verifier.code 0} true;
    goto $bb305;

  $bb330:
    assume $i383 == 1;
    goto corral_source_split_7189;

  corral_source_split_7189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1545} vslice_dummy_var_161 := team_get_num_rx_queues();
    goto corral_source_split_7190;

  corral_source_split_7190:
    assume {:verifier.code 0} true;
    $M.48 := 2;
    call {:si_unique_call 1546} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_7191;

  corral_source_split_7191:
    assume {:verifier.code 0} true;
    goto $bb332;

  $bb327:
    assume $i380 == 1;
    goto corral_source_split_7182;

  corral_source_split_7182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1543} vslice_dummy_var_160 := team_get_num_rx_queues();
    goto corral_source_split_7183;

  corral_source_split_7183:
    assume {:verifier.code 0} true;
    $M.48 := 3;
    call {:si_unique_call 1544} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_7184;

  corral_source_split_7184:
    assume {:verifier.code 0} true;
    goto $bb329;

  $bb324:
    assume $i377 == 1;
    goto corral_source_split_7175;

  corral_source_split_7175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1541} vslice_dummy_var_159 := team_get_num_rx_queues();
    goto corral_source_split_7176;

  corral_source_split_7176:
    assume {:verifier.code 0} true;
    $M.48 := 1;
    call {:si_unique_call 1542} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_7177;

  corral_source_split_7177:
    assume {:verifier.code 0} true;
    goto $bb326;

  $bb285:
    assume $i339 == 1;
    assume {:verifier.code 0} true;
    $i344 := $slt.i32($i338, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb296, $bb297;

  $bb297:
    assume !($i344 == 1);
    assume {:verifier.code 0} true;
    $i345 := $slt.i32($i338, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb298, $bb299;

  $bb299:
    assume !($i345 == 1);
    goto corral_source_split_7117;

  corral_source_split_7117:
    assume {:verifier.code 0} true;
    $i361 := $M.48;
    goto corral_source_split_7118;

  corral_source_split_7118:
    assume {:verifier.code 0} true;
    $i362 := $eq.i32($i361, 1);
    goto corral_source_split_7119;

  corral_source_split_7119:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb315, $bb316;

  $bb316:
    assume !($i362 == 1);
    assume {:verifier.code 0} true;
    goto $bb317;

  $bb317:
    assume {:verifier.code 0} true;
    $i366 := $M.48;
    goto corral_source_split_7157;

  corral_source_split_7157:
    assume {:verifier.code 0} true;
    $i367 := $eq.i32($i366, 3);
    goto corral_source_split_7158;

  corral_source_split_7158:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb318, $bb319;

  $bb319:
    assume !($i367 == 1);
    assume {:verifier.code 0} true;
    goto $bb320;

  $bb320:
    assume {:verifier.code 0} true;
    $i371 := $M.48;
    goto corral_source_split_7166;

  corral_source_split_7166:
    assume {:verifier.code 0} true;
    $i372 := $eq.i32($i371, 2);
    goto corral_source_split_7167;

  corral_source_split_7167:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb321, $bb322;

  $bb322:
    assume !($i372 == 1);
    assume {:verifier.code 0} true;
    goto $bb323;

  $bb323:
    assume {:verifier.code 0} true;
    goto $bb305;

  $bb321:
    assume $i372 == 1;
    goto corral_source_split_7169;

  corral_source_split_7169:
    assume {:verifier.code 0} true;
    $p373 := $M.35;
    goto corral_source_split_7170;

  corral_source_split_7170:
    assume {:verifier.code 0} true;
    $p374 := $M.37;
    goto corral_source_split_7171;

  corral_source_split_7171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1539} vslice_dummy_var_158 := team_validate($p373, $p374);
    goto corral_source_split_7172;

  corral_source_split_7172:
    assume {:verifier.code 0} true;
    $M.48 := 2;
    call {:si_unique_call 1540} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_7173;

  corral_source_split_7173:
    assume {:verifier.code 0} true;
    goto $bb323;

  $bb318:
    assume $i367 == 1;
    goto corral_source_split_7160;

  corral_source_split_7160:
    assume {:verifier.code 0} true;
    $p368 := $M.35;
    goto corral_source_split_7161;

  corral_source_split_7161:
    assume {:verifier.code 0} true;
    $p369 := $M.37;
    goto corral_source_split_7162;

  corral_source_split_7162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1537} vslice_dummy_var_157 := team_validate($p368, $p369);
    goto corral_source_split_7163;

  corral_source_split_7163:
    assume {:verifier.code 0} true;
    $M.48 := 3;
    call {:si_unique_call 1538} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_7164;

  corral_source_split_7164:
    assume {:verifier.code 0} true;
    goto $bb320;

  $bb315:
    assume $i362 == 1;
    goto corral_source_split_7151;

  corral_source_split_7151:
    assume {:verifier.code 0} true;
    $p363 := $M.35;
    goto corral_source_split_7152;

  corral_source_split_7152:
    assume {:verifier.code 0} true;
    $p364 := $M.37;
    goto corral_source_split_7153;

  corral_source_split_7153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1535} vslice_dummy_var_156 := team_validate($p363, $p364);
    goto corral_source_split_7154;

  corral_source_split_7154:
    assume {:verifier.code 0} true;
    $M.48 := 1;
    call {:si_unique_call 1536} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_7155;

  corral_source_split_7155:
    assume {:verifier.code 0} true;
    goto $bb317;

  $bb298:
    assume $i345 == 1;
    goto corral_source_split_7113;

  corral_source_split_7113:
    assume {:verifier.code 0} true;
    $i352 := $M.48;
    goto corral_source_split_7114;

  corral_source_split_7114:
    assume {:verifier.code 0} true;
    $i353 := $eq.i32($i352, 1);
    goto corral_source_split_7115;

  corral_source_split_7115:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb306, $bb307;

  $bb307:
    assume !($i353 == 1);
    assume {:verifier.code 0} true;
    goto $bb308;

  $bb308:
    assume {:verifier.code 0} true;
    $i355 := $M.48;
    goto corral_source_split_7137;

  corral_source_split_7137:
    assume {:verifier.code 0} true;
    $i356 := $eq.i32($i355, 3);
    goto corral_source_split_7138;

  corral_source_split_7138:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb309, $bb310;

  $bb310:
    assume !($i356 == 1);
    assume {:verifier.code 0} true;
    goto $bb311;

  $bb311:
    assume {:verifier.code 0} true;
    $i358 := $M.48;
    goto corral_source_split_7144;

  corral_source_split_7144:
    assume {:verifier.code 0} true;
    $i359 := $eq.i32($i358, 2);
    goto corral_source_split_7145;

  corral_source_split_7145:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb312, $bb313;

  $bb313:
    assume !($i359 == 1);
    assume {:verifier.code 0} true;
    goto $bb314;

  $bb314:
    assume {:verifier.code 0} true;
    goto $bb305;

  $bb312:
    assume $i359 == 1;
    goto corral_source_split_7147;

  corral_source_split_7147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1533} vslice_dummy_var_155 := team_get_num_tx_queues();
    goto corral_source_split_7148;

  corral_source_split_7148:
    assume {:verifier.code 0} true;
    $M.48 := 2;
    call {:si_unique_call 1534} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_7149;

  corral_source_split_7149:
    assume {:verifier.code 0} true;
    goto $bb314;

  $bb309:
    assume $i356 == 1;
    goto corral_source_split_7140;

  corral_source_split_7140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1531} vslice_dummy_var_154 := team_get_num_tx_queues();
    goto corral_source_split_7141;

  corral_source_split_7141:
    assume {:verifier.code 0} true;
    $M.48 := 3;
    call {:si_unique_call 1532} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_7142;

  corral_source_split_7142:
    assume {:verifier.code 0} true;
    goto $bb311;

  $bb306:
    assume $i353 == 1;
    goto corral_source_split_7133;

  corral_source_split_7133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1529} vslice_dummy_var_153 := team_get_num_tx_queues();
    goto corral_source_split_7134;

  corral_source_split_7134:
    assume {:verifier.code 0} true;
    $M.48 := 1;
    call {:si_unique_call 1530} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_7135;

  corral_source_split_7135:
    assume {:verifier.code 0} true;
    goto $bb308;

  $bb296:
    assume $i344 == 1;
    assume {:verifier.code 0} true;
    $i346 := $eq.i32($i338, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb300, $bb301;

  $bb301:
    assume {:verifier.code 0} true;
    assume !($i346 == 1);
    goto $bb293;

  $bb300:
    assume $i346 == 1;
    goto corral_source_split_7121;

  corral_source_split_7121:
    assume {:verifier.code 0} true;
    $i347 := $M.48;
    goto corral_source_split_7122;

  corral_source_split_7122:
    assume {:verifier.code 0} true;
    $i348 := $eq.i32($i347, 1);
    goto corral_source_split_7123;

  corral_source_split_7123:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb302, $bb303;

  $bb303:
    assume !($i348 == 1);
    assume {:verifier.code 0} true;
    goto $bb304;

  $bb304:
    assume {:verifier.code 0} true;
    goto $bb305;

  $bb302:
    assume $i348 == 1;
    goto corral_source_split_7125;

  corral_source_split_7125:
    assume {:verifier.code 0} true;
    $p349 := $M.36;
    goto corral_source_split_7126;

  corral_source_split_7126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1526} team_setup($p349);
    goto corral_source_split_7127;

  corral_source_split_7127:
    assume {:verifier.code 0} true;
    $M.48 := 2;
    call {:si_unique_call 1527} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_7128;

  corral_source_split_7128:
    assume {:verifier.code 0} true;
    $i350 := $M.45;
    goto corral_source_split_7129;

  corral_source_split_7129:
    assume {:verifier.code 0} true;
    $i351 := $add.i32($i350, 1);
    goto corral_source_split_7130;

  corral_source_split_7130:
    assume {:verifier.code 0} true;
    $M.45 := $i351;
    call {:si_unique_call 1528} {:cexpr "ref_cnt"} boogie_si_record_i32($i351);
    goto corral_source_split_7131;

  corral_source_split_7131:
    assume {:verifier.code 0} true;
    goto $bb304;

  $bb7:
    assume $i32 == 1;
    goto corral_source_split_6521;

  corral_source_split_6521:
    assume {:verifier.code 0} true;
    $i323 := $M.47;
    goto corral_source_split_6522;

  corral_source_split_6522:
    assume {:verifier.code 0} true;
    $i324 := $ne.i32($i323, 0);
    goto corral_source_split_6523;

  corral_source_split_6523:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb262, $bb263;

  $bb263:
    assume !($i324 == 1);
    assume {:verifier.code 0} true;
    goto $bb281;

  $bb281:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb262:
    assume $i324 == 1;
    goto corral_source_split_7073;

  corral_source_split_7073:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1515} $i325 := __VERIFIER_nondet_int();
    call {:si_unique_call 1516} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i325);
    call {:si_unique_call 1517} {:cexpr "tmp___18"} boogie_si_record_i32($i325);
    assume {:verifier.code 0} true;
    goto $bb264;

  $bb264:
    assume {:verifier.code 0} true;
    $i326 := $slt.i32($i325, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb265, $bb266;

  $bb266:
    assume !($i326 == 1);
    assume {:verifier.code 0} true;
    $i327 := $eq.i32($i325, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb267, $bb268;

  $bb268:
    assume {:verifier.code 0} true;
    assume !($i327 == 1);
    goto $bb269;

  $bb269:
    assume {:verifier.code 0} true;
    goto $bb279;

  $bb279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1522} ldv_stop();
    goto corral_source_split_7093;

  corral_source_split_7093:
    assume {:verifier.code 0} true;
    goto $bb280;

  $bb280:
    assume {:verifier.code 0} true;
    goto $bb275;

  $bb275:
    assume {:verifier.code 0} true;
    goto $bb281;

  $bb267:
    assume $i327 == 1;
    goto corral_source_split_7075;

  corral_source_split_7075:
    assume {:verifier.code 0} true;
    $i332 := $M.47;
    goto corral_source_split_7076;

  corral_source_split_7076:
    assume {:verifier.code 0} true;
    $i333 := $eq.i32($i332, 1);
    goto corral_source_split_7077;

  corral_source_split_7077:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb276, $bb277;

  $bb277:
    assume !($i333 == 1);
    assume {:verifier.code 0} true;
    goto $bb278;

  $bb278:
    assume {:verifier.code 0} true;
    goto $bb275;

  $bb276:
    assume $i333 == 1;
    goto corral_source_split_7088;

  corral_source_split_7088:
    assume {:verifier.code 0} true;
    $p334 := $M.38;
    goto corral_source_split_7089;

  corral_source_split_7089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1520} vslice_dummy_var_152 := ethtool_op_get_link($p334);
    goto corral_source_split_7090;

  corral_source_split_7090:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1521} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_7091;

  corral_source_split_7091:
    assume {:verifier.code 0} true;
    goto $bb278;

  $bb265:
    assume $i326 == 1;
    assume {:verifier.code 0} true;
    $i328 := $eq.i32($i325, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb270, $bb271;

  $bb271:
    assume {:verifier.code 0} true;
    assume !($i328 == 1);
    goto $bb269;

  $bb270:
    assume $i328 == 1;
    goto corral_source_split_7079;

  corral_source_split_7079:
    assume {:verifier.code 0} true;
    $i329 := $M.47;
    goto corral_source_split_7080;

  corral_source_split_7080:
    assume {:verifier.code 0} true;
    $i330 := $eq.i32($i329, 1);
    goto corral_source_split_7081;

  corral_source_split_7081:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb272, $bb273;

  $bb273:
    assume !($i330 == 1);
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb274:
    assume {:verifier.code 0} true;
    goto $bb275;

  $bb272:
    assume $i330 == 1;
    goto corral_source_split_7083;

  corral_source_split_7083:
    assume {:verifier.code 0} true;
    $p331 := $M.38;
    goto corral_source_split_7084;

  corral_source_split_7084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1518} team_ethtool_get_drvinfo($p331, $p23);
    goto corral_source_split_7085;

  corral_source_split_7085:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1519} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_7086;

  corral_source_split_7086:
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb5:
    assume $i31 == 1;
    goto corral_source_split_6517;

  corral_source_split_6517:
    assume {:verifier.code 0} true;
    $i306 := $M.46;
    goto corral_source_split_6518;

  corral_source_split_6518:
    assume {:verifier.code 0} true;
    $i307 := $ne.i32($i306, 0);
    goto corral_source_split_6519;

  corral_source_split_6519:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb232, $bb233;

  $bb233:
    assume !($i307 == 1);
    assume {:verifier.code 0} true;
    goto $bb261;

  $bb261:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb232:
    assume $i307 == 1;
    goto corral_source_split_7029;

  corral_source_split_7029:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1497} $i308 := __VERIFIER_nondet_int();
    call {:si_unique_call 1498} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i308);
    call {:si_unique_call 1499} {:cexpr "tmp___17"} boogie_si_record_i32($i308);
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb234:
    assume {:verifier.code 0} true;
    $i309 := $slt.i32($i308, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb235, $bb236;

  $bb236:
    assume !($i309 == 1);
    assume {:verifier.code 0} true;
    $i310 := $eq.i32($i308, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb237, $bb238;

  $bb238:
    assume {:verifier.code 0} true;
    assume !($i310 == 1);
    goto $bb239;

  $bb239:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1514} ldv_stop();
    goto corral_source_split_7071;

  corral_source_split_7071:
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb260:
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb249:
    assume {:verifier.code 0} true;
    goto $bb261;

  $bb237:
    assume $i310 == 1;
    goto corral_source_split_7031;

  corral_source_split_7031:
    assume {:verifier.code 0} true;
    $i316 := $M.46;
    goto corral_source_split_7032;

  corral_source_split_7032:
    assume {:verifier.code 0} true;
    $i317 := $eq.i32($i316, 1);
    goto corral_source_split_7033;

  corral_source_split_7033:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb250, $bb251;

  $bb251:
    assume !($i317 == 1);
    assume {:verifier.code 0} true;
    goto $bb258;

  $bb258:
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb250:
    assume $i317 == 1;
    goto corral_source_split_7049;

  corral_source_split_7049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1503} $i318 := team_module_init();
    goto corral_source_split_7050;

  corral_source_split_7050:
    assume {:verifier.code 0} true;
    $M.52 := $i318;
    call {:si_unique_call 1504} {:cexpr "ldv_retval_2"} boogie_si_record_i32($i318);
    goto corral_source_split_7051;

  corral_source_split_7051:
    assume {:verifier.code 0} true;
    $i319 := $M.52;
    goto corral_source_split_7052;

  corral_source_split_7052:
    assume {:verifier.code 0} true;
    $i320 := $ne.i32($i319, 0);
    goto corral_source_split_7053;

  corral_source_split_7053:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb252, $bb253;

  $bb253:
    assume !($i320 == 1);
    assume {:verifier.code 0} true;
    goto $bb254;

  $bb254:
    assume {:verifier.code 0} true;
    $i321 := $M.52;
    goto corral_source_split_7058;

  corral_source_split_7058:
    assume {:verifier.code 0} true;
    $i322 := $eq.i32($i321, 0);
    goto corral_source_split_7059;

  corral_source_split_7059:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb255, $bb256;

  $bb256:
    assume !($i322 == 1);
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb257:
    assume {:verifier.code 0} true;
    goto $bb258;

  $bb255:
    assume $i322 == 1;
    goto corral_source_split_7061;

  corral_source_split_7061:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1506} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_7062;

  corral_source_split_7062:
    assume {:verifier.code 0} true;
    $M.48 := 1;
    call {:si_unique_call 1507} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_7063;

  corral_source_split_7063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1508} ldv_initialize_rtnl_link_ops_2();
    goto corral_source_split_7064;

  corral_source_split_7064:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1509} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_7065;

  corral_source_split_7065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1510} ldv_initialize_ethtool_ops_3();
    goto corral_source_split_7066;

  corral_source_split_7066:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 1511} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_7067;

  corral_source_split_7067:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 1512} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_7068;

  corral_source_split_7068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1513} ldv_net_device_ops_4();
    goto corral_source_split_7069;

  corral_source_split_7069:
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb252:
    assume $i320 == 1;
    goto corral_source_split_7055;

  corral_source_split_7055:
    assume {:verifier.code 0} true;
    $M.46 := 3;
    call {:si_unique_call 1505} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_7056;

  corral_source_split_7056:
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1502} ldv_check_final_state();
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_7047;

  corral_source_split_7047:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb235:
    assume $i309 == 1;
    assume {:verifier.code 0} true;
    $i311 := $eq.i32($i308, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb240, $bb241;

  $bb241:
    assume {:verifier.code 0} true;
    assume !($i311 == 1);
    goto $bb239;

  $bb240:
    assume $i311 == 1;
    goto corral_source_split_7035;

  corral_source_split_7035:
    assume {:verifier.code 0} true;
    $i312 := $M.46;
    goto corral_source_split_7036;

  corral_source_split_7036:
    assume {:verifier.code 0} true;
    $i313 := $eq.i32($i312, 2);
    goto corral_source_split_7037;

  corral_source_split_7037:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb242, $bb243;

  $bb243:
    assume {:verifier.code 0} true;
    assume !($i313 == 1);
    goto $bb244;

  $bb244:
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb248:
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb242:
    assume $i313 == 1;
    goto corral_source_split_7039;

  corral_source_split_7039:
    assume {:verifier.code 0} true;
    $i314 := $M.45;
    goto corral_source_split_7040;

  corral_source_split_7040:
    assume {:verifier.code 0} true;
    $i315 := $eq.i32($i314, 0);
    goto corral_source_split_7041;

  corral_source_split_7041:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb245, $bb246;

  $bb246:
    assume {:verifier.code 0} true;
    assume !($i315 == 1);
    goto $bb244;

  $bb245:
    assume $i315 == 1;
    goto corral_source_split_7043;

  corral_source_split_7043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1500} team_module_exit();
    goto corral_source_split_7044;

  corral_source_split_7044:
    assume {:verifier.code 0} true;
    $M.46 := 3;
    call {:si_unique_call 1501} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_7045;

  corral_source_split_7045:
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb3:
    assume $i30 == 1;
    assume {:verifier.code 0} true;
    $i34 := $slt.i32($i29, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i34 == 1);
    goto corral_source_split_6529;

  corral_source_split_6529:
    assume {:verifier.code 0} true;
    $i299 := $M.44;
    goto corral_source_split_6530;

  corral_source_split_6530:
    assume {:verifier.code 0} true;
    $i300 := $ne.i32($i299, 0);
    goto corral_source_split_6531;

  corral_source_split_6531:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb220, $bb221;

  $bb221:
    assume !($i300 == 1);
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb231:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb220:
    assume $i300 == 1;
    goto corral_source_split_7017;

  corral_source_split_7017:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1491} $i301 := __VERIFIER_nondet_int();
    call {:si_unique_call 1492} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i301);
    call {:si_unique_call 1493} {:cexpr "tmp___16"} boogie_si_record_i32($i301);
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb222:
    assume {:verifier.code 0} true;
    $i302 := $eq.i32($i301, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb223, $bb224;

  $bb224:
    assume !($i302 == 1);
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1496} ldv_stop();
    goto corral_source_split_7027;

  corral_source_split_7027:
    assume {:verifier.code 0} true;
    goto $bb230;

  $bb230:
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb228:
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb223:
    assume $i302 == 1;
    goto corral_source_split_7019;

  corral_source_split_7019:
    assume {:verifier.code 0} true;
    $i303 := $M.44;
    goto corral_source_split_7020;

  corral_source_split_7020:
    assume {:verifier.code 0} true;
    $i304 := $eq.i32($i303, 1);
    goto corral_source_split_7021;

  corral_source_split_7021:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb225, $bb226;

  $bb226:
    assume !($i304 == 1);
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb227:
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb225:
    assume $i304 == 1;
    goto corral_source_split_7023;

  corral_source_split_7023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1494} vslice_dummy_var_151 := team_device_event($p21, $i18, $p19);
    goto corral_source_split_7024;

  corral_source_split_7024:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 1495} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_7025;

  corral_source_split_7025:
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb12:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i29, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb11;

  $bb14:
    assume $i35 == 1;
    goto corral_source_split_6533;

  corral_source_split_6533:
    assume {:verifier.code 0} true;
    $i36 := $M.43;
    goto corral_source_split_6534;

  corral_source_split_6534:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_6535;

  corral_source_split_6535:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb218:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb16:
    assume $i37 == 1;
    goto corral_source_split_6537;

  corral_source_split_6537:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1385} $i38 := __VERIFIER_nondet_int();
    call {:si_unique_call 1386} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i38);
    call {:si_unique_call 1387} {:cexpr "tmp___15"} boogie_si_record_i32($i38);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i39 := $slt.i32($i38, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    $i40 := $slt.i32($i38, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    $i41 := $slt.i32($i38, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    $i42 := $slt.i32($i38, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    $i43 := $slt.i32($i38, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i38, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1490} ldv_stop();
    goto corral_source_split_7015;

  corral_source_split_7015:
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb217:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb29:
    assume $i44 == 1;
    goto corral_source_split_6547;

  corral_source_split_6547:
    assume {:verifier.code 0} true;
    $i287 := $M.43;
    goto corral_source_split_6548;

  corral_source_split_6548:
    assume {:verifier.code 0} true;
    $i288 := $eq.i32($i287, 1);
    goto corral_source_split_6549;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb207, $bb208;

  $bb208:
    assume !($i288 == 1);
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb209:
    assume {:verifier.code 0} true;
    $i291 := $M.43;
    goto corral_source_split_6999;

  corral_source_split_6999:
    assume {:verifier.code 0} true;
    $i292 := $eq.i32($i291, 3);
    goto corral_source_split_7000;

  corral_source_split_7000:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb210, $bb211;

  $bb211:
    assume !($i292 == 1);
    assume {:verifier.code 0} true;
    goto $bb212;

  $bb212:
    assume {:verifier.code 0} true;
    $i295 := $M.43;
    goto corral_source_split_7007;

  corral_source_split_7007:
    assume {:verifier.code 0} true;
    $i296 := $eq.i32($i295, 2);
    goto corral_source_split_7008;

  corral_source_split_7008:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb213, $bb214;

  $bb214:
    assume !($i296 == 1);
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb215:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb213:
    assume $i296 == 1;
    goto corral_source_split_7010;

  corral_source_split_7010:
    assume {:verifier.code 0} true;
    $p297 := $M.34;
    goto corral_source_split_7011;

  corral_source_split_7011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1488} vslice_dummy_var_150 := team_get_stats64($p297, $p9);
    goto corral_source_split_7012;

  corral_source_split_7012:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 1489} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_7013;

  corral_source_split_7013:
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb210:
    assume $i292 == 1;
    goto corral_source_split_7002;

  corral_source_split_7002:
    assume {:verifier.code 0} true;
    $p293 := $M.34;
    goto corral_source_split_7003;

  corral_source_split_7003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1486} vslice_dummy_var_149 := team_get_stats64($p293, $p9);
    goto corral_source_split_7004;

  corral_source_split_7004:
    assume {:verifier.code 0} true;
    $M.43 := 3;
    call {:si_unique_call 1487} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_7005;

  corral_source_split_7005:
    assume {:verifier.code 0} true;
    goto $bb212;

  $bb207:
    assume $i288 == 1;
    goto corral_source_split_6994;

  corral_source_split_6994:
    assume {:verifier.code 0} true;
    $p289 := $M.34;
    goto corral_source_split_6995;

  corral_source_split_6995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1484} vslice_dummy_var_148 := team_get_stats64($p289, $p9);
    goto corral_source_split_6996;

  corral_source_split_6996:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 1485} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6997;

  corral_source_split_6997:
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb27:
    assume $i43 == 1;
    goto corral_source_split_6543;

  corral_source_split_6543:
    assume {:verifier.code 0} true;
    $i275 := $M.43;
    goto corral_source_split_6544;

  corral_source_split_6544:
    assume {:verifier.code 0} true;
    $i276 := $eq.i32($i275, 1);
    goto corral_source_split_6545;

  corral_source_split_6545:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb198, $bb199;

  $bb199:
    assume !($i276 == 1);
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb200:
    assume {:verifier.code 0} true;
    $i279 := $M.43;
    goto corral_source_split_6978;

  corral_source_split_6978:
    assume {:verifier.code 0} true;
    $i280 := $eq.i32($i279, 3);
    goto corral_source_split_6979;

  corral_source_split_6979:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb201, $bb202;

  $bb202:
    assume !($i280 == 1);
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb203:
    assume {:verifier.code 0} true;
    $i283 := $M.43;
    goto corral_source_split_6986;

  corral_source_split_6986:
    assume {:verifier.code 0} true;
    $i284 := $eq.i32($i283, 2);
    goto corral_source_split_6987;

  corral_source_split_6987:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb204, $bb205;

  $bb205:
    assume !($i284 == 1);
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb206:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb204:
    assume $i284 == 1;
    goto corral_source_split_6989;

  corral_source_split_6989:
    assume {:verifier.code 0} true;
    $p285 := $M.34;
    goto corral_source_split_6990;

  corral_source_split_6990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1482} vslice_dummy_var_147 := team_set_mac_address($p285, $p13);
    goto corral_source_split_6991;

  corral_source_split_6991:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 1483} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_6992;

  corral_source_split_6992:
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb201:
    assume $i280 == 1;
    goto corral_source_split_6981;

  corral_source_split_6981:
    assume {:verifier.code 0} true;
    $p281 := $M.34;
    goto corral_source_split_6982;

  corral_source_split_6982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1480} vslice_dummy_var_146 := team_set_mac_address($p281, $p13);
    goto corral_source_split_6983;

  corral_source_split_6983:
    assume {:verifier.code 0} true;
    $M.43 := 3;
    call {:si_unique_call 1481} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_6984;

  corral_source_split_6984:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb198:
    assume $i276 == 1;
    goto corral_source_split_6973;

  corral_source_split_6973:
    assume {:verifier.code 0} true;
    $p277 := $M.34;
    goto corral_source_split_6974;

  corral_source_split_6974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1478} vslice_dummy_var_145 := team_set_mac_address($p277, $p13);
    goto corral_source_split_6975;

  corral_source_split_6975:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 1479} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6976;

  corral_source_split_6976:
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb25:
    assume $i42 == 1;
    goto corral_source_split_6539;

  corral_source_split_6539:
    assume {:verifier.code 0} true;
    $i257 := $M.43;
    goto corral_source_split_6540;

  corral_source_split_6540:
    assume {:verifier.code 0} true;
    $i258 := $eq.i32($i257, 1);
    goto corral_source_split_6541;

  corral_source_split_6541:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb189, $bb190;

  $bb190:
    assume !($i258 == 1);
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb191:
    assume {:verifier.code 0} true;
    $i263 := $M.43;
    goto corral_source_split_6953;

  corral_source_split_6953:
    assume {:verifier.code 0} true;
    $i264 := $eq.i32($i263, 3);
    goto corral_source_split_6954;

  corral_source_split_6954:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb192, $bb193;

  $bb193:
    assume !($i264 == 1);
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb194:
    assume {:verifier.code 0} true;
    $i269 := $M.43;
    goto corral_source_split_6963;

  corral_source_split_6963:
    assume {:verifier.code 0} true;
    $i270 := $eq.i32($i269, 2);
    goto corral_source_split_6964;

  corral_source_split_6964:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb195, $bb196;

  $bb196:
    assume !($i270 == 1);
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb197:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb195:
    assume $i270 == 1;
    goto corral_source_split_6966;

  corral_source_split_6966:
    assume {:verifier.code 0} true;
    $p271 := $M.34;
    goto corral_source_split_6967;

  corral_source_split_6967:
    assume {:verifier.code 0} true;
    $i272 := $load.i8($M.42, $p3);
    goto corral_source_split_6968;

  corral_source_split_6968:
    assume {:verifier.code 0} true;
    $i273 := $trunc.i8.i1($i272);
    goto corral_source_split_6969;

  corral_source_split_6969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1476} vslice_dummy_var_144 := team_change_carrier($p271, $i273);
    goto corral_source_split_6970;

  corral_source_split_6970:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 1477} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_6971;

  corral_source_split_6971:
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb192:
    assume $i264 == 1;
    goto corral_source_split_6956;

  corral_source_split_6956:
    assume {:verifier.code 0} true;
    $p265 := $M.34;
    goto corral_source_split_6957;

  corral_source_split_6957:
    assume {:verifier.code 0} true;
    $i266 := $load.i8($M.42, $p3);
    goto corral_source_split_6958;

  corral_source_split_6958:
    assume {:verifier.code 0} true;
    $i267 := $trunc.i8.i1($i266);
    goto corral_source_split_6959;

  corral_source_split_6959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1474} vslice_dummy_var_143 := team_change_carrier($p265, $i267);
    goto corral_source_split_6960;

  corral_source_split_6960:
    assume {:verifier.code 0} true;
    $M.43 := 3;
    call {:si_unique_call 1475} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_6961;

  corral_source_split_6961:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb189:
    assume $i258 == 1;
    goto corral_source_split_6946;

  corral_source_split_6946:
    assume {:verifier.code 0} true;
    $p259 := $M.34;
    goto corral_source_split_6947;

  corral_source_split_6947:
    assume {:verifier.code 0} true;
    $i260 := $load.i8($M.42, $p3);
    goto corral_source_split_6948;

  corral_source_split_6948:
    assume {:verifier.code 0} true;
    $i261 := $trunc.i8.i1($i260);
    goto corral_source_split_6949;

  corral_source_split_6949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1472} vslice_dummy_var_142 := team_change_carrier($p259, $i261);
    goto corral_source_split_6950;

  corral_source_split_6950:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 1473} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6951;

  corral_source_split_6951:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb23:
    assume $i41 == 1;
    assume {:verifier.code 0} true;
    $i45 := $slt.i32($i38, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i45 == 1);
    goto corral_source_split_6555;

  corral_source_split_6555:
    assume {:verifier.code 0} true;
    $i252 := $M.43;
    goto corral_source_split_6556;

  corral_source_split_6556:
    assume {:verifier.code 0} true;
    $i253 := $eq.i32($i252, 2);
    goto corral_source_split_6557;

  corral_source_split_6557:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb186, $bb187;

  $bb187:
    assume !($i253 == 1);
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb186:
    assume $i253 == 1;
    goto corral_source_split_6938;

  corral_source_split_6938:
    assume {:verifier.code 0} true;
    $p254 := $M.34;
    goto corral_source_split_6939;

  corral_source_split_6939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1469} team_uninit($p254);
    goto corral_source_split_6940;

  corral_source_split_6940:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 1470} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6941;

  corral_source_split_6941:
    assume {:verifier.code 0} true;
    $i255 := $M.45;
    goto corral_source_split_6942;

  corral_source_split_6942:
    assume {:verifier.code 0} true;
    $i256 := $sub.i32($i255, 1);
    goto corral_source_split_6943;

  corral_source_split_6943:
    assume {:verifier.code 0} true;
    $M.45 := $i256;
    call {:si_unique_call 1471} {:cexpr "ref_cnt"} boogie_si_record_i32($i256);
    goto corral_source_split_6944;

  corral_source_split_6944:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb32:
    assume $i45 == 1;
    goto corral_source_split_6551;

  corral_source_split_6551:
    assume {:verifier.code 0} true;
    $i244 := $M.43;
    goto corral_source_split_6552;

  corral_source_split_6552:
    assume {:verifier.code 0} true;
    $i245 := $eq.i32($i244, 3);
    goto corral_source_split_6553;

  corral_source_split_6553:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb180, $bb181;

  $bb181:
    assume !($i245 == 1);
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb182:
    assume {:verifier.code 0} true;
    $i248 := $M.43;
    goto corral_source_split_6930;

  corral_source_split_6930:
    assume {:verifier.code 0} true;
    $i249 := $eq.i32($i248, 2);
    goto corral_source_split_6931;

  corral_source_split_6931:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb183, $bb184;

  $bb184:
    assume !($i249 == 1);
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb183:
    assume $i249 == 1;
    goto corral_source_split_6933;

  corral_source_split_6933:
    assume {:verifier.code 0} true;
    $p250 := $M.34;
    goto corral_source_split_6934;

  corral_source_split_6934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1467} vslice_dummy_var_141 := team_change_mtu($p250, $i7);
    goto corral_source_split_6935;

  corral_source_split_6935:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 1468} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_6936;

  corral_source_split_6936:
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb180:
    assume $i245 == 1;
    goto corral_source_split_6925;

  corral_source_split_6925:
    assume {:verifier.code 0} true;
    $p246 := $M.34;
    goto corral_source_split_6926;

  corral_source_split_6926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1465} vslice_dummy_var_140 := team_change_mtu($p246, $i7);
    goto corral_source_split_6927;

  corral_source_split_6927:
    assume {:verifier.code 0} true;
    $M.43 := 3;
    call {:si_unique_call 1466} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_6928;

  corral_source_split_6928:
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb21:
    assume $i40 == 1;
    assume {:verifier.code 0} true;
    $i46 := $slt.i32($i38, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    $i47 := $slt.i32($i38, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    $i48 := $slt.i32($i38, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i48 == 1);
    goto corral_source_split_6567;

  corral_source_split_6567:
    assume {:verifier.code 0} true;
    $i229 := $M.43;
    goto corral_source_split_6568;

  corral_source_split_6568:
    assume {:verifier.code 0} true;
    $i230 := $eq.i32($i229, 1);
    goto corral_source_split_6569;

  corral_source_split_6569:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb171, $bb172;

  $bb172:
    assume !($i230 == 1);
    assume {:verifier.code 0} true;
    goto $bb173;

  $bb173:
    assume {:verifier.code 0} true;
    $i234 := $M.43;
    goto corral_source_split_6907;

  corral_source_split_6907:
    assume {:verifier.code 0} true;
    $i235 := $eq.i32($i234, 3);
    goto corral_source_split_6908;

  corral_source_split_6908:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb174, $bb175;

  $bb175:
    assume !($i235 == 1);
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb176:
    assume {:verifier.code 0} true;
    $i239 := $M.43;
    goto corral_source_split_6916;

  corral_source_split_6916:
    assume {:verifier.code 0} true;
    $i240 := $eq.i32($i239, 2);
    goto corral_source_split_6917;

  corral_source_split_6917:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb177, $bb178;

  $bb178:
    assume !($i240 == 1);
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb179:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb177:
    assume $i240 == 1;
    goto corral_source_split_6919;

  corral_source_split_6919:
    assume {:verifier.code 0} true;
    $p241 := $M.34;
    goto corral_source_split_6920;

  corral_source_split_6920:
    assume {:verifier.code 0} true;
    $p242 := $M.51;
    goto corral_source_split_6921;

  corral_source_split_6921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1463} vslice_dummy_var_139 := team_select_queue($p241, $p12, $p10, $p242);
    goto corral_source_split_6922;

  corral_source_split_6922:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 1464} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_6923;

  corral_source_split_6923:
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb174:
    assume $i235 == 1;
    goto corral_source_split_6910;

  corral_source_split_6910:
    assume {:verifier.code 0} true;
    $p236 := $M.34;
    goto corral_source_split_6911;

  corral_source_split_6911:
    assume {:verifier.code 0} true;
    $p237 := $M.51;
    goto corral_source_split_6912;

  corral_source_split_6912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1461} vslice_dummy_var_138 := team_select_queue($p236, $p12, $p10, $p237);
    goto corral_source_split_6913;

  corral_source_split_6913:
    assume {:verifier.code 0} true;
    $M.43 := 3;
    call {:si_unique_call 1462} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_6914;

  corral_source_split_6914:
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb171:
    assume $i230 == 1;
    goto corral_source_split_6901;

  corral_source_split_6901:
    assume {:verifier.code 0} true;
    $p231 := $M.34;
    goto corral_source_split_6902;

  corral_source_split_6902:
    assume {:verifier.code 0} true;
    $p232 := $M.51;
    goto corral_source_split_6903;

  corral_source_split_6903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1459} vslice_dummy_var_137 := team_select_queue($p231, $p12, $p10, $p232);
    goto corral_source_split_6904;

  corral_source_split_6904:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 1460} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6905;

  corral_source_split_6905:
    assume {:verifier.code 0} true;
    goto $bb173;

  $bb38:
    assume $i48 == 1;
    goto corral_source_split_6563;

  corral_source_split_6563:
    assume {:verifier.code 0} true;
    $i217 := $M.43;
    goto corral_source_split_6564;

  corral_source_split_6564:
    assume {:verifier.code 0} true;
    $i218 := $eq.i32($i217, 1);
    goto corral_source_split_6565;

  corral_source_split_6565:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb162, $bb163;

  $bb163:
    assume !($i218 == 1);
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    $i221 := $M.43;
    goto corral_source_split_6885;

  corral_source_split_6885:
    assume {:verifier.code 0} true;
    $i222 := $eq.i32($i221, 3);
    goto corral_source_split_6886;

  corral_source_split_6886:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb165, $bb166;

  $bb166:
    assume !($i222 == 1);
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    $i225 := $M.43;
    goto corral_source_split_6893;

  corral_source_split_6893:
    assume {:verifier.code 0} true;
    $i226 := $eq.i32($i225, 2);
    goto corral_source_split_6894;

  corral_source_split_6894:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb168, $bb169;

  $bb169:
    assume !($i226 == 1);
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb168:
    assume $i226 == 1;
    goto corral_source_split_6896;

  corral_source_split_6896:
    assume {:verifier.code 0} true;
    $p227 := $M.34;
    goto corral_source_split_6897;

  corral_source_split_6897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1457} vslice_dummy_var_136 := team_netpoll_setup($p227, $p6);
    goto corral_source_split_6898;

  corral_source_split_6898:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 1458} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_6899;

  corral_source_split_6899:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb165:
    assume $i222 == 1;
    goto corral_source_split_6888;

  corral_source_split_6888:
    assume {:verifier.code 0} true;
    $p223 := $M.34;
    goto corral_source_split_6889;

  corral_source_split_6889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1455} vslice_dummy_var_135 := team_netpoll_setup($p223, $p6);
    goto corral_source_split_6890;

  corral_source_split_6890:
    assume {:verifier.code 0} true;
    $M.43 := 3;
    call {:si_unique_call 1456} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_6891;

  corral_source_split_6891:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb162:
    assume $i218 == 1;
    goto corral_source_split_6880;

  corral_source_split_6880:
    assume {:verifier.code 0} true;
    $p219 := $M.34;
    goto corral_source_split_6881;

  corral_source_split_6881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1453} vslice_dummy_var_134 := team_netpoll_setup($p219, $p6);
    goto corral_source_split_6882;

  corral_source_split_6882:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 1454} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6883;

  corral_source_split_6883:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb36:
    assume $i47 == 1;
    goto corral_source_split_6559;

  corral_source_split_6559:
    assume {:verifier.code 0} true;
    $i208 := $M.43;
    goto corral_source_split_6560;

  corral_source_split_6560:
    assume {:verifier.code 0} true;
    $i209 := $eq.i32($i208, 1);
    goto corral_source_split_6561;

  corral_source_split_6561:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb153, $bb154;

  $bb154:
    assume !($i209 == 1);
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb155:
    assume {:verifier.code 0} true;
    $i211 := $M.43;
    goto corral_source_split_6864;

  corral_source_split_6864:
    assume {:verifier.code 0} true;
    $i212 := $eq.i32($i211, 3);
    goto corral_source_split_6865;

  corral_source_split_6865:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb156, $bb157;

  $bb157:
    assume !($i212 == 1);
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    $i214 := $M.43;
    goto corral_source_split_6872;

  corral_source_split_6872:
    assume {:verifier.code 0} true;
    $i215 := $eq.i32($i214, 2);
    goto corral_source_split_6873;

  corral_source_split_6873:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb159, $bb160;

  $bb160:
    assume !($i215 == 1);
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb161:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb159:
    assume $i215 == 1;
    goto corral_source_split_6875;

  corral_source_split_6875:
    assume {:verifier.code 0} true;
    $p216 := $M.34;
    goto corral_source_split_6876;

  corral_source_split_6876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1451} team_poll_controller($p216);
    goto corral_source_split_6877;

  corral_source_split_6877:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 1452} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_6878;

  corral_source_split_6878:
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb156:
    assume $i212 == 1;
    goto corral_source_split_6867;

  corral_source_split_6867:
    assume {:verifier.code 0} true;
    $p213 := $M.34;
    goto corral_source_split_6868;

  corral_source_split_6868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1449} team_poll_controller($p213);
    goto corral_source_split_6869;

  corral_source_split_6869:
    assume {:verifier.code 0} true;
    $M.43 := 3;
    call {:si_unique_call 1450} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_6870;

  corral_source_split_6870:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb153:
    assume $i209 == 1;
    goto corral_source_split_6859;

  corral_source_split_6859:
    assume {:verifier.code 0} true;
    $p210 := $M.34;
    goto corral_source_split_6860;

  corral_source_split_6860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1447} team_poll_controller($p210);
    goto corral_source_split_6861;

  corral_source_split_6861:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 1448} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6862;

  corral_source_split_6862:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb34:
    assume $i46 == 1;
    assume {:verifier.code 0} true;
    $i49 := $slt.i32($i38, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i49 == 1);
    goto corral_source_split_6575;

  corral_source_split_6575:
    assume {:verifier.code 0} true;
    $i199 := $M.43;
    goto corral_source_split_6576;

  corral_source_split_6576:
    assume {:verifier.code 0} true;
    $i200 := $eq.i32($i199, 1);
    goto corral_source_split_6577;

  corral_source_split_6577:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb144, $bb145;

  $bb145:
    assume !($i200 == 1);
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    $i202 := $M.43;
    goto corral_source_split_6843;

  corral_source_split_6843:
    assume {:verifier.code 0} true;
    $i203 := $eq.i32($i202, 3);
    goto corral_source_split_6844;

  corral_source_split_6844:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb147, $bb148;

  $bb148:
    assume !($i203 == 1);
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    $i205 := $M.43;
    goto corral_source_split_6851;

  corral_source_split_6851:
    assume {:verifier.code 0} true;
    $i206 := $eq.i32($i205, 2);
    goto corral_source_split_6852;

  corral_source_split_6852:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb150, $bb151;

  $bb151:
    assume !($i206 == 1);
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb150:
    assume $i206 == 1;
    goto corral_source_split_6854;

  corral_source_split_6854:
    assume {:verifier.code 0} true;
    $p207 := $M.34;
    goto corral_source_split_6855;

  corral_source_split_6855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1445} team_change_rx_flags($p207, $i14);
    goto corral_source_split_6856;

  corral_source_split_6856:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 1446} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_6857;

  corral_source_split_6857:
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb147:
    assume $i203 == 1;
    goto corral_source_split_6846;

  corral_source_split_6846:
    assume {:verifier.code 0} true;
    $p204 := $M.34;
    goto corral_source_split_6847;

  corral_source_split_6847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1443} team_change_rx_flags($p204, $i14);
    goto corral_source_split_6848;

  corral_source_split_6848:
    assume {:verifier.code 0} true;
    $M.43 := 3;
    call {:si_unique_call 1444} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_6849;

  corral_source_split_6849:
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb144:
    assume $i200 == 1;
    goto corral_source_split_6838;

  corral_source_split_6838:
    assume {:verifier.code 0} true;
    $p201 := $M.34;
    goto corral_source_split_6839;

  corral_source_split_6839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1441} team_change_rx_flags($p201, $i14);
    goto corral_source_split_6840;

  corral_source_split_6840:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 1442} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6841;

  corral_source_split_6841:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb40:
    assume $i49 == 1;
    goto corral_source_split_6571;

  corral_source_split_6571:
    assume {:verifier.code 0} true;
    $i190 := $M.43;
    goto corral_source_split_6572;

  corral_source_split_6572:
    assume {:verifier.code 0} true;
    $i191 := $eq.i32($i190, 1);
    goto corral_source_split_6573;

  corral_source_split_6573:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb135, $bb136;

  $bb136:
    assume !($i191 == 1);
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    $i193 := $M.43;
    goto corral_source_split_6822;

  corral_source_split_6822:
    assume {:verifier.code 0} true;
    $i194 := $eq.i32($i193, 3);
    goto corral_source_split_6823;

  corral_source_split_6823:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb138, $bb139;

  $bb139:
    assume !($i194 == 1);
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    $i196 := $M.43;
    goto corral_source_split_6830;

  corral_source_split_6830:
    assume {:verifier.code 0} true;
    $i197 := $eq.i32($i196, 2);
    goto corral_source_split_6831;

  corral_source_split_6831:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb141, $bb142;

  $bb142:
    assume !($i197 == 1);
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb141:
    assume $i197 == 1;
    goto corral_source_split_6833;

  corral_source_split_6833:
    assume {:verifier.code 0} true;
    $p198 := $M.34;
    goto corral_source_split_6834;

  corral_source_split_6834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1439} team_set_rx_mode($p198);
    goto corral_source_split_6835;

  corral_source_split_6835:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 1440} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_6836;

  corral_source_split_6836:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb138:
    assume $i194 == 1;
    goto corral_source_split_6825;

  corral_source_split_6825:
    assume {:verifier.code 0} true;
    $p195 := $M.34;
    goto corral_source_split_6826;

  corral_source_split_6826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1437} team_set_rx_mode($p195);
    goto corral_source_split_6827;

  corral_source_split_6827:
    assume {:verifier.code 0} true;
    $M.43 := 3;
    call {:si_unique_call 1438} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_6828;

  corral_source_split_6828:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb135:
    assume $i191 == 1;
    goto corral_source_split_6817;

  corral_source_split_6817:
    assume {:verifier.code 0} true;
    $p192 := $M.34;
    goto corral_source_split_6818;

  corral_source_split_6818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1435} team_set_rx_mode($p192);
    goto corral_source_split_6819;

  corral_source_split_6819:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 1436} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6820;

  corral_source_split_6820:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb19:
    assume $i39 == 1;
    assume {:verifier.code 0} true;
    $i50 := $slt.i32($i38, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    $i51 := $slt.i32($i38, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    $i52 := $slt.i32($i38, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    $i53 := $slt.i32($i38, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i53 == 1);
    goto corral_source_split_6587;

  corral_source_split_6587:
    assume {:verifier.code 0} true;
    $i186 := $M.43;
    goto corral_source_split_6588;

  corral_source_split_6588:
    assume {:verifier.code 0} true;
    $i187 := $eq.i32($i186, 3);
    goto corral_source_split_6589;

  corral_source_split_6589:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb132, $bb133;

  $bb133:
    assume !($i187 == 1);
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb132:
    assume $i187 == 1;
    goto corral_source_split_6812;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    $p188 := $M.34;
    goto corral_source_split_6813;

  corral_source_split_6813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1433} vslice_dummy_var_133 := team_close($p188);
    goto corral_source_split_6814;

  corral_source_split_6814:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 1434} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_6815;

  corral_source_split_6815:
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb48:
    assume $i53 == 1;
    goto corral_source_split_6583;

  corral_source_split_6583:
    assume {:verifier.code 0} true;
    $i177 := $M.43;
    goto corral_source_split_6584;

  corral_source_split_6584:
    assume {:verifier.code 0} true;
    $i178 := $eq.i32($i177, 1);
    goto corral_source_split_6585;

  corral_source_split_6585:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb123, $bb124;

  $bb124:
    assume !($i178 == 1);
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    $i180 := $M.43;
    goto corral_source_split_6796;

  corral_source_split_6796:
    assume {:verifier.code 0} true;
    $i181 := $eq.i32($i180, 3);
    goto corral_source_split_6797;

  corral_source_split_6797:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb126, $bb127;

  $bb127:
    assume !($i181 == 1);
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    $i183 := $M.43;
    goto corral_source_split_6804;

  corral_source_split_6804:
    assume {:verifier.code 0} true;
    $i184 := $eq.i32($i183, 2);
    goto corral_source_split_6805;

  corral_source_split_6805:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb129, $bb130;

  $bb130:
    assume !($i184 == 1);
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb129:
    assume $i184 == 1;
    goto corral_source_split_6807;

  corral_source_split_6807:
    assume {:verifier.code 0} true;
    $p185 := $M.34;
    goto corral_source_split_6808;

  corral_source_split_6808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1431} team_netpoll_cleanup($p185);
    goto corral_source_split_6809;

  corral_source_split_6809:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 1432} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_6810;

  corral_source_split_6810:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb126:
    assume $i181 == 1;
    goto corral_source_split_6799;

  corral_source_split_6799:
    assume {:verifier.code 0} true;
    $p182 := $M.34;
    goto corral_source_split_6800;

  corral_source_split_6800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1429} team_netpoll_cleanup($p182);
    goto corral_source_split_6801;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    $M.43 := 3;
    call {:si_unique_call 1430} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_6802;

  corral_source_split_6802:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb123:
    assume $i178 == 1;
    goto corral_source_split_6791;

  corral_source_split_6791:
    assume {:verifier.code 0} true;
    $p179 := $M.34;
    goto corral_source_split_6792;

  corral_source_split_6792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1427} team_netpoll_cleanup($p179);
    goto corral_source_split_6793;

  corral_source_split_6793:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 1428} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6794;

  corral_source_split_6794:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb46:
    assume $i52 == 1;
    goto corral_source_split_6579;

  corral_source_split_6579:
    assume {:verifier.code 0} true;
    $i169 := $M.43;
    goto corral_source_split_6580;

  corral_source_split_6580:
    assume {:verifier.code 0} true;
    $i170 := $eq.i32($i169, 1);
    goto corral_source_split_6581;

  corral_source_split_6581:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb117, $bb118;

  $bb118:
    assume !($i170 == 1);
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb117:
    assume $i170 == 1;
    goto corral_source_split_6778;

  corral_source_split_6778:
    assume {:verifier.code 0} true;
    $p171 := $M.34;
    goto corral_source_split_6779;

  corral_source_split_6779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1423} $i172 := team_init($p171);
    goto corral_source_split_6780;

  corral_source_split_6780:
    assume {:verifier.code 0} true;
    $M.50 := $i172;
    call {:si_unique_call 1424} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i172);
    goto corral_source_split_6781;

  corral_source_split_6781:
    assume {:verifier.code 0} true;
    $i173 := $M.50;
    goto corral_source_split_6782;

  corral_source_split_6782:
    assume {:verifier.code 0} true;
    $i174 := $eq.i32($i173, 0);
    goto corral_source_split_6783;

  corral_source_split_6783:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb119, $bb120;

  $bb120:
    assume !($i174 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb119:
    assume $i174 == 1;
    goto corral_source_split_6785;

  corral_source_split_6785:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 1425} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_6786;

  corral_source_split_6786:
    assume {:verifier.code 0} true;
    $i175 := $M.45;
    goto corral_source_split_6787;

  corral_source_split_6787:
    assume {:verifier.code 0} true;
    $i176 := $add.i32($i175, 1);
    goto corral_source_split_6788;

  corral_source_split_6788:
    assume {:verifier.code 0} true;
    $M.45 := $i176;
    call {:si_unique_call 1426} {:cexpr "ref_cnt"} boogie_si_record_i32($i176);
    goto corral_source_split_6789;

  corral_source_split_6789:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb44:
    assume $i51 == 1;
    assume {:verifier.code 0} true;
    $i54 := $slt.i32($i38, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i54 == 1);
    goto corral_source_split_6595;

  corral_source_split_6595:
    assume {:verifier.code 0} true;
    $i154 := $M.43;
    goto corral_source_split_6596;

  corral_source_split_6596:
    assume {:verifier.code 0} true;
    $i155 := $eq.i32($i154, 1);
    goto corral_source_split_6597;

  corral_source_split_6597:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb108, $bb109;

  $bb109:
    assume !($i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    $i159 := $M.43;
    goto corral_source_split_6760;

  corral_source_split_6760:
    assume {:verifier.code 0} true;
    $i160 := $eq.i32($i159, 3);
    goto corral_source_split_6761;

  corral_source_split_6761:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb111, $bb112;

  $bb112:
    assume !($i160 == 1);
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    $i164 := $M.43;
    goto corral_source_split_6769;

  corral_source_split_6769:
    assume {:verifier.code 0} true;
    $i165 := $eq.i32($i164, 2);
    goto corral_source_split_6770;

  corral_source_split_6770:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb114, $bb115;

  $bb115:
    assume !($i165 == 1);
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb114:
    assume $i165 == 1;
    goto corral_source_split_6772;

  corral_source_split_6772:
    assume {:verifier.code 0} true;
    $p166 := $M.34;
    goto corral_source_split_6773;

  corral_source_split_6773:
    assume {:verifier.code 0} true;
    $i167 := $load.i64($M.41, $p2);
    goto corral_source_split_6774;

  corral_source_split_6774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1421} vslice_dummy_var_132 := team_fix_features($p166, $i167);
    goto corral_source_split_6775;

  corral_source_split_6775:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 1422} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_6776;

  corral_source_split_6776:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb111:
    assume $i160 == 1;
    goto corral_source_split_6763;

  corral_source_split_6763:
    assume {:verifier.code 0} true;
    $p161 := $M.34;
    goto corral_source_split_6764;

  corral_source_split_6764:
    assume {:verifier.code 0} true;
    $i162 := $load.i64($M.41, $p2);
    goto corral_source_split_6765;

  corral_source_split_6765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1419} vslice_dummy_var_131 := team_fix_features($p161, $i162);
    goto corral_source_split_6766;

  corral_source_split_6766:
    assume {:verifier.code 0} true;
    $M.43 := 3;
    call {:si_unique_call 1420} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_6767;

  corral_source_split_6767:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb108:
    assume $i155 == 1;
    goto corral_source_split_6754;

  corral_source_split_6754:
    assume {:verifier.code 0} true;
    $p156 := $M.34;
    goto corral_source_split_6755;

  corral_source_split_6755:
    assume {:verifier.code 0} true;
    $i157 := $load.i64($M.41, $p2);
    goto corral_source_split_6756;

  corral_source_split_6756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1417} vslice_dummy_var_130 := team_fix_features($p156, $i157);
    goto corral_source_split_6757;

  corral_source_split_6757:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 1418} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6758;

  corral_source_split_6758:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb50:
    assume $i54 == 1;
    goto corral_source_split_6591;

  corral_source_split_6591:
    assume {:verifier.code 0} true;
    $i150 := $M.43;
    goto corral_source_split_6592;

  corral_source_split_6592:
    assume {:verifier.code 0} true;
    $i151 := $eq.i32($i150, 3);
    goto corral_source_split_6593;

  corral_source_split_6593:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i151 == 1);
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb105:
    assume $i151 == 1;
    goto corral_source_split_6749;

  corral_source_split_6749:
    assume {:verifier.code 0} true;
    $p152 := $M.34;
    goto corral_source_split_6750;

  corral_source_split_6750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1415} vslice_dummy_var_129 := team_xmit($p17, $p152);
    goto corral_source_split_6751;

  corral_source_split_6751:
    assume {:verifier.code 0} true;
    $M.43 := 3;
    call {:si_unique_call 1416} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_6752;

  corral_source_split_6752:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb42:
    assume $i50 == 1;
    assume {:verifier.code 0} true;
    $i55 := $slt.i32($i38, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    $i56 := $slt.i32($i38, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    $i57 := $slt.i32($i38, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i57 == 1);
    goto corral_source_split_6607;

  corral_source_split_6607:
    assume {:verifier.code 0} true;
    $i144 := $M.43;
    goto corral_source_split_6608;

  corral_source_split_6608:
    assume {:verifier.code 0} true;
    $i145 := $eq.i32($i144, 2);
    goto corral_source_split_6609;

  corral_source_split_6609:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i145 == 1);
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb99:
    assume $i145 == 1;
    goto corral_source_split_6739;

  corral_source_split_6739:
    assume {:verifier.code 0} true;
    $p146 := $M.34;
    goto corral_source_split_6740;

  corral_source_split_6740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1412} $i147 := team_open($p146);
    goto corral_source_split_6741;

  corral_source_split_6741:
    assume {:verifier.code 0} true;
    $M.49 := $i147;
    call {:si_unique_call 1413} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i147);
    goto corral_source_split_6742;

  corral_source_split_6742:
    assume {:verifier.code 0} true;
    $i148 := $M.49;
    goto corral_source_split_6743;

  corral_source_split_6743:
    assume {:verifier.code 0} true;
    $i149 := $eq.i32($i148, 0);
    goto corral_source_split_6744;

  corral_source_split_6744:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i149 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb101:
    assume $i149 == 1;
    goto corral_source_split_6746;

  corral_source_split_6746:
    assume {:verifier.code 0} true;
    $M.43 := 3;
    call {:si_unique_call 1414} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_6747;

  corral_source_split_6747:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb56:
    assume $i57 == 1;
    goto corral_source_split_6603;

  corral_source_split_6603:
    assume {:verifier.code 0} true;
    $i129 := $M.43;
    goto corral_source_split_6604;

  corral_source_split_6604:
    assume {:verifier.code 0} true;
    $i130 := $eq.i32($i129, 1);
    goto corral_source_split_6605;

  corral_source_split_6605:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    $i134 := $M.43;
    goto corral_source_split_6721;

  corral_source_split_6721:
    assume {:verifier.code 0} true;
    $i135 := $eq.i32($i134, 3);
    goto corral_source_split_6722;

  corral_source_split_6722:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    $i139 := $M.43;
    goto corral_source_split_6730;

  corral_source_split_6730:
    assume {:verifier.code 0} true;
    $i140 := $eq.i32($i139, 2);
    goto corral_source_split_6731;

  corral_source_split_6731:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  $bb97:
    assume !($i140 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb96:
    assume $i140 == 1;
    goto corral_source_split_6733;

  corral_source_split_6733:
    assume {:verifier.code 0} true;
    $p141 := $M.34;
    goto corral_source_split_6734;

  corral_source_split_6734:
    assume {:verifier.code 0} true;
    $p142 := $M.34;
    goto corral_source_split_6735;

  corral_source_split_6735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1410} vslice_dummy_var_128 := team_del_slave($p141, $p142);
    goto corral_source_split_6736;

  corral_source_split_6736:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 1411} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_6737;

  corral_source_split_6737:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb93:
    assume $i135 == 1;
    goto corral_source_split_6724;

  corral_source_split_6724:
    assume {:verifier.code 0} true;
    $p136 := $M.34;
    goto corral_source_split_6725;

  corral_source_split_6725:
    assume {:verifier.code 0} true;
    $p137 := $M.34;
    goto corral_source_split_6726;

  corral_source_split_6726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1408} vslice_dummy_var_127 := team_del_slave($p136, $p137);
    goto corral_source_split_6727;

  corral_source_split_6727:
    assume {:verifier.code 0} true;
    $M.43 := 3;
    call {:si_unique_call 1409} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_6728;

  corral_source_split_6728:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb90:
    assume $i130 == 1;
    goto corral_source_split_6715;

  corral_source_split_6715:
    assume {:verifier.code 0} true;
    $p131 := $M.34;
    goto corral_source_split_6716;

  corral_source_split_6716:
    assume {:verifier.code 0} true;
    $p132 := $M.34;
    goto corral_source_split_6717;

  corral_source_split_6717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1406} vslice_dummy_var_126 := team_del_slave($p131, $p132);
    goto corral_source_split_6718;

  corral_source_split_6718:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 1407} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6719;

  corral_source_split_6719:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb54:
    assume $i56 == 1;
    goto corral_source_split_6599;

  corral_source_split_6599:
    assume {:verifier.code 0} true;
    $i102 := $M.43;
    goto corral_source_split_6600;

  corral_source_split_6600:
    assume {:verifier.code 0} true;
    $i103 := $eq.i32($i102, 1);
    goto corral_source_split_6601;

  corral_source_split_6601:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $i111 := $M.43;
    goto corral_source_split_6689;

  corral_source_split_6689:
    assume {:verifier.code 0} true;
    $i112 := $eq.i32($i111, 3);
    goto corral_source_split_6690;

  corral_source_split_6690:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i112 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $i120 := $M.43;
    goto corral_source_split_6702;

  corral_source_split_6702:
    assume {:verifier.code 0} true;
    $i121 := $eq.i32($i120, 2);
    goto corral_source_split_6703;

  corral_source_split_6703:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i121 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb87:
    assume $i121 == 1;
    goto corral_source_split_6705;

  corral_source_split_6705:
    assume {:verifier.code 0} true;
    $p122 := $M.34;
    goto corral_source_split_6706;

  corral_source_split_6706:
    assume {:verifier.code 0} true;
    $i123 := $load.i16($M.39, $p0);
    goto corral_source_split_6707;

  corral_source_split_6707:
    assume {:verifier.code 0} true;
    $i124 := $zext.i16.i32($i123);
    goto corral_source_split_6708;

  corral_source_split_6708:
    assume {:verifier.code 0} true;
    $i125 := $trunc.i32.i16($i124);
    goto corral_source_split_6709;

  corral_source_split_6709:
    assume {:verifier.code 0} true;
    $i126 := $zext.i16.i32($i4);
    goto corral_source_split_6710;

  corral_source_split_6710:
    assume {:verifier.code 0} true;
    $i127 := $trunc.i32.i16($i126);
    goto corral_source_split_6711;

  corral_source_split_6711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1404} vslice_dummy_var_125 := team_vlan_rx_add_vid($p122, $i125, $i127);
    goto corral_source_split_6712;

  corral_source_split_6712:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 1405} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_6713;

  corral_source_split_6713:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb84:
    assume $i112 == 1;
    goto corral_source_split_6692;

  corral_source_split_6692:
    assume {:verifier.code 0} true;
    $p113 := $M.34;
    goto corral_source_split_6693;

  corral_source_split_6693:
    assume {:verifier.code 0} true;
    $i114 := $load.i16($M.39, $p0);
    goto corral_source_split_6694;

  corral_source_split_6694:
    assume {:verifier.code 0} true;
    $i115 := $zext.i16.i32($i114);
    goto corral_source_split_6695;

  corral_source_split_6695:
    assume {:verifier.code 0} true;
    $i116 := $trunc.i32.i16($i115);
    goto corral_source_split_6696;

  corral_source_split_6696:
    assume {:verifier.code 0} true;
    $i117 := $zext.i16.i32($i4);
    goto corral_source_split_6697;

  corral_source_split_6697:
    assume {:verifier.code 0} true;
    $i118 := $trunc.i32.i16($i117);
    goto corral_source_split_6698;

  corral_source_split_6698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1402} vslice_dummy_var_124 := team_vlan_rx_add_vid($p113, $i116, $i118);
    goto corral_source_split_6699;

  corral_source_split_6699:
    assume {:verifier.code 0} true;
    $M.43 := 3;
    call {:si_unique_call 1403} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_6700;

  corral_source_split_6700:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb81:
    assume $i103 == 1;
    goto corral_source_split_6679;

  corral_source_split_6679:
    assume {:verifier.code 0} true;
    $p104 := $M.34;
    goto corral_source_split_6680;

  corral_source_split_6680:
    assume {:verifier.code 0} true;
    $i105 := $load.i16($M.39, $p0);
    goto corral_source_split_6681;

  corral_source_split_6681:
    assume {:verifier.code 0} true;
    $i106 := $zext.i16.i32($i105);
    goto corral_source_split_6682;

  corral_source_split_6682:
    assume {:verifier.code 0} true;
    $i107 := $trunc.i32.i16($i106);
    goto corral_source_split_6683;

  corral_source_split_6683:
    assume {:verifier.code 0} true;
    $i108 := $zext.i16.i32($i4);
    goto corral_source_split_6684;

  corral_source_split_6684:
    assume {:verifier.code 0} true;
    $i109 := $trunc.i32.i16($i108);
    goto corral_source_split_6685;

  corral_source_split_6685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1400} vslice_dummy_var_123 := team_vlan_rx_add_vid($p104, $i107, $i109);
    goto corral_source_split_6686;

  corral_source_split_6686:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 1401} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6687;

  corral_source_split_6687:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb52:
    assume $i55 == 1;
    assume {:verifier.code 0} true;
    $i58 := $slt.i32($i38, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i58 == 1);
    goto corral_source_split_6611;

  corral_source_split_6611:
    assume {:verifier.code 0} true;
    $i87 := $M.43;
    goto corral_source_split_6612;

  corral_source_split_6612:
    assume {:verifier.code 0} true;
    $i88 := $eq.i32($i87, 1);
    goto corral_source_split_6613;

  corral_source_split_6613:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $i92 := $M.43;
    goto corral_source_split_6661;

  corral_source_split_6661:
    assume {:verifier.code 0} true;
    $i93 := $eq.i32($i92, 3);
    goto corral_source_split_6662;

  corral_source_split_6662:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $i97 := $M.43;
    goto corral_source_split_6670;

  corral_source_split_6670:
    assume {:verifier.code 0} true;
    $i98 := $eq.i32($i97, 2);
    goto corral_source_split_6671;

  corral_source_split_6671:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb78:
    assume $i98 == 1;
    goto corral_source_split_6673;

  corral_source_split_6673:
    assume {:verifier.code 0} true;
    $p99 := $M.34;
    goto corral_source_split_6674;

  corral_source_split_6674:
    assume {:verifier.code 0} true;
    $p100 := $M.34;
    goto corral_source_split_6675;

  corral_source_split_6675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1398} vslice_dummy_var_122 := team_add_slave($p99, $p100);
    goto corral_source_split_6676;

  corral_source_split_6676:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 1399} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_6677;

  corral_source_split_6677:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb75:
    assume $i93 == 1;
    goto corral_source_split_6664;

  corral_source_split_6664:
    assume {:verifier.code 0} true;
    $p94 := $M.34;
    goto corral_source_split_6665;

  corral_source_split_6665:
    assume {:verifier.code 0} true;
    $p95 := $M.34;
    goto corral_source_split_6666;

  corral_source_split_6666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1396} vslice_dummy_var_121 := team_add_slave($p94, $p95);
    goto corral_source_split_6667;

  corral_source_split_6667:
    assume {:verifier.code 0} true;
    $M.43 := 3;
    call {:si_unique_call 1397} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_6668;

  corral_source_split_6668:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb72:
    assume $i88 == 1;
    goto corral_source_split_6655;

  corral_source_split_6655:
    assume {:verifier.code 0} true;
    $p89 := $M.34;
    goto corral_source_split_6656;

  corral_source_split_6656:
    assume {:verifier.code 0} true;
    $p90 := $M.34;
    goto corral_source_split_6657;

  corral_source_split_6657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1394} vslice_dummy_var_120 := team_add_slave($p89, $p90);
    goto corral_source_split_6658;

  corral_source_split_6658:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 1395} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6659;

  corral_source_split_6659:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb58:
    assume $i58 == 1;
    assume {:verifier.code 0} true;
    $i59 := $eq.i32($i38, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    assume !($i59 == 1);
    goto $bb31;

  $bb60:
    assume $i59 == 1;
    goto corral_source_split_6615;

  corral_source_split_6615:
    assume {:verifier.code 0} true;
    $i60 := $M.43;
    goto corral_source_split_6616;

  corral_source_split_6616:
    assume {:verifier.code 0} true;
    $i61 := $eq.i32($i60, 1);
    goto corral_source_split_6617;

  corral_source_split_6617:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $i69 := $M.43;
    goto corral_source_split_6629;

  corral_source_split_6629:
    assume {:verifier.code 0} true;
    $i70 := $eq.i32($i69, 3);
    goto corral_source_split_6630;

  corral_source_split_6630:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $i78 := $M.43;
    goto corral_source_split_6642;

  corral_source_split_6642:
    assume {:verifier.code 0} true;
    $i79 := $eq.i32($i78, 2);
    goto corral_source_split_6643;

  corral_source_split_6643:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb68:
    assume $i79 == 1;
    goto corral_source_split_6645;

  corral_source_split_6645:
    assume {:verifier.code 0} true;
    $p80 := $M.34;
    goto corral_source_split_6646;

  corral_source_split_6646:
    assume {:verifier.code 0} true;
    $i81 := $load.i16($M.40, $p1);
    goto corral_source_split_6647;

  corral_source_split_6647:
    assume {:verifier.code 0} true;
    $i82 := $zext.i16.i32($i81);
    goto corral_source_split_6648;

  corral_source_split_6648:
    assume {:verifier.code 0} true;
    $i83 := $trunc.i32.i16($i82);
    goto corral_source_split_6649;

  corral_source_split_6649:
    assume {:verifier.code 0} true;
    $i84 := $zext.i16.i32($i15);
    goto corral_source_split_6650;

  corral_source_split_6650:
    assume {:verifier.code 0} true;
    $i85 := $trunc.i32.i16($i84);
    goto corral_source_split_6651;

  corral_source_split_6651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1392} vslice_dummy_var_119 := team_vlan_rx_kill_vid($p80, $i83, $i85);
    goto corral_source_split_6652;

  corral_source_split_6652:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 1393} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_6653;

  corral_source_split_6653:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb65:
    assume $i70 == 1;
    goto corral_source_split_6632;

  corral_source_split_6632:
    assume {:verifier.code 0} true;
    $p71 := $M.34;
    goto corral_source_split_6633;

  corral_source_split_6633:
    assume {:verifier.code 0} true;
    $i72 := $load.i16($M.40, $p1);
    goto corral_source_split_6634;

  corral_source_split_6634:
    assume {:verifier.code 0} true;
    $i73 := $zext.i16.i32($i72);
    goto corral_source_split_6635;

  corral_source_split_6635:
    assume {:verifier.code 0} true;
    $i74 := $trunc.i32.i16($i73);
    goto corral_source_split_6636;

  corral_source_split_6636:
    assume {:verifier.code 0} true;
    $i75 := $zext.i16.i32($i15);
    goto corral_source_split_6637;

  corral_source_split_6637:
    assume {:verifier.code 0} true;
    $i76 := $trunc.i32.i16($i75);
    goto corral_source_split_6638;

  corral_source_split_6638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1390} vslice_dummy_var_118 := team_vlan_rx_kill_vid($p71, $i74, $i76);
    goto corral_source_split_6639;

  corral_source_split_6639:
    assume {:verifier.code 0} true;
    $M.43 := 3;
    call {:si_unique_call 1391} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_6640;

  corral_source_split_6640:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb62:
    assume $i61 == 1;
    goto corral_source_split_6619;

  corral_source_split_6619:
    assume {:verifier.code 0} true;
    $p62 := $M.34;
    goto corral_source_split_6620;

  corral_source_split_6620:
    assume {:verifier.code 0} true;
    $i63 := $load.i16($M.40, $p1);
    goto corral_source_split_6621;

  corral_source_split_6621:
    assume {:verifier.code 0} true;
    $i64 := $zext.i16.i32($i63);
    goto corral_source_split_6622;

  corral_source_split_6622:
    assume {:verifier.code 0} true;
    $i65 := $trunc.i32.i16($i64);
    goto corral_source_split_6623;

  corral_source_split_6623:
    assume {:verifier.code 0} true;
    $i66 := $zext.i16.i32($i15);
    goto corral_source_split_6624;

  corral_source_split_6624:
    assume {:verifier.code 0} true;
    $i67 := $trunc.i32.i16($i66);
    goto corral_source_split_6625;

  corral_source_split_6625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1388} vslice_dummy_var_117 := team_vlan_rx_kill_vid($p62, $i65, $i67);
    goto corral_source_split_6626;

  corral_source_split_6626:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 1389} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6627;

  corral_source_split_6627:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb219_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1382} $i29 := __VERIFIER_nondet_int();
    call {:si_unique_call 1383} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i29);
    call {:si_unique_call 1384} {:cexpr "tmp___14"} boogie_si_record_i32($i29);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const __VERIFIER_nondet_u16: ref;

axiom __VERIFIER_nondet_u16 == $sub.ref(0, 511597);

procedure __VERIFIER_nondet_u16() returns ($r: i16);



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 512629);

procedure ldv_initialize();
  free requires assertsPassed;
  modifies $M.3;



implementation ldv_initialize()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7245;

  corral_source_split_7245:
    assume {:verifier.code 0} true;
    $p0 := $M.2;
    goto corral_source_split_7246;

  corral_source_split_7246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1563} ldv_set_init($p0);
    goto corral_source_split_7247;

  corral_source_split_7247:
    assume {:verifier.code 0} true;
    return;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 513661);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7249;

  corral_source_split_7249:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const team_module_exit: ref;

axiom team_module_exit == $sub.ref(0, 514693);

procedure team_module_exit();
  free requires assertsPassed;



implementation team_module_exit()
{
  var vslice_dummy_var_168: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7251;

  corral_source_split_7251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1564} team_nl_fini();
    goto corral_source_split_7252;

  corral_source_split_7252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1565} rtnl_link_unregister(team_link_ops);
    goto corral_source_split_7253;

  corral_source_split_7253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1566} vslice_dummy_var_168 := unregister_netdevice_notifier(team_notifier_block);
    goto corral_source_split_7254;

  corral_source_split_7254:
    assume {:verifier.code 0} true;
    return;
}



const team_module_init: ref;

axiom team_module_init == $sub.ref(0, 515725);

procedure team_module_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.5;



implementation team_module_init() returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i4: i32;
  var $i5: i1;
  var $i3: i32;
  var $i6: i32;
  var vslice_dummy_var_169: i32;
  var vslice_dummy_var_170: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7256;

  corral_source_split_7256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1567} vslice_dummy_var_169 := register_netdevice_notifier(team_notifier_block);
    goto corral_source_split_7257;

  corral_source_split_7257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1568} $i1 := rtnl_link_register(team_link_ops);
    call {:si_unique_call 1569} {:cexpr "err"} boogie_si_record_i32($i1);
    goto corral_source_split_7258;

  corral_source_split_7258:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_7259;

  corral_source_split_7259:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1571} $i4 := team_nl_init();
    call {:si_unique_call 1572} {:cexpr "err"} boogie_si_record_i32($i4);
    goto corral_source_split_7266;

  corral_source_split_7266:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_7267;

  corral_source_split_7267:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_7273;

  corral_source_split_7273:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_7269;

  corral_source_split_7269:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1573} rtnl_link_unregister(team_link_ops);
    goto corral_source_split_7271;

  corral_source_split_7271:
    assume {:verifier.code 0} true;
    $i3 := $i4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7263;

  corral_source_split_7263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1570} vslice_dummy_var_170 := unregister_netdevice_notifier(team_notifier_block);
    goto corral_source_split_7264;

  corral_source_split_7264:
    assume {:verifier.code 0} true;
    $i6 := $i3;
    goto $bb9;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_7261;

  corral_source_split_7261:
    assume {:verifier.code 0} true;
    $i3 := $i1;
    goto $bb3;
}



const ldv_release_2: ref;

axiom ldv_release_2 == $sub.ref(0, 516757);

procedure ldv_release_2() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_2() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7275;

  corral_source_split_7275:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1574} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1575} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_7276;

  corral_source_split_7276:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_init_2: ref;

axiom ldv_init_2 == $sub.ref(0, 517789);

procedure ldv_init_2() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_init_2() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7278;

  corral_source_split_7278:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1576} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1577} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_7279;

  corral_source_split_7279:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 518821);

procedure ldv_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_final_state()
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7281;

  corral_source_split_7281:
    assume {:verifier.code 0} true;
    $p0 := $M.2;
    goto corral_source_split_7282;

  corral_source_split_7282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1578} $i1 := ldv_set_is_empty($p0);
    call {:si_unique_call 1579} {:cexpr "tmp___7"} boogie_si_record_i32($i1);
    goto corral_source_split_7283;

  corral_source_split_7283:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_7284;

  corral_source_split_7284:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_7288;

  corral_source_split_7288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1580} ldv_error();
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_7286;

  corral_source_split_7286:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_set_is_empty: ref;

axiom ldv_set_is_empty == $sub.ref(0, 519853);

procedure ldv_set_is_empty($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_set_is_empty($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7290;

  corral_source_split_7290:
    assume {:verifier.code 0} true;
    $i1 := $M.3;
    goto corral_source_split_7291;

  corral_source_split_7291:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 0);
    goto corral_source_split_7292;

  corral_source_split_7292:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_7293;

  corral_source_split_7293:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const register_netdevice_notifier: ref;

axiom register_netdevice_notifier == $sub.ref(0, 520885);

procedure register_netdevice_notifier($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation register_netdevice_notifier($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7295;

  corral_source_split_7295:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1581} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1582} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_7296;

  corral_source_split_7296:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const rtnl_link_register: ref;

axiom rtnl_link_register == $sub.ref(0, 521917);

procedure rtnl_link_register($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation rtnl_link_register($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7298;

  corral_source_split_7298:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1583} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1584} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_7299;

  corral_source_split_7299:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const team_nl_init: ref;

axiom team_nl_init == $sub.ref(0, 522949);

procedure team_nl_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.5;



implementation team_nl_init() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7301;

  corral_source_split_7301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1585} $i0 := _genl_register_family_with_ops_grps(team_nl_family, team_nl_ops, 4, team_nl_mcgrps, 1);
    call {:si_unique_call 1586} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_7302;

  corral_source_split_7302:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const rtnl_link_unregister: ref;

axiom rtnl_link_unregister == $sub.ref(0, 523981);

procedure rtnl_link_unregister($p0: ref);
  free requires assertsPassed;



implementation rtnl_link_unregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7304;

  corral_source_split_7304:
    assume {:verifier.code 0} true;
    return;
}



const unregister_netdevice_notifier: ref;

axiom unregister_netdevice_notifier == $sub.ref(0, 525013);

procedure unregister_netdevice_notifier($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation unregister_netdevice_notifier($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7306;

  corral_source_split_7306:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1587} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1588} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_7307;

  corral_source_split_7307:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const _genl_register_family_with_ops_grps: ref;

axiom _genl_register_family_with_ops_grps == $sub.ref(0, 526045);

procedure _genl_register_family_with_ops_grps($p0: ref, $p1: ref, $i2: i64, $p3: ref, $i4: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.5;



implementation _genl_register_family_with_ops_grps($p0: ref, $p1: ref, $i2: i64, $p3: ref, $i4: i64) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1589} {:cexpr "_genl_register_family_with_ops_grps:arg:n_ops"} boogie_si_record_i64($i2);
    call {:si_unique_call 1590} {:cexpr "_genl_register_family_with_ops_grps:arg:n_mcgrps"} boogie_si_record_i64($i4);
    goto corral_source_split_7309;

  corral_source_split_7309:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 120)), $mul.ref(112, 1));
    goto corral_source_split_7310;

  corral_source_split_7310:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p5, __this_module);
    goto corral_source_split_7311;

  corral_source_split_7311:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 120)), $mul.ref(64, 1));
    goto corral_source_split_7312;

  corral_source_split_7312:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p6, $p1);
    goto corral_source_split_7313;

  corral_source_split_7313:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i64.i32($i2);
    goto corral_source_split_7314;

  corral_source_split_7314:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 120)), $mul.ref(80, 1));
    goto corral_source_split_7315;

  corral_source_split_7315:
    assume {:verifier.code 0} true;
    $M.5 := $store.i32($M.5, $p8, $i7);
    goto corral_source_split_7316;

  corral_source_split_7316:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 120)), $mul.ref(72, 1));
    goto corral_source_split_7317;

  corral_source_split_7317:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p9, $p3);
    goto corral_source_split_7318;

  corral_source_split_7318:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i64.i32($i4);
    goto corral_source_split_7319;

  corral_source_split_7319:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 120)), $mul.ref(84, 1));
    goto corral_source_split_7320;

  corral_source_split_7320:
    assume {:verifier.code 0} true;
    $M.5 := $store.i32($M.5, $p11, $i10);
    goto corral_source_split_7321;

  corral_source_split_7321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1591} $i12 := __genl_register_family($p0);
    call {:si_unique_call 1592} {:cexpr "tmp"} boogie_si_record_i32($i12);
    goto corral_source_split_7322;

  corral_source_split_7322:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;
}



const __genl_register_family: ref;

axiom __genl_register_family == $sub.ref(0, 527077);

procedure __genl_register_family($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __genl_register_family($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7324;

  corral_source_split_7324:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1593} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1594} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_7325;

  corral_source_split_7325:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const team_nl_fini: ref;

axiom team_nl_fini == $sub.ref(0, 528109);

procedure team_nl_fini();
  free requires assertsPassed;



implementation team_nl_fini()
{
  var vslice_dummy_var_171: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7327;

  corral_source_split_7327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1595} vslice_dummy_var_171 := genl_unregister_family(team_nl_family);
    goto corral_source_split_7328;

  corral_source_split_7328:
    assume {:verifier.code 0} true;
    return;
}



const genl_unregister_family: ref;

axiom genl_unregister_family == $sub.ref(0, 529141);

procedure genl_unregister_family($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation genl_unregister_family($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7330;

  corral_source_split_7330:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1596} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1597} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_7331;

  corral_source_split_7331:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_set_init: ref;

axiom ldv_set_init == $sub.ref(0, 530173);

procedure ldv_set_init($p0: ref);
  free requires assertsPassed;
  modifies $M.3;



implementation ldv_set_init($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7333;

  corral_source_split_7333:
    assume {:verifier.code 0} true;
    $M.3 := 0;
    call {:si_unique_call 1598} {:cexpr "last_index"} boogie_si_record_i32(0);
    goto corral_source_split_7334;

  corral_source_split_7334:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 531205);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1599} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_7336;

  corral_source_split_7336:
    assume {:verifier.code 1} true;
    goto corral_source_split_7337;

  corral_source_split_7337:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_7338;

  corral_source_split_7338:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 532237);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 533269);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 534301);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7340;

  corral_source_split_7340:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_7341;

  corral_source_split_7341:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_10:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 535333);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 536365);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 537397);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 538429);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 539461);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 540493);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 541525);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 542557);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 543589);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 544621);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7343;

  corral_source_split_7343:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1600} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 1601} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1602} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_7344;

  corral_source_split_7344:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_7345;

  corral_source_split_7345:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_7349;

  corral_source_split_7349:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_7350;

  corral_source_split_7350:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1603} __VERIFIER_assume($i4);
    goto corral_source_split_7351;

  corral_source_split_7351:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_7347;

  corral_source_split_7347:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 545653);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 546685);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 547717);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __VERIFIER_nondet_unsigned_int: ref;

axiom __VERIFIER_nondet_unsigned_int == $sub.ref(0, 548749);

procedure __VERIFIER_nondet_unsigned_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7353;

  corral_source_split_7353:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1604} $i0 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1605} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1606} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_7354;

  corral_source_split_7354:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1607} $i1 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1608} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 1609} {:cexpr "min"} boogie_si_record_i32($i1);
    goto corral_source_split_7355;

  corral_source_split_7355:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1610} $i2 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1611} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 1612} {:cexpr "max"} boogie_si_record_i32($i2);
    goto corral_source_split_7356;

  corral_source_split_7356:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_7357;

  corral_source_split_7357:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_7362;

  corral_source_split_7362:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_7363;

  corral_source_split_7363:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1613} __VERIFIER_assume($i7);
    goto corral_source_split_7364;

  corral_source_split_7364:
    assume {:verifier.code 0} true;
    $i8 := $uge.i32($i0, $i1);
    goto corral_source_split_7365;

  corral_source_split_7365:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_7371;

  corral_source_split_7371:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_7372;

  corral_source_split_7372:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1614} __VERIFIER_assume($i11);
    goto corral_source_split_7373;

  corral_source_split_7373:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_7369;

  corral_source_split_7369:
    assume {:verifier.code 1} true;
    $i10 := $ule.i32($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_7359;

  corral_source_split_7359:
    assume {:verifier.code 0} true;
    $i5 := $uge.i32($i2, 4294967295);
    goto corral_source_split_7360;

  corral_source_split_7360:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_7367;

  corral_source_split_7367:
    assume {:verifier.code 1} true;
    $i6 := $ule.i32($i2, 4294967295);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 549781);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 550813);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 551845);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 552877);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 553909);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 554941);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7375;

  corral_source_split_7375:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1615} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1616} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1617} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_7376;

  corral_source_split_7376:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1618} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1619} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 1620} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_7377;

  corral_source_split_7377:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1621} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1622} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 1623} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_7378;

  corral_source_split_7378:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_7379;

  corral_source_split_7379:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_7384;

  corral_source_split_7384:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_7385;

  corral_source_split_7385:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1624} __VERIFIER_assume($i7);
    goto corral_source_split_7386;

  corral_source_split_7386:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_7387;

  corral_source_split_7387:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_7393;

  corral_source_split_7393:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_7394;

  corral_source_split_7394:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1625} __VERIFIER_assume($i11);
    goto corral_source_split_7395;

  corral_source_split_7395:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_7391;

  corral_source_split_7391:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_7381;

  corral_source_split_7381:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_7382;

  corral_source_split_7382:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_7389;

  corral_source_split_7389:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 555973);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 557005);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 558037);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 559069);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 560101);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 561133);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 562165);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 563197);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_bool: ref;

axiom __VERIFIER_nondet_bool == $sub.ref(0, 564229);

procedure __VERIFIER_nondet_bool() returns ($r: i1);
  free requires assertsPassed;



implementation __VERIFIER_nondet_bool() returns ($r: i1)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i6: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7397;

  corral_source_split_7397:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1626} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1627} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_7398;

  corral_source_split_7398:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_7399;

  corral_source_split_7399:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1628} {:cexpr "x"} boogie_si_record_i8($i2);
    goto corral_source_split_7400;

  corral_source_split_7400:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_7401;

  corral_source_split_7401:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_7402;

  corral_source_split_7402:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_7403;

  corral_source_split_7403:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume {:branchcond $i5} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_7410;

  corral_source_split_7410:
    assume {:verifier.code 1} true;
    $i7 := $trunc.i8.i1($i2);
    goto corral_source_split_7411;

  corral_source_split_7411:
    assume {:verifier.code 1} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_7412;

  corral_source_split_7412:
    assume {:verifier.code 1} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_7413;

  corral_source_split_7413:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_7405;

  corral_source_split_7405:
    assume {:verifier.code 1} true;
    $i10 := $zext.i1.i32($i6);
    goto corral_source_split_7406;

  corral_source_split_7406:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1629} __VERIFIER_assume($i10);
    goto corral_source_split_7407;

  corral_source_split_7407:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_7408;

  corral_source_split_7408:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const __VERIFIER_nondet_uint: ref;

axiom __VERIFIER_nondet_uint == $sub.ref(0, 565261);

procedure __VERIFIER_nondet_uint() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_uint() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7415;

  corral_source_split_7415:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1630} $i0 := __VERIFIER_nondet_unsigned_int();
    call {:si_unique_call 1631} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1632} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_7416;

  corral_source_split_7416:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 566293);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7418;

  corral_source_split_7418:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1633} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 1634} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1635} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_7419;

  corral_source_split_7419:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 567325);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7421;

  corral_source_split_7421:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1636} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 1637} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_7422;

  corral_source_split_7422:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 568357);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 569389);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1638} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1639} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 570421);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 571453);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7424;

  corral_source_split_7424:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_7425;

  corral_source_split_7425:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 572485);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_36: [ref]i8;
  var cmdloc_dummy_var_37: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1640} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 1641} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_7427;

  corral_source_split_7427:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1642} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1643} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_7428;

  corral_source_split_7428:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_7429;

  corral_source_split_7429:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_7433;

  corral_source_split_7433:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_7434;

  corral_source_split_7434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1644} $p6 := malloc($i5);
    goto corral_source_split_7435;

  corral_source_split_7435:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_7436;

  corral_source_split_7436:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_36 := $M.0;
    call {:si_unique_call 1645} cmdloc_dummy_var_37 := $memset.i8(cmdloc_dummy_var_36, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_37;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7438;

  corral_source_split_7438:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_7431;

  corral_source_split_7431:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 573517);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 574549);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.56, $M.0, $M.57, $M.84, $M.5, $M.85, $M.86, $M.87, $M.88, $M.89, $M.90, $M.91, $M.92, $M.2, $M.4, $M.52, $M.49, $M.51, $M.50, $M.38, $M.43, $M.37, $M.44, $M.45, $M.36, $M.35, $M.48, $M.47, $M.46, $M.34, $M.3;



implementation __SMACK_static_init()
{

  $bb0:
    call {:si_unique_call 1646} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    $M.56 := $store.i8($M.56, __kstrtab_team_modeop_port_enter, 116);
    $M.56 := $store.i8($M.56, $add.ref($add.ref(__kstrtab_team_modeop_port_enter, $mul.ref(0, 23)), $mul.ref(1, 1)), 101);
    $M.56 := $store.i8($M.56, $add.ref($add.ref(__kstrtab_team_modeop_port_enter, $mul.ref(0, 23)), $mul.ref(2, 1)), 97);
    $M.56 := $store.i8($M.56, $add.ref($add.ref(__kstrtab_team_modeop_port_enter, $mul.ref(0, 23)), $mul.ref(3, 1)), 109);
    $M.56 := $store.i8($M.56, $add.ref($add.ref(__kstrtab_team_modeop_port_enter, $mul.ref(0, 23)), $mul.ref(4, 1)), 95);
    $M.56 := $store.i8($M.56, $add.ref($add.ref(__kstrtab_team_modeop_port_enter, $mul.ref(0, 23)), $mul.ref(5, 1)), 109);
    $M.56 := $store.i8($M.56, $add.ref($add.ref(__kstrtab_team_modeop_port_enter, $mul.ref(0, 23)), $mul.ref(6, 1)), 111);
    $M.56 := $store.i8($M.56, $add.ref($add.ref(__kstrtab_team_modeop_port_enter, $mul.ref(0, 23)), $mul.ref(7, 1)), 100);
    $M.56 := $store.i8($M.56, $add.ref($add.ref(__kstrtab_team_modeop_port_enter, $mul.ref(0, 23)), $mul.ref(8, 1)), 101);
    $M.56 := $store.i8($M.56, $add.ref($add.ref(__kstrtab_team_modeop_port_enter, $mul.ref(0, 23)), $mul.ref(9, 1)), 111);
    $M.56 := $store.i8($M.56, $add.ref($add.ref(__kstrtab_team_modeop_port_enter, $mul.ref(0, 23)), $mul.ref(10, 1)), 112);
    $M.56 := $store.i8($M.56, $add.ref($add.ref(__kstrtab_team_modeop_port_enter, $mul.ref(0, 23)), $mul.ref(11, 1)), 95);
    $M.56 := $store.i8($M.56, $add.ref($add.ref(__kstrtab_team_modeop_port_enter, $mul.ref(0, 23)), $mul.ref(12, 1)), 112);
    $M.56 := $store.i8($M.56, $add.ref($add.ref(__kstrtab_team_modeop_port_enter, $mul.ref(0, 23)), $mul.ref(13, 1)), 111);
    $M.56 := $store.i8($M.56, $add.ref($add.ref(__kstrtab_team_modeop_port_enter, $mul.ref(0, 23)), $mul.ref(14, 1)), 114);
    $M.56 := $store.i8($M.56, $add.ref($add.ref(__kstrtab_team_modeop_port_enter, $mul.ref(0, 23)), $mul.ref(15, 1)), 116);
    $M.56 := $store.i8($M.56, $add.ref($add.ref(__kstrtab_team_modeop_port_enter, $mul.ref(0, 23)), $mul.ref(16, 1)), 95);
    $M.56 := $store.i8($M.56, $add.ref($add.ref(__kstrtab_team_modeop_port_enter, $mul.ref(0, 23)), $mul.ref(17, 1)), 101);
    $M.56 := $store.i8($M.56, $add.ref($add.ref(__kstrtab_team_modeop_port_enter, $mul.ref(0, 23)), $mul.ref(18, 1)), 110);
    $M.56 := $store.i8($M.56, $add.ref($add.ref(__kstrtab_team_modeop_port_enter, $mul.ref(0, 23)), $mul.ref(19, 1)), 116);
    $M.56 := $store.i8($M.56, $add.ref($add.ref(__kstrtab_team_modeop_port_enter, $mul.ref(0, 23)), $mul.ref(20, 1)), 101);
    $M.56 := $store.i8($M.56, $add.ref($add.ref(__kstrtab_team_modeop_port_enter, $mul.ref(0, 23)), $mul.ref(21, 1)), 114);
    $M.56 := $store.i8($M.56, $add.ref($add.ref(__kstrtab_team_modeop_port_enter, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.0 := $store.ref($M.0, team_ethtool_ops, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 376)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 376)), $mul.ref(16, 1)), team_ethtool_get_drvinfo);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 376)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 376)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 376)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 376)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 376)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 376)), $mul.ref(64, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 376)), $mul.ref(72, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 376)), $mul.ref(80, 1)), ethtool_op_get_link);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 376)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 376)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 376)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 376)), $mul.ref(112, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 376)), $mul.ref(120, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 376)), $mul.ref(128, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 376)), $mul.ref(136, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 376)), $mul.ref(144, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 376)), $mul.ref(152, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 376)), $mul.ref(160, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 376)), $mul.ref(168, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 376)), $mul.ref(176, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 376)), $mul.ref(184, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 376)), $mul.ref(192, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 376)), $mul.ref(200, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 376)), $mul.ref(208, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 376)), $mul.ref(216, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 376)), $mul.ref(224, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 376)), $mul.ref(232, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 376)), $mul.ref(240, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 376)), $mul.ref(248, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 376)), $mul.ref(256, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 376)), $mul.ref(264, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 376)), $mul.ref(272, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 376)), $mul.ref(280, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 376)), $mul.ref(288, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 376)), $mul.ref(296, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 376)), $mul.ref(304, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 376)), $mul.ref(312, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 376)), $mul.ref(320, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 376)), $mul.ref(328, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 376)), $mul.ref(336, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 376)), $mul.ref(344, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 376)), $mul.ref(352, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 376)), $mul.ref(360, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 376)), $mul.ref(368, 1)), $0.ref);
    $M.0 := $store.i8($M.0, team_nl_mcgrps, 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(team_nl_mcgrps, $mul.ref(0, 16)), $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(team_nl_mcgrps, $mul.ref(0, 16)), $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(team_nl_mcgrps, $mul.ref(0, 16)), $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(team_nl_mcgrps, $mul.ref(0, 16)), $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(team_nl_mcgrps, $mul.ref(0, 16)), $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(team_nl_mcgrps, $mul.ref(0, 16)), $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(team_nl_mcgrps, $mul.ref(0, 16)), $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(team_nl_mcgrps, $mul.ref(0, 16)), $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(8, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(team_nl_mcgrps, $mul.ref(0, 16)), $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(team_nl_mcgrps, $mul.ref(0, 16)), $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(10, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(team_nl_mcgrps, $mul.ref(0, 16)), $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(11, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(team_nl_mcgrps, $mul.ref(0, 16)), $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(team_nl_mcgrps, $mul.ref(0, 16)), $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(team_nl_mcgrps, $mul.ref(0, 16)), $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(team_nl_mcgrps, $mul.ref(0, 16)), $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.57 := $store.i16($M.57, team_nl_option_policy, 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(team_nl_option_policy, $mul.ref(0, 32)), $mul.ref(0, 4)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(team_nl_option_policy, $mul.ref(0, 32)), $mul.ref(1, 4)), $mul.ref(0, 1)), 5);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(team_nl_option_policy, $mul.ref(0, 32)), $mul.ref(1, 4)), $mul.ref(2, 1)), 32);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(team_nl_option_policy, $mul.ref(0, 32)), $mul.ref(2, 4)), $mul.ref(0, 1)), 6);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(team_nl_option_policy, $mul.ref(0, 32)), $mul.ref(2, 4)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(team_nl_option_policy, $mul.ref(0, 32)), $mul.ref(3, 4)), $mul.ref(0, 1)), 1);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(team_nl_option_policy, $mul.ref(0, 32)), $mul.ref(3, 4)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(team_nl_option_policy, $mul.ref(0, 32)), $mul.ref(4, 4)), $mul.ref(0, 1)), 11);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(team_nl_option_policy, $mul.ref(0, 32)), $mul.ref(4, 4)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(team_nl_option_policy, $mul.ref(0, 32)), $mul.ref(5, 4)), $mul.ref(0, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(team_nl_option_policy, $mul.ref(0, 32)), $mul.ref(5, 4)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(team_nl_option_policy, $mul.ref(0, 32)), $mul.ref(6, 4)), $mul.ref(0, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(team_nl_option_policy, $mul.ref(0, 32)), $mul.ref(6, 4)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(team_nl_option_policy, $mul.ref(0, 32)), $mul.ref(7, 4)), $mul.ref(0, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(team_nl_option_policy, $mul.ref(0, 32)), $mul.ref(7, 4)), $mul.ref(2, 1)), 0);
    $M.0 := $store.ref($M.0, team_netdev_ops, team_init);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 480)), $mul.ref(8, 1)), team_uninit);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 480)), $mul.ref(16, 1)), team_open);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 480)), $mul.ref(24, 1)), team_close);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 480)), $mul.ref(32, 1)), team_xmit);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 480)), $mul.ref(40, 1)), team_select_queue);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 480)), $mul.ref(48, 1)), team_change_rx_flags);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 480)), $mul.ref(56, 1)), team_set_rx_mode);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 480)), $mul.ref(64, 1)), team_set_mac_address);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 480)), $mul.ref(72, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 480)), $mul.ref(80, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 480)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 480)), $mul.ref(96, 1)), team_change_mtu);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 480)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 480)), $mul.ref(112, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 480)), $mul.ref(120, 1)), team_get_stats64);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 480)), $mul.ref(128, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 480)), $mul.ref(136, 1)), team_vlan_rx_add_vid);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 480)), $mul.ref(144, 1)), team_vlan_rx_kill_vid);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 480)), $mul.ref(152, 1)), team_poll_controller);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 480)), $mul.ref(160, 1)), team_netpoll_setup);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 480)), $mul.ref(168, 1)), team_netpoll_cleanup);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 480)), $mul.ref(176, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 480)), $mul.ref(184, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 480)), $mul.ref(192, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 480)), $mul.ref(200, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 480)), $mul.ref(208, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 480)), $mul.ref(216, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 480)), $mul.ref(224, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 480)), $mul.ref(232, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 480)), $mul.ref(240, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 480)), $mul.ref(248, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 480)), $mul.ref(256, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 480)), $mul.ref(264, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 480)), $mul.ref(272, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 480)), $mul.ref(280, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 480)), $mul.ref(288, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 480)), $mul.ref(296, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 480)), $mul.ref(304, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 480)), $mul.ref(312, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 480)), $mul.ref(320, 1)), team_add_slave);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 480)), $mul.ref(328, 1)), team_del_slave);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 480)), $mul.ref(336, 1)), team_fix_features);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 480)), $mul.ref(344, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 480)), $mul.ref(352, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 480)), $mul.ref(360, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 480)), $mul.ref(368, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 480)), $mul.ref(376, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 480)), $mul.ref(384, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 480)), $mul.ref(392, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 480)), $mul.ref(400, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 480)), $mul.ref(408, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 480)), $mul.ref(416, 1)), team_change_carrier);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 480)), $mul.ref(424, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 480)), $mul.ref(432, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 480)), $mul.ref(440, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 480)), $mul.ref(448, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 480)), $mul.ref(456, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 480)), $mul.ref(464, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 480)), $mul.ref(472, 1)), $0.ref);
    $M.0 := $store.i16($M.0, team_nl_policy, 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(team_nl_policy, $mul.ref(0, 16)), $mul.ref(0, 4)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(team_nl_policy, $mul.ref(0, 16)), $mul.ref(1, 4)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(team_nl_policy, $mul.ref(0, 16)), $mul.ref(1, 4)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(team_nl_policy, $mul.ref(0, 16)), $mul.ref(2, 4)), $mul.ref(0, 1)), 8);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(team_nl_policy, $mul.ref(0, 16)), $mul.ref(2, 4)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(team_nl_policy, $mul.ref(0, 16)), $mul.ref(3, 4)), $mul.ref(0, 1)), 8);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(team_nl_policy, $mul.ref(0, 16)), $mul.ref(3, 4)), $mul.ref(2, 1)), 0);
    $M.0 := $store.ref($M.0, team_nl_ops, team_nl_policy);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_nl_ops, $mul.ref(0, 160)), $mul.ref(0, 40)), $mul.ref(8, 1)), team_nl_cmd_noop);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_nl_ops, $mul.ref(0, 160)), $mul.ref(0, 40)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_nl_ops, $mul.ref(0, 160)), $mul.ref(0, 40)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(team_nl_ops, $mul.ref(0, 160)), $mul.ref(0, 40)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(team_nl_ops, $mul.ref(0, 160)), $mul.ref(0, 40)), $mul.ref(33, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(team_nl_ops, $mul.ref(0, 160)), $mul.ref(0, 40)), $mul.ref(34, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_nl_ops, $mul.ref(0, 160)), $mul.ref(1, 40)), $mul.ref(0, 1)), team_nl_policy);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_nl_ops, $mul.ref(0, 160)), $mul.ref(1, 40)), $mul.ref(8, 1)), team_nl_cmd_options_set);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_nl_ops, $mul.ref(0, 160)), $mul.ref(1, 40)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_nl_ops, $mul.ref(0, 160)), $mul.ref(1, 40)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(team_nl_ops, $mul.ref(0, 160)), $mul.ref(1, 40)), $mul.ref(32, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(team_nl_ops, $mul.ref(0, 160)), $mul.ref(1, 40)), $mul.ref(33, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(team_nl_ops, $mul.ref(0, 160)), $mul.ref(1, 40)), $mul.ref(34, 1)), 1);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_nl_ops, $mul.ref(0, 160)), $mul.ref(2, 40)), $mul.ref(0, 1)), team_nl_policy);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_nl_ops, $mul.ref(0, 160)), $mul.ref(2, 40)), $mul.ref(8, 1)), team_nl_cmd_options_get);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_nl_ops, $mul.ref(0, 160)), $mul.ref(2, 40)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_nl_ops, $mul.ref(0, 160)), $mul.ref(2, 40)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(team_nl_ops, $mul.ref(0, 160)), $mul.ref(2, 40)), $mul.ref(32, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(team_nl_ops, $mul.ref(0, 160)), $mul.ref(2, 40)), $mul.ref(33, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(team_nl_ops, $mul.ref(0, 160)), $mul.ref(2, 40)), $mul.ref(34, 1)), 1);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_nl_ops, $mul.ref(0, 160)), $mul.ref(3, 40)), $mul.ref(0, 1)), team_nl_policy);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_nl_ops, $mul.ref(0, 160)), $mul.ref(3, 40)), $mul.ref(8, 1)), team_nl_cmd_port_list_get);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_nl_ops, $mul.ref(0, 160)), $mul.ref(3, 40)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_nl_ops, $mul.ref(0, 160)), $mul.ref(3, 40)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(team_nl_ops, $mul.ref(0, 160)), $mul.ref(3, 40)), $mul.ref(32, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(team_nl_ops, $mul.ref(0, 160)), $mul.ref(3, 40)), $mul.ref(33, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(team_nl_ops, $mul.ref(0, 160)), $mul.ref(3, 40)), $mul.ref(34, 1)), 1);
    $M.0 := $store.i8($M.0, team_tx_busylock_key, 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(team_tx_busylock_key, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(team_tx_busylock_key, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(team_tx_busylock_key, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(team_tx_busylock_key, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(team_tx_busylock_key, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(team_tx_busylock_key, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(team_tx_busylock_key, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.84 := $store.i8($M.84, team_netdev_xmit_lock_key, 0);
    $M.84 := $store.i8($M.84, $add.ref($add.ref($add.ref($add.ref(team_netdev_xmit_lock_key, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.84 := $store.i8($M.84, $add.ref($add.ref($add.ref($add.ref(team_netdev_xmit_lock_key, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.84 := $store.i8($M.84, $add.ref($add.ref($add.ref($add.ref(team_netdev_xmit_lock_key, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.84 := $store.i8($M.84, $add.ref($add.ref($add.ref($add.ref(team_netdev_xmit_lock_key, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.84 := $store.i8($M.84, $add.ref($add.ref($add.ref($add.ref(team_netdev_xmit_lock_key, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.84 := $store.i8($M.84, $add.ref($add.ref($add.ref($add.ref(team_netdev_xmit_lock_key, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.84 := $store.i8($M.84, $add.ref($add.ref($add.ref($add.ref(team_netdev_xmit_lock_key, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.84 := $store.i8($M.84, team_netdev_addr_lock_key, 0);
    $M.84 := $store.i8($M.84, $add.ref($add.ref($add.ref($add.ref(team_netdev_addr_lock_key, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.84 := $store.i8($M.84, $add.ref($add.ref($add.ref($add.ref(team_netdev_addr_lock_key, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.84 := $store.i8($M.84, $add.ref($add.ref($add.ref($add.ref(team_netdev_addr_lock_key, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.84 := $store.i8($M.84, $add.ref($add.ref($add.ref($add.ref(team_netdev_addr_lock_key, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.84 := $store.i8($M.84, $add.ref($add.ref($add.ref($add.ref(team_netdev_addr_lock_key, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.84 := $store.i8($M.84, $add.ref($add.ref($add.ref($add.ref(team_netdev_addr_lock_key, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.84 := $store.i8($M.84, $add.ref($add.ref($add.ref($add.ref(team_netdev_addr_lock_key, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, team_options, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(0, 64)), $mul.ref(16, 1)), .str.42);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(0, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(0, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(0, 64)), $mul.ref(32, 1)), 1);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(0, 64)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(0, 64)), $mul.ref(48, 1)), team_mode_option_get);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(0, 64)), $mul.ref(56, 1)), team_mode_option_set);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(1, 64)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(1, 64)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(1, 64)), $mul.ref(16, 1)), .str.43);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(1, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(1, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(1, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(1, 64)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(1, 64)), $mul.ref(48, 1)), team_notify_peers_count_get);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(1, 64)), $mul.ref(56, 1)), team_notify_peers_count_set);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(2, 64)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(2, 64)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(2, 64)), $mul.ref(16, 1)), .str.44);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(2, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(2, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(2, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(2, 64)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(2, 64)), $mul.ref(48, 1)), team_notify_peers_interval_get);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(2, 64)), $mul.ref(56, 1)), team_notify_peers_interval_set);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(3, 64)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(3, 64)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(3, 64)), $mul.ref(16, 1)), .str.45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(3, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(3, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(3, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(3, 64)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(3, 64)), $mul.ref(48, 1)), team_mcast_rejoin_count_get);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(3, 64)), $mul.ref(56, 1)), team_mcast_rejoin_count_set);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(4, 64)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(4, 64)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(4, 64)), $mul.ref(16, 1)), .str.46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(4, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(4, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(4, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(4, 64)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(4, 64)), $mul.ref(48, 1)), team_mcast_rejoin_interval_get);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(4, 64)), $mul.ref(56, 1)), team_mcast_rejoin_interval_set);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(5, 64)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(5, 64)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(5, 64)), $mul.ref(16, 1)), .str.47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(5, 64)), $mul.ref(24, 1)), 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(5, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(5, 64)), $mul.ref(32, 1)), 3);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(5, 64)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(5, 64)), $mul.ref(48, 1)), team_port_en_option_get);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(5, 64)), $mul.ref(56, 1)), team_port_en_option_set);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(6, 64)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(6, 64)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(6, 64)), $mul.ref(16, 1)), .str.48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(6, 64)), $mul.ref(24, 1)), 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(6, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(6, 64)), $mul.ref(32, 1)), 3);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(6, 64)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(6, 64)), $mul.ref(48, 1)), team_user_linkup_option_get);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(6, 64)), $mul.ref(56, 1)), team_user_linkup_option_set);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(7, 64)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(7, 64)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(7, 64)), $mul.ref(16, 1)), .str.49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(7, 64)), $mul.ref(24, 1)), 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(7, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(7, 64)), $mul.ref(32, 1)), 3);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(7, 64)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(7, 64)), $mul.ref(48, 1)), team_user_linkup_en_option_get);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(7, 64)), $mul.ref(56, 1)), team_user_linkup_en_option_set);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(8, 64)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(8, 64)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(8, 64)), $mul.ref(16, 1)), .str.50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(8, 64)), $mul.ref(24, 1)), 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(8, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(8, 64)), $mul.ref(32, 1)), 4);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(8, 64)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(8, 64)), $mul.ref(48, 1)), team_priority_option_get);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(8, 64)), $mul.ref(56, 1)), team_priority_option_set);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(9, 64)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(9, 64)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(9, 64)), $mul.ref(16, 1)), .str.51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(9, 64)), $mul.ref(24, 1)), 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(9, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(9, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(9, 64)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(9, 64)), $mul.ref(48, 1)), team_queue_id_option_get);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(9, 64)), $mul.ref(56, 1)), team_queue_id_option_set);
    $M.0 := $store.ref($M.0, __team_no_mode, .str.26);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(__team_no_mode, $mul.ref(0, 40)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(__team_no_mode, $mul.ref(0, 40)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(__team_no_mode, $mul.ref(0, 40)), $mul.ref(24, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(__team_no_mode, $mul.ref(0, 40)), $mul.ref(32, 1)), $0.ref);
    $M.5 := $store.i32($M.5, team_nl_family, 0);
    $M.5 := $store.i32($M.5, $add.ref($add.ref(team_nl_family, $mul.ref(0, 120)), $mul.ref(4, 1)), 0);
    $M.5 := $store.i8($M.5, $add.ref($add.ref($add.ref(team_nl_family, $mul.ref(0, 120)), $mul.ref(8, 1)), $mul.ref(0, 1)), 116);
    $M.5 := $store.i8($M.5, $add.ref($add.ref($add.ref(team_nl_family, $mul.ref(0, 120)), $mul.ref(8, 1)), $mul.ref(1, 1)), 101);
    $M.5 := $store.i8($M.5, $add.ref($add.ref($add.ref(team_nl_family, $mul.ref(0, 120)), $mul.ref(8, 1)), $mul.ref(2, 1)), 97);
    $M.5 := $store.i8($M.5, $add.ref($add.ref($add.ref(team_nl_family, $mul.ref(0, 120)), $mul.ref(8, 1)), $mul.ref(3, 1)), 109);
    $M.5 := $store.i8($M.5, $add.ref($add.ref($add.ref(team_nl_family, $mul.ref(0, 120)), $mul.ref(8, 1)), $mul.ref(4, 1)), 0);
    $M.5 := $store.i8($M.5, $add.ref($add.ref($add.ref(team_nl_family, $mul.ref(0, 120)), $mul.ref(8, 1)), $mul.ref(5, 1)), 0);
    $M.5 := $store.i8($M.5, $add.ref($add.ref($add.ref(team_nl_family, $mul.ref(0, 120)), $mul.ref(8, 1)), $mul.ref(6, 1)), 0);
    $M.5 := $store.i8($M.5, $add.ref($add.ref($add.ref(team_nl_family, $mul.ref(0, 120)), $mul.ref(8, 1)), $mul.ref(7, 1)), 0);
    $M.5 := $store.i8($M.5, $add.ref($add.ref($add.ref(team_nl_family, $mul.ref(0, 120)), $mul.ref(8, 1)), $mul.ref(8, 1)), 0);
    $M.5 := $store.i8($M.5, $add.ref($add.ref($add.ref(team_nl_family, $mul.ref(0, 120)), $mul.ref(8, 1)), $mul.ref(9, 1)), 0);
    $M.5 := $store.i8($M.5, $add.ref($add.ref($add.ref(team_nl_family, $mul.ref(0, 120)), $mul.ref(8, 1)), $mul.ref(10, 1)), 0);
    $M.5 := $store.i8($M.5, $add.ref($add.ref($add.ref(team_nl_family, $mul.ref(0, 120)), $mul.ref(8, 1)), $mul.ref(11, 1)), 0);
    $M.5 := $store.i8($M.5, $add.ref($add.ref($add.ref(team_nl_family, $mul.ref(0, 120)), $mul.ref(8, 1)), $mul.ref(12, 1)), 0);
    $M.5 := $store.i8($M.5, $add.ref($add.ref($add.ref(team_nl_family, $mul.ref(0, 120)), $mul.ref(8, 1)), $mul.ref(13, 1)), 0);
    $M.5 := $store.i8($M.5, $add.ref($add.ref($add.ref(team_nl_family, $mul.ref(0, 120)), $mul.ref(8, 1)), $mul.ref(14, 1)), 0);
    $M.5 := $store.i8($M.5, $add.ref($add.ref($add.ref(team_nl_family, $mul.ref(0, 120)), $mul.ref(8, 1)), $mul.ref(15, 1)), 0);
    $M.5 := $store.i32($M.5, $add.ref($add.ref(team_nl_family, $mul.ref(0, 120)), $mul.ref(24, 1)), 1);
    $M.5 := $store.i32($M.5, $add.ref($add.ref(team_nl_family, $mul.ref(0, 120)), $mul.ref(28, 1)), 3);
    $M.5 := $store.i8($M.5, $add.ref($add.ref(team_nl_family, $mul.ref(0, 120)), $mul.ref(32, 1)), 1);
    $M.5 := $store.i8($M.5, $add.ref($add.ref(team_nl_family, $mul.ref(0, 120)), $mul.ref(33, 1)), 0);
    $M.5 := $store.ref($M.5, $add.ref($add.ref(team_nl_family, $mul.ref(0, 120)), $mul.ref(40, 1)), $0.ref);
    $M.5 := $store.ref($M.5, $add.ref($add.ref(team_nl_family, $mul.ref(0, 120)), $mul.ref(48, 1)), $0.ref);
    $M.5 := $store.ref($M.5, $add.ref($add.ref(team_nl_family, $mul.ref(0, 120)), $mul.ref(56, 1)), $0.ref);
    $M.5 := $store.ref($M.5, $add.ref($add.ref(team_nl_family, $mul.ref(0, 120)), $mul.ref(64, 1)), $0.ref);
    $M.5 := $store.ref($M.5, $add.ref($add.ref(team_nl_family, $mul.ref(0, 120)), $mul.ref(72, 1)), $0.ref);
    $M.5 := $store.i32($M.5, $add.ref($add.ref(team_nl_family, $mul.ref(0, 120)), $mul.ref(80, 1)), 0);
    $M.5 := $store.i32($M.5, $add.ref($add.ref(team_nl_family, $mul.ref(0, 120)), $mul.ref(84, 1)), 0);
    $M.5 := $store.i32($M.5, $add.ref($add.ref(team_nl_family, $mul.ref(0, 120)), $mul.ref(88, 1)), 0);
    $M.5 := $store.ref($M.5, $add.ref($add.ref($add.ref(team_nl_family, $mul.ref(0, 120)), $mul.ref(96, 1)), $mul.ref(0, 1)), $0.ref);
    $M.5 := $store.ref($M.5, $add.ref($add.ref($add.ref(team_nl_family, $mul.ref(0, 120)), $mul.ref(96, 1)), $mul.ref(8, 1)), $0.ref);
    $M.5 := $store.ref($M.5, $add.ref($add.ref(team_nl_family, $mul.ref(0, 120)), $mul.ref(112, 1)), $0.ref);
    $M.85 := $store.i8($M.85, __kstrtab_team_mode_unregister, 116);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_team_mode_unregister, $mul.ref(0, 21)), $mul.ref(1, 1)), 101);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_team_mode_unregister, $mul.ref(0, 21)), $mul.ref(2, 1)), 97);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_team_mode_unregister, $mul.ref(0, 21)), $mul.ref(3, 1)), 109);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_team_mode_unregister, $mul.ref(0, 21)), $mul.ref(4, 1)), 95);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_team_mode_unregister, $mul.ref(0, 21)), $mul.ref(5, 1)), 109);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_team_mode_unregister, $mul.ref(0, 21)), $mul.ref(6, 1)), 111);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_team_mode_unregister, $mul.ref(0, 21)), $mul.ref(7, 1)), 100);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_team_mode_unregister, $mul.ref(0, 21)), $mul.ref(8, 1)), 101);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_team_mode_unregister, $mul.ref(0, 21)), $mul.ref(9, 1)), 95);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_team_mode_unregister, $mul.ref(0, 21)), $mul.ref(10, 1)), 117);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_team_mode_unregister, $mul.ref(0, 21)), $mul.ref(11, 1)), 110);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_team_mode_unregister, $mul.ref(0, 21)), $mul.ref(12, 1)), 114);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_team_mode_unregister, $mul.ref(0, 21)), $mul.ref(13, 1)), 101);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_team_mode_unregister, $mul.ref(0, 21)), $mul.ref(14, 1)), 103);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_team_mode_unregister, $mul.ref(0, 21)), $mul.ref(15, 1)), 105);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_team_mode_unregister, $mul.ref(0, 21)), $mul.ref(16, 1)), 115);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_team_mode_unregister, $mul.ref(0, 21)), $mul.ref(17, 1)), 116);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_team_mode_unregister, $mul.ref(0, 21)), $mul.ref(18, 1)), 101);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_team_mode_unregister, $mul.ref(0, 21)), $mul.ref(19, 1)), 114);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_team_mode_unregister, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.86 := $store.i8($M.86, __kstrtab_team_mode_register, 116);
    $M.86 := $store.i8($M.86, $add.ref($add.ref(__kstrtab_team_mode_register, $mul.ref(0, 19)), $mul.ref(1, 1)), 101);
    $M.86 := $store.i8($M.86, $add.ref($add.ref(__kstrtab_team_mode_register, $mul.ref(0, 19)), $mul.ref(2, 1)), 97);
    $M.86 := $store.i8($M.86, $add.ref($add.ref(__kstrtab_team_mode_register, $mul.ref(0, 19)), $mul.ref(3, 1)), 109);
    $M.86 := $store.i8($M.86, $add.ref($add.ref(__kstrtab_team_mode_register, $mul.ref(0, 19)), $mul.ref(4, 1)), 95);
    $M.86 := $store.i8($M.86, $add.ref($add.ref(__kstrtab_team_mode_register, $mul.ref(0, 19)), $mul.ref(5, 1)), 109);
    $M.86 := $store.i8($M.86, $add.ref($add.ref(__kstrtab_team_mode_register, $mul.ref(0, 19)), $mul.ref(6, 1)), 111);
    $M.86 := $store.i8($M.86, $add.ref($add.ref(__kstrtab_team_mode_register, $mul.ref(0, 19)), $mul.ref(7, 1)), 100);
    $M.86 := $store.i8($M.86, $add.ref($add.ref(__kstrtab_team_mode_register, $mul.ref(0, 19)), $mul.ref(8, 1)), 101);
    $M.86 := $store.i8($M.86, $add.ref($add.ref(__kstrtab_team_mode_register, $mul.ref(0, 19)), $mul.ref(9, 1)), 95);
    $M.86 := $store.i8($M.86, $add.ref($add.ref(__kstrtab_team_mode_register, $mul.ref(0, 19)), $mul.ref(10, 1)), 114);
    $M.86 := $store.i8($M.86, $add.ref($add.ref(__kstrtab_team_mode_register, $mul.ref(0, 19)), $mul.ref(11, 1)), 101);
    $M.86 := $store.i8($M.86, $add.ref($add.ref(__kstrtab_team_mode_register, $mul.ref(0, 19)), $mul.ref(12, 1)), 103);
    $M.86 := $store.i8($M.86, $add.ref($add.ref(__kstrtab_team_mode_register, $mul.ref(0, 19)), $mul.ref(13, 1)), 105);
    $M.86 := $store.i8($M.86, $add.ref($add.ref(__kstrtab_team_mode_register, $mul.ref(0, 19)), $mul.ref(14, 1)), 115);
    $M.86 := $store.i8($M.86, $add.ref($add.ref(__kstrtab_team_mode_register, $mul.ref(0, 19)), $mul.ref(15, 1)), 116);
    $M.86 := $store.i8($M.86, $add.ref($add.ref(__kstrtab_team_mode_register, $mul.ref(0, 19)), $mul.ref(16, 1)), 101);
    $M.86 := $store.i8($M.86, $add.ref($add.ref(__kstrtab_team_mode_register, $mul.ref(0, 19)), $mul.ref(17, 1)), 114);
    $M.86 := $store.i8($M.86, $add.ref($add.ref(__kstrtab_team_mode_register, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.0 := $store.ref($M.0, mode_list, mode_list);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(mode_list, $mul.ref(0, 16)), $mul.ref(8, 1)), mode_list);
    $M.87 := $store.i32($M.87, mode_list_lock, 0);
    $M.87 := $store.i32($M.87, $add.ref($add.ref($add.ref($add.ref(mode_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.87 := $store.i32($M.87, $add.ref($add.ref($add.ref($add.ref(mode_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref($add.ref(mode_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref($add.ref($add.ref(mode_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mode_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mode_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref($add.ref($add.ref(mode_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str);
    $M.87 := $store.i32($M.87, $add.ref($add.ref($add.ref($add.ref($add.ref(mode_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.87 := $store.i64($M.87, $add.ref($add.ref($add.ref($add.ref($add.ref(mode_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.88 := $store.i8($M.88, __kstrtab_team_options_change_check, 116);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_team_options_change_check, $mul.ref(0, 26)), $mul.ref(1, 1)), 101);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_team_options_change_check, $mul.ref(0, 26)), $mul.ref(2, 1)), 97);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_team_options_change_check, $mul.ref(0, 26)), $mul.ref(3, 1)), 109);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_team_options_change_check, $mul.ref(0, 26)), $mul.ref(4, 1)), 95);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_team_options_change_check, $mul.ref(0, 26)), $mul.ref(5, 1)), 111);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_team_options_change_check, $mul.ref(0, 26)), $mul.ref(6, 1)), 112);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_team_options_change_check, $mul.ref(0, 26)), $mul.ref(7, 1)), 116);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_team_options_change_check, $mul.ref(0, 26)), $mul.ref(8, 1)), 105);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_team_options_change_check, $mul.ref(0, 26)), $mul.ref(9, 1)), 111);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_team_options_change_check, $mul.ref(0, 26)), $mul.ref(10, 1)), 110);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_team_options_change_check, $mul.ref(0, 26)), $mul.ref(11, 1)), 115);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_team_options_change_check, $mul.ref(0, 26)), $mul.ref(12, 1)), 95);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_team_options_change_check, $mul.ref(0, 26)), $mul.ref(13, 1)), 99);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_team_options_change_check, $mul.ref(0, 26)), $mul.ref(14, 1)), 104);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_team_options_change_check, $mul.ref(0, 26)), $mul.ref(15, 1)), 97);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_team_options_change_check, $mul.ref(0, 26)), $mul.ref(16, 1)), 110);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_team_options_change_check, $mul.ref(0, 26)), $mul.ref(17, 1)), 103);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_team_options_change_check, $mul.ref(0, 26)), $mul.ref(18, 1)), 101);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_team_options_change_check, $mul.ref(0, 26)), $mul.ref(19, 1)), 95);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_team_options_change_check, $mul.ref(0, 26)), $mul.ref(20, 1)), 99);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_team_options_change_check, $mul.ref(0, 26)), $mul.ref(21, 1)), 104);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_team_options_change_check, $mul.ref(0, 26)), $mul.ref(22, 1)), 101);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_team_options_change_check, $mul.ref(0, 26)), $mul.ref(23, 1)), 99);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_team_options_change_check, $mul.ref(0, 26)), $mul.ref(24, 1)), 107);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_team_options_change_check, $mul.ref(0, 26)), $mul.ref(25, 1)), 0);
    $M.89 := $store.i8($M.89, __kstrtab_team_option_inst_set_change, 116);
    $M.89 := $store.i8($M.89, $add.ref($add.ref(__kstrtab_team_option_inst_set_change, $mul.ref(0, 28)), $mul.ref(1, 1)), 101);
    $M.89 := $store.i8($M.89, $add.ref($add.ref(__kstrtab_team_option_inst_set_change, $mul.ref(0, 28)), $mul.ref(2, 1)), 97);
    $M.89 := $store.i8($M.89, $add.ref($add.ref(__kstrtab_team_option_inst_set_change, $mul.ref(0, 28)), $mul.ref(3, 1)), 109);
    $M.89 := $store.i8($M.89, $add.ref($add.ref(__kstrtab_team_option_inst_set_change, $mul.ref(0, 28)), $mul.ref(4, 1)), 95);
    $M.89 := $store.i8($M.89, $add.ref($add.ref(__kstrtab_team_option_inst_set_change, $mul.ref(0, 28)), $mul.ref(5, 1)), 111);
    $M.89 := $store.i8($M.89, $add.ref($add.ref(__kstrtab_team_option_inst_set_change, $mul.ref(0, 28)), $mul.ref(6, 1)), 112);
    $M.89 := $store.i8($M.89, $add.ref($add.ref(__kstrtab_team_option_inst_set_change, $mul.ref(0, 28)), $mul.ref(7, 1)), 116);
    $M.89 := $store.i8($M.89, $add.ref($add.ref(__kstrtab_team_option_inst_set_change, $mul.ref(0, 28)), $mul.ref(8, 1)), 105);
    $M.89 := $store.i8($M.89, $add.ref($add.ref(__kstrtab_team_option_inst_set_change, $mul.ref(0, 28)), $mul.ref(9, 1)), 111);
    $M.89 := $store.i8($M.89, $add.ref($add.ref(__kstrtab_team_option_inst_set_change, $mul.ref(0, 28)), $mul.ref(10, 1)), 110);
    $M.89 := $store.i8($M.89, $add.ref($add.ref(__kstrtab_team_option_inst_set_change, $mul.ref(0, 28)), $mul.ref(11, 1)), 95);
    $M.89 := $store.i8($M.89, $add.ref($add.ref(__kstrtab_team_option_inst_set_change, $mul.ref(0, 28)), $mul.ref(12, 1)), 105);
    $M.89 := $store.i8($M.89, $add.ref($add.ref(__kstrtab_team_option_inst_set_change, $mul.ref(0, 28)), $mul.ref(13, 1)), 110);
    $M.89 := $store.i8($M.89, $add.ref($add.ref(__kstrtab_team_option_inst_set_change, $mul.ref(0, 28)), $mul.ref(14, 1)), 115);
    $M.89 := $store.i8($M.89, $add.ref($add.ref(__kstrtab_team_option_inst_set_change, $mul.ref(0, 28)), $mul.ref(15, 1)), 116);
    $M.89 := $store.i8($M.89, $add.ref($add.ref(__kstrtab_team_option_inst_set_change, $mul.ref(0, 28)), $mul.ref(16, 1)), 95);
    $M.89 := $store.i8($M.89, $add.ref($add.ref(__kstrtab_team_option_inst_set_change, $mul.ref(0, 28)), $mul.ref(17, 1)), 115);
    $M.89 := $store.i8($M.89, $add.ref($add.ref(__kstrtab_team_option_inst_set_change, $mul.ref(0, 28)), $mul.ref(18, 1)), 101);
    $M.89 := $store.i8($M.89, $add.ref($add.ref(__kstrtab_team_option_inst_set_change, $mul.ref(0, 28)), $mul.ref(19, 1)), 116);
    $M.89 := $store.i8($M.89, $add.ref($add.ref(__kstrtab_team_option_inst_set_change, $mul.ref(0, 28)), $mul.ref(20, 1)), 95);
    $M.89 := $store.i8($M.89, $add.ref($add.ref(__kstrtab_team_option_inst_set_change, $mul.ref(0, 28)), $mul.ref(21, 1)), 99);
    $M.89 := $store.i8($M.89, $add.ref($add.ref(__kstrtab_team_option_inst_set_change, $mul.ref(0, 28)), $mul.ref(22, 1)), 104);
    $M.89 := $store.i8($M.89, $add.ref($add.ref(__kstrtab_team_option_inst_set_change, $mul.ref(0, 28)), $mul.ref(23, 1)), 97);
    $M.89 := $store.i8($M.89, $add.ref($add.ref(__kstrtab_team_option_inst_set_change, $mul.ref(0, 28)), $mul.ref(24, 1)), 110);
    $M.89 := $store.i8($M.89, $add.ref($add.ref(__kstrtab_team_option_inst_set_change, $mul.ref(0, 28)), $mul.ref(25, 1)), 103);
    $M.89 := $store.i8($M.89, $add.ref($add.ref(__kstrtab_team_option_inst_set_change, $mul.ref(0, 28)), $mul.ref(26, 1)), 101);
    $M.89 := $store.i8($M.89, $add.ref($add.ref(__kstrtab_team_option_inst_set_change, $mul.ref(0, 28)), $mul.ref(27, 1)), 0);
    $M.90 := $store.i8($M.90, __kstrtab_team_options_unregister, 116);
    $M.90 := $store.i8($M.90, $add.ref($add.ref(__kstrtab_team_options_unregister, $mul.ref(0, 24)), $mul.ref(1, 1)), 101);
    $M.90 := $store.i8($M.90, $add.ref($add.ref(__kstrtab_team_options_unregister, $mul.ref(0, 24)), $mul.ref(2, 1)), 97);
    $M.90 := $store.i8($M.90, $add.ref($add.ref(__kstrtab_team_options_unregister, $mul.ref(0, 24)), $mul.ref(3, 1)), 109);
    $M.90 := $store.i8($M.90, $add.ref($add.ref(__kstrtab_team_options_unregister, $mul.ref(0, 24)), $mul.ref(4, 1)), 95);
    $M.90 := $store.i8($M.90, $add.ref($add.ref(__kstrtab_team_options_unregister, $mul.ref(0, 24)), $mul.ref(5, 1)), 111);
    $M.90 := $store.i8($M.90, $add.ref($add.ref(__kstrtab_team_options_unregister, $mul.ref(0, 24)), $mul.ref(6, 1)), 112);
    $M.90 := $store.i8($M.90, $add.ref($add.ref(__kstrtab_team_options_unregister, $mul.ref(0, 24)), $mul.ref(7, 1)), 116);
    $M.90 := $store.i8($M.90, $add.ref($add.ref(__kstrtab_team_options_unregister, $mul.ref(0, 24)), $mul.ref(8, 1)), 105);
    $M.90 := $store.i8($M.90, $add.ref($add.ref(__kstrtab_team_options_unregister, $mul.ref(0, 24)), $mul.ref(9, 1)), 111);
    $M.90 := $store.i8($M.90, $add.ref($add.ref(__kstrtab_team_options_unregister, $mul.ref(0, 24)), $mul.ref(10, 1)), 110);
    $M.90 := $store.i8($M.90, $add.ref($add.ref(__kstrtab_team_options_unregister, $mul.ref(0, 24)), $mul.ref(11, 1)), 115);
    $M.90 := $store.i8($M.90, $add.ref($add.ref(__kstrtab_team_options_unregister, $mul.ref(0, 24)), $mul.ref(12, 1)), 95);
    $M.90 := $store.i8($M.90, $add.ref($add.ref(__kstrtab_team_options_unregister, $mul.ref(0, 24)), $mul.ref(13, 1)), 117);
    $M.90 := $store.i8($M.90, $add.ref($add.ref(__kstrtab_team_options_unregister, $mul.ref(0, 24)), $mul.ref(14, 1)), 110);
    $M.90 := $store.i8($M.90, $add.ref($add.ref(__kstrtab_team_options_unregister, $mul.ref(0, 24)), $mul.ref(15, 1)), 114);
    $M.90 := $store.i8($M.90, $add.ref($add.ref(__kstrtab_team_options_unregister, $mul.ref(0, 24)), $mul.ref(16, 1)), 101);
    $M.90 := $store.i8($M.90, $add.ref($add.ref(__kstrtab_team_options_unregister, $mul.ref(0, 24)), $mul.ref(17, 1)), 103);
    $M.90 := $store.i8($M.90, $add.ref($add.ref(__kstrtab_team_options_unregister, $mul.ref(0, 24)), $mul.ref(18, 1)), 105);
    $M.90 := $store.i8($M.90, $add.ref($add.ref(__kstrtab_team_options_unregister, $mul.ref(0, 24)), $mul.ref(19, 1)), 115);
    $M.90 := $store.i8($M.90, $add.ref($add.ref(__kstrtab_team_options_unregister, $mul.ref(0, 24)), $mul.ref(20, 1)), 116);
    $M.90 := $store.i8($M.90, $add.ref($add.ref(__kstrtab_team_options_unregister, $mul.ref(0, 24)), $mul.ref(21, 1)), 101);
    $M.90 := $store.i8($M.90, $add.ref($add.ref(__kstrtab_team_options_unregister, $mul.ref(0, 24)), $mul.ref(22, 1)), 114);
    $M.90 := $store.i8($M.90, $add.ref($add.ref(__kstrtab_team_options_unregister, $mul.ref(0, 24)), $mul.ref(23, 1)), 0);
    $M.91 := $store.i8($M.91, __kstrtab_team_options_register, 116);
    $M.91 := $store.i8($M.91, $add.ref($add.ref(__kstrtab_team_options_register, $mul.ref(0, 22)), $mul.ref(1, 1)), 101);
    $M.91 := $store.i8($M.91, $add.ref($add.ref(__kstrtab_team_options_register, $mul.ref(0, 22)), $mul.ref(2, 1)), 97);
    $M.91 := $store.i8($M.91, $add.ref($add.ref(__kstrtab_team_options_register, $mul.ref(0, 22)), $mul.ref(3, 1)), 109);
    $M.91 := $store.i8($M.91, $add.ref($add.ref(__kstrtab_team_options_register, $mul.ref(0, 22)), $mul.ref(4, 1)), 95);
    $M.91 := $store.i8($M.91, $add.ref($add.ref(__kstrtab_team_options_register, $mul.ref(0, 22)), $mul.ref(5, 1)), 111);
    $M.91 := $store.i8($M.91, $add.ref($add.ref(__kstrtab_team_options_register, $mul.ref(0, 22)), $mul.ref(6, 1)), 112);
    $M.91 := $store.i8($M.91, $add.ref($add.ref(__kstrtab_team_options_register, $mul.ref(0, 22)), $mul.ref(7, 1)), 116);
    $M.91 := $store.i8($M.91, $add.ref($add.ref(__kstrtab_team_options_register, $mul.ref(0, 22)), $mul.ref(8, 1)), 105);
    $M.91 := $store.i8($M.91, $add.ref($add.ref(__kstrtab_team_options_register, $mul.ref(0, 22)), $mul.ref(9, 1)), 111);
    $M.91 := $store.i8($M.91, $add.ref($add.ref(__kstrtab_team_options_register, $mul.ref(0, 22)), $mul.ref(10, 1)), 110);
    $M.91 := $store.i8($M.91, $add.ref($add.ref(__kstrtab_team_options_register, $mul.ref(0, 22)), $mul.ref(11, 1)), 115);
    $M.91 := $store.i8($M.91, $add.ref($add.ref(__kstrtab_team_options_register, $mul.ref(0, 22)), $mul.ref(12, 1)), 95);
    $M.91 := $store.i8($M.91, $add.ref($add.ref(__kstrtab_team_options_register, $mul.ref(0, 22)), $mul.ref(13, 1)), 114);
    $M.91 := $store.i8($M.91, $add.ref($add.ref(__kstrtab_team_options_register, $mul.ref(0, 22)), $mul.ref(14, 1)), 101);
    $M.91 := $store.i8($M.91, $add.ref($add.ref(__kstrtab_team_options_register, $mul.ref(0, 22)), $mul.ref(15, 1)), 103);
    $M.91 := $store.i8($M.91, $add.ref($add.ref(__kstrtab_team_options_register, $mul.ref(0, 22)), $mul.ref(16, 1)), 105);
    $M.91 := $store.i8($M.91, $add.ref($add.ref(__kstrtab_team_options_register, $mul.ref(0, 22)), $mul.ref(17, 1)), 115);
    $M.91 := $store.i8($M.91, $add.ref($add.ref(__kstrtab_team_options_register, $mul.ref(0, 22)), $mul.ref(18, 1)), 116);
    $M.91 := $store.i8($M.91, $add.ref($add.ref(__kstrtab_team_options_register, $mul.ref(0, 22)), $mul.ref(19, 1)), 101);
    $M.91 := $store.i8($M.91, $add.ref($add.ref(__kstrtab_team_options_register, $mul.ref(0, 22)), $mul.ref(20, 1)), 114);
    $M.91 := $store.i8($M.91, $add.ref($add.ref(__kstrtab_team_options_register, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.92 := $store.i8($M.92, __kstrtab_team_modeop_port_change_dev_addr, 116);
    $M.92 := $store.i8($M.92, $add.ref($add.ref(__kstrtab_team_modeop_port_change_dev_addr, $mul.ref(0, 33)), $mul.ref(1, 1)), 101);
    $M.92 := $store.i8($M.92, $add.ref($add.ref(__kstrtab_team_modeop_port_change_dev_addr, $mul.ref(0, 33)), $mul.ref(2, 1)), 97);
    $M.92 := $store.i8($M.92, $add.ref($add.ref(__kstrtab_team_modeop_port_change_dev_addr, $mul.ref(0, 33)), $mul.ref(3, 1)), 109);
    $M.92 := $store.i8($M.92, $add.ref($add.ref(__kstrtab_team_modeop_port_change_dev_addr, $mul.ref(0, 33)), $mul.ref(4, 1)), 95);
    $M.92 := $store.i8($M.92, $add.ref($add.ref(__kstrtab_team_modeop_port_change_dev_addr, $mul.ref(0, 33)), $mul.ref(5, 1)), 109);
    $M.92 := $store.i8($M.92, $add.ref($add.ref(__kstrtab_team_modeop_port_change_dev_addr, $mul.ref(0, 33)), $mul.ref(6, 1)), 111);
    $M.92 := $store.i8($M.92, $add.ref($add.ref(__kstrtab_team_modeop_port_change_dev_addr, $mul.ref(0, 33)), $mul.ref(7, 1)), 100);
    $M.92 := $store.i8($M.92, $add.ref($add.ref(__kstrtab_team_modeop_port_change_dev_addr, $mul.ref(0, 33)), $mul.ref(8, 1)), 101);
    $M.92 := $store.i8($M.92, $add.ref($add.ref(__kstrtab_team_modeop_port_change_dev_addr, $mul.ref(0, 33)), $mul.ref(9, 1)), 111);
    $M.92 := $store.i8($M.92, $add.ref($add.ref(__kstrtab_team_modeop_port_change_dev_addr, $mul.ref(0, 33)), $mul.ref(10, 1)), 112);
    $M.92 := $store.i8($M.92, $add.ref($add.ref(__kstrtab_team_modeop_port_change_dev_addr, $mul.ref(0, 33)), $mul.ref(11, 1)), 95);
    $M.92 := $store.i8($M.92, $add.ref($add.ref(__kstrtab_team_modeop_port_change_dev_addr, $mul.ref(0, 33)), $mul.ref(12, 1)), 112);
    $M.92 := $store.i8($M.92, $add.ref($add.ref(__kstrtab_team_modeop_port_change_dev_addr, $mul.ref(0, 33)), $mul.ref(13, 1)), 111);
    $M.92 := $store.i8($M.92, $add.ref($add.ref(__kstrtab_team_modeop_port_change_dev_addr, $mul.ref(0, 33)), $mul.ref(14, 1)), 114);
    $M.92 := $store.i8($M.92, $add.ref($add.ref(__kstrtab_team_modeop_port_change_dev_addr, $mul.ref(0, 33)), $mul.ref(15, 1)), 116);
    $M.92 := $store.i8($M.92, $add.ref($add.ref(__kstrtab_team_modeop_port_change_dev_addr, $mul.ref(0, 33)), $mul.ref(16, 1)), 95);
    $M.92 := $store.i8($M.92, $add.ref($add.ref(__kstrtab_team_modeop_port_change_dev_addr, $mul.ref(0, 33)), $mul.ref(17, 1)), 99);
    $M.92 := $store.i8($M.92, $add.ref($add.ref(__kstrtab_team_modeop_port_change_dev_addr, $mul.ref(0, 33)), $mul.ref(18, 1)), 104);
    $M.92 := $store.i8($M.92, $add.ref($add.ref(__kstrtab_team_modeop_port_change_dev_addr, $mul.ref(0, 33)), $mul.ref(19, 1)), 97);
    $M.92 := $store.i8($M.92, $add.ref($add.ref(__kstrtab_team_modeop_port_change_dev_addr, $mul.ref(0, 33)), $mul.ref(20, 1)), 110);
    $M.92 := $store.i8($M.92, $add.ref($add.ref(__kstrtab_team_modeop_port_change_dev_addr, $mul.ref(0, 33)), $mul.ref(21, 1)), 103);
    $M.92 := $store.i8($M.92, $add.ref($add.ref(__kstrtab_team_modeop_port_change_dev_addr, $mul.ref(0, 33)), $mul.ref(22, 1)), 101);
    $M.92 := $store.i8($M.92, $add.ref($add.ref(__kstrtab_team_modeop_port_change_dev_addr, $mul.ref(0, 33)), $mul.ref(23, 1)), 95);
    $M.92 := $store.i8($M.92, $add.ref($add.ref(__kstrtab_team_modeop_port_change_dev_addr, $mul.ref(0, 33)), $mul.ref(24, 1)), 100);
    $M.92 := $store.i8($M.92, $add.ref($add.ref(__kstrtab_team_modeop_port_change_dev_addr, $mul.ref(0, 33)), $mul.ref(25, 1)), 101);
    $M.92 := $store.i8($M.92, $add.ref($add.ref(__kstrtab_team_modeop_port_change_dev_addr, $mul.ref(0, 33)), $mul.ref(26, 1)), 118);
    $M.92 := $store.i8($M.92, $add.ref($add.ref(__kstrtab_team_modeop_port_change_dev_addr, $mul.ref(0, 33)), $mul.ref(27, 1)), 95);
    $M.92 := $store.i8($M.92, $add.ref($add.ref(__kstrtab_team_modeop_port_change_dev_addr, $mul.ref(0, 33)), $mul.ref(28, 1)), 97);
    $M.92 := $store.i8($M.92, $add.ref($add.ref(__kstrtab_team_modeop_port_change_dev_addr, $mul.ref(0, 33)), $mul.ref(29, 1)), 100);
    $M.92 := $store.i8($M.92, $add.ref($add.ref(__kstrtab_team_modeop_port_change_dev_addr, $mul.ref(0, 33)), $mul.ref(30, 1)), 100);
    $M.92 := $store.i8($M.92, $add.ref($add.ref(__kstrtab_team_modeop_port_change_dev_addr, $mul.ref(0, 33)), $mul.ref(31, 1)), 114);
    $M.92 := $store.i8($M.92, $add.ref($add.ref(__kstrtab_team_modeop_port_change_dev_addr, $mul.ref(0, 33)), $mul.ref(32, 1)), 0);
    $M.2 := $0.ref;
    $M.4 := $store.ref($M.4, set_impl, $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(1, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(2, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(3, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(4, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(5, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(6, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(7, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(8, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(9, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(10, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(11, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(12, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(13, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(14, 8)), $0.ref);
    $M.52 := 0;
    call {:si_unique_call 1647} {:cexpr "ldv_retval_2"} boogie_si_record_i32(0);
    $M.49 := 0;
    call {:si_unique_call 1648} {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
    $M.51 := $0.ref;
    $M.50 := 0;
    call {:si_unique_call 1649} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.38 := $0.ref;
    $M.43 := 0;
    call {:si_unique_call 1650} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    $M.37 := $0.ref;
    $M.44 := 0;
    call {:si_unique_call 1651} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.45 := 0;
    call {:si_unique_call 1652} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.36 := $0.ref;
    $M.35 := $0.ref;
    $M.48 := 0;
    call {:si_unique_call 1653} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.47 := 0;
    call {:si_unique_call 1654} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    $M.46 := 0;
    call {:si_unique_call 1655} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.34 := $0.ref;
    $M.3 := 0;
    call {:si_unique_call 1656} {:cexpr "last_index"} boogie_si_record_i32(0);
    $M.0 := $store.i8($M.0, .str.26, 42);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 9)), $mul.ref(1, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 9)), $mul.ref(2, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 9)), $mul.ref(3, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 9)), $mul.ref(4, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 9)), $mul.ref(5, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 9)), $mul.ref(6, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 9)), $mul.ref(7, 1)), 42);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, .str.42, 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 5)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 5)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 5)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, .str.43, 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 19)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 19)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 19)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 19)), $mul.ref(4, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 19)), $mul.ref(5, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 19)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 19)), $mul.ref(7, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 19)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 19)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 19)), $mul.ref(10, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 19)), $mul.ref(11, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 19)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 19)), $mul.ref(13, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 19)), $mul.ref(14, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 19)), $mul.ref(15, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 19)), $mul.ref(16, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 19)), $mul.ref(17, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, .str.44, 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 22)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 22)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 22)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 22)), $mul.ref(4, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 22)), $mul.ref(5, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 22)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 22)), $mul.ref(7, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 22)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 22)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 22)), $mul.ref(10, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 22)), $mul.ref(11, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 22)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 22)), $mul.ref(13, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 22)), $mul.ref(14, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 22)), $mul.ref(15, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 22)), $mul.ref(16, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 22)), $mul.ref(17, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 22)), $mul.ref(18, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 22)), $mul.ref(19, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 22)), $mul.ref(20, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, .str.45, 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 19)), $mul.ref(1, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 19)), $mul.ref(2, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 19)), $mul.ref(3, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 19)), $mul.ref(4, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 19)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 19)), $mul.ref(6, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 19)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 19)), $mul.ref(8, 1)), 106);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 19)), $mul.ref(9, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 19)), $mul.ref(10, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 19)), $mul.ref(11, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 19)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 19)), $mul.ref(13, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 19)), $mul.ref(14, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 19)), $mul.ref(15, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 19)), $mul.ref(16, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 19)), $mul.ref(17, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, .str.46, 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 22)), $mul.ref(1, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 22)), $mul.ref(2, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 22)), $mul.ref(3, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 22)), $mul.ref(4, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 22)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 22)), $mul.ref(6, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 22)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 22)), $mul.ref(8, 1)), 106);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 22)), $mul.ref(9, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 22)), $mul.ref(10, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 22)), $mul.ref(11, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 22)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 22)), $mul.ref(13, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 22)), $mul.ref(14, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 22)), $mul.ref(15, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 22)), $mul.ref(16, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 22)), $mul.ref(17, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 22)), $mul.ref(18, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 22)), $mul.ref(19, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 22)), $mul.ref(20, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, .str.47, 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 8)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 8)), $mul.ref(2, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 8)), $mul.ref(3, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 8)), $mul.ref(4, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 8)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 8)), $mul.ref(6, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.48, 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 12)), $mul.ref(1, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 12)), $mul.ref(2, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 12)), $mul.ref(3, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 12)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 12)), $mul.ref(5, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 12)), $mul.ref(6, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 12)), $mul.ref(7, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 12)), $mul.ref(8, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 12)), $mul.ref(9, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 12)), $mul.ref(10, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, .str.49, 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 20)), $mul.ref(1, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 20)), $mul.ref(2, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 20)), $mul.ref(3, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 20)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 20)), $mul.ref(5, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 20)), $mul.ref(6, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 20)), $mul.ref(7, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 20)), $mul.ref(8, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 20)), $mul.ref(9, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 20)), $mul.ref(10, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 20)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 20)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 20)), $mul.ref(13, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 20)), $mul.ref(14, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 20)), $mul.ref(15, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 20)), $mul.ref(16, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 20)), $mul.ref(17, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 20)), $mul.ref(18, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, .str.50, 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 9)), $mul.ref(1, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 9)), $mul.ref(2, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 9)), $mul.ref(3, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 9)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 9)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 9)), $mul.ref(6, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 9)), $mul.ref(7, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, .str.51, 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 9)), $mul.ref(1, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 9)), $mul.ref(2, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 9)), $mul.ref(3, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 9)), $mul.ref(4, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 9)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 9)), $mul.ref(6, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 9)), $mul.ref(7, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    call {:si_unique_call 1657} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 575581);

procedure devirtbounce(funcPtr: ref, arg: ref, arg1: ref, arg2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.16, $M.25, $M.26, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.31, $M.32, $M.23, $M.24, $M.4, $M.3;



implementation devirtbounce(funcPtr: ref, arg: ref, arg1: ref, arg2: i32) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i9 := $eq.ref(team_nl_send_unicast, $p0);
    assume {:branchcond $i9} true;
    goto $bb4, $bb7;

  $bb7:
    assume !($i9 == 1);
    $i8 := $eq.ref(team_nl_send_multicast, $p0);
    assume {:branchcond $i8} true;
    goto $bb3, $bb6;

  $bb6:
    assume !($i8 == 1);
    $i7 := $eq.ref(team_options_register, $p0);
    assume {:branchcond $i7} true;
    goto $bb2, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume false;
    return;

  $bb2:
    assume $i7 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    $i3 := $zext.i32.i64(arg2);
    call {:si_unique_call 1658} $i4 := team_options_register($p1, $p2, $i3);
    $r := $i4;
    return;

  $bb3:
    assume $i8 == 1;
    call {:si_unique_call 1659} $i5 := team_nl_send_multicast(arg, arg1, arg2);
    $r := $i5;
    return;

  $bb4:
    assume $i9 == 1;
    call {:si_unique_call 1660} $i6 := team_nl_send_unicast(arg, arg1, arg2);
    $r := $i6;
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 576613);

procedure devirtbounce.1(funcPtr: ref, arg: ref, arg1: i32, arg2: i64);
  free requires assertsPassed;



implementation devirtbounce.1(funcPtr: ref, arg: ref, arg1: i32, arg2: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 577645);

procedure devirtbounce.2(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.16, $M.25, $M.26, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.31, $M.32, $CurrAddr, $M.23, $M.24, $M.4, $M.3;



implementation devirtbounce.2(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $i53: i1;
  var $i54: i1;
  var $i55: i1;
  var $i56: i1;
  var $i57: i1;
  var $i58: i1;
  var $i59: i1;
  var $i60: i1;
  var $i61: i1;
  var $i62: i1;
  var $i63: i1;
  var $i64: i1;
  var $i65: i1;
  var $i66: i1;
  var $i67: i1;
  var $i68: i1;
  var $i69: i1;
  var $i70: i1;
  var $i71: i1;
  var $i72: i1;
  var $i73: i1;
  var $i74: i1;
  var $i75: i1;
  var $i76: i1;
  var $i77: i1;
  var $i78: i1;
  var $i79: i1;
  var $i80: i1;
  var $i81: i1;
  var $i82: i1;
  var $i83: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i83 := $eq.ref(team_add_slave, $p0);
    assume {:branchcond $i83} true;
    goto $bb32, $bb63;

  $bb63:
    assume !($i83 == 1);
    $i82 := $eq.ref(team_netpoll_setup, $p0);
    assume {:branchcond $i82} true;
    goto $bb31, $bb62;

  $bb62:
    assume !($i82 == 1);
    $i81 := $eq.ref(team_set_mac_address, $p0);
    assume {:branchcond $i81} true;
    goto $bb30, $bb61;

  $bb61:
    assume !($i81 == 1);
    $i80 := $eq.ref(team_xmit, $p0);
    assume {:branchcond $i80} true;
    goto $bb29, $bb60;

  $bb60:
    assume !($i80 == 1);
    $i79 := $eq.ref(team_nl_cmd_port_list_get, $p0);
    assume true;
    goto $bb28, $bb59;

  $bb59:
    assume !($i79 == 1);
    $i78 := $eq.ref(team_nl_cmd_options_get, $p0);
    assume {:branchcond $i78} true;
    goto $bb27, $bb58;

  $bb58:
    assume !($i78 == 1);
    $i77 := $eq.ref(team_nl_cmd_options_set, $p0);
    assume {:branchcond $i77} true;
    goto $bb26, $bb57;

  $bb57:
    assume !($i77 == 1);
    $i76 := $eq.ref(team_nl_cmd_noop, $p0);
    assume true;
    goto $bb25, $bb56;

  $bb56:
    assume !($i76 == 1);
    $i75 := $eq.ref(team_del_slave, $p0);
    assume {:branchcond $i75} true;
    goto $bb24, $bb55;

  $bb55:
    assume !($i75 == 1);
    $i74 := $eq.ref(team_validate, $p0);
    assume true;
    goto $bb23, $bb54;

  $bb54:
    assume !($i74 == 1);
    $i73 := $eq.ref(team_queue_id_option_set, $p0);
    assume true;
    goto $bb22, $bb53;

  $bb53:
    assume !($i73 == 1);
    $i72 := $eq.ref(team_queue_id_option_get, $p0);
    assume {:branchcond $i72} true;
    goto $bb21, $bb52;

  $bb52:
    assume !($i72 == 1);
    $i71 := $eq.ref(team_priority_option_set, $p0);
    assume true;
    goto $bb20, $bb51;

  $bb51:
    assume !($i71 == 1);
    $i70 := $eq.ref(team_priority_option_get, $p0);
    assume true;
    goto $bb19, $bb50;

  $bb50:
    assume !($i70 == 1);
    $i69 := $eq.ref(team_user_linkup_en_option_set, $p0);
    assume {:branchcond $i69} true;
    goto $bb18, $bb49;

  $bb49:
    assume !($i69 == 1);
    $i68 := $eq.ref(team_user_linkup_en_option_get, $p0);
    assume {:branchcond $i68} true;
    goto $bb17, $bb48;

  $bb48:
    assume !($i68 == 1);
    $i67 := $eq.ref(team_user_linkup_option_set, $p0);
    assume true;
    goto $bb16, $bb47;

  $bb47:
    assume !($i67 == 1);
    $i66 := $eq.ref(team_user_linkup_option_get, $p0);
    assume true;
    goto $bb15, $bb46;

  $bb46:
    assume !($i66 == 1);
    $i65 := $eq.ref(team_port_en_option_set, $p0);
    assume {:branchcond $i65} true;
    goto $bb14, $bb45;

  $bb45:
    assume !($i65 == 1);
    $i64 := $eq.ref(team_port_en_option_get, $p0);
    assume true;
    goto $bb13, $bb44;

  $bb44:
    assume !($i64 == 1);
    $i63 := $eq.ref(team_mcast_rejoin_interval_set, $p0);
    assume true;
    goto $bb12, $bb43;

  $bb43:
    assume !($i63 == 1);
    $i62 := $eq.ref(team_mcast_rejoin_interval_get, $p0);
    assume true;
    goto $bb11, $bb42;

  $bb42:
    assume !($i62 == 1);
    $i61 := $eq.ref(team_mcast_rejoin_count_set, $p0);
    assume true;
    goto $bb10, $bb41;

  $bb41:
    assume !($i61 == 1);
    $i60 := $eq.ref(team_mcast_rejoin_count_get, $p0);
    assume true;
    goto $bb9, $bb40;

  $bb40:
    assume !($i60 == 1);
    $i59 := $eq.ref(team_notify_peers_interval_set, $p0);
    assume true;
    goto $bb8, $bb39;

  $bb39:
    assume !($i59 == 1);
    $i58 := $eq.ref(team_notify_peers_interval_get, $p0);
    assume true;
    goto $bb7, $bb38;

  $bb38:
    assume !($i58 == 1);
    $i57 := $eq.ref(team_notify_peers_count_set, $p0);
    assume true;
    goto $bb6, $bb37;

  $bb37:
    assume !($i57 == 1);
    $i56 := $eq.ref(team_notify_peers_count_get, $p0);
    assume true;
    goto $bb5, $bb36;

  $bb36:
    assume !($i56 == 1);
    $i55 := $eq.ref(team_mode_option_set, $p0);
    assume true;
    goto $bb4, $bb35;

  $bb35:
    assume !($i55 == 1);
    $i54 := $eq.ref(team_mode_option_get, $p0);
    assume true;
    goto $bb3, $bb34;

  $bb34:
    assume !($i54 == 1);
    $i53 := $eq.ref(team_modeop_port_enter, $p0);
    assume true;
    goto $bb2, $bb33;

  $bb33:
    assume !($i53 == 1);
    assume false;
    return;

  $bb2:
    assume $i53 == 1;
    $p1 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1661} $i2 := team_modeop_port_enter(arg, $p1);
    $r := $i2;
    return;

  $bb3:
    assume $i54 == 1;
    call {:si_unique_call 1662} $i3 := team_mode_option_get(arg, arg1);
    $r := $i3;
    return;

  $bb4:
    assume $i55 == 1;
    call {:si_unique_call 1663} $i4 := team_mode_option_set(arg, arg1);
    $r := $i4;
    return;

  $bb5:
    assume $i56 == 1;
    call {:si_unique_call 1664} $i5 := team_notify_peers_count_get(arg, arg1);
    $r := $i5;
    return;

  $bb6:
    assume $i57 == 1;
    call {:si_unique_call 1665} $i6 := team_notify_peers_count_set(arg, arg1);
    $r := $i6;
    return;

  $bb7:
    assume $i58 == 1;
    call {:si_unique_call 1666} $i7 := team_notify_peers_interval_get(arg, arg1);
    $r := $i7;
    return;

  $bb8:
    assume $i59 == 1;
    call {:si_unique_call 1667} $i8 := team_notify_peers_interval_set(arg, arg1);
    $r := $i8;
    return;

  $bb9:
    assume $i60 == 1;
    call {:si_unique_call 1668} $i9 := team_mcast_rejoin_count_get(arg, arg1);
    $r := $i9;
    return;

  $bb10:
    assume $i61 == 1;
    call {:si_unique_call 1669} $i10 := team_mcast_rejoin_count_set(arg, arg1);
    $r := $i10;
    return;

  $bb11:
    assume $i62 == 1;
    call {:si_unique_call 1670} $i11 := team_mcast_rejoin_interval_get(arg, arg1);
    $r := $i11;
    return;

  $bb12:
    assume $i63 == 1;
    call {:si_unique_call 1671} $i12 := team_mcast_rejoin_interval_set(arg, arg1);
    $r := $i12;
    return;

  $bb13:
    assume $i64 == 1;
    call {:si_unique_call 1672} $i13 := team_port_en_option_get(arg, arg1);
    $r := $i13;
    return;

  $bb14:
    assume $i65 == 1;
    call {:si_unique_call 1673} $i14 := team_port_en_option_set(arg, arg1);
    $r := $i14;
    return;

  $bb15:
    assume $i66 == 1;
    call {:si_unique_call 1674} $i15 := team_user_linkup_option_get(arg, arg1);
    $r := $i15;
    return;

  $bb16:
    assume $i67 == 1;
    call {:si_unique_call 1675} $i16 := team_user_linkup_option_set(arg, arg1);
    $r := $i16;
    return;

  $bb17:
    assume $i68 == 1;
    call {:si_unique_call 1676} $i17 := team_user_linkup_en_option_get(arg, arg1);
    $r := $i17;
    return;

  $bb18:
    assume $i69 == 1;
    call {:si_unique_call 1677} $i18 := team_user_linkup_en_option_set(arg, arg1);
    $r := $i18;
    return;

  $bb19:
    assume $i70 == 1;
    call {:si_unique_call 1678} $i19 := team_priority_option_get(arg, arg1);
    $r := $i19;
    return;

  $bb20:
    assume $i71 == 1;
    call {:si_unique_call 1679} $i20 := team_priority_option_set(arg, arg1);
    $r := $i20;
    return;

  $bb21:
    assume $i72 == 1;
    call {:si_unique_call 1680} $i21 := team_queue_id_option_get(arg, arg1);
    $r := $i21;
    return;

  $bb22:
    assume $i73 == 1;
    call {:si_unique_call 1681} $i22 := team_queue_id_option_set(arg, arg1);
    $r := $i22;
    return;

  $bb23:
    assume $i74 == 1;
    $p23 := $bitcast.ref.ref(arg);
    $p24 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1682} $i25 := team_validate($p23, $p24);
    $r := $i25;
    return;

  $bb24:
    assume $i75 == 1;
    $p26 := $bitcast.ref.ref(arg);
    $p27 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1683} $i28 := team_del_slave($p26, $p27);
    $r := $i28;
    return;

  $bb25:
    assume $i76 == 1;
    $p29 := $bitcast.ref.ref(arg);
    $p30 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1684} $i31 := team_nl_cmd_noop($p29, $p30);
    $r := $i31;
    return;

  $bb26:
    assume $i77 == 1;
    $p32 := $bitcast.ref.ref(arg);
    $p33 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1685} $i34 := team_nl_cmd_options_set($p32, $p33);
    $r := $i34;
    return;

  $bb27:
    assume $i78 == 1;
    $p35 := $bitcast.ref.ref(arg);
    $p36 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1686} $i37 := team_nl_cmd_options_get($p35, $p36);
    $r := $i37;
    return;

  $bb28:
    assume $i79 == 1;
    $p38 := $bitcast.ref.ref(arg);
    $p39 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1687} $i40 := team_nl_cmd_port_list_get($p38, $p39);
    $r := $i40;
    return;

  $bb29:
    assume $i80 == 1;
    $p41 := $bitcast.ref.ref(arg);
    $p42 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1688} $i43 := team_xmit($p41, $p42);
    $r := $i43;
    return;

  $bb30:
    assume $i81 == 1;
    $p44 := $bitcast.ref.ref(arg);
    $p45 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1689} $i46 := team_set_mac_address($p44, $p45);
    $r := $i46;
    return;

  $bb31:
    assume $i82 == 1;
    $p47 := $bitcast.ref.ref(arg);
    $p48 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1690} $i49 := team_netpoll_setup($p47, $p48);
    $r := $i49;
    return;

  $bb32:
    assume $i83 == 1;
    $p50 := $bitcast.ref.ref(arg);
    $p51 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1691} $i52 := team_add_slave($p50, $p51);
    $r := $i52;
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 578677);

procedure devirtbounce.3(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.16, $M.25, $M.26, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.31, $M.32, $CurrAddr, $M.23, $M.24, $M.4, $M.3;



implementation devirtbounce.3(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $i30: i32;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;
  var $i34: i32;
  var $p35: ref;
  var $i36: i32;
  var $p37: ref;
  var $i38: i32;
  var $p39: ref;
  var $i40: i32;
  var $p41: ref;
  var $i42: i32;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $p46: ref;
  var $p47: ref;
  var $i48: i32;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $p55: ref;
  var $p56: ref;
  var $i57: i32;
  var $p58: ref;
  var $p59: ref;
  var $i60: i32;
  var $p61: ref;
  var $p62: ref;
  var $i63: i32;
  var $p64: ref;
  var $p65: ref;
  var $i66: i32;
  var $p67: ref;
  var $p68: ref;
  var $i69: i32;
  var $p70: ref;
  var $p71: ref;
  var $i72: i32;
  var $i73: i1;
  var $i74: i1;
  var $i75: i1;
  var $i76: i1;
  var $i77: i1;
  var $i78: i1;
  var $i79: i1;
  var $i80: i1;
  var $i81: i1;
  var $i82: i1;
  var $i83: i1;
  var $i84: i1;
  var $i85: i1;
  var $i86: i1;
  var $i87: i1;
  var $i88: i1;
  var $i89: i1;
  var $i90: i1;
  var $i91: i1;
  var $i92: i1;
  var $i93: i1;
  var $i94: i1;
  var $i95: i1;
  var $i96: i1;
  var $i97: i1;
  var $i98: i1;
  var $i99: i1;
  var $i100: i1;
  var $i101: i1;
  var $i102: i1;
  var $i103: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i103 := $eq.ref(team_add_slave, $p0);
    assume true;
    goto $bb32, $bb63;

  $bb63:
    assume !($i103 == 1);
    $i102 := $eq.ref(team_netpoll_setup, $p0);
    assume {:branchcond $i102} true;
    goto $bb31, $bb62;

  $bb62:
    assume !($i102 == 1);
    $i101 := $eq.ref(team_set_mac_address, $p0);
    assume true;
    goto $bb30, $bb61;

  $bb61:
    assume !($i101 == 1);
    $i100 := $eq.ref(team_xmit, $p0);
    assume {:branchcond $i100} true;
    goto $bb29, $bb60;

  $bb60:
    assume !($i100 == 1);
    $i99 := $eq.ref(team_nl_cmd_port_list_get, $p0);
    assume {:branchcond $i99} true;
    goto $bb28, $bb59;

  $bb59:
    assume !($i99 == 1);
    $i98 := $eq.ref(team_nl_cmd_options_get, $p0);
    assume true;
    goto $bb27, $bb58;

  $bb58:
    assume !($i98 == 1);
    $i97 := $eq.ref(team_nl_cmd_options_set, $p0);
    assume {:branchcond $i97} true;
    goto $bb26, $bb57;

  $bb57:
    assume !($i97 == 1);
    $i96 := $eq.ref(team_nl_cmd_noop, $p0);
    assume {:branchcond $i96} true;
    goto $bb25, $bb56;

  $bb56:
    assume !($i96 == 1);
    $i95 := $eq.ref(team_del_slave, $p0);
    assume true;
    goto $bb24, $bb55;

  $bb55:
    assume !($i95 == 1);
    $i94 := $eq.ref(team_validate, $p0);
    assume {:branchcond $i94} true;
    goto $bb23, $bb54;

  $bb54:
    assume !($i94 == 1);
    $i93 := $eq.ref(team_queue_id_option_set, $p0);
    assume true;
    goto $bb22, $bb53;

  $bb53:
    assume !($i93 == 1);
    $i92 := $eq.ref(team_queue_id_option_get, $p0);
    assume {:branchcond $i92} true;
    goto $bb21, $bb52;

  $bb52:
    assume !($i92 == 1);
    $i91 := $eq.ref(team_priority_option_set, $p0);
    assume true;
    goto $bb20, $bb51;

  $bb51:
    assume !($i91 == 1);
    $i90 := $eq.ref(team_priority_option_get, $p0);
    assume {:branchcond $i90} true;
    goto $bb19, $bb50;

  $bb50:
    assume !($i90 == 1);
    $i89 := $eq.ref(team_user_linkup_en_option_set, $p0);
    assume true;
    goto $bb18, $bb49;

  $bb49:
    assume !($i89 == 1);
    $i88 := $eq.ref(team_user_linkup_en_option_get, $p0);
    assume true;
    goto $bb17, $bb48;

  $bb48:
    assume !($i88 == 1);
    $i87 := $eq.ref(team_user_linkup_option_set, $p0);
    assume true;
    goto $bb16, $bb47;

  $bb47:
    assume !($i87 == 1);
    $i86 := $eq.ref(team_user_linkup_option_get, $p0);
    assume {:branchcond $i86} true;
    goto $bb15, $bb46;

  $bb46:
    assume !($i86 == 1);
    $i85 := $eq.ref(team_port_en_option_set, $p0);
    assume {:branchcond $i85} true;
    goto $bb14, $bb45;

  $bb45:
    assume !($i85 == 1);
    $i84 := $eq.ref(team_port_en_option_get, $p0);
    assume true;
    goto $bb13, $bb44;

  $bb44:
    assume !($i84 == 1);
    $i83 := $eq.ref(team_mcast_rejoin_interval_set, $p0);
    assume {:branchcond $i83} true;
    goto $bb12, $bb43;

  $bb43:
    assume !($i83 == 1);
    $i82 := $eq.ref(team_mcast_rejoin_interval_get, $p0);
    assume {:branchcond $i82} true;
    goto $bb11, $bb42;

  $bb42:
    assume !($i82 == 1);
    $i81 := $eq.ref(team_mcast_rejoin_count_set, $p0);
    assume {:branchcond $i81} true;
    goto $bb10, $bb41;

  $bb41:
    assume !($i81 == 1);
    $i80 := $eq.ref(team_mcast_rejoin_count_get, $p0);
    assume {:branchcond $i80} true;
    goto $bb9, $bb40;

  $bb40:
    assume !($i80 == 1);
    $i79 := $eq.ref(team_notify_peers_interval_set, $p0);
    assume true;
    goto $bb8, $bb39;

  $bb39:
    assume !($i79 == 1);
    $i78 := $eq.ref(team_notify_peers_interval_get, $p0);
    assume {:branchcond $i78} true;
    goto $bb7, $bb38;

  $bb38:
    assume !($i78 == 1);
    $i77 := $eq.ref(team_notify_peers_count_set, $p0);
    assume {:branchcond $i77} true;
    goto $bb6, $bb37;

  $bb37:
    assume !($i77 == 1);
    $i76 := $eq.ref(team_notify_peers_count_get, $p0);
    assume true;
    goto $bb5, $bb36;

  $bb36:
    assume !($i76 == 1);
    $i75 := $eq.ref(team_mode_option_set, $p0);
    assume {:branchcond $i75} true;
    goto $bb4, $bb35;

  $bb35:
    assume !($i75 == 1);
    $i74 := $eq.ref(team_mode_option_get, $p0);
    assume true;
    goto $bb3, $bb34;

  $bb34:
    assume !($i74 == 1);
    $i73 := $eq.ref(team_modeop_port_enter, $p0);
    assume true;
    goto $bb2, $bb33;

  $bb33:
    assume !($i73 == 1);
    assume false;
    return;

  $bb2:
    assume $i73 == 1;
    $p1 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1692} $i2 := team_modeop_port_enter(arg, $p1);
    $r := $i2;
    return;

  $bb3:
    assume $i74 == 1;
    $p3 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1693} $i4 := team_mode_option_get(arg, $p3);
    $r := $i4;
    return;

  $bb4:
    assume $i75 == 1;
    $p5 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1694} $i6 := team_mode_option_set(arg, $p5);
    $r := $i6;
    return;

  $bb5:
    assume $i76 == 1;
    $p7 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1695} $i8 := team_notify_peers_count_get(arg, $p7);
    $r := $i8;
    return;

  $bb6:
    assume $i77 == 1;
    $p9 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1696} $i10 := team_notify_peers_count_set(arg, $p9);
    $r := $i10;
    return;

  $bb7:
    assume $i78 == 1;
    $p11 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1697} $i12 := team_notify_peers_interval_get(arg, $p11);
    $r := $i12;
    return;

  $bb8:
    assume $i79 == 1;
    $p13 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1698} $i14 := team_notify_peers_interval_set(arg, $p13);
    $r := $i14;
    return;

  $bb9:
    assume $i80 == 1;
    $p15 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1699} $i16 := team_mcast_rejoin_count_get(arg, $p15);
    $r := $i16;
    return;

  $bb10:
    assume $i81 == 1;
    $p17 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1700} $i18 := team_mcast_rejoin_count_set(arg, $p17);
    $r := $i18;
    return;

  $bb11:
    assume $i82 == 1;
    $p19 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1701} $i20 := team_mcast_rejoin_interval_get(arg, $p19);
    $r := $i20;
    return;

  $bb12:
    assume $i83 == 1;
    $p21 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1702} $i22 := team_mcast_rejoin_interval_set(arg, $p21);
    $r := $i22;
    return;

  $bb13:
    assume $i84 == 1;
    $p23 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1703} $i24 := team_port_en_option_get(arg, $p23);
    $r := $i24;
    return;

  $bb14:
    assume $i85 == 1;
    $p25 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1704} $i26 := team_port_en_option_set(arg, $p25);
    $r := $i26;
    return;

  $bb15:
    assume $i86 == 1;
    $p27 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1705} $i28 := team_user_linkup_option_get(arg, $p27);
    $r := $i28;
    return;

  $bb16:
    assume $i87 == 1;
    $p29 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1706} $i30 := team_user_linkup_option_set(arg, $p29);
    $r := $i30;
    return;

  $bb17:
    assume $i88 == 1;
    $p31 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1707} $i32 := team_user_linkup_en_option_get(arg, $p31);
    $r := $i32;
    return;

  $bb18:
    assume $i89 == 1;
    $p33 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1708} $i34 := team_user_linkup_en_option_set(arg, $p33);
    $r := $i34;
    return;

  $bb19:
    assume $i90 == 1;
    $p35 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1709} $i36 := team_priority_option_get(arg, $p35);
    $r := $i36;
    return;

  $bb20:
    assume $i91 == 1;
    $p37 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1710} $i38 := team_priority_option_set(arg, $p37);
    $r := $i38;
    return;

  $bb21:
    assume $i92 == 1;
    $p39 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1711} $i40 := team_queue_id_option_get(arg, $p39);
    $r := $i40;
    return;

  $bb22:
    assume $i93 == 1;
    $p41 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1712} $i42 := team_queue_id_option_set(arg, $p41);
    $r := $i42;
    return;

  $bb23:
    assume $i94 == 1;
    $p43 := $bitcast.ref.ref(arg);
    $p44 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1713} $i45 := team_validate($p43, $p44);
    $r := $i45;
    return;

  $bb24:
    assume $i95 == 1;
    $p46 := $bitcast.ref.ref(arg);
    $p47 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1714} $i48 := team_del_slave($p46, $p47);
    $r := $i48;
    return;

  $bb25:
    assume $i96 == 1;
    $p49 := $bitcast.ref.ref(arg);
    $p50 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1715} $i51 := team_nl_cmd_noop($p49, $p50);
    $r := $i51;
    return;

  $bb26:
    assume $i97 == 1;
    $p52 := $bitcast.ref.ref(arg);
    $p53 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1716} $i54 := team_nl_cmd_options_set($p52, $p53);
    $r := $i54;
    return;

  $bb27:
    assume $i98 == 1;
    $p55 := $bitcast.ref.ref(arg);
    $p56 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1717} $i57 := team_nl_cmd_options_get($p55, $p56);
    $r := $i57;
    return;

  $bb28:
    assume $i99 == 1;
    $p58 := $bitcast.ref.ref(arg);
    $p59 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1718} $i60 := team_nl_cmd_port_list_get($p58, $p59);
    $r := $i60;
    return;

  $bb29:
    assume $i100 == 1;
    $p61 := $bitcast.ref.ref(arg);
    $p62 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1719} $i63 := team_xmit($p61, $p62);
    $r := $i63;
    return;

  $bb30:
    assume $i101 == 1;
    $p64 := $bitcast.ref.ref(arg);
    $p65 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1720} $i66 := team_set_mac_address($p64, $p65);
    $r := $i66;
    return;

  $bb31:
    assume $i102 == 1;
    $p67 := $bitcast.ref.ref(arg);
    $p68 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1721} $i69 := team_netpoll_setup($p67, $p68);
    $r := $i69;
    return;

  $bb32:
    assume $i103 == 1;
    $p70 := $bitcast.ref.ref(arg);
    $p71 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1722} $i72 := team_add_slave($p70, $p71);
    $r := $i72;
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 579709);

procedure devirtbounce.4(funcPtr: ref, arg: ref, arg1: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation devirtbounce.4(funcPtr: ref, arg: ref, arg1: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;
  var $i4: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i4 := $eq.ref(team_ethtool_get_drvinfo, $p0);
    assume {:branchcond $i4} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i4 == 1);
    $i3 := $eq.ref(team_modeop_port_change_dev_addr, $p0);
    assume {:branchcond $i3} true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i3 == 1);
    assume false;
    return;

  $bb2:
    assume $i3 == 1;
    call {:si_unique_call 1723} team_modeop_port_change_dev_addr(arg, arg1);
    return;

  $bb3:
    assume $i4 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1724} team_ethtool_get_drvinfo($p1, $p2);
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 580741);

procedure devirtbounce.5(funcPtr: ref);
  free requires assertsPassed;



implementation devirtbounce.5(funcPtr: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 581773);

procedure devirtbounce.6(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.0, $M.23, $M.24, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $CurrAddr, $M.4, $M.3, $M.16, $M.25, $M.26, $M.31, $M.32;



implementation devirtbounce.6(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i21 := $eq.ref(team_notify_peers_work, $p0);
    assume true;
    goto $bb12, $bb23;

  $bb23:
    assume !($i21 == 1);
    $i20 := $eq.ref(team_mcast_rejoin_work, $p0);
    assume true;
    goto $bb11, $bb22;

  $bb22:
    assume !($i20 == 1);
    $i19 := $eq.ref(team_netpoll_cleanup, $p0);
    assume true;
    goto $bb10, $bb21;

  $bb21:
    assume !($i19 == 1);
    $i18 := $eq.ref(team_poll_controller, $p0);
    assume true;
    goto $bb9, $bb20;

  $bb20:
    assume !($i18 == 1);
    $i17 := $eq.ref(team_set_rx_mode, $p0);
    assume true;
    goto $bb8, $bb19;

  $bb19:
    assume !($i17 == 1);
    $i16 := $eq.ref(team_uninit, $p0);
    assume true;
    goto $bb7, $bb18;

  $bb18:
    assume !($i16 == 1);
    $i15 := $eq.ref(team_destructor, $p0);
    assume true;
    goto $bb6, $bb17;

  $bb17:
    assume !($i15 == 1);
    $i14 := $eq.ref(team_setup, $p0);
    assume true;
    goto $bb5, $bb16;

  $bb16:
    assume !($i14 == 1);
    $i13 := $eq.ref(team_mode_unregister, $p0);
    assume true;
    goto $bb4, $bb15;

  $bb15:
    assume !($i13 == 1);
    $i12 := $eq.ref(team_options_change_check, $p0);
    assume true;
    goto $bb3, $bb14;

  $bb14:
    assume !($i12 == 1);
    $i11 := $eq.ref(team_option_inst_set_change, $p0);
    assume true;
    goto $bb2, $bb13;

  $bb13:
    assume !($i11 == 1);
    assume false;
    return;

  $bb2:
    assume $i11 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1725} team_option_inst_set_change($p1);
    return;

  $bb3:
    assume $i12 == 1;
    call {:si_unique_call 1726} team_options_change_check(arg);
    return;

  $bb4:
    assume $i13 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1727} team_mode_unregister($p2);
    return;

  $bb5:
    assume $i14 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1728} team_setup($p3);
    return;

  $bb6:
    assume $i15 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1729} team_destructor($p4);
    return;

  $bb7:
    assume $i16 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1730} team_uninit($p5);
    return;

  $bb8:
    assume $i17 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1731} team_set_rx_mode($p6);
    return;

  $bb9:
    assume $i18 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1732} team_poll_controller($p7);
    return;

  $bb10:
    assume $i19 == 1;
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1733} team_netpoll_cleanup($p8);
    return;

  $bb11:
    assume $i20 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1734} team_mcast_rejoin_work($p9);
    return;

  $bb12:
    assume $i21 == 1;
    $p10 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1735} team_notify_peers_work($p10);
    return;
}



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0, 582805);

procedure devirtbounce.7(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.4, $M.3, $M.16, $M.25, $M.26, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.31, $M.32, $M.23, $M.24;



implementation devirtbounce.7(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i18 := $eq.ref(ethtool_op_get_link, $p0);
    assume true;
    goto $bb7, $bb13;

  $bb13:
    assume !($i18 == 1);
    $i17 := $eq.ref(team_handle_frame, $p0);
    assume true;
    goto $bb6, $bb12;

  $bb12:
    assume !($i17 == 1);
    $i16 := $eq.ref(team_close, $p0);
    assume true;
    goto $bb5, $bb11;

  $bb11:
    assume !($i16 == 1);
    $i15 := $eq.ref(team_open, $p0);
    assume true;
    goto $bb4, $bb10;

  $bb10:
    assume !($i15 == 1);
    $i14 := $eq.ref(team_init, $p0);
    assume true;
    goto $bb3, $bb9;

  $bb9:
    assume !($i14 == 1);
    $i13 := $eq.ref(team_mode_register, $p0);
    assume true;
    goto $bb2, $bb8;

  $bb8:
    assume !($i13 == 1);
    assume false;
    return;

  $bb2:
    assume $i13 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1736} $i2 := team_mode_register($p1);
    $r := $i2;
    return;

  $bb3:
    assume $i14 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1737} $i4 := team_init($p3);
    $r := $i4;
    return;

  $bb4:
    assume $i15 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1738} $i6 := team_open($p5);
    $r := $i6;
    return;

  $bb5:
    assume $i16 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1739} $i8 := team_close($p7);
    $r := $i8;
    return;

  $bb6:
    assume $i17 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1740} $i10 := team_handle_frame($p9);
    $r := $i10;
    return;

  $bb7:
    assume $i18 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1741} $i12 := ethtool_op_get_link($p11);
    $r := $i12;
    return;
}



const devirtbounce.8: ref;

axiom devirtbounce.8 == $sub.ref(0, 583837);

procedure devirtbounce.8(funcPtr: ref, arg: ref, arg1: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation devirtbounce.8(funcPtr: ref, arg: ref, arg1: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i1;
  var $i6: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i6 := $eq.ref(team_ethtool_get_drvinfo, $p0);
    assume {:branchcond $i6} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i6 == 1);
    $i5 := $eq.ref(team_modeop_port_change_dev_addr, $p0);
    assume {:branchcond $i5} true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i5 == 1);
    assume false;
    return;

  $bb2:
    assume $i5 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1742} team_modeop_port_change_dev_addr($p1, $p2);
    return;

  $bb3:
    assume $i6 == 1;
    $p3 := $bitcast.ref.ref(arg);
    $p4 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1743} team_ethtool_get_drvinfo($p3, $p4);
    return;
}



const devirtbounce.9: ref;

axiom devirtbounce.9 == $sub.ref(0, 584869);

procedure devirtbounce.9(funcPtr: ref, arg: ref, arg1: i32, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.9(funcPtr: ref, arg: ref, arg1: i32, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.10: ref;

axiom devirtbounce.10 == $sub.ref(0, 585901);

procedure devirtbounce.10(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i1);
  free requires assertsPassed;



implementation devirtbounce.10(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i1)
{
  var $p0: ref;
  var $i1: i1;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(team_dummy_transmit, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 1744} $i1 := team_dummy_transmit(arg, arg1);
    $r := $i1;
    return;
}



const devirtbounce.11: ref;

axiom devirtbounce.11 == $sub.ref(0, 586933);

procedure devirtbounce.11(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.11(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.12: ref;

axiom devirtbounce.12 == $sub.ref(0, 587965);

procedure devirtbounce.12(funcPtr: ref, arg: ref) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.12(funcPtr: ref, arg: ref) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.13: ref;

axiom devirtbounce.13 == $sub.ref(0, 588997);

procedure devirtbounce.13(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.16, $M.25, $M.26, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.31, $M.32, $CurrAddr, $M.23, $M.24, $M.4, $M.3;



implementation devirtbounce.13(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $i23: i32;
  var $p24: ref;
  var $i25: i32;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $i29: i32;
  var $p30: ref;
  var $i31: i32;
  var $p32: ref;
  var $i33: i32;
  var $p34: ref;
  var $i35: i32;
  var $p36: ref;
  var $i37: i32;
  var $p38: ref;
  var $i39: i32;
  var $p40: ref;
  var $i41: i32;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $p54: ref;
  var $p55: ref;
  var $i56: i32;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $p60: ref;
  var $p61: ref;
  var $i62: i32;
  var $p63: ref;
  var $p64: ref;
  var $i65: i32;
  var $p66: ref;
  var $p67: ref;
  var $i68: i32;
  var $p69: ref;
  var $p70: ref;
  var $i71: i32;
  var $i72: i1;
  var $i73: i1;
  var $i74: i1;
  var $i75: i1;
  var $i76: i1;
  var $i77: i1;
  var $i78: i1;
  var $i79: i1;
  var $i80: i1;
  var $i81: i1;
  var $i82: i1;
  var $i83: i1;
  var $i84: i1;
  var $i85: i1;
  var $i86: i1;
  var $i87: i1;
  var $i88: i1;
  var $i89: i1;
  var $i90: i1;
  var $i91: i1;
  var $i92: i1;
  var $i93: i1;
  var $i94: i1;
  var $i95: i1;
  var $i96: i1;
  var $i97: i1;
  var $i98: i1;
  var $i99: i1;
  var $i100: i1;
  var $i101: i1;
  var $i102: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i102 := $eq.ref(team_add_slave, $p0);
    assume {:branchcond $i102} true;
    goto $bb32, $bb63;

  $bb63:
    assume !($i102 == 1);
    $i101 := $eq.ref(team_netpoll_setup, $p0);
    assume true;
    goto $bb31, $bb62;

  $bb62:
    assume !($i101 == 1);
    $i100 := $eq.ref(team_set_mac_address, $p0);
    assume {:branchcond $i100} true;
    goto $bb30, $bb61;

  $bb61:
    assume !($i100 == 1);
    $i99 := $eq.ref(team_xmit, $p0);
    assume {:branchcond $i99} true;
    goto $bb29, $bb60;

  $bb60:
    assume !($i99 == 1);
    $i98 := $eq.ref(team_nl_cmd_port_list_get, $p0);
    assume true;
    goto $bb28, $bb59;

  $bb59:
    assume !($i98 == 1);
    $i97 := $eq.ref(team_nl_cmd_options_get, $p0);
    assume {:branchcond $i97} true;
    goto $bb27, $bb58;

  $bb58:
    assume !($i97 == 1);
    $i96 := $eq.ref(team_nl_cmd_options_set, $p0);
    assume {:branchcond $i96} true;
    goto $bb26, $bb57;

  $bb57:
    assume !($i96 == 1);
    $i95 := $eq.ref(team_nl_cmd_noop, $p0);
    assume true;
    goto $bb25, $bb56;

  $bb56:
    assume !($i95 == 1);
    $i94 := $eq.ref(team_del_slave, $p0);
    assume {:branchcond $i94} true;
    goto $bb24, $bb55;

  $bb55:
    assume !($i94 == 1);
    $i93 := $eq.ref(team_validate, $p0);
    assume true;
    goto $bb23, $bb54;

  $bb54:
    assume !($i93 == 1);
    $i92 := $eq.ref(team_queue_id_option_set, $p0);
    assume {:branchcond $i92} true;
    goto $bb22, $bb53;

  $bb53:
    assume !($i92 == 1);
    $i91 := $eq.ref(team_queue_id_option_get, $p0);
    assume true;
    goto $bb21, $bb52;

  $bb52:
    assume !($i91 == 1);
    $i90 := $eq.ref(team_priority_option_set, $p0);
    assume {:branchcond $i90} true;
    goto $bb20, $bb51;

  $bb51:
    assume !($i90 == 1);
    $i89 := $eq.ref(team_priority_option_get, $p0);
    assume true;
    goto $bb19, $bb50;

  $bb50:
    assume !($i89 == 1);
    $i88 := $eq.ref(team_user_linkup_en_option_set, $p0);
    assume true;
    goto $bb18, $bb49;

  $bb49:
    assume !($i88 == 1);
    $i87 := $eq.ref(team_user_linkup_en_option_get, $p0);
    assume true;
    goto $bb17, $bb48;

  $bb48:
    assume !($i87 == 1);
    $i86 := $eq.ref(team_user_linkup_option_set, $p0);
    assume {:branchcond $i86} true;
    goto $bb16, $bb47;

  $bb47:
    assume !($i86 == 1);
    $i85 := $eq.ref(team_user_linkup_option_get, $p0);
    assume {:branchcond $i85} true;
    goto $bb15, $bb46;

  $bb46:
    assume !($i85 == 1);
    $i84 := $eq.ref(team_port_en_option_set, $p0);
    assume true;
    goto $bb14, $bb45;

  $bb45:
    assume !($i84 == 1);
    $i83 := $eq.ref(team_port_en_option_get, $p0);
    assume {:branchcond $i83} true;
    goto $bb13, $bb44;

  $bb44:
    assume !($i83 == 1);
    $i82 := $eq.ref(team_mcast_rejoin_interval_set, $p0);
    assume {:branchcond $i82} true;
    goto $bb12, $bb43;

  $bb43:
    assume !($i82 == 1);
    $i81 := $eq.ref(team_mcast_rejoin_interval_get, $p0);
    assume {:branchcond $i81} true;
    goto $bb11, $bb42;

  $bb42:
    assume !($i81 == 1);
    $i80 := $eq.ref(team_mcast_rejoin_count_set, $p0);
    assume {:branchcond $i80} true;
    goto $bb10, $bb41;

  $bb41:
    assume !($i80 == 1);
    $i79 := $eq.ref(team_mcast_rejoin_count_get, $p0);
    assume true;
    goto $bb9, $bb40;

  $bb40:
    assume !($i79 == 1);
    $i78 := $eq.ref(team_notify_peers_interval_set, $p0);
    assume {:branchcond $i78} true;
    goto $bb8, $bb39;

  $bb39:
    assume !($i78 == 1);
    $i77 := $eq.ref(team_notify_peers_interval_get, $p0);
    assume {:branchcond $i77} true;
    goto $bb7, $bb38;

  $bb38:
    assume !($i77 == 1);
    $i76 := $eq.ref(team_notify_peers_count_set, $p0);
    assume true;
    goto $bb6, $bb37;

  $bb37:
    assume !($i76 == 1);
    $i75 := $eq.ref(team_notify_peers_count_get, $p0);
    assume {:branchcond $i75} true;
    goto $bb5, $bb36;

  $bb36:
    assume !($i75 == 1);
    $i74 := $eq.ref(team_mode_option_set, $p0);
    assume true;
    goto $bb4, $bb35;

  $bb35:
    assume !($i74 == 1);
    $i73 := $eq.ref(team_mode_option_get, $p0);
    assume true;
    goto $bb3, $bb34;

  $bb34:
    assume !($i73 == 1);
    $i72 := $eq.ref(team_modeop_port_enter, $p0);
    assume {:branchcond $i72} true;
    goto $bb2, $bb33;

  $bb33:
    assume !($i72 == 1);
    assume false;
    return;

  $bb2:
    assume $i72 == 1;
    call {:si_unique_call 1745} $i1 := team_modeop_port_enter(arg, arg1);
    $r := $i1;
    return;

  $bb3:
    assume $i73 == 1;
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1746} $i3 := team_mode_option_get(arg, $p2);
    $r := $i3;
    return;

  $bb4:
    assume $i74 == 1;
    $p4 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1747} $i5 := team_mode_option_set(arg, $p4);
    $r := $i5;
    return;

  $bb5:
    assume $i75 == 1;
    $p6 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1748} $i7 := team_notify_peers_count_get(arg, $p6);
    $r := $i7;
    return;

  $bb6:
    assume $i76 == 1;
    $p8 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1749} $i9 := team_notify_peers_count_set(arg, $p8);
    $r := $i9;
    return;

  $bb7:
    assume $i77 == 1;
    $p10 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1750} $i11 := team_notify_peers_interval_get(arg, $p10);
    $r := $i11;
    return;

  $bb8:
    assume $i78 == 1;
    $p12 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1751} $i13 := team_notify_peers_interval_set(arg, $p12);
    $r := $i13;
    return;

  $bb9:
    assume $i79 == 1;
    $p14 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1752} $i15 := team_mcast_rejoin_count_get(arg, $p14);
    $r := $i15;
    return;

  $bb10:
    assume $i80 == 1;
    $p16 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1753} $i17 := team_mcast_rejoin_count_set(arg, $p16);
    $r := $i17;
    return;

  $bb11:
    assume $i81 == 1;
    $p18 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1754} $i19 := team_mcast_rejoin_interval_get(arg, $p18);
    $r := $i19;
    return;

  $bb12:
    assume $i82 == 1;
    $p20 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1755} $i21 := team_mcast_rejoin_interval_set(arg, $p20);
    $r := $i21;
    return;

  $bb13:
    assume $i83 == 1;
    $p22 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1756} $i23 := team_port_en_option_get(arg, $p22);
    $r := $i23;
    return;

  $bb14:
    assume $i84 == 1;
    $p24 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1757} $i25 := team_port_en_option_set(arg, $p24);
    $r := $i25;
    return;

  $bb15:
    assume $i85 == 1;
    $p26 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1758} $i27 := team_user_linkup_option_get(arg, $p26);
    $r := $i27;
    return;

  $bb16:
    assume $i86 == 1;
    $p28 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1759} $i29 := team_user_linkup_option_set(arg, $p28);
    $r := $i29;
    return;

  $bb17:
    assume $i87 == 1;
    $p30 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1760} $i31 := team_user_linkup_en_option_get(arg, $p30);
    $r := $i31;
    return;

  $bb18:
    assume $i88 == 1;
    $p32 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1761} $i33 := team_user_linkup_en_option_set(arg, $p32);
    $r := $i33;
    return;

  $bb19:
    assume $i89 == 1;
    $p34 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1762} $i35 := team_priority_option_get(arg, $p34);
    $r := $i35;
    return;

  $bb20:
    assume $i90 == 1;
    $p36 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1763} $i37 := team_priority_option_set(arg, $p36);
    $r := $i37;
    return;

  $bb21:
    assume $i91 == 1;
    $p38 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1764} $i39 := team_queue_id_option_get(arg, $p38);
    $r := $i39;
    return;

  $bb22:
    assume $i92 == 1;
    $p40 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1765} $i41 := team_queue_id_option_set(arg, $p40);
    $r := $i41;
    return;

  $bb23:
    assume $i93 == 1;
    $p42 := $bitcast.ref.ref(arg);
    $p43 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1766} $i44 := team_validate($p42, $p43);
    $r := $i44;
    return;

  $bb24:
    assume $i94 == 1;
    $p45 := $bitcast.ref.ref(arg);
    $p46 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1767} $i47 := team_del_slave($p45, $p46);
    $r := $i47;
    return;

  $bb25:
    assume $i95 == 1;
    $p48 := $bitcast.ref.ref(arg);
    $p49 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1768} $i50 := team_nl_cmd_noop($p48, $p49);
    $r := $i50;
    return;

  $bb26:
    assume $i96 == 1;
    $p51 := $bitcast.ref.ref(arg);
    $p52 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1769} $i53 := team_nl_cmd_options_set($p51, $p52);
    $r := $i53;
    return;

  $bb27:
    assume $i97 == 1;
    $p54 := $bitcast.ref.ref(arg);
    $p55 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1770} $i56 := team_nl_cmd_options_get($p54, $p55);
    $r := $i56;
    return;

  $bb28:
    assume $i98 == 1;
    $p57 := $bitcast.ref.ref(arg);
    $p58 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1771} $i59 := team_nl_cmd_port_list_get($p57, $p58);
    $r := $i59;
    return;

  $bb29:
    assume $i99 == 1;
    $p60 := $bitcast.ref.ref(arg);
    $p61 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1772} $i62 := team_xmit($p60, $p61);
    $r := $i62;
    return;

  $bb30:
    assume $i100 == 1;
    $p63 := $bitcast.ref.ref(arg);
    $p64 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1773} $i65 := team_set_mac_address($p63, $p64);
    $r := $i65;
    return;

  $bb31:
    assume $i101 == 1;
    $p66 := $bitcast.ref.ref(arg);
    $p67 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1774} $i68 := team_netpoll_setup($p66, $p67);
    $r := $i68;
    return;

  $bb32:
    assume $i102 == 1;
    $p69 := $bitcast.ref.ref(arg);
    $p70 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1775} $i71 := team_add_slave($p69, $p70);
    $r := $i71;
    return;
}



const devirtbounce.14: ref;

axiom devirtbounce.14 == $sub.ref(0, 590029);

procedure devirtbounce.14(funcPtr: ref, arg: ref, arg1: ref, arg2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.14(funcPtr: ref, arg: ref, arg1: ref, arg2: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(team_dummy_receive, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 1776} $i1 := team_dummy_receive(arg, arg1, arg2);
    $r := $i1;
    return;
}



const devirtbounce.15: ref;

axiom devirtbounce.15 == $sub.ref(0, 591061);

procedure devirtbounce.15(funcPtr: ref, arg: i64, arg1: ref, arg2: i32, arg3: i64) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.15(funcPtr: ref, arg: i64, arg1: ref, arg2: i32, arg3: i64) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.16: ref;

axiom devirtbounce.16 == $sub.ref(0, 592093);

procedure devirtbounce.16(funcPtr: ref, arg: i64, arg1: ref, arg2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.16(funcPtr: ref, arg: i64, arg1: ref, arg2: i32) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.17: ref;

axiom devirtbounce.17 == $sub.ref(0, 593125);

procedure devirtbounce.17(funcPtr: ref, arg: ref, arg1: ref, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.17(funcPtr: ref, arg: ref, arg1: ref, arg2: ref)
{
  var $p0: ref;
  var $i1: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i1 := $eq.ref(team_set_lockdep_class_one, $p0);
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume false;
    return;

  $bb2:
    assume $i1 == 1;
    call {:si_unique_call 1777} team_set_lockdep_class_one(arg, arg1, arg2);
    return;
}



const devirtbounce.18: ref;

axiom devirtbounce.18 == $sub.ref(0, 594157);

procedure devirtbounce.18(funcPtr: ref, arg: ref, arg1: ref, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.18(funcPtr: ref, arg: ref, arg1: ref, arg2: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i4 := $eq.ref(team_set_lockdep_class_one, $p0);
    assume {:branchcond $i4} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i4 == 1);
    assume false;
    return;

  $bb2:
    assume $i4 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    $p3 := $bitcast.ref.ref(arg2);
    call {:si_unique_call 1778} team_set_lockdep_class_one($p1, $p2, $p3);
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



const $u0: i8;

procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.56, $M.0, $M.57, $M.84, $M.5, $M.85, $M.86, $M.87, $M.88, $M.89, $M.90, $M.91, $M.92, $M.2, $M.4, $M.52, $M.49, $M.51, $M.50, $M.38, $M.43, $M.37, $M.44, $M.45, $M.36, $M.35, $M.48, $M.47, $M.46, $M.34, $M.3, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 1779} __SMACK_static_init();
    call {:si_unique_call 1780} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48, $M.27, $M.28, $M.49, $M.0, $M.29, $M.30, $M.50, $M.23, $M.24, $M.21, $M.22, $M.25, $M.26, $M.52, $M.35, $M.36, $M.37, $M.38, $M.34, $M.56, $M.57, $M.84, $M.5, $M.85, $M.86, $M.87, $M.88, $M.89, $M.90, $M.91, $M.92, $M.2, $M.4, $M.51, $M.3, $CurrAddr, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.31, $M.32, $M.12, $M.16;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation __team_options_register_loop_$bb43(in_$p5: ref, in_$i66: i64, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$i70: i32, in_$i71: i1, in_$i65: i32) returns (out_$i66: i64, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$i70: i32, out_$i71: i1, out_$i65: i32)
{

  entry:
    out_$i66, out_$p67, out_$p68, out_$p69, out_$i70, out_$i71, out_$i65 := in_$i66, in_$p67, in_$p68, in_$p69, in_$i70, in_$i71, in_$i65;
    goto $bb43, exit;

  $bb43:
    assume {:verifier.code 0} true;
    goto corral_source_split_142;

  $bb45:
    assume out_$i71 == 1;
    assume {:verifier.code 0} true;
    out_$i65 := out_$i70;
    goto $bb45_dummy;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    out_$i71 := $sge.i32(out_$i70, 0);
    goto corral_source_split_150;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    out_$i70 := $sub.i32(out_$i65, 1);
    call {:si_unique_call 32} {:cexpr "i"} boogie_si_record_i32(out_$i70);
    goto corral_source_split_149;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 31} kfree(out_$p69);
    goto corral_source_split_148;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    out_$p69 := $bitcast.ref.ref(out_$p68);
    goto corral_source_split_147;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    out_$p68 := $load.ref($M.0, out_$p67);
    goto corral_source_split_146;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref(in_$p5, $mul.ref(out_$i66, 8));
    goto corral_source_split_145;

  $bb44:
    assume {:verifier.code 0} true;
    out_$i66 := $sext.i32.i64(out_$i65);
    goto corral_source_split_144;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb45_dummy:
    call {:si_unique_call 1} out_$i66, out_$p67, out_$p68, out_$p69, out_$i70, out_$i71, out_$i65 := __team_options_register_loop_$bb43(in_$p5, out_$i66, out_$p67, out_$p68, out_$p69, out_$i70, out_$i71, out_$i65);
    return;

  exit:
    return;
}



procedure __team_options_register_loop_$bb43(in_$p5: ref, in_$i66: i64, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$i70: i32, in_$i71: i1, in_$i65: i32) returns (out_$i66: i64, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$i70: i32, out_$i71: i1, out_$i65: i32);



implementation __team_options_register_loop_$bb35(in_$p0: ref, in_$p5: ref, in_$i56: i64, in_$p57: ref, in_$p58: ref, in_$i59: i32, in_$i60: i1, in_$i55: i32) returns (out_$i56: i64, out_$p57: ref, out_$p58: ref, out_$i59: i32, out_$i60: i1, out_$i55: i32)
{

  entry:
    out_$i56, out_$p57, out_$p58, out_$i59, out_$i60, out_$i55 := in_$i56, in_$p57, in_$p58, in_$i59, in_$i60, in_$i55;
    goto $bb35, exit;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_126;

  $bb37:
    assume out_$i60 == 1;
    assume {:verifier.code 0} true;
    out_$i55 := out_$i59;
    goto $bb37_dummy;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    out_$i60 := $sge.i32(out_$i59, 0);
    goto corral_source_split_133;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    out_$i59 := $sub.i32(out_$i55, 1);
    call {:si_unique_call 29} {:cexpr "i"} boogie_si_record_i32(out_$i59);
    goto corral_source_split_132;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} __team_option_inst_del_option(in_$p0, out_$p58);
    goto corral_source_split_131;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    out_$p58 := $load.ref($M.0, out_$p57);
    goto corral_source_split_130;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref(in_$p5, $mul.ref(out_$i56, 8));
    goto corral_source_split_129;

  $bb36:
    assume {:verifier.code 0} true;
    out_$i56 := $sext.i32.i64(out_$i55);
    goto corral_source_split_128;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb37_dummy:
    call {:si_unique_call 1} out_$i56, out_$p57, out_$p58, out_$i59, out_$i60, out_$i55 := __team_options_register_loop_$bb35(in_$p0, in_$p5, out_$i56, out_$p57, out_$p58, out_$i59, out_$i60, out_$i55);
    return;

  exit:
    return;
}



procedure __team_options_register_loop_$bb35(in_$p0: ref, in_$p5: ref, in_$i56: i64, in_$p57: ref, in_$p58: ref, in_$i59: i32, in_$i60: i1, in_$i55: i32) returns (out_$i56: i64, out_$p57: ref, out_$p58: ref, out_$i59: i32, out_$i60: i1, out_$i55: i32);



implementation __team_options_register_loop_$bb23(in_$p0: ref, in_$i2: i64, in_$p5: ref, in_$i37: i64, in_$p38: ref, in_$p39: ref, in_$i40: i32, in_$i41: i1, in_$i42: i32, in_$i43: i32, in_$i44: i64, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$i49: i32, in_$i50: i64, in_$i51: i1, in_$i36: i32) returns (out_$i37: i64, out_$p38: ref, out_$p39: ref, out_$i40: i32, out_$i41: i1, out_$i42: i32, out_$i43: i32, out_$i44: i64, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$i49: i32, out_$i50: i64, out_$i51: i1, out_$i36: i32)
{

  entry:
    out_$i37, out_$p38, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$p46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i36 := in_$i37, in_$p38, in_$p39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$p45, in_$p46, in_$p47, in_$p48, in_$i49, in_$i50, in_$i51, in_$i36;
    goto $bb23, exit;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_96;

  $bb29:
    assume out_$i51 == 1;
    assume {:verifier.code 0} true;
    out_$i36 := out_$i49;
    goto $bb29_dummy;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    out_$i51 := $ult.i64(out_$i50, in_$i2);
    goto corral_source_split_117;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    out_$i50 := $sext.i32.i64(out_$i49);
    goto corral_source_split_116;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    out_$i49 := $add.i32(out_$i36, 1);
    call {:si_unique_call 26} {:cexpr "i"} boogie_si_record_i32(out_$i49);
    goto corral_source_split_115;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} list_add_tail(out_$p47, out_$p48);
    goto corral_source_split_114;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(in_$p0, $mul.ref(0, 984)), $mul.ref(336, 1));
    goto corral_source_split_113;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(out_$p46, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_112;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    out_$p46 := $load.ref($M.0, out_$p45);
    goto corral_source_split_111;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref(in_$p5, $mul.ref(out_$i44, 8));
    goto corral_source_split_110;

  $bb28:
    assume {:verifier.code 0} true;
    out_$i44 := $sext.i32.i64(out_$i36);
    goto corral_source_split_109;

  $bb26:
    assume !(out_$i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    out_$i42, out_$i43 := out_$i36, out_$i40;
    assume true;
    goto $bb26;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    out_$i41 := $ne.i32(out_$i40, 0);
    goto corral_source_split_102;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} out_$i40 := __team_option_inst_add_option(in_$p0, out_$p39);
    call {:si_unique_call 23} {:cexpr "err"} boogie_si_record_i32(out_$i40);
    goto corral_source_split_101;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    out_$p39 := $load.ref($M.0, out_$p38);
    goto corral_source_split_100;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref(in_$p5, $mul.ref(out_$i37, 8));
    goto corral_source_split_99;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i37 := $sext.i32.i64(out_$i36);
    goto corral_source_split_98;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb29_dummy:
    call {:si_unique_call 1} out_$i37, out_$p38, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$p46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i36 := __team_options_register_loop_$bb23(in_$p0, in_$i2, in_$p5, out_$i37, out_$p38, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$p46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i36);
    return;

  exit:
    return;
}



procedure __team_options_register_loop_$bb23(in_$p0: ref, in_$i2: i64, in_$p5: ref, in_$i37: i64, in_$p38: ref, in_$p39: ref, in_$i40: i32, in_$i41: i1, in_$i42: i32, in_$i43: i32, in_$i44: i64, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$i49: i32, in_$i50: i64, in_$i51: i1, in_$i36: i32) returns (out_$i37: i64, out_$p38: ref, out_$p39: ref, out_$i40: i32, out_$i41: i1, out_$i42: i32, out_$i43: i32, out_$i44: i64, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$i49: i32, out_$i50: i64, out_$i51: i1, out_$i36: i32);
  modifies $M.0, $M.16, $M.25, $M.26, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.31, $M.32, $CurrAddr, $M.23, $M.24, $M.4, $M.3;



implementation __team_options_register_loop_$bb8(in_$p0: ref, in_$i2: i64, in_$p5: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$i16: i1, in_$i17: i32, in_$p20: ref, in_$p21: ref, in_$i23: i64, in_$p24: ref, in_$i25: i64, in_$p26: ref, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$i30: i32, in_$i31: i32, in_$p32: ref, in_$i33: i64, in_$i34: i1, in_$p10: ref, in_$i11: i32) returns (out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$i16: i1, out_$i17: i32, out_$p20: ref, out_$p21: ref, out_$i23: i64, out_$p24: ref, out_$i25: i64, out_$p26: ref, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$i30: i32, out_$i31: i32, out_$p32: ref, out_$i33: i64, out_$i34: i1, out_$p10: ref, out_$i11: i32)
{

  entry:
    out_$p12, out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$p20, out_$p21, out_$i23, out_$p24, out_$i25, out_$p26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$p10, out_$i11 := in_$p12, in_$p13, in_$p14, in_$i15, in_$i16, in_$i17, in_$p20, in_$p21, in_$i23, in_$p24, in_$i25, in_$p26, in_$p27, in_$i28, in_$i29, in_$i30, in_$i31, in_$p32, in_$i33, in_$i34, in_$p10, in_$i11;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_57;

  $bb17:
    assume out_$i34 == 1;
    assume {:verifier.code 0} true;
    out_$p10, out_$i11 := out_$p32, out_$i31;
    goto $bb17_dummy;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    out_$i34 := $ult.i64(out_$i33, in_$i2);
    goto corral_source_split_88;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    out_$i33 := $sext.i32.i64(out_$i31);
    goto corral_source_split_87;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref(out_$p10, $mul.ref(1, 64));
    goto corral_source_split_86;

  $bb16:
    assume {:verifier.code 0} true;
    out_$i31 := $add.i32(out_$i11, 1);
    call {:si_unique_call 21} {:cexpr "i"} boogie_si_record_i32(out_$i31);
    goto corral_source_split_85;

  $bb15:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    out_$i30 := out_$i11;
    assume true;
    goto $bb15;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    out_$i29 := $eq.i64(out_$i28, 0);
    goto corral_source_split_81;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    out_$i28 := $p2i.ref.i64(out_$p27);
    goto corral_source_split_80;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    out_$p27 := $load.ref($M.0, out_$p26);
    goto corral_source_split_79;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref(in_$p5, $mul.ref(out_$i25, 8));
    goto corral_source_split_78;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    out_$i25 := $sext.i32.i64(out_$i11);
    goto corral_source_split_77;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p24, out_$p21);
    goto corral_source_split_76;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref(in_$p5, $mul.ref(out_$i23, 8));
    goto corral_source_split_75;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    out_$i23 := $sext.i32.i64(out_$i11);
    goto corral_source_split_74;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    goto corral_source_split_73;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    call {:si_unique_call 20} out_$p21 := kmemdup(out_$p20, 64, 208);
    goto corral_source_split_72;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p20 := $bitcast.ref.ref(out_$p10);
    goto corral_source_split_71;

  $bb11:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    out_$i17 := out_$i11;
    assume true;
    goto $bb11;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    out_$i16 := $ne.i64(out_$i15, 0);
    goto corral_source_split_63;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    out_$i15 := $p2i.ref.i64(out_$p14);
    goto corral_source_split_62;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    call {:si_unique_call 18} out_$p14 := __team_find_option(in_$p0, out_$p13);
    goto corral_source_split_61;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    out_$p13 := $load.ref($M.0, out_$p12);
    goto corral_source_split_60;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(out_$p10, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_59;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb17_dummy:
    call {:si_unique_call 1} out_$p12, out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$p20, out_$p21, out_$i23, out_$p24, out_$i25, out_$p26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$p10, out_$i11 := __team_options_register_loop_$bb8(in_$p0, in_$i2, in_$p5, out_$p12, out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$p20, out_$p21, out_$i23, out_$p24, out_$i25, out_$p26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$p10, out_$i11);
    return;

  exit:
    return;
}



procedure __team_options_register_loop_$bb8(in_$p0: ref, in_$i2: i64, in_$p5: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$i16: i1, in_$i17: i32, in_$p20: ref, in_$p21: ref, in_$i23: i64, in_$p24: ref, in_$i25: i64, in_$p26: ref, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$i30: i32, in_$i31: i32, in_$p32: ref, in_$i33: i64, in_$i34: i1, in_$p10: ref, in_$i11: i32) returns (out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$i16: i1, out_$i17: i32, out_$p20: ref, out_$p21: ref, out_$i23: i64, out_$p24: ref, out_$i25: i64, out_$p26: ref, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$i30: i32, out_$i31: i32, out_$p32: ref, out_$i33: i64, out_$i34: i1, out_$p10: ref, out_$i11: i32);
  modifies $M.0;



implementation __team_options_change_check_loop_$bb4(in_$p1: ref, in_$i11: i64, in_$p14: ref, in_$i15: i8, in_$i16: i1, in_$p17: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$i24: i1, in_$p13: ref) returns (out_$p14: ref, out_$i15: i8, out_$i16: i1, out_$p17: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$i24: i1, out_$p13: ref)
{

  entry:
    out_$p14, out_$i15, out_$i16, out_$p17, out_$p19, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$p13 := in_$p14, in_$i15, in_$i16, in_$p17, in_$p19, in_$p20, in_$p21, in_$p22, in_$i23, in_$i24, in_$p13;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_173;

  $bb9:
    assume out_$i24 == 1;
    assume {:verifier.code 0} true;
    out_$p13 := out_$p20;
    goto $bb9_dummy;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    out_$i24 := $ne.i64(out_$i23, in_$i11);
    goto corral_source_split_188;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    out_$i23 := $p2i.ref.i64(out_$p22);
    goto corral_source_split_187;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(out_$p21, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_186;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    out_$p21 := $bitcast.ref.ref(out_$p20);
    goto corral_source_split_185;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.0, out_$p19);
    goto corral_source_split_184;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref($add.ref(out_$p13, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_183;

  $bb7:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} list_add_tail(out_$p17, in_$p1);
    goto corral_source_split_181;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(out_$p13, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_180;

  $bb6:
    assume out_$i16 == 1;
    goto corral_source_split_179;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    out_$i16 := $trunc.i8.i1(out_$i15);
    goto corral_source_split_177;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    out_$i15 := $load.i8($M.0, out_$p14);
    goto corral_source_split_176;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(out_$p13, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_175;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb9_dummy:
    call {:si_unique_call 1} out_$p14, out_$i15, out_$i16, out_$p17, out_$p19, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$p13 := __team_options_change_check_loop_$bb4(in_$p1, in_$i11, out_$p14, out_$i15, out_$i16, out_$p17, out_$p19, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$p13);
    return;

  exit:
    return;
}



procedure __team_options_change_check_loop_$bb4(in_$p1: ref, in_$i11: i64, in_$p14: ref, in_$i15: i8, in_$i16: i1, in_$p17: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$i24: i1, in_$p13: ref) returns (out_$p14: ref, out_$i15: i8, out_$i16: i1, out_$p17: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$i24: i1, out_$p13: ref);



implementation team_nl_send_options_get_loop_$bb44(in_$p0: ref, in_$i1: i32, in_$i2: i32, in_$p4: ref, in_$p6: ref, in_$i79: i32, in_$i83: i32, in_$i84: i1, in_$i85: i32, in_$p86: ref, in_$p87: ref, in_$i88: i64, in_$i89: i1) returns (out_$i83: i32, out_$i84: i1, out_$i85: i32, out_$p86: ref, out_$p87: ref, out_$i88: i64, out_$i89: i1)
{

  entry:
    out_$i83, out_$i84, out_$i85, out_$p86, out_$p87, out_$i88, out_$i89 := in_$i83, in_$i84, in_$i85, in_$p86, in_$p87, in_$i88, in_$i89;
    goto $bb44, exit;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 70} out_$i83 := __send_and_alloc_skb(in_$p6, in_$p0, in_$i1, in_$p4);
    call {:si_unique_call 71} {:cexpr "err"} boogie_si_record_i32(out_$i83);
    goto corral_source_split_324;

  $bb48:
    assume {:verifier.code 0} true;
    assume out_$i89 == 1;
    goto $bb48_dummy;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    out_$i89 := $eq.i64(out_$i88, 0);
    goto corral_source_split_332;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    out_$i88 := $p2i.ref.i64(out_$p87);
    goto corral_source_split_331;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 72} out_$p87 := nlmsg_put(out_$p86, in_$i1, in_$i2, 3, 0, in_$i79);
    goto corral_source_split_330;

  $bb47:
    assume {:verifier.code 0} true;
    out_$p86 := $load.ref($M.0, in_$p6);
    goto corral_source_split_329;

  $bb46:
    assume !(out_$i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    out_$i85 := out_$i83;
    assume true;
    goto $bb46;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    out_$i84 := $ne.i32(out_$i83, 0);
    goto corral_source_split_325;

  $bb48_dummy:
    call {:si_unique_call 1} out_$i83, out_$i84, out_$i85, out_$p86, out_$p87, out_$i88, out_$i89 := team_nl_send_options_get_loop_$bb44(in_$p0, in_$i1, in_$i2, in_$p4, in_$p6, in_$i79, out_$i83, out_$i84, out_$i85, out_$p86, out_$p87, out_$i88, out_$i89);
    return;

  exit:
    return;
}



procedure team_nl_send_options_get_loop_$bb44(in_$p0: ref, in_$i1: i32, in_$i2: i32, in_$p4: ref, in_$p6: ref, in_$i79: i32, in_$i83: i32, in_$i84: i1, in_$i85: i32, in_$p86: ref, in_$p87: ref, in_$i88: i64, in_$i89: i1) returns (out_$i83: i32, out_$i84: i1, out_$i85: i32, out_$p86: ref, out_$p87: ref, out_$i88: i64, out_$i89: i1);
  modifies $M.0, $CurrAddr, $M.16, $M.25, $M.26, $M.4, $M.3, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.31, $M.32, $M.23, $M.24;



implementation team_nl_send_options_get_loop_$bb23(in_$p0: ref, in_$p6: ref, in_$i41: i64, in_$p46: ref, in_$i47: i32, in_$i48: i1, in_$p49: ref, in_$i50: i32, in_$i51: i32, in_$i62: i32, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$i69: i64, in_$i70: i1, in_$i44: i32, in_$p45: ref, in_$p71: ref) returns (out_$p46: ref, out_$i47: i32, out_$i48: i1, out_$p49: ref, out_$i50: i32, out_$i51: i32, out_$i62: i32, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$i69: i64, out_$i70: i1, out_$i44: i32, out_$p45: ref, out_$p71: ref)
{

  entry:
    out_$p46, out_$i47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i62, out_$p64, out_$p65, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$i44, out_$p45, out_$p71 := in_$p46, in_$i47, in_$i48, in_$p49, in_$i50, in_$i51, in_$i62, in_$p64, in_$p65, in_$p66, in_$p67, in_$p68, in_$i69, in_$i70, in_$i44, in_$p45, in_$p71;
    goto $bb23, exit;

  $bb23:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_278;

  $bb36:
    assume out_$i70 == 1;
    assume {:verifier.code 0} true;
    out_$i44, out_$p45 := out_$i62, out_$p67;
    goto $bb36_dummy;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    out_$p71 := out_$p67;
    assume true;
    goto $bb36;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    out_$i70 := $ne.i64(out_$i69, in_$i41);
    goto corral_source_split_312;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    out_$i69 := $p2i.ref.i64(out_$p68);
    goto corral_source_split_311;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref(out_$p66, $mul.ref($sub.ref(0, 16), 64)), $mul.ref(16, 1));
    goto corral_source_split_310;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref(out_$p66, $mul.ref($sub.ref(0, 16), 64));
    goto corral_source_split_309;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    out_$p66 := $bitcast.ref.ref(out_$p65);
    goto corral_source_split_308;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    out_$p65 := $load.ref($M.0, out_$p64);
    goto corral_source_split_307;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 64)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_306;

  $bb35:
    assume {:verifier.code 0} true;
    out_$i62 := $add.i32(out_$i44, 1);
    call {:si_unique_call 68} {:cexpr "i"} boogie_si_record_i32(out_$i62);
    goto corral_source_split_305;

  $bb26:
    assume !(out_$i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    out_$p49, out_$i50, out_$i51 := out_$p45, out_$i44, out_$i47;
    assume true;
    goto $bb26;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    out_$i48 := $ne.i32(out_$i47, 0);
    goto corral_source_split_282;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} out_$i47 := team_nl_fill_one_option_get(out_$p46, in_$p0, out_$p45);
    call {:si_unique_call 63} {:cexpr "err"} boogie_si_record_i32(out_$i47);
    goto corral_source_split_281;

  $bb24:
    assume {:verifier.code 0} true;
    out_$p46 := $load.ref($M.0, in_$p6);
    goto corral_source_split_280;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb36_dummy:
    call {:si_unique_call 1} out_$p46, out_$i47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i62, out_$p64, out_$p65, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$i44, out_$p45, out_$p71 := team_nl_send_options_get_loop_$bb23(in_$p0, in_$p6, in_$i41, out_$p46, out_$i47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i62, out_$p64, out_$p65, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$i44, out_$p45, out_$p71);
    return;

  exit:
    return;
}



procedure team_nl_send_options_get_loop_$bb23(in_$p0: ref, in_$p6: ref, in_$i41: i64, in_$p46: ref, in_$i47: i32, in_$i48: i1, in_$p49: ref, in_$i50: i32, in_$i51: i32, in_$i62: i32, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$i69: i64, in_$i70: i1, in_$i44: i32, in_$p45: ref, in_$p71: ref) returns (out_$p46: ref, out_$i47: i32, out_$i48: i1, out_$p49: ref, out_$i50: i32, out_$i51: i32, out_$i62: i32, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$i69: i64, out_$i70: i1, out_$i44: i32, out_$p45: ref, out_$p71: ref);
  modifies $M.0, $CurrAddr, $M.16, $M.25, $M.26, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.31, $M.32, $M.23, $M.24, $M.4, $M.3;



implementation team_nl_send_options_get_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$i2: i32, in_$i3: i32, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p15: ref, in_$i16: i32, in_$i17: i1, in_$i18: i32, in_$p14: ref, in_$p20: ref, in_$i21: i32, in_$p22: ref, in_$i23: i64, in_$i24: i1, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$i29: i32, in_$i30: i32, in_$i31: i1, in_$p32: ref, in_$p34: ref, in_$p35: ref, in_$i36: i64, in_$i37: i1, in_$p38: ref, in_$p39: ref, in_$i40: i64, in_$i41: i64, in_$i42: i1, in_$p46: ref, in_$i47: i32, in_$i48: i1, in_$p49: ref, in_$i50: i32, in_$i51: i32, in_$i52: i1, in_$i55: i1, in_$p56: ref, in_$i57: i32, in_$p53: ref, in_$i54: i32, in_$i62: i32, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$i69: i64, in_$i70: i1, in_$i44: i32, in_$p45: ref, in_$p71: ref, in_$p43: ref, in_$p60: ref, in_$i61: i8, in_$p72: ref, in_$p74: ref, in_$i76: i1, in_$p77: ref, in_vslice_dummy_var_40: i32, in_vslice_dummy_var_41: i32) returns (out_$p15: ref, out_$i16: i32, out_$i17: i1, out_$i18: i32, out_$p14: ref, out_$p20: ref, out_$i21: i32, out_$p22: ref, out_$i23: i64, out_$i24: i1, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$i29: i32, out_$i30: i32, out_$i31: i1, out_$p32: ref, out_$p34: ref, out_$p35: ref, out_$i36: i64, out_$i37: i1, out_$p38: ref, out_$p39: ref, out_$i40: i64, out_$i41: i64, out_$i42: i1, out_$p46: ref, out_$i47: i32, out_$i48: i1, out_$p49: ref, out_$i50: i32, out_$i51: i32, out_$i52: i1, out_$i55: i1, out_$p56: ref, out_$i57: i32, out_$p53: ref, out_$i54: i32, out_$i62: i32, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$i69: i64, out_$i70: i1, out_$i44: i32, out_$p45: ref, out_$p71: ref, out_$p43: ref, out_$p60: ref, out_$i61: i8, out_$p72: ref, out_$p74: ref, out_$i76: i1, out_$p77: ref, out_vslice_dummy_var_40: i32, out_vslice_dummy_var_41: i32)
{

  entry:
    out_$p15, out_$i16, out_$i17, out_$i18, out_$p14, out_$p20, out_$i21, out_$p22, out_$i23, out_$i24, out_$p25, out_$p26, out_$p27, out_$p28, out_$i29, out_$i30, out_$i31, out_$p32, out_$p34, out_$p35, out_$i36, out_$i37, out_$p38, out_$p39, out_$i40, out_$i41, out_$i42, out_$p46, out_$i47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i55, out_$p56, out_$i57, out_$p53, out_$i54, out_$i62, out_$p64, out_$p65, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$i44, out_$p45, out_$p71, out_$p43, out_$p60, out_$i61, out_$p72, out_$p74, out_$i76, out_$p77, out_vslice_dummy_var_40, out_vslice_dummy_var_41 := in_$p15, in_$i16, in_$i17, in_$i18, in_$p14, in_$p20, in_$i21, in_$p22, in_$i23, in_$i24, in_$p25, in_$p26, in_$p27, in_$p28, in_$i29, in_$i30, in_$i31, in_$p32, in_$p34, in_$p35, in_$i36, in_$i37, in_$p38, in_$p39, in_$i40, in_$i41, in_$i42, in_$p46, in_$i47, in_$i48, in_$p49, in_$i50, in_$i51, in_$i52, in_$i55, in_$p56, in_$i57, in_$p53, in_$i54, in_$i62, in_$p64, in_$p65, in_$p66, in_$p67, in_$p68, in_$i69, in_$i70, in_$i44, in_$p45, in_$p71, in_$p43, in_$p60, in_$i61, in_$p72, in_$p74, in_$i76, in_$p77, in_vslice_dummy_var_40, in_vslice_dummy_var_41;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb7:
    assume !(out_$i17 == 1);
    assume {:verifier.code 0} true;
    out_$p14 := out_$p15;
    goto $bb7_dummy;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    out_$i18 := out_$i16;
    assume true;
    goto $bb7;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    out_$i17 := $ne.i32(out_$i16, 0);
    goto corral_source_split_238;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} out_$i16 := __send_and_alloc_skb(in_$p6, in_$p0, in_$i1, in_$p4);
    call {:si_unique_call 57} {:cexpr "err"} boogie_si_record_i32(out_$i16);
    goto corral_source_split_237;

  $bb5:
    assume out_$i76 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_236;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    out_$p15, out_$p77 := out_$p60, out_$p22;
    assume true;
    goto $bb5;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    out_$i76 := $trunc.i8.i1(out_$i61);
    goto corral_source_split_303;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} out_vslice_dummy_var_41 := genlmsg_end(out_$p74, out_$p22);
    goto corral_source_split_302;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    out_$p74 := $load.ref($M.0, in_$p6);
    goto corral_source_split_301;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 66} out_vslice_dummy_var_40 := nla_nest_end(out_$p72, out_$p35);
    goto corral_source_split_300;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    out_$p72 := $load.ref($M.0, in_$p6);
    goto corral_source_split_299;

  $bb33:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_298;

  $bb38:
    assume {:verifier.code 0} true;
    out_$p60, out_$i61 := out_$p43, 0;
    goto $bb33;

  $bb32:
    assume {:verifier.code 0} true;
    out_$p60, out_$i61 := out_$p49, 1;
    goto $bb33;

  $bb30:
    assume !(out_$i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    out_$p56, out_$i57 := out_$p22, out_$i51;
    assume true;
    goto $bb30;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    out_$i55 := $eq.i32(out_$i50, 0);
    goto corral_source_split_288;

  $bb27:
    assume out_$i52 == 1;
    goto corral_source_split_287;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    out_$p53, out_$i54 := out_$p22, out_$i51;
    assume true;
    goto $bb27;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    out_$i52 := $eq.i32(out_$i51, $sub.i32(0, 90));
    goto corral_source_split_285;

  $bb25:
    assume out_$i48 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_284;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    out_$p49, out_$i50, out_$i51 := out_$p45, out_$i44, out_$i47;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    out_$i48 := $ne.i32(out_$i47, 0);
    goto corral_source_split_282;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} out_$i47 := team_nl_fill_one_option_get(out_$p46, in_$p0, out_$p45);
    call {:si_unique_call 63} {:cexpr "err"} boogie_si_record_i32(out_$i47);
    goto corral_source_split_281;

  $bb24:
    assume {:verifier.code 0} true;
    out_$p46 := $load.ref($M.0, in_$p6);
    goto corral_source_split_280;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb23:
    call out_$p46, out_$i47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i62, out_$p64, out_$p65, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$i44, out_$p45, out_$p71 := team_nl_send_options_get_loop_$bb23(in_$p0, in_$p6, out_$i41, out_$p46, out_$i47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i62, out_$p64, out_$p65, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$i44, out_$p45, out_$p71);
    goto $bb23_last;

  $bb23_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_278;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    out_$i44, out_$p45 := 0, out_$p14;
    goto $bb23;

  $bb36:
    assume out_$i70 == 1;
    assume {:verifier.code 0} true;
    out_$i44, out_$p45 := out_$i62, out_$p67;
    assume false;
    return;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    out_$p71 := out_$p67;
    assume true;
    goto $bb36, $bb37;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    out_$i70 := $ne.i64(out_$i69, out_$i41);
    goto corral_source_split_312;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    out_$i69 := $p2i.ref.i64(out_$p68);
    goto corral_source_split_311;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref(out_$p66, $mul.ref($sub.ref(0, 16), 64)), $mul.ref(16, 1));
    goto corral_source_split_310;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref(out_$p66, $mul.ref($sub.ref(0, 16), 64));
    goto corral_source_split_309;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    out_$p66 := $bitcast.ref.ref(out_$p65);
    goto corral_source_split_308;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    out_$p65 := $load.ref($M.0, out_$p64);
    goto corral_source_split_307;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 64)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_306;

  $bb35:
    assume {:verifier.code 0} true;
    out_$i62 := $add.i32(out_$i44, 1);
    call {:si_unique_call 68} {:cexpr "i"} boogie_si_record_i32(out_$i62);
    goto corral_source_split_305;

  $bb26:
    assume !(out_$i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb20:
    assume out_$i42 == 1;
    goto corral_source_split_276;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    out_$p43 := out_$p14;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    out_$i42 := $ne.i64(out_$i40, out_$i41);
    goto corral_source_split_274;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    out_$i41 := $p2i.ref.i64(in_$p5);
    goto corral_source_split_273;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    out_$i40 := $p2i.ref.i64(out_$p39);
    goto corral_source_split_272;

  $bb19:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(out_$p14, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_271;

  $bb18:
    assume !(out_$i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    out_$p38 := out_$p22;
    assume true;
    goto $bb18;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    out_$i37 := $eq.i64(out_$i36, 0);
    goto corral_source_split_267;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    out_$i36 := $p2i.ref.i64(out_$p35);
    goto corral_source_split_266;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} out_$p35 := nla_nest_start(out_$p34, 2);
    goto corral_source_split_265;

  $bb16:
    assume {:verifier.code 0} true;
    out_$p34 := $load.ref($M.0, in_$p6);
    goto corral_source_split_264;

  $bb14:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    out_$p32 := out_$p22;
    assume true;
    goto $bb14;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    out_$i31 := $ne.i32(out_$i30, 0);
    goto corral_source_split_258;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} out_$i30 := nla_put_u32(out_$p25, 1, out_$i29);
    call {:si_unique_call 60} {:cexpr "tmp"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_257;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    out_$i29 := $load.i32($M.0, out_$p28);
    goto corral_source_split_256;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(out_$p27, $mul.ref(0, 3176)), $mul.ref(256, 1));
    goto corral_source_split_255;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    out_$p27 := $load.ref($M.0, out_$p26);
    goto corral_source_split_254;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(in_$p0, $mul.ref(0, 984)), $mul.ref(0, 1));
    goto corral_source_split_253;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p25 := $load.ref($M.0, in_$p6);
    goto corral_source_split_252;

  $bb11:
    assume !(out_$i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    out_$i24 := $eq.i64(out_$i23, 0);
    goto corral_source_split_248;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    out_$i23 := $p2i.ref.i64(out_$p22);
    goto corral_source_split_247;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 58} out_$p22 := genlmsg_put(out_$p20, in_$i1, in_$i2, team_nl_family, out_$i21, 2);
    goto corral_source_split_246;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    out_$i21 := $or.i32(in_$i3, 2);
    goto corral_source_split_245;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.0, in_$p6);
    goto corral_source_split_244;

  $bb22:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb21:
    assume {:verifier.code 0} true;
    assume !(out_$i42 == 1);
    goto $bb22;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    out_$p43 := out_$p71;
    goto $bb22;

  $bb37:
    assume !(out_$i70 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_314;

  $bb7_dummy:
    call {:si_unique_call 1} out_$p15, out_$i16, out_$i17, out_$i18, out_$p14, out_$p20, out_$i21, out_$p22, out_$i23, out_$i24, out_$p25, out_$p26, out_$p27, out_$p28, out_$i29, out_$i30, out_$i31, out_$p32, out_$p34, out_$p35, out_$i36, out_$i37, out_$p38, out_$p39, out_$i40, out_$i41, out_$i42, out_$p46, out_$i47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i55, out_$p56, out_$i57, out_$p53, out_$i54, out_$i62, out_$p64, out_$p65, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$i44, out_$p45, out_$p71, out_$p43, out_$p60, out_$i61, out_$p72, out_$p74, out_$i76, out_$p77, out_vslice_dummy_var_40, out_vslice_dummy_var_41 := team_nl_send_options_get_loop_$bb4(in_$p0, in_$i1, in_$i2, in_$i3, in_$p4, in_$p5, in_$p6, out_$p15, out_$i16, out_$i17, out_$i18, out_$p14, out_$p20, out_$i21, out_$p22, out_$i23, out_$i24, out_$p25, out_$p26, out_$p27, out_$p28, out_$i29, out_$i30, out_$i31, out_$p32, out_$p34, out_$p35, out_$i36, out_$i37, out_$p38, out_$p39, out_$i40, out_$i41, out_$i42, out_$p46, out_$i47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i55, out_$p56, out_$i57, out_$p53, out_$i54, out_$i62, out_$p64, out_$p65, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$i44, out_$p45, out_$p71, out_$p43, out_$p60, out_$i61, out_$p72, out_$p74, out_$i76, out_$p77, out_vslice_dummy_var_40, out_vslice_dummy_var_41);
    return;

  exit:
    return;
}



procedure team_nl_send_options_get_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$i2: i32, in_$i3: i32, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p15: ref, in_$i16: i32, in_$i17: i1, in_$i18: i32, in_$p14: ref, in_$p20: ref, in_$i21: i32, in_$p22: ref, in_$i23: i64, in_$i24: i1, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$i29: i32, in_$i30: i32, in_$i31: i1, in_$p32: ref, in_$p34: ref, in_$p35: ref, in_$i36: i64, in_$i37: i1, in_$p38: ref, in_$p39: ref, in_$i40: i64, in_$i41: i64, in_$i42: i1, in_$p46: ref, in_$i47: i32, in_$i48: i1, in_$p49: ref, in_$i50: i32, in_$i51: i32, in_$i52: i1, in_$i55: i1, in_$p56: ref, in_$i57: i32, in_$p53: ref, in_$i54: i32, in_$i62: i32, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$i69: i64, in_$i70: i1, in_$i44: i32, in_$p45: ref, in_$p71: ref, in_$p43: ref, in_$p60: ref, in_$i61: i8, in_$p72: ref, in_$p74: ref, in_$i76: i1, in_$p77: ref, in_vslice_dummy_var_40: i32, in_vslice_dummy_var_41: i32) returns (out_$p15: ref, out_$i16: i32, out_$i17: i1, out_$i18: i32, out_$p14: ref, out_$p20: ref, out_$i21: i32, out_$p22: ref, out_$i23: i64, out_$i24: i1, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$i29: i32, out_$i30: i32, out_$i31: i1, out_$p32: ref, out_$p34: ref, out_$p35: ref, out_$i36: i64, out_$i37: i1, out_$p38: ref, out_$p39: ref, out_$i40: i64, out_$i41: i64, out_$i42: i1, out_$p46: ref, out_$i47: i32, out_$i48: i1, out_$p49: ref, out_$i50: i32, out_$i51: i32, out_$i52: i1, out_$i55: i1, out_$p56: ref, out_$i57: i32, out_$p53: ref, out_$i54: i32, out_$i62: i32, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$i69: i64, out_$i70: i1, out_$i44: i32, out_$p45: ref, out_$p71: ref, out_$p43: ref, out_$p60: ref, out_$i61: i8, out_$p72: ref, out_$p74: ref, out_$i76: i1, out_$p77: ref, out_vslice_dummy_var_40: i32, out_vslice_dummy_var_41: i32);
  modifies $M.0, $CurrAddr, $M.16, $M.25, $M.26, $M.4, $M.3, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.31, $M.32, $M.23, $M.24;



implementation team_nl_fill_one_option_get_loop_$bb73()
{

  entry:
    goto $bb73, exit;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb73_dummy;

  $bb73_dummy:
    call {:si_unique_call 1} team_nl_fill_one_option_get_loop_$bb73();
    return;

  exit:
    return;
}



procedure team_nl_fill_one_option_get_loop_$bb73();



implementation ldv_set_remove_loop_$bb17(in_$i20: i32, in_$i21: i64, in_$p22: ref, in_$p23: ref, in_$i24: i32, in_$i25: i64, in_$p26: ref, in_$i27: i32, in_$i28: i32, in_$i29: i1) returns (out_$i20: i32, out_$i21: i64, out_$p22: ref, out_$p23: ref, out_$i24: i32, out_$i25: i64, out_$p26: ref, out_$i27: i32, out_$i28: i32, out_$i29: i1)
{

  entry:
    out_$i20, out_$i21, out_$p22, out_$p23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29 := in_$i20, in_$i21, in_$p22, in_$p23, in_$i24, in_$i25, in_$p26, in_$i27, in_$i28, in_$i29;
    goto $bb17, exit;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_629;

  $bb21:
    assume out_$i29 == 1;
    assume {:verifier.code 0} true;
    out_$i20 := out_$i27;
    goto $bb21_dummy;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    out_$i29 := $slt.i32(out_$i27, out_$i28);
    goto corral_source_split_640;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    out_$i28 := $M.3;
    goto corral_source_split_639;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    out_$i27 := $add.i32(out_$i20, 1);
    call {:si_unique_call 150} {:cexpr "i"} boogie_si_record_i32(out_$i27);
    goto corral_source_split_638;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, out_$p26, out_$p23);
    goto corral_source_split_637;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(out_$i25, 8));
    goto corral_source_split_636;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    out_$i25 := $sext.i32.i64(out_$i24);
    goto corral_source_split_635;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    out_$i24 := $sub.i32(out_$i20, 1);
    goto corral_source_split_634;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    out_$p23 := $load.ref($M.4, out_$p22);
    goto corral_source_split_633;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(out_$i21, 8));
    goto corral_source_split_632;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i21 := $sext.i32.i64(out_$i20);
    goto corral_source_split_631;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb21_dummy:
    call {:si_unique_call 1} out_$i20, out_$i21, out_$p22, out_$p23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29 := ldv_set_remove_loop_$bb17(out_$i20, out_$i21, out_$p22, out_$p23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29);
    return;

  exit:
    return;
}



procedure ldv_set_remove_loop_$bb17(in_$i20: i32, in_$i21: i64, in_$p22: ref, in_$p23: ref, in_$i24: i32, in_$i25: i64, in_$p26: ref, in_$i27: i32, in_$i28: i32, in_$i29: i1) returns (out_$i20: i32, out_$i21: i64, out_$p22: ref, out_$p23: ref, out_$i24: i32, out_$i25: i64, out_$p26: ref, out_$i27: i32, out_$i28: i32, out_$i29: i1);
  modifies $M.4;



implementation ldv_set_remove_loop_$bb4(in_$p1: ref, in_$i4: i32, in_$i6: i64, in_$p7: ref, in_$p8: ref, in_$i9: i64, in_$i10: i64, in_$i11: i1, in_$i12: i32, in_$i13: i32, in_$i14: i32, in_$i15: i1) returns (out_$i4: i32, out_$i6: i64, out_$p7: ref, out_$p8: ref, out_$i9: i64, out_$i10: i64, out_$i11: i1, out_$i12: i32, out_$i13: i32, out_$i14: i32, out_$i15: i1)
{

  entry:
    out_$i4, out_$i6, out_$p7, out_$p8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15 := in_$i4, in_$i6, in_$p7, in_$p8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i15;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_602;

  $bb11:
    assume out_$i15 == 1;
    assume {:verifier.code 0} true;
    out_$i4 := out_$i13;
    goto $bb11_dummy;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    out_$i15 := $slt.i32(out_$i13, out_$i14);
    goto corral_source_split_620;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    out_$i14 := $M.3;
    goto corral_source_split_619;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i13 := $add.i32(out_$i4, 1);
    call {:si_unique_call 148} {:cexpr "i"} boogie_si_record_i32(out_$i13);
    goto corral_source_split_618;

  $bb9:
    assume !(out_$i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    out_$i12 := out_$i4;
    assume true;
    goto $bb9;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    out_$i11 := $eq.i64(out_$i9, out_$i10);
    goto corral_source_split_609;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    out_$i10 := $p2i.ref.i64(in_$p1);
    goto corral_source_split_608;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    out_$i9 := $p2i.ref.i64(out_$p8);
    goto corral_source_split_607;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    out_$p8 := $load.ref($M.4, out_$p7);
    goto corral_source_split_606;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(out_$i6, 8));
    goto corral_source_split_605;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i6 := $sext.i32.i64(out_$i4);
    goto corral_source_split_604;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb11_dummy:
    call {:si_unique_call 1} out_$i4, out_$i6, out_$p7, out_$p8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15 := ldv_set_remove_loop_$bb4(in_$p1, out_$i4, out_$i6, out_$p7, out_$p8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15);
    return;

  exit:
    return;
}



procedure ldv_set_remove_loop_$bb4(in_$p1: ref, in_$i4: i32, in_$i6: i64, in_$p7: ref, in_$p8: ref, in_$i9: i64, in_$i10: i64, in_$i11: i1, in_$i12: i32, in_$i13: i32, in_$i14: i32, in_$i15: i1) returns (out_$i4: i32, out_$i6: i64, out_$p7: ref, out_$p8: ref, out_$i9: i64, out_$i10: i64, out_$i11: i1, out_$i12: i32, out_$i13: i32, out_$i14: i32, out_$i15: i1);



implementation ldv_set_add_loop_$bb4(in_$p1: ref, in_$i4: i32, in_$i5: i64, in_$p6: ref, in_$p7: ref, in_$i8: i64, in_$i9: i64, in_$i10: i1, in_$i11: i32, in_$i12: i32, in_$i13: i1) returns (out_$i4: i32, out_$i5: i64, out_$p6: ref, out_$p7: ref, out_$i8: i64, out_$i9: i64, out_$i10: i1, out_$i11: i32, out_$i12: i32, out_$i13: i1)
{

  entry:
    out_$i4, out_$i5, out_$p6, out_$p7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13 := in_$i4, in_$i5, in_$p6, in_$p7, in_$i8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i13;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_822;

  $bb12:
    assume out_$i13 == 1;
    assume {:verifier.code 0} true;
    out_$i4 := out_$i11;
    goto $bb12_dummy;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    out_$i13 := $slt.i32(out_$i11, out_$i12);
    goto corral_source_split_840;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    out_$i12 := $M.3;
    goto corral_source_split_839;

  $bb11:
    assume {:verifier.code 0} true;
    out_$i11 := $add.i32(out_$i4, 1);
    call {:si_unique_call 219} {:cexpr "i"} boogie_si_record_i32(out_$i11);
    goto corral_source_split_838;

  $bb9:
    assume !(out_$i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    out_$i10 := $eq.i64(out_$i8, out_$i9);
    goto corral_source_split_829;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    out_$i9 := $p2i.ref.i64(in_$p1);
    goto corral_source_split_828;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    out_$i8 := $p2i.ref.i64(out_$p7);
    goto corral_source_split_827;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    out_$p7 := $load.ref($M.4, out_$p6);
    goto corral_source_split_826;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    out_$p6 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(out_$i5, 8));
    goto corral_source_split_825;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i5 := $sext.i32.i64(out_$i4);
    goto corral_source_split_824;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb12_dummy:
    call {:si_unique_call 1} out_$i4, out_$i5, out_$p6, out_$p7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13 := ldv_set_add_loop_$bb4(in_$p1, out_$i4, out_$i5, out_$p6, out_$p7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13);
    return;

  exit:
    return;
}



procedure ldv_set_add_loop_$bb4(in_$p1: ref, in_$i4: i32, in_$i5: i64, in_$p6: ref, in_$p7: ref, in_$i8: i64, in_$i9: i64, in_$i10: i1, in_$i11: i32, in_$i12: i32, in_$i13: i1) returns (out_$i4: i32, out_$i5: i64, out_$p6: ref, out_$p7: ref, out_$i8: i64, out_$i9: i64, out_$i10: i1, out_$i11: i32, out_$i12: i32, out_$i13: i1);



implementation __team_find_option_loop_$bb4(in_$p1: ref, in_$i9: i64, in_$p12: ref, in_$p13: ref, in_$i14: i32, in_$i15: i1, in_$p16: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$i24: i1, in_$p11: ref) returns (out_$p12: ref, out_$p13: ref, out_$i14: i32, out_$i15: i1, out_$p16: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$i24: i1, out_$p11: ref)
{

  entry:
    out_$p12, out_$p13, out_$i14, out_$i15, out_$p16, out_$p19, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$p11 := in_$p12, in_$p13, in_$i14, in_$i15, in_$p16, in_$p19, in_$p20, in_$p21, in_$p22, in_$i23, in_$i24, in_$p11;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_945;

  $bb10:
    assume out_$i24 == 1;
    assume {:verifier.code 0} true;
    out_$p11 := out_$p20;
    goto $bb10_dummy;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    out_$i24 := $ne.i64(out_$i23, in_$i9);
    goto corral_source_split_961;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    out_$i23 := $p2i.ref.i64(out_$p22);
    goto corral_source_split_960;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(out_$p21, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_959;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    out_$p21 := $bitcast.ref.ref(out_$p20);
    goto corral_source_split_958;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.0, out_$p19);
    goto corral_source_split_957;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref($add.ref(out_$p11, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_956;

  $bb7:
    assume !(out_$i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    out_$p16 := out_$p11;
    assume true;
    goto $bb7;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    out_$i15 := $eq.i32(out_$i14, 0);
    goto corral_source_split_950;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 254} out_$i14 := strcmp(out_$p13, in_$p1);
    call {:si_unique_call 255} {:cexpr "tmp"} boogie_si_record_i32(out_$i14);
    goto corral_source_split_949;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    out_$p13 := $load.ref($M.0, out_$p12);
    goto corral_source_split_948;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(out_$p11, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_947;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p12, out_$p13, out_$i14, out_$i15, out_$p16, out_$p19, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$p11 := __team_find_option_loop_$bb4(in_$p1, in_$i9, out_$p12, out_$p13, out_$i14, out_$i15, out_$p16, out_$p19, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$p11);
    return;

  exit:
    return;
}



procedure __team_find_option_loop_$bb4(in_$p1: ref, in_$i9: i64, in_$p12: ref, in_$p13: ref, in_$i14: i32, in_$i15: i1, in_$p16: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$i24: i1, in_$p11: ref) returns (out_$p12: ref, out_$p13: ref, out_$i14: i32, out_$i15: i1, out_$p16: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$i24: i1, out_$p11: ref);



implementation __team_option_inst_add_option_loop_$bb11(in_$p0: ref, in_$p1: ref, in_$i16: i64, in_$i19: i32, in_$i20: i1, in_$i21: i32, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$p18: ref) returns (out_$i19: i32, out_$i20: i1, out_$i21: i32, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$p18: ref)
{

  entry:
    out_$i19, out_$i20, out_$i21, out_$p23, out_$p24, out_$p25, out_$p26, out_$p27, out_$i28, out_$i29, out_$p18 := in_$i19, in_$i20, in_$i21, in_$p23, in_$p24, in_$p25, in_$p26, in_$p27, in_$i28, in_$i29, in_$p18;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_994;

  $bb16:
    assume out_$i29 == 1;
    assume {:verifier.code 0} true;
    out_$p18 := out_$p26;
    goto $bb16_dummy;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    out_$i29 := $ne.i64(out_$i28, in_$i16);
    goto corral_source_split_1007;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    out_$i28 := $p2i.ref.i64(out_$p27);
    goto corral_source_split_1006;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p25, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_1005;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref(out_$p25, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_1004;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    out_$p25 := $bitcast.ref.ref(out_$p24);
    goto corral_source_split_1003;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    out_$p24 := $load.ref($M.0, out_$p23);
    goto corral_source_split_1002;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref($add.ref(out_$p18, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_1001;

  $bb14:
    assume !(out_$i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    out_$i21 := out_$i19;
    assume true;
    goto $bb14;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    out_$i20 := $ne.i32(out_$i19, 0);
    goto corral_source_split_997;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 262} out_$i19 := __team_option_inst_add(in_$p0, in_$p1, out_$p18);
    call {:si_unique_call 263} {:cexpr "err"} boogie_si_record_i32(out_$i19);
    goto corral_source_split_996;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb16_dummy:
    call {:si_unique_call 1} out_$i19, out_$i20, out_$i21, out_$p23, out_$p24, out_$p25, out_$p26, out_$p27, out_$i28, out_$i29, out_$p18 := __team_option_inst_add_option_loop_$bb11(in_$p0, in_$p1, in_$i16, out_$i19, out_$i20, out_$i21, out_$p23, out_$p24, out_$p25, out_$p26, out_$p27, out_$i28, out_$i29, out_$p18);
    return;

  exit:
    return;
}



procedure __team_option_inst_add_option_loop_$bb11(in_$p0: ref, in_$p1: ref, in_$i16: i64, in_$i19: i32, in_$i20: i1, in_$i21: i32, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$p18: ref) returns (out_$i19: i32, out_$i20: i1, out_$i21: i32, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$p18: ref);
  modifies $M.0, $M.16, $M.25, $M.26, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.31, $M.32, $CurrAddr, $M.23, $M.24, $M.4, $M.3;



implementation __team_option_inst_del_option_loop_$bb4(in_$p1: ref, in_$i13: i64, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$i20: i64, in_$i21: i1, in_$p23: ref, in_$p24: ref, in_$p26: ref, in_$i27: i64, in_$i28: i1, in_$p15: ref, in_$p16: ref) returns (out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$i20: i64, out_$i21: i1, out_$p23: ref, out_$p24: ref, out_$p26: ref, out_$i27: i64, out_$i28: i1, out_$p15: ref, out_$p16: ref)
{

  entry:
    out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$p23, out_$p24, out_$p26, out_$i27, out_$i28, out_$p15, out_$p16 := in_$p17, in_$p18, in_$i19, in_$i20, in_$i21, in_$p23, in_$p24, in_$p26, in_$i27, in_$i28, in_$p15, in_$p16;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1031;

  $bb9:
    assume out_$i28 == 1;
    assume {:verifier.code 0} true;
    out_$p15, out_$p16 := out_$p24, out_$p15;
    goto $bb9_dummy;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    out_$i28 := $ne.i64(out_$i27, in_$i13);
    goto corral_source_split_1047;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    out_$i27 := $p2i.ref.i64(out_$p26);
    goto corral_source_split_1046;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(out_$p15, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_1045;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    goto corral_source_split_1044;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    out_$p24 := $load.ref($M.0, out_$p23);
    goto corral_source_split_1043;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref($add.ref(out_$p15, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1042;

  $bb7:
    assume !(out_$i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 265} __team_option_inst_del(out_$p16);
    goto corral_source_split_1040;

  $bb6:
    assume out_$i21 == 1;
    goto corral_source_split_1039;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    out_$i21 := $eq.i64(out_$i19, out_$i20);
    goto corral_source_split_1037;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    out_$i20 := $p2i.ref.i64(in_$p1);
    goto corral_source_split_1036;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    out_$i19 := $p2i.ref.i64(out_$p18);
    goto corral_source_split_1035;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.0, out_$p17);
    goto corral_source_split_1034;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(out_$p16, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_1033;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb9_dummy:
    call {:si_unique_call 1} out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$p23, out_$p24, out_$p26, out_$i27, out_$i28, out_$p15, out_$p16 := __team_option_inst_del_option_loop_$bb4(in_$p1, in_$i13, out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$p23, out_$p24, out_$p26, out_$i27, out_$i28, out_$p15, out_$p16);
    return;

  exit:
    return;
}



procedure __team_option_inst_del_option_loop_$bb4(in_$p1: ref, in_$i13: i64, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$i20: i64, in_$i21: i1, in_$p23: ref, in_$p24: ref, in_$p26: ref, in_$i27: i64, in_$i28: i1, in_$p15: ref, in_$p16: ref) returns (out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$i20: i64, out_$i21: i1, out_$p23: ref, out_$p24: ref, out_$p26: ref, out_$i27: i64, out_$i28: i1, out_$p15: ref, out_$p16: ref);



implementation __team_option_inst_add_loop_$bb7(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i6: i32, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$i12: i1, in_$p14: ref, in_$p16: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$i26: i1, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$i30: i32, in_$i31: i1, in_$i32: i32, in_$i33: i32, in_$i34: i1, in_$i8: i32) returns (out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$i12: i1, out_$p14: ref, out_$p16: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$i26: i1, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$i30: i32, out_$i31: i1, out_$i32: i32, out_$i33: i32, out_$i34: i1, out_$i8: i32)
{

  entry:
    out_$p9, out_$p10, out_$i11, out_$i12, out_$p14, out_$p16, out_$p18, out_$p19, out_$p20, out_$p21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p27, out_$p28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i8 := in_$p9, in_$p10, in_$i11, in_$i12, in_$p14, in_$p16, in_$p18, in_$p19, in_$p20, in_$p21, in_$p22, in_$p23, in_$p24, in_$i25, in_$i26, in_$p27, in_$p28, in_$p29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i8;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_1071;

  $bb19:
    assume out_$i34 == 1;
    assume {:verifier.code 0} true;
    out_$i8 := out_$i33;
    goto $bb19_dummy;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    out_$i34 := $ult.i32(out_$i33, in_$i6);
    goto corral_source_split_1109;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i33 := $add.i32(out_$i8, 1);
    call {:si_unique_call 274} {:cexpr "i"} boogie_si_record_i32(out_$i33);
    goto corral_source_split_1108;

  $bb14:
    assume !(out_$i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb16:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    out_$i32 := out_$i30;
    assume true;
    goto $bb16;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    out_$i31 := $ne.i32(out_$i30, 0);
    goto corral_source_split_1104;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p10, $mul.ref(0, 64)), $mul.ref(40, 1));
    call {:si_unique_call 272} out_$i30 := devirtbounce.3(out_$p28, in_$p0, out_$p29);
    call {:si_unique_call 273} {:cexpr "err"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_1103;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    out_$p28 := $load.ref($M.0, out_$p27);
    goto corral_source_split_1102;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(in_$p1, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_1101;

  $bb13:
    assume out_$i26 == 1;
    goto corral_source_split_1100;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    out_$i26 := $ne.i64(out_$i25, 0);
    goto corral_source_split_1098;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    out_$i25 := $p2i.ref.i64(out_$p24);
    goto corral_source_split_1097;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    out_$p24 := $load.ref($M.0, out_$p23);
    goto corral_source_split_1096;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(in_$p1, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_1095;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} list_add_tail(out_$p21, out_$p22);
    goto corral_source_split_1094;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(in_$p0, $mul.ref(0, 984)), $mul.ref(352, 1));
    goto corral_source_split_1093;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p10, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_1092;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p20, 0);
    goto corral_source_split_1091;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(out_$p10, $mul.ref(0, 64)), $mul.ref(57, 1));
    goto corral_source_split_1090;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p19, 1);
    goto corral_source_split_1089;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(out_$p10, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_1088;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p18, out_$i8);
    goto corral_source_split_1087;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref($add.ref(out_$p10, $mul.ref(0, 64)), $mul.ref(40, 1)), $mul.ref(0, 1));
    goto corral_source_split_1086;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p16, in_$p2);
    goto corral_source_split_1085;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref($add.ref(out_$p10, $mul.ref(0, 64)), $mul.ref(40, 1)), $mul.ref(8, 1));
    goto corral_source_split_1084;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p14, in_$p1);
    goto corral_source_split_1083;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(out_$p10, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_1082;

  $bb10:
    assume !(out_$i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    out_$i12 := $eq.i64(out_$i11, 0);
    goto corral_source_split_1076;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    out_$i11 := $p2i.ref.i64(out_$p10);
    goto corral_source_split_1075;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    out_$p10 := $bitcast.ref.ref(out_$p9);
    goto corral_source_split_1074;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 270} out_$p9 := kmalloc(64, 208);
    goto corral_source_split_1073;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb19_dummy:
    call {:si_unique_call 1} out_$p9, out_$p10, out_$i11, out_$i12, out_$p14, out_$p16, out_$p18, out_$p19, out_$p20, out_$p21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p27, out_$p28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i8 := __team_option_inst_add_loop_$bb7(in_$p0, in_$p1, in_$p2, in_$i6, out_$p9, out_$p10, out_$i11, out_$i12, out_$p14, out_$p16, out_$p18, out_$p19, out_$p20, out_$p21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p27, out_$p28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i8);
    return;

  exit:
    return;
}



procedure __team_option_inst_add_loop_$bb7(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i6: i32, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$i12: i1, in_$p14: ref, in_$p16: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$i26: i1, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$i30: i32, in_$i31: i1, in_$i32: i32, in_$i33: i32, in_$i34: i1, in_$i8: i32) returns (out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$i12: i1, out_$p14: ref, out_$p16: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$i26: i1, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$i30: i32, out_$i31: i1, out_$i32: i32, out_$i33: i32, out_$i34: i1, out_$i8: i32);
  modifies $M.0, $M.16, $M.25, $M.26, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.31, $M.32, $CurrAddr, $M.23, $M.24, $M.4, $M.3;



implementation __team_options_unregister_loop_$bb4(in_$p0: ref, in_$i2: i64, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$i9: i64, in_$i10: i1, in_$p11: ref, in_$p12: ref, in_$i13: i32, in_$p14: ref, in_$i15: i64, in_$i16: i1, in_$i4: i32, in_$p5: ref) returns (out_$p6: ref, out_$p7: ref, out_$p8: ref, out_$i9: i64, out_$i10: i1, out_$p11: ref, out_$p12: ref, out_$i13: i32, out_$p14: ref, out_$i15: i64, out_$i16: i1, out_$i4: i32, out_$p5: ref)
{

  entry:
    out_$p6, out_$p7, out_$p8, out_$i9, out_$i10, out_$p11, out_$p12, out_$i13, out_$p14, out_$i15, out_$i16, out_$i4, out_$p5 := in_$p6, in_$p7, in_$p8, in_$i9, in_$i10, in_$p11, in_$p12, in_$i13, in_$p14, in_$i15, in_$i16, in_$i4, in_$p5;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1139;

  $bb9:
    assume out_$i16 == 1;
    assume {:verifier.code 0} true;
    out_$i4, out_$p5 := out_$i13, out_$p14;
    goto $bb9_dummy;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    out_$i16 := $ult.i64(out_$i15, in_$i2);
    goto corral_source_split_1157;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    out_$i15 := $sext.i32.i64(out_$i13);
    goto corral_source_split_1156;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref(out_$p5, $mul.ref(1, 64));
    goto corral_source_split_1155;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i13 := $add.i32(out_$i4, 1);
    call {:si_unique_call 293} {:cexpr "i"} boogie_si_record_i32(out_$i13);
    goto corral_source_split_1154;

  $bb7:
    assume !(out_$i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 292} kfree(out_$p12);
    goto corral_source_split_1152;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    out_$p12 := $bitcast.ref.ref(out_$p8);
    goto corral_source_split_1151;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 291} list_del(out_$p11);
    goto corral_source_split_1150;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(out_$p8, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_1149;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} __team_option_inst_del_option(in_$p0, out_$p8);
    goto corral_source_split_1148;

  $bb6:
    assume out_$i10 == 1;
    goto corral_source_split_1147;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    out_$i10 := $ne.i64(out_$i9, 0);
    goto corral_source_split_1145;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    out_$i9 := $p2i.ref.i64(out_$p8);
    goto corral_source_split_1144;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} out_$p8 := __team_find_option(in_$p0, out_$p7);
    goto corral_source_split_1143;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    out_$p7 := $load.ref($M.0, out_$p6);
    goto corral_source_split_1142;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p6 := $add.ref($add.ref(out_$p5, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_1141;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb9_dummy:
    call {:si_unique_call 1} out_$p6, out_$p7, out_$p8, out_$i9, out_$i10, out_$p11, out_$p12, out_$i13, out_$p14, out_$i15, out_$i16, out_$i4, out_$p5 := __team_options_unregister_loop_$bb4(in_$p0, in_$i2, out_$p6, out_$p7, out_$p8, out_$i9, out_$i10, out_$p11, out_$p12, out_$i13, out_$p14, out_$i15, out_$i16, out_$i4, out_$p5);
    return;

  exit:
    return;
}



procedure __team_options_unregister_loop_$bb4(in_$p0: ref, in_$i2: i64, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$i9: i64, in_$i10: i1, in_$p11: ref, in_$p12: ref, in_$i13: i32, in_$p14: ref, in_$i15: i64, in_$i16: i1, in_$i4: i32, in_$p5: ref) returns (out_$p6: ref, out_$p7: ref, out_$p8: ref, out_$i9: i64, out_$i10: i1, out_$p11: ref, out_$p12: ref, out_$i13: i32, out_$p14: ref, out_$i15: i64, out_$i16: i1, out_$i4: i32, out_$p5: ref);



implementation is_good_mode_name_loop_$bb4(in_$i5: i8, in_$i6: i32, in_$i7: i64, in_$p8: ref, in_$i9: i8, in_$i10: i32, in_$i11: i32, in_$i12: i1, in_$i13: i8, in_$i14: i32, in_$i15: i64, in_$p16: ref, in_$i17: i8, in_$i18: i32, in_$i19: i32, in_$i20: i1, in_$i21: i8, in_$i22: i32, in_$i23: i1, in_$p25: ref, in_$i26: i8, in_$i27: i32, in_$i28: i1, in_$p4: ref) returns (out_$i5: i8, out_$i6: i32, out_$i7: i64, out_$p8: ref, out_$i9: i8, out_$i10: i32, out_$i11: i32, out_$i12: i1, out_$i13: i8, out_$i14: i32, out_$i15: i64, out_$p16: ref, out_$i17: i8, out_$i18: i32, out_$i19: i32, out_$i20: i1, out_$i21: i8, out_$i22: i32, out_$i23: i1, out_$p25: ref, out_$i26: i8, out_$i27: i32, out_$i28: i1, out_$p4: ref)
{

  entry:
    out_$i5, out_$i6, out_$i7, out_$p8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$p16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$p25, out_$i26, out_$i27, out_$i28, out_$p4 := in_$i5, in_$i6, in_$i7, in_$p8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i15, in_$p16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$p25, in_$i26, in_$i27, in_$i28, in_$p4;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1222;

  $bb15:
    assume out_$i28 == 1;
    assume {:verifier.code 0} true;
    out_$p4 := out_$p25;
    goto $bb15_dummy;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    out_$i28 := $ne.i32(out_$i27, 0);
    goto corral_source_split_1255;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    out_$i27 := $sext.i8.i32(out_$i26);
    goto corral_source_split_1254;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i8($M.0, out_$p25);
    goto corral_source_split_1253;

  $bb14:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref(out_$p4, $mul.ref(1, 1));
    goto corral_source_split_1252;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i12 == 1);
    goto $bb8;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i20 == 1);
    goto $bb8;

  $bb12:
    assume {:verifier.code 0} true;
    assume !(out_$i23 == 1);
    goto $bb8;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    out_$i23 := $ne.i32(out_$i22, 95);
    goto corral_source_split_1246;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    out_$i22 := $sext.i8.i32(out_$i21);
    goto corral_source_split_1245;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    out_$i21 := $load.i8($M.0, out_$p4);
    goto corral_source_split_1244;

  $bb9:
    assume out_$i20 == 1;
    goto corral_source_split_1243;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    out_$i20 := $eq.i32(out_$i19, 0);
    goto corral_source_split_1241;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    out_$i19 := $and.i32(out_$i18, 4);
    goto corral_source_split_1240;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    out_$i18 := $zext.i8.i32(out_$i17);
    goto corral_source_split_1239;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    out_$i17 := $load.i8($M.0, out_$p16);
    goto corral_source_split_1238;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(_ctype, $mul.ref(0, 0)), $mul.ref(out_$i15, 1));
    goto corral_source_split_1237;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    out_$i15 := $sext.i32.i64(out_$i14);
    goto corral_source_split_1236;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    out_$i14 := $zext.i8.i32(out_$i13);
    goto corral_source_split_1235;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    out_$i13 := $load.i8($M.0, out_$p4);
    goto corral_source_split_1234;

  $bb6:
    assume out_$i12 == 1;
    goto corral_source_split_1233;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    out_$i12 := $eq.i32(out_$i11, 0);
    goto corral_source_split_1231;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    out_$i11 := $and.i32(out_$i10, 3);
    goto corral_source_split_1230;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    out_$i10 := $zext.i8.i32(out_$i9);
    goto corral_source_split_1229;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    out_$i9 := $load.i8($M.0, out_$p8);
    goto corral_source_split_1228;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref($add.ref(_ctype, $mul.ref(0, 0)), $mul.ref(out_$i7, 1));
    goto corral_source_split_1227;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    out_$i7 := $sext.i32.i64(out_$i6);
    goto corral_source_split_1226;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    out_$i6 := $zext.i8.i32(out_$i5);
    goto corral_source_split_1225;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i5 := $load.i8($M.0, out_$p4);
    goto corral_source_split_1224;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb15_dummy:
    call {:si_unique_call 1} out_$i5, out_$i6, out_$i7, out_$p8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$p16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$p25, out_$i26, out_$i27, out_$i28, out_$p4 := is_good_mode_name_loop_$bb4(out_$i5, out_$i6, out_$i7, out_$p8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$p16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$p25, out_$i26, out_$i27, out_$i28, out_$p4);
    return;

  exit:
    return;
}



procedure is_good_mode_name_loop_$bb4(in_$i5: i8, in_$i6: i32, in_$i7: i64, in_$p8: ref, in_$i9: i8, in_$i10: i32, in_$i11: i32, in_$i12: i1, in_$i13: i8, in_$i14: i32, in_$i15: i64, in_$p16: ref, in_$i17: i8, in_$i18: i32, in_$i19: i32, in_$i20: i1, in_$i21: i8, in_$i22: i32, in_$i23: i1, in_$p25: ref, in_$i26: i8, in_$i27: i32, in_$i28: i1, in_$p4: ref) returns (out_$i5: i8, out_$i6: i32, out_$i7: i64, out_$p8: ref, out_$i9: i8, out_$i10: i32, out_$i11: i32, out_$i12: i1, out_$i13: i8, out_$i14: i32, out_$i15: i64, out_$p16: ref, out_$i17: i8, out_$i18: i32, out_$i19: i32, out_$i20: i1, out_$i21: i8, out_$i22: i32, out_$i23: i1, out_$p25: ref, out_$i26: i8, out_$i27: i32, out_$i28: i1, out_$p4: ref);



implementation __find_mode_loop_$bb4(in_$p0: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$i11: i32, in_$i12: i1, in_$p13: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$i21: i1, in_$p6: ref) returns (out_$p7: ref, out_$p8: ref, out_$p9: ref, out_$p10: ref, out_$i11: i32, out_$i12: i1, out_$p13: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$i21: i1, out_$p6: ref)
{

  entry:
    out_$p7, out_$p8, out_$p9, out_$p10, out_$i11, out_$i12, out_$p13, out_$p16, out_$p17, out_$p18, out_$p19, out_$i20, out_$i21, out_$p6 := in_$p7, in_$p8, in_$p9, in_$p10, in_$i11, in_$i12, in_$p13, in_$p16, in_$p17, in_$p18, in_$p19, in_$i20, in_$i21, in_$p6;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1273;

  $bb10:
    assume out_$i21 == 1;
    assume {:verifier.code 0} true;
    out_$p6 := out_$p17;
    goto $bb10_dummy;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    out_$i21 := $ne.i64(out_$i20, $p2i.ref.i64(mode_list));
    goto corral_source_split_1291;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    out_$i20 := $p2i.ref.i64(out_$p19);
    goto corral_source_split_1290;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(out_$p18, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1289;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    out_$p18 := $bitcast.ref.ref(out_$p17);
    goto corral_source_split_1288;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    out_$p17 := $load.ref($M.0, out_$p16);
    goto corral_source_split_1287;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref($add.ref(out_$p6, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1286;

  $bb7:
    assume !(out_$i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    out_$p13 := out_$p6;
    assume true;
    goto $bb7;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    out_$i12 := $eq.i32(out_$i11, 0);
    goto corral_source_split_1280;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 304} out_$i11 := strcmp(out_$p10, in_$p0);
    call {:si_unique_call 305} {:cexpr "tmp"} boogie_si_record_i32(out_$i11);
    goto corral_source_split_1279;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    out_$p10 := $load.ref($M.0, out_$p9);
    goto corral_source_split_1278;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(out_$p8, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1277;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    out_$p8 := $load.ref($M.0, out_$p7);
    goto corral_source_split_1276;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref($add.ref(out_$p6, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_1275;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p7, out_$p8, out_$p9, out_$p10, out_$i11, out_$i12, out_$p13, out_$p16, out_$p17, out_$p18, out_$p19, out_$i20, out_$i21, out_$p6 := __find_mode_loop_$bb4(in_$p0, out_$p7, out_$p8, out_$p9, out_$p10, out_$i11, out_$i12, out_$p13, out_$p16, out_$p17, out_$p18, out_$p19, out_$i20, out_$i21, out_$p6);
    return;

  exit:
    return;
}



procedure __find_mode_loop_$bb4(in_$p0: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$i11: i32, in_$i12: i1, in_$p13: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$i21: i1, in_$p6: ref) returns (out_$p7: ref, out_$p8: ref, out_$p9: ref, out_$p10: ref, out_$i11: i32, out_$i12: i1, out_$p13: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$i21: i1, out_$p6: ref);



implementation __team_queue_override_port_add_loop_$bb8(in_$p1: ref, in_$i17: i64, in_$i22: i1, in_$i23: i8, in_$i24: i1, in_$p25: ref, in_$p27: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$i34: i64, in_$i35: i1, in_$p20: ref, in_$p21: ref, in_$p36: ref) returns (out_$i22: i1, out_$i23: i8, out_$i24: i1, out_$p25: ref, out_$p27: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$i34: i64, out_$i35: i1, out_$p20: ref, out_$p21: ref, out_$p36: ref)
{

  entry:
    out_$i22, out_$i23, out_$i24, out_$p25, out_$p27, out_$p29, out_$p30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$p20, out_$p21, out_$p36 := in_$i22, in_$i23, in_$i24, in_$p25, in_$p27, in_$p29, in_$p30, in_$p31, in_$p32, in_$p33, in_$i34, in_$i35, in_$p20, in_$p21, in_$p36;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1617;

  $bb14:
    assume out_$i35 == 1;
    assume {:verifier.code 0} true;
    out_$p20, out_$p21 := out_$p27, out_$p32;
    goto $bb14_dummy;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    out_$p36 := out_$p27;
    assume true;
    goto $bb14;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    out_$i35 := $ne.i64(out_$i34, in_$i17);
    goto corral_source_split_1636;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    out_$i34 := $p2i.ref.i64(out_$p33);
    goto corral_source_split_1635;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(out_$p31, $mul.ref($sub.ref(0, 128), 160)), $mul.ref(128, 1));
    goto corral_source_split_1634;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref(out_$p31, $mul.ref($sub.ref(0, 128), 160));
    goto corral_source_split_1633;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    out_$p31 := $bitcast.ref.ref(out_$p30);
    goto corral_source_split_1632;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    out_$p30 := $load.ref($M.0, out_$p29);
    goto corral_source_split_1631;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref($add.ref(out_$p21, $mul.ref(0, 160)), $mul.ref(128, 1)), $mul.ref(0, 1));
    goto corral_source_split_1630;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p21, $mul.ref(0, 160)), $mul.ref(128, 1));
    goto corral_source_split_1629;

  $bb11:
    assume !(out_$i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    out_$p25 := out_$p20;
    assume true;
    goto $bb11;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    out_$i24 := $trunc.i8.i1(out_$i23);
    goto corral_source_split_1621;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    out_$i23 := $zext.i1.i8(out_$i22);
    call {:si_unique_call 336} {:cexpr "tmp"} boogie_si_record_i8(out_$i23);
    goto corral_source_split_1620;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} out_$i22 := team_queue_override_port_has_gt_prio_than(in_$p1, out_$p21);
    goto corral_source_split_1619;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb14_dummy:
    call {:si_unique_call 1} out_$i22, out_$i23, out_$i24, out_$p25, out_$p27, out_$p29, out_$p30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$p20, out_$p21, out_$p36 := __team_queue_override_port_add_loop_$bb8(in_$p1, in_$i17, out_$i22, out_$i23, out_$i24, out_$p25, out_$p27, out_$p29, out_$p30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$p20, out_$p21, out_$p36);
    return;

  exit:
    return;
}



procedure __team_queue_override_port_add_loop_$bb8(in_$p1: ref, in_$i17: i64, in_$i22: i1, in_$i23: i8, in_$i24: i1, in_$p25: ref, in_$p27: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$i34: i64, in_$i35: i1, in_$p20: ref, in_$p21: ref, in_$p36: ref) returns (out_$i22: i1, out_$i23: i8, out_$i24: i1, out_$p25: ref, out_$p27: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$i34: i64, out_$i35: i1, out_$p20: ref, out_$p21: ref, out_$p36: ref);



implementation __team_queue_override_enabled_check_loop_$bb4(in_$i10: i64, in_$p13: ref, in_$i14: i16, in_$i15: i32, in_$i16: i1, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$i24: i64, in_$i25: i1, in_$p12: ref) returns (out_$p13: ref, out_$i14: i16, out_$i15: i32, out_$i16: i1, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$i24: i64, out_$i25: i1, out_$p12: ref)
{

  entry:
    out_$p13, out_$i14, out_$i15, out_$i16, out_$p19, out_$p20, out_$p21, out_$p22, out_$p23, out_$i24, out_$i25, out_$p12 := in_$p13, in_$i14, in_$i15, in_$i16, in_$p19, in_$p20, in_$p21, in_$p22, in_$p23, in_$i24, in_$i25, in_$p12;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1653;

  $bb10:
    assume out_$i25 == 1;
    assume {:verifier.code 0} true;
    out_$p12 := out_$p22;
    goto $bb10_dummy;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    out_$i25 := $ne.i64(out_$i24, in_$i10);
    goto corral_source_split_1677;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    out_$i24 := $p2i.ref.i64(out_$p23);
    goto corral_source_split_1676;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(out_$p21, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_1675;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref(out_$p21, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_1674;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    out_$p21 := $bitcast.ref.ref(out_$p20);
    goto corral_source_split_1673;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.0, out_$p19);
    goto corral_source_split_1672;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_1671;

  $bb7:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    out_$i16 := $ne.i32(out_$i15, 0);
    goto corral_source_split_1658;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    out_$i15 := $zext.i16.i32(out_$i14);
    goto corral_source_split_1657;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    out_$i14 := $load.i16($M.0, out_$p13);
    goto corral_source_split_1656;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(out_$p12, $mul.ref(0, 160)), $mul.ref(124, 1));
    goto corral_source_split_1655;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p13, out_$i14, out_$i15, out_$i16, out_$p19, out_$p20, out_$p21, out_$p22, out_$p23, out_$i24, out_$i25, out_$p12 := __team_queue_override_enabled_check_loop_$bb4(in_$i10, out_$p13, out_$i14, out_$i15, out_$i16, out_$p19, out_$p20, out_$p21, out_$p22, out_$p23, out_$i24, out_$i25, out_$p12);
    return;

  exit:
    return;
}



procedure __team_queue_override_enabled_check_loop_$bb4(in_$i10: i64, in_$p13: ref, in_$i14: i16, in_$i15: i32, in_$i16: i1, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$i24: i64, in_$i25: i1, in_$p12: ref) returns (out_$p13: ref, out_$i14: i16, out_$i15: i32, out_$i16: i1, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$i24: i64, out_$i25: i1, out_$p12: ref);



implementation __team_carrier_check_loop_$bb8(in_$i12: i64, in_$p15: ref, in_$i16: i8, in_$i17: i1, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$i26: i1, in_$p14: ref) returns (out_$p15: ref, out_$i16: i8, out_$i17: i1, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$i26: i1, out_$p14: ref)
{

  entry:
    out_$p15, out_$i16, out_$i17, out_$p20, out_$p21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p14 := in_$p15, in_$i16, in_$i17, in_$p20, in_$p21, in_$p22, in_$p23, in_$p24, in_$i25, in_$i26, in_$p14;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1835;

  $bb14:
    assume out_$i26 == 1;
    assume {:verifier.code 0} true;
    out_$p14 := out_$p23;
    goto $bb14_dummy;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    out_$i26 := $ne.i64(out_$i25, in_$i12);
    goto corral_source_split_1852;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    out_$i25 := $p2i.ref.i64(out_$p24);
    goto corral_source_split_1851;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p22, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_1850;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref(out_$p22, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_1849;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    out_$p22 := $bitcast.ref.ref(out_$p21);
    goto corral_source_split_1848;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    out_$p21 := $load.ref($M.0, out_$p20);
    goto corral_source_split_1847;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref($add.ref(out_$p14, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_1846;

  $bb11:
    assume !(out_$i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    out_$i17 := $trunc.i8.i1(out_$i16);
    goto corral_source_split_1839;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    out_$i16 := $load.i8($M.0, out_$p15);
    goto corral_source_split_1838;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(out_$p14, $mul.ref(0, 160)), $mul.ref(52, 1));
    goto corral_source_split_1837;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb14_dummy:
    call {:si_unique_call 1} out_$p15, out_$i16, out_$i17, out_$p20, out_$p21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p14 := __team_carrier_check_loop_$bb8(in_$i12, out_$p15, out_$i16, out_$i17, out_$p20, out_$p21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p14);
    return;

  exit:
    return;
}



procedure __team_carrier_check_loop_$bb8(in_$i12: i64, in_$p15: ref, in_$i16: i8, in_$i17: i1, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$i26: i1, in_$p14: ref) returns (out_$p15: ref, out_$i16: i8, out_$i17: i1, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$i26: i1, out_$p14: ref);



implementation __reconstruct_port_hlist_loop_$bb4(in_$p0: ref, in_$p3: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$i10: i32, in_$i11: i32, in_$p12: ref, in_$p13: ref, in_$i14: i32, in_$p15: ref, in_$p16: ref, in_$i17: i32, in_$i18: i32, in_$i19: i1, in_$i6: i32) returns (out_$p7: ref, out_$p8: ref, out_$p9: ref, out_$i10: i32, out_$i11: i32, out_$p12: ref, out_$p13: ref, out_$i14: i32, out_$p15: ref, out_$p16: ref, out_$i17: i32, out_$i18: i32, out_$i19: i1, out_$i6: i32)
{

  entry:
    out_$p7, out_$p8, out_$p9, out_$i10, out_$i11, out_$p12, out_$p13, out_$i14, out_$p15, out_$p16, out_$i17, out_$i18, out_$i19, out_$i6 := in_$p7, in_$p8, in_$p9, in_$i10, in_$i11, in_$p12, in_$p13, in_$i14, in_$p15, in_$p16, in_$i17, in_$i18, in_$i19, in_$i6;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1955;

  $bb6:
    assume out_$i19 == 1;
    assume {:verifier.code 0} true;
    out_$i6 := out_$i17;
    goto $bb6_dummy;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    out_$i19 := $sgt.i32(out_$i18, out_$i17);
    goto corral_source_split_1972;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    out_$i18 := $load.i32($M.0, in_$p3);
    goto corral_source_split_1971;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    out_$i17 := $add.i32(out_$i6, 1);
    call {:si_unique_call 382} {:cexpr "i"} boogie_si_record_i32(out_$i17);
    goto corral_source_split_1970;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 381} hlist_add_head_rcu(out_$p16, out_$p15);
    goto corral_source_split_1969;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(out_$p7, $mul.ref(0, 160)), $mul.ref(8, 1));
    goto corral_source_split_1968;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} out_$p15 := team_port_index_hash(in_$p0, out_$i14);
    goto corral_source_split_1967;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    out_$i14 := $load.i32($M.0, out_$p13);
    goto corral_source_split_1966;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(out_$p7, $mul.ref(0, 160)), $mul.ref(48, 1));
    goto corral_source_split_1965;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p12, out_$i11);
    goto corral_source_split_1964;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(out_$p7, $mul.ref(0, 160)), $mul.ref(48, 1));
    goto corral_source_split_1963;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    out_$i11 := $sub.i32(out_$i10, 1);
    goto corral_source_split_1962;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    out_$i10 := $load.i32($M.0, out_$p9);
    goto corral_source_split_1961;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(out_$p7, $mul.ref(0, 160)), $mul.ref(48, 1));
    goto corral_source_split_1960;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 379} hlist_del_rcu(out_$p8);
    goto corral_source_split_1959;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref($add.ref(out_$p7, $mul.ref(0, 160)), $mul.ref(8, 1));
    goto corral_source_split_1958;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} out_$p7 := team_get_port_by_index(in_$p0, out_$i6);
    goto corral_source_split_1957;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p7, out_$p8, out_$p9, out_$i10, out_$i11, out_$p12, out_$p13, out_$i14, out_$p15, out_$p16, out_$i17, out_$i18, out_$i19, out_$i6 := __reconstruct_port_hlist_loop_$bb4(in_$p0, in_$p3, out_$p7, out_$p8, out_$p9, out_$i10, out_$i11, out_$p12, out_$p13, out_$i14, out_$p15, out_$p16, out_$i17, out_$i18, out_$i19, out_$i6);
    return;

  exit:
    return;
}



procedure __reconstruct_port_hlist_loop_$bb4(in_$p0: ref, in_$p3: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$i10: i32, in_$i11: i32, in_$p12: ref, in_$p13: ref, in_$i14: i32, in_$p15: ref, in_$p16: ref, in_$i17: i32, in_$i18: i32, in_$i19: i1, in_$i6: i32) returns (out_$p7: ref, out_$p8: ref, out_$p9: ref, out_$i10: i32, out_$i11: i32, out_$p12: ref, out_$p13: ref, out_$i14: i32, out_$p15: ref, out_$p16: ref, out_$i17: i32, out_$i18: i32, out_$i19: i1, out_$i6: i32);
  modifies $M.0;



implementation team_get_port_by_index_loop_$bb7(in_$i1: i32, in_$p13: ref, in_$i14: i32, in_$i15: i1, in_$p16: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i1, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$i26: i64, in_$i27: i1, in_$p12: ref) returns (out_$p13: ref, out_$i14: i32, out_$i15: i1, out_$p16: ref, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i1, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$i26: i64, out_$i27: i1, out_$p12: ref)
{

  entry:
    out_$p13, out_$i14, out_$i15, out_$p16, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$p25, out_$i26, out_$i27, out_$p12 := in_$p13, in_$i14, in_$i15, in_$p16, in_$p19, in_$p20, in_$i21, in_$i22, in_$p23, in_$p24, in_$p25, in_$i26, in_$i27, in_$p12;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_2194;

  $bb16:
    assume out_$i27 == 1;
    assume {:verifier.code 0} true;
    out_$p12 := out_$p25;
    goto $bb16_dummy;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    out_$i27 := $ne.i64(out_$i26, 0);
    goto corral_source_split_2215;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    out_$i26 := $p2i.ref.i64(out_$p25);
    goto corral_source_split_2214;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_2213;

  $bb14:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    out_$p25 := $0.ref;
    goto $bb15;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    out_$p25 := out_$p24;
    goto $bb15;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref(out_$p23, $mul.ref($sub.ref(0, 8), 160));
    goto corral_source_split_2211;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    out_$p23 := $bitcast.ref.ref(out_$p20);
    goto corral_source_split_2210;

  $bb13:
    assume out_$i22 == 1;
    goto corral_source_split_2209;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    out_$i22 := $ne.i64(out_$i21, 0);
    goto corral_source_split_2207;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    out_$i21 := $p2i.ref.i64(out_$p20);
    goto corral_source_split_2206;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.0, out_$p19);
    goto corral_source_split_2205;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_2204;

  $bb10:
    assume !(out_$i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    out_$p16 := out_$p12;
    assume true;
    goto $bb10;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    out_$i15 := $eq.i32(out_$i14, in_$i1);
    goto corral_source_split_2198;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    out_$i14 := $load.i32($M.0, out_$p13);
    goto corral_source_split_2197;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(out_$p12, $mul.ref(0, 160)), $mul.ref(48, 1));
    goto corral_source_split_2196;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb16_dummy:
    call {:si_unique_call 1} out_$p13, out_$i14, out_$i15, out_$p16, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$p25, out_$i26, out_$i27, out_$p12 := team_get_port_by_index_loop_$bb7(in_$i1, out_$p13, out_$i14, out_$i15, out_$p16, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$p25, out_$i26, out_$i27, out_$p12);
    return;

  exit:
    return;
}



procedure team_get_port_by_index_loop_$bb7(in_$i1: i32, in_$p13: ref, in_$i14: i32, in_$i15: i1, in_$p16: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i1, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$i26: i64, in_$i27: i1, in_$p12: ref) returns (out_$p13: ref, out_$i14: i32, out_$i15: i1, out_$p16: ref, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i1, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$i26: i64, out_$i27: i1, out_$p12: ref);



implementation __team_compute_features_loop_$bb4(in_$i9: i64, in_$i18: i64, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$i23: i64, in_$i24: i32, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$i28: i32, in_$i29: i32, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$i33: i16, in_$i34: i32, in_$i35: i32, in_$i36: i1, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$i40: i16, in_$i41: i16, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$i48: i64, in_$i49: i1, in_$i14: i32, in_$p15: ref, in_$i16: i32, in_$i17: i16, in_$i50: i16, in_$i51: i32, in_$i52: i32) returns (out_$i18: i64, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$i23: i64, out_$i24: i32, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$i28: i32, out_$i29: i32, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$i33: i16, out_$i34: i32, out_$i35: i32, out_$i36: i1, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$i40: i16, out_$i41: i16, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$i48: i64, out_$i49: i1, out_$i14: i32, out_$p15: ref, out_$i16: i32, out_$i17: i16, out_$i50: i16, out_$i51: i32, out_$i52: i32)
{

  entry:
    out_$i18, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$p25, out_$p26, out_$p27, out_$i28, out_$i29, out_$p30, out_$p31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$p37, out_$p38, out_$p39, out_$i40, out_$i41, out_$p43, out_$p44, out_$p45, out_$p46, out_$p47, out_$i48, out_$i49, out_$i14, out_$p15, out_$i16, out_$i17, out_$i50, out_$i51, out_$i52 := in_$i18, in_$p19, in_$p20, in_$p21, in_$i22, in_$i23, in_$i24, in_$p25, in_$p26, in_$p27, in_$i28, in_$i29, in_$p30, in_$p31, in_$p32, in_$i33, in_$i34, in_$i35, in_$i36, in_$p37, in_$p38, in_$p39, in_$i40, in_$i41, in_$p43, in_$p44, in_$p45, in_$p46, in_$p47, in_$i48, in_$i49, in_$i14, in_$p15, in_$i16, in_$i17, in_$i50, in_$i51, in_$i52;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2804;

  $bb9:
    assume out_$i49 == 1;
    assume {:verifier.code 0} true;
    out_$i14, out_$p15, out_$i16, out_$i17 := out_$i29, out_$p46, out_$i24, out_$i41;
    goto $bb9_dummy;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    out_$i50, out_$i51, out_$i52 := out_$i41, out_$i24, out_$i29;
    assume true;
    goto $bb9;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    out_$i49 := $ne.i64(out_$i48, in_$i9);
    goto corral_source_split_2839;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    out_$i48 := $p2i.ref.i64(out_$p47);
    goto corral_source_split_2838;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(out_$p45, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_2837;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref(out_$p45, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_2836;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    out_$p45 := $bitcast.ref.ref(out_$p44);
    goto corral_source_split_2835;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    out_$p44 := $load.ref($M.0, out_$p43);
    goto corral_source_split_2834;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref($add.ref(out_$p15, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_2833;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_2832;

  $bb7:
    assume !(out_$i36 == 1);
    assume {:verifier.code 0} true;
    out_$i41 := out_$i17;
    goto $bb8;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    out_$i41 := out_$i40;
    goto $bb8;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    out_$i40 := $load.i16($M.0, out_$p39);
    call {:si_unique_call 533} {:cexpr "max_hard_header_len"} boogie_si_record_i16(out_$i40);
    goto corral_source_split_2830;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(out_$p38, $mul.ref(0, 3176)), $mul.ref(542, 1));
    goto corral_source_split_2829;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    out_$p38 := $load.ref($M.0, out_$p37);
    goto corral_source_split_2828;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(out_$p15, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_2827;

  $bb6:
    assume out_$i36 == 1;
    goto corral_source_split_2826;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    out_$i36 := $sgt.i32(out_$i34, out_$i35);
    goto corral_source_split_2824;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    out_$i35 := $zext.i16.i32(out_$i17);
    goto corral_source_split_2823;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    out_$i34 := $zext.i16.i32(out_$i33);
    goto corral_source_split_2822;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i16($M.0, out_$p32);
    goto corral_source_split_2821;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(out_$p31, $mul.ref(0, 3176)), $mul.ref(542, 1));
    goto corral_source_split_2820;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    out_$p31 := $load.ref($M.0, out_$p30);
    goto corral_source_split_2819;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(out_$p15, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_2818;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    out_$i29 := $and.i32(out_$i28, out_$i14);
    call {:si_unique_call 532} {:cexpr "dst_release_flag"} boogie_si_record_i32(out_$i29);
    goto corral_source_split_2817;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i32($M.0, out_$p27);
    goto corral_source_split_2816;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p26, $mul.ref(0, 3176)), $mul.ref(524, 1));
    goto corral_source_split_2815;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    out_$p26 := $load.ref($M.0, out_$p25);
    goto corral_source_split_2814;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(out_$p15, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_2813;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    out_$i24 := $trunc.i64.i32(out_$i23);
    call {:si_unique_call 531} {:cexpr "vlan_features"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_2812;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 529} out_$i23 := netdev_increment_features(out_$i18, out_$i22, 1671291);
    call {:si_unique_call 530} {:cexpr "tmp"} boogie_si_record_i64(out_$i23);
    goto corral_source_split_2811;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    out_$i22 := $load.i64($M.0, out_$p21);
    goto corral_source_split_2810;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p20, $mul.ref(0, 3176)), $mul.ref(232, 1));
    goto corral_source_split_2809;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.0, out_$p19);
    goto corral_source_split_2808;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(out_$p15, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_2807;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i18 := $zext.i32.i64(out_$i16);
    goto corral_source_split_2806;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb9_dummy:
    call {:si_unique_call 1} out_$i18, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$p25, out_$p26, out_$p27, out_$i28, out_$i29, out_$p30, out_$p31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$p37, out_$p38, out_$p39, out_$i40, out_$i41, out_$p43, out_$p44, out_$p45, out_$p46, out_$p47, out_$i48, out_$i49, out_$i14, out_$p15, out_$i16, out_$i17, out_$i50, out_$i51, out_$i52 := __team_compute_features_loop_$bb4(in_$i9, out_$i18, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$p25, out_$p26, out_$p27, out_$i28, out_$i29, out_$p30, out_$p31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$p37, out_$p38, out_$p39, out_$i40, out_$i41, out_$p43, out_$p44, out_$p45, out_$p46, out_$p47, out_$i48, out_$i49, out_$i14, out_$p15, out_$i16, out_$i17, out_$i50, out_$i51, out_$i52);
    return;

  exit:
    return;
}



procedure __team_compute_features_loop_$bb4(in_$i9: i64, in_$i18: i64, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$i23: i64, in_$i24: i32, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$i28: i32, in_$i29: i32, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$i33: i16, in_$i34: i32, in_$i35: i32, in_$i36: i1, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$i40: i16, in_$i41: i16, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$i48: i64, in_$i49: i1, in_$i14: i32, in_$p15: ref, in_$i16: i32, in_$i17: i16, in_$i50: i16, in_$i51: i32, in_$i52: i32) returns (out_$i18: i64, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$i23: i64, out_$i24: i32, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$i28: i32, out_$i29: i32, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$i33: i16, out_$i34: i32, out_$i35: i32, out_$i36: i1, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$i40: i16, out_$i41: i16, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$i48: i64, out_$i49: i1, out_$i14: i32, out_$p15: ref, out_$i16: i32, out_$i17: i16, out_$i50: i16, out_$i51: i32, out_$i52: i32);



implementation team_port_find_loop_$bb4(in_$p1: ref, in_$i10: i64, in_$i13: i64, in_$i14: i64, in_$i15: i1, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$i24: i1, in_$p12: ref) returns (out_$i13: i64, out_$i14: i64, out_$i15: i1, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$i24: i1, out_$p12: ref)
{

  entry:
    out_$i13, out_$i14, out_$i15, out_$p18, out_$p19, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$p12 := in_$i13, in_$i14, in_$i15, in_$p18, in_$p19, in_$p20, in_$p21, in_$p22, in_$i23, in_$i24, in_$p12;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2937;

  $bb10:
    assume out_$i24 == 1;
    assume {:verifier.code 0} true;
    out_$p12 := out_$p21;
    goto $bb10_dummy;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    out_$i24 := $ne.i64(out_$i23, in_$i10);
    goto corral_source_split_2953;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    out_$i23 := $p2i.ref.i64(out_$p22);
    goto corral_source_split_2952;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(out_$p20, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_2951;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref(out_$p20, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_2950;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    out_$p20 := $bitcast.ref.ref(out_$p19);
    goto corral_source_split_2949;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    out_$p19 := $load.ref($M.0, out_$p18);
    goto corral_source_split_2948;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_2947;

  $bb7:
    assume !(out_$i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    out_$i15 := $eq.i64(out_$i13, out_$i14);
    goto corral_source_split_2941;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    out_$i14 := $p2i.ref.i64(in_$p1);
    goto corral_source_split_2940;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i13 := $p2i.ref.i64(out_$p12);
    goto corral_source_split_2939;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$i13, out_$i14, out_$i15, out_$p18, out_$p19, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$p12 := team_port_find_loop_$bb4(in_$p1, in_$i10, out_$i13, out_$i14, out_$i15, out_$p18, out_$p19, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$p12);
    return;

  exit:
    return;
}



procedure team_port_find_loop_$bb4(in_$p1: ref, in_$i10: i64, in_$i13: i64, in_$i14: i64, in_$i15: i1, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$i24: i1, in_$p12: ref) returns (out_$i13: i64, out_$i14: i64, out_$i15: i1, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$i24: i1, out_$p12: ref);



implementation __team_option_inst_mark_removed_port_loop_$bb4(in_$p1: ref, in_$i9: i64, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$i16: i64, in_$i17: i1, in_$p18: ref, in_$p19: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$i26: i1, in_$p11: ref) returns (out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$i16: i64, out_$i17: i1, out_$p18: ref, out_$p19: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$i26: i1, out_$p11: ref)
{

  entry:
    out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$p18, out_$p19, out_$p21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p11 := in_$p13, in_$p14, in_$i15, in_$i16, in_$i17, in_$p18, in_$p19, in_$p21, in_$p22, in_$p23, in_$p24, in_$i25, in_$i26, in_$p11;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_3020;

  $bb9:
    assume out_$i26 == 1;
    assume {:verifier.code 0} true;
    out_$p11 := out_$p22;
    goto $bb9_dummy;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    out_$i26 := $ne.i64(out_$i25, in_$i9);
    goto corral_source_split_3039;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    out_$i25 := $p2i.ref.i64(out_$p24);
    goto corral_source_split_3038;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p23, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_3037;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    out_$p23 := $bitcast.ref.ref(out_$p22);
    goto corral_source_split_3036;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    out_$p22 := $load.ref($M.0, out_$p21);
    goto corral_source_split_3035;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref($add.ref(out_$p11, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3034;

  $bb7:
    assume !(out_$i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p19, 1);
    goto corral_source_split_3032;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(out_$p11, $mul.ref(0, 64)), $mul.ref(57, 1));
    goto corral_source_split_3031;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p18, 1);
    goto corral_source_split_3030;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(out_$p11, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_3029;

  $bb6:
    assume out_$i17 == 1;
    goto corral_source_split_3028;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    out_$i17 := $eq.i64(out_$i15, out_$i16);
    goto corral_source_split_3026;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    out_$i16 := $p2i.ref.i64(in_$p1);
    goto corral_source_split_3025;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    out_$i15 := $p2i.ref.i64(out_$p14);
    goto corral_source_split_3024;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    out_$p14 := $load.ref($M.0, out_$p13);
    goto corral_source_split_3023;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref($add.ref(out_$p11, $mul.ref(0, 64)), $mul.ref(40, 1)), $mul.ref(8, 1));
    goto corral_source_split_3022;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb9_dummy:
    call {:si_unique_call 1} out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$p18, out_$p19, out_$p21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p11 := __team_option_inst_mark_removed_port_loop_$bb4(in_$p1, in_$i9, out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$p18, out_$p19, out_$p21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p11);
    return;

  exit:
    return;
}



procedure __team_option_inst_mark_removed_port_loop_$bb4(in_$p1: ref, in_$i9: i64, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$i16: i64, in_$i17: i1, in_$p18: ref, in_$p19: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$i26: i1, in_$p11: ref) returns (out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$i16: i64, out_$i17: i1, out_$p18: ref, out_$p19: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$i26: i1, out_$p11: ref);
  modifies $M.0;



implementation __team_option_inst_del_port_loop_$bb4(in_$p1: ref, in_$i13: i64, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$i20: i8, in_$i21: i1, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$i26: i64, in_$i27: i1, in_$p29: ref, in_$p30: ref, in_$p32: ref, in_$i33: i64, in_$i34: i1, in_$p15: ref, in_$p16: ref) returns (out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$i20: i8, out_$i21: i1, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$i26: i64, out_$i27: i1, out_$p29: ref, out_$p30: ref, out_$p32: ref, out_$i33: i64, out_$i34: i1, out_$p15: ref, out_$p16: ref)
{

  entry:
    out_$p17, out_$p18, out_$p19, out_$i20, out_$i21, out_$p23, out_$p24, out_$i25, out_$i26, out_$i27, out_$p29, out_$p30, out_$p32, out_$i33, out_$i34, out_$p15, out_$p16 := in_$p17, in_$p18, in_$p19, in_$i20, in_$i21, in_$p23, in_$p24, in_$i25, in_$i26, in_$i27, in_$p29, in_$p30, in_$p32, in_$i33, in_$i34, in_$p15, in_$p16;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3058;

  $bb12:
    assume out_$i34 == 1;
    assume {:verifier.code 0} true;
    out_$p15, out_$p16 := out_$p30, out_$p15;
    goto $bb12_dummy;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    out_$i34 := $ne.i64(out_$i33, in_$i13);
    goto corral_source_split_3081;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    out_$i33 := $p2i.ref.i64(out_$p32);
    goto corral_source_split_3080;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(out_$p15, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_3079;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    goto corral_source_split_3078;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    out_$p30 := $load.ref($M.0, out_$p29);
    goto corral_source_split_3077;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref($add.ref(out_$p15, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3076;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 572} __team_option_inst_del(out_$p16);
    goto corral_source_split_3074;

  $bb9:
    assume out_$i27 == 1;
    goto corral_source_split_3073;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    out_$i27 := $eq.i64(out_$i25, out_$i26);
    goto corral_source_split_3071;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    out_$i26 := $p2i.ref.i64(in_$p1);
    goto corral_source_split_3070;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    out_$i25 := $p2i.ref.i64(out_$p24);
    goto corral_source_split_3069;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    out_$p24 := $load.ref($M.0, out_$p23);
    goto corral_source_split_3068;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref($add.ref(out_$p16, $mul.ref(0, 64)), $mul.ref(40, 1)), $mul.ref(8, 1));
    goto corral_source_split_3067;

  $bb6:
    assume out_$i21 == 1;
    goto corral_source_split_3066;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    out_$i21 := $trunc.i8.i1(out_$i20);
    goto corral_source_split_3064;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    out_$i20 := $load.i8($M.0, out_$p19);
    goto corral_source_split_3063;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(out_$p18, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_3062;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.0, out_$p17);
    goto corral_source_split_3061;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(out_$p16, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_3060;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i21 == 1);
    goto $bb8;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i27 == 1);
    goto $bb8;

  $bb12_dummy:
    call {:si_unique_call 1} out_$p17, out_$p18, out_$p19, out_$i20, out_$i21, out_$p23, out_$p24, out_$i25, out_$i26, out_$i27, out_$p29, out_$p30, out_$p32, out_$i33, out_$i34, out_$p15, out_$p16 := __team_option_inst_del_port_loop_$bb4(in_$p1, in_$i13, out_$p17, out_$p18, out_$p19, out_$i20, out_$i21, out_$p23, out_$p24, out_$i25, out_$i26, out_$i27, out_$p29, out_$p30, out_$p32, out_$i33, out_$i34, out_$p15, out_$p16);
    return;

  exit:
    return;
}



procedure __team_option_inst_del_port_loop_$bb4(in_$p1: ref, in_$i13: i64, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$i20: i8, in_$i21: i1, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$i26: i64, in_$i27: i1, in_$p29: ref, in_$p30: ref, in_$p32: ref, in_$i33: i64, in_$i34: i1, in_$p15: ref, in_$p16: ref) returns (out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$i20: i8, out_$i21: i1, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$i26: i64, out_$i27: i1, out_$p29: ref, out_$p30: ref, out_$p32: ref, out_$i33: i64, out_$i34: i1, out_$p15: ref, out_$p16: ref);



implementation team_nl_send_port_list_get_loop_$bb56(in_$p0: ref, in_$i1: i32, in_$i2: i32, in_$p4: ref, in_$p6: ref, in_$i98: i32, in_$i102: i32, in_$i103: i1, in_$i104: i32, in_$p105: ref, in_$p106: ref, in_$i107: i64, in_$i108: i1) returns (out_$i102: i32, out_$i103: i1, out_$i104: i32, out_$p105: ref, out_$p106: ref, out_$i107: i64, out_$i108: i1)
{

  entry:
    out_$i102, out_$i103, out_$i104, out_$p105, out_$p106, out_$i107, out_$i108 := in_$i102, in_$i103, in_$i104, in_$p105, in_$p106, in_$i107, in_$i108;
    goto $bb56, exit;

  $bb56:
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} out_$i102 := __send_and_alloc_skb(in_$p6, in_$p0, in_$i1, in_$p4);
    call {:si_unique_call 618} {:cexpr "err"} boogie_si_record_i32(out_$i102);
    goto corral_source_split_3296;

  $bb60:
    assume {:verifier.code 0} true;
    assume out_$i108 == 1;
    goto $bb60_dummy;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    out_$i108 := $eq.i64(out_$i107, 0);
    goto corral_source_split_3304;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    out_$i107 := $p2i.ref.i64(out_$p106);
    goto corral_source_split_3303;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 619} out_$p106 := nlmsg_put(out_$p105, in_$i1, in_$i2, 3, 0, in_$i98);
    goto corral_source_split_3302;

  $bb59:
    assume {:verifier.code 0} true;
    out_$p105 := $load.ref($M.0, in_$p6);
    goto corral_source_split_3301;

  $bb58:
    assume !(out_$i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    out_$i104 := out_$i102;
    assume true;
    goto $bb58;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    out_$i103 := $ne.i32(out_$i102, 0);
    goto corral_source_split_3297;

  $bb60_dummy:
    call {:si_unique_call 1} out_$i102, out_$i103, out_$i104, out_$p105, out_$p106, out_$i107, out_$i108 := team_nl_send_port_list_get_loop_$bb56(in_$p0, in_$i1, in_$i2, in_$p4, in_$p6, in_$i98, out_$i102, out_$i103, out_$i104, out_$p105, out_$p106, out_$i107, out_$i108);
    return;

  exit:
    return;
}



procedure team_nl_send_port_list_get_loop_$bb56(in_$p0: ref, in_$i1: i32, in_$i2: i32, in_$p4: ref, in_$p6: ref, in_$i98: i32, in_$i102: i32, in_$i103: i1, in_$i104: i32, in_$p105: ref, in_$p106: ref, in_$i107: i64, in_$i108: i1) returns (out_$i102: i32, out_$i103: i1, out_$i104: i32, out_$p105: ref, out_$p106: ref, out_$i107: i64, out_$i108: i1);
  modifies $M.0, $CurrAddr, $M.16, $M.25, $M.26, $M.4, $M.3, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.31, $M.32, $M.23, $M.24;



implementation team_nl_send_port_list_get_loop_$bb35(in_$p6: ref, in_$i60: i64, in_$p65: ref, in_$i66: i32, in_$i67: i1, in_$p68: ref, in_$i69: i32, in_$i70: i32, in_$i79: i32, in_$p81: ref, in_$p82: ref, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$i86: i64, in_$i87: i1, in_$i63: i32, in_$p64: ref, in_$p88: ref) returns (out_$p65: ref, out_$i66: i32, out_$i67: i1, out_$p68: ref, out_$i69: i32, out_$i70: i32, out_$i79: i32, out_$p81: ref, out_$p82: ref, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$i86: i64, out_$i87: i1, out_$i63: i32, out_$p64: ref, out_$p88: ref)
{

  entry:
    out_$p65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$i79, out_$p81, out_$p82, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$i63, out_$p64, out_$p88 := in_$p65, in_$i66, in_$i67, in_$p68, in_$i69, in_$i70, in_$i79, in_$p81, in_$p82, in_$p83, in_$p84, in_$p85, in_$i86, in_$i87, in_$i63, in_$p64, in_$p88;
    goto $bb35, exit;

  $bb35:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3261;

  $bb47:
    assume out_$i87 == 1;
    assume {:verifier.code 0} true;
    out_$i63, out_$p64 := out_$i79, out_$p84;
    goto $bb47_dummy;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    out_$p88 := out_$p84;
    assume true;
    goto $bb47;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    out_$i87 := $ne.i64(out_$i86, in_$i60);
    goto corral_source_split_3284;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    out_$i86 := $p2i.ref.i64(out_$p85);
    goto corral_source_split_3283;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref(out_$p83, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_3282;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref(out_$p83, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_3281;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    out_$p83 := $bitcast.ref.ref(out_$p82);
    goto corral_source_split_3280;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    out_$p82 := $load.ref($M.0, out_$p81);
    goto corral_source_split_3279;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref($add.ref($add.ref(out_$p64, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_3278;

  $bb46:
    assume {:verifier.code 0} true;
    out_$i79 := $add.i32(out_$i63, 1);
    call {:si_unique_call 615} {:cexpr "i"} boogie_si_record_i32(out_$i79);
    goto corral_source_split_3277;

  $bb38:
    assume !(out_$i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    out_$p68, out_$i69, out_$i70 := out_$p64, out_$i63, out_$i66;
    assume true;
    goto $bb38;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    out_$i67 := $ne.i32(out_$i66, 0);
    goto corral_source_split_3265;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} out_$i66 := team_nl_fill_one_port_get(out_$p65, out_$p64);
    call {:si_unique_call 614} {:cexpr "err"} boogie_si_record_i32(out_$i66);
    goto corral_source_split_3264;

  $bb36:
    assume {:verifier.code 0} true;
    out_$p65 := $load.ref($M.0, in_$p6);
    goto corral_source_split_3263;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb47_dummy:
    call {:si_unique_call 1} out_$p65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$i79, out_$p81, out_$p82, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$i63, out_$p64, out_$p88 := team_nl_send_port_list_get_loop_$bb35(in_$p6, in_$i60, out_$p65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$i79, out_$p81, out_$p82, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$i63, out_$p64, out_$p88);
    return;

  exit:
    return;
}



procedure team_nl_send_port_list_get_loop_$bb35(in_$p6: ref, in_$i60: i64, in_$p65: ref, in_$i66: i32, in_$i67: i1, in_$p68: ref, in_$i69: i32, in_$i70: i32, in_$i79: i32, in_$p81: ref, in_$p82: ref, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$i86: i64, in_$i87: i1, in_$i63: i32, in_$p64: ref, in_$p88: ref) returns (out_$p65: ref, out_$i66: i32, out_$i67: i1, out_$p68: ref, out_$i69: i32, out_$i70: i32, out_$i79: i32, out_$p81: ref, out_$p82: ref, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$i86: i64, out_$i87: i1, out_$i63: i32, out_$p64: ref, out_$p88: ref);
  modifies $M.0, $CurrAddr;



implementation team_nl_send_port_list_get_loop_$bb7(in_$p0: ref, in_$i1: i32, in_$i2: i32, in_$i3: i32, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p20: ref, in_$i21: i32, in_$i22: i1, in_$i23: i32, in_$p19: ref, in_$p25: ref, in_$i26: i32, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$i34: i32, in_$i35: i32, in_$i36: i1, in_$p37: ref, in_$p39: ref, in_$p40: ref, in_$i41: i64, in_$i42: i1, in_$p43: ref, in_$i44: i64, in_$i45: i1, in_$p46: ref, in_$i47: i32, in_$i48: i1, in_$p49: ref, in_$i50: i32, in_$i55: i64, in_$i56: i1, in_$p57: ref, in_$i58: i64, in_$p59: ref, in_$i60: i64, in_$i61: i1, in_$p65: ref, in_$i66: i32, in_$i67: i1, in_$p68: ref, in_$i69: i32, in_$i70: i32, in_$i71: i1, in_$i74: i1, in_$p75: ref, in_$i76: i32, in_$p72: ref, in_$i73: i32, in_$i79: i32, in_$p81: ref, in_$p82: ref, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$i86: i64, in_$i87: i1, in_$i63: i32, in_$p64: ref, in_$p88: ref, in_$p62: ref, in_$p77: ref, in_$i78: i8, in_$p89: ref, in_$i90: i8, in_$p53: ref, in_$i54: i8, in_$p91: ref, in_$p93: ref, in_$i95: i1, in_$p96: ref, in_vslice_dummy_var_61: i32, in_vslice_dummy_var_62: i32) returns (out_$p20: ref, out_$i21: i32, out_$i22: i1, out_$i23: i32, out_$p19: ref, out_$p25: ref, out_$i26: i32, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$i34: i32, out_$i35: i32, out_$i36: i1, out_$p37: ref, out_$p39: ref, out_$p40: ref, out_$i41: i64, out_$i42: i1, out_$p43: ref, out_$i44: i64, out_$i45: i1, out_$p46: ref, out_$i47: i32, out_$i48: i1, out_$p49: ref, out_$i50: i32, out_$i55: i64, out_$i56: i1, out_$p57: ref, out_$i58: i64, out_$p59: ref, out_$i60: i64, out_$i61: i1, out_$p65: ref, out_$i66: i32, out_$i67: i1, out_$p68: ref, out_$i69: i32, out_$i70: i32, out_$i71: i1, out_$i74: i1, out_$p75: ref, out_$i76: i32, out_$p72: ref, out_$i73: i32, out_$i79: i32, out_$p81: ref, out_$p82: ref, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$i86: i64, out_$i87: i1, out_$i63: i32, out_$p64: ref, out_$p88: ref, out_$p62: ref, out_$p77: ref, out_$i78: i8, out_$p89: ref, out_$i90: i8, out_$p53: ref, out_$i54: i8, out_$p91: ref, out_$p93: ref, out_$i95: i1, out_$p96: ref, out_vslice_dummy_var_61: i32, out_vslice_dummy_var_62: i32)
{

  entry:
    out_$p20, out_$i21, out_$i22, out_$i23, out_$p19, out_$p25, out_$i26, out_$p27, out_$i28, out_$i29, out_$p30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$i36, out_$p37, out_$p39, out_$p40, out_$i41, out_$i42, out_$p43, out_$i44, out_$i45, out_$p46, out_$i47, out_$i48, out_$p49, out_$i50, out_$i55, out_$i56, out_$p57, out_$i58, out_$p59, out_$i60, out_$i61, out_$p65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$i71, out_$i74, out_$p75, out_$i76, out_$p72, out_$i73, out_$i79, out_$p81, out_$p82, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$i63, out_$p64, out_$p88, out_$p62, out_$p77, out_$i78, out_$p89, out_$i90, out_$p53, out_$i54, out_$p91, out_$p93, out_$i95, out_$p96, out_vslice_dummy_var_61, out_vslice_dummy_var_62 := in_$p20, in_$i21, in_$i22, in_$i23, in_$p19, in_$p25, in_$i26, in_$p27, in_$i28, in_$i29, in_$p30, in_$p31, in_$p32, in_$p33, in_$i34, in_$i35, in_$i36, in_$p37, in_$p39, in_$p40, in_$i41, in_$i42, in_$p43, in_$i44, in_$i45, in_$p46, in_$i47, in_$i48, in_$p49, in_$i50, in_$i55, in_$i56, in_$p57, in_$i58, in_$p59, in_$i60, in_$i61, in_$p65, in_$i66, in_$i67, in_$p68, in_$i69, in_$i70, in_$i71, in_$i74, in_$p75, in_$i76, in_$p72, in_$i73, in_$i79, in_$p81, in_$p82, in_$p83, in_$p84, in_$p85, in_$i86, in_$i87, in_$i63, in_$p64, in_$p88, in_$p62, in_$p77, in_$i78, in_$p89, in_$i90, in_$p53, in_$i54, in_$p91, in_$p93, in_$i95, in_$p96, in_vslice_dummy_var_61, in_vslice_dummy_var_62;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb10:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    out_$p19 := out_$p20;
    goto $bb10_dummy;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    out_$i23 := out_$i21;
    assume true;
    goto $bb10;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    out_$i22 := $ne.i32(out_$i21, 0);
    goto corral_source_split_3192;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 601} out_$i21 := __send_and_alloc_skb(in_$p6, in_$p0, in_$i1, in_$p4);
    call {:si_unique_call 602} {:cexpr "err"} boogie_si_record_i32(out_$i21);
    goto corral_source_split_3191;

  $bb8:
    assume out_$i95 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3190;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    out_$p20, out_$p96 := out_$p53, out_$p27;
    assume true;
    goto $bb8;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    out_$i95 := $trunc.i8.i1(out_$i54);
    goto corral_source_split_3250;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} out_vslice_dummy_var_62 := genlmsg_end(out_$p93, out_$p27);
    goto corral_source_split_3249;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    out_$p93 := $load.ref($M.0, in_$p6);
    goto corral_source_split_3248;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 611} out_vslice_dummy_var_61 := nla_nest_end(out_$p91, out_$p40);
    goto corral_source_split_3247;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    out_$p91 := $load.ref($M.0, in_$p6);
    goto corral_source_split_3246;

  $bb29:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3245;

  $bb50:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$p53, out_$i54 := out_$p89, out_$i90;
    goto $bb29;

  $bb28:
    assume {:verifier.code 0} true;
    out_$p53, out_$i54 := out_$p19, 0;
    goto $bb29;

  $bb26:
    assume !(out_$i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    out_$p49, out_$i50 := out_$p27, out_$i47;
    assume true;
    goto $bb26;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    out_$i48 := $ne.i32(out_$i47, 0);
    goto corral_source_split_3231;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 607} out_$i47 := team_nl_fill_one_port_get(out_$p46, in_$p5);
    call {:si_unique_call 608} {:cexpr "err"} boogie_si_record_i32(out_$i47);
    goto corral_source_split_3230;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    out_$p46 := $load.ref($M.0, in_$p6);
    goto corral_source_split_3229;

  $bb23:
    assume out_$i45 == 1;
    goto corral_source_split_3228;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    out_$i45 := $ne.i64(out_$i44, 0);
    goto corral_source_split_3226;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i44 := $p2i.ref.i64(in_$p5);
    goto corral_source_split_3225;

  $bb21:
    assume !(out_$i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    out_$p43 := out_$p27;
    assume true;
    goto $bb21;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    out_$i42 := $eq.i64(out_$i41, 0);
    goto corral_source_split_3221;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    out_$i41 := $p2i.ref.i64(out_$p40);
    goto corral_source_split_3220;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 606} out_$p40 := nla_nest_start(out_$p39, 3);
    goto corral_source_split_3219;

  $bb19:
    assume {:verifier.code 0} true;
    out_$p39 := $load.ref($M.0, in_$p6);
    goto corral_source_split_3218;

  $bb17:
    assume !(out_$i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    out_$p37 := out_$p27;
    assume true;
    goto $bb17;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    out_$i36 := $ne.i32(out_$i35, 0);
    goto corral_source_split_3212;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 604} out_$i35 := nla_put_u32(out_$p30, 1, out_$i34);
    call {:si_unique_call 605} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i35);
    goto corral_source_split_3211;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    out_$i34 := $load.i32($M.0, out_$p33);
    goto corral_source_split_3210;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(out_$p32, $mul.ref(0, 3176)), $mul.ref(256, 1));
    goto corral_source_split_3209;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    out_$p32 := $load.ref($M.0, out_$p31);
    goto corral_source_split_3208;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(in_$p0, $mul.ref(0, 984)), $mul.ref(0, 1));
    goto corral_source_split_3207;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p30 := $load.ref($M.0, in_$p6);
    goto corral_source_split_3206;

  $bb14:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    out_$i29 := $eq.i64(out_$i28, 0);
    goto corral_source_split_3202;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    out_$i28 := $p2i.ref.i64(out_$p27);
    goto corral_source_split_3201;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} out_$p27 := genlmsg_put(out_$p25, in_$i1, in_$i2, team_nl_family, out_$i26, 3);
    goto corral_source_split_3200;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    out_$i26 := $or.i32(in_$i3, 2);
    goto corral_source_split_3199;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p25 := $load.ref($M.0, in_$p6);
    goto corral_source_split_3198;

  $bb31:
    assume !(out_$i56 == 1);
    assume {:verifier.code 0} true;
    out_$p89, out_$i90 := out_$p19, 0;
    goto $bb50;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    out_$p89, out_$i90 := out_$p77, out_$i78;
    goto $bb50;

  $bb44:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3275;

  $bb49:
    assume {:verifier.code 0} true;
    out_$p77, out_$i78 := out_$p62, 0;
    goto $bb44;

  $bb43:
    assume {:verifier.code 0} true;
    out_$p77, out_$i78 := out_$p68, 1;
    goto $bb44;

  $bb42:
    assume !(out_$i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    out_$p75, out_$i76 := out_$p27, out_$i70;
    assume true;
    goto $bb42;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    out_$i74 := $eq.i32(out_$i69, 0);
    goto corral_source_split_3271;

  $bb39:
    assume out_$i71 == 1;
    goto corral_source_split_3270;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    out_$p72, out_$i73 := out_$p27, out_$i70;
    assume true;
    goto $bb39;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    out_$i71 := $eq.i32(out_$i70, $sub.i32(0, 90));
    goto corral_source_split_3268;

  $bb37:
    assume out_$i67 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3267;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    out_$p68, out_$i69, out_$i70 := out_$p64, out_$i63, out_$i66;
    assume true;
    goto $bb37, $bb38;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    out_$i67 := $ne.i32(out_$i66, 0);
    goto corral_source_split_3265;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} out_$i66 := team_nl_fill_one_port_get(out_$p65, out_$p64);
    call {:si_unique_call 614} {:cexpr "err"} boogie_si_record_i32(out_$i66);
    goto corral_source_split_3264;

  $bb36:
    assume {:verifier.code 0} true;
    out_$p65 := $load.ref($M.0, in_$p6);
    goto corral_source_split_3263;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb35:
    call out_$p65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$i79, out_$p81, out_$p82, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$i63, out_$p64, out_$p88 := team_nl_send_port_list_get_loop_$bb35(in_$p6, out_$i60, out_$p65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$i79, out_$p81, out_$p82, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$i63, out_$p64, out_$p88);
    goto $bb35_last;

  $bb35_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3261;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    out_$i63, out_$p64 := 0, out_$p19;
    goto $bb35;

  $bb47:
    assume out_$i87 == 1;
    assume {:verifier.code 0} true;
    out_$i63, out_$p64 := out_$i79, out_$p84;
    assume false;
    return;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    out_$p88 := out_$p84;
    assume true;
    goto $bb47, $bb48;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    out_$i87 := $ne.i64(out_$i86, out_$i60);
    goto corral_source_split_3284;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    out_$i86 := $p2i.ref.i64(out_$p85);
    goto corral_source_split_3283;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref(out_$p83, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_3282;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref(out_$p83, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_3281;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    out_$p83 := $bitcast.ref.ref(out_$p82);
    goto corral_source_split_3280;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    out_$p82 := $load.ref($M.0, out_$p81);
    goto corral_source_split_3279;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref($add.ref($add.ref(out_$p64, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_3278;

  $bb46:
    assume {:verifier.code 0} true;
    out_$i79 := $add.i32(out_$i63, 1);
    call {:si_unique_call 615} {:cexpr "i"} boogie_si_record_i32(out_$i79);
    goto corral_source_split_3277;

  $bb38:
    assume !(out_$i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb32:
    assume out_$i61 == 1;
    goto corral_source_split_3259;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    out_$p62 := out_$p19;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    out_$i61 := $ne.i64(out_$i58, out_$i60);
    goto corral_source_split_3257;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    out_$i60 := $p2i.ref.i64(out_$p59);
    goto corral_source_split_3256;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref(in_$p0, $mul.ref(0, 984)), $mul.ref(320, 1));
    goto corral_source_split_3255;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    out_$i58 := $p2i.ref.i64(out_$p57);
    goto corral_source_split_3254;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(out_$p19, $mul.ref(0, 160)), $mul.ref(24, 1));
    goto corral_source_split_3253;

  $bb30:
    assume out_$i56 == 1;
    goto corral_source_split_3252;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    out_$i56 := $ne.i64(out_$i55, 0);
    goto corral_source_split_3235;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    out_$i55 := $p2i.ref.i64(out_$p19);
    goto corral_source_split_3234;

  $bb24:
    assume !(out_$i45 == 1);
    goto corral_source_split_3233;

  $bb34:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb33:
    assume {:verifier.code 0} true;
    assume !(out_$i61 == 1);
    goto $bb34;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    out_$p62 := out_$p88;
    goto $bb34;

  $bb48:
    assume !(out_$i87 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3286;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p20, out_$i21, out_$i22, out_$i23, out_$p19, out_$p25, out_$i26, out_$p27, out_$i28, out_$i29, out_$p30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$i36, out_$p37, out_$p39, out_$p40, out_$i41, out_$i42, out_$p43, out_$i44, out_$i45, out_$p46, out_$i47, out_$i48, out_$p49, out_$i50, out_$i55, out_$i56, out_$p57, out_$i58, out_$p59, out_$i60, out_$i61, out_$p65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$i71, out_$i74, out_$p75, out_$i76, out_$p72, out_$i73, out_$i79, out_$p81, out_$p82, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$i63, out_$p64, out_$p88, out_$p62, out_$p77, out_$i78, out_$p89, out_$i90, out_$p53, out_$i54, out_$p91, out_$p93, out_$i95, out_$p96, out_vslice_dummy_var_61, out_vslice_dummy_var_62 := team_nl_send_port_list_get_loop_$bb7(in_$p0, in_$i1, in_$i2, in_$i3, in_$p4, in_$p5, in_$p6, out_$p20, out_$i21, out_$i22, out_$i23, out_$p19, out_$p25, out_$i26, out_$p27, out_$i28, out_$i29, out_$p30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$i36, out_$p37, out_$p39, out_$p40, out_$i41, out_$i42, out_$p43, out_$i44, out_$i45, out_$p46, out_$i47, out_$i48, out_$p49, out_$i50, out_$i55, out_$i56, out_$p57, out_$i58, out_$p59, out_$i60, out_$i61, out_$p65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$i71, out_$i74, out_$p75, out_$i76, out_$p72, out_$i73, out_$i79, out_$p81, out_$p82, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$i63, out_$p64, out_$p88, out_$p62, out_$p77, out_$i78, out_$p89, out_$i90, out_$p53, out_$i54, out_$p91, out_$p93, out_$i95, out_$p96, out_vslice_dummy_var_61, out_vslice_dummy_var_62);
    return;

  exit:
    return;
}



procedure team_nl_send_port_list_get_loop_$bb7(in_$p0: ref, in_$i1: i32, in_$i2: i32, in_$i3: i32, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p20: ref, in_$i21: i32, in_$i22: i1, in_$i23: i32, in_$p19: ref, in_$p25: ref, in_$i26: i32, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$i34: i32, in_$i35: i32, in_$i36: i1, in_$p37: ref, in_$p39: ref, in_$p40: ref, in_$i41: i64, in_$i42: i1, in_$p43: ref, in_$i44: i64, in_$i45: i1, in_$p46: ref, in_$i47: i32, in_$i48: i1, in_$p49: ref, in_$i50: i32, in_$i55: i64, in_$i56: i1, in_$p57: ref, in_$i58: i64, in_$p59: ref, in_$i60: i64, in_$i61: i1, in_$p65: ref, in_$i66: i32, in_$i67: i1, in_$p68: ref, in_$i69: i32, in_$i70: i32, in_$i71: i1, in_$i74: i1, in_$p75: ref, in_$i76: i32, in_$p72: ref, in_$i73: i32, in_$i79: i32, in_$p81: ref, in_$p82: ref, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$i86: i64, in_$i87: i1, in_$i63: i32, in_$p64: ref, in_$p88: ref, in_$p62: ref, in_$p77: ref, in_$i78: i8, in_$p89: ref, in_$i90: i8, in_$p53: ref, in_$i54: i8, in_$p91: ref, in_$p93: ref, in_$i95: i1, in_$p96: ref, in_vslice_dummy_var_61: i32, in_vslice_dummy_var_62: i32) returns (out_$p20: ref, out_$i21: i32, out_$i22: i1, out_$i23: i32, out_$p19: ref, out_$p25: ref, out_$i26: i32, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$i34: i32, out_$i35: i32, out_$i36: i1, out_$p37: ref, out_$p39: ref, out_$p40: ref, out_$i41: i64, out_$i42: i1, out_$p43: ref, out_$i44: i64, out_$i45: i1, out_$p46: ref, out_$i47: i32, out_$i48: i1, out_$p49: ref, out_$i50: i32, out_$i55: i64, out_$i56: i1, out_$p57: ref, out_$i58: i64, out_$p59: ref, out_$i60: i64, out_$i61: i1, out_$p65: ref, out_$i66: i32, out_$i67: i1, out_$p68: ref, out_$i69: i32, out_$i70: i32, out_$i71: i1, out_$i74: i1, out_$p75: ref, out_$i76: i32, out_$p72: ref, out_$i73: i32, out_$i79: i32, out_$p81: ref, out_$p82: ref, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$i86: i64, out_$i87: i1, out_$i63: i32, out_$p64: ref, out_$p88: ref, out_$p62: ref, out_$p77: ref, out_$i78: i8, out_$p89: ref, out_$i90: i8, out_$p53: ref, out_$i54: i8, out_$p91: ref, out_$p93: ref, out_$i95: i1, out_$p96: ref, out_vslice_dummy_var_61: i32, out_vslice_dummy_var_62: i32);
  modifies $M.0, $CurrAddr, $M.16, $M.25, $M.26, $M.4, $M.3, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.31, $M.32, $M.23, $M.24;



implementation team_nl_cmd_options_set_loop_$bb104()
{

  entry:
    goto $bb104, exit;

  $bb104:
    assume {:verifier.code 0} true;
    goto $bb104_dummy;

  $bb104_dummy:
    call {:si_unique_call 1} team_nl_cmd_options_set_loop_$bb104();
    return;

  exit:
    return;
}



procedure team_nl_cmd_options_set_loop_$bb104();



implementation team_nl_cmd_options_set_loop_$bb61(in_$p3: ref, in_$p5: ref, in_$p8: ref, in_$i61: i32, in_$p63: ref, in_$p69: ref, in_$i75: i32, in_$i81: i32, in_$i82: i8, in_$i90: i64, in_$p95: ref, in_$p96: ref, in_$p97: ref, in_$p98: ref, in_$p99: ref, in_$i100: i64, in_$i101: i1, in_$p102: ref, in_$p103: ref, in_$p104: ref, in_$p105: ref, in_$p106: ref, in_$i107: i32, in_$i108: i32, in_$p109: ref, in_$i110: i32, in_$i111: i1, in_$p114: ref, in_$p115: ref, in_$i116: i32, in_$i117: i1, in_$i118: i1, in_$p119: ref, in_$i120: i32, in_$i121: i1, in_$i122: i1, in_$p123: ref, in_$i124: i32, in_$i125: i1, in_$p126: ref, in_$i127: i1, in_$i128: i1, in_$i129: i1, in_$i130: i1, in_$i131: i1, in_$i132: i1, in_$i133: i32, in_$p134: ref, in_$p135: ref, in_$i136: i32, in_$i137: i1, in_$p138: ref, in_$p139: ref, in_$p140: ref, in_$i141: i32, in_$p142: ref, in_$p143: ref, in_$p144: ref, in_$p145: ref, in_$p146: ref, in_$p147: ref, in_$p148: ref, in_$i149: i64, in_$i150: i1, in_$p151: ref, in_$p152: ref, in_$i153: i8, in_$i154: i32, in_$p155: ref, in_$p156: ref, in_$i157: i32, in_$i158: i1, in_$i159: i32, in_$p160: ref, in_$p161: ref, in_$p112: ref, in_$i113: i8, in_$p163: ref, in_$p164: ref, in_$p165: ref, in_$p166: ref, in_$i167: i64, in_$i168: i1, in_$i93: i8, in_$p94: ref, in_$i169: i8) returns (out_$p95: ref, out_$p96: ref, out_$p97: ref, out_$p98: ref, out_$p99: ref, out_$i100: i64, out_$i101: i1, out_$p102: ref, out_$p103: ref, out_$p104: ref, out_$p105: ref, out_$p106: ref, out_$i107: i32, out_$i108: i32, out_$p109: ref, out_$i110: i32, out_$i111: i1, out_$p114: ref, out_$p115: ref, out_$i116: i32, out_$i117: i1, out_$i118: i1, out_$p119: ref, out_$i120: i32, out_$i121: i1, out_$i122: i1, out_$p123: ref, out_$i124: i32, out_$i125: i1, out_$p126: ref, out_$i127: i1, out_$i128: i1, out_$i129: i1, out_$i130: i1, out_$i131: i1, out_$i132: i1, out_$i133: i32, out_$p134: ref, out_$p135: ref, out_$i136: i32, out_$i137: i1, out_$p138: ref, out_$p139: ref, out_$p140: ref, out_$i141: i32, out_$p142: ref, out_$p143: ref, out_$p144: ref, out_$p145: ref, out_$p146: ref, out_$p147: ref, out_$p148: ref, out_$i149: i64, out_$i150: i1, out_$p151: ref, out_$p152: ref, out_$i153: i8, out_$i154: i32, out_$p155: ref, out_$p156: ref, out_$i157: i32, out_$i158: i1, out_$i159: i32, out_$p160: ref, out_$p161: ref, out_$p112: ref, out_$i113: i8, out_$p163: ref, out_$p164: ref, out_$p165: ref, out_$p166: ref, out_$i167: i64, out_$i168: i1, out_$i93: i8, out_$p94: ref, out_$i169: i8)
{

  entry:
    out_$p95, out_$p96, out_$p97, out_$p98, out_$p99, out_$i100, out_$i101, out_$p102, out_$p103, out_$p104, out_$p105, out_$p106, out_$i107, out_$i108, out_$p109, out_$i110, out_$i111, out_$p114, out_$p115, out_$i116, out_$i117, out_$i118, out_$p119, out_$i120, out_$i121, out_$i122, out_$p123, out_$i124, out_$i125, out_$p126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$p134, out_$p135, out_$i136, out_$i137, out_$p138, out_$p139, out_$p140, out_$i141, out_$p142, out_$p143, out_$p144, out_$p145, out_$p146, out_$p147, out_$p148, out_$i149, out_$i150, out_$p151, out_$p152, out_$i153, out_$i154, out_$p155, out_$p156, out_$i157, out_$i158, out_$i159, out_$p160, out_$p161, out_$p112, out_$i113, out_$p163, out_$p164, out_$p165, out_$p166, out_$i167, out_$i168, out_$i93, out_$p94, out_$i169 := in_$p95, in_$p96, in_$p97, in_$p98, in_$p99, in_$i100, in_$i101, in_$p102, in_$p103, in_$p104, in_$p105, in_$p106, in_$i107, in_$i108, in_$p109, in_$i110, in_$i111, in_$p114, in_$p115, in_$i116, in_$i117, in_$i118, in_$p119, in_$i120, in_$i121, in_$i122, in_$p123, in_$i124, in_$i125, in_$p126, in_$i127, in_$i128, in_$i129, in_$i130, in_$i131, in_$i132, in_$i133, in_$p134, in_$p135, in_$i136, in_$i137, in_$p138, in_$p139, in_$p140, in_$i141, in_$p142, in_$p143, in_$p144, in_$p145, in_$p146, in_$p147, in_$p148, in_$i149, in_$i150, in_$p151, in_$p152, in_$i153, in_$i154, in_$p155, in_$p156, in_$i157, in_$i158, in_$i159, in_$p160, in_$p161, in_$p112, in_$i113, in_$p163, in_$p164, in_$p165, in_$p166, in_$i167, in_$i168, in_$i93, in_$p94, in_$i169;
    goto $bb61, exit;

  $bb61:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3640;

  $bb108:
    assume out_$i168 == 1;
    assume {:verifier.code 0} true;
    out_$i93, out_$p94 := out_$i113, out_$p164;
    goto $bb108_dummy;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    out_$i169 := out_$i113;
    assume true;
    goto $bb108;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    out_$i168 := $ne.i64(out_$i167, in_$i90);
    goto corral_source_split_3677;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    out_$i167 := $p2i.ref.i64(out_$p166);
    goto corral_source_split_3676;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    out_$p166 := $add.ref($add.ref(out_$p165, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_3675;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    out_$p165 := $bitcast.ref.ref(out_$p164);
    goto corral_source_split_3674;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    out_$p164 := $load.ref($M.0, out_$p163);
    goto corral_source_split_3673;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    out_$p163 := $add.ref($add.ref($add.ref(out_$p112, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3672;

  $bb68:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3671;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    out_$p112, out_$i113 := out_$p94, 1;
    goto $bb68;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    out_$p112, out_$i113 := out_$p94, out_$i93;
    goto $bb68;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    out_$p112, out_$i113 := out_$p94, out_$i93;
    goto $bb68;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    out_$p112, out_$i113 := out_$p94, out_$i93;
    goto $bb68;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    out_$p112, out_$i113 := out_$p94, out_$i93;
    goto $bb68;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    out_$p112, out_$i113 := out_$p94, out_$i93;
    goto $bb68;

  $bb66:
    assume out_$i111 == 1;
    goto corral_source_split_3663;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    out_$i111 := $ne.i32(out_$i110, in_$i61);
    goto corral_source_split_3661;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    out_$i110 := $load.i32($M.0, out_$p109);
    goto corral_source_split_3660;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    out_$p109 := $add.ref($add.ref(out_$p96, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_3659;

  $bb65:
    assume {:verifier.code 0} true;
    goto corral_source_split_3658;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    out_$i108 := 0;
    goto $bb65;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    out_$i108 := out_$i107;
    goto $bb65;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    out_$i107 := $load.i32($M.0, out_$p106);
    goto corral_source_split_3654;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    out_$p106 := $add.ref($add.ref(out_$p105, $mul.ref(0, 3176)), $mul.ref(256, 1));
    goto corral_source_split_3653;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    out_$p105 := $load.ref($M.0, out_$p104);
    goto corral_source_split_3652;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    out_$p104 := $add.ref($add.ref(out_$p103, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_3651;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    out_$p103 := $load.ref($M.0, out_$p102);
    goto corral_source_split_3650;

  $bb63:
    assume out_$i101 == 1;
    out_$p102 := $add.ref($add.ref($add.ref(out_$p94, $mul.ref(0, 64)), $mul.ref(40, 1)), $mul.ref(8, 1));
    goto corral_source_split_3649;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    out_$i101 := $ne.i64(out_$i100, 0);
    goto corral_source_split_3647;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    out_$i100 := $p2i.ref.i64(out_$p99);
    goto corral_source_split_3646;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    out_$p99 := $load.ref($M.0, out_$p98);
    goto corral_source_split_3645;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    out_$p97 := $add.ref($add.ref(out_$p94, $mul.ref(0, 64)), $mul.ref(40, 1));
    out_$p98 := $add.ref($add.ref($add.ref(out_$p94, $mul.ref(0, 64)), $mul.ref(40, 1)), $mul.ref(8, 1));
    goto corral_source_split_3644;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    out_$p96 := $load.ref($M.0, out_$p95);
    goto corral_source_split_3643;

  $bb62:
    assume {:verifier.code 0} true;
    out_$p95 := $add.ref($add.ref(out_$p94, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_3642;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb64:
    assume !(out_$i101 == 1);
    goto corral_source_split_3656;

  $bb69:
    assume out_$i117 == 1;
    goto corral_source_split_3679;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    out_$i117 := $ne.i32(out_$i116, 0);
    goto corral_source_split_3669;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 686} out_$i116 := strcmp(out_$p115, in_$p69);
    call {:si_unique_call 687} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i116);
    goto corral_source_split_3668;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    out_$p115 := $load.ref($M.0, out_$p114);
    goto corral_source_split_3667;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    out_$p114 := $add.ref($add.ref(out_$p96, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_3666;

  $bb67:
    assume !(out_$i111 == 1);
    goto corral_source_split_3665;

  $bb71:
    assume out_$i118 == 1;
    goto corral_source_split_3684;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    out_$i118 := $ne.i32(out_$i108, in_$i75);
    goto corral_source_split_3682;

  $bb70:
    assume !(out_$i117 == 1);
    goto corral_source_split_3681;

  $bb77:
    assume !(out_$i122 == 1);
    goto corral_source_split_3698;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    out_$i122 := $trunc.i8.i1(in_$i82);
    goto corral_source_split_3692;

  $bb73:
    assume out_$i121 == 1;
    goto corral_source_split_3691;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    out_$i121 := $ne.i32(out_$i120, 0);
    goto corral_source_split_3689;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    out_$i120 := $load.i32($M.0, out_$p119);
    goto corral_source_split_3688;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    out_$p119 := $add.ref($add.ref(out_$p96, $mul.ref(0, 64)), $mul.ref(28, 1));
    goto corral_source_split_3687;

  $bb72:
    assume !(out_$i118 == 1);
    goto corral_source_split_3686;

  $bb78:
    assume out_$i125 == 1;
    goto corral_source_split_3700;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    out_$i125 := $ne.i32(out_$i124, in_$i81);
    goto corral_source_split_3696;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    out_$i124 := $load.i32($M.0, out_$p123);
    goto corral_source_split_3695;

  $bb75:
    out_$p123 := $add.ref($add.ref($add.ref(out_$p94, $mul.ref(0, 64)), $mul.ref(40, 1)), $mul.ref(0, 1));
    goto corral_source_split_3694;

  $bb74:
    assume {:verifier.code 0} true;
    assume !(out_$i121 == 1);
    goto $bb75;

  $bb76:
    assume {:verifier.code 0} true;
    assume out_$i122 == 1;
    goto $bb75;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} list_add(out_$p161, in_$p3);
    goto corral_source_split_3757;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    out_$p161 := $add.ref($add.ref(out_$p94, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_3756;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p160, 1);
    goto corral_source_split_3755;

  $bb107:
    assume {:verifier.code 0} true;
    out_$p160 := $add.ref($add.ref(out_$p94, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_3754;

  $bb106:
    assume !(out_$i158 == 1);
    assume {:verifier.code 0} true;
    goto $bb107;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    out_$i159 := out_$i157;
    assume true;
    goto $bb106;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    out_$i158 := $ne.i32(out_$i157, 0);
    goto corral_source_split_3741;

  $bb99:
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} out_$i157 := team_option_set(in_$p8, out_$p94, in_$p5);
    call {:si_unique_call 696} {:cexpr "err"} boogie_si_record_i32(out_$i157);
    goto corral_source_split_3740;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    goto $bb99;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    goto $bb99;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    goto $bb99;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    goto $bb99;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    goto $bb99;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p135, out_$i133);
    goto corral_source_split_3738;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    out_$p135 := $bitcast.ref.ref(out_$p134);
    goto corral_source_split_3737;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    out_$p134 := $add.ref($add.ref(in_$p5, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3736;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} out_$i133 := nla_get_u32(in_$p63);
    goto corral_source_split_3735;

  $bb97:
    assume out_$i132 == 1;
    goto corral_source_split_3734;

  $bb95:
    assume out_$i131 == 1;
    assume {:verifier.code 0} true;
    out_$i132 := $eq.i32(in_$i61, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97;

  $bb86:
    assume out_$i127 == 1;
    assume {:verifier.code 0} true;
    out_$i131 := $slt.i32(in_$i61, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  $bb85:
    assume {:verifier.code 0} true;
    out_$i127 := $slt.i32(in_$i61, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p126, out_$p97);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb84:
    assume {:verifier.code 0} true;
    out_$p126 := $add.ref($add.ref(in_$p5, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_3702;

  $bb83:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb79:
    assume !(out_$i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p140, out_$p138);
    goto corral_source_split_3748;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    out_$p140 := $bitcast.ref.ref(out_$p139);
    goto corral_source_split_3747;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    out_$p139 := $add.ref($add.ref(in_$p5, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3746;

  $bb102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 697} out_$p138 := nla_data(in_$p63);
    goto corral_source_split_3745;

  $bb101:
    assume !(out_$i137 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    out_$i137 := $sgt.i32(out_$i136, 32);
    goto corral_source_split_3732;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 692} out_$i136 := nla_len(in_$p63);
    call {:si_unique_call 693} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i136);
    goto corral_source_split_3731;

  $bb96:
    assume !(out_$i131 == 1);
    goto corral_source_split_3730;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p148, out_$p145);
    goto corral_source_split_3714;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    out_$p148 := $add.ref($add.ref(out_$p147, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3713;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    out_$p147 := $bitcast.ref.ref(out_$p146);
    goto corral_source_split_3712;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    out_$p146 := $add.ref($add.ref(in_$p5, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3711;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 690} out_$p145 := nla_data(in_$p63);
    goto corral_source_split_3710;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p144, out_$i141);
    goto corral_source_split_3709;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    out_$p144 := $add.ref($add.ref(out_$p143, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3708;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    out_$p143 := $bitcast.ref.ref(out_$p142);
    goto corral_source_split_3707;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    out_$p142 := $add.ref($add.ref(in_$p5, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3706;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} out_$i141 := nla_len(in_$p63);
    call {:si_unique_call 689} {:cexpr "tmp___7"} boogie_si_record_i32(out_$i141);
    goto corral_source_split_3705;

  $bb88:
    assume out_$i128 == 1;
    goto corral_source_split_3704;

  $bb87:
    assume !(out_$i127 == 1);
    assume {:verifier.code 0} true;
    out_$i128 := $slt.i32(in_$i61, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p152, out_$i153);
    goto corral_source_split_3722;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    out_$i153 := $zext.i1.i8(out_$i150);
    goto corral_source_split_3721;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    out_$p152 := $bitcast.ref.ref(out_$p151);
    goto corral_source_split_3720;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    out_$p151 := $add.ref($add.ref(in_$p5, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3719;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    out_$i150 := $ne.i64(out_$i149, 0);
    goto corral_source_split_3718;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    out_$i149 := $p2i.ref.i64(in_$p63);
    goto corral_source_split_3717;

  $bb90:
    assume out_$i129 == 1;
    goto corral_source_split_3716;

  $bb89:
    assume !(out_$i128 == 1);
    assume {:verifier.code 0} true;
    out_$i129 := $slt.i32(in_$i61, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p156, out_$i154);
    goto corral_source_split_3728;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    out_$p156 := $bitcast.ref.ref(out_$p155);
    goto corral_source_split_3727;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    out_$p155 := $add.ref($add.ref(in_$p5, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3726;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} out_$i154 := nla_get_s32(in_$p63);
    goto corral_source_split_3725;

  $bb92:
    assume out_$i130 == 1;
    goto corral_source_split_3724;

  $bb91:
    assume !(out_$i129 == 1);
    assume {:verifier.code 0} true;
    out_$i130 := $eq.i32(in_$i61, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92;

  $bb108_dummy:
    call {:si_unique_call 1} out_$p95, out_$p96, out_$p97, out_$p98, out_$p99, out_$i100, out_$i101, out_$p102, out_$p103, out_$p104, out_$p105, out_$p106, out_$i107, out_$i108, out_$p109, out_$i110, out_$i111, out_$p114, out_$p115, out_$i116, out_$i117, out_$i118, out_$p119, out_$i120, out_$i121, out_$i122, out_$p123, out_$i124, out_$i125, out_$p126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$p134, out_$p135, out_$i136, out_$i137, out_$p138, out_$p139, out_$p140, out_$i141, out_$p142, out_$p143, out_$p144, out_$p145, out_$p146, out_$p147, out_$p148, out_$i149, out_$i150, out_$p151, out_$p152, out_$i153, out_$i154, out_$p155, out_$p156, out_$i157, out_$i158, out_$i159, out_$p160, out_$p161, out_$p112, out_$i113, out_$p163, out_$p164, out_$p165, out_$p166, out_$i167, out_$i168, out_$i93, out_$p94, out_$i169 := team_nl_cmd_options_set_loop_$bb61(in_$p3, in_$p5, in_$p8, in_$i61, in_$p63, in_$p69, in_$i75, in_$i81, in_$i82, in_$i90, out_$p95, out_$p96, out_$p97, out_$p98, out_$p99, out_$i100, out_$i101, out_$p102, out_$p103, out_$p104, out_$p105, out_$p106, out_$i107, out_$i108, out_$p109, out_$i110, out_$i111, out_$p114, out_$p115, out_$i116, out_$i117, out_$i118, out_$p119, out_$i120, out_$i121, out_$i122, out_$p123, out_$i124, out_$i125, out_$p126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$p134, out_$p135, out_$i136, out_$i137, out_$p138, out_$p139, out_$p140, out_$i141, out_$p142, out_$p143, out_$p144, out_$p145, out_$p146, out_$p147, out_$p148, out_$i149, out_$i150, out_$p151, out_$p152, out_$i153, out_$i154, out_$p155, out_$p156, out_$i157, out_$i158, out_$i159, out_$p160, out_$p161, out_$p112, out_$i113, out_$p163, out_$p164, out_$p165, out_$p166, out_$i167, out_$i168, out_$i93, out_$p94, out_$i169);
    return;

  exit:
    return;
}



procedure team_nl_cmd_options_set_loop_$bb61(in_$p3: ref, in_$p5: ref, in_$p8: ref, in_$i61: i32, in_$p63: ref, in_$p69: ref, in_$i75: i32, in_$i81: i32, in_$i82: i8, in_$i90: i64, in_$p95: ref, in_$p96: ref, in_$p97: ref, in_$p98: ref, in_$p99: ref, in_$i100: i64, in_$i101: i1, in_$p102: ref, in_$p103: ref, in_$p104: ref, in_$p105: ref, in_$p106: ref, in_$i107: i32, in_$i108: i32, in_$p109: ref, in_$i110: i32, in_$i111: i1, in_$p114: ref, in_$p115: ref, in_$i116: i32, in_$i117: i1, in_$i118: i1, in_$p119: ref, in_$i120: i32, in_$i121: i1, in_$i122: i1, in_$p123: ref, in_$i124: i32, in_$i125: i1, in_$p126: ref, in_$i127: i1, in_$i128: i1, in_$i129: i1, in_$i130: i1, in_$i131: i1, in_$i132: i1, in_$i133: i32, in_$p134: ref, in_$p135: ref, in_$i136: i32, in_$i137: i1, in_$p138: ref, in_$p139: ref, in_$p140: ref, in_$i141: i32, in_$p142: ref, in_$p143: ref, in_$p144: ref, in_$p145: ref, in_$p146: ref, in_$p147: ref, in_$p148: ref, in_$i149: i64, in_$i150: i1, in_$p151: ref, in_$p152: ref, in_$i153: i8, in_$i154: i32, in_$p155: ref, in_$p156: ref, in_$i157: i32, in_$i158: i1, in_$i159: i32, in_$p160: ref, in_$p161: ref, in_$p112: ref, in_$i113: i8, in_$p163: ref, in_$p164: ref, in_$p165: ref, in_$p166: ref, in_$i167: i64, in_$i168: i1, in_$i93: i8, in_$p94: ref, in_$i169: i8) returns (out_$p95: ref, out_$p96: ref, out_$p97: ref, out_$p98: ref, out_$p99: ref, out_$i100: i64, out_$i101: i1, out_$p102: ref, out_$p103: ref, out_$p104: ref, out_$p105: ref, out_$p106: ref, out_$i107: i32, out_$i108: i32, out_$p109: ref, out_$i110: i32, out_$i111: i1, out_$p114: ref, out_$p115: ref, out_$i116: i32, out_$i117: i1, out_$i118: i1, out_$p119: ref, out_$i120: i32, out_$i121: i1, out_$i122: i1, out_$p123: ref, out_$i124: i32, out_$i125: i1, out_$p126: ref, out_$i127: i1, out_$i128: i1, out_$i129: i1, out_$i130: i1, out_$i131: i1, out_$i132: i1, out_$i133: i32, out_$p134: ref, out_$p135: ref, out_$i136: i32, out_$i137: i1, out_$p138: ref, out_$p139: ref, out_$p140: ref, out_$i141: i32, out_$p142: ref, out_$p143: ref, out_$p144: ref, out_$p145: ref, out_$p146: ref, out_$p147: ref, out_$p148: ref, out_$i149: i64, out_$i150: i1, out_$p151: ref, out_$p152: ref, out_$i153: i8, out_$i154: i32, out_$p155: ref, out_$p156: ref, out_$i157: i32, out_$i158: i1, out_$i159: i32, out_$p160: ref, out_$p161: ref, out_$p112: ref, out_$i113: i8, out_$p163: ref, out_$p164: ref, out_$p165: ref, out_$p166: ref, out_$i167: i64, out_$i168: i1, out_$i93: i8, out_$p94: ref, out_$i169: i8);
  modifies $M.0, $M.16, $M.25, $M.26, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.31, $M.32, $CurrAddr, $M.23, $M.24, $M.4, $M.3;



implementation team_nl_cmd_options_set_loop_$bb12(in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p8: ref, in_$i34: i32, in_$i35: i1, in_$p36: ref, in_$i37: i32, in_$i38: i1, in_$i39: i32, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$i43: i1, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$i47: i1, in_$p48: ref, in_$p49: ref, in_$i50: i8, in_$i51: i32, in_$i52: i1, in_$i53: i1, in_$i54: i1, in_$i55: i1, in_$i57: i1, in_$i58: i1, in_$i59: i1, in_$i60: i1, in_$i56: i32, in_$i61: i32, in_$p62: ref, in_$p63: ref, in_$i64: i1, in_$i65: i64, in_$i66: i1, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$i72: i64, in_$i73: i1, in_$i74: i32, in_$i75: i32, in_$p76: ref, in_$p77: ref, in_$i78: i64, in_$i79: i1, in_$i80: i32, in_$i81: i32, in_$i82: i8, in_$p84: ref, in_$p85: ref, in_$p86: ref, in_$p87: ref, in_$i88: i64, in_$p89: ref, in_$i90: i64, in_$i91: i1, in_$p95: ref, in_$p96: ref, in_$p97: ref, in_$p98: ref, in_$p99: ref, in_$i100: i64, in_$i101: i1, in_$p102: ref, in_$p103: ref, in_$p104: ref, in_$p105: ref, in_$p106: ref, in_$i107: i32, in_$i108: i32, in_$p109: ref, in_$i110: i32, in_$i111: i1, in_$p114: ref, in_$p115: ref, in_$i116: i32, in_$i117: i1, in_$i118: i1, in_$p119: ref, in_$i120: i32, in_$i121: i1, in_$i122: i1, in_$p123: ref, in_$i124: i32, in_$i125: i1, in_$p126: ref, in_$i127: i1, in_$i128: i1, in_$i129: i1, in_$i130: i1, in_$i131: i1, in_$i132: i1, in_$i133: i32, in_$p134: ref, in_$p135: ref, in_$i136: i32, in_$i137: i1, in_$p138: ref, in_$p139: ref, in_$p140: ref, in_$i141: i32, in_$p142: ref, in_$p143: ref, in_$p144: ref, in_$p145: ref, in_$p146: ref, in_$p147: ref, in_$p148: ref, in_$i149: i64, in_$i150: i1, in_$p151: ref, in_$p152: ref, in_$i153: i8, in_$i154: i32, in_$p155: ref, in_$p156: ref, in_$i157: i32, in_$i158: i1, in_$i159: i32, in_$p160: ref, in_$p161: ref, in_$p112: ref, in_$i113: i8, in_$p163: ref, in_$p164: ref, in_$p165: ref, in_$p166: ref, in_$i167: i64, in_$i168: i1, in_$i93: i8, in_$p94: ref, in_$i169: i8, in_$i92: i8, in_$i170: i1, in_$p171: ref, in_$i172: i32, in_$i173: i32, in_$i174: i1, in_$p33: ref) returns (out_$i34: i32, out_$i35: i1, out_$p36: ref, out_$i37: i32, out_$i38: i1, out_$i39: i32, out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$i43: i1, out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$i47: i1, out_$p48: ref, out_$p49: ref, out_$i50: i8, out_$i51: i32, out_$i52: i1, out_$i53: i1, out_$i54: i1, out_$i55: i1, out_$i57: i1, out_$i58: i1, out_$i59: i1, out_$i60: i1, out_$i56: i32, out_$i61: i32, out_$p62: ref, out_$p63: ref, out_$i64: i1, out_$i65: i64, out_$i66: i1, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$i72: i64, out_$i73: i1, out_$i74: i32, out_$i75: i32, out_$p76: ref, out_$p77: ref, out_$i78: i64, out_$i79: i1, out_$i80: i32, out_$i81: i32, out_$i82: i8, out_$p84: ref, out_$p85: ref, out_$p86: ref, out_$p87: ref, out_$i88: i64, out_$p89: ref, out_$i90: i64, out_$i91: i1, out_$p95: ref, out_$p96: ref, out_$p97: ref, out_$p98: ref, out_$p99: ref, out_$i100: i64, out_$i101: i1, out_$p102: ref, out_$p103: ref, out_$p104: ref, out_$p105: ref, out_$p106: ref, out_$i107: i32, out_$i108: i32, out_$p109: ref, out_$i110: i32, out_$i111: i1, out_$p114: ref, out_$p115: ref, out_$i116: i32, out_$i117: i1, out_$i118: i1, out_$p119: ref, out_$i120: i32, out_$i121: i1, out_$i122: i1, out_$p123: ref, out_$i124: i32, out_$i125: i1, out_$p126: ref, out_$i127: i1, out_$i128: i1, out_$i129: i1, out_$i130: i1, out_$i131: i1, out_$i132: i1, out_$i133: i32, out_$p134: ref, out_$p135: ref, out_$i136: i32, out_$i137: i1, out_$p138: ref, out_$p139: ref, out_$p140: ref, out_$i141: i32, out_$p142: ref, out_$p143: ref, out_$p144: ref, out_$p145: ref, out_$p146: ref, out_$p147: ref, out_$p148: ref, out_$i149: i64, out_$i150: i1, out_$p151: ref, out_$p152: ref, out_$i153: i8, out_$i154: i32, out_$p155: ref, out_$p156: ref, out_$i157: i32, out_$i158: i1, out_$i159: i32, out_$p160: ref, out_$p161: ref, out_$p112: ref, out_$i113: i8, out_$p163: ref, out_$p164: ref, out_$p165: ref, out_$p166: ref, out_$i167: i64, out_$i168: i1, out_$i93: i8, out_$p94: ref, out_$i169: i8, out_$i92: i8, out_$i170: i1, out_$p171: ref, out_$i172: i32, out_$i173: i32, out_$i174: i1, out_$p33: ref)
{

  entry:
    out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p44, out_$p45, out_$i46, out_$i47, out_$p48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i57, out_$i58, out_$i59, out_$i60, out_$i56, out_$i61, out_$p62, out_$p63, out_$i64, out_$i65, out_$i66, out_$p67, out_$p68, out_$p69, out_$p70, out_$p71, out_$i72, out_$i73, out_$i74, out_$i75, out_$p76, out_$p77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$p84, out_$p85, out_$p86, out_$p87, out_$i88, out_$p89, out_$i90, out_$i91, out_$p95, out_$p96, out_$p97, out_$p98, out_$p99, out_$i100, out_$i101, out_$p102, out_$p103, out_$p104, out_$p105, out_$p106, out_$i107, out_$i108, out_$p109, out_$i110, out_$i111, out_$p114, out_$p115, out_$i116, out_$i117, out_$i118, out_$p119, out_$i120, out_$i121, out_$i122, out_$p123, out_$i124, out_$i125, out_$p126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$p134, out_$p135, out_$i136, out_$i137, out_$p138, out_$p139, out_$p140, out_$i141, out_$p142, out_$p143, out_$p144, out_$p145, out_$p146, out_$p147, out_$p148, out_$i149, out_$i150, out_$p151, out_$p152, out_$i153, out_$i154, out_$p155, out_$p156, out_$i157, out_$i158, out_$i159, out_$p160, out_$p161, out_$p112, out_$i113, out_$p163, out_$p164, out_$p165, out_$p166, out_$i167, out_$i168, out_$i93, out_$p94, out_$i169, out_$i92, out_$i170, out_$p171, out_$i172, out_$i173, out_$i174, out_$p33 := in_$i34, in_$i35, in_$p36, in_$i37, in_$i38, in_$i39, in_$p40, in_$p41, in_$i42, in_$i43, in_$p44, in_$p45, in_$i46, in_$i47, in_$p48, in_$p49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i57, in_$i58, in_$i59, in_$i60, in_$i56, in_$i61, in_$p62, in_$p63, in_$i64, in_$i65, in_$i66, in_$p67, in_$p68, in_$p69, in_$p70, in_$p71, in_$i72, in_$i73, in_$i74, in_$i75, in_$p76, in_$p77, in_$i78, in_$i79, in_$i80, in_$i81, in_$i82, in_$p84, in_$p85, in_$p86, in_$p87, in_$i88, in_$p89, in_$i90, in_$i91, in_$p95, in_$p96, in_$p97, in_$p98, in_$p99, in_$i100, in_$i101, in_$p102, in_$p103, in_$p104, in_$p105, in_$p106, in_$i107, in_$i108, in_$p109, in_$i110, in_$i111, in_$p114, in_$p115, in_$i116, in_$i117, in_$i118, in_$p119, in_$i120, in_$i121, in_$i122, in_$p123, in_$i124, in_$i125, in_$p126, in_$i127, in_$i128, in_$i129, in_$i130, in_$i131, in_$i132, in_$i133, in_$p134, in_$p135, in_$i136, in_$i137, in_$p138, in_$p139, in_$p140, in_$i141, in_$p142, in_$p143, in_$p144, in_$p145, in_$p146, in_$p147, in_$p148, in_$i149, in_$i150, in_$p151, in_$p152, in_$i153, in_$i154, in_$p155, in_$p156, in_$i157, in_$i158, in_$i159, in_$p160, in_$p161, in_$p112, in_$i113, in_$p163, in_$p164, in_$p165, in_$p166, in_$i167, in_$i168, in_$i93, in_$p94, in_$i169, in_$i92, in_$i170, in_$p171, in_$i172, in_$i173, in_$i174, in_$p33;
    goto $bb12, exit;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_3559;

  $bb114:
    assume out_$i174 == 1;
    assume {:verifier.code 0} true;
    out_$p33 := out_$p171;
    goto $bb114_dummy;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb114;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    out_$i174 := $ne.i32(out_$i173, 0);
    goto corral_source_split_3768;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 701} out_$i173 := nla_ok(out_$p171, out_$i172);
    call {:si_unique_call 702} {:cexpr "tmp___9"} boogie_si_record_i32(out_$i173);
    goto corral_source_split_3767;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    out_$i172 := $load.i32($M.16, in_$p2);
    goto corral_source_split_3766;

  $bb113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 700} out_$p171 := nla_next(out_$p33, in_$p2);
    goto corral_source_split_3765;

  $bb111:
    assume out_$i170 == 1;
    assume {:verifier.code 0} true;
    goto $bb113;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb111;

  $bb110:
    assume {:verifier.code 0} true;
    out_$i170 := $trunc.i8.i1(out_$i92);
    goto corral_source_split_3761;

  $bb60:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb59:
    assume {:verifier.code 0} true;
    assume !(out_$i91 == 1);
    goto $bb60;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    out_$i92 := out_$i169;
    goto $bb60;

  $bb109:
    assume !(out_$i168 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3759;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    out_$i169 := out_$i113;
    assume true;
    goto $bb108, $bb109;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    out_$i168 := $ne.i64(out_$i167, out_$i90);
    goto corral_source_split_3677;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    out_$i167 := $p2i.ref.i64(out_$p166);
    goto corral_source_split_3676;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    out_$p166 := $add.ref($add.ref(out_$p165, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_3675;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    out_$p165 := $bitcast.ref.ref(out_$p164);
    goto corral_source_split_3674;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    out_$p164 := $load.ref($M.0, out_$p163);
    goto corral_source_split_3673;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    out_$p163 := $add.ref($add.ref($add.ref(out_$p112, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3672;

  $bb68:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3671;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    out_$p112, out_$i113 := out_$p94, 1;
    goto $bb68;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    out_$p112, out_$i113 := out_$p94, out_$i93;
    goto $bb68;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    out_$p112, out_$i113 := out_$p94, out_$i93;
    goto $bb68;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    out_$p112, out_$i113 := out_$p94, out_$i93;
    goto $bb68;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    out_$p112, out_$i113 := out_$p94, out_$i93;
    goto $bb68;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    out_$p112, out_$i113 := out_$p94, out_$i93;
    goto $bb68;

  $bb66:
    assume out_$i111 == 1;
    goto corral_source_split_3663;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    out_$i111 := $ne.i32(out_$i110, out_$i61);
    goto corral_source_split_3661;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    out_$i110 := $load.i32($M.0, out_$p109);
    goto corral_source_split_3660;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    out_$p109 := $add.ref($add.ref(out_$p96, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_3659;

  $bb65:
    assume {:verifier.code 0} true;
    goto corral_source_split_3658;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    out_$i108 := 0;
    goto $bb65;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    out_$i108 := out_$i107;
    goto $bb65;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    out_$i107 := $load.i32($M.0, out_$p106);
    goto corral_source_split_3654;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    out_$p106 := $add.ref($add.ref(out_$p105, $mul.ref(0, 3176)), $mul.ref(256, 1));
    goto corral_source_split_3653;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    out_$p105 := $load.ref($M.0, out_$p104);
    goto corral_source_split_3652;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    out_$p104 := $add.ref($add.ref(out_$p103, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_3651;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    out_$p103 := $load.ref($M.0, out_$p102);
    goto corral_source_split_3650;

  $bb63:
    assume out_$i101 == 1;
    out_$p102 := $add.ref($add.ref($add.ref(out_$p94, $mul.ref(0, 64)), $mul.ref(40, 1)), $mul.ref(8, 1));
    goto corral_source_split_3649;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    out_$i101 := $ne.i64(out_$i100, 0);
    goto corral_source_split_3647;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    out_$i100 := $p2i.ref.i64(out_$p99);
    goto corral_source_split_3646;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    out_$p99 := $load.ref($M.0, out_$p98);
    goto corral_source_split_3645;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    out_$p97 := $add.ref($add.ref(out_$p94, $mul.ref(0, 64)), $mul.ref(40, 1));
    out_$p98 := $add.ref($add.ref($add.ref(out_$p94, $mul.ref(0, 64)), $mul.ref(40, 1)), $mul.ref(8, 1));
    goto corral_source_split_3644;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    out_$p96 := $load.ref($M.0, out_$p95);
    goto corral_source_split_3643;

  $bb62:
    assume {:verifier.code 0} true;
    out_$p95 := $add.ref($add.ref(out_$p94, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_3642;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb61:
    call out_$p95, out_$p96, out_$p97, out_$p98, out_$p99, out_$i100, out_$i101, out_$p102, out_$p103, out_$p104, out_$p105, out_$p106, out_$i107, out_$i108, out_$p109, out_$i110, out_$i111, out_$p114, out_$p115, out_$i116, out_$i117, out_$i118, out_$p119, out_$i120, out_$i121, out_$i122, out_$p123, out_$i124, out_$i125, out_$p126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$p134, out_$p135, out_$i136, out_$i137, out_$p138, out_$p139, out_$p140, out_$i141, out_$p142, out_$p143, out_$p144, out_$p145, out_$p146, out_$p147, out_$p148, out_$i149, out_$i150, out_$p151, out_$p152, out_$i153, out_$i154, out_$p155, out_$p156, out_$i157, out_$i158, out_$i159, out_$p160, out_$p161, out_$p112, out_$i113, out_$p163, out_$p164, out_$p165, out_$p166, out_$i167, out_$i168, out_$i93, out_$p94, out_$i169 := team_nl_cmd_options_set_loop_$bb61(in_$p3, in_$p5, in_$p8, out_$i61, out_$p63, out_$p69, out_$i75, out_$i81, out_$i82, out_$i90, out_$p95, out_$p96, out_$p97, out_$p98, out_$p99, out_$i100, out_$i101, out_$p102, out_$p103, out_$p104, out_$p105, out_$p106, out_$i107, out_$i108, out_$p109, out_$i110, out_$i111, out_$p114, out_$p115, out_$i116, out_$i117, out_$i118, out_$p119, out_$i120, out_$i121, out_$i122, out_$p123, out_$i124, out_$i125, out_$p126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$p134, out_$p135, out_$i136, out_$i137, out_$p138, out_$p139, out_$p140, out_$i141, out_$p142, out_$p143, out_$p144, out_$p145, out_$p146, out_$p147, out_$p148, out_$i149, out_$i150, out_$p151, out_$p152, out_$i153, out_$i154, out_$p155, out_$p156, out_$i157, out_$i158, out_$i159, out_$p160, out_$p161, out_$p112, out_$i113, out_$p163, out_$p164, out_$p165, out_$p166, out_$i167, out_$i168, out_$i93, out_$p94, out_$i169);
    goto $bb61_last;

  $bb61_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3640;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    out_$i93, out_$p94 := 0, out_$p85;
    goto $bb61;

  $bb108:
    assume out_$i168 == 1;
    assume {:verifier.code 0} true;
    out_$i93, out_$p94 := out_$i113, out_$p164;
    assume false;
    return;

  $bb58:
    assume out_$i91 == 1;
    goto corral_source_split_3638;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    out_$i92 := 0;
    assume true;
    goto $bb58, $bb59;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    out_$i91 := $ne.i64(out_$i88, out_$i90);
    goto corral_source_split_3636;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    out_$i90 := $p2i.ref.i64(out_$p89);
    goto corral_source_split_3635;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    out_$p89 := $add.ref($add.ref(in_$p8, $mul.ref(0, 984)), $mul.ref(352, 1));
    goto corral_source_split_3634;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    out_$i88 := $p2i.ref.i64(out_$p87);
    goto corral_source_split_3633;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref($add.ref(out_$p86, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_3632;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    out_$p86 := $bitcast.ref.ref(out_$p85);
    goto corral_source_split_3631;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    out_$p85 := $load.ref($M.0, out_$p84);
    goto corral_source_split_3630;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref($add.ref($add.ref(in_$p8, $mul.ref(0, 984)), $mul.ref(352, 1)), $mul.ref(0, 1));
    goto corral_source_split_3629;

  $bb57:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3628;

  $bb56:
    assume !(out_$i79 == 1);
    assume {:verifier.code 0} true;
    out_$i81, out_$i82 := 0, 0;
    goto $bb57;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    out_$i81, out_$i82 := out_$i80, 1;
    goto $bb57;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} out_$i80 := nla_get_u32(out_$p77);
    call {:si_unique_call 685} {:cexpr "opt_array_index"} boogie_si_record_i32(out_$i80);
    goto corral_source_split_3626;

  $bb55:
    assume out_$i79 == 1;
    goto corral_source_split_3625;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    out_$i79 := $ne.i64(out_$i78, 0);
    goto corral_source_split_3623;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    out_$i78 := $p2i.ref.i64(out_$p77);
    goto corral_source_split_3622;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    out_$p77 := $load.ref($M.17, out_$p76);
    goto corral_source_split_3621;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref(in_$p4, $mul.ref(0, 64)), $mul.ref(7, 8));
    goto corral_source_split_3620;

  $bb54:
    assume {:verifier.code 0} true;
    goto corral_source_split_3619;

  $bb53:
    assume !(out_$i73 == 1);
    assume {:verifier.code 0} true;
    out_$i75 := 0;
    goto $bb54;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    out_$i75 := out_$i74;
    goto $bb54;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 682} out_$i74 := nla_get_u32(out_$p71);
    call {:si_unique_call 683} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i74);
    goto corral_source_split_3617;

  $bb52:
    assume out_$i73 == 1;
    goto corral_source_split_3616;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    out_$i73 := $ne.i64(out_$i72, 0);
    goto corral_source_split_3614;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    out_$i72 := $p2i.ref.i64(out_$p71);
    goto corral_source_split_3613;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    out_$p71 := $load.ref($M.17, out_$p70);
    goto corral_source_split_3612;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref(in_$p4, $mul.ref(0, 64)), $mul.ref(6, 8));
    goto corral_source_split_3611;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} out_$p69 := nla_data(out_$p68);
    goto corral_source_split_3610;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    out_$p68 := $load.ref($M.17, out_$p67);
    goto corral_source_split_3609;

  $bb51:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref(in_$p4, $mul.ref(0, 64)), $mul.ref(1, 8));
    goto corral_source_split_3608;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb47:
    assume {:verifier.code 0} true;
    assume !(out_$i64 == 1);
    goto $bb48;

  $bb50:
    assume {:verifier.code 0} true;
    assume !(out_$i66 == 1);
    goto $bb48;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    out_$i66 := $eq.i64(out_$i65, 0);
    goto corral_source_split_3604;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    out_$i65 := $p2i.ref.i64(out_$p63);
    goto corral_source_split_3603;

  $bb46:
    assume out_$i64 == 1;
    goto corral_source_split_3602;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    out_$i64 := $ne.i32(out_$i61, 3);
    goto corral_source_split_3600;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    out_$p63 := $load.ref($M.17, out_$p62);
    goto corral_source_split_3599;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref(in_$p4, $mul.ref(0, 64)), $mul.ref(4, 8));
    goto corral_source_split_3598;

  $bb44:
    assume {:verifier.code 0} true;
    goto corral_source_split_3597;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    out_$i61 := 4;
    goto $bb44;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    out_$i61 := 2;
    goto $bb44;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    out_$i61 := 3;
    goto $bb44;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    out_$i61 := 1;
    goto $bb44;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    out_$i61 := 0;
    goto $bb44;

  $bb42:
    assume out_$i60 == 1;
    goto corral_source_split_3595;

  $bb40:
    assume out_$i59 == 1;
    assume {:verifier.code 0} true;
    out_$i60 := $eq.i32(out_$i51, 3);
    assume {:verifier.code 0} true;
    out_$i56 := out_$i37;
    assume true;
    goto $bb42;

  $bb27:
    assume out_$i52 == 1;
    assume {:verifier.code 0} true;
    out_$i59 := $slt.i32(out_$i51, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb26:
    assume {:verifier.code 0} true;
    out_$i52 := $slt.i32(out_$i51, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    out_$i51 := $zext.i8.i32(out_$i50);
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} out_$i50 := nla_get_u8(out_$p49);
    call {:si_unique_call 680} {:cexpr "tmp___1"} boogie_si_record_i8(out_$i50);
    goto corral_source_split_3585;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    out_$p49 := $load.ref($M.17, out_$p48);
    goto corral_source_split_3584;

  $bb25:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(in_$p4, $mul.ref(0, 64)), $mul.ref(3, 8));
    goto corral_source_split_3583;

  $bb24:
    assume !(out_$i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    out_$i47 := $eq.i64(out_$i46, 0);
    goto corral_source_split_3581;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    out_$i46 := $p2i.ref.i64(out_$p45);
    goto corral_source_split_3580;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    out_$p45 := $load.ref($M.17, out_$p44);
    goto corral_source_split_3579;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(in_$p4, $mul.ref(0, 64)), $mul.ref(3, 8));
    goto corral_source_split_3578;

  $bb22:
    assume !(out_$i43 == 1);
    goto corral_source_split_3577;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    out_$i43 := $eq.i64(out_$i42, 0);
    goto corral_source_split_3575;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    out_$i42 := $p2i.ref.i64(out_$p41);
    goto corral_source_split_3574;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    out_$p41 := $load.ref($M.17, out_$p40);
    goto corral_source_split_3573;

  $bb19:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(in_$p4, $mul.ref(0, 64)), $mul.ref(1, 8));
    goto corral_source_split_3572;

  $bb18:
    assume !(out_$i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    out_$i39 := out_$i37;
    assume true;
    goto $bb18;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    out_$i38 := $ne.i32(out_$i37, 0);
    goto corral_source_split_3568;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 677} out_$i37 := nla_parse_nested(out_$p36, 7, out_$p33, team_nl_option_policy);
    call {:si_unique_call 678} {:cexpr "err"} boogie_si_record_i32(out_$i37);
    goto corral_source_split_3567;

  $bb16:
    assume {:verifier.code 0} true;
    out_$p36 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_3566;

  $bb15:
    assume !(out_$i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    out_$i35 := $ne.i32(out_$i34, 1);
    goto corral_source_split_3562;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 675} out_$i34 := nla_type(out_$p33);
    call {:si_unique_call 676} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i34);
    goto corral_source_split_3561;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb41:
    assume !(out_$i59 == 1);
    goto corral_source_split_3593;

  $bb38:
    assume out_$i58 == 1;
    goto corral_source_split_3591;

  $bb29:
    assume out_$i53 == 1;
    assume {:verifier.code 0} true;
    out_$i58 := $eq.i32(out_$i51, 6);
    assume {:verifier.code 0} true;
    out_$i56 := out_$i37;
    assume true;
    goto $bb38;

  $bb28:
    assume !(out_$i52 == 1);
    assume {:verifier.code 0} true;
    out_$i53 := $slt.i32(out_$i51, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb36:
    assume out_$i57 == 1;
    goto corral_source_split_3589;

  $bb31:
    assume out_$i54 == 1;
    assume {:verifier.code 0} true;
    out_$i57 := $eq.i32(out_$i51, 11);
    assume {:verifier.code 0} true;
    out_$i56 := out_$i37;
    assume true;
    goto $bb36;

  $bb30:
    assume !(out_$i53 == 1);
    assume {:verifier.code 0} true;
    out_$i54 := $slt.i32(out_$i51, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb33:
    assume out_$i55 == 1;
    goto corral_source_split_3587;

  $bb32:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    out_$i55 := $eq.i32(out_$i51, 14);
    assume {:verifier.code 0} true;
    out_$i56 := out_$i37;
    assume true;
    goto $bb33;

  $bb64:
    assume !(out_$i101 == 1);
    goto corral_source_split_3656;

  $bb69:
    assume out_$i117 == 1;
    goto corral_source_split_3679;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    out_$i117 := $ne.i32(out_$i116, 0);
    goto corral_source_split_3669;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 686} out_$i116 := strcmp(out_$p115, out_$p69);
    call {:si_unique_call 687} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i116);
    goto corral_source_split_3668;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    out_$p115 := $load.ref($M.0, out_$p114);
    goto corral_source_split_3667;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    out_$p114 := $add.ref($add.ref(out_$p96, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_3666;

  $bb67:
    assume !(out_$i111 == 1);
    goto corral_source_split_3665;

  $bb71:
    assume out_$i118 == 1;
    goto corral_source_split_3684;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    out_$i118 := $ne.i32(out_$i108, out_$i75);
    goto corral_source_split_3682;

  $bb70:
    assume !(out_$i117 == 1);
    goto corral_source_split_3681;

  $bb77:
    assume !(out_$i122 == 1);
    goto corral_source_split_3698;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    out_$i122 := $trunc.i8.i1(out_$i82);
    goto corral_source_split_3692;

  $bb73:
    assume out_$i121 == 1;
    goto corral_source_split_3691;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    out_$i121 := $ne.i32(out_$i120, 0);
    goto corral_source_split_3689;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    out_$i120 := $load.i32($M.0, out_$p119);
    goto corral_source_split_3688;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    out_$p119 := $add.ref($add.ref(out_$p96, $mul.ref(0, 64)), $mul.ref(28, 1));
    goto corral_source_split_3687;

  $bb72:
    assume !(out_$i118 == 1);
    goto corral_source_split_3686;

  $bb78:
    assume out_$i125 == 1;
    goto corral_source_split_3700;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    out_$i125 := $ne.i32(out_$i124, out_$i81);
    goto corral_source_split_3696;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    out_$i124 := $load.i32($M.0, out_$p123);
    goto corral_source_split_3695;

  $bb75:
    out_$p123 := $add.ref($add.ref($add.ref(out_$p94, $mul.ref(0, 64)), $mul.ref(40, 1)), $mul.ref(0, 1));
    goto corral_source_split_3694;

  $bb74:
    assume {:verifier.code 0} true;
    assume !(out_$i121 == 1);
    goto $bb75;

  $bb76:
    assume {:verifier.code 0} true;
    assume out_$i122 == 1;
    goto $bb75;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} list_add(out_$p161, in_$p3);
    goto corral_source_split_3757;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    out_$p161 := $add.ref($add.ref(out_$p94, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_3756;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p160, 1);
    goto corral_source_split_3755;

  $bb107:
    assume {:verifier.code 0} true;
    out_$p160 := $add.ref($add.ref(out_$p94, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_3754;

  $bb106:
    assume !(out_$i158 == 1);
    assume {:verifier.code 0} true;
    goto $bb107;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    out_$i159 := out_$i157;
    assume true;
    goto $bb106;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    out_$i158 := $ne.i32(out_$i157, 0);
    goto corral_source_split_3741;

  $bb99:
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} out_$i157 := team_option_set(in_$p8, out_$p94, in_$p5);
    call {:si_unique_call 696} {:cexpr "err"} boogie_si_record_i32(out_$i157);
    goto corral_source_split_3740;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    goto $bb99;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    goto $bb99;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    goto $bb99;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    goto $bb99;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    goto $bb99;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p135, out_$i133);
    goto corral_source_split_3738;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    out_$p135 := $bitcast.ref.ref(out_$p134);
    goto corral_source_split_3737;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    out_$p134 := $add.ref($add.ref(in_$p5, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3736;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} out_$i133 := nla_get_u32(out_$p63);
    goto corral_source_split_3735;

  $bb97:
    assume out_$i132 == 1;
    goto corral_source_split_3734;

  $bb95:
    assume out_$i131 == 1;
    assume {:verifier.code 0} true;
    out_$i132 := $eq.i32(out_$i61, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97;

  $bb86:
    assume out_$i127 == 1;
    assume {:verifier.code 0} true;
    out_$i131 := $slt.i32(out_$i61, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  $bb85:
    assume {:verifier.code 0} true;
    out_$i127 := $slt.i32(out_$i61, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p126, out_$p97);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb84:
    assume {:verifier.code 0} true;
    out_$p126 := $add.ref($add.ref(in_$p5, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_3702;

  $bb83:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb79:
    assume !(out_$i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p140, out_$p138);
    goto corral_source_split_3748;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    out_$p140 := $bitcast.ref.ref(out_$p139);
    goto corral_source_split_3747;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    out_$p139 := $add.ref($add.ref(in_$p5, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3746;

  $bb102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 697} out_$p138 := nla_data(out_$p63);
    goto corral_source_split_3745;

  $bb101:
    assume !(out_$i137 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    out_$i137 := $sgt.i32(out_$i136, 32);
    goto corral_source_split_3732;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 692} out_$i136 := nla_len(out_$p63);
    call {:si_unique_call 693} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i136);
    goto corral_source_split_3731;

  $bb96:
    assume !(out_$i131 == 1);
    goto corral_source_split_3730;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p148, out_$p145);
    goto corral_source_split_3714;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    out_$p148 := $add.ref($add.ref(out_$p147, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3713;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    out_$p147 := $bitcast.ref.ref(out_$p146);
    goto corral_source_split_3712;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    out_$p146 := $add.ref($add.ref(in_$p5, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3711;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 690} out_$p145 := nla_data(out_$p63);
    goto corral_source_split_3710;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p144, out_$i141);
    goto corral_source_split_3709;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    out_$p144 := $add.ref($add.ref(out_$p143, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3708;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    out_$p143 := $bitcast.ref.ref(out_$p142);
    goto corral_source_split_3707;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    out_$p142 := $add.ref($add.ref(in_$p5, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3706;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} out_$i141 := nla_len(out_$p63);
    call {:si_unique_call 689} {:cexpr "tmp___7"} boogie_si_record_i32(out_$i141);
    goto corral_source_split_3705;

  $bb88:
    assume out_$i128 == 1;
    goto corral_source_split_3704;

  $bb87:
    assume !(out_$i127 == 1);
    assume {:verifier.code 0} true;
    out_$i128 := $slt.i32(out_$i61, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p152, out_$i153);
    goto corral_source_split_3722;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    out_$i153 := $zext.i1.i8(out_$i150);
    goto corral_source_split_3721;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    out_$p152 := $bitcast.ref.ref(out_$p151);
    goto corral_source_split_3720;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    out_$p151 := $add.ref($add.ref(in_$p5, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3719;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    out_$i150 := $ne.i64(out_$i149, 0);
    goto corral_source_split_3718;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    out_$i149 := $p2i.ref.i64(out_$p63);
    goto corral_source_split_3717;

  $bb90:
    assume out_$i129 == 1;
    goto corral_source_split_3716;

  $bb89:
    assume !(out_$i128 == 1);
    assume {:verifier.code 0} true;
    out_$i129 := $slt.i32(out_$i61, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p156, out_$i154);
    goto corral_source_split_3728;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    out_$p156 := $bitcast.ref.ref(out_$p155);
    goto corral_source_split_3727;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    out_$p155 := $add.ref($add.ref(in_$p5, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3726;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} out_$i154 := nla_get_s32(out_$p63);
    goto corral_source_split_3725;

  $bb92:
    assume out_$i130 == 1;
    goto corral_source_split_3724;

  $bb91:
    assume !(out_$i129 == 1);
    assume {:verifier.code 0} true;
    out_$i130 := $eq.i32(out_$i61, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92;

  $bb114_dummy:
    call {:si_unique_call 1} out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p44, out_$p45, out_$i46, out_$i47, out_$p48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i57, out_$i58, out_$i59, out_$i60, out_$i56, out_$i61, out_$p62, out_$p63, out_$i64, out_$i65, out_$i66, out_$p67, out_$p68, out_$p69, out_$p70, out_$p71, out_$i72, out_$i73, out_$i74, out_$i75, out_$p76, out_$p77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$p84, out_$p85, out_$p86, out_$p87, out_$i88, out_$p89, out_$i90, out_$i91, out_$p95, out_$p96, out_$p97, out_$p98, out_$p99, out_$i100, out_$i101, out_$p102, out_$p103, out_$p104, out_$p105, out_$p106, out_$i107, out_$i108, out_$p109, out_$i110, out_$i111, out_$p114, out_$p115, out_$i116, out_$i117, out_$i118, out_$p119, out_$i120, out_$i121, out_$i122, out_$p123, out_$i124, out_$i125, out_$p126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$p134, out_$p135, out_$i136, out_$i137, out_$p138, out_$p139, out_$p140, out_$i141, out_$p142, out_$p143, out_$p144, out_$p145, out_$p146, out_$p147, out_$p148, out_$i149, out_$i150, out_$p151, out_$p152, out_$i153, out_$i154, out_$p155, out_$p156, out_$i157, out_$i158, out_$i159, out_$p160, out_$p161, out_$p112, out_$i113, out_$p163, out_$p164, out_$p165, out_$p166, out_$i167, out_$i168, out_$i93, out_$p94, out_$i169, out_$i92, out_$i170, out_$p171, out_$i172, out_$i173, out_$i174, out_$p33 := team_nl_cmd_options_set_loop_$bb12(in_$p2, in_$p3, in_$p4, in_$p5, in_$p8, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p44, out_$p45, out_$i46, out_$i47, out_$p48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i57, out_$i58, out_$i59, out_$i60, out_$i56, out_$i61, out_$p62, out_$p63, out_$i64, out_$i65, out_$i66, out_$p67, out_$p68, out_$p69, out_$p70, out_$p71, out_$i72, out_$i73, out_$i74, out_$i75, out_$p76, out_$p77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$p84, out_$p85, out_$p86, out_$p87, out_$i88, out_$p89, out_$i90, out_$i91, out_$p95, out_$p96, out_$p97, out_$p98, out_$p99, out_$i100, out_$i101, out_$p102, out_$p103, out_$p104, out_$p105, out_$p106, out_$i107, out_$i108, out_$p109, out_$i110, out_$i111, out_$p114, out_$p115, out_$i116, out_$i117, out_$i118, out_$p119, out_$i120, out_$i121, out_$i122, out_$p123, out_$i124, out_$i125, out_$p126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$p134, out_$p135, out_$i136, out_$i137, out_$p138, out_$p139, out_$p140, out_$i141, out_$p142, out_$p143, out_$p144, out_$p145, out_$p146, out_$p147, out_$p148, out_$i149, out_$i150, out_$p151, out_$p152, out_$i153, out_$i154, out_$p155, out_$p156, out_$i157, out_$i158, out_$i159, out_$p160, out_$p161, out_$p112, out_$i113, out_$p163, out_$p164, out_$p165, out_$p166, out_$i167, out_$i168, out_$i93, out_$p94, out_$i169, out_$i92, out_$i170, out_$p171, out_$i172, out_$i173, out_$i174, out_$p33);
    return;

  exit:
    return;
}



procedure team_nl_cmd_options_set_loop_$bb12(in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p8: ref, in_$i34: i32, in_$i35: i1, in_$p36: ref, in_$i37: i32, in_$i38: i1, in_$i39: i32, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$i43: i1, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$i47: i1, in_$p48: ref, in_$p49: ref, in_$i50: i8, in_$i51: i32, in_$i52: i1, in_$i53: i1, in_$i54: i1, in_$i55: i1, in_$i57: i1, in_$i58: i1, in_$i59: i1, in_$i60: i1, in_$i56: i32, in_$i61: i32, in_$p62: ref, in_$p63: ref, in_$i64: i1, in_$i65: i64, in_$i66: i1, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$i72: i64, in_$i73: i1, in_$i74: i32, in_$i75: i32, in_$p76: ref, in_$p77: ref, in_$i78: i64, in_$i79: i1, in_$i80: i32, in_$i81: i32, in_$i82: i8, in_$p84: ref, in_$p85: ref, in_$p86: ref, in_$p87: ref, in_$i88: i64, in_$p89: ref, in_$i90: i64, in_$i91: i1, in_$p95: ref, in_$p96: ref, in_$p97: ref, in_$p98: ref, in_$p99: ref, in_$i100: i64, in_$i101: i1, in_$p102: ref, in_$p103: ref, in_$p104: ref, in_$p105: ref, in_$p106: ref, in_$i107: i32, in_$i108: i32, in_$p109: ref, in_$i110: i32, in_$i111: i1, in_$p114: ref, in_$p115: ref, in_$i116: i32, in_$i117: i1, in_$i118: i1, in_$p119: ref, in_$i120: i32, in_$i121: i1, in_$i122: i1, in_$p123: ref, in_$i124: i32, in_$i125: i1, in_$p126: ref, in_$i127: i1, in_$i128: i1, in_$i129: i1, in_$i130: i1, in_$i131: i1, in_$i132: i1, in_$i133: i32, in_$p134: ref, in_$p135: ref, in_$i136: i32, in_$i137: i1, in_$p138: ref, in_$p139: ref, in_$p140: ref, in_$i141: i32, in_$p142: ref, in_$p143: ref, in_$p144: ref, in_$p145: ref, in_$p146: ref, in_$p147: ref, in_$p148: ref, in_$i149: i64, in_$i150: i1, in_$p151: ref, in_$p152: ref, in_$i153: i8, in_$i154: i32, in_$p155: ref, in_$p156: ref, in_$i157: i32, in_$i158: i1, in_$i159: i32, in_$p160: ref, in_$p161: ref, in_$p112: ref, in_$i113: i8, in_$p163: ref, in_$p164: ref, in_$p165: ref, in_$p166: ref, in_$i167: i64, in_$i168: i1, in_$i93: i8, in_$p94: ref, in_$i169: i8, in_$i92: i8, in_$i170: i1, in_$p171: ref, in_$i172: i32, in_$i173: i32, in_$i174: i1, in_$p33: ref) returns (out_$i34: i32, out_$i35: i1, out_$p36: ref, out_$i37: i32, out_$i38: i1, out_$i39: i32, out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$i43: i1, out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$i47: i1, out_$p48: ref, out_$p49: ref, out_$i50: i8, out_$i51: i32, out_$i52: i1, out_$i53: i1, out_$i54: i1, out_$i55: i1, out_$i57: i1, out_$i58: i1, out_$i59: i1, out_$i60: i1, out_$i56: i32, out_$i61: i32, out_$p62: ref, out_$p63: ref, out_$i64: i1, out_$i65: i64, out_$i66: i1, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$i72: i64, out_$i73: i1, out_$i74: i32, out_$i75: i32, out_$p76: ref, out_$p77: ref, out_$i78: i64, out_$i79: i1, out_$i80: i32, out_$i81: i32, out_$i82: i8, out_$p84: ref, out_$p85: ref, out_$p86: ref, out_$p87: ref, out_$i88: i64, out_$p89: ref, out_$i90: i64, out_$i91: i1, out_$p95: ref, out_$p96: ref, out_$p97: ref, out_$p98: ref, out_$p99: ref, out_$i100: i64, out_$i101: i1, out_$p102: ref, out_$p103: ref, out_$p104: ref, out_$p105: ref, out_$p106: ref, out_$i107: i32, out_$i108: i32, out_$p109: ref, out_$i110: i32, out_$i111: i1, out_$p114: ref, out_$p115: ref, out_$i116: i32, out_$i117: i1, out_$i118: i1, out_$p119: ref, out_$i120: i32, out_$i121: i1, out_$i122: i1, out_$p123: ref, out_$i124: i32, out_$i125: i1, out_$p126: ref, out_$i127: i1, out_$i128: i1, out_$i129: i1, out_$i130: i1, out_$i131: i1, out_$i132: i1, out_$i133: i32, out_$p134: ref, out_$p135: ref, out_$i136: i32, out_$i137: i1, out_$p138: ref, out_$p139: ref, out_$p140: ref, out_$i141: i32, out_$p142: ref, out_$p143: ref, out_$p144: ref, out_$p145: ref, out_$p146: ref, out_$p147: ref, out_$p148: ref, out_$i149: i64, out_$i150: i1, out_$p151: ref, out_$p152: ref, out_$i153: i8, out_$i154: i32, out_$p155: ref, out_$p156: ref, out_$i157: i32, out_$i158: i1, out_$i159: i32, out_$p160: ref, out_$p161: ref, out_$p112: ref, out_$i113: i8, out_$p163: ref, out_$p164: ref, out_$p165: ref, out_$p166: ref, out_$i167: i64, out_$i168: i1, out_$i93: i8, out_$p94: ref, out_$i169: i8, out_$i92: i8, out_$i170: i1, out_$p171: ref, out_$i172: i32, out_$i173: i32, out_$i174: i1, out_$p33: ref);
  modifies $M.16, $M.0, $M.25, $M.26, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.31, $M.32, $CurrAddr, $M.23, $M.24, $M.4, $M.3;



implementation team_nl_cmd_options_get_loop_$bb8(in_$p2: ref, in_$i16: i64, in_$p19: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$i26: i1, in_$p18: ref) returns (out_$p19: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$i26: i1, out_$p18: ref)
{

  entry:
    out_$p19, out_$p21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p18 := in_$p19, in_$p21, in_$p22, in_$p23, in_$p24, in_$i25, in_$i26, in_$p18;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_3798;

  $bb10:
    assume out_$i26 == 1;
    assume {:verifier.code 0} true;
    out_$p18 := out_$p22;
    goto $bb10_dummy;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    out_$i26 := $ne.i64(out_$i25, in_$i16);
    goto corral_source_split_3807;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    out_$i25 := $p2i.ref.i64(out_$p24);
    goto corral_source_split_3806;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p23, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_3805;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    out_$p23 := $bitcast.ref.ref(out_$p22);
    goto corral_source_split_3804;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    out_$p22 := $load.ref($M.0, out_$p21);
    goto corral_source_split_3803;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref($add.ref(out_$p18, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3802;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 707} list_add_tail(out_$p19, in_$p2);
    goto corral_source_split_3801;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(out_$p18, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_3800;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p19, out_$p21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p18 := team_nl_cmd_options_get_loop_$bb8(in_$p2, in_$i16, out_$p19, out_$p21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p18);
    return;

  exit:
    return;
}



procedure team_nl_cmd_options_get_loop_$bb8(in_$p2: ref, in_$i16: i64, in_$p19: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$i26: i1, in_$p18: ref) returns (out_$p19: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$i26: i1, out_$p18: ref);



implementation team_init_loop_$bb6(in_$p15: ref, in_$i16: i32, in_$i17: i32, in_$i18: i1, in_$i14: i32) returns (out_$p15: ref, out_$i16: i32, out_$i17: i32, out_$i18: i1, out_$i14: i32)
{

  entry:
    out_$p15, out_$i16, out_$i17, out_$i18, out_$i14 := in_$p15, in_$i16, in_$i17, in_$i18, in_$i14;
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4011;

  $bb8:
    assume out_$i18 == 1;
    assume {:verifier.code 0} true;
    out_$i14 := out_$i16;
    goto $bb8_dummy;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    out_$i18 := $slt.i32(out_$i16, out_$i17);
    goto corral_source_split_4016;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    out_$i17 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_4015;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} out_$i16 := cpumask_next(out_$i14, out_$p15);
    call {:si_unique_call 767} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i16);
    goto corral_source_split_4014;

  $bb7:
    assume {:verifier.code 0} true;
    out_$p15 := $load.ref($M.0, cpu_possible_mask);
    goto corral_source_split_4013;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb8_dummy:
    call {:si_unique_call 1} out_$p15, out_$i16, out_$i17, out_$i18, out_$i14 := team_init_loop_$bb6(out_$p15, out_$i16, out_$i17, out_$i18, out_$i14);
    return;

  exit:
    return;
}



procedure team_init_loop_$bb6(in_$p15: ref, in_$i16: i32, in_$i17: i32, in_$i18: i1, in_$i14: i32) returns (out_$p15: ref, out_$i16: i32, out_$i17: i32, out_$i18: i1, out_$i14: i32);



implementation team_uninit_loop_$bb4(in_$p2: ref, in_$i17: i64, in_$p21: ref, in_$p22: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$i30: i64, in_$i31: i1, in_$p19: ref, in_$p20: ref, in_vslice_dummy_var_65: i32) returns (out_$p21: ref, out_$p22: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$i30: i64, out_$i31: i1, out_$p19: ref, out_$p20: ref, out_vslice_dummy_var_65: i32)
{

  entry:
    out_$p21, out_$p22, out_$p25, out_$p26, out_$p27, out_$p28, out_$p29, out_$i30, out_$i31, out_$p19, out_$p20, out_vslice_dummy_var_65 := in_$p21, in_$p22, in_$p25, in_$p26, in_$p27, in_$p28, in_$p29, in_$i30, in_$i31, in_$p19, in_$p20, in_vslice_dummy_var_65;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4178;

  $bb6:
    assume out_$i31 == 1;
    assume {:verifier.code 0} true;
    out_$p19, out_$p20 := out_$p28, out_$p19;
    goto $bb6_dummy;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    out_$i31 := $ne.i64(out_$i30, in_$i17);
    goto corral_source_split_4189;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    out_$i30 := $p2i.ref.i64(out_$p29);
    goto corral_source_split_4188;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p19, $mul.ref(0, 160)), $mul.ref(24, 1));
    goto corral_source_split_4187;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref(out_$p27, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_4186;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    out_$p27 := $bitcast.ref.ref(out_$p26);
    goto corral_source_split_4185;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    out_$p26 := $load.ref($M.19, out_$p25);
    goto corral_source_split_4184;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref($add.ref(out_$p19, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_4183;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 786} out_vslice_dummy_var_65 := team_port_del(in_$p2, out_$p22);
    goto corral_source_split_4182;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    out_$p22 := $load.ref($M.20, out_$p21);
    goto corral_source_split_4181;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p20, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_4180;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p21, out_$p22, out_$p25, out_$p26, out_$p27, out_$p28, out_$p29, out_$i30, out_$i31, out_$p19, out_$p20, out_vslice_dummy_var_65 := team_uninit_loop_$bb4(in_$p2, in_$i17, out_$p21, out_$p22, out_$p25, out_$p26, out_$p27, out_$p28, out_$p29, out_$i30, out_$i31, out_$p19, out_$p20, out_vslice_dummy_var_65);
    return;

  exit:
    return;
}



procedure team_uninit_loop_$bb4(in_$p2: ref, in_$i17: i64, in_$p21: ref, in_$p22: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$i30: i64, in_$i31: i1, in_$p19: ref, in_$p20: ref, in_vslice_dummy_var_65: i32) returns (out_$p21: ref, out_$p22: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$i30: i64, out_$i31: i1, out_$p19: ref, out_$p20: ref, out_vslice_dummy_var_65: i32);
  modifies $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $CurrAddr, $M.16, $M.25, $M.26, $M.31, $M.32, $M.4, $M.3, $M.23, $M.24;



implementation team_select_queue_loop_$bb6(in_$p0: ref, in_$i23: i16, in_$i24: i32, in_$p25: ref, in_$i26: i32, in_$i27: i16, in_$i28: i32, in_$i29: i32, in_$i30: i16, in_$i31: i32, in_$p32: ref, in_$i33: i32, in_$i34: i1, in_$i35: i16) returns (out_$i23: i16, out_$i24: i32, out_$p25: ref, out_$i26: i32, out_$i27: i16, out_$i28: i32, out_$i29: i32, out_$i30: i16, out_$i31: i32, out_$p32: ref, out_$i33: i32, out_$i34: i1, out_$i35: i16)
{

  entry:
    out_$i23, out_$i24, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$i35 := in_$i23, in_$i24, in_$p25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$p32, in_$i33, in_$i34, in_$i35;
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4351;

  $bb7:
    assume out_$i34 == 1;
    assume {:verifier.code 0} true;
    out_$i23 := out_$i30;
    goto $bb7_dummy;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    out_$i35 := out_$i30;
    assume true;
    goto $bb7;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    out_$i34 := $uge.i32(out_$i31, out_$i33);
    goto corral_source_split_4362;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i32($M.0, out_$p32);
    goto corral_source_split_4361;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(in_$p0, $mul.ref(0, 3176)), $mul.ref(932, 1));
    goto corral_source_split_4360;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    out_$i31 := $zext.i16.i32(out_$i30);
    goto corral_source_split_4359;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    out_$i30 := $trunc.i32.i16(out_$i29);
    call {:si_unique_call 825} {:cexpr "txq"} boogie_si_record_i16(out_$i30);
    goto corral_source_split_4358;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    out_$i29 := $sub.i32(out_$i24, out_$i28);
    goto corral_source_split_4357;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    out_$i28 := $zext.i16.i32(out_$i27);
    goto corral_source_split_4356;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    out_$i27 := $trunc.i32.i16(out_$i26);
    goto corral_source_split_4355;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i32($M.0, out_$p25);
    goto corral_source_split_4354;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(in_$p0, $mul.ref(0, 3176)), $mul.ref(932, 1));
    goto corral_source_split_4353;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    out_$i24 := $zext.i16.i32(out_$i23);
    goto corral_source_split_4352;

  $bb7_dummy:
    call {:si_unique_call 1} out_$i23, out_$i24, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$i35 := team_select_queue_loop_$bb6(in_$p0, out_$i23, out_$i24, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$i35);
    return;

  exit:
    return;
}



procedure team_select_queue_loop_$bb6(in_$p0: ref, in_$i23: i16, in_$i24: i32, in_$p25: ref, in_$i26: i32, in_$i27: i16, in_$i28: i32, in_$i29: i32, in_$i30: i16, in_$i31: i32, in_$p32: ref, in_$i33: i32, in_$i34: i1, in_$i35: i16) returns (out_$i23: i16, out_$i24: i32, out_$p25: ref, out_$i26: i32, out_$i27: i16, out_$i28: i32, out_$i29: i32, out_$i30: i16, out_$i31: i32, out_$p32: ref, out_$i33: i32, out_$i34: i1, out_$i35: i16);



implementation team_change_rx_flags_loop_$bb10(in_$p0: ref, in_$i1: i32, in_$p3: ref, in_$i19: i64, in_$i22: i32, in_$i23: i1, in_$p24: ref, in_$i25: i32, in_$i26: i32, in_$i27: i1, in_$i28: i32, in_$p29: ref, in_$p30: ref, in_$i32: i32, in_$i33: i1, in_$p34: ref, in_$i35: i32, in_$i36: i32, in_$i37: i1, in_$i38: i32, in_$p39: ref, in_$p40: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$i46: i32, in_$i47: i1, in_$i48: i1, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$i53: i64, in_$i54: i1, in_$p21: ref, in_vslice_dummy_var_68: i32, in_vslice_dummy_var_69: i32, in_vslice_dummy_var_70: i32) returns (out_$i22: i32, out_$i23: i1, out_$p24: ref, out_$i25: i32, out_$i26: i32, out_$i27: i1, out_$i28: i32, out_$p29: ref, out_$p30: ref, out_$i32: i32, out_$i33: i1, out_$p34: ref, out_$i35: i32, out_$i36: i32, out_$i37: i1, out_$i38: i32, out_$p39: ref, out_$p40: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$i46: i32, out_$i47: i1, out_$i48: i1, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$i53: i64, out_$i54: i1, out_$p21: ref, out_vslice_dummy_var_68: i32, out_vslice_dummy_var_69: i32, out_vslice_dummy_var_70: i32)
{

  entry:
    out_$i22, out_$i23, out_$p24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p29, out_$p30, out_$i32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p39, out_$p40, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$i48, out_$p50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p21, out_vslice_dummy_var_68, out_vslice_dummy_var_69, out_vslice_dummy_var_70 := in_$i22, in_$i23, in_$p24, in_$i25, in_$i26, in_$i27, in_$i28, in_$p29, in_$p30, in_$i32, in_$i33, in_$p34, in_$i35, in_$i36, in_$i37, in_$i38, in_$p39, in_$p40, in_$p43, in_$p44, in_$p45, in_$i46, in_$i47, in_$i48, in_$p50, in_$p51, in_$p52, in_$i53, in_$i54, in_$p21, in_vslice_dummy_var_68, in_vslice_dummy_var_69, in_vslice_dummy_var_70;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_4393;

  $bb24:
    assume out_$i54 == 1;
    assume {:verifier.code 0} true;
    out_$p21 := out_$p51;
    goto $bb24_dummy;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    out_$i54 := $ne.i64(out_$i53, in_$i19);
    goto corral_source_split_4438;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    out_$i53 := $p2i.ref.i64(out_$p52);
    goto corral_source_split_4437;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(out_$p50, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_4436;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref(out_$p50, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_4435;

  $bb23:
    assume {:verifier.code 0} true;
    out_$p50 := $bitcast.ref.ref(out_$p45);
    goto corral_source_split_4434;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 840} out_vslice_dummy_var_70 := rcu_read_lock_held();
    goto corral_source_split_4432;

  $bb22:
    assume !(out_$i48 == 1);
    goto corral_source_split_4431;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    out_$i48 := $trunc.i8.i1($u0);
    goto corral_source_split_4429;

  $bb18:
    assume out_$i47 == 1;
    goto corral_source_split_4428;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    out_$i47 := $ne.i32(out_$i46, 0);
    goto corral_source_split_4426;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 838} out_$i46 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 839} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i46);
    goto corral_source_split_4425;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    out_$p45 := $load.ref($M.22, in_$p3);
    goto corral_source_split_4424;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    $M.22 := $store.ref($M.22, in_$p3, out_$p44);
    goto corral_source_split_4423;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    out_$p44 := $load.ref($M.0, out_$p43);
    goto corral_source_split_4422;

  $bb17:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref($add.ref(out_$p21, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_4421;

  $bb16:
    assume !(out_$i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 837} out_vslice_dummy_var_69 := dev_set_allmulti(out_$p40, out_$i38);
    goto corral_source_split_4419;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    out_$p40 := $load.ref($M.0, out_$p39);
    goto corral_source_split_4418;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(out_$p21, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_4417;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    out_$i38 := (if out_$i37 == 1 then 1 else $sub.i32(0, 1));
    call {:si_unique_call 836} {:cexpr "inc"} boogie_si_record_i32(out_$i38);
    goto corral_source_split_4416;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    out_$i37 := $ne.i32(out_$i36, 0);
    goto corral_source_split_4415;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    out_$i36 := $and.i32(out_$i35, 512);
    goto corral_source_split_4414;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    out_$i35 := $load.i32($M.0, out_$p34);
    goto corral_source_split_4413;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(in_$p0, $mul.ref(0, 3176)), $mul.ref(520, 1));
    goto corral_source_split_4412;

  $bb15:
    assume out_$i33 == 1;
    goto corral_source_split_4411;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    out_$i33 := $ne.i32(out_$i32, 0);
    goto corral_source_split_4409;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i32 := $and.i32(in_$i1, 512);
    goto corral_source_split_4408;

  $bb13:
    assume !(out_$i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} out_vslice_dummy_var_68 := dev_set_promiscuity(out_$p30, out_$i28);
    goto corral_source_split_4406;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    out_$p30 := $load.ref($M.0, out_$p29);
    goto corral_source_split_4405;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p21, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_4404;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    out_$i28 := (if out_$i27 == 1 then 1 else $sub.i32(0, 1));
    call {:si_unique_call 834} {:cexpr "inc"} boogie_si_record_i32(out_$i28);
    goto corral_source_split_4403;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    out_$i27 := $ne.i32(out_$i26, 0);
    goto corral_source_split_4402;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    out_$i26 := $and.i32(out_$i25, 256);
    goto corral_source_split_4401;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i32($M.0, out_$p24);
    goto corral_source_split_4400;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(in_$p0, $mul.ref(0, 3176)), $mul.ref(520, 1));
    goto corral_source_split_4399;

  $bb12:
    assume out_$i23 == 1;
    goto corral_source_split_4398;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    out_$i23 := $ne.i32(out_$i22, 0);
    goto corral_source_split_4396;

  $bb11:
    assume {:verifier.code 0} true;
    out_$i22 := $and.i32(in_$i1, 256);
    goto corral_source_split_4395;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb19:
    assume {:verifier.code 0} true;
    assume !(out_$i47 == 1);
    goto $bb20;

  $bb21:
    assume {:verifier.code 0} true;
    assume out_$i48 == 1;
    goto $bb20;

  $bb24_dummy:
    call {:si_unique_call 1} out_$i22, out_$i23, out_$p24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p29, out_$p30, out_$i32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p39, out_$p40, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$i48, out_$p50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p21, out_vslice_dummy_var_68, out_vslice_dummy_var_69, out_vslice_dummy_var_70 := team_change_rx_flags_loop_$bb10(in_$p0, in_$i1, in_$p3, in_$i19, out_$i22, out_$i23, out_$p24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p29, out_$p30, out_$i32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p39, out_$p40, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$i48, out_$p50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p21, out_vslice_dummy_var_68, out_vslice_dummy_var_69, out_vslice_dummy_var_70);
    return;

  exit:
    return;
}



procedure team_change_rx_flags_loop_$bb10(in_$p0: ref, in_$i1: i32, in_$p3: ref, in_$i19: i64, in_$i22: i32, in_$i23: i1, in_$p24: ref, in_$i25: i32, in_$i26: i32, in_$i27: i1, in_$i28: i32, in_$p29: ref, in_$p30: ref, in_$i32: i32, in_$i33: i1, in_$p34: ref, in_$i35: i32, in_$i36: i32, in_$i37: i1, in_$i38: i32, in_$p39: ref, in_$p40: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$i46: i32, in_$i47: i1, in_$i48: i1, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$i53: i64, in_$i54: i1, in_$p21: ref, in_vslice_dummy_var_68: i32, in_vslice_dummy_var_69: i32, in_vslice_dummy_var_70: i32) returns (out_$i22: i32, out_$i23: i1, out_$p24: ref, out_$i25: i32, out_$i26: i32, out_$i27: i1, out_$i28: i32, out_$p29: ref, out_$p30: ref, out_$i32: i32, out_$i33: i1, out_$p34: ref, out_$i35: i32, out_$i36: i32, out_$i37: i1, out_$i38: i32, out_$p39: ref, out_$p40: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$i46: i32, out_$i47: i1, out_$i48: i1, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$i53: i64, out_$i54: i1, out_$p21: ref, out_vslice_dummy_var_68: i32, out_vslice_dummy_var_69: i32, out_vslice_dummy_var_70: i32);
  modifies $M.22;



implementation team_set_rx_mode_loop_$bb10(in_$p0: ref, in_$p2: ref, in_$i18: i64, in_$p21: ref, in_$p22: ref, in_$p24: ref, in_$p25: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$i31: i32, in_$i32: i1, in_$i33: i1, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$i38: i64, in_$i39: i1, in_$p20: ref, in_vslice_dummy_var_72: i32, in_vslice_dummy_var_73: i32, in_vslice_dummy_var_74: i32) returns (out_$p21: ref, out_$p22: ref, out_$p24: ref, out_$p25: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$i31: i32, out_$i32: i1, out_$i33: i1, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$i38: i64, out_$i39: i1, out_$p20: ref, out_vslice_dummy_var_72: i32, out_vslice_dummy_var_73: i32, out_vslice_dummy_var_74: i32)
{

  entry:
    out_$p21, out_$p22, out_$p24, out_$p25, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$p20, out_vslice_dummy_var_72, out_vslice_dummy_var_73, out_vslice_dummy_var_74 := in_$p21, in_$p22, in_$p24, in_$p25, in_$p28, in_$p29, in_$p30, in_$i31, in_$i32, in_$i33, in_$p35, in_$p36, in_$p37, in_$i38, in_$i39, in_$p20, in_vslice_dummy_var_72, in_vslice_dummy_var_73, in_vslice_dummy_var_74;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_4471;

  $bb18:
    assume out_$i39 == 1;
    assume {:verifier.code 0} true;
    out_$p20 := out_$p36;
    goto $bb18_dummy;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    out_$i39 := $ne.i64(out_$i38, in_$i18);
    goto corral_source_split_4496;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    out_$i38 := $p2i.ref.i64(out_$p37);
    goto corral_source_split_4495;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(out_$p35, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_4494;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref(out_$p35, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_4493;

  $bb17:
    assume {:verifier.code 0} true;
    out_$p35 := $bitcast.ref.ref(out_$p30);
    goto corral_source_split_4492;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 853} out_vslice_dummy_var_74 := rcu_read_lock_held();
    goto corral_source_split_4490;

  $bb16:
    assume !(out_$i33 == 1);
    goto corral_source_split_4489;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    out_$i33 := $trunc.i8.i1($u0);
    goto corral_source_split_4487;

  $bb12:
    assume out_$i32 == 1;
    goto corral_source_split_4486;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    out_$i32 := $ne.i32(out_$i31, 0);
    goto corral_source_split_4484;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 851} out_$i31 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 852} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i31);
    goto corral_source_split_4483;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    out_$p30 := $load.ref($M.24, in_$p2);
    goto corral_source_split_4482;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, in_$p2, out_$p29);
    goto corral_source_split_4481;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    out_$p29 := $load.ref($M.0, out_$p28);
    goto corral_source_split_4480;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref($add.ref(out_$p20, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_4479;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 850} out_vslice_dummy_var_73 := dev_mc_sync_multiple(out_$p25, in_$p0);
    goto corral_source_split_4478;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    out_$p25 := $load.ref($M.0, out_$p24);
    goto corral_source_split_4477;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p20, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_4476;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} out_vslice_dummy_var_72 := dev_uc_sync_multiple(out_$p22, in_$p0);
    goto corral_source_split_4475;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    out_$p22 := $load.ref($M.0, out_$p21);
    goto corral_source_split_4474;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p20, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_4473;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb13:
    assume {:verifier.code 0} true;
    assume !(out_$i32 == 1);
    goto $bb14;

  $bb15:
    assume {:verifier.code 0} true;
    assume out_$i33 == 1;
    goto $bb14;

  $bb18_dummy:
    call {:si_unique_call 1} out_$p21, out_$p22, out_$p24, out_$p25, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$p20, out_vslice_dummy_var_72, out_vslice_dummy_var_73, out_vslice_dummy_var_74 := team_set_rx_mode_loop_$bb10(in_$p0, in_$p2, in_$i18, out_$p21, out_$p22, out_$p24, out_$p25, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$p20, out_vslice_dummy_var_72, out_vslice_dummy_var_73, out_vslice_dummy_var_74);
    return;

  exit:
    return;
}



procedure team_set_rx_mode_loop_$bb10(in_$p0: ref, in_$p2: ref, in_$i18: i64, in_$p21: ref, in_$p22: ref, in_$p24: ref, in_$p25: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$i31: i32, in_$i32: i1, in_$i33: i1, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$i38: i64, in_$i39: i1, in_$p20: ref, in_vslice_dummy_var_72: i32, in_vslice_dummy_var_73: i32, in_vslice_dummy_var_74: i32) returns (out_$p21: ref, out_$p22: ref, out_$p24: ref, out_$p25: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$i31: i32, out_$i32: i1, out_$i33: i1, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$i38: i64, out_$i39: i1, out_$p20: ref, out_vslice_dummy_var_72: i32, out_vslice_dummy_var_73: i32, out_vslice_dummy_var_74: i32);
  modifies $M.24;



implementation team_set_mac_address_loop_$bb20(in_$p3: ref, in_$p6: ref, in_$i39: i64, in_$p43: ref, in_$p44: ref, in_$i45: i64, in_$i46: i1, in_$p48: ref, in_$p49: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$i54: i32, in_$i55: i1, in_$i56: i1, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$i61: i64, in_$i62: i1, in_$p41: ref, in_vslice_dummy_var_76: i32) returns (out_$p43: ref, out_$p44: ref, out_$i45: i64, out_$i46: i1, out_$p48: ref, out_$p49: ref, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$i54: i32, out_$i55: i1, out_$i56: i1, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$i61: i64, out_$i62: i1, out_$p41: ref, out_vslice_dummy_var_76: i32)
{

  entry:
    out_$p43, out_$p44, out_$i45, out_$i46, out_$p48, out_$p49, out_$p51, out_$p52, out_$p53, out_$i54, out_$i55, out_$i56, out_$p58, out_$p59, out_$p60, out_$i61, out_$i62, out_$p41, out_vslice_dummy_var_76 := in_$p43, in_$p44, in_$i45, in_$i46, in_$p48, in_$p49, in_$p51, in_$p52, in_$p53, in_$i54, in_$i55, in_$i56, in_$p58, in_$p59, in_$p60, in_$i61, in_$i62, in_$p41, in_vslice_dummy_var_76;
    goto $bb20, exit;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_4559;

  $bb31:
    assume out_$i62 == 1;
    assume {:verifier.code 0} true;
    out_$p41 := out_$p59;
    goto $bb31_dummy;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    out_$i62 := $ne.i64(out_$i61, in_$i39);
    goto corral_source_split_4587;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    out_$i61 := $p2i.ref.i64(out_$p60);
    goto corral_source_split_4586;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(out_$p58, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_4585;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref(out_$p58, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_4584;

  $bb30:
    assume {:verifier.code 0} true;
    out_$p58 := $bitcast.ref.ref(out_$p53);
    goto corral_source_split_4583;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 869} out_vslice_dummy_var_76 := rcu_read_lock_held();
    goto corral_source_split_4581;

  $bb29:
    assume !(out_$i56 == 1);
    goto corral_source_split_4580;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    out_$i56 := $trunc.i8.i1($u0);
    goto corral_source_split_4578;

  $bb25:
    assume out_$i55 == 1;
    goto corral_source_split_4577;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    out_$i55 := $ne.i32(out_$i54, 0);
    goto corral_source_split_4575;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 867} out_$i54 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 868} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i54);
    goto corral_source_split_4574;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    out_$p53 := $load.ref($M.26, in_$p3);
    goto corral_source_split_4573;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, in_$p3, out_$p52);
    goto corral_source_split_4572;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    out_$p52 := $load.ref($M.0, out_$p51);
    goto corral_source_split_4571;

  $bb24:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref($add.ref(out_$p41, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_4570;

  $bb23:
    assume !(out_$i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    out_$p49 := $load.ref($M.0, out_$p48);
    call {:si_unique_call 866} devirtbounce.4(out_$p49, in_$p6, out_$p41);
    goto corral_source_split_4568;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref($add.ref(in_$p6, $mul.ref(0, 984)), $mul.ref(376, 1)), $mul.ref(48, 1));
    goto corral_source_split_4567;

  $bb22:
    assume out_$i46 == 1;
    goto corral_source_split_4566;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    out_$i46 := $ne.i64(out_$i45, 0);
    goto corral_source_split_4564;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    out_$i45 := $p2i.ref.i64(out_$p44);
    goto corral_source_split_4563;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    out_$p44 := $load.ref($M.0, out_$p43);
    goto corral_source_split_4562;

  $bb21:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref($add.ref(in_$p6, $mul.ref(0, 984)), $mul.ref(376, 1)), $mul.ref(48, 1));
    goto corral_source_split_4561;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb26:
    assume {:verifier.code 0} true;
    assume !(out_$i55 == 1);
    goto $bb27;

  $bb28:
    assume {:verifier.code 0} true;
    assume out_$i56 == 1;
    goto $bb27;

  $bb31_dummy:
    call {:si_unique_call 1} out_$p43, out_$p44, out_$i45, out_$i46, out_$p48, out_$p49, out_$p51, out_$p52, out_$p53, out_$i54, out_$i55, out_$i56, out_$p58, out_$p59, out_$p60, out_$i61, out_$i62, out_$p41, out_vslice_dummy_var_76 := team_set_mac_address_loop_$bb20(in_$p3, in_$p6, in_$i39, out_$p43, out_$p44, out_$i45, out_$i46, out_$p48, out_$p49, out_$p51, out_$p52, out_$p53, out_$i54, out_$i55, out_$i56, out_$p58, out_$p59, out_$p60, out_$i61, out_$i62, out_$p41, out_vslice_dummy_var_76);
    return;

  exit:
    return;
}



procedure team_set_mac_address_loop_$bb20(in_$p3: ref, in_$p6: ref, in_$i39: i64, in_$p43: ref, in_$p44: ref, in_$i45: i64, in_$i46: i1, in_$p48: ref, in_$p49: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$i54: i32, in_$i55: i1, in_$i56: i1, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$i61: i64, in_$i62: i1, in_$p41: ref, in_vslice_dummy_var_76: i32) returns (out_$p43: ref, out_$p44: ref, out_$i45: i64, out_$i46: i1, out_$p48: ref, out_$p49: ref, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$i54: i32, out_$i55: i1, out_$i56: i1, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$i61: i64, out_$i62: i1, out_$p41: ref, out_vslice_dummy_var_76: i32);
  modifies $M.26, $M.0, $CurrAddr;



implementation team_change_mtu_loop_$bb17(in_$p0: ref, in_$i48: i64, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$i54: i32, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$i62: i64, in_$i63: i1, in_$p50: ref, in_vslice_dummy_var_78: i32) returns (out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$i54: i32, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$i62: i64, out_$i63: i1, out_$p50: ref, out_vslice_dummy_var_78: i32)
{

  entry:
    out_$p51, out_$p52, out_$p53, out_$i54, out_$p57, out_$p58, out_$p59, out_$p60, out_$p61, out_$i62, out_$i63, out_$p50, out_vslice_dummy_var_78 := in_$p51, in_$p52, in_$p53, in_$i54, in_$p57, in_$p58, in_$p59, in_$p60, in_$p61, in_$i62, in_$i63, in_$p50, in_vslice_dummy_var_78;
    goto $bb17, exit;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_4657;

  $bb19:
    assume out_$i63 == 1;
    assume {:verifier.code 0} true;
    out_$p50 := out_$p60;
    goto $bb19_dummy;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    out_$i63 := $ne.i64(out_$i62, in_$i48);
    goto corral_source_split_4670;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    out_$i62 := $p2i.ref.i64(out_$p61);
    goto corral_source_split_4669;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(out_$p59, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_4668;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref(out_$p59, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_4667;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    out_$p59 := $bitcast.ref.ref(out_$p58);
    goto corral_source_split_4666;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    out_$p58 := $load.ref($M.0, out_$p57);
    goto corral_source_split_4665;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref($add.ref(out_$p50, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_4664;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 878} out_vslice_dummy_var_78 := dev_set_mtu(out_$p52, out_$i54);
    goto corral_source_split_4663;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    out_$i54 := $load.i32($M.0, out_$p53);
    goto corral_source_split_4662;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(in_$p0, $mul.ref(0, 3176)), $mul.ref(536, 1));
    goto corral_source_split_4661;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    out_$p52 := $load.ref($M.0, out_$p51);
    goto corral_source_split_4660;

  $bb18:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(out_$p50, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_4659;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb19_dummy:
    call {:si_unique_call 1} out_$p51, out_$p52, out_$p53, out_$i54, out_$p57, out_$p58, out_$p59, out_$p60, out_$p61, out_$i62, out_$i63, out_$p50, out_vslice_dummy_var_78 := team_change_mtu_loop_$bb17(in_$p0, in_$i48, out_$p51, out_$p52, out_$p53, out_$i54, out_$p57, out_$p58, out_$p59, out_$p60, out_$p61, out_$i62, out_$i63, out_$p50, out_vslice_dummy_var_78);
    return;

  exit:
    return;
}



procedure team_change_mtu_loop_$bb17(in_$p0: ref, in_$i48: i64, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$i54: i32, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$i62: i64, in_$i63: i1, in_$p50: ref, in_vslice_dummy_var_78: i32) returns (out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$i54: i32, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$i62: i64, out_$i63: i1, out_$p50: ref, out_vslice_dummy_var_78: i32);



implementation team_change_mtu_loop_$bb4(in_$i1: i32, in_$i14: i64, in_$p17: ref, in_$p18: ref, in_$i19: i32, in_$i20: i1, in_$p21: ref, in_$i22: i32, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$i34: i64, in_$i35: i1, in_$p16: ref) returns (out_$p17: ref, out_$p18: ref, out_$i19: i32, out_$i20: i1, out_$p21: ref, out_$i22: i32, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$i34: i64, out_$i35: i1, out_$p16: ref)
{

  entry:
    out_$p17, out_$p18, out_$i19, out_$i20, out_$p21, out_$i22, out_$p29, out_$p30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$p16 := in_$p17, in_$p18, in_$i19, in_$i20, in_$p21, in_$i22, in_$p29, in_$p30, in_$p31, in_$p32, in_$p33, in_$i34, in_$i35, in_$p16;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_4612;

  $bb10:
    assume out_$i35 == 1;
    assume {:verifier.code 0} true;
    out_$p16 := out_$p32;
    goto $bb10_dummy;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    out_$i35 := $ne.i64(out_$i34, in_$i14);
    goto corral_source_split_4642;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    out_$i34 := $p2i.ref.i64(out_$p33);
    goto corral_source_split_4641;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(out_$p31, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_4640;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref(out_$p31, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_4639;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    out_$p31 := $bitcast.ref.ref(out_$p30);
    goto corral_source_split_4638;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    out_$p30 := $load.ref($M.0, out_$p29);
    goto corral_source_split_4637;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref($add.ref(out_$p16, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_4636;

  $bb7:
    assume !(out_$i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    out_$p21, out_$i22 := out_$p16, out_$i19;
    assume true;
    goto $bb7;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    out_$i20 := $ne.i32(out_$i19, 0);
    goto corral_source_split_4617;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 874} out_$i19 := dev_set_mtu(out_$p18, in_$i1);
    call {:si_unique_call 875} {:cexpr "err"} boogie_si_record_i32(out_$i19);
    goto corral_source_split_4616;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.0, out_$p17);
    goto corral_source_split_4615;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(out_$p16, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_4614;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p17, out_$p18, out_$i19, out_$i20, out_$p21, out_$i22, out_$p29, out_$p30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$p16 := team_change_mtu_loop_$bb4(in_$i1, in_$i14, out_$p17, out_$p18, out_$i19, out_$i20, out_$p21, out_$i22, out_$p29, out_$p30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$p16);
    return;

  exit:
    return;
}



procedure team_change_mtu_loop_$bb4(in_$i1: i32, in_$i14: i64, in_$p17: ref, in_$p18: ref, in_$i19: i32, in_$i20: i1, in_$p21: ref, in_$i22: i32, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$i34: i64, in_$i35: i1, in_$p16: ref) returns (out_$p17: ref, out_$p18: ref, out_$i19: i32, out_$i20: i1, out_$p21: ref, out_$i22: i32, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$i34: i64, out_$i35: i1, out_$p16: ref);



implementation team_get_stats64_loop_$bb6(in_$p20: ref, in_$p21: ref, in_$i22: i32, in_$p23: ref, in_$i24: i64, in_$p25: ref, in_$i26: i64, in_$p27: ref, in_$i28: i64, in_$p29: ref, in_$i30: i64, in_$p31: ref, in_$i32: i64, in_$p33: ref, in_$i34: i1, in_$i35: i8, in_$i36: i1, in_$i37: i64, in_$i38: i64, in_$i39: i64, in_$i40: i64, in_$i41: i64) returns (out_$p21: ref, out_$i22: i32, out_$p23: ref, out_$i24: i64, out_$p25: ref, out_$i26: i64, out_$p27: ref, out_$i28: i64, out_$p29: ref, out_$i30: i64, out_$p31: ref, out_$i32: i64, out_$p33: ref, out_$i34: i1, out_$i35: i8, out_$i36: i1, out_$i37: i64, out_$i38: i64, out_$i39: i64, out_$i40: i64, out_$i41: i64)
{

  entry:
    out_$p21, out_$i22, out_$p23, out_$i24, out_$p25, out_$i26, out_$p27, out_$i28, out_$p29, out_$i30, out_$p31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41 := in_$p21, in_$i22, in_$p23, in_$i24, in_$p25, in_$i26, in_$p27, in_$i28, in_$p29, in_$i30, in_$p31, in_$i32, in_$p33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41;
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(in_$p20, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_4699;

  $bb7:
    assume {:verifier.code 0} true;
    assume out_$i36 == 1;
    goto $bb7_dummy;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    out_$i37, out_$i38, out_$i39, out_$i40, out_$i41 := out_$i24, out_$i26, out_$i28, out_$i30, out_$i32;
    assume true;
    goto $bb7;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    out_$i36 := $trunc.i8.i1(out_$i35);
    goto corral_source_split_4714;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    out_$i35 := $zext.i1.i8(out_$i34);
    call {:si_unique_call 893} {:cexpr "tmp___0"} boogie_si_record_i8(out_$i35);
    goto corral_source_split_4713;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 892} out_$i34 := u64_stats_fetch_retry_irq(out_$p33, out_$i22);
    goto corral_source_split_4712;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(in_$p20, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_4711;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    out_$i32 := $load.i64($M.0, out_$p31);
    call {:si_unique_call 891} {:cexpr "tx_bytes"} boogie_si_record_i64(out_$i32);
    goto corral_source_split_4710;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(in_$p20, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_4709;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    out_$i30 := $load.i64($M.0, out_$p29);
    call {:si_unique_call 890} {:cexpr "tx_packets"} boogie_si_record_i64(out_$i30);
    goto corral_source_split_4708;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(in_$p20, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_4707;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i64($M.0, out_$p27);
    call {:si_unique_call 889} {:cexpr "rx_multicast"} boogie_si_record_i64(out_$i28);
    goto corral_source_split_4706;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(in_$p20, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_4705;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i64($M.0, out_$p25);
    call {:si_unique_call 888} {:cexpr "rx_bytes"} boogie_si_record_i64(out_$i26);
    goto corral_source_split_4704;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(in_$p20, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_4703;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i64($M.0, out_$p23);
    call {:si_unique_call 887} {:cexpr "rx_packets"} boogie_si_record_i64(out_$i24);
    goto corral_source_split_4702;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(in_$p20, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_4701;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} out_$i22 := u64_stats_fetch_begin_irq(out_$p21);
    call {:si_unique_call 886} {:cexpr "start"} boogie_si_record_i32(out_$i22);
    goto corral_source_split_4700;

  $bb7_dummy:
    call {:si_unique_call 1} out_$p21, out_$i22, out_$p23, out_$i24, out_$p25, out_$i26, out_$p27, out_$i28, out_$p29, out_$i30, out_$p31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41 := team_get_stats64_loop_$bb6(in_$p20, out_$p21, out_$i22, out_$p23, out_$i24, out_$p25, out_$i26, out_$p27, out_$i28, out_$p29, out_$i30, out_$p31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41);
    return;

  exit:
    return;
}



procedure team_get_stats64_loop_$bb6(in_$p20: ref, in_$p21: ref, in_$i22: i32, in_$p23: ref, in_$i24: i64, in_$p25: ref, in_$i26: i64, in_$p27: ref, in_$i28: i64, in_$p29: ref, in_$i30: i64, in_$p31: ref, in_$i32: i64, in_$p33: ref, in_$i34: i1, in_$i35: i8, in_$i36: i1, in_$i37: i64, in_$i38: i64, in_$i39: i64, in_$i40: i64, in_$i41: i64) returns (out_$p21: ref, out_$i22: i32, out_$p23: ref, out_$i24: i64, out_$p25: ref, out_$i26: i64, out_$p27: ref, out_$i28: i64, out_$p29: ref, out_$i30: i64, out_$p31: ref, out_$i32: i64, out_$p33: ref, out_$i34: i1, out_$i35: i8, out_$i36: i1, out_$i37: i64, out_$i38: i64, out_$i39: i64, out_$i40: i64, out_$i41: i64);



implementation team_get_stats64_loop_$bb4(in_$p1: ref, in_$p3: ref, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$i16: i64, in_$p17: ref, in_$i18: i64, in_$i19: i64, in_$p20: ref, in_$p21: ref, in_$i22: i32, in_$p23: ref, in_$i24: i64, in_$p25: ref, in_$i26: i64, in_$p27: ref, in_$i28: i64, in_$p29: ref, in_$i30: i64, in_$p31: ref, in_$i32: i64, in_$p33: ref, in_$i34: i1, in_$i35: i8, in_$i36: i1, in_$i37: i64, in_$i38: i64, in_$i39: i64, in_$i40: i64, in_$i41: i64, in_$p42: ref, in_$i43: i64, in_$i44: i64, in_$p45: ref, in_$p46: ref, in_$i47: i64, in_$i48: i64, in_$p49: ref, in_$p50: ref, in_$i51: i64, in_$i52: i64, in_$p53: ref, in_$p54: ref, in_$i55: i64, in_$i56: i64, in_$p57: ref, in_$p58: ref, in_$i59: i64, in_$i60: i64, in_$p61: ref, in_$p62: ref, in_$i63: i32, in_$i64: i32, in_$p65: ref, in_$i66: i32, in_$i67: i32, in_$p68: ref, in_$i69: i32, in_$i70: i32, in_$i71: i1, in_$i10: i32, in_$i11: i32, in_$i12: i32, in_$i72: i32, in_$i73: i32) returns (out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$i16: i64, out_$p17: ref, out_$i18: i64, out_$i19: i64, out_$p20: ref, out_$p21: ref, out_$i22: i32, out_$p23: ref, out_$i24: i64, out_$p25: ref, out_$i26: i64, out_$p27: ref, out_$i28: i64, out_$p29: ref, out_$i30: i64, out_$p31: ref, out_$i32: i64, out_$p33: ref, out_$i34: i1, out_$i35: i8, out_$i36: i1, out_$i37: i64, out_$i38: i64, out_$i39: i64, out_$i40: i64, out_$i41: i64, out_$p42: ref, out_$i43: i64, out_$i44: i64, out_$p45: ref, out_$p46: ref, out_$i47: i64, out_$i48: i64, out_$p49: ref, out_$p50: ref, out_$i51: i64, out_$i52: i64, out_$p53: ref, out_$p54: ref, out_$i55: i64, out_$i56: i64, out_$p57: ref, out_$p58: ref, out_$i59: i64, out_$i60: i64, out_$p61: ref, out_$p62: ref, out_$i63: i32, out_$i64: i32, out_$p65: ref, out_$i66: i32, out_$i67: i32, out_$p68: ref, out_$i69: i32, out_$i70: i32, out_$i71: i1, out_$i10: i32, out_$i11: i32, out_$i12: i32, out_$i72: i32, out_$i73: i32)
{

  entry:
    out_$p13, out_$p14, out_$i15, out_$i16, out_$p17, out_$i18, out_$i19, out_$p20, out_$p21, out_$i22, out_$p23, out_$i24, out_$p25, out_$i26, out_$p27, out_$i28, out_$p29, out_$i30, out_$p31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$p42, out_$i43, out_$i44, out_$p45, out_$p46, out_$i47, out_$i48, out_$p49, out_$p50, out_$i51, out_$i52, out_$p53, out_$p54, out_$i55, out_$i56, out_$p57, out_$p58, out_$i59, out_$i60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$i71, out_$i10, out_$i11, out_$i12, out_$i72, out_$i73 := in_$p13, in_$p14, in_$i15, in_$i16, in_$p17, in_$i18, in_$i19, in_$p20, in_$p21, in_$i22, in_$p23, in_$i24, in_$p25, in_$i26, in_$p27, in_$i28, in_$p29, in_$i30, in_$p31, in_$i32, in_$p33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$p42, in_$i43, in_$i44, in_$p45, in_$p46, in_$i47, in_$i48, in_$p49, in_$p50, in_$i51, in_$i52, in_$p53, in_$p54, in_$i55, in_$i56, in_$p57, in_$p58, in_$i59, in_$i60, in_$p61, in_$p62, in_$i63, in_$i64, in_$p65, in_$i66, in_$i67, in_$p68, in_$i69, in_$i70, in_$i71, in_$i10, in_$i11, in_$i12, in_$i72, in_$i73;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4689;

  $bb10:
    assume out_$i71 == 1;
    assume {:verifier.code 0} true;
    out_$i10, out_$i11, out_$i12 := out_$i69, out_$i67, out_$i64;
    goto $bb10_dummy;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    out_$i72, out_$i73 := out_$i64, out_$i67;
    assume true;
    goto $bb10;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    out_$i71 := $slt.i32(out_$i69, out_$i70);
    goto corral_source_split_4750;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    out_$i70 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_4749;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 896} out_$i69 := cpumask_next(out_$i10, out_$p68);
    call {:si_unique_call 897} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i69);
    goto corral_source_split_4748;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    out_$p68 := $load.ref($M.0, cpu_possible_mask);
    goto corral_source_split_4747;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    out_$i67 := $add.i32(out_$i66, out_$i11);
    call {:si_unique_call 895} {:cexpr "tx_dropped"} boogie_si_record_i32(out_$i67);
    goto corral_source_split_4746;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    out_$i66 := $load.i32($M.0, out_$p65);
    goto corral_source_split_4745;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(out_$p20, $mul.ref(0, 48)), $mul.ref(44, 1));
    goto corral_source_split_4744;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    out_$i64 := $add.i32(out_$i63, out_$i12);
    call {:si_unique_call 894} {:cexpr "rx_dropped"} boogie_si_record_i32(out_$i64);
    goto corral_source_split_4743;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    out_$i63 := $load.i32($M.0, out_$p62);
    goto corral_source_split_4742;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref(out_$p20, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_4741;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p61, out_$i60);
    goto corral_source_split_4740;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(in_$p1, $mul.ref(0, 184)), $mul.ref(24, 1));
    goto corral_source_split_4739;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    out_$i60 := $add.i64(out_$i59, out_$i41);
    goto corral_source_split_4738;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    out_$i59 := $load.i64($M.0, out_$p58);
    goto corral_source_split_4737;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(in_$p1, $mul.ref(0, 184)), $mul.ref(24, 1));
    goto corral_source_split_4736;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p57, out_$i56);
    goto corral_source_split_4735;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(in_$p1, $mul.ref(0, 184)), $mul.ref(8, 1));
    goto corral_source_split_4734;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    out_$i56 := $add.i64(out_$i55, out_$i40);
    goto corral_source_split_4733;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    out_$i55 := $load.i64($M.0, out_$p54);
    goto corral_source_split_4732;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(in_$p1, $mul.ref(0, 184)), $mul.ref(8, 1));
    goto corral_source_split_4731;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p53, out_$i52);
    goto corral_source_split_4730;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(in_$p1, $mul.ref(0, 184)), $mul.ref(64, 1));
    goto corral_source_split_4729;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    out_$i52 := $add.i64(out_$i51, out_$i39);
    goto corral_source_split_4728;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    out_$i51 := $load.i64($M.0, out_$p50);
    goto corral_source_split_4727;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(in_$p1, $mul.ref(0, 184)), $mul.ref(64, 1));
    goto corral_source_split_4726;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p49, out_$i48);
    goto corral_source_split_4725;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(in_$p1, $mul.ref(0, 184)), $mul.ref(16, 1));
    goto corral_source_split_4724;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    out_$i48 := $add.i64(out_$i47, out_$i38);
    goto corral_source_split_4723;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    out_$i47 := $load.i64($M.0, out_$p46);
    goto corral_source_split_4722;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(in_$p1, $mul.ref(0, 184)), $mul.ref(16, 1));
    goto corral_source_split_4721;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p45, out_$i44);
    goto corral_source_split_4720;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(in_$p1, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_4719;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    out_$i44 := $add.i64(out_$i43, out_$i37);
    goto corral_source_split_4718;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    out_$i43 := $load.i64($M.0, out_$p42);
    goto corral_source_split_4717;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(in_$p1, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_4716;

  $bb8:
    assume !(out_$i36 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    out_$i37, out_$i38, out_$i39, out_$i40, out_$i41 := out_$i24, out_$i26, out_$i28, out_$i30, out_$i32;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    out_$i36 := $trunc.i8.i1(out_$i35);
    goto corral_source_split_4714;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    out_$i35 := $zext.i1.i8(out_$i34);
    call {:si_unique_call 893} {:cexpr "tmp___0"} boogie_si_record_i8(out_$i35);
    goto corral_source_split_4713;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 892} out_$i34 := u64_stats_fetch_retry_irq(out_$p33, out_$i22);
    goto corral_source_split_4712;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(out_$p20, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_4711;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    out_$i32 := $load.i64($M.0, out_$p31);
    call {:si_unique_call 891} {:cexpr "tx_bytes"} boogie_si_record_i64(out_$i32);
    goto corral_source_split_4710;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(out_$p20, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_4709;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    out_$i30 := $load.i64($M.0, out_$p29);
    call {:si_unique_call 890} {:cexpr "tx_packets"} boogie_si_record_i64(out_$i30);
    goto corral_source_split_4708;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p20, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_4707;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i64($M.0, out_$p27);
    call {:si_unique_call 889} {:cexpr "rx_multicast"} boogie_si_record_i64(out_$i28);
    goto corral_source_split_4706;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p20, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_4705;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i64($M.0, out_$p25);
    call {:si_unique_call 888} {:cexpr "rx_bytes"} boogie_si_record_i64(out_$i26);
    goto corral_source_split_4704;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(out_$p20, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_4703;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i64($M.0, out_$p23);
    call {:si_unique_call 887} {:cexpr "rx_packets"} boogie_si_record_i64(out_$i24);
    goto corral_source_split_4702;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(out_$p20, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_4701;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} out_$i22 := u64_stats_fetch_begin_irq(out_$p21);
    call {:si_unique_call 886} {:cexpr "start"} boogie_si_record_i32(out_$i22);
    goto corral_source_split_4700;

  $bb6:
    call out_$p21, out_$i22, out_$p23, out_$i24, out_$p25, out_$i26, out_$p27, out_$i28, out_$p29, out_$i30, out_$p31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41 := team_get_stats64_loop_$bb6(out_$p20, out_$p21, out_$i22, out_$p23, out_$i24, out_$p25, out_$i26, out_$p27, out_$i28, out_$p29, out_$i30, out_$p31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41);
    goto $bb6_last;

  $bb6_last:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p20, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_4699;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb7:
    assume {:verifier.code 0} true;
    assume out_$i36 == 1;
    assume false;
    return;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    out_$p20 := $i2p.i64.ref(out_$i19);
    goto corral_source_split_4697;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    out_$i19 := $add.i64(out_$i18, out_$i15);
    goto corral_source_split_4696;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    out_$i18 := $load.i64($M.0, out_$p17);
    goto corral_source_split_4695;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref(out_$i16, 8));
    goto corral_source_split_4694;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    out_$i16 := $sext.i32.i64(out_$i10);
    goto corral_source_split_4693;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    out_$p14 := $load.ref($M.0, out_$p13);
    call {:si_unique_call 883} out_$i15 := devirtbounce.12(0, out_$p14);
    call {:si_unique_call 884} {:cexpr "__ptr"} boogie_si_record_i64(out_$i15);
    goto corral_source_split_4692;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(in_$p3, $mul.ref(0, 984)), $mul.ref(8, 1));
    goto corral_source_split_4691;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p13, out_$p14, out_$i15, out_$i16, out_$p17, out_$i18, out_$i19, out_$p20, out_$p21, out_$i22, out_$p23, out_$i24, out_$p25, out_$i26, out_$p27, out_$i28, out_$p29, out_$i30, out_$p31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$p42, out_$i43, out_$i44, out_$p45, out_$p46, out_$i47, out_$i48, out_$p49, out_$p50, out_$i51, out_$i52, out_$p53, out_$p54, out_$i55, out_$i56, out_$p57, out_$p58, out_$i59, out_$i60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$i71, out_$i10, out_$i11, out_$i12, out_$i72, out_$i73 := team_get_stats64_loop_$bb4(in_$p1, in_$p3, out_$p13, out_$p14, out_$i15, out_$i16, out_$p17, out_$i18, out_$i19, out_$p20, out_$p21, out_$i22, out_$p23, out_$i24, out_$p25, out_$i26, out_$p27, out_$i28, out_$p29, out_$i30, out_$p31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$p42, out_$i43, out_$i44, out_$p45, out_$p46, out_$i47, out_$i48, out_$p49, out_$p50, out_$i51, out_$i52, out_$p53, out_$p54, out_$i55, out_$i56, out_$p57, out_$p58, out_$i59, out_$i60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$i71, out_$i10, out_$i11, out_$i12, out_$i72, out_$i73);
    return;

  exit:
    return;
}



procedure team_get_stats64_loop_$bb4(in_$p1: ref, in_$p3: ref, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$i16: i64, in_$p17: ref, in_$i18: i64, in_$i19: i64, in_$p20: ref, in_$p21: ref, in_$i22: i32, in_$p23: ref, in_$i24: i64, in_$p25: ref, in_$i26: i64, in_$p27: ref, in_$i28: i64, in_$p29: ref, in_$i30: i64, in_$p31: ref, in_$i32: i64, in_$p33: ref, in_$i34: i1, in_$i35: i8, in_$i36: i1, in_$i37: i64, in_$i38: i64, in_$i39: i64, in_$i40: i64, in_$i41: i64, in_$p42: ref, in_$i43: i64, in_$i44: i64, in_$p45: ref, in_$p46: ref, in_$i47: i64, in_$i48: i64, in_$p49: ref, in_$p50: ref, in_$i51: i64, in_$i52: i64, in_$p53: ref, in_$p54: ref, in_$i55: i64, in_$i56: i64, in_$p57: ref, in_$p58: ref, in_$i59: i64, in_$i60: i64, in_$p61: ref, in_$p62: ref, in_$i63: i32, in_$i64: i32, in_$p65: ref, in_$i66: i32, in_$i67: i32, in_$p68: ref, in_$i69: i32, in_$i70: i32, in_$i71: i1, in_$i10: i32, in_$i11: i32, in_$i12: i32, in_$i72: i32, in_$i73: i32) returns (out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$i16: i64, out_$p17: ref, out_$i18: i64, out_$i19: i64, out_$p20: ref, out_$p21: ref, out_$i22: i32, out_$p23: ref, out_$i24: i64, out_$p25: ref, out_$i26: i64, out_$p27: ref, out_$i28: i64, out_$p29: ref, out_$i30: i64, out_$p31: ref, out_$i32: i64, out_$p33: ref, out_$i34: i1, out_$i35: i8, out_$i36: i1, out_$i37: i64, out_$i38: i64, out_$i39: i64, out_$i40: i64, out_$i41: i64, out_$p42: ref, out_$i43: i64, out_$i44: i64, out_$p45: ref, out_$p46: ref, out_$i47: i64, out_$i48: i64, out_$p49: ref, out_$p50: ref, out_$i51: i64, out_$i52: i64, out_$p53: ref, out_$p54: ref, out_$i55: i64, out_$i56: i64, out_$p57: ref, out_$p58: ref, out_$i59: i64, out_$i60: i64, out_$p61: ref, out_$p62: ref, out_$i63: i32, out_$i64: i32, out_$p65: ref, out_$i66: i32, out_$i67: i32, out_$p68: ref, out_$i69: i32, out_$i70: i32, out_$i71: i1, out_$i10: i32, out_$i11: i32, out_$i12: i32, out_$i72: i32, out_$i73: i32);
  modifies $M.0;



implementation team_vlan_rx_add_vid_loop_$bb17(in_$i1: i16, in_$i2: i16, in_$i45: i64, in_$p48: ref, in_$p49: ref, in_$i50: i32, in_$i51: i16, in_$i52: i32, in_$i53: i16, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$i60: i64, in_$i61: i1, in_$p47: ref) returns (out_$p48: ref, out_$p49: ref, out_$i50: i32, out_$i51: i16, out_$i52: i32, out_$i53: i16, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$i60: i64, out_$i61: i1, out_$p47: ref)
{

  entry:
    out_$p48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$p55, out_$p56, out_$p57, out_$p58, out_$p59, out_$i60, out_$i61, out_$p47 := in_$p48, in_$p49, in_$i50, in_$i51, in_$i52, in_$i53, in_$p55, in_$p56, in_$p57, in_$p58, in_$p59, in_$i60, in_$i61, in_$p47;
    goto $bb17, exit;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_4818;

  $bb19:
    assume out_$i61 == 1;
    assume {:verifier.code 0} true;
    out_$p47 := out_$p58;
    goto $bb19_dummy;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    out_$i61 := $ne.i64(out_$i60, in_$i45);
    goto corral_source_split_4833;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    out_$i60 := $p2i.ref.i64(out_$p59);
    goto corral_source_split_4832;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref(out_$p57, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_4831;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref(out_$p57, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_4830;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    out_$p57 := $bitcast.ref.ref(out_$p56);
    goto corral_source_split_4829;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    out_$p56 := $load.ref($M.0, out_$p55);
    goto corral_source_split_4828;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref($add.ref(out_$p47, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_4827;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 905} vlan_vid_del(out_$p49, out_$i51, out_$i53);
    goto corral_source_split_4826;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    out_$i53 := $trunc.i32.i16(out_$i52);
    goto corral_source_split_4825;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    out_$i52 := $zext.i16.i32(in_$i2);
    goto corral_source_split_4824;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    out_$i51 := $trunc.i32.i16(out_$i50);
    goto corral_source_split_4823;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    out_$i50 := $zext.i16.i32(in_$i1);
    goto corral_source_split_4822;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    out_$p49 := $load.ref($M.0, out_$p48);
    goto corral_source_split_4821;

  $bb18:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(out_$p47, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_4820;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb19_dummy:
    call {:si_unique_call 1} out_$p48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$p55, out_$p56, out_$p57, out_$p58, out_$p59, out_$i60, out_$i61, out_$p47 := team_vlan_rx_add_vid_loop_$bb17(in_$i1, in_$i2, in_$i45, out_$p48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$p55, out_$p56, out_$p57, out_$p58, out_$p59, out_$i60, out_$i61, out_$p47);
    return;

  exit:
    return;
}



procedure team_vlan_rx_add_vid_loop_$bb17(in_$i1: i16, in_$i2: i16, in_$i45: i64, in_$p48: ref, in_$p49: ref, in_$i50: i32, in_$i51: i16, in_$i52: i32, in_$i53: i16, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$i60: i64, in_$i61: i1, in_$p47: ref) returns (out_$p48: ref, out_$p49: ref, out_$i50: i32, out_$i51: i16, out_$i52: i32, out_$i53: i16, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$i60: i64, out_$i61: i1, out_$p47: ref);



implementation team_vlan_rx_add_vid_loop_$bb4(in_$i1: i16, in_$i2: i16, in_$i14: i64, in_$p17: ref, in_$p18: ref, in_$i19: i32, in_$i20: i16, in_$i21: i32, in_$i22: i16, in_$i23: i32, in_$i24: i1, in_$p25: ref, in_$i26: i32, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$i33: i64, in_$i34: i1, in_$p16: ref) returns (out_$p17: ref, out_$p18: ref, out_$i19: i32, out_$i20: i16, out_$i21: i32, out_$i22: i16, out_$i23: i32, out_$i24: i1, out_$p25: ref, out_$i26: i32, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$i33: i64, out_$i34: i1, out_$p16: ref)
{

  entry:
    out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$p25, out_$i26, out_$p28, out_$p29, out_$p30, out_$p31, out_$p32, out_$i33, out_$i34, out_$p16 := in_$p17, in_$p18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$p25, in_$i26, in_$p28, in_$p29, in_$p30, in_$p31, in_$p32, in_$i33, in_$i34, in_$p16;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_4778;

  $bb10:
    assume out_$i34 == 1;
    assume {:verifier.code 0} true;
    out_$p16 := out_$p31;
    goto $bb10_dummy;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    out_$i34 := $ne.i64(out_$i33, in_$i14);
    goto corral_source_split_4807;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    out_$i33 := $p2i.ref.i64(out_$p32);
    goto corral_source_split_4806;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(out_$p30, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_4805;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref(out_$p30, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_4804;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    out_$p30 := $bitcast.ref.ref(out_$p29);
    goto corral_source_split_4803;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    out_$p29 := $load.ref($M.0, out_$p28);
    goto corral_source_split_4802;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref($add.ref(out_$p16, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_4801;

  $bb7:
    assume !(out_$i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    out_$p25, out_$i26 := out_$p16, out_$i23;
    assume true;
    goto $bb7;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    out_$i24 := $ne.i32(out_$i23, 0);
    goto corral_source_split_4787;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 902} out_$i23 := vlan_vid_add(out_$p18, out_$i20, out_$i22);
    call {:si_unique_call 903} {:cexpr "err"} boogie_si_record_i32(out_$i23);
    goto corral_source_split_4786;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    out_$i22 := $trunc.i32.i16(out_$i21);
    goto corral_source_split_4785;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    out_$i21 := $zext.i16.i32(in_$i2);
    goto corral_source_split_4784;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    out_$i20 := $trunc.i32.i16(out_$i19);
    goto corral_source_split_4783;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    out_$i19 := $zext.i16.i32(in_$i1);
    goto corral_source_split_4782;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.0, out_$p17);
    goto corral_source_split_4781;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(out_$p16, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_4780;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$p25, out_$i26, out_$p28, out_$p29, out_$p30, out_$p31, out_$p32, out_$i33, out_$i34, out_$p16 := team_vlan_rx_add_vid_loop_$bb4(in_$i1, in_$i2, in_$i14, out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$p25, out_$i26, out_$p28, out_$p29, out_$p30, out_$p31, out_$p32, out_$i33, out_$i34, out_$p16);
    return;

  exit:
    return;
}



procedure team_vlan_rx_add_vid_loop_$bb4(in_$i1: i16, in_$i2: i16, in_$i14: i64, in_$p17: ref, in_$p18: ref, in_$i19: i32, in_$i20: i16, in_$i21: i32, in_$i22: i16, in_$i23: i32, in_$i24: i1, in_$p25: ref, in_$i26: i32, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$i33: i64, in_$i34: i1, in_$p16: ref) returns (out_$p17: ref, out_$p18: ref, out_$i19: i32, out_$i20: i16, out_$i21: i32, out_$i22: i16, out_$i23: i32, out_$i24: i1, out_$p25: ref, out_$i26: i32, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$i33: i64, out_$i34: i1, out_$p16: ref);



implementation team_vlan_rx_kill_vid_loop_$bb10(in_$i1: i16, in_$i2: i16, in_$p4: ref, in_$i20: i64, in_$p23: ref, in_$p24: ref, in_$i25: i32, in_$i26: i16, in_$i27: i32, in_$i28: i16, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$i33: i32, in_$i34: i1, in_$i35: i1, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$i40: i64, in_$i41: i1, in_$p22: ref, in_vslice_dummy_var_80: i32) returns (out_$p23: ref, out_$p24: ref, out_$i25: i32, out_$i26: i16, out_$i27: i32, out_$i28: i16, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$i33: i32, out_$i34: i1, out_$i35: i1, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$i40: i64, out_$i41: i1, out_$p22: ref, out_vslice_dummy_var_80: i32)
{

  entry:
    out_$p23, out_$p24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p30, out_$p31, out_$p32, out_$i33, out_$i34, out_$i35, out_$p37, out_$p38, out_$p39, out_$i40, out_$i41, out_$p22, out_vslice_dummy_var_80 := in_$p23, in_$p24, in_$i25, in_$i26, in_$i27, in_$i28, in_$p30, in_$p31, in_$p32, in_$i33, in_$i34, in_$i35, in_$p37, in_$p38, in_$p39, in_$i40, in_$i41, in_$p22, in_vslice_dummy_var_80;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_4867;

  $bb18:
    assume out_$i41 == 1;
    assume {:verifier.code 0} true;
    out_$p22 := out_$p38;
    goto $bb18_dummy;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    out_$i41 := $ne.i64(out_$i40, in_$i20);
    goto corral_source_split_4893;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    out_$i40 := $p2i.ref.i64(out_$p39);
    goto corral_source_split_4892;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(out_$p37, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_4891;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref(out_$p37, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_4890;

  $bb17:
    assume {:verifier.code 0} true;
    out_$p37 := $bitcast.ref.ref(out_$p32);
    goto corral_source_split_4889;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 919} out_vslice_dummy_var_80 := rcu_read_lock_held();
    goto corral_source_split_4887;

  $bb16:
    assume !(out_$i35 == 1);
    goto corral_source_split_4886;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    out_$i35 := $trunc.i8.i1($u0);
    goto corral_source_split_4884;

  $bb12:
    assume out_$i34 == 1;
    goto corral_source_split_4883;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    out_$i34 := $ne.i32(out_$i33, 0);
    goto corral_source_split_4881;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 917} out_$i33 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 918} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i33);
    goto corral_source_split_4880;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    out_$p32 := $load.ref($M.28, in_$p4);
    goto corral_source_split_4879;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    $M.28 := $store.ref($M.28, in_$p4, out_$p31);
    goto corral_source_split_4878;

  corral_source_split_4876:
    assume {:verifier.code 0} true;
    out_$p31 := $load.ref($M.0, out_$p30);
    goto corral_source_split_4877;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref($add.ref(out_$p22, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_4876;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 916} vlan_vid_del(out_$p24, out_$i26, out_$i28);
    goto corral_source_split_4875;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    out_$i28 := $trunc.i32.i16(out_$i27);
    goto corral_source_split_4874;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    out_$i27 := $zext.i16.i32(in_$i2);
    goto corral_source_split_4873;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    out_$i26 := $trunc.i32.i16(out_$i25);
    goto corral_source_split_4872;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    out_$i25 := $zext.i16.i32(in_$i1);
    goto corral_source_split_4871;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    out_$p24 := $load.ref($M.0, out_$p23);
    goto corral_source_split_4870;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(out_$p22, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_4869;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb13:
    assume {:verifier.code 0} true;
    assume !(out_$i34 == 1);
    goto $bb14;

  $bb15:
    assume {:verifier.code 0} true;
    assume out_$i35 == 1;
    goto $bb14;

  $bb18_dummy:
    call {:si_unique_call 1} out_$p23, out_$p24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p30, out_$p31, out_$p32, out_$i33, out_$i34, out_$i35, out_$p37, out_$p38, out_$p39, out_$i40, out_$i41, out_$p22, out_vslice_dummy_var_80 := team_vlan_rx_kill_vid_loop_$bb10(in_$i1, in_$i2, in_$p4, in_$i20, out_$p23, out_$p24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p30, out_$p31, out_$p32, out_$i33, out_$i34, out_$i35, out_$p37, out_$p38, out_$p39, out_$i40, out_$i41, out_$p22, out_vslice_dummy_var_80);
    return;

  exit:
    return;
}



procedure team_vlan_rx_kill_vid_loop_$bb10(in_$i1: i16, in_$i2: i16, in_$p4: ref, in_$i20: i64, in_$p23: ref, in_$p24: ref, in_$i25: i32, in_$i26: i16, in_$i27: i32, in_$i28: i16, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$i33: i32, in_$i34: i1, in_$i35: i1, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$i40: i64, in_$i41: i1, in_$p22: ref, in_vslice_dummy_var_80: i32) returns (out_$p23: ref, out_$p24: ref, out_$i25: i32, out_$i26: i16, out_$i27: i32, out_$i28: i16, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$i33: i32, out_$i34: i1, out_$i35: i1, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$i40: i64, out_$i41: i1, out_$p22: ref, out_vslice_dummy_var_80: i32);
  modifies $M.28;



implementation team_netpoll_setup_loop_$bb4(in_$p3: ref, in_$i13: i64, in_$i17: i32, in_$i18: i1, in_$i19: i32, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$i28: i1, in_$p16: ref, in_$i29: i32) returns (out_$i17: i32, out_$i18: i1, out_$i19: i32, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$i28: i1, out_$p16: ref, out_$i29: i32)
{

  entry:
    out_$i17, out_$i18, out_$i19, out_$p22, out_$p23, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p16, out_$i29 := in_$i17, in_$i18, in_$i19, in_$p22, in_$p23, in_$p24, in_$p25, in_$p26, in_$i27, in_$i28, in_$p16, in_$i29;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_4918;

  $bb10:
    assume out_$i28 == 1;
    assume {:verifier.code 0} true;
    out_$p16 := out_$p25;
    goto $bb10_dummy;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    out_$i29 := out_$i17;
    assume true;
    goto $bb10;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    out_$i28 := $ne.i64(out_$i27, in_$i13);
    goto corral_source_split_4936;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    out_$i27 := $p2i.ref.i64(out_$p26);
    goto corral_source_split_4935;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(out_$p24, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_4934;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref(out_$p24, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_4933;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    out_$p24 := $bitcast.ref.ref(out_$p23);
    goto corral_source_split_4932;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    out_$p23 := $load.ref($M.0, out_$p22);
    goto corral_source_split_4931;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref($add.ref(out_$p16, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_4930;

  $bb7:
    assume !(out_$i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    out_$i19 := out_$i17;
    assume true;
    goto $bb7;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    out_$i18 := $ne.i32(out_$i17, 0);
    goto corral_source_split_4921;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 923} out_$i17 := team_port_enable_netpoll(in_$p3, out_$p16);
    call {:si_unique_call 924} {:cexpr "err"} boogie_si_record_i32(out_$i17);
    goto corral_source_split_4920;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$i17, out_$i18, out_$i19, out_$p22, out_$p23, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p16, out_$i29 := team_netpoll_setup_loop_$bb4(in_$p3, in_$i13, out_$i17, out_$i18, out_$i19, out_$p22, out_$p23, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p16, out_$i29);
    return;

  exit:
    return;
}



procedure team_netpoll_setup_loop_$bb4(in_$p3: ref, in_$i13: i64, in_$i17: i32, in_$i18: i1, in_$i19: i32, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$i28: i1, in_$p16: ref, in_$i29: i32) returns (out_$i17: i32, out_$i18: i1, out_$i19: i32, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$i28: i1, out_$p16: ref, out_$i29: i32);
  modifies $M.0, $CurrAddr;



implementation team_fix_features_loop_$bb10(in_$i1: i64, in_$p3: ref, in_$i21: i64, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$i29: i64, in_$i30: i64, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$i35: i32, in_$i36: i1, in_$i37: i1, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$i43: i1, in_$p24: ref, in_$i25: i64, in_$i44: i64, in_vslice_dummy_var_82: i32) returns (out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$i29: i64, out_$i30: i64, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$i35: i32, out_$i36: i1, out_$i37: i1, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$i43: i1, out_$p24: ref, out_$i25: i64, out_$i44: i64, out_vslice_dummy_var_82: i32)
{

  entry:
    out_$p26, out_$p27, out_$p28, out_$i29, out_$i30, out_$p32, out_$p33, out_$p34, out_$i35, out_$i36, out_$i37, out_$p39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p24, out_$i25, out_$i44, out_vslice_dummy_var_82 := in_$p26, in_$p27, in_$p28, in_$i29, in_$i30, in_$p32, in_$p33, in_$p34, in_$i35, in_$i36, in_$i37, in_$p39, in_$p40, in_$p41, in_$i42, in_$i43, in_$p24, in_$i25, in_$i44, in_vslice_dummy_var_82;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4987;

  $bb18:
    assume out_$i43 == 1;
    assume {:verifier.code 0} true;
    out_$p24, out_$i25 := out_$p40, out_$i30;
    goto $bb18_dummy;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    out_$i44 := out_$i30;
    assume true;
    goto $bb18;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    out_$i43 := $ne.i64(out_$i42, in_$i21);
    goto corral_source_split_5011;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    out_$i42 := $p2i.ref.i64(out_$p41);
    goto corral_source_split_5010;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(out_$p39, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_5009;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref(out_$p39, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_5008;

  $bb17:
    assume {:verifier.code 0} true;
    out_$p39 := $bitcast.ref.ref(out_$p34);
    goto corral_source_split_5007;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 951} out_vslice_dummy_var_82 := rcu_read_lock_held();
    goto corral_source_split_5005;

  $bb16:
    assume !(out_$i37 == 1);
    goto corral_source_split_5004;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    out_$i37 := $trunc.i8.i1($u0);
    goto corral_source_split_5002;

  $bb12:
    assume out_$i36 == 1;
    goto corral_source_split_5001;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    out_$i36 := $ne.i32(out_$i35, 0);
    goto corral_source_split_4999;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 949} out_$i35 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 950} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i35);
    goto corral_source_split_4998;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    out_$p34 := $load.ref($M.30, in_$p3);
    goto corral_source_split_4997;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    $M.30 := $store.ref($M.30, in_$p3, out_$p33);
    goto corral_source_split_4996;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    out_$p33 := $load.ref($M.0, out_$p32);
    goto corral_source_split_4995;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref($add.ref(out_$p24, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_4994;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 947} out_$i30 := netdev_increment_features(out_$i25, out_$i29, in_$i1);
    call {:si_unique_call 948} {:cexpr "features"} boogie_si_record_i64(out_$i30);
    goto corral_source_split_4993;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    out_$i29 := $load.i64($M.0, out_$p28);
    goto corral_source_split_4992;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(out_$p27, $mul.ref(0, 3176)), $mul.ref(208, 1));
    goto corral_source_split_4991;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    out_$p27 := $load.ref($M.0, out_$p26);
    goto corral_source_split_4990;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(out_$p24, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_4989;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb13:
    assume {:verifier.code 0} true;
    assume !(out_$i36 == 1);
    goto $bb14;

  $bb15:
    assume {:verifier.code 0} true;
    assume out_$i37 == 1;
    goto $bb14;

  $bb18_dummy:
    call {:si_unique_call 1} out_$p26, out_$p27, out_$p28, out_$i29, out_$i30, out_$p32, out_$p33, out_$p34, out_$i35, out_$i36, out_$i37, out_$p39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p24, out_$i25, out_$i44, out_vslice_dummy_var_82 := team_fix_features_loop_$bb10(in_$i1, in_$p3, in_$i21, out_$p26, out_$p27, out_$p28, out_$i29, out_$i30, out_$p32, out_$p33, out_$p34, out_$i35, out_$i36, out_$i37, out_$p39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p24, out_$i25, out_$i44, out_vslice_dummy_var_82);
    return;

  exit:
    return;
}



procedure team_fix_features_loop_$bb10(in_$i1: i64, in_$p3: ref, in_$i21: i64, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$i29: i64, in_$i30: i64, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$i35: i32, in_$i36: i1, in_$i37: i1, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$i43: i1, in_$p24: ref, in_$i25: i64, in_$i44: i64, in_vslice_dummy_var_82: i32) returns (out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$i29: i64, out_$i30: i64, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$i35: i32, out_$i36: i1, out_$i37: i1, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$i43: i1, out_$p24: ref, out_$i25: i64, out_$i44: i64, out_vslice_dummy_var_82: i32);
  modifies $M.30;



implementation __team_option_inst_add_port_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i9: i64, in_$p12: ref, in_$i13: i8, in_$i14: i1, in_$i15: i32, in_$i16: i1, in_$i17: i32, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$i24: i1, in_$p11: ref) returns (out_$p12: ref, out_$i13: i8, out_$i14: i1, out_$i15: i32, out_$i16: i1, out_$i17: i32, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$i24: i1, out_$p11: ref)
{

  entry:
    out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$p19, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$p11 := in_$p12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$p19, in_$p20, in_$p21, in_$p22, in_$i23, in_$i24, in_$p11;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_5669;

  $bb14:
    assume out_$i24 == 1;
    assume {:verifier.code 0} true;
    out_$p11 := out_$p20;
    goto $bb14_dummy;

  corral_source_split_5682:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_5681:
    assume {:verifier.code 0} true;
    out_$i24 := $ne.i64(out_$i23, in_$i9);
    goto corral_source_split_5682;

  corral_source_split_5680:
    assume {:verifier.code 0} true;
    out_$i23 := $p2i.ref.i64(out_$p22);
    goto corral_source_split_5681;

  corral_source_split_5679:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(out_$p21, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_5680;

  corral_source_split_5678:
    assume {:verifier.code 0} true;
    out_$p21 := $bitcast.ref.ref(out_$p20);
    goto corral_source_split_5679;

  corral_source_split_5677:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.0, out_$p19);
    goto corral_source_split_5678;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref($add.ref(out_$p11, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5677;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb11:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_5685:
    assume {:verifier.code 0} true;
    out_$i17 := out_$i15;
    assume true;
    goto $bb11;

  corral_source_split_5684:
    assume {:verifier.code 0} true;
    out_$i16 := $ne.i32(out_$i15, 0);
    goto corral_source_split_5685;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1120} out_$i15 := __team_option_inst_add(in_$p0, out_$p11, in_$p1);
    call {:si_unique_call 1121} {:cexpr "err"} boogie_si_record_i32(out_$i15);
    goto corral_source_split_5684;

  $bb6:
    assume out_$i14 == 1;
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_5673:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    out_$i14 := $trunc.i8.i1(out_$i13);
    goto corral_source_split_5673;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    out_$i13 := $load.i8($M.0, out_$p12);
    goto corral_source_split_5672;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(out_$p11, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_5671;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb7:
    assume !(out_$i14 == 1);
    goto corral_source_split_5675;

  $bb14_dummy:
    call {:si_unique_call 1} out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$p19, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$p11 := __team_option_inst_add_port_loop_$bb4(in_$p0, in_$p1, in_$i9, out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$p19, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$p11);
    return;

  exit:
    return;
}



procedure __team_option_inst_add_port_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i9: i64, in_$p12: ref, in_$i13: i8, in_$i14: i1, in_$i15: i32, in_$i16: i1, in_$i17: i32, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$i24: i1, in_$p11: ref) returns (out_$p12: ref, out_$i13: i8, out_$i14: i1, out_$i15: i32, out_$i16: i1, out_$i17: i32, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$i24: i1, out_$p11: ref);
  modifies $M.0, $M.16, $M.25, $M.26, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.31, $M.32, $CurrAddr, $M.23, $M.24, $M.4, $M.3;



implementation __team_netpoll_cleanup_loop_$bb4(in_$i9: i64, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$i18: i64, in_$i19: i1, in_$p11: ref) returns (out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$i18: i64, out_$i19: i1, out_$p11: ref)
{

  entry:
    out_$p13, out_$p14, out_$p15, out_$p16, out_$p17, out_$i18, out_$i19, out_$p11 := in_$p13, in_$p14, in_$p15, in_$p16, in_$p17, in_$i18, in_$i19, in_$p11;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_5937;

  $bb6:
    assume out_$i19 == 1;
    assume {:verifier.code 0} true;
    out_$p11 := out_$p16;
    goto $bb6_dummy;

  corral_source_split_5946:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_5945:
    assume {:verifier.code 0} true;
    out_$i19 := $ne.i64(out_$i18, in_$i9);
    goto corral_source_split_5946;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    out_$i18 := $p2i.ref.i64(out_$p17);
    goto corral_source_split_5945;

  corral_source_split_5943:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(out_$p15, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_5944;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref(out_$p15, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_5943;

  corral_source_split_5941:
    assume {:verifier.code 0} true;
    out_$p15 := $bitcast.ref.ref(out_$p14);
    goto corral_source_split_5942;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    out_$p14 := $load.ref($M.0, out_$p13);
    goto corral_source_split_5941;

  corral_source_split_5939:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref($add.ref(out_$p11, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_5940;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1169} team_port_disable_netpoll(out_$p11);
    goto corral_source_split_5939;

  corral_source_split_5937:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p13, out_$p14, out_$p15, out_$p16, out_$p17, out_$i18, out_$i19, out_$p11 := __team_netpoll_cleanup_loop_$bb4(in_$i9, out_$p13, out_$p14, out_$p15, out_$p16, out_$p17, out_$i18, out_$i19, out_$p11);
    return;

  exit:
    return;
}



procedure __team_netpoll_cleanup_loop_$bb4(in_$i9: i64, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$i18: i64, in_$i19: i1, in_$p11: ref) returns (out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$i18: i64, out_$i19: i1, out_$p11: ref);
  modifies $M.0;



implementation team_queue_override_transmit_loop_$bb17(in_$p0: ref, in_$p1: ref, in_$p3: ref, in_$i28: i64, in_$i31: i32, in_$i32: i1, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$i37: i32, in_$i38: i1, in_$i39: i1, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$i44: i64, in_$i45: i1, in_$p30: ref, in_vslice_dummy_var_106: i32) returns (out_$i31: i32, out_$i32: i1, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$i37: i32, out_$i38: i1, out_$i39: i1, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$i44: i64, out_$i45: i1, out_$p30: ref, out_vslice_dummy_var_106: i32)
{

  entry:
    out_$i31, out_$i32, out_$p34, out_$p35, out_$p36, out_$i37, out_$i38, out_$i39, out_$p41, out_$p42, out_$p43, out_$i44, out_$i45, out_$p30, out_vslice_dummy_var_106 := in_$i31, in_$i32, in_$p34, in_$p35, in_$p36, in_$i37, in_$i38, in_$i39, in_$p41, in_$p42, in_$p43, in_$i44, in_$i45, in_$p30, in_vslice_dummy_var_106;
    goto $bb17, exit;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_6082;

  $bb28:
    assume out_$i45 == 1;
    assume {:verifier.code 0} true;
    out_$p30 := out_$p42;
    goto $bb28_dummy;

  corral_source_split_6106:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    out_$i45 := $ne.i64(out_$i44, in_$i28);
    goto corral_source_split_6106;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    out_$i44 := $p2i.ref.i64(out_$p43);
    goto corral_source_split_6105;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(out_$p41, $mul.ref($sub.ref(0, 128), 160)), $mul.ref(128, 1));
    goto corral_source_split_6104;

  corral_source_split_6102:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref(out_$p41, $mul.ref($sub.ref(0, 128), 160));
    goto corral_source_split_6103;

  $bb27:
    assume {:verifier.code 0} true;
    out_$p41 := $bitcast.ref.ref(out_$p36);
    goto corral_source_split_6102;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_6099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1216} out_vslice_dummy_var_106 := rcu_read_lock_held();
    goto corral_source_split_6100;

  $bb26:
    assume !(out_$i39 == 1);
    goto corral_source_split_6099;

  corral_source_split_6097:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    out_$i39 := $trunc.i8.i1($u0);
    goto corral_source_split_6097;

  $bb22:
    assume out_$i38 == 1;
    goto corral_source_split_6096;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_6093:
    assume {:verifier.code 0} true;
    out_$i38 := $ne.i32(out_$i37, 0);
    goto corral_source_split_6094;

  corral_source_split_6092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1214} out_$i37 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 1215} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i37);
    goto corral_source_split_6093;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    out_$p36 := $load.ref($M.32, in_$p3);
    goto corral_source_split_6092;

  corral_source_split_6090:
    assume {:verifier.code 0} true;
    $M.32 := $store.ref($M.32, in_$p3, out_$p35);
    goto corral_source_split_6091;

  corral_source_split_6089:
    assume {:verifier.code 0} true;
    out_$p35 := $load.ref($M.0, out_$p34);
    goto corral_source_split_6090;

  $bb21:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref($add.ref(out_$p30, $mul.ref(0, 160)), $mul.ref(128, 1)), $mul.ref(0, 1));
    goto corral_source_split_6089;

  $bb20:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_6085:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20;

  corral_source_split_6084:
    assume {:verifier.code 0} true;
    out_$i32 := $eq.i32(out_$i31, 0);
    goto corral_source_split_6085;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1212} out_$i31 := team_dev_queue_xmit(in_$p0, out_$p30, in_$p1);
    call {:si_unique_call 1213} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i31);
    goto corral_source_split_6084;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb23:
    assume {:verifier.code 0} true;
    assume !(out_$i38 == 1);
    goto $bb24;

  $bb25:
    assume {:verifier.code 0} true;
    assume out_$i39 == 1;
    goto $bb24;

  $bb28_dummy:
    call {:si_unique_call 1} out_$i31, out_$i32, out_$p34, out_$p35, out_$p36, out_$i37, out_$i38, out_$i39, out_$p41, out_$p42, out_$p43, out_$i44, out_$i45, out_$p30, out_vslice_dummy_var_106 := team_queue_override_transmit_loop_$bb17(in_$p0, in_$p1, in_$p3, in_$i28, out_$i31, out_$i32, out_$p34, out_$p35, out_$p36, out_$i37, out_$i38, out_$i39, out_$p41, out_$p42, out_$p43, out_$i44, out_$i45, out_$p30, out_vslice_dummy_var_106);
    return;

  exit:
    return;
}



procedure team_queue_override_transmit_loop_$bb17(in_$p0: ref, in_$p1: ref, in_$p3: ref, in_$i28: i64, in_$i31: i32, in_$i32: i1, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$i37: i32, in_$i38: i1, in_$i39: i1, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$i44: i64, in_$i45: i1, in_$p30: ref, in_vslice_dummy_var_106: i32) returns (out_$i31: i32, out_$i32: i1, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$i37: i32, out_$i38: i1, out_$i39: i1, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$i44: i64, out_$i45: i1, out_$p30: ref, out_vslice_dummy_var_106: i32);
  modifies $M.32, $M.0;



implementation arch_local_irq_restore_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} arch_local_irq_restore_loop_$bb3();
    return;

  exit:
    return;
}



procedure arch_local_irq_restore_loop_$bb3();



implementation arch_local_save_flags_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} arch_local_save_flags_loop_$bb3();
    return;

  exit:
    return;
}



procedure arch_local_save_flags_loop_$bb3();



implementation arch_local_irq_disable_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} arch_local_irq_disable_loop_$bb3();
    return;

  exit:
    return;
}



procedure arch_local_irq_disable_loop_$bb3();



implementation team_queue_override_init_loop_$bb11(in_$i5: i32, in_$p18: ref, in_$i19: i32, in_$i20: i1, in_$i16: i32, in_$p17: ref) returns (out_$p18: ref, out_$i19: i32, out_$i20: i1, out_$i16: i32, out_$p17: ref)
{

  entry:
    out_$p18, out_$i19, out_$i20, out_$i16, out_$p17 := in_$p18, in_$i19, in_$i20, in_$i16, in_$p17;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6277;

  $bb13:
    assume out_$i20 == 1;
    assume {:verifier.code 0} true;
    out_$i16, out_$p17 := out_$i19, out_$p18;
    goto $bb13_dummy;

  corral_source_split_6282:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_6281:
    assume {:verifier.code 0} true;
    out_$i20 := $ult.i32(out_$i19, in_$i5);
    goto corral_source_split_6282;

  corral_source_split_6280:
    assume {:verifier.code 0} true;
    out_$i19 := $add.i32(out_$i16, 1);
    call {:si_unique_call 1275} {:cexpr "i"} boogie_si_record_i32(out_$i19);
    goto corral_source_split_6281;

  corral_source_split_6279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1274} INIT_LIST_HEAD(out_$p17);
    goto corral_source_split_6280;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref(out_$p17, $mul.ref(1, 16));
    goto corral_source_split_6279;

  corral_source_split_6277:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb13_dummy:
    call {:si_unique_call 1} out_$p18, out_$i19, out_$i20, out_$i16, out_$p17 := team_queue_override_init_loop_$bb11(in_$i5, out_$p18, out_$i19, out_$i20, out_$i16, out_$p17);
    return;

  exit:
    return;
}



procedure team_queue_override_init_loop_$bb11(in_$i5: i32, in_$p18: ref, in_$i19: i32, in_$i20: i1, in_$i16: i32, in_$p17: ref) returns (out_$p18: ref, out_$i19: i32, out_$i20: i1, out_$i16: i32, out_$p17: ref);
  modifies $M.0;



implementation netdev_for_each_tx_queue_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p7: ref, in_$p8: ref, in_$i9: i64, in_$p10: ref, in_$i11: i32, in_$i12: i32, in_$i13: i1, in_$i6: i32) returns (out_$p7: ref, out_$p8: ref, out_$i9: i64, out_$p10: ref, out_$i11: i32, out_$i12: i32, out_$i13: i1, out_$i6: i32)
{

  entry:
    out_$p7, out_$p8, out_$i9, out_$p10, out_$i11, out_$i12, out_$i13, out_$i6 := in_$p7, in_$p8, in_$i9, in_$p10, in_$i11, in_$i12, in_$i13, in_$i6;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_6358;

  $bb6:
    assume out_$i13 == 1;
    assume {:verifier.code 0} true;
    out_$i6 := out_$i11;
    goto $bb6_dummy;

  corral_source_split_6366:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_6365:
    assume {:verifier.code 0} true;
    out_$i13 := $ugt.i32(out_$i12, out_$i11);
    goto corral_source_split_6366;

  corral_source_split_6364:
    assume {:verifier.code 0} true;
    out_$i12 := $load.i32($M.0, in_$p3);
    goto corral_source_split_6365;

  corral_source_split_6363:
    assume {:verifier.code 0} true;
    out_$i11 := $add.i32(out_$i6, 1);
    call {:si_unique_call 1297} {:cexpr "i"} boogie_si_record_i32(out_$i11);
    goto corral_source_split_6364;

  corral_source_split_6362:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref(out_$p8, $mul.ref(out_$i9, 496));
    call {:si_unique_call 1296} devirtbounce.17(in_$p1, in_$p0, out_$p10, in_$p2);
    goto corral_source_split_6363;

  corral_source_split_6361:
    assume {:verifier.code 0} true;
    out_$i9 := $zext.i32.i64(out_$i6);
    goto corral_source_split_6362;

  corral_source_split_6360:
    assume {:verifier.code 0} true;
    out_$p8 := $load.ref($M.0, out_$p7);
    goto corral_source_split_6361;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref($add.ref(in_$p0, $mul.ref(0, 3176)), $mul.ref(920, 1));
    goto corral_source_split_6360;

  corral_source_split_6358:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p7, out_$p8, out_$i9, out_$p10, out_$i11, out_$i12, out_$i13, out_$i6 := netdev_for_each_tx_queue_loop_$bb4(in_$p0, in_$p1, in_$p2, in_$p3, out_$p7, out_$p8, out_$i9, out_$p10, out_$i11, out_$i12, out_$i13, out_$i6);
    return;

  exit:
    return;
}



procedure netdev_for_each_tx_queue_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p7: ref, in_$p8: ref, in_$i9: i64, in_$p10: ref, in_$i11: i32, in_$i12: i32, in_$i13: i1, in_$i6: i32) returns (out_$p7: ref, out_$p8: ref, out_$i9: i64, out_$p10: ref, out_$i11: i32, out_$i12: i32, out_$i13: i1, out_$i6: i32);



implementation main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$i4: i16, in_$p6: ref, in_$i7: i32, in_$p9: ref, in_$p10: ref, in_$p12: ref, in_$p13: ref, in_$i14: i32, in_$i15: i16, in_$p17: ref, in_$i18: i64, in_$p19: ref, in_$p21: ref, in_$p23: ref, in_$p25: ref, in_$i29: i32, in_$i30: i1, in_$i31: i1, in_$i32: i1, in_$i33: i1, in_$i34: i1, in_$i35: i1, in_$i36: i32, in_$i37: i1, in_$i38: i32, in_$i39: i1, in_$i40: i1, in_$i41: i1, in_$i42: i1, in_$i43: i1, in_$i44: i1, in_$i45: i1, in_$i46: i1, in_$i47: i1, in_$i48: i1, in_$i49: i1, in_$i50: i1, in_$i51: i1, in_$i52: i1, in_$i53: i1, in_$i54: i1, in_$i55: i1, in_$i56: i1, in_$i57: i1, in_$i58: i1, in_$i59: i1, in_$i60: i32, in_$i61: i1, in_$p62: ref, in_$i63: i16, in_$i64: i32, in_$i65: i16, in_$i66: i32, in_$i67: i16, in_$i69: i32, in_$i70: i1, in_$p71: ref, in_$i72: i16, in_$i73: i32, in_$i74: i16, in_$i75: i32, in_$i76: i16, in_$i78: i32, in_$i79: i1, in_$p80: ref, in_$i81: i16, in_$i82: i32, in_$i83: i16, in_$i84: i32, in_$i85: i16, in_$i87: i32, in_$i88: i1, in_$p89: ref, in_$p90: ref, in_$i92: i32, in_$i93: i1, in_$p94: ref, in_$p95: ref, in_$i97: i32, in_$i98: i1, in_$p99: ref, in_$p100: ref, in_$i102: i32, in_$i103: i1, in_$p104: ref, in_$i105: i16, in_$i106: i32, in_$i107: i16, in_$i108: i32, in_$i109: i16, in_$i111: i32, in_$i112: i1, in_$p113: ref, in_$i114: i16, in_$i115: i32, in_$i116: i16, in_$i117: i32, in_$i118: i16, in_$i120: i32, in_$i121: i1, in_$p122: ref, in_$i123: i16, in_$i124: i32, in_$i125: i16, in_$i126: i32, in_$i127: i16, in_$i129: i32, in_$i130: i1, in_$p131: ref, in_$p132: ref, in_$i134: i32, in_$i135: i1, in_$p136: ref, in_$p137: ref, in_$i139: i32, in_$i140: i1, in_$p141: ref, in_$p142: ref, in_$i144: i32, in_$i145: i1, in_$p146: ref, in_$i147: i32, in_$i148: i32, in_$i149: i1, in_$i150: i32, in_$i151: i1, in_$p152: ref, in_$i154: i32, in_$i155: i1, in_$p156: ref, in_$i157: i64, in_$i159: i32, in_$i160: i1, in_$p161: ref, in_$i162: i64, in_$i164: i32, in_$i165: i1, in_$p166: ref, in_$i167: i64, in_$i169: i32, in_$i170: i1, in_$p171: ref, in_$i172: i32, in_$i173: i32, in_$i174: i1, in_$i175: i32, in_$i176: i32, in_$i177: i32, in_$i178: i1, in_$p179: ref, in_$i180: i32, in_$i181: i1, in_$p182: ref, in_$i183: i32, in_$i184: i1, in_$p185: ref, in_$i186: i32, in_$i187: i1, in_$p188: ref, in_$i190: i32, in_$i191: i1, in_$p192: ref, in_$i193: i32, in_$i194: i1, in_$p195: ref, in_$i196: i32, in_$i197: i1, in_$p198: ref, in_$i199: i32, in_$i200: i1, in_$p201: ref, in_$i202: i32, in_$i203: i1, in_$p204: ref, in_$i205: i32, in_$i206: i1, in_$p207: ref, in_$i208: i32, in_$i209: i1, in_$p210: ref, in_$i211: i32, in_$i212: i1, in_$p213: ref, in_$i214: i32, in_$i215: i1, in_$p216: ref, in_$i217: i32, in_$i218: i1, in_$p219: ref, in_$i221: i32, in_$i222: i1, in_$p223: ref, in_$i225: i32, in_$i226: i1, in_$p227: ref, in_$i229: i32, in_$i230: i1, in_$p231: ref, in_$p232: ref, in_$i234: i32, in_$i235: i1, in_$p236: ref, in_$p237: ref, in_$i239: i32, in_$i240: i1, in_$p241: ref, in_$p242: ref, in_$i244: i32, in_$i245: i1, in_$p246: ref, in_$i248: i32, in_$i249: i1, in_$p250: ref, in_$i252: i32, in_$i253: i1, in_$p254: ref, in_$i255: i32, in_$i256: i32, in_$i257: i32, in_$i258: i1, in_$p259: ref, in_$i260: i8, in_$i261: i1, in_$i263: i32, in_$i264: i1, in_$p265: ref, in_$i266: i8, in_$i267: i1, in_$i269: i32, in_$i270: i1, in_$p271: ref, in_$i272: i8, in_$i273: i1, in_$i275: i32, in_$i276: i1, in_$p277: ref, in_$i279: i32, in_$i280: i1, in_$p281: ref, in_$i283: i32, in_$i284: i1, in_$p285: ref, in_$i287: i32, in_$i288: i1, in_$p289: ref, in_$i291: i32, in_$i292: i1, in_$p293: ref, in_$i295: i32, in_$i296: i1, in_$p297: ref, in_$i299: i32, in_$i300: i1, in_$i301: i32, in_$i302: i1, in_$i303: i32, in_$i304: i1, in_$i306: i32, in_$i307: i1, in_$i308: i32, in_$i309: i1, in_$i310: i1, in_$i311: i1, in_$i312: i32, in_$i313: i1, in_$i314: i32, in_$i315: i1, in_$i316: i32, in_$i317: i1, in_$i318: i32, in_$i319: i32, in_$i320: i1, in_$i321: i32, in_$i322: i1, in_$i323: i32, in_$i324: i1, in_$i325: i32, in_$i326: i1, in_$i327: i1, in_$i328: i1, in_$i329: i32, in_$i330: i1, in_$p331: ref, in_$i332: i32, in_$i333: i1, in_$p334: ref, in_$i336: i32, in_$i337: i1, in_$i338: i32, in_$i339: i1, in_$i340: i1, in_$i341: i1, in_$i342: i1, in_$i343: i1, in_$i344: i1, in_$i345: i1, in_$i346: i1, in_$i347: i32, in_$i348: i1, in_$p349: ref, in_$i350: i32, in_$i351: i32, in_$i352: i32, in_$i353: i1, in_$i355: i32, in_$i356: i1, in_$i358: i32, in_$i359: i1, in_$i361: i32, in_$i362: i1, in_$p363: ref, in_$p364: ref, in_$i366: i32, in_$i367: i1, in_$p368: ref, in_$p369: ref, in_$i371: i32, in_$i372: i1, in_$p373: ref, in_$p374: ref, in_$i376: i32, in_$i377: i1, in_$i379: i32, in_$i380: i1, in_$i382: i32, in_$i383: i1, in_$i385: i32, in_$i386: i1, in_$p387: ref, in_$p388: ref, in_$p389: ref, in_$i391: i32, in_$i392: i1, in_$p393: ref, in_$p394: ref, in_$p395: ref, in_$i397: i32, in_$i398: i1, in_$p399: ref, in_$p400: ref, in_$p401: ref, in_$i403: i32, in_$i404: i1, in_$i406: i32, in_$i407: i32, in_$i408: i32, in_$i409: i1, in_$i411: i32, in_$i412: i32, in_$i413: i32, in_$i414: i1, in_vslice_dummy_var_117: i32, in_vslice_dummy_var_118: i32, in_vslice_dummy_var_119: i32, in_vslice_dummy_var_120: i32, in_vslice_dummy_var_121: i32, in_vslice_dummy_var_122: i32, in_vslice_dummy_var_123: i32, in_vslice_dummy_var_124: i32, in_vslice_dummy_var_125: i32, in_vslice_dummy_var_126: i32, in_vslice_dummy_var_127: i32, in_vslice_dummy_var_128: i32, in_vslice_dummy_var_129: i32, in_vslice_dummy_var_130: i64, in_vslice_dummy_var_131: i64, in_vslice_dummy_var_132: i64, in_vslice_dummy_var_133: i32, in_vslice_dummy_var_134: i32, in_vslice_dummy_var_135: i32, in_vslice_dummy_var_136: i32, in_vslice_dummy_var_137: i16, in_vslice_dummy_var_138: i16, in_vslice_dummy_var_139: i16, in_vslice_dummy_var_140: i32, in_vslice_dummy_var_141: i32, in_vslice_dummy_var_142: i32, in_vslice_dummy_var_143: i32, in_vslice_dummy_var_144: i32, in_vslice_dummy_var_145: i32, in_vslice_dummy_var_146: i32, in_vslice_dummy_var_147: i32, in_vslice_dummy_var_148: ref, in_vslice_dummy_var_149: ref, in_vslice_dummy_var_150: ref, in_vslice_dummy_var_151: i32, in_vslice_dummy_var_152: i32, in_vslice_dummy_var_153: i32, in_vslice_dummy_var_154: i32, in_vslice_dummy_var_155: i32, in_vslice_dummy_var_156: i32, in_vslice_dummy_var_157: i32, in_vslice_dummy_var_158: i32, in_vslice_dummy_var_159: i32, in_vslice_dummy_var_160: i32, in_vslice_dummy_var_161: i32, in_vslice_dummy_var_162: i32, in_vslice_dummy_var_163: i32, in_vslice_dummy_var_164: i32, in_vslice_dummy_var_165: i32, in_vslice_dummy_var_166: i32, in_vslice_dummy_var_167: i32) returns (out_$i29: i32, out_$i30: i1, out_$i31: i1, out_$i32: i1, out_$i33: i1, out_$i34: i1, out_$i35: i1, out_$i36: i32, out_$i37: i1, out_$i38: i32, out_$i39: i1, out_$i40: i1, out_$i41: i1, out_$i42: i1, out_$i43: i1, out_$i44: i1, out_$i45: i1, out_$i46: i1, out_$i47: i1, out_$i48: i1, out_$i49: i1, out_$i50: i1, out_$i51: i1, out_$i52: i1, out_$i53: i1, out_$i54: i1, out_$i55: i1, out_$i56: i1, out_$i57: i1, out_$i58: i1, out_$i59: i1, out_$i60: i32, out_$i61: i1, out_$p62: ref, out_$i63: i16, out_$i64: i32, out_$i65: i16, out_$i66: i32, out_$i67: i16, out_$i69: i32, out_$i70: i1, out_$p71: ref, out_$i72: i16, out_$i73: i32, out_$i74: i16, out_$i75: i32, out_$i76: i16, out_$i78: i32, out_$i79: i1, out_$p80: ref, out_$i81: i16, out_$i82: i32, out_$i83: i16, out_$i84: i32, out_$i85: i16, out_$i87: i32, out_$i88: i1, out_$p89: ref, out_$p90: ref, out_$i92: i32, out_$i93: i1, out_$p94: ref, out_$p95: ref, out_$i97: i32, out_$i98: i1, out_$p99: ref, out_$p100: ref, out_$i102: i32, out_$i103: i1, out_$p104: ref, out_$i105: i16, out_$i106: i32, out_$i107: i16, out_$i108: i32, out_$i109: i16, out_$i111: i32, out_$i112: i1, out_$p113: ref, out_$i114: i16, out_$i115: i32, out_$i116: i16, out_$i117: i32, out_$i118: i16, out_$i120: i32, out_$i121: i1, out_$p122: ref, out_$i123: i16, out_$i124: i32, out_$i125: i16, out_$i126: i32, out_$i127: i16, out_$i129: i32, out_$i130: i1, out_$p131: ref, out_$p132: ref, out_$i134: i32, out_$i135: i1, out_$p136: ref, out_$p137: ref, out_$i139: i32, out_$i140: i1, out_$p141: ref, out_$p142: ref, out_$i144: i32, out_$i145: i1, out_$p146: ref, out_$i147: i32, out_$i148: i32, out_$i149: i1, out_$i150: i32, out_$i151: i1, out_$p152: ref, out_$i154: i32, out_$i155: i1, out_$p156: ref, out_$i157: i64, out_$i159: i32, out_$i160: i1, out_$p161: ref, out_$i162: i64, out_$i164: i32, out_$i165: i1, out_$p166: ref, out_$i167: i64, out_$i169: i32, out_$i170: i1, out_$p171: ref, out_$i172: i32, out_$i173: i32, out_$i174: i1, out_$i175: i32, out_$i176: i32, out_$i177: i32, out_$i178: i1, out_$p179: ref, out_$i180: i32, out_$i181: i1, out_$p182: ref, out_$i183: i32, out_$i184: i1, out_$p185: ref, out_$i186: i32, out_$i187: i1, out_$p188: ref, out_$i190: i32, out_$i191: i1, out_$p192: ref, out_$i193: i32, out_$i194: i1, out_$p195: ref, out_$i196: i32, out_$i197: i1, out_$p198: ref, out_$i199: i32, out_$i200: i1, out_$p201: ref, out_$i202: i32, out_$i203: i1, out_$p204: ref, out_$i205: i32, out_$i206: i1, out_$p207: ref, out_$i208: i32, out_$i209: i1, out_$p210: ref, out_$i211: i32, out_$i212: i1, out_$p213: ref, out_$i214: i32, out_$i215: i1, out_$p216: ref, out_$i217: i32, out_$i218: i1, out_$p219: ref, out_$i221: i32, out_$i222: i1, out_$p223: ref, out_$i225: i32, out_$i226: i1, out_$p227: ref, out_$i229: i32, out_$i230: i1, out_$p231: ref, out_$p232: ref, out_$i234: i32, out_$i235: i1, out_$p236: ref, out_$p237: ref, out_$i239: i32, out_$i240: i1, out_$p241: ref, out_$p242: ref, out_$i244: i32, out_$i245: i1, out_$p246: ref, out_$i248: i32, out_$i249: i1, out_$p250: ref, out_$i252: i32, out_$i253: i1, out_$p254: ref, out_$i255: i32, out_$i256: i32, out_$i257: i32, out_$i258: i1, out_$p259: ref, out_$i260: i8, out_$i261: i1, out_$i263: i32, out_$i264: i1, out_$p265: ref, out_$i266: i8, out_$i267: i1, out_$i269: i32, out_$i270: i1, out_$p271: ref, out_$i272: i8, out_$i273: i1, out_$i275: i32, out_$i276: i1, out_$p277: ref, out_$i279: i32, out_$i280: i1, out_$p281: ref, out_$i283: i32, out_$i284: i1, out_$p285: ref, out_$i287: i32, out_$i288: i1, out_$p289: ref, out_$i291: i32, out_$i292: i1, out_$p293: ref, out_$i295: i32, out_$i296: i1, out_$p297: ref, out_$i299: i32, out_$i300: i1, out_$i301: i32, out_$i302: i1, out_$i303: i32, out_$i304: i1, out_$i306: i32, out_$i307: i1, out_$i308: i32, out_$i309: i1, out_$i310: i1, out_$i311: i1, out_$i312: i32, out_$i313: i1, out_$i314: i32, out_$i315: i1, out_$i316: i32, out_$i317: i1, out_$i318: i32, out_$i319: i32, out_$i320: i1, out_$i321: i32, out_$i322: i1, out_$i323: i32, out_$i324: i1, out_$i325: i32, out_$i326: i1, out_$i327: i1, out_$i328: i1, out_$i329: i32, out_$i330: i1, out_$p331: ref, out_$i332: i32, out_$i333: i1, out_$p334: ref, out_$i336: i32, out_$i337: i1, out_$i338: i32, out_$i339: i1, out_$i340: i1, out_$i341: i1, out_$i342: i1, out_$i343: i1, out_$i344: i1, out_$i345: i1, out_$i346: i1, out_$i347: i32, out_$i348: i1, out_$p349: ref, out_$i350: i32, out_$i351: i32, out_$i352: i32, out_$i353: i1, out_$i355: i32, out_$i356: i1, out_$i358: i32, out_$i359: i1, out_$i361: i32, out_$i362: i1, out_$p363: ref, out_$p364: ref, out_$i366: i32, out_$i367: i1, out_$p368: ref, out_$p369: ref, out_$i371: i32, out_$i372: i1, out_$p373: ref, out_$p374: ref, out_$i376: i32, out_$i377: i1, out_$i379: i32, out_$i380: i1, out_$i382: i32, out_$i383: i1, out_$i385: i32, out_$i386: i1, out_$p387: ref, out_$p388: ref, out_$p389: ref, out_$i391: i32, out_$i392: i1, out_$p393: ref, out_$p394: ref, out_$p395: ref, out_$i397: i32, out_$i398: i1, out_$p399: ref, out_$p400: ref, out_$p401: ref, out_$i403: i32, out_$i404: i1, out_$i406: i32, out_$i407: i32, out_$i408: i32, out_$i409: i1, out_$i411: i32, out_$i412: i32, out_$i413: i32, out_$i414: i1, out_vslice_dummy_var_117: i32, out_vslice_dummy_var_118: i32, out_vslice_dummy_var_119: i32, out_vslice_dummy_var_120: i32, out_vslice_dummy_var_121: i32, out_vslice_dummy_var_122: i32, out_vslice_dummy_var_123: i32, out_vslice_dummy_var_124: i32, out_vslice_dummy_var_125: i32, out_vslice_dummy_var_126: i32, out_vslice_dummy_var_127: i32, out_vslice_dummy_var_128: i32, out_vslice_dummy_var_129: i32, out_vslice_dummy_var_130: i64, out_vslice_dummy_var_131: i64, out_vslice_dummy_var_132: i64, out_vslice_dummy_var_133: i32, out_vslice_dummy_var_134: i32, out_vslice_dummy_var_135: i32, out_vslice_dummy_var_136: i32, out_vslice_dummy_var_137: i16, out_vslice_dummy_var_138: i16, out_vslice_dummy_var_139: i16, out_vslice_dummy_var_140: i32, out_vslice_dummy_var_141: i32, out_vslice_dummy_var_142: i32, out_vslice_dummy_var_143: i32, out_vslice_dummy_var_144: i32, out_vslice_dummy_var_145: i32, out_vslice_dummy_var_146: i32, out_vslice_dummy_var_147: i32, out_vslice_dummy_var_148: ref, out_vslice_dummy_var_149: ref, out_vslice_dummy_var_150: ref, out_vslice_dummy_var_151: i32, out_vslice_dummy_var_152: i32, out_vslice_dummy_var_153: i32, out_vslice_dummy_var_154: i32, out_vslice_dummy_var_155: i32, out_vslice_dummy_var_156: i32, out_vslice_dummy_var_157: i32, out_vslice_dummy_var_158: i32, out_vslice_dummy_var_159: i32, out_vslice_dummy_var_160: i32, out_vslice_dummy_var_161: i32, out_vslice_dummy_var_162: i32, out_vslice_dummy_var_163: i32, out_vslice_dummy_var_164: i32, out_vslice_dummy_var_165: i32, out_vslice_dummy_var_166: i32, out_vslice_dummy_var_167: i32)
{

  entry:
    out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$p62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i69, out_$i70, out_$p71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i78, out_$i79, out_$p80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i87, out_$i88, out_$p89, out_$p90, out_$i92, out_$i93, out_$p94, out_$p95, out_$i97, out_$i98, out_$p99, out_$p100, out_$i102, out_$i103, out_$p104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i111, out_$i112, out_$p113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i120, out_$i121, out_$p122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i129, out_$i130, out_$p131, out_$p132, out_$i134, out_$i135, out_$p136, out_$p137, out_$i139, out_$i140, out_$p141, out_$p142, out_$i144, out_$i145, out_$p146, out_$i147, out_$i148, out_$i149, out_$i150, out_$i151, out_$p152, out_$i154, out_$i155, out_$p156, out_$i157, out_$i159, out_$i160, out_$p161, out_$i162, out_$i164, out_$i165, out_$p166, out_$i167, out_$i169, out_$i170, out_$p171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177, out_$i178, out_$p179, out_$i180, out_$i181, out_$p182, out_$i183, out_$i184, out_$p185, out_$i186, out_$i187, out_$p188, out_$i190, out_$i191, out_$p192, out_$i193, out_$i194, out_$p195, out_$i196, out_$i197, out_$p198, out_$i199, out_$i200, out_$p201, out_$i202, out_$i203, out_$p204, out_$i205, out_$i206, out_$p207, out_$i208, out_$i209, out_$p210, out_$i211, out_$i212, out_$p213, out_$i214, out_$i215, out_$p216, out_$i217, out_$i218, out_$p219, out_$i221, out_$i222, out_$p223, out_$i225, out_$i226, out_$p227, out_$i229, out_$i230, out_$p231, out_$p232, out_$i234, out_$i235, out_$p236, out_$p237, out_$i239, out_$i240, out_$p241, out_$p242, out_$i244, out_$i245, out_$p246, out_$i248, out_$i249, out_$p250, out_$i252, out_$i253, out_$p254, out_$i255, out_$i256, out_$i257, out_$i258, out_$p259, out_$i260, out_$i261, out_$i263, out_$i264, out_$p265, out_$i266, out_$i267, out_$i269, out_$i270, out_$p271, out_$i272, out_$i273, out_$i275, out_$i276, out_$p277, out_$i279, out_$i280, out_$p281, out_$i283, out_$i284, out_$p285, out_$i287, out_$i288, out_$p289, out_$i291, out_$i292, out_$p293, out_$i295, out_$i296, out_$p297, out_$i299, out_$i300, out_$i301, out_$i302, out_$i303, out_$i304, out_$i306, out_$i307, out_$i308, out_$i309, out_$i310, out_$i311, out_$i312, out_$i313, out_$i314, out_$i315, out_$i316, out_$i317, out_$i318, out_$i319, out_$i320, out_$i321, out_$i322, out_$i323, out_$i324, out_$i325, out_$i326, out_$i327, out_$i328, out_$i329, out_$i330, out_$p331, out_$i332, out_$i333, out_$p334, out_$i336, out_$i337, out_$i338, out_$i339, out_$i340, out_$i341, out_$i342, out_$i343, out_$i344, out_$i345, out_$i346, out_$i347, out_$i348, out_$p349, out_$i350, out_$i351, out_$i352, out_$i353, out_$i355, out_$i356, out_$i358, out_$i359, out_$i361, out_$i362, out_$p363, out_$p364, out_$i366, out_$i367, out_$p368, out_$p369, out_$i371, out_$i372, out_$p373, out_$p374, out_$i376, out_$i377, out_$i379, out_$i380, out_$i382, out_$i383, out_$i385, out_$i386, out_$p387, out_$p388, out_$p389, out_$i391, out_$i392, out_$p393, out_$p394, out_$p395, out_$i397, out_$i398, out_$p399, out_$p400, out_$p401, out_$i403, out_$i404, out_$i406, out_$i407, out_$i408, out_$i409, out_$i411, out_$i412, out_$i413, out_$i414, out_vslice_dummy_var_117, out_vslice_dummy_var_118, out_vslice_dummy_var_119, out_vslice_dummy_var_120, out_vslice_dummy_var_121, out_vslice_dummy_var_122, out_vslice_dummy_var_123, out_vslice_dummy_var_124, out_vslice_dummy_var_125, out_vslice_dummy_var_126, out_vslice_dummy_var_127, out_vslice_dummy_var_128, out_vslice_dummy_var_129, out_vslice_dummy_var_130, out_vslice_dummy_var_131, out_vslice_dummy_var_132, out_vslice_dummy_var_133, out_vslice_dummy_var_134, out_vslice_dummy_var_135, out_vslice_dummy_var_136, out_vslice_dummy_var_137, out_vslice_dummy_var_138, out_vslice_dummy_var_139, out_vslice_dummy_var_140, out_vslice_dummy_var_141, out_vslice_dummy_var_142, out_vslice_dummy_var_143, out_vslice_dummy_var_144, out_vslice_dummy_var_145, out_vslice_dummy_var_146, out_vslice_dummy_var_147, out_vslice_dummy_var_148, out_vslice_dummy_var_149, out_vslice_dummy_var_150, out_vslice_dummy_var_151, out_vslice_dummy_var_152, out_vslice_dummy_var_153, out_vslice_dummy_var_154, out_vslice_dummy_var_155, out_vslice_dummy_var_156, out_vslice_dummy_var_157, out_vslice_dummy_var_158, out_vslice_dummy_var_159, out_vslice_dummy_var_160, out_vslice_dummy_var_161, out_vslice_dummy_var_162, out_vslice_dummy_var_163, out_vslice_dummy_var_164, out_vslice_dummy_var_165, out_vslice_dummy_var_166, out_vslice_dummy_var_167 := in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i59, in_$i60, in_$i61, in_$p62, in_$i63, in_$i64, in_$i65, in_$i66, in_$i67, in_$i69, in_$i70, in_$p71, in_$i72, in_$i73, in_$i74, in_$i75, in_$i76, in_$i78, in_$i79, in_$p80, in_$i81, in_$i82, in_$i83, in_$i84, in_$i85, in_$i87, in_$i88, in_$p89, in_$p90, in_$i92, in_$i93, in_$p94, in_$p95, in_$i97, in_$i98, in_$p99, in_$p100, in_$i102, in_$i103, in_$p104, in_$i105, in_$i106, in_$i107, in_$i108, in_$i109, in_$i111, in_$i112, in_$p113, in_$i114, in_$i115, in_$i116, in_$i117, in_$i118, in_$i120, in_$i121, in_$p122, in_$i123, in_$i124, in_$i125, in_$i126, in_$i127, in_$i129, in_$i130, in_$p131, in_$p132, in_$i134, in_$i135, in_$p136, in_$p137, in_$i139, in_$i140, in_$p141, in_$p142, in_$i144, in_$i145, in_$p146, in_$i147, in_$i148, in_$i149, in_$i150, in_$i151, in_$p152, in_$i154, in_$i155, in_$p156, in_$i157, in_$i159, in_$i160, in_$p161, in_$i162, in_$i164, in_$i165, in_$p166, in_$i167, in_$i169, in_$i170, in_$p171, in_$i172, in_$i173, in_$i174, in_$i175, in_$i176, in_$i177, in_$i178, in_$p179, in_$i180, in_$i181, in_$p182, in_$i183, in_$i184, in_$p185, in_$i186, in_$i187, in_$p188, in_$i190, in_$i191, in_$p192, in_$i193, in_$i194, in_$p195, in_$i196, in_$i197, in_$p198, in_$i199, in_$i200, in_$p201, in_$i202, in_$i203, in_$p204, in_$i205, in_$i206, in_$p207, in_$i208, in_$i209, in_$p210, in_$i211, in_$i212, in_$p213, in_$i214, in_$i215, in_$p216, in_$i217, in_$i218, in_$p219, in_$i221, in_$i222, in_$p223, in_$i225, in_$i226, in_$p227, in_$i229, in_$i230, in_$p231, in_$p232, in_$i234, in_$i235, in_$p236, in_$p237, in_$i239, in_$i240, in_$p241, in_$p242, in_$i244, in_$i245, in_$p246, in_$i248, in_$i249, in_$p250, in_$i252, in_$i253, in_$p254, in_$i255, in_$i256, in_$i257, in_$i258, in_$p259, in_$i260, in_$i261, in_$i263, in_$i264, in_$p265, in_$i266, in_$i267, in_$i269, in_$i270, in_$p271, in_$i272, in_$i273, in_$i275, in_$i276, in_$p277, in_$i279, in_$i280, in_$p281, in_$i283, in_$i284, in_$p285, in_$i287, in_$i288, in_$p289, in_$i291, in_$i292, in_$p293, in_$i295, in_$i296, in_$p297, in_$i299, in_$i300, in_$i301, in_$i302, in_$i303, in_$i304, in_$i306, in_$i307, in_$i308, in_$i309, in_$i310, in_$i311, in_$i312, in_$i313, in_$i314, in_$i315, in_$i316, in_$i317, in_$i318, in_$i319, in_$i320, in_$i321, in_$i322, in_$i323, in_$i324, in_$i325, in_$i326, in_$i327, in_$i328, in_$i329, in_$i330, in_$p331, in_$i332, in_$i333, in_$p334, in_$i336, in_$i337, in_$i338, in_$i339, in_$i340, in_$i341, in_$i342, in_$i343, in_$i344, in_$i345, in_$i346, in_$i347, in_$i348, in_$p349, in_$i350, in_$i351, in_$i352, in_$i353, in_$i355, in_$i356, in_$i358, in_$i359, in_$i361, in_$i362, in_$p363, in_$p364, in_$i366, in_$i367, in_$p368, in_$p369, in_$i371, in_$i372, in_$p373, in_$p374, in_$i376, in_$i377, in_$i379, in_$i380, in_$i382, in_$i383, in_$i385, in_$i386, in_$p387, in_$p388, in_$p389, in_$i391, in_$i392, in_$p393, in_$p394, in_$p395, in_$i397, in_$i398, in_$p399, in_$p400, in_$p401, in_$i403, in_$i404, in_$i406, in_$i407, in_$i408, in_$i409, in_$i411, in_$i412, in_$i413, in_$i414, in_vslice_dummy_var_117, in_vslice_dummy_var_118, in_vslice_dummy_var_119, in_vslice_dummy_var_120, in_vslice_dummy_var_121, in_vslice_dummy_var_122, in_vslice_dummy_var_123, in_vslice_dummy_var_124, in_vslice_dummy_var_125, in_vslice_dummy_var_126, in_vslice_dummy_var_127, in_vslice_dummy_var_128, in_vslice_dummy_var_129, in_vslice_dummy_var_130, in_vslice_dummy_var_131, in_vslice_dummy_var_132, in_vslice_dummy_var_133, in_vslice_dummy_var_134, in_vslice_dummy_var_135, in_vslice_dummy_var_136, in_vslice_dummy_var_137, in_vslice_dummy_var_138, in_vslice_dummy_var_139, in_vslice_dummy_var_140, in_vslice_dummy_var_141, in_vslice_dummy_var_142, in_vslice_dummy_var_143, in_vslice_dummy_var_144, in_vslice_dummy_var_145, in_vslice_dummy_var_146, in_vslice_dummy_var_147, in_vslice_dummy_var_148, in_vslice_dummy_var_149, in_vslice_dummy_var_150, in_vslice_dummy_var_151, in_vslice_dummy_var_152, in_vslice_dummy_var_153, in_vslice_dummy_var_154, in_vslice_dummy_var_155, in_vslice_dummy_var_156, in_vslice_dummy_var_157, in_vslice_dummy_var_158, in_vslice_dummy_var_159, in_vslice_dummy_var_160, in_vslice_dummy_var_161, in_vslice_dummy_var_162, in_vslice_dummy_var_163, in_vslice_dummy_var_164, in_vslice_dummy_var_165, in_vslice_dummy_var_166, in_vslice_dummy_var_167;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1382} out_$i29 := __VERIFIER_nondet_int();
    call {:si_unique_call 1383} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i29);
    call {:si_unique_call 1384} {:cexpr "tmp___14"} boogie_si_record_i32(out_$i29);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb219:
    assume {:verifier.code 0} true;
    goto $bb219_dummy;

  $bb355:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb353:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb281:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb261:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb231:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb218:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb17:
    assume !(out_$i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb71:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb217:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb215:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb206:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb197:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb188:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb185:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb179:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb170:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb161:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb152:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb143:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb134:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb131:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb122:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb116:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb107:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb104:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb89:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb69:
    assume !(out_$i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  corral_source_split_6653:
    assume {:verifier.code 0} true;
    goto $bb70;

  corral_source_split_6652:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 1393} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_6653;

  corral_source_split_6651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1392} out_vslice_dummy_var_119 := team_vlan_rx_kill_vid(out_$p80, out_$i83, out_$i85);
    goto corral_source_split_6652;

  corral_source_split_6650:
    assume {:verifier.code 0} true;
    out_$i85 := $trunc.i32.i16(out_$i84);
    goto corral_source_split_6651;

  corral_source_split_6649:
    assume {:verifier.code 0} true;
    out_$i84 := $zext.i16.i32(in_$i15);
    goto corral_source_split_6650;

  corral_source_split_6648:
    assume {:verifier.code 0} true;
    out_$i83 := $trunc.i32.i16(out_$i82);
    goto corral_source_split_6649;

  corral_source_split_6647:
    assume {:verifier.code 0} true;
    out_$i82 := $zext.i16.i32(out_$i81);
    goto corral_source_split_6648;

  corral_source_split_6646:
    assume {:verifier.code 0} true;
    out_$i81 := $load.i16($M.40, in_$p1);
    goto corral_source_split_6647;

  corral_source_split_6645:
    assume {:verifier.code 0} true;
    out_$p80 := $M.34;
    goto corral_source_split_6646;

  $bb68:
    assume out_$i79 == 1;
    goto corral_source_split_6645;

  corral_source_split_6643:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  corral_source_split_6642:
    assume {:verifier.code 0} true;
    out_$i79 := $eq.i32(out_$i78, 2);
    goto corral_source_split_6643;

  $bb67:
    assume {:verifier.code 0} true;
    out_$i78 := $M.43;
    goto corral_source_split_6642;

  $bb66:
    assume !(out_$i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  corral_source_split_6640:
    assume {:verifier.code 0} true;
    goto $bb67;

  corral_source_split_6639:
    assume {:verifier.code 0} true;
    $M.43 := 3;
    call {:si_unique_call 1391} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_6640;

  corral_source_split_6638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1390} out_vslice_dummy_var_118 := team_vlan_rx_kill_vid(out_$p71, out_$i74, out_$i76);
    goto corral_source_split_6639;

  corral_source_split_6637:
    assume {:verifier.code 0} true;
    out_$i76 := $trunc.i32.i16(out_$i75);
    goto corral_source_split_6638;

  corral_source_split_6636:
    assume {:verifier.code 0} true;
    out_$i75 := $zext.i16.i32(in_$i15);
    goto corral_source_split_6637;

  corral_source_split_6635:
    assume {:verifier.code 0} true;
    out_$i74 := $trunc.i32.i16(out_$i73);
    goto corral_source_split_6636;

  corral_source_split_6634:
    assume {:verifier.code 0} true;
    out_$i73 := $zext.i16.i32(out_$i72);
    goto corral_source_split_6635;

  corral_source_split_6633:
    assume {:verifier.code 0} true;
    out_$i72 := $load.i16($M.40, in_$p1);
    goto corral_source_split_6634;

  corral_source_split_6632:
    assume {:verifier.code 0} true;
    out_$p71 := $M.34;
    goto corral_source_split_6633;

  $bb65:
    assume out_$i70 == 1;
    goto corral_source_split_6632;

  corral_source_split_6630:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  corral_source_split_6629:
    assume {:verifier.code 0} true;
    out_$i70 := $eq.i32(out_$i69, 3);
    goto corral_source_split_6630;

  $bb64:
    assume {:verifier.code 0} true;
    out_$i69 := $M.43;
    goto corral_source_split_6629;

  $bb63:
    assume !(out_$i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  corral_source_split_6627:
    assume {:verifier.code 0} true;
    goto $bb64;

  corral_source_split_6626:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 1389} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6627;

  corral_source_split_6625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1388} out_vslice_dummy_var_117 := team_vlan_rx_kill_vid(out_$p62, out_$i65, out_$i67);
    goto corral_source_split_6626;

  corral_source_split_6624:
    assume {:verifier.code 0} true;
    out_$i67 := $trunc.i32.i16(out_$i66);
    goto corral_source_split_6625;

  corral_source_split_6623:
    assume {:verifier.code 0} true;
    out_$i66 := $zext.i16.i32(in_$i15);
    goto corral_source_split_6624;

  corral_source_split_6622:
    assume {:verifier.code 0} true;
    out_$i65 := $trunc.i32.i16(out_$i64);
    goto corral_source_split_6623;

  corral_source_split_6621:
    assume {:verifier.code 0} true;
    out_$i64 := $zext.i16.i32(out_$i63);
    goto corral_source_split_6622;

  corral_source_split_6620:
    assume {:verifier.code 0} true;
    out_$i63 := $load.i16($M.40, in_$p1);
    goto corral_source_split_6621;

  corral_source_split_6619:
    assume {:verifier.code 0} true;
    out_$p62 := $M.34;
    goto corral_source_split_6620;

  $bb62:
    assume out_$i61 == 1;
    goto corral_source_split_6619;

  corral_source_split_6617:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  corral_source_split_6616:
    assume {:verifier.code 0} true;
    out_$i61 := $eq.i32(out_$i60, 1);
    goto corral_source_split_6617;

  corral_source_split_6615:
    assume {:verifier.code 0} true;
    out_$i60 := $M.43;
    goto corral_source_split_6616;

  $bb60:
    assume out_$i59 == 1;
    goto corral_source_split_6615;

  $bb58:
    assume out_$i58 == 1;
    assume {:verifier.code 0} true;
    out_$i59 := $eq.i32(out_$i38, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb52:
    assume out_$i55 == 1;
    assume {:verifier.code 0} true;
    out_$i58 := $slt.i32(out_$i38, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb42:
    assume out_$i50 == 1;
    assume {:verifier.code 0} true;
    out_$i55 := $slt.i32(out_$i38, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb19:
    assume out_$i39 == 1;
    assume {:verifier.code 0} true;
    out_$i50 := $slt.i32(out_$i38, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i39 := $slt.i32(out_$i38, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_6537:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1385} out_$i38 := __VERIFIER_nondet_int();
    call {:si_unique_call 1386} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i38);
    call {:si_unique_call 1387} {:cexpr "tmp___15"} boogie_si_record_i32(out_$i38);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb16:
    assume out_$i37 == 1;
    goto corral_source_split_6537;

  corral_source_split_6535:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_6534:
    assume {:verifier.code 0} true;
    out_$i37 := $ne.i32(out_$i36, 0);
    goto corral_source_split_6535;

  corral_source_split_6533:
    assume {:verifier.code 0} true;
    out_$i36 := $M.43;
    goto corral_source_split_6534;

  $bb14:
    assume out_$i35 == 1;
    goto corral_source_split_6533;

  $bb12:
    assume out_$i34 == 1;
    assume {:verifier.code 0} true;
    out_$i35 := $eq.i32(out_$i29, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb3:
    assume out_$i30 == 1;
    assume {:verifier.code 0} true;
    out_$i34 := $slt.i32(out_$i29, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i30 := $slt.i32(out_$i29, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb79:
    assume !(out_$i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  corral_source_split_6677:
    assume {:verifier.code 0} true;
    goto $bb80;

  corral_source_split_6676:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 1399} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_6677;

  corral_source_split_6675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1398} out_vslice_dummy_var_122 := team_add_slave(out_$p99, out_$p100);
    goto corral_source_split_6676;

  corral_source_split_6674:
    assume {:verifier.code 0} true;
    out_$p100 := $M.34;
    goto corral_source_split_6675;

  corral_source_split_6673:
    assume {:verifier.code 0} true;
    out_$p99 := $M.34;
    goto corral_source_split_6674;

  $bb78:
    assume out_$i98 == 1;
    goto corral_source_split_6673;

  corral_source_split_6671:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  corral_source_split_6670:
    assume {:verifier.code 0} true;
    out_$i98 := $eq.i32(out_$i97, 2);
    goto corral_source_split_6671;

  $bb77:
    assume {:verifier.code 0} true;
    out_$i97 := $M.43;
    goto corral_source_split_6670;

  $bb76:
    assume !(out_$i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  corral_source_split_6668:
    assume {:verifier.code 0} true;
    goto $bb77;

  corral_source_split_6667:
    assume {:verifier.code 0} true;
    $M.43 := 3;
    call {:si_unique_call 1397} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_6668;

  corral_source_split_6666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1396} out_vslice_dummy_var_121 := team_add_slave(out_$p94, out_$p95);
    goto corral_source_split_6667;

  corral_source_split_6665:
    assume {:verifier.code 0} true;
    out_$p95 := $M.34;
    goto corral_source_split_6666;

  corral_source_split_6664:
    assume {:verifier.code 0} true;
    out_$p94 := $M.34;
    goto corral_source_split_6665;

  $bb75:
    assume out_$i93 == 1;
    goto corral_source_split_6664;

  corral_source_split_6662:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  corral_source_split_6661:
    assume {:verifier.code 0} true;
    out_$i93 := $eq.i32(out_$i92, 3);
    goto corral_source_split_6662;

  $bb74:
    assume {:verifier.code 0} true;
    out_$i92 := $M.43;
    goto corral_source_split_6661;

  $bb73:
    assume !(out_$i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  corral_source_split_6659:
    assume {:verifier.code 0} true;
    goto $bb74;

  corral_source_split_6658:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 1395} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6659;

  corral_source_split_6657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1394} out_vslice_dummy_var_120 := team_add_slave(out_$p89, out_$p90);
    goto corral_source_split_6658;

  corral_source_split_6656:
    assume {:verifier.code 0} true;
    out_$p90 := $M.34;
    goto corral_source_split_6657;

  corral_source_split_6655:
    assume {:verifier.code 0} true;
    out_$p89 := $M.34;
    goto corral_source_split_6656;

  $bb72:
    assume out_$i88 == 1;
    goto corral_source_split_6655;

  corral_source_split_6613:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  corral_source_split_6612:
    assume {:verifier.code 0} true;
    out_$i88 := $eq.i32(out_$i87, 1);
    goto corral_source_split_6613;

  corral_source_split_6611:
    assume {:verifier.code 0} true;
    out_$i87 := $M.43;
    goto corral_source_split_6612;

  $bb59:
    assume !(out_$i58 == 1);
    goto corral_source_split_6611;

  $bb88:
    assume !(out_$i121 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  corral_source_split_6713:
    assume {:verifier.code 0} true;
    goto $bb89;

  corral_source_split_6712:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 1405} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_6713;

  corral_source_split_6711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1404} out_vslice_dummy_var_125 := team_vlan_rx_add_vid(out_$p122, out_$i125, out_$i127);
    goto corral_source_split_6712;

  corral_source_split_6710:
    assume {:verifier.code 0} true;
    out_$i127 := $trunc.i32.i16(out_$i126);
    goto corral_source_split_6711;

  corral_source_split_6709:
    assume {:verifier.code 0} true;
    out_$i126 := $zext.i16.i32(in_$i4);
    goto corral_source_split_6710;

  corral_source_split_6708:
    assume {:verifier.code 0} true;
    out_$i125 := $trunc.i32.i16(out_$i124);
    goto corral_source_split_6709;

  corral_source_split_6707:
    assume {:verifier.code 0} true;
    out_$i124 := $zext.i16.i32(out_$i123);
    goto corral_source_split_6708;

  corral_source_split_6706:
    assume {:verifier.code 0} true;
    out_$i123 := $load.i16($M.39, in_$p0);
    goto corral_source_split_6707;

  corral_source_split_6705:
    assume {:verifier.code 0} true;
    out_$p122 := $M.34;
    goto corral_source_split_6706;

  $bb87:
    assume out_$i121 == 1;
    goto corral_source_split_6705;

  corral_source_split_6703:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  corral_source_split_6702:
    assume {:verifier.code 0} true;
    out_$i121 := $eq.i32(out_$i120, 2);
    goto corral_source_split_6703;

  $bb86:
    assume {:verifier.code 0} true;
    out_$i120 := $M.43;
    goto corral_source_split_6702;

  $bb85:
    assume !(out_$i112 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  corral_source_split_6700:
    assume {:verifier.code 0} true;
    goto $bb86;

  corral_source_split_6699:
    assume {:verifier.code 0} true;
    $M.43 := 3;
    call {:si_unique_call 1403} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_6700;

  corral_source_split_6698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1402} out_vslice_dummy_var_124 := team_vlan_rx_add_vid(out_$p113, out_$i116, out_$i118);
    goto corral_source_split_6699;

  corral_source_split_6697:
    assume {:verifier.code 0} true;
    out_$i118 := $trunc.i32.i16(out_$i117);
    goto corral_source_split_6698;

  corral_source_split_6696:
    assume {:verifier.code 0} true;
    out_$i117 := $zext.i16.i32(in_$i4);
    goto corral_source_split_6697;

  corral_source_split_6695:
    assume {:verifier.code 0} true;
    out_$i116 := $trunc.i32.i16(out_$i115);
    goto corral_source_split_6696;

  corral_source_split_6694:
    assume {:verifier.code 0} true;
    out_$i115 := $zext.i16.i32(out_$i114);
    goto corral_source_split_6695;

  corral_source_split_6693:
    assume {:verifier.code 0} true;
    out_$i114 := $load.i16($M.39, in_$p0);
    goto corral_source_split_6694;

  corral_source_split_6692:
    assume {:verifier.code 0} true;
    out_$p113 := $M.34;
    goto corral_source_split_6693;

  $bb84:
    assume out_$i112 == 1;
    goto corral_source_split_6692;

  corral_source_split_6690:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  corral_source_split_6689:
    assume {:verifier.code 0} true;
    out_$i112 := $eq.i32(out_$i111, 3);
    goto corral_source_split_6690;

  $bb83:
    assume {:verifier.code 0} true;
    out_$i111 := $M.43;
    goto corral_source_split_6689;

  $bb82:
    assume !(out_$i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  corral_source_split_6687:
    assume {:verifier.code 0} true;
    goto $bb83;

  corral_source_split_6686:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 1401} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6687;

  corral_source_split_6685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1400} out_vslice_dummy_var_123 := team_vlan_rx_add_vid(out_$p104, out_$i107, out_$i109);
    goto corral_source_split_6686;

  corral_source_split_6684:
    assume {:verifier.code 0} true;
    out_$i109 := $trunc.i32.i16(out_$i108);
    goto corral_source_split_6685;

  corral_source_split_6683:
    assume {:verifier.code 0} true;
    out_$i108 := $zext.i16.i32(in_$i4);
    goto corral_source_split_6684;

  corral_source_split_6682:
    assume {:verifier.code 0} true;
    out_$i107 := $trunc.i32.i16(out_$i106);
    goto corral_source_split_6683;

  corral_source_split_6681:
    assume {:verifier.code 0} true;
    out_$i106 := $zext.i16.i32(out_$i105);
    goto corral_source_split_6682;

  corral_source_split_6680:
    assume {:verifier.code 0} true;
    out_$i105 := $load.i16($M.39, in_$p0);
    goto corral_source_split_6681;

  corral_source_split_6679:
    assume {:verifier.code 0} true;
    out_$p104 := $M.34;
    goto corral_source_split_6680;

  $bb81:
    assume out_$i103 == 1;
    goto corral_source_split_6679;

  corral_source_split_6601:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  corral_source_split_6600:
    assume {:verifier.code 0} true;
    out_$i103 := $eq.i32(out_$i102, 1);
    goto corral_source_split_6601;

  corral_source_split_6599:
    assume {:verifier.code 0} true;
    out_$i102 := $M.43;
    goto corral_source_split_6600;

  $bb54:
    assume out_$i56 == 1;
    goto corral_source_split_6599;

  $bb53:
    assume !(out_$i55 == 1);
    assume {:verifier.code 0} true;
    out_$i56 := $slt.i32(out_$i38, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb97:
    assume !(out_$i140 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  corral_source_split_6737:
    assume {:verifier.code 0} true;
    goto $bb98;

  corral_source_split_6736:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 1411} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_6737;

  corral_source_split_6735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1410} out_vslice_dummy_var_128 := team_del_slave(out_$p141, out_$p142);
    goto corral_source_split_6736;

  corral_source_split_6734:
    assume {:verifier.code 0} true;
    out_$p142 := $M.34;
    goto corral_source_split_6735;

  corral_source_split_6733:
    assume {:verifier.code 0} true;
    out_$p141 := $M.34;
    goto corral_source_split_6734;

  $bb96:
    assume out_$i140 == 1;
    goto corral_source_split_6733;

  corral_source_split_6731:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  corral_source_split_6730:
    assume {:verifier.code 0} true;
    out_$i140 := $eq.i32(out_$i139, 2);
    goto corral_source_split_6731;

  $bb95:
    assume {:verifier.code 0} true;
    out_$i139 := $M.43;
    goto corral_source_split_6730;

  $bb94:
    assume !(out_$i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  corral_source_split_6728:
    assume {:verifier.code 0} true;
    goto $bb95;

  corral_source_split_6727:
    assume {:verifier.code 0} true;
    $M.43 := 3;
    call {:si_unique_call 1409} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_6728;

  corral_source_split_6726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1408} out_vslice_dummy_var_127 := team_del_slave(out_$p136, out_$p137);
    goto corral_source_split_6727;

  corral_source_split_6725:
    assume {:verifier.code 0} true;
    out_$p137 := $M.34;
    goto corral_source_split_6726;

  corral_source_split_6724:
    assume {:verifier.code 0} true;
    out_$p136 := $M.34;
    goto corral_source_split_6725;

  $bb93:
    assume out_$i135 == 1;
    goto corral_source_split_6724;

  corral_source_split_6722:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  corral_source_split_6721:
    assume {:verifier.code 0} true;
    out_$i135 := $eq.i32(out_$i134, 3);
    goto corral_source_split_6722;

  $bb92:
    assume {:verifier.code 0} true;
    out_$i134 := $M.43;
    goto corral_source_split_6721;

  $bb91:
    assume !(out_$i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb92;

  corral_source_split_6719:
    assume {:verifier.code 0} true;
    goto $bb92;

  corral_source_split_6718:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 1407} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6719;

  corral_source_split_6717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1406} out_vslice_dummy_var_126 := team_del_slave(out_$p131, out_$p132);
    goto corral_source_split_6718;

  corral_source_split_6716:
    assume {:verifier.code 0} true;
    out_$p132 := $M.34;
    goto corral_source_split_6717;

  corral_source_split_6715:
    assume {:verifier.code 0} true;
    out_$p131 := $M.34;
    goto corral_source_split_6716;

  $bb90:
    assume out_$i130 == 1;
    goto corral_source_split_6715;

  corral_source_split_6605:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  corral_source_split_6604:
    assume {:verifier.code 0} true;
    out_$i130 := $eq.i32(out_$i129, 1);
    goto corral_source_split_6605;

  corral_source_split_6603:
    assume {:verifier.code 0} true;
    out_$i129 := $M.43;
    goto corral_source_split_6604;

  $bb56:
    assume out_$i57 == 1;
    goto corral_source_split_6603;

  $bb55:
    assume !(out_$i56 == 1);
    assume {:verifier.code 0} true;
    out_$i57 := $slt.i32(out_$i38, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb100:
    assume !(out_$i145 == 1);
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb103:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb102:
    assume !(out_$i149 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  corral_source_split_6747:
    assume {:verifier.code 0} true;
    goto $bb103;

  corral_source_split_6746:
    assume {:verifier.code 0} true;
    $M.43 := 3;
    call {:si_unique_call 1414} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_6747;

  $bb101:
    assume out_$i149 == 1;
    goto corral_source_split_6746;

  corral_source_split_6744:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  corral_source_split_6743:
    assume {:verifier.code 0} true;
    out_$i149 := $eq.i32(out_$i148, 0);
    goto corral_source_split_6744;

  corral_source_split_6742:
    assume {:verifier.code 0} true;
    out_$i148 := $M.49;
    goto corral_source_split_6743;

  corral_source_split_6741:
    assume {:verifier.code 0} true;
    $M.49 := out_$i147;
    call {:si_unique_call 1413} {:cexpr "ldv_retval_1"} boogie_si_record_i32(out_$i147);
    goto corral_source_split_6742;

  corral_source_split_6740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1412} out_$i147 := team_open(out_$p146);
    goto corral_source_split_6741;

  corral_source_split_6739:
    assume {:verifier.code 0} true;
    out_$p146 := $M.34;
    goto corral_source_split_6740;

  $bb99:
    assume out_$i145 == 1;
    goto corral_source_split_6739;

  corral_source_split_6609:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  corral_source_split_6608:
    assume {:verifier.code 0} true;
    out_$i145 := $eq.i32(out_$i144, 2);
    goto corral_source_split_6609;

  corral_source_split_6607:
    assume {:verifier.code 0} true;
    out_$i144 := $M.43;
    goto corral_source_split_6608;

  $bb57:
    assume !(out_$i57 == 1);
    goto corral_source_split_6607;

  $bb106:
    assume !(out_$i151 == 1);
    assume {:verifier.code 0} true;
    goto $bb107;

  corral_source_split_6752:
    assume {:verifier.code 0} true;
    goto $bb107;

  corral_source_split_6751:
    assume {:verifier.code 0} true;
    $M.43 := 3;
    call {:si_unique_call 1416} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_6752;

  corral_source_split_6750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1415} out_vslice_dummy_var_129 := team_xmit(in_$p17, out_$p152);
    goto corral_source_split_6751;

  corral_source_split_6749:
    assume {:verifier.code 0} true;
    out_$p152 := $M.34;
    goto corral_source_split_6750;

  $bb105:
    assume out_$i151 == 1;
    goto corral_source_split_6749;

  corral_source_split_6593:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  corral_source_split_6592:
    assume {:verifier.code 0} true;
    out_$i151 := $eq.i32(out_$i150, 3);
    goto corral_source_split_6593;

  corral_source_split_6591:
    assume {:verifier.code 0} true;
    out_$i150 := $M.43;
    goto corral_source_split_6592;

  $bb50:
    assume out_$i54 == 1;
    goto corral_source_split_6591;

  $bb44:
    assume out_$i51 == 1;
    assume {:verifier.code 0} true;
    out_$i54 := $slt.i32(out_$i38, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb43:
    assume !(out_$i50 == 1);
    assume {:verifier.code 0} true;
    out_$i51 := $slt.i32(out_$i38, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb115:
    assume !(out_$i165 == 1);
    assume {:verifier.code 0} true;
    goto $bb116;

  corral_source_split_6776:
    assume {:verifier.code 0} true;
    goto $bb116;

  corral_source_split_6775:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 1422} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_6776;

  corral_source_split_6774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1421} out_vslice_dummy_var_132 := team_fix_features(out_$p166, out_$i167);
    goto corral_source_split_6775;

  corral_source_split_6773:
    assume {:verifier.code 0} true;
    out_$i167 := $load.i64($M.41, in_$p2);
    goto corral_source_split_6774;

  corral_source_split_6772:
    assume {:verifier.code 0} true;
    out_$p166 := $M.34;
    goto corral_source_split_6773;

  $bb114:
    assume out_$i165 == 1;
    goto corral_source_split_6772;

  corral_source_split_6770:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb114, $bb115;

  corral_source_split_6769:
    assume {:verifier.code 0} true;
    out_$i165 := $eq.i32(out_$i164, 2);
    goto corral_source_split_6770;

  $bb113:
    assume {:verifier.code 0} true;
    out_$i164 := $M.43;
    goto corral_source_split_6769;

  $bb112:
    assume !(out_$i160 == 1);
    assume {:verifier.code 0} true;
    goto $bb113;

  corral_source_split_6767:
    assume {:verifier.code 0} true;
    goto $bb113;

  corral_source_split_6766:
    assume {:verifier.code 0} true;
    $M.43 := 3;
    call {:si_unique_call 1420} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_6767;

  corral_source_split_6765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1419} out_vslice_dummy_var_131 := team_fix_features(out_$p161, out_$i162);
    goto corral_source_split_6766;

  corral_source_split_6764:
    assume {:verifier.code 0} true;
    out_$i162 := $load.i64($M.41, in_$p2);
    goto corral_source_split_6765;

  corral_source_split_6763:
    assume {:verifier.code 0} true;
    out_$p161 := $M.34;
    goto corral_source_split_6764;

  $bb111:
    assume out_$i160 == 1;
    goto corral_source_split_6763;

  corral_source_split_6761:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb111, $bb112;

  corral_source_split_6760:
    assume {:verifier.code 0} true;
    out_$i160 := $eq.i32(out_$i159, 3);
    goto corral_source_split_6761;

  $bb110:
    assume {:verifier.code 0} true;
    out_$i159 := $M.43;
    goto corral_source_split_6760;

  $bb109:
    assume !(out_$i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb110;

  corral_source_split_6758:
    assume {:verifier.code 0} true;
    goto $bb110;

  corral_source_split_6757:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 1418} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6758;

  corral_source_split_6756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1417} out_vslice_dummy_var_130 := team_fix_features(out_$p156, out_$i157);
    goto corral_source_split_6757;

  corral_source_split_6755:
    assume {:verifier.code 0} true;
    out_$i157 := $load.i64($M.41, in_$p2);
    goto corral_source_split_6756;

  corral_source_split_6754:
    assume {:verifier.code 0} true;
    out_$p156 := $M.34;
    goto corral_source_split_6755;

  $bb108:
    assume out_$i155 == 1;
    goto corral_source_split_6754;

  corral_source_split_6597:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb108, $bb109;

  corral_source_split_6596:
    assume {:verifier.code 0} true;
    out_$i155 := $eq.i32(out_$i154, 1);
    goto corral_source_split_6597;

  corral_source_split_6595:
    assume {:verifier.code 0} true;
    out_$i154 := $M.43;
    goto corral_source_split_6596;

  $bb51:
    assume !(out_$i54 == 1);
    goto corral_source_split_6595;

  $bb118:
    assume !(out_$i170 == 1);
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb121:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb120:
    assume !(out_$i174 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  corral_source_split_6789:
    assume {:verifier.code 0} true;
    goto $bb121;

  corral_source_split_6788:
    assume {:verifier.code 0} true;
    $M.45 := out_$i176;
    call {:si_unique_call 1426} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i176);
    goto corral_source_split_6789;

  corral_source_split_6787:
    assume {:verifier.code 0} true;
    out_$i176 := $add.i32(out_$i175, 1);
    goto corral_source_split_6788;

  corral_source_split_6786:
    assume {:verifier.code 0} true;
    out_$i175 := $M.45;
    goto corral_source_split_6787;

  corral_source_split_6785:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 1425} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_6786;

  $bb119:
    assume out_$i174 == 1;
    goto corral_source_split_6785;

  corral_source_split_6783:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb119, $bb120;

  corral_source_split_6782:
    assume {:verifier.code 0} true;
    out_$i174 := $eq.i32(out_$i173, 0);
    goto corral_source_split_6783;

  corral_source_split_6781:
    assume {:verifier.code 0} true;
    out_$i173 := $M.50;
    goto corral_source_split_6782;

  corral_source_split_6780:
    assume {:verifier.code 0} true;
    $M.50 := out_$i172;
    call {:si_unique_call 1424} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i172);
    goto corral_source_split_6781;

  corral_source_split_6779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1423} out_$i172 := team_init(out_$p171);
    goto corral_source_split_6780;

  corral_source_split_6778:
    assume {:verifier.code 0} true;
    out_$p171 := $M.34;
    goto corral_source_split_6779;

  $bb117:
    assume out_$i170 == 1;
    goto corral_source_split_6778;

  corral_source_split_6581:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb117, $bb118;

  corral_source_split_6580:
    assume {:verifier.code 0} true;
    out_$i170 := $eq.i32(out_$i169, 1);
    goto corral_source_split_6581;

  corral_source_split_6579:
    assume {:verifier.code 0} true;
    out_$i169 := $M.43;
    goto corral_source_split_6580;

  $bb46:
    assume out_$i52 == 1;
    goto corral_source_split_6579;

  $bb45:
    assume !(out_$i51 == 1);
    assume {:verifier.code 0} true;
    out_$i52 := $slt.i32(out_$i38, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb130:
    assume !(out_$i184 == 1);
    assume {:verifier.code 0} true;
    goto $bb131;

  corral_source_split_6810:
    assume {:verifier.code 0} true;
    goto $bb131;

  corral_source_split_6809:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 1432} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_6810;

  corral_source_split_6808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1431} team_netpoll_cleanup(out_$p185);
    goto corral_source_split_6809;

  corral_source_split_6807:
    assume {:verifier.code 0} true;
    out_$p185 := $M.34;
    goto corral_source_split_6808;

  $bb129:
    assume out_$i184 == 1;
    goto corral_source_split_6807;

  corral_source_split_6805:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb129, $bb130;

  corral_source_split_6804:
    assume {:verifier.code 0} true;
    out_$i184 := $eq.i32(out_$i183, 2);
    goto corral_source_split_6805;

  $bb128:
    assume {:verifier.code 0} true;
    out_$i183 := $M.43;
    goto corral_source_split_6804;

  $bb127:
    assume !(out_$i181 == 1);
    assume {:verifier.code 0} true;
    goto $bb128;

  corral_source_split_6802:
    assume {:verifier.code 0} true;
    goto $bb128;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    $M.43 := 3;
    call {:si_unique_call 1430} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_6802;

  corral_source_split_6800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1429} team_netpoll_cleanup(out_$p182);
    goto corral_source_split_6801;

  corral_source_split_6799:
    assume {:verifier.code 0} true;
    out_$p182 := $M.34;
    goto corral_source_split_6800;

  $bb126:
    assume out_$i181 == 1;
    goto corral_source_split_6799;

  corral_source_split_6797:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb126, $bb127;

  corral_source_split_6796:
    assume {:verifier.code 0} true;
    out_$i181 := $eq.i32(out_$i180, 3);
    goto corral_source_split_6797;

  $bb125:
    assume {:verifier.code 0} true;
    out_$i180 := $M.43;
    goto corral_source_split_6796;

  $bb124:
    assume !(out_$i178 == 1);
    assume {:verifier.code 0} true;
    goto $bb125;

  corral_source_split_6794:
    assume {:verifier.code 0} true;
    goto $bb125;

  corral_source_split_6793:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 1428} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6794;

  corral_source_split_6792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1427} team_netpoll_cleanup(out_$p179);
    goto corral_source_split_6793;

  corral_source_split_6791:
    assume {:verifier.code 0} true;
    out_$p179 := $M.34;
    goto corral_source_split_6792;

  $bb123:
    assume out_$i178 == 1;
    goto corral_source_split_6791;

  corral_source_split_6585:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb123, $bb124;

  corral_source_split_6584:
    assume {:verifier.code 0} true;
    out_$i178 := $eq.i32(out_$i177, 1);
    goto corral_source_split_6585;

  corral_source_split_6583:
    assume {:verifier.code 0} true;
    out_$i177 := $M.43;
    goto corral_source_split_6584;

  $bb48:
    assume out_$i53 == 1;
    goto corral_source_split_6583;

  $bb47:
    assume !(out_$i52 == 1);
    assume {:verifier.code 0} true;
    out_$i53 := $slt.i32(out_$i38, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb133:
    assume !(out_$i187 == 1);
    assume {:verifier.code 0} true;
    goto $bb134;

  corral_source_split_6815:
    assume {:verifier.code 0} true;
    goto $bb134;

  corral_source_split_6814:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 1434} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_6815;

  corral_source_split_6813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1433} out_vslice_dummy_var_133 := team_close(out_$p188);
    goto corral_source_split_6814;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    out_$p188 := $M.34;
    goto corral_source_split_6813;

  $bb132:
    assume out_$i187 == 1;
    goto corral_source_split_6812;

  corral_source_split_6589:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb132, $bb133;

  corral_source_split_6588:
    assume {:verifier.code 0} true;
    out_$i187 := $eq.i32(out_$i186, 3);
    goto corral_source_split_6589;

  corral_source_split_6587:
    assume {:verifier.code 0} true;
    out_$i186 := $M.43;
    goto corral_source_split_6588;

  $bb49:
    assume !(out_$i53 == 1);
    goto corral_source_split_6587;

  $bb142:
    assume !(out_$i197 == 1);
    assume {:verifier.code 0} true;
    goto $bb143;

  corral_source_split_6836:
    assume {:verifier.code 0} true;
    goto $bb143;

  corral_source_split_6835:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 1440} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_6836;

  corral_source_split_6834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1439} team_set_rx_mode(out_$p198);
    goto corral_source_split_6835;

  corral_source_split_6833:
    assume {:verifier.code 0} true;
    out_$p198 := $M.34;
    goto corral_source_split_6834;

  $bb141:
    assume out_$i197 == 1;
    goto corral_source_split_6833;

  corral_source_split_6831:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb141, $bb142;

  corral_source_split_6830:
    assume {:verifier.code 0} true;
    out_$i197 := $eq.i32(out_$i196, 2);
    goto corral_source_split_6831;

  $bb140:
    assume {:verifier.code 0} true;
    out_$i196 := $M.43;
    goto corral_source_split_6830;

  $bb139:
    assume !(out_$i194 == 1);
    assume {:verifier.code 0} true;
    goto $bb140;

  corral_source_split_6828:
    assume {:verifier.code 0} true;
    goto $bb140;

  corral_source_split_6827:
    assume {:verifier.code 0} true;
    $M.43 := 3;
    call {:si_unique_call 1438} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_6828;

  corral_source_split_6826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1437} team_set_rx_mode(out_$p195);
    goto corral_source_split_6827;

  corral_source_split_6825:
    assume {:verifier.code 0} true;
    out_$p195 := $M.34;
    goto corral_source_split_6826;

  $bb138:
    assume out_$i194 == 1;
    goto corral_source_split_6825;

  corral_source_split_6823:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb138, $bb139;

  corral_source_split_6822:
    assume {:verifier.code 0} true;
    out_$i194 := $eq.i32(out_$i193, 3);
    goto corral_source_split_6823;

  $bb137:
    assume {:verifier.code 0} true;
    out_$i193 := $M.43;
    goto corral_source_split_6822;

  $bb136:
    assume !(out_$i191 == 1);
    assume {:verifier.code 0} true;
    goto $bb137;

  corral_source_split_6820:
    assume {:verifier.code 0} true;
    goto $bb137;

  corral_source_split_6819:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 1436} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6820;

  corral_source_split_6818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1435} team_set_rx_mode(out_$p192);
    goto corral_source_split_6819;

  corral_source_split_6817:
    assume {:verifier.code 0} true;
    out_$p192 := $M.34;
    goto corral_source_split_6818;

  $bb135:
    assume out_$i191 == 1;
    goto corral_source_split_6817;

  corral_source_split_6573:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb135, $bb136;

  corral_source_split_6572:
    assume {:verifier.code 0} true;
    out_$i191 := $eq.i32(out_$i190, 1);
    goto corral_source_split_6573;

  corral_source_split_6571:
    assume {:verifier.code 0} true;
    out_$i190 := $M.43;
    goto corral_source_split_6572;

  $bb40:
    assume out_$i49 == 1;
    goto corral_source_split_6571;

  $bb34:
    assume out_$i46 == 1;
    assume {:verifier.code 0} true;
    out_$i49 := $slt.i32(out_$i38, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb21:
    assume out_$i40 == 1;
    assume {:verifier.code 0} true;
    out_$i46 := $slt.i32(out_$i38, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb20:
    assume !(out_$i39 == 1);
    assume {:verifier.code 0} true;
    out_$i40 := $slt.i32(out_$i38, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb151:
    assume !(out_$i206 == 1);
    assume {:verifier.code 0} true;
    goto $bb152;

  corral_source_split_6857:
    assume {:verifier.code 0} true;
    goto $bb152;

  corral_source_split_6856:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 1446} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_6857;

  corral_source_split_6855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1445} team_change_rx_flags(out_$p207, in_$i14);
    goto corral_source_split_6856;

  corral_source_split_6854:
    assume {:verifier.code 0} true;
    out_$p207 := $M.34;
    goto corral_source_split_6855;

  $bb150:
    assume out_$i206 == 1;
    goto corral_source_split_6854;

  corral_source_split_6852:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb150, $bb151;

  corral_source_split_6851:
    assume {:verifier.code 0} true;
    out_$i206 := $eq.i32(out_$i205, 2);
    goto corral_source_split_6852;

  $bb149:
    assume {:verifier.code 0} true;
    out_$i205 := $M.43;
    goto corral_source_split_6851;

  $bb148:
    assume !(out_$i203 == 1);
    assume {:verifier.code 0} true;
    goto $bb149;

  corral_source_split_6849:
    assume {:verifier.code 0} true;
    goto $bb149;

  corral_source_split_6848:
    assume {:verifier.code 0} true;
    $M.43 := 3;
    call {:si_unique_call 1444} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_6849;

  corral_source_split_6847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1443} team_change_rx_flags(out_$p204, in_$i14);
    goto corral_source_split_6848;

  corral_source_split_6846:
    assume {:verifier.code 0} true;
    out_$p204 := $M.34;
    goto corral_source_split_6847;

  $bb147:
    assume out_$i203 == 1;
    goto corral_source_split_6846;

  corral_source_split_6844:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb147, $bb148;

  corral_source_split_6843:
    assume {:verifier.code 0} true;
    out_$i203 := $eq.i32(out_$i202, 3);
    goto corral_source_split_6844;

  $bb146:
    assume {:verifier.code 0} true;
    out_$i202 := $M.43;
    goto corral_source_split_6843;

  $bb145:
    assume !(out_$i200 == 1);
    assume {:verifier.code 0} true;
    goto $bb146;

  corral_source_split_6841:
    assume {:verifier.code 0} true;
    goto $bb146;

  corral_source_split_6840:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 1442} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6841;

  corral_source_split_6839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1441} team_change_rx_flags(out_$p201, in_$i14);
    goto corral_source_split_6840;

  corral_source_split_6838:
    assume {:verifier.code 0} true;
    out_$p201 := $M.34;
    goto corral_source_split_6839;

  $bb144:
    assume out_$i200 == 1;
    goto corral_source_split_6838;

  corral_source_split_6577:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb144, $bb145;

  corral_source_split_6576:
    assume {:verifier.code 0} true;
    out_$i200 := $eq.i32(out_$i199, 1);
    goto corral_source_split_6577;

  corral_source_split_6575:
    assume {:verifier.code 0} true;
    out_$i199 := $M.43;
    goto corral_source_split_6576;

  $bb41:
    assume !(out_$i49 == 1);
    goto corral_source_split_6575;

  $bb160:
    assume !(out_$i215 == 1);
    assume {:verifier.code 0} true;
    goto $bb161;

  corral_source_split_6878:
    assume {:verifier.code 0} true;
    goto $bb161;

  corral_source_split_6877:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 1452} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_6878;

  corral_source_split_6876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1451} team_poll_controller(out_$p216);
    goto corral_source_split_6877;

  corral_source_split_6875:
    assume {:verifier.code 0} true;
    out_$p216 := $M.34;
    goto corral_source_split_6876;

  $bb159:
    assume out_$i215 == 1;
    goto corral_source_split_6875;

  corral_source_split_6873:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb159, $bb160;

  corral_source_split_6872:
    assume {:verifier.code 0} true;
    out_$i215 := $eq.i32(out_$i214, 2);
    goto corral_source_split_6873;

  $bb158:
    assume {:verifier.code 0} true;
    out_$i214 := $M.43;
    goto corral_source_split_6872;

  $bb157:
    assume !(out_$i212 == 1);
    assume {:verifier.code 0} true;
    goto $bb158;

  corral_source_split_6870:
    assume {:verifier.code 0} true;
    goto $bb158;

  corral_source_split_6869:
    assume {:verifier.code 0} true;
    $M.43 := 3;
    call {:si_unique_call 1450} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_6870;

  corral_source_split_6868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1449} team_poll_controller(out_$p213);
    goto corral_source_split_6869;

  corral_source_split_6867:
    assume {:verifier.code 0} true;
    out_$p213 := $M.34;
    goto corral_source_split_6868;

  $bb156:
    assume out_$i212 == 1;
    goto corral_source_split_6867;

  corral_source_split_6865:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb156, $bb157;

  corral_source_split_6864:
    assume {:verifier.code 0} true;
    out_$i212 := $eq.i32(out_$i211, 3);
    goto corral_source_split_6865;

  $bb155:
    assume {:verifier.code 0} true;
    out_$i211 := $M.43;
    goto corral_source_split_6864;

  $bb154:
    assume !(out_$i209 == 1);
    assume {:verifier.code 0} true;
    goto $bb155;

  corral_source_split_6862:
    assume {:verifier.code 0} true;
    goto $bb155;

  corral_source_split_6861:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 1448} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6862;

  corral_source_split_6860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1447} team_poll_controller(out_$p210);
    goto corral_source_split_6861;

  corral_source_split_6859:
    assume {:verifier.code 0} true;
    out_$p210 := $M.34;
    goto corral_source_split_6860;

  $bb153:
    assume out_$i209 == 1;
    goto corral_source_split_6859;

  corral_source_split_6561:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb153, $bb154;

  corral_source_split_6560:
    assume {:verifier.code 0} true;
    out_$i209 := $eq.i32(out_$i208, 1);
    goto corral_source_split_6561;

  corral_source_split_6559:
    assume {:verifier.code 0} true;
    out_$i208 := $M.43;
    goto corral_source_split_6560;

  $bb36:
    assume out_$i47 == 1;
    goto corral_source_split_6559;

  $bb35:
    assume !(out_$i46 == 1);
    assume {:verifier.code 0} true;
    out_$i47 := $slt.i32(out_$i38, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb169:
    assume !(out_$i226 == 1);
    assume {:verifier.code 0} true;
    goto $bb170;

  corral_source_split_6899:
    assume {:verifier.code 0} true;
    goto $bb170;

  corral_source_split_6898:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 1458} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_6899;

  corral_source_split_6897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1457} out_vslice_dummy_var_136 := team_netpoll_setup(out_$p227, in_$p6);
    goto corral_source_split_6898;

  corral_source_split_6896:
    assume {:verifier.code 0} true;
    out_$p227 := $M.34;
    goto corral_source_split_6897;

  $bb168:
    assume out_$i226 == 1;
    goto corral_source_split_6896;

  corral_source_split_6894:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb168, $bb169;

  corral_source_split_6893:
    assume {:verifier.code 0} true;
    out_$i226 := $eq.i32(out_$i225, 2);
    goto corral_source_split_6894;

  $bb167:
    assume {:verifier.code 0} true;
    out_$i225 := $M.43;
    goto corral_source_split_6893;

  $bb166:
    assume !(out_$i222 == 1);
    assume {:verifier.code 0} true;
    goto $bb167;

  corral_source_split_6891:
    assume {:verifier.code 0} true;
    goto $bb167;

  corral_source_split_6890:
    assume {:verifier.code 0} true;
    $M.43 := 3;
    call {:si_unique_call 1456} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_6891;

  corral_source_split_6889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1455} out_vslice_dummy_var_135 := team_netpoll_setup(out_$p223, in_$p6);
    goto corral_source_split_6890;

  corral_source_split_6888:
    assume {:verifier.code 0} true;
    out_$p223 := $M.34;
    goto corral_source_split_6889;

  $bb165:
    assume out_$i222 == 1;
    goto corral_source_split_6888;

  corral_source_split_6886:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb165, $bb166;

  corral_source_split_6885:
    assume {:verifier.code 0} true;
    out_$i222 := $eq.i32(out_$i221, 3);
    goto corral_source_split_6886;

  $bb164:
    assume {:verifier.code 0} true;
    out_$i221 := $M.43;
    goto corral_source_split_6885;

  $bb163:
    assume !(out_$i218 == 1);
    assume {:verifier.code 0} true;
    goto $bb164;

  corral_source_split_6883:
    assume {:verifier.code 0} true;
    goto $bb164;

  corral_source_split_6882:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 1454} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6883;

  corral_source_split_6881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1453} out_vslice_dummy_var_134 := team_netpoll_setup(out_$p219, in_$p6);
    goto corral_source_split_6882;

  corral_source_split_6880:
    assume {:verifier.code 0} true;
    out_$p219 := $M.34;
    goto corral_source_split_6881;

  $bb162:
    assume out_$i218 == 1;
    goto corral_source_split_6880;

  corral_source_split_6565:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb162, $bb163;

  corral_source_split_6564:
    assume {:verifier.code 0} true;
    out_$i218 := $eq.i32(out_$i217, 1);
    goto corral_source_split_6565;

  corral_source_split_6563:
    assume {:verifier.code 0} true;
    out_$i217 := $M.43;
    goto corral_source_split_6564;

  $bb38:
    assume out_$i48 == 1;
    goto corral_source_split_6563;

  $bb37:
    assume !(out_$i47 == 1);
    assume {:verifier.code 0} true;
    out_$i48 := $slt.i32(out_$i38, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb178:
    assume !(out_$i240 == 1);
    assume {:verifier.code 0} true;
    goto $bb179;

  corral_source_split_6923:
    assume {:verifier.code 0} true;
    goto $bb179;

  corral_source_split_6922:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 1464} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_6923;

  corral_source_split_6921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1463} out_vslice_dummy_var_139 := team_select_queue(out_$p241, in_$p12, in_$p10, out_$p242);
    goto corral_source_split_6922;

  corral_source_split_6920:
    assume {:verifier.code 0} true;
    out_$p242 := $M.51;
    goto corral_source_split_6921;

  corral_source_split_6919:
    assume {:verifier.code 0} true;
    out_$p241 := $M.34;
    goto corral_source_split_6920;

  $bb177:
    assume out_$i240 == 1;
    goto corral_source_split_6919;

  corral_source_split_6917:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb177, $bb178;

  corral_source_split_6916:
    assume {:verifier.code 0} true;
    out_$i240 := $eq.i32(out_$i239, 2);
    goto corral_source_split_6917;

  $bb176:
    assume {:verifier.code 0} true;
    out_$i239 := $M.43;
    goto corral_source_split_6916;

  $bb175:
    assume !(out_$i235 == 1);
    assume {:verifier.code 0} true;
    goto $bb176;

  corral_source_split_6914:
    assume {:verifier.code 0} true;
    goto $bb176;

  corral_source_split_6913:
    assume {:verifier.code 0} true;
    $M.43 := 3;
    call {:si_unique_call 1462} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_6914;

  corral_source_split_6912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1461} out_vslice_dummy_var_138 := team_select_queue(out_$p236, in_$p12, in_$p10, out_$p237);
    goto corral_source_split_6913;

  corral_source_split_6911:
    assume {:verifier.code 0} true;
    out_$p237 := $M.51;
    goto corral_source_split_6912;

  corral_source_split_6910:
    assume {:verifier.code 0} true;
    out_$p236 := $M.34;
    goto corral_source_split_6911;

  $bb174:
    assume out_$i235 == 1;
    goto corral_source_split_6910;

  corral_source_split_6908:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb174, $bb175;

  corral_source_split_6907:
    assume {:verifier.code 0} true;
    out_$i235 := $eq.i32(out_$i234, 3);
    goto corral_source_split_6908;

  $bb173:
    assume {:verifier.code 0} true;
    out_$i234 := $M.43;
    goto corral_source_split_6907;

  $bb172:
    assume !(out_$i230 == 1);
    assume {:verifier.code 0} true;
    goto $bb173;

  corral_source_split_6905:
    assume {:verifier.code 0} true;
    goto $bb173;

  corral_source_split_6904:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 1460} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6905;

  corral_source_split_6903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1459} out_vslice_dummy_var_137 := team_select_queue(out_$p231, in_$p12, in_$p10, out_$p232);
    goto corral_source_split_6904;

  corral_source_split_6902:
    assume {:verifier.code 0} true;
    out_$p232 := $M.51;
    goto corral_source_split_6903;

  corral_source_split_6901:
    assume {:verifier.code 0} true;
    out_$p231 := $M.34;
    goto corral_source_split_6902;

  $bb171:
    assume out_$i230 == 1;
    goto corral_source_split_6901;

  corral_source_split_6569:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb171, $bb172;

  corral_source_split_6568:
    assume {:verifier.code 0} true;
    out_$i230 := $eq.i32(out_$i229, 1);
    goto corral_source_split_6569;

  corral_source_split_6567:
    assume {:verifier.code 0} true;
    out_$i229 := $M.43;
    goto corral_source_split_6568;

  $bb39:
    assume !(out_$i48 == 1);
    goto corral_source_split_6567;

  $bb184:
    assume !(out_$i249 == 1);
    assume {:verifier.code 0} true;
    goto $bb185;

  corral_source_split_6936:
    assume {:verifier.code 0} true;
    goto $bb185;

  corral_source_split_6935:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 1468} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_6936;

  corral_source_split_6934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1467} out_vslice_dummy_var_141 := team_change_mtu(out_$p250, in_$i7);
    goto corral_source_split_6935;

  corral_source_split_6933:
    assume {:verifier.code 0} true;
    out_$p250 := $M.34;
    goto corral_source_split_6934;

  $bb183:
    assume out_$i249 == 1;
    goto corral_source_split_6933;

  corral_source_split_6931:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb183, $bb184;

  corral_source_split_6930:
    assume {:verifier.code 0} true;
    out_$i249 := $eq.i32(out_$i248, 2);
    goto corral_source_split_6931;

  $bb182:
    assume {:verifier.code 0} true;
    out_$i248 := $M.43;
    goto corral_source_split_6930;

  $bb181:
    assume !(out_$i245 == 1);
    assume {:verifier.code 0} true;
    goto $bb182;

  corral_source_split_6928:
    assume {:verifier.code 0} true;
    goto $bb182;

  corral_source_split_6927:
    assume {:verifier.code 0} true;
    $M.43 := 3;
    call {:si_unique_call 1466} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_6928;

  corral_source_split_6926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1465} out_vslice_dummy_var_140 := team_change_mtu(out_$p246, in_$i7);
    goto corral_source_split_6927;

  corral_source_split_6925:
    assume {:verifier.code 0} true;
    out_$p246 := $M.34;
    goto corral_source_split_6926;

  $bb180:
    assume out_$i245 == 1;
    goto corral_source_split_6925;

  corral_source_split_6553:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb180, $bb181;

  corral_source_split_6552:
    assume {:verifier.code 0} true;
    out_$i245 := $eq.i32(out_$i244, 3);
    goto corral_source_split_6553;

  corral_source_split_6551:
    assume {:verifier.code 0} true;
    out_$i244 := $M.43;
    goto corral_source_split_6552;

  $bb32:
    assume out_$i45 == 1;
    goto corral_source_split_6551;

  $bb23:
    assume out_$i41 == 1;
    assume {:verifier.code 0} true;
    out_$i45 := $slt.i32(out_$i38, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb22:
    assume !(out_$i40 == 1);
    assume {:verifier.code 0} true;
    out_$i41 := $slt.i32(out_$i38, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb187:
    assume !(out_$i253 == 1);
    assume {:verifier.code 0} true;
    goto $bb188;

  corral_source_split_6944:
    assume {:verifier.code 0} true;
    goto $bb188;

  corral_source_split_6943:
    assume {:verifier.code 0} true;
    $M.45 := out_$i256;
    call {:si_unique_call 1471} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i256);
    goto corral_source_split_6944;

  corral_source_split_6942:
    assume {:verifier.code 0} true;
    out_$i256 := $sub.i32(out_$i255, 1);
    goto corral_source_split_6943;

  corral_source_split_6941:
    assume {:verifier.code 0} true;
    out_$i255 := $M.45;
    goto corral_source_split_6942;

  corral_source_split_6940:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 1470} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6941;

  corral_source_split_6939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1469} team_uninit(out_$p254);
    goto corral_source_split_6940;

  corral_source_split_6938:
    assume {:verifier.code 0} true;
    out_$p254 := $M.34;
    goto corral_source_split_6939;

  $bb186:
    assume out_$i253 == 1;
    goto corral_source_split_6938;

  corral_source_split_6557:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb186, $bb187;

  corral_source_split_6556:
    assume {:verifier.code 0} true;
    out_$i253 := $eq.i32(out_$i252, 2);
    goto corral_source_split_6557;

  corral_source_split_6555:
    assume {:verifier.code 0} true;
    out_$i252 := $M.43;
    goto corral_source_split_6556;

  $bb33:
    assume !(out_$i45 == 1);
    goto corral_source_split_6555;

  $bb196:
    assume !(out_$i270 == 1);
    assume {:verifier.code 0} true;
    goto $bb197;

  corral_source_split_6971:
    assume {:verifier.code 0} true;
    goto $bb197;

  corral_source_split_6970:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 1477} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_6971;

  corral_source_split_6969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1476} out_vslice_dummy_var_144 := team_change_carrier(out_$p271, out_$i273);
    goto corral_source_split_6970;

  corral_source_split_6968:
    assume {:verifier.code 0} true;
    out_$i273 := $trunc.i8.i1(out_$i272);
    goto corral_source_split_6969;

  corral_source_split_6967:
    assume {:verifier.code 0} true;
    out_$i272 := $load.i8($M.42, in_$p3);
    goto corral_source_split_6968;

  corral_source_split_6966:
    assume {:verifier.code 0} true;
    out_$p271 := $M.34;
    goto corral_source_split_6967;

  $bb195:
    assume out_$i270 == 1;
    goto corral_source_split_6966;

  corral_source_split_6964:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb195, $bb196;

  corral_source_split_6963:
    assume {:verifier.code 0} true;
    out_$i270 := $eq.i32(out_$i269, 2);
    goto corral_source_split_6964;

  $bb194:
    assume {:verifier.code 0} true;
    out_$i269 := $M.43;
    goto corral_source_split_6963;

  $bb193:
    assume !(out_$i264 == 1);
    assume {:verifier.code 0} true;
    goto $bb194;

  corral_source_split_6961:
    assume {:verifier.code 0} true;
    goto $bb194;

  corral_source_split_6960:
    assume {:verifier.code 0} true;
    $M.43 := 3;
    call {:si_unique_call 1475} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_6961;

  corral_source_split_6959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1474} out_vslice_dummy_var_143 := team_change_carrier(out_$p265, out_$i267);
    goto corral_source_split_6960;

  corral_source_split_6958:
    assume {:verifier.code 0} true;
    out_$i267 := $trunc.i8.i1(out_$i266);
    goto corral_source_split_6959;

  corral_source_split_6957:
    assume {:verifier.code 0} true;
    out_$i266 := $load.i8($M.42, in_$p3);
    goto corral_source_split_6958;

  corral_source_split_6956:
    assume {:verifier.code 0} true;
    out_$p265 := $M.34;
    goto corral_source_split_6957;

  $bb192:
    assume out_$i264 == 1;
    goto corral_source_split_6956;

  corral_source_split_6954:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb192, $bb193;

  corral_source_split_6953:
    assume {:verifier.code 0} true;
    out_$i264 := $eq.i32(out_$i263, 3);
    goto corral_source_split_6954;

  $bb191:
    assume {:verifier.code 0} true;
    out_$i263 := $M.43;
    goto corral_source_split_6953;

  $bb190:
    assume !(out_$i258 == 1);
    assume {:verifier.code 0} true;
    goto $bb191;

  corral_source_split_6951:
    assume {:verifier.code 0} true;
    goto $bb191;

  corral_source_split_6950:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 1473} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6951;

  corral_source_split_6949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1472} out_vslice_dummy_var_142 := team_change_carrier(out_$p259, out_$i261);
    goto corral_source_split_6950;

  corral_source_split_6948:
    assume {:verifier.code 0} true;
    out_$i261 := $trunc.i8.i1(out_$i260);
    goto corral_source_split_6949;

  corral_source_split_6947:
    assume {:verifier.code 0} true;
    out_$i260 := $load.i8($M.42, in_$p3);
    goto corral_source_split_6948;

  corral_source_split_6946:
    assume {:verifier.code 0} true;
    out_$p259 := $M.34;
    goto corral_source_split_6947;

  $bb189:
    assume out_$i258 == 1;
    goto corral_source_split_6946;

  corral_source_split_6541:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb189, $bb190;

  corral_source_split_6540:
    assume {:verifier.code 0} true;
    out_$i258 := $eq.i32(out_$i257, 1);
    goto corral_source_split_6541;

  corral_source_split_6539:
    assume {:verifier.code 0} true;
    out_$i257 := $M.43;
    goto corral_source_split_6540;

  $bb25:
    assume out_$i42 == 1;
    goto corral_source_split_6539;

  $bb24:
    assume !(out_$i41 == 1);
    assume {:verifier.code 0} true;
    out_$i42 := $slt.i32(out_$i38, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb205:
    assume !(out_$i284 == 1);
    assume {:verifier.code 0} true;
    goto $bb206;

  corral_source_split_6992:
    assume {:verifier.code 0} true;
    goto $bb206;

  corral_source_split_6991:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 1483} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_6992;

  corral_source_split_6990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1482} out_vslice_dummy_var_147 := team_set_mac_address(out_$p285, in_$p13);
    goto corral_source_split_6991;

  corral_source_split_6989:
    assume {:verifier.code 0} true;
    out_$p285 := $M.34;
    goto corral_source_split_6990;

  $bb204:
    assume out_$i284 == 1;
    goto corral_source_split_6989;

  corral_source_split_6987:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb204, $bb205;

  corral_source_split_6986:
    assume {:verifier.code 0} true;
    out_$i284 := $eq.i32(out_$i283, 2);
    goto corral_source_split_6987;

  $bb203:
    assume {:verifier.code 0} true;
    out_$i283 := $M.43;
    goto corral_source_split_6986;

  $bb202:
    assume !(out_$i280 == 1);
    assume {:verifier.code 0} true;
    goto $bb203;

  corral_source_split_6984:
    assume {:verifier.code 0} true;
    goto $bb203;

  corral_source_split_6983:
    assume {:verifier.code 0} true;
    $M.43 := 3;
    call {:si_unique_call 1481} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_6984;

  corral_source_split_6982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1480} out_vslice_dummy_var_146 := team_set_mac_address(out_$p281, in_$p13);
    goto corral_source_split_6983;

  corral_source_split_6981:
    assume {:verifier.code 0} true;
    out_$p281 := $M.34;
    goto corral_source_split_6982;

  $bb201:
    assume out_$i280 == 1;
    goto corral_source_split_6981;

  corral_source_split_6979:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb201, $bb202;

  corral_source_split_6978:
    assume {:verifier.code 0} true;
    out_$i280 := $eq.i32(out_$i279, 3);
    goto corral_source_split_6979;

  $bb200:
    assume {:verifier.code 0} true;
    out_$i279 := $M.43;
    goto corral_source_split_6978;

  $bb199:
    assume !(out_$i276 == 1);
    assume {:verifier.code 0} true;
    goto $bb200;

  corral_source_split_6976:
    assume {:verifier.code 0} true;
    goto $bb200;

  corral_source_split_6975:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 1479} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6976;

  corral_source_split_6974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1478} out_vslice_dummy_var_145 := team_set_mac_address(out_$p277, in_$p13);
    goto corral_source_split_6975;

  corral_source_split_6973:
    assume {:verifier.code 0} true;
    out_$p277 := $M.34;
    goto corral_source_split_6974;

  $bb198:
    assume out_$i276 == 1;
    goto corral_source_split_6973;

  corral_source_split_6545:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb198, $bb199;

  corral_source_split_6544:
    assume {:verifier.code 0} true;
    out_$i276 := $eq.i32(out_$i275, 1);
    goto corral_source_split_6545;

  corral_source_split_6543:
    assume {:verifier.code 0} true;
    out_$i275 := $M.43;
    goto corral_source_split_6544;

  $bb27:
    assume out_$i43 == 1;
    goto corral_source_split_6543;

  $bb26:
    assume !(out_$i42 == 1);
    assume {:verifier.code 0} true;
    out_$i43 := $slt.i32(out_$i38, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb214:
    assume !(out_$i296 == 1);
    assume {:verifier.code 0} true;
    goto $bb215;

  corral_source_split_7013:
    assume {:verifier.code 0} true;
    goto $bb215;

  corral_source_split_7012:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 1489} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_7013;

  corral_source_split_7011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1488} out_vslice_dummy_var_150 := team_get_stats64(out_$p297, in_$p9);
    goto corral_source_split_7012;

  corral_source_split_7010:
    assume {:verifier.code 0} true;
    out_$p297 := $M.34;
    goto corral_source_split_7011;

  $bb213:
    assume out_$i296 == 1;
    goto corral_source_split_7010;

  corral_source_split_7008:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb213, $bb214;

  corral_source_split_7007:
    assume {:verifier.code 0} true;
    out_$i296 := $eq.i32(out_$i295, 2);
    goto corral_source_split_7008;

  $bb212:
    assume {:verifier.code 0} true;
    out_$i295 := $M.43;
    goto corral_source_split_7007;

  $bb211:
    assume !(out_$i292 == 1);
    assume {:verifier.code 0} true;
    goto $bb212;

  corral_source_split_7005:
    assume {:verifier.code 0} true;
    goto $bb212;

  corral_source_split_7004:
    assume {:verifier.code 0} true;
    $M.43 := 3;
    call {:si_unique_call 1487} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_7005;

  corral_source_split_7003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1486} out_vslice_dummy_var_149 := team_get_stats64(out_$p293, in_$p9);
    goto corral_source_split_7004;

  corral_source_split_7002:
    assume {:verifier.code 0} true;
    out_$p293 := $M.34;
    goto corral_source_split_7003;

  $bb210:
    assume out_$i292 == 1;
    goto corral_source_split_7002;

  corral_source_split_7000:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb210, $bb211;

  corral_source_split_6999:
    assume {:verifier.code 0} true;
    out_$i292 := $eq.i32(out_$i291, 3);
    goto corral_source_split_7000;

  $bb209:
    assume {:verifier.code 0} true;
    out_$i291 := $M.43;
    goto corral_source_split_6999;

  $bb208:
    assume !(out_$i288 == 1);
    assume {:verifier.code 0} true;
    goto $bb209;

  corral_source_split_6997:
    assume {:verifier.code 0} true;
    goto $bb209;

  corral_source_split_6996:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 1485} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6997;

  corral_source_split_6995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1484} out_vslice_dummy_var_148 := team_get_stats64(out_$p289, in_$p9);
    goto corral_source_split_6996;

  corral_source_split_6994:
    assume {:verifier.code 0} true;
    out_$p289 := $M.34;
    goto corral_source_split_6995;

  $bb207:
    assume out_$i288 == 1;
    goto corral_source_split_6994;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb207, $bb208;

  corral_source_split_6548:
    assume {:verifier.code 0} true;
    out_$i288 := $eq.i32(out_$i287, 1);
    goto corral_source_split_6549;

  corral_source_split_6547:
    assume {:verifier.code 0} true;
    out_$i287 := $M.43;
    goto corral_source_split_6548;

  $bb29:
    assume out_$i44 == 1;
    goto corral_source_split_6547;

  $bb28:
    assume !(out_$i43 == 1);
    assume {:verifier.code 0} true;
    out_$i44 := $eq.i32(out_$i38, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_7015:
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1490} ldv_stop();
    goto corral_source_split_7015;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb30:
    assume {:verifier.code 0} true;
    assume !(out_$i44 == 1);
    goto $bb31;

  $bb61:
    assume {:verifier.code 0} true;
    assume !(out_$i59 == 1);
    goto $bb31;

  $bb221:
    assume !(out_$i300 == 1);
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb228:
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb230:
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb227:
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb226:
    assume !(out_$i304 == 1);
    assume {:verifier.code 0} true;
    goto $bb227;

  corral_source_split_7025:
    assume {:verifier.code 0} true;
    goto $bb227;

  corral_source_split_7024:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 1495} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_7025;

  corral_source_split_7023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1494} out_vslice_dummy_var_151 := team_device_event(in_$p21, in_$i18, in_$p19);
    goto corral_source_split_7024;

  $bb225:
    assume out_$i304 == 1;
    goto corral_source_split_7023;

  corral_source_split_7021:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb225, $bb226;

  corral_source_split_7020:
    assume {:verifier.code 0} true;
    out_$i304 := $eq.i32(out_$i303, 1);
    goto corral_source_split_7021;

  corral_source_split_7019:
    assume {:verifier.code 0} true;
    out_$i303 := $M.44;
    goto corral_source_split_7020;

  $bb223:
    assume out_$i302 == 1;
    goto corral_source_split_7019;

  $bb222:
    assume {:verifier.code 0} true;
    out_$i302 := $eq.i32(out_$i301, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb223, $bb224;

  corral_source_split_7017:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1491} out_$i301 := __VERIFIER_nondet_int();
    call {:si_unique_call 1492} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i301);
    call {:si_unique_call 1493} {:cexpr "tmp___16"} boogie_si_record_i32(out_$i301);
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb220:
    assume out_$i300 == 1;
    goto corral_source_split_7017;

  corral_source_split_6531:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb220, $bb221;

  corral_source_split_6530:
    assume {:verifier.code 0} true;
    out_$i300 := $ne.i32(out_$i299, 0);
    goto corral_source_split_6531;

  corral_source_split_6529:
    assume {:verifier.code 0} true;
    out_$i299 := $M.44;
    goto corral_source_split_6530;

  $bb13:
    assume !(out_$i34 == 1);
    goto corral_source_split_6529;

  corral_source_split_7027:
    assume {:verifier.code 0} true;
    goto $bb230;

  $bb229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1496} ldv_stop();
    goto corral_source_split_7027;

  $bb224:
    assume !(out_$i302 == 1);
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb233:
    assume !(out_$i307 == 1);
    assume {:verifier.code 0} true;
    goto $bb261;

  $bb249:
    assume {:verifier.code 0} true;
    goto $bb261;

  $bb260:
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb258:
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb248:
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb244:
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb243:
    assume {:verifier.code 0} true;
    assume !(out_$i313 == 1);
    goto $bb244;

  $bb246:
    assume {:verifier.code 0} true;
    assume !(out_$i315 == 1);
    goto $bb244;

  corral_source_split_7041:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb246;

  corral_source_split_7040:
    assume {:verifier.code 0} true;
    out_$i315 := $eq.i32(out_$i314, 0);
    goto corral_source_split_7041;

  corral_source_split_7039:
    assume {:verifier.code 0} true;
    out_$i314 := $M.45;
    goto corral_source_split_7040;

  $bb242:
    assume out_$i313 == 1;
    goto corral_source_split_7039;

  corral_source_split_7037:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb242, $bb243;

  corral_source_split_7036:
    assume {:verifier.code 0} true;
    out_$i313 := $eq.i32(out_$i312, 2);
    goto corral_source_split_7037;

  corral_source_split_7035:
    assume {:verifier.code 0} true;
    out_$i312 := $M.46;
    goto corral_source_split_7036;

  $bb240:
    assume out_$i311 == 1;
    goto corral_source_split_7035;

  $bb235:
    assume out_$i309 == 1;
    assume {:verifier.code 0} true;
    out_$i311 := $eq.i32(out_$i308, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb240, $bb241;

  $bb234:
    assume {:verifier.code 0} true;
    out_$i309 := $slt.i32(out_$i308, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb235, $bb236;

  corral_source_split_7029:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1497} out_$i308 := __VERIFIER_nondet_int();
    call {:si_unique_call 1498} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i308);
    call {:si_unique_call 1499} {:cexpr "tmp___17"} boogie_si_record_i32(out_$i308);
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb232:
    assume out_$i307 == 1;
    goto corral_source_split_7029;

  corral_source_split_6519:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb232, $bb233;

  corral_source_split_6518:
    assume {:verifier.code 0} true;
    out_$i307 := $ne.i32(out_$i306, 0);
    goto corral_source_split_6519;

  corral_source_split_6517:
    assume {:verifier.code 0} true;
    out_$i306 := $M.46;
    goto corral_source_split_6518;

  $bb5:
    assume out_$i31 == 1;
    goto corral_source_split_6517;

  $bb4:
    assume !(out_$i30 == 1);
    assume {:verifier.code 0} true;
    out_$i31 := $slt.i32(out_$i29, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb251:
    assume !(out_$i317 == 1);
    assume {:verifier.code 0} true;
    goto $bb258;

  $bb257:
    assume {:verifier.code 0} true;
    goto $bb258;

  $bb256:
    assume !(out_$i322 == 1);
    assume {:verifier.code 0} true;
    goto $bb257;

  corral_source_split_7069:
    assume {:verifier.code 0} true;
    goto $bb257;

  corral_source_split_7068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1513} ldv_net_device_ops_4();
    goto corral_source_split_7069;

  corral_source_split_7067:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 1512} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_7068;

  corral_source_split_7066:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 1511} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_7067;

  corral_source_split_7065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1510} ldv_initialize_ethtool_ops_3();
    goto corral_source_split_7066;

  corral_source_split_7064:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1509} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_7065;

  corral_source_split_7063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1508} ldv_initialize_rtnl_link_ops_2();
    goto corral_source_split_7064;

  corral_source_split_7062:
    assume {:verifier.code 0} true;
    $M.48 := 1;
    call {:si_unique_call 1507} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_7063;

  corral_source_split_7061:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1506} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_7062;

  $bb255:
    assume out_$i322 == 1;
    goto corral_source_split_7061;

  corral_source_split_7059:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb255, $bb256;

  corral_source_split_7058:
    assume {:verifier.code 0} true;
    out_$i322 := $eq.i32(out_$i321, 0);
    goto corral_source_split_7059;

  $bb254:
    assume {:verifier.code 0} true;
    out_$i321 := $M.52;
    goto corral_source_split_7058;

  $bb253:
    assume !(out_$i320 == 1);
    assume {:verifier.code 0} true;
    goto $bb254;

  corral_source_split_7053:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb253;

  corral_source_split_7052:
    assume {:verifier.code 0} true;
    out_$i320 := $ne.i32(out_$i319, 0);
    goto corral_source_split_7053;

  corral_source_split_7051:
    assume {:verifier.code 0} true;
    out_$i319 := $M.52;
    goto corral_source_split_7052;

  corral_source_split_7050:
    assume {:verifier.code 0} true;
    $M.52 := out_$i318;
    call {:si_unique_call 1504} {:cexpr "ldv_retval_2"} boogie_si_record_i32(out_$i318);
    goto corral_source_split_7051;

  corral_source_split_7049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1503} out_$i318 := team_module_init();
    goto corral_source_split_7050;

  $bb250:
    assume out_$i317 == 1;
    goto corral_source_split_7049;

  corral_source_split_7033:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb250, $bb251;

  corral_source_split_7032:
    assume {:verifier.code 0} true;
    out_$i317 := $eq.i32(out_$i316, 1);
    goto corral_source_split_7033;

  corral_source_split_7031:
    assume {:verifier.code 0} true;
    out_$i316 := $M.46;
    goto corral_source_split_7032;

  $bb237:
    assume out_$i310 == 1;
    goto corral_source_split_7031;

  $bb236:
    assume !(out_$i309 == 1);
    assume {:verifier.code 0} true;
    out_$i310 := $eq.i32(out_$i308, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb237, $bb238;

  corral_source_split_7071:
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1514} ldv_stop();
    goto corral_source_split_7071;

  $bb239:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb238:
    assume {:verifier.code 0} true;
    assume !(out_$i310 == 1);
    goto $bb239;

  $bb241:
    assume {:verifier.code 0} true;
    assume !(out_$i311 == 1);
    goto $bb239;

  $bb263:
    assume !(out_$i324 == 1);
    assume {:verifier.code 0} true;
    goto $bb281;

  $bb275:
    assume {:verifier.code 0} true;
    goto $bb281;

  $bb280:
    assume {:verifier.code 0} true;
    goto $bb275;

  $bb278:
    assume {:verifier.code 0} true;
    goto $bb275;

  $bb274:
    assume {:verifier.code 0} true;
    goto $bb275;

  $bb273:
    assume !(out_$i330 == 1);
    assume {:verifier.code 0} true;
    goto $bb274;

  corral_source_split_7086:
    assume {:verifier.code 0} true;
    goto $bb274;

  corral_source_split_7085:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1519} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_7086;

  corral_source_split_7084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1518} team_ethtool_get_drvinfo(out_$p331, in_$p23);
    goto corral_source_split_7085;

  corral_source_split_7083:
    assume {:verifier.code 0} true;
    out_$p331 := $M.38;
    goto corral_source_split_7084;

  $bb272:
    assume out_$i330 == 1;
    goto corral_source_split_7083;

  corral_source_split_7081:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb272, $bb273;

  corral_source_split_7080:
    assume {:verifier.code 0} true;
    out_$i330 := $eq.i32(out_$i329, 1);
    goto corral_source_split_7081;

  corral_source_split_7079:
    assume {:verifier.code 0} true;
    out_$i329 := $M.47;
    goto corral_source_split_7080;

  $bb270:
    assume out_$i328 == 1;
    goto corral_source_split_7079;

  $bb265:
    assume out_$i326 == 1;
    assume {:verifier.code 0} true;
    out_$i328 := $eq.i32(out_$i325, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb270, $bb271;

  $bb264:
    assume {:verifier.code 0} true;
    out_$i326 := $slt.i32(out_$i325, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb265, $bb266;

  corral_source_split_7073:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1515} out_$i325 := __VERIFIER_nondet_int();
    call {:si_unique_call 1516} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i325);
    call {:si_unique_call 1517} {:cexpr "tmp___18"} boogie_si_record_i32(out_$i325);
    assume {:verifier.code 0} true;
    goto $bb264;

  $bb262:
    assume out_$i324 == 1;
    goto corral_source_split_7073;

  corral_source_split_6523:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb262, $bb263;

  corral_source_split_6522:
    assume {:verifier.code 0} true;
    out_$i324 := $ne.i32(out_$i323, 0);
    goto corral_source_split_6523;

  corral_source_split_6521:
    assume {:verifier.code 0} true;
    out_$i323 := $M.47;
    goto corral_source_split_6522;

  $bb7:
    assume out_$i32 == 1;
    goto corral_source_split_6521;

  $bb6:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    out_$i32 := $slt.i32(out_$i29, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb277:
    assume !(out_$i333 == 1);
    assume {:verifier.code 0} true;
    goto $bb278;

  corral_source_split_7091:
    assume {:verifier.code 0} true;
    goto $bb278;

  corral_source_split_7090:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1521} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_7091;

  corral_source_split_7089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1520} out_vslice_dummy_var_152 := ethtool_op_get_link(out_$p334);
    goto corral_source_split_7090;

  corral_source_split_7088:
    assume {:verifier.code 0} true;
    out_$p334 := $M.38;
    goto corral_source_split_7089;

  $bb276:
    assume out_$i333 == 1;
    goto corral_source_split_7088;

  corral_source_split_7077:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb276, $bb277;

  corral_source_split_7076:
    assume {:verifier.code 0} true;
    out_$i333 := $eq.i32(out_$i332, 1);
    goto corral_source_split_7077;

  corral_source_split_7075:
    assume {:verifier.code 0} true;
    out_$i332 := $M.47;
    goto corral_source_split_7076;

  $bb267:
    assume out_$i327 == 1;
    goto corral_source_split_7075;

  $bb266:
    assume !(out_$i326 == 1);
    assume {:verifier.code 0} true;
    out_$i327 := $eq.i32(out_$i325, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb267, $bb268;

  corral_source_split_7093:
    assume {:verifier.code 0} true;
    goto $bb280;

  $bb279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1522} ldv_stop();
    goto corral_source_split_7093;

  $bb269:
    assume {:verifier.code 0} true;
    goto $bb279;

  $bb268:
    assume {:verifier.code 0} true;
    assume !(out_$i327 == 1);
    goto $bb269;

  $bb271:
    assume {:verifier.code 0} true;
    assume !(out_$i328 == 1);
    goto $bb269;

  $bb283:
    assume !(out_$i337 == 1);
    assume {:verifier.code 0} true;
    goto $bb353;

  $bb305:
    assume {:verifier.code 0} true;
    goto $bb353;

  $bb352:
    assume {:verifier.code 0} true;
    goto $bb305;

  $bb350:
    assume {:verifier.code 0} true;
    goto $bb305;

  $bb347:
    assume {:verifier.code 0} true;
    goto $bb305;

  $bb341:
    assume {:verifier.code 0} true;
    goto $bb305;

  $bb332:
    assume {:verifier.code 0} true;
    goto $bb305;

  $bb323:
    assume {:verifier.code 0} true;
    goto $bb305;

  $bb314:
    assume {:verifier.code 0} true;
    goto $bb305;

  $bb304:
    assume {:verifier.code 0} true;
    goto $bb305;

  $bb303:
    assume !(out_$i348 == 1);
    assume {:verifier.code 0} true;
    goto $bb304;

  corral_source_split_7131:
    assume {:verifier.code 0} true;
    goto $bb304;

  corral_source_split_7130:
    assume {:verifier.code 0} true;
    $M.45 := out_$i351;
    call {:si_unique_call 1528} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i351);
    goto corral_source_split_7131;

  corral_source_split_7129:
    assume {:verifier.code 0} true;
    out_$i351 := $add.i32(out_$i350, 1);
    goto corral_source_split_7130;

  corral_source_split_7128:
    assume {:verifier.code 0} true;
    out_$i350 := $M.45;
    goto corral_source_split_7129;

  corral_source_split_7127:
    assume {:verifier.code 0} true;
    $M.48 := 2;
    call {:si_unique_call 1527} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_7128;

  corral_source_split_7126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1526} team_setup(out_$p349);
    goto corral_source_split_7127;

  corral_source_split_7125:
    assume {:verifier.code 0} true;
    out_$p349 := $M.36;
    goto corral_source_split_7126;

  $bb302:
    assume out_$i348 == 1;
    goto corral_source_split_7125;

  corral_source_split_7123:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb302, $bb303;

  corral_source_split_7122:
    assume {:verifier.code 0} true;
    out_$i348 := $eq.i32(out_$i347, 1);
    goto corral_source_split_7123;

  corral_source_split_7121:
    assume {:verifier.code 0} true;
    out_$i347 := $M.48;
    goto corral_source_split_7122;

  $bb300:
    assume out_$i346 == 1;
    goto corral_source_split_7121;

  $bb296:
    assume out_$i344 == 1;
    assume {:verifier.code 0} true;
    out_$i346 := $eq.i32(out_$i338, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb300, $bb301;

  $bb285:
    assume out_$i339 == 1;
    assume {:verifier.code 0} true;
    out_$i344 := $slt.i32(out_$i338, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb296, $bb297;

  $bb284:
    assume {:verifier.code 0} true;
    out_$i339 := $slt.i32(out_$i338, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb285, $bb286;

  corral_source_split_7095:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1523} out_$i338 := __VERIFIER_nondet_int();
    call {:si_unique_call 1524} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i338);
    call {:si_unique_call 1525} {:cexpr "tmp___19"} boogie_si_record_i32(out_$i338);
    assume {:verifier.code 0} true;
    goto $bb284;

  $bb282:
    assume out_$i337 == 1;
    goto corral_source_split_7095;

  corral_source_split_6527:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb282, $bb283;

  corral_source_split_6526:
    assume {:verifier.code 0} true;
    out_$i337 := $ne.i32(out_$i336, 0);
    goto corral_source_split_6527;

  corral_source_split_6525:
    assume {:verifier.code 0} true;
    out_$i336 := $M.48;
    goto corral_source_split_6526;

  $bb9:
    assume out_$i33 == 1;
    goto corral_source_split_6525;

  $bb8:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    out_$i33 := $eq.i32(out_$i29, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb313:
    assume !(out_$i359 == 1);
    assume {:verifier.code 0} true;
    goto $bb314;

  corral_source_split_7149:
    assume {:verifier.code 0} true;
    goto $bb314;

  corral_source_split_7148:
    assume {:verifier.code 0} true;
    $M.48 := 2;
    call {:si_unique_call 1534} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_7149;

  corral_source_split_7147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1533} out_vslice_dummy_var_155 := team_get_num_tx_queues();
    goto corral_source_split_7148;

  $bb312:
    assume out_$i359 == 1;
    goto corral_source_split_7147;

  corral_source_split_7145:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb312, $bb313;

  corral_source_split_7144:
    assume {:verifier.code 0} true;
    out_$i359 := $eq.i32(out_$i358, 2);
    goto corral_source_split_7145;

  $bb311:
    assume {:verifier.code 0} true;
    out_$i358 := $M.48;
    goto corral_source_split_7144;

  $bb310:
    assume !(out_$i356 == 1);
    assume {:verifier.code 0} true;
    goto $bb311;

  corral_source_split_7142:
    assume {:verifier.code 0} true;
    goto $bb311;

  corral_source_split_7141:
    assume {:verifier.code 0} true;
    $M.48 := 3;
    call {:si_unique_call 1532} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_7142;

  corral_source_split_7140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1531} out_vslice_dummy_var_154 := team_get_num_tx_queues();
    goto corral_source_split_7141;

  $bb309:
    assume out_$i356 == 1;
    goto corral_source_split_7140;

  corral_source_split_7138:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb309, $bb310;

  corral_source_split_7137:
    assume {:verifier.code 0} true;
    out_$i356 := $eq.i32(out_$i355, 3);
    goto corral_source_split_7138;

  $bb308:
    assume {:verifier.code 0} true;
    out_$i355 := $M.48;
    goto corral_source_split_7137;

  $bb307:
    assume !(out_$i353 == 1);
    assume {:verifier.code 0} true;
    goto $bb308;

  corral_source_split_7135:
    assume {:verifier.code 0} true;
    goto $bb308;

  corral_source_split_7134:
    assume {:verifier.code 0} true;
    $M.48 := 1;
    call {:si_unique_call 1530} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_7135;

  corral_source_split_7133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1529} out_vslice_dummy_var_153 := team_get_num_tx_queues();
    goto corral_source_split_7134;

  $bb306:
    assume out_$i353 == 1;
    goto corral_source_split_7133;

  corral_source_split_7115:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb306, $bb307;

  corral_source_split_7114:
    assume {:verifier.code 0} true;
    out_$i353 := $eq.i32(out_$i352, 1);
    goto corral_source_split_7115;

  corral_source_split_7113:
    assume {:verifier.code 0} true;
    out_$i352 := $M.48;
    goto corral_source_split_7114;

  $bb298:
    assume out_$i345 == 1;
    goto corral_source_split_7113;

  $bb297:
    assume !(out_$i344 == 1);
    assume {:verifier.code 0} true;
    out_$i345 := $slt.i32(out_$i338, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb298, $bb299;

  $bb322:
    assume !(out_$i372 == 1);
    assume {:verifier.code 0} true;
    goto $bb323;

  corral_source_split_7173:
    assume {:verifier.code 0} true;
    goto $bb323;

  corral_source_split_7172:
    assume {:verifier.code 0} true;
    $M.48 := 2;
    call {:si_unique_call 1540} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_7173;

  corral_source_split_7171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1539} out_vslice_dummy_var_158 := team_validate(out_$p373, out_$p374);
    goto corral_source_split_7172;

  corral_source_split_7170:
    assume {:verifier.code 0} true;
    out_$p374 := $M.37;
    goto corral_source_split_7171;

  corral_source_split_7169:
    assume {:verifier.code 0} true;
    out_$p373 := $M.35;
    goto corral_source_split_7170;

  $bb321:
    assume out_$i372 == 1;
    goto corral_source_split_7169;

  corral_source_split_7167:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb321, $bb322;

  corral_source_split_7166:
    assume {:verifier.code 0} true;
    out_$i372 := $eq.i32(out_$i371, 2);
    goto corral_source_split_7167;

  $bb320:
    assume {:verifier.code 0} true;
    out_$i371 := $M.48;
    goto corral_source_split_7166;

  $bb319:
    assume !(out_$i367 == 1);
    assume {:verifier.code 0} true;
    goto $bb320;

  corral_source_split_7164:
    assume {:verifier.code 0} true;
    goto $bb320;

  corral_source_split_7163:
    assume {:verifier.code 0} true;
    $M.48 := 3;
    call {:si_unique_call 1538} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_7164;

  corral_source_split_7162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1537} out_vslice_dummy_var_157 := team_validate(out_$p368, out_$p369);
    goto corral_source_split_7163;

  corral_source_split_7161:
    assume {:verifier.code 0} true;
    out_$p369 := $M.37;
    goto corral_source_split_7162;

  corral_source_split_7160:
    assume {:verifier.code 0} true;
    out_$p368 := $M.35;
    goto corral_source_split_7161;

  $bb318:
    assume out_$i367 == 1;
    goto corral_source_split_7160;

  corral_source_split_7158:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb318, $bb319;

  corral_source_split_7157:
    assume {:verifier.code 0} true;
    out_$i367 := $eq.i32(out_$i366, 3);
    goto corral_source_split_7158;

  $bb317:
    assume {:verifier.code 0} true;
    out_$i366 := $M.48;
    goto corral_source_split_7157;

  $bb316:
    assume !(out_$i362 == 1);
    assume {:verifier.code 0} true;
    goto $bb317;

  corral_source_split_7155:
    assume {:verifier.code 0} true;
    goto $bb317;

  corral_source_split_7154:
    assume {:verifier.code 0} true;
    $M.48 := 1;
    call {:si_unique_call 1536} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_7155;

  corral_source_split_7153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1535} out_vslice_dummy_var_156 := team_validate(out_$p363, out_$p364);
    goto corral_source_split_7154;

  corral_source_split_7152:
    assume {:verifier.code 0} true;
    out_$p364 := $M.37;
    goto corral_source_split_7153;

  corral_source_split_7151:
    assume {:verifier.code 0} true;
    out_$p363 := $M.35;
    goto corral_source_split_7152;

  $bb315:
    assume out_$i362 == 1;
    goto corral_source_split_7151;

  corral_source_split_7119:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb315, $bb316;

  corral_source_split_7118:
    assume {:verifier.code 0} true;
    out_$i362 := $eq.i32(out_$i361, 1);
    goto corral_source_split_7119;

  corral_source_split_7117:
    assume {:verifier.code 0} true;
    out_$i361 := $M.48;
    goto corral_source_split_7118;

  $bb299:
    assume !(out_$i345 == 1);
    goto corral_source_split_7117;

  $bb331:
    assume !(out_$i383 == 1);
    assume {:verifier.code 0} true;
    goto $bb332;

  corral_source_split_7191:
    assume {:verifier.code 0} true;
    goto $bb332;

  corral_source_split_7190:
    assume {:verifier.code 0} true;
    $M.48 := 2;
    call {:si_unique_call 1546} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_7191;

  corral_source_split_7189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1545} out_vslice_dummy_var_161 := team_get_num_rx_queues();
    goto corral_source_split_7190;

  $bb330:
    assume out_$i383 == 1;
    goto corral_source_split_7189;

  corral_source_split_7187:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb330, $bb331;

  corral_source_split_7186:
    assume {:verifier.code 0} true;
    out_$i383 := $eq.i32(out_$i382, 2);
    goto corral_source_split_7187;

  $bb329:
    assume {:verifier.code 0} true;
    out_$i382 := $M.48;
    goto corral_source_split_7186;

  $bb328:
    assume !(out_$i380 == 1);
    assume {:verifier.code 0} true;
    goto $bb329;

  corral_source_split_7184:
    assume {:verifier.code 0} true;
    goto $bb329;

  corral_source_split_7183:
    assume {:verifier.code 0} true;
    $M.48 := 3;
    call {:si_unique_call 1544} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_7184;

  corral_source_split_7182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1543} out_vslice_dummy_var_160 := team_get_num_rx_queues();
    goto corral_source_split_7183;

  $bb327:
    assume out_$i380 == 1;
    goto corral_source_split_7182;

  corral_source_split_7180:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb327, $bb328;

  corral_source_split_7179:
    assume {:verifier.code 0} true;
    out_$i380 := $eq.i32(out_$i379, 3);
    goto corral_source_split_7180;

  $bb326:
    assume {:verifier.code 0} true;
    out_$i379 := $M.48;
    goto corral_source_split_7179;

  $bb325:
    assume !(out_$i377 == 1);
    assume {:verifier.code 0} true;
    goto $bb326;

  corral_source_split_7177:
    assume {:verifier.code 0} true;
    goto $bb326;

  corral_source_split_7176:
    assume {:verifier.code 0} true;
    $M.48 := 1;
    call {:si_unique_call 1542} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_7177;

  corral_source_split_7175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1541} out_vslice_dummy_var_159 := team_get_num_rx_queues();
    goto corral_source_split_7176;

  $bb324:
    assume out_$i377 == 1;
    goto corral_source_split_7175;

  corral_source_split_7107:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb324, $bb325;

  corral_source_split_7106:
    assume {:verifier.code 0} true;
    out_$i377 := $eq.i32(out_$i376, 1);
    goto corral_source_split_7107;

  corral_source_split_7105:
    assume {:verifier.code 0} true;
    out_$i376 := $M.48;
    goto corral_source_split_7106;

  $bb294:
    assume out_$i343 == 1;
    goto corral_source_split_7105;

  $bb287:
    assume out_$i340 == 1;
    assume {:verifier.code 0} true;
    out_$i343 := $slt.i32(out_$i338, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb294, $bb295;

  $bb286:
    assume !(out_$i339 == 1);
    assume {:verifier.code 0} true;
    out_$i340 := $slt.i32(out_$i338, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb287, $bb288;

  $bb340:
    assume !(out_$i398 == 1);
    assume {:verifier.code 0} true;
    goto $bb341;

  corral_source_split_7218:
    assume {:verifier.code 0} true;
    goto $bb341;

  corral_source_split_7217:
    assume {:verifier.code 0} true;
    $M.48 := 2;
    call {:si_unique_call 1552} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_7218;

  corral_source_split_7216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1551} out_vslice_dummy_var_164 := team_newlink(in_$p25, out_$p399, out_$p400, out_$p401);
    goto corral_source_split_7217;

  corral_source_split_7215:
    assume {:verifier.code 0} true;
    out_$p401 := $M.37;
    goto corral_source_split_7216;

  corral_source_split_7214:
    assume {:verifier.code 0} true;
    out_$p400 := $M.35;
    goto corral_source_split_7215;

  corral_source_split_7213:
    assume {:verifier.code 0} true;
    out_$p399 := $M.36;
    goto corral_source_split_7214;

  $bb339:
    assume out_$i398 == 1;
    goto corral_source_split_7213;

  corral_source_split_7211:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb339, $bb340;

  corral_source_split_7210:
    assume {:verifier.code 0} true;
    out_$i398 := $eq.i32(out_$i397, 2);
    goto corral_source_split_7211;

  $bb338:
    assume {:verifier.code 0} true;
    out_$i397 := $M.48;
    goto corral_source_split_7210;

  $bb337:
    assume !(out_$i392 == 1);
    assume {:verifier.code 0} true;
    goto $bb338;

  corral_source_split_7208:
    assume {:verifier.code 0} true;
    goto $bb338;

  corral_source_split_7207:
    assume {:verifier.code 0} true;
    $M.48 := 3;
    call {:si_unique_call 1550} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_7208;

  corral_source_split_7206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1549} out_vslice_dummy_var_163 := team_newlink(in_$p25, out_$p393, out_$p394, out_$p395);
    goto corral_source_split_7207;

  corral_source_split_7205:
    assume {:verifier.code 0} true;
    out_$p395 := $M.37;
    goto corral_source_split_7206;

  corral_source_split_7204:
    assume {:verifier.code 0} true;
    out_$p394 := $M.35;
    goto corral_source_split_7205;

  corral_source_split_7203:
    assume {:verifier.code 0} true;
    out_$p393 := $M.36;
    goto corral_source_split_7204;

  $bb336:
    assume out_$i392 == 1;
    goto corral_source_split_7203;

  corral_source_split_7201:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb336, $bb337;

  corral_source_split_7200:
    assume {:verifier.code 0} true;
    out_$i392 := $eq.i32(out_$i391, 3);
    goto corral_source_split_7201;

  $bb335:
    assume {:verifier.code 0} true;
    out_$i391 := $M.48;
    goto corral_source_split_7200;

  $bb334:
    assume !(out_$i386 == 1);
    assume {:verifier.code 0} true;
    goto $bb335;

  corral_source_split_7198:
    assume {:verifier.code 0} true;
    goto $bb335;

  corral_source_split_7197:
    assume {:verifier.code 0} true;
    $M.48 := 1;
    call {:si_unique_call 1548} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_7198;

  corral_source_split_7196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1547} out_vslice_dummy_var_162 := team_newlink(in_$p25, out_$p387, out_$p388, out_$p389);
    goto corral_source_split_7197;

  corral_source_split_7195:
    assume {:verifier.code 0} true;
    out_$p389 := $M.37;
    goto corral_source_split_7196;

  corral_source_split_7194:
    assume {:verifier.code 0} true;
    out_$p388 := $M.35;
    goto corral_source_split_7195;

  corral_source_split_7193:
    assume {:verifier.code 0} true;
    out_$p387 := $M.36;
    goto corral_source_split_7194;

  $bb333:
    assume out_$i386 == 1;
    goto corral_source_split_7193;

  corral_source_split_7111:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb333, $bb334;

  corral_source_split_7110:
    assume {:verifier.code 0} true;
    out_$i386 := $eq.i32(out_$i385, 1);
    goto corral_source_split_7111;

  corral_source_split_7109:
    assume {:verifier.code 0} true;
    out_$i385 := $M.48;
    goto corral_source_split_7110;

  $bb295:
    assume !(out_$i343 == 1);
    goto corral_source_split_7109;

  $bb346:
    assume !(out_$i409 == 1);
    assume {:verifier.code 0} true;
    goto $bb347;

  corral_source_split_7235:
    assume {:verifier.code 0} true;
    goto $bb347;

  corral_source_split_7234:
    assume {:verifier.code 0} true;
    $M.45 := out_$i412;
    call {:si_unique_call 1558} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i412);
    goto corral_source_split_7235;

  corral_source_split_7233:
    assume {:verifier.code 0} true;
    out_$i412 := $sub.i32(out_$i411, 1);
    goto corral_source_split_7234;

  corral_source_split_7232:
    assume {:verifier.code 0} true;
    out_$i411 := $M.45;
    goto corral_source_split_7233;

  corral_source_split_7231:
    assume {:verifier.code 0} true;
    $M.48 := 1;
    call {:si_unique_call 1557} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_7232;

  corral_source_split_7230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1556} out_vslice_dummy_var_166 := ldv_release_2();
    goto corral_source_split_7231;

  $bb345:
    assume out_$i409 == 1;
    goto corral_source_split_7230;

  corral_source_split_7228:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb345, $bb346;

  corral_source_split_7227:
    assume {:verifier.code 0} true;
    out_$i409 := $eq.i32(out_$i408, 2);
    goto corral_source_split_7228;

  $bb344:
    assume {:verifier.code 0} true;
    out_$i408 := $M.48;
    goto corral_source_split_7227;

  $bb343:
    assume !(out_$i404 == 1);
    assume {:verifier.code 0} true;
    goto $bb344;

  corral_source_split_7225:
    assume {:verifier.code 0} true;
    goto $bb344;

  corral_source_split_7224:
    assume {:verifier.code 0} true;
    $M.45 := out_$i407;
    call {:si_unique_call 1555} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i407);
    goto corral_source_split_7225;

  corral_source_split_7223:
    assume {:verifier.code 0} true;
    out_$i407 := $sub.i32(out_$i406, 1);
    goto corral_source_split_7224;

  corral_source_split_7222:
    assume {:verifier.code 0} true;
    out_$i406 := $M.45;
    goto corral_source_split_7223;

  corral_source_split_7221:
    assume {:verifier.code 0} true;
    $M.48 := 1;
    call {:si_unique_call 1554} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_7222;

  corral_source_split_7220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1553} out_vslice_dummy_var_165 := ldv_release_2();
    goto corral_source_split_7221;

  $bb342:
    assume out_$i404 == 1;
    goto corral_source_split_7220;

  corral_source_split_7099:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb342, $bb343;

  corral_source_split_7098:
    assume {:verifier.code 0} true;
    out_$i404 := $eq.i32(out_$i403, 3);
    goto corral_source_split_7099;

  corral_source_split_7097:
    assume {:verifier.code 0} true;
    out_$i403 := $M.48;
    goto corral_source_split_7098;

  $bb289:
    assume out_$i341 == 1;
    goto corral_source_split_7097;

  $bb288:
    assume !(out_$i340 == 1);
    assume {:verifier.code 0} true;
    out_$i341 := $slt.i32(out_$i338, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb289, $bb290;

  $bb349:
    assume !(out_$i414 == 1);
    assume {:verifier.code 0} true;
    goto $bb350;

  corral_source_split_7239:
    assume {:verifier.code 0} true;
    goto $bb350;

  corral_source_split_7238:
    assume {:verifier.code 0} true;
    $M.48 := 3;
    call {:si_unique_call 1560} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_7239;

  corral_source_split_7237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1559} out_vslice_dummy_var_167 := ldv_init_2();
    goto corral_source_split_7238;

  $bb348:
    assume out_$i414 == 1;
    goto corral_source_split_7237;

  corral_source_split_7103:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb348, $bb349;

  corral_source_split_7102:
    assume {:verifier.code 0} true;
    out_$i414 := $eq.i32(out_$i413, 2);
    goto corral_source_split_7103;

  corral_source_split_7101:
    assume {:verifier.code 0} true;
    out_$i413 := $M.48;
    goto corral_source_split_7102;

  $bb291:
    assume out_$i342 == 1;
    goto corral_source_split_7101;

  $bb290:
    assume !(out_$i341 == 1);
    assume {:verifier.code 0} true;
    out_$i342 := $eq.i32(out_$i338, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb291, $bb292;

  corral_source_split_7241:
    assume {:verifier.code 0} true;
    goto $bb352;

  $bb351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1561} ldv_stop();
    goto corral_source_split_7241;

  $bb293:
    assume {:verifier.code 0} true;
    goto $bb351;

  $bb292:
    assume {:verifier.code 0} true;
    assume !(out_$i342 == 1);
    goto $bb293;

  $bb301:
    assume {:verifier.code 0} true;
    assume !(out_$i346 == 1);
    goto $bb293;

  corral_source_split_7243:
    assume {:verifier.code 0} true;
    goto $bb355;

  $bb354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1562} ldv_stop();
    goto corral_source_split_7243;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb354;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i33 == 1);
    goto $bb11;

  $bb15:
    assume {:verifier.code 0} true;
    assume !(out_$i35 == 1);
    goto $bb11;

  $bb219_dummy:
    call {:si_unique_call 1} out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$p62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i69, out_$i70, out_$p71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i78, out_$i79, out_$p80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i87, out_$i88, out_$p89, out_$p90, out_$i92, out_$i93, out_$p94, out_$p95, out_$i97, out_$i98, out_$p99, out_$p100, out_$i102, out_$i103, out_$p104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i111, out_$i112, out_$p113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i120, out_$i121, out_$p122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i129, out_$i130, out_$p131, out_$p132, out_$i134, out_$i135, out_$p136, out_$p137, out_$i139, out_$i140, out_$p141, out_$p142, out_$i144, out_$i145, out_$p146, out_$i147, out_$i148, out_$i149, out_$i150, out_$i151, out_$p152, out_$i154, out_$i155, out_$p156, out_$i157, out_$i159, out_$i160, out_$p161, out_$i162, out_$i164, out_$i165, out_$p166, out_$i167, out_$i169, out_$i170, out_$p171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177, out_$i178, out_$p179, out_$i180, out_$i181, out_$p182, out_$i183, out_$i184, out_$p185, out_$i186, out_$i187, out_$p188, out_$i190, out_$i191, out_$p192, out_$i193, out_$i194, out_$p195, out_$i196, out_$i197, out_$p198, out_$i199, out_$i200, out_$p201, out_$i202, out_$i203, out_$p204, out_$i205, out_$i206, out_$p207, out_$i208, out_$i209, out_$p210, out_$i211, out_$i212, out_$p213, out_$i214, out_$i215, out_$p216, out_$i217, out_$i218, out_$p219, out_$i221, out_$i222, out_$p223, out_$i225, out_$i226, out_$p227, out_$i229, out_$i230, out_$p231, out_$p232, out_$i234, out_$i235, out_$p236, out_$p237, out_$i239, out_$i240, out_$p241, out_$p242, out_$i244, out_$i245, out_$p246, out_$i248, out_$i249, out_$p250, out_$i252, out_$i253, out_$p254, out_$i255, out_$i256, out_$i257, out_$i258, out_$p259, out_$i260, out_$i261, out_$i263, out_$i264, out_$p265, out_$i266, out_$i267, out_$i269, out_$i270, out_$p271, out_$i272, out_$i273, out_$i275, out_$i276, out_$p277, out_$i279, out_$i280, out_$p281, out_$i283, out_$i284, out_$p285, out_$i287, out_$i288, out_$p289, out_$i291, out_$i292, out_$p293, out_$i295, out_$i296, out_$p297, out_$i299, out_$i300, out_$i301, out_$i302, out_$i303, out_$i304, out_$i306, out_$i307, out_$i308, out_$i309, out_$i310, out_$i311, out_$i312, out_$i313, out_$i314, out_$i315, out_$i316, out_$i317, out_$i318, out_$i319, out_$i320, out_$i321, out_$i322, out_$i323, out_$i324, out_$i325, out_$i326, out_$i327, out_$i328, out_$i329, out_$i330, out_$p331, out_$i332, out_$i333, out_$p334, out_$i336, out_$i337, out_$i338, out_$i339, out_$i340, out_$i341, out_$i342, out_$i343, out_$i344, out_$i345, out_$i346, out_$i347, out_$i348, out_$p349, out_$i350, out_$i351, out_$i352, out_$i353, out_$i355, out_$i356, out_$i358, out_$i359, out_$i361, out_$i362, out_$p363, out_$p364, out_$i366, out_$i367, out_$p368, out_$p369, out_$i371, out_$i372, out_$p373, out_$p374, out_$i376, out_$i377, out_$i379, out_$i380, out_$i382, out_$i383, out_$i385, out_$i386, out_$p387, out_$p388, out_$p389, out_$i391, out_$i392, out_$p393, out_$p394, out_$p395, out_$i397, out_$i398, out_$p399, out_$p400, out_$p401, out_$i403, out_$i404, out_$i406, out_$i407, out_$i408, out_$i409, out_$i411, out_$i412, out_$i413, out_$i414, out_vslice_dummy_var_117, out_vslice_dummy_var_118, out_vslice_dummy_var_119, out_vslice_dummy_var_120, out_vslice_dummy_var_121, out_vslice_dummy_var_122, out_vslice_dummy_var_123, out_vslice_dummy_var_124, out_vslice_dummy_var_125, out_vslice_dummy_var_126, out_vslice_dummy_var_127, out_vslice_dummy_var_128, out_vslice_dummy_var_129, out_vslice_dummy_var_130, out_vslice_dummy_var_131, out_vslice_dummy_var_132, out_vslice_dummy_var_133, out_vslice_dummy_var_134, out_vslice_dummy_var_135, out_vslice_dummy_var_136, out_vslice_dummy_var_137, out_vslice_dummy_var_138, out_vslice_dummy_var_139, out_vslice_dummy_var_140, out_vslice_dummy_var_141, out_vslice_dummy_var_142, out_vslice_dummy_var_143, out_vslice_dummy_var_144, out_vslice_dummy_var_145, out_vslice_dummy_var_146, out_vslice_dummy_var_147, out_vslice_dummy_var_148, out_vslice_dummy_var_149, out_vslice_dummy_var_150, out_vslice_dummy_var_151, out_vslice_dummy_var_152, out_vslice_dummy_var_153, out_vslice_dummy_var_154, out_vslice_dummy_var_155, out_vslice_dummy_var_156, out_vslice_dummy_var_157, out_vslice_dummy_var_158, out_vslice_dummy_var_159, out_vslice_dummy_var_160, out_vslice_dummy_var_161, out_vslice_dummy_var_162, out_vslice_dummy_var_163, out_vslice_dummy_var_164, out_vslice_dummy_var_165, out_vslice_dummy_var_166, out_vslice_dummy_var_167 := main_loop_$bb1(in_$p0, in_$p1, in_$p2, in_$p3, in_$i4, in_$p6, in_$i7, in_$p9, in_$p10, in_$p12, in_$p13, in_$i14, in_$i15, in_$p17, in_$i18, in_$p19, in_$p21, in_$p23, in_$p25, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$p62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i69, out_$i70, out_$p71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i78, out_$i79, out_$p80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i87, out_$i88, out_$p89, out_$p90, out_$i92, out_$i93, out_$p94, out_$p95, out_$i97, out_$i98, out_$p99, out_$p100, out_$i102, out_$i103, out_$p104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i111, out_$i112, out_$p113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i120, out_$i121, out_$p122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i129, out_$i130, out_$p131, out_$p132, out_$i134, out_$i135, out_$p136, out_$p137, out_$i139, out_$i140, out_$p141, out_$p142, out_$i144, out_$i145, out_$p146, out_$i147, out_$i148, out_$i149, out_$i150, out_$i151, out_$p152, out_$i154, out_$i155, out_$p156, out_$i157, out_$i159, out_$i160, out_$p161, out_$i162, out_$i164, out_$i165, out_$p166, out_$i167, out_$i169, out_$i170, out_$p171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177, out_$i178, out_$p179, out_$i180, out_$i181, out_$p182, out_$i183, out_$i184, out_$p185, out_$i186, out_$i187, out_$p188, out_$i190, out_$i191, out_$p192, out_$i193, out_$i194, out_$p195, out_$i196, out_$i197, out_$p198, out_$i199, out_$i200, out_$p201, out_$i202, out_$i203, out_$p204, out_$i205, out_$i206, out_$p207, out_$i208, out_$i209, out_$p210, out_$i211, out_$i212, out_$p213, out_$i214, out_$i215, out_$p216, out_$i217, out_$i218, out_$p219, out_$i221, out_$i222, out_$p223, out_$i225, out_$i226, out_$p227, out_$i229, out_$i230, out_$p231, out_$p232, out_$i234, out_$i235, out_$p236, out_$p237, out_$i239, out_$i240, out_$p241, out_$p242, out_$i244, out_$i245, out_$p246, out_$i248, out_$i249, out_$p250, out_$i252, out_$i253, out_$p254, out_$i255, out_$i256, out_$i257, out_$i258, out_$p259, out_$i260, out_$i261, out_$i263, out_$i264, out_$p265, out_$i266, out_$i267, out_$i269, out_$i270, out_$p271, out_$i272, out_$i273, out_$i275, out_$i276, out_$p277, out_$i279, out_$i280, out_$p281, out_$i283, out_$i284, out_$p285, out_$i287, out_$i288, out_$p289, out_$i291, out_$i292, out_$p293, out_$i295, out_$i296, out_$p297, out_$i299, out_$i300, out_$i301, out_$i302, out_$i303, out_$i304, out_$i306, out_$i307, out_$i308, out_$i309, out_$i310, out_$i311, out_$i312, out_$i313, out_$i314, out_$i315, out_$i316, out_$i317, out_$i318, out_$i319, out_$i320, out_$i321, out_$i322, out_$i323, out_$i324, out_$i325, out_$i326, out_$i327, out_$i328, out_$i329, out_$i330, out_$p331, out_$i332, out_$i333, out_$p334, out_$i336, out_$i337, out_$i338, out_$i339, out_$i340, out_$i341, out_$i342, out_$i343, out_$i344, out_$i345, out_$i346, out_$i347, out_$i348, out_$p349, out_$i350, out_$i351, out_$i352, out_$i353, out_$i355, out_$i356, out_$i358, out_$i359, out_$i361, out_$i362, out_$p363, out_$p364, out_$i366, out_$i367, out_$p368, out_$p369, out_$i371, out_$i372, out_$p373, out_$p374, out_$i376, out_$i377, out_$i379, out_$i380, out_$i382, out_$i383, out_$i385, out_$i386, out_$p387, out_$p388, out_$p389, out_$i391, out_$i392, out_$p393, out_$p394, out_$p395, out_$i397, out_$i398, out_$p399, out_$p400, out_$p401, out_$i403, out_$i404, out_$i406, out_$i407, out_$i408, out_$i409, out_$i411, out_$i412, out_$i413, out_$i414, out_vslice_dummy_var_117, out_vslice_dummy_var_118, out_vslice_dummy_var_119, out_vslice_dummy_var_120, out_vslice_dummy_var_121, out_vslice_dummy_var_122, out_vslice_dummy_var_123, out_vslice_dummy_var_124, out_vslice_dummy_var_125, out_vslice_dummy_var_126, out_vslice_dummy_var_127, out_vslice_dummy_var_128, out_vslice_dummy_var_129, out_vslice_dummy_var_130, out_vslice_dummy_var_131, out_vslice_dummy_var_132, out_vslice_dummy_var_133, out_vslice_dummy_var_134, out_vslice_dummy_var_135, out_vslice_dummy_var_136, out_vslice_dummy_var_137, out_vslice_dummy_var_138, out_vslice_dummy_var_139, out_vslice_dummy_var_140, out_vslice_dummy_var_141, out_vslice_dummy_var_142, out_vslice_dummy_var_143, out_vslice_dummy_var_144, out_vslice_dummy_var_145, out_vslice_dummy_var_146, out_vslice_dummy_var_147, out_vslice_dummy_var_148, out_vslice_dummy_var_149, out_vslice_dummy_var_150, out_vslice_dummy_var_151, out_vslice_dummy_var_152, out_vslice_dummy_var_153, out_vslice_dummy_var_154, out_vslice_dummy_var_155, out_vslice_dummy_var_156, out_vslice_dummy_var_157, out_vslice_dummy_var_158, out_vslice_dummy_var_159, out_vslice_dummy_var_160, out_vslice_dummy_var_161, out_vslice_dummy_var_162, out_vslice_dummy_var_163, out_vslice_dummy_var_164, out_vslice_dummy_var_165, out_vslice_dummy_var_166, out_vslice_dummy_var_167);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$i4: i16, in_$p6: ref, in_$i7: i32, in_$p9: ref, in_$p10: ref, in_$p12: ref, in_$p13: ref, in_$i14: i32, in_$i15: i16, in_$p17: ref, in_$i18: i64, in_$p19: ref, in_$p21: ref, in_$p23: ref, in_$p25: ref, in_$i29: i32, in_$i30: i1, in_$i31: i1, in_$i32: i1, in_$i33: i1, in_$i34: i1, in_$i35: i1, in_$i36: i32, in_$i37: i1, in_$i38: i32, in_$i39: i1, in_$i40: i1, in_$i41: i1, in_$i42: i1, in_$i43: i1, in_$i44: i1, in_$i45: i1, in_$i46: i1, in_$i47: i1, in_$i48: i1, in_$i49: i1, in_$i50: i1, in_$i51: i1, in_$i52: i1, in_$i53: i1, in_$i54: i1, in_$i55: i1, in_$i56: i1, in_$i57: i1, in_$i58: i1, in_$i59: i1, in_$i60: i32, in_$i61: i1, in_$p62: ref, in_$i63: i16, in_$i64: i32, in_$i65: i16, in_$i66: i32, in_$i67: i16, in_$i69: i32, in_$i70: i1, in_$p71: ref, in_$i72: i16, in_$i73: i32, in_$i74: i16, in_$i75: i32, in_$i76: i16, in_$i78: i32, in_$i79: i1, in_$p80: ref, in_$i81: i16, in_$i82: i32, in_$i83: i16, in_$i84: i32, in_$i85: i16, in_$i87: i32, in_$i88: i1, in_$p89: ref, in_$p90: ref, in_$i92: i32, in_$i93: i1, in_$p94: ref, in_$p95: ref, in_$i97: i32, in_$i98: i1, in_$p99: ref, in_$p100: ref, in_$i102: i32, in_$i103: i1, in_$p104: ref, in_$i105: i16, in_$i106: i32, in_$i107: i16, in_$i108: i32, in_$i109: i16, in_$i111: i32, in_$i112: i1, in_$p113: ref, in_$i114: i16, in_$i115: i32, in_$i116: i16, in_$i117: i32, in_$i118: i16, in_$i120: i32, in_$i121: i1, in_$p122: ref, in_$i123: i16, in_$i124: i32, in_$i125: i16, in_$i126: i32, in_$i127: i16, in_$i129: i32, in_$i130: i1, in_$p131: ref, in_$p132: ref, in_$i134: i32, in_$i135: i1, in_$p136: ref, in_$p137: ref, in_$i139: i32, in_$i140: i1, in_$p141: ref, in_$p142: ref, in_$i144: i32, in_$i145: i1, in_$p146: ref, in_$i147: i32, in_$i148: i32, in_$i149: i1, in_$i150: i32, in_$i151: i1, in_$p152: ref, in_$i154: i32, in_$i155: i1, in_$p156: ref, in_$i157: i64, in_$i159: i32, in_$i160: i1, in_$p161: ref, in_$i162: i64, in_$i164: i32, in_$i165: i1, in_$p166: ref, in_$i167: i64, in_$i169: i32, in_$i170: i1, in_$p171: ref, in_$i172: i32, in_$i173: i32, in_$i174: i1, in_$i175: i32, in_$i176: i32, in_$i177: i32, in_$i178: i1, in_$p179: ref, in_$i180: i32, in_$i181: i1, in_$p182: ref, in_$i183: i32, in_$i184: i1, in_$p185: ref, in_$i186: i32, in_$i187: i1, in_$p188: ref, in_$i190: i32, in_$i191: i1, in_$p192: ref, in_$i193: i32, in_$i194: i1, in_$p195: ref, in_$i196: i32, in_$i197: i1, in_$p198: ref, in_$i199: i32, in_$i200: i1, in_$p201: ref, in_$i202: i32, in_$i203: i1, in_$p204: ref, in_$i205: i32, in_$i206: i1, in_$p207: ref, in_$i208: i32, in_$i209: i1, in_$p210: ref, in_$i211: i32, in_$i212: i1, in_$p213: ref, in_$i214: i32, in_$i215: i1, in_$p216: ref, in_$i217: i32, in_$i218: i1, in_$p219: ref, in_$i221: i32, in_$i222: i1, in_$p223: ref, in_$i225: i32, in_$i226: i1, in_$p227: ref, in_$i229: i32, in_$i230: i1, in_$p231: ref, in_$p232: ref, in_$i234: i32, in_$i235: i1, in_$p236: ref, in_$p237: ref, in_$i239: i32, in_$i240: i1, in_$p241: ref, in_$p242: ref, in_$i244: i32, in_$i245: i1, in_$p246: ref, in_$i248: i32, in_$i249: i1, in_$p250: ref, in_$i252: i32, in_$i253: i1, in_$p254: ref, in_$i255: i32, in_$i256: i32, in_$i257: i32, in_$i258: i1, in_$p259: ref, in_$i260: i8, in_$i261: i1, in_$i263: i32, in_$i264: i1, in_$p265: ref, in_$i266: i8, in_$i267: i1, in_$i269: i32, in_$i270: i1, in_$p271: ref, in_$i272: i8, in_$i273: i1, in_$i275: i32, in_$i276: i1, in_$p277: ref, in_$i279: i32, in_$i280: i1, in_$p281: ref, in_$i283: i32, in_$i284: i1, in_$p285: ref, in_$i287: i32, in_$i288: i1, in_$p289: ref, in_$i291: i32, in_$i292: i1, in_$p293: ref, in_$i295: i32, in_$i296: i1, in_$p297: ref, in_$i299: i32, in_$i300: i1, in_$i301: i32, in_$i302: i1, in_$i303: i32, in_$i304: i1, in_$i306: i32, in_$i307: i1, in_$i308: i32, in_$i309: i1, in_$i310: i1, in_$i311: i1, in_$i312: i32, in_$i313: i1, in_$i314: i32, in_$i315: i1, in_$i316: i32, in_$i317: i1, in_$i318: i32, in_$i319: i32, in_$i320: i1, in_$i321: i32, in_$i322: i1, in_$i323: i32, in_$i324: i1, in_$i325: i32, in_$i326: i1, in_$i327: i1, in_$i328: i1, in_$i329: i32, in_$i330: i1, in_$p331: ref, in_$i332: i32, in_$i333: i1, in_$p334: ref, in_$i336: i32, in_$i337: i1, in_$i338: i32, in_$i339: i1, in_$i340: i1, in_$i341: i1, in_$i342: i1, in_$i343: i1, in_$i344: i1, in_$i345: i1, in_$i346: i1, in_$i347: i32, in_$i348: i1, in_$p349: ref, in_$i350: i32, in_$i351: i32, in_$i352: i32, in_$i353: i1, in_$i355: i32, in_$i356: i1, in_$i358: i32, in_$i359: i1, in_$i361: i32, in_$i362: i1, in_$p363: ref, in_$p364: ref, in_$i366: i32, in_$i367: i1, in_$p368: ref, in_$p369: ref, in_$i371: i32, in_$i372: i1, in_$p373: ref, in_$p374: ref, in_$i376: i32, in_$i377: i1, in_$i379: i32, in_$i380: i1, in_$i382: i32, in_$i383: i1, in_$i385: i32, in_$i386: i1, in_$p387: ref, in_$p388: ref, in_$p389: ref, in_$i391: i32, in_$i392: i1, in_$p393: ref, in_$p394: ref, in_$p395: ref, in_$i397: i32, in_$i398: i1, in_$p399: ref, in_$p400: ref, in_$p401: ref, in_$i403: i32, in_$i404: i1, in_$i406: i32, in_$i407: i32, in_$i408: i32, in_$i409: i1, in_$i411: i32, in_$i412: i32, in_$i413: i32, in_$i414: i1, in_vslice_dummy_var_117: i32, in_vslice_dummy_var_118: i32, in_vslice_dummy_var_119: i32, in_vslice_dummy_var_120: i32, in_vslice_dummy_var_121: i32, in_vslice_dummy_var_122: i32, in_vslice_dummy_var_123: i32, in_vslice_dummy_var_124: i32, in_vslice_dummy_var_125: i32, in_vslice_dummy_var_126: i32, in_vslice_dummy_var_127: i32, in_vslice_dummy_var_128: i32, in_vslice_dummy_var_129: i32, in_vslice_dummy_var_130: i64, in_vslice_dummy_var_131: i64, in_vslice_dummy_var_132: i64, in_vslice_dummy_var_133: i32, in_vslice_dummy_var_134: i32, in_vslice_dummy_var_135: i32, in_vslice_dummy_var_136: i32, in_vslice_dummy_var_137: i16, in_vslice_dummy_var_138: i16, in_vslice_dummy_var_139: i16, in_vslice_dummy_var_140: i32, in_vslice_dummy_var_141: i32, in_vslice_dummy_var_142: i32, in_vslice_dummy_var_143: i32, in_vslice_dummy_var_144: i32, in_vslice_dummy_var_145: i32, in_vslice_dummy_var_146: i32, in_vslice_dummy_var_147: i32, in_vslice_dummy_var_148: ref, in_vslice_dummy_var_149: ref, in_vslice_dummy_var_150: ref, in_vslice_dummy_var_151: i32, in_vslice_dummy_var_152: i32, in_vslice_dummy_var_153: i32, in_vslice_dummy_var_154: i32, in_vslice_dummy_var_155: i32, in_vslice_dummy_var_156: i32, in_vslice_dummy_var_157: i32, in_vslice_dummy_var_158: i32, in_vslice_dummy_var_159: i32, in_vslice_dummy_var_160: i32, in_vslice_dummy_var_161: i32, in_vslice_dummy_var_162: i32, in_vslice_dummy_var_163: i32, in_vslice_dummy_var_164: i32, in_vslice_dummy_var_165: i32, in_vslice_dummy_var_166: i32, in_vslice_dummy_var_167: i32) returns (out_$i29: i32, out_$i30: i1, out_$i31: i1, out_$i32: i1, out_$i33: i1, out_$i34: i1, out_$i35: i1, out_$i36: i32, out_$i37: i1, out_$i38: i32, out_$i39: i1, out_$i40: i1, out_$i41: i1, out_$i42: i1, out_$i43: i1, out_$i44: i1, out_$i45: i1, out_$i46: i1, out_$i47: i1, out_$i48: i1, out_$i49: i1, out_$i50: i1, out_$i51: i1, out_$i52: i1, out_$i53: i1, out_$i54: i1, out_$i55: i1, out_$i56: i1, out_$i57: i1, out_$i58: i1, out_$i59: i1, out_$i60: i32, out_$i61: i1, out_$p62: ref, out_$i63: i16, out_$i64: i32, out_$i65: i16, out_$i66: i32, out_$i67: i16, out_$i69: i32, out_$i70: i1, out_$p71: ref, out_$i72: i16, out_$i73: i32, out_$i74: i16, out_$i75: i32, out_$i76: i16, out_$i78: i32, out_$i79: i1, out_$p80: ref, out_$i81: i16, out_$i82: i32, out_$i83: i16, out_$i84: i32, out_$i85: i16, out_$i87: i32, out_$i88: i1, out_$p89: ref, out_$p90: ref, out_$i92: i32, out_$i93: i1, out_$p94: ref, out_$p95: ref, out_$i97: i32, out_$i98: i1, out_$p99: ref, out_$p100: ref, out_$i102: i32, out_$i103: i1, out_$p104: ref, out_$i105: i16, out_$i106: i32, out_$i107: i16, out_$i108: i32, out_$i109: i16, out_$i111: i32, out_$i112: i1, out_$p113: ref, out_$i114: i16, out_$i115: i32, out_$i116: i16, out_$i117: i32, out_$i118: i16, out_$i120: i32, out_$i121: i1, out_$p122: ref, out_$i123: i16, out_$i124: i32, out_$i125: i16, out_$i126: i32, out_$i127: i16, out_$i129: i32, out_$i130: i1, out_$p131: ref, out_$p132: ref, out_$i134: i32, out_$i135: i1, out_$p136: ref, out_$p137: ref, out_$i139: i32, out_$i140: i1, out_$p141: ref, out_$p142: ref, out_$i144: i32, out_$i145: i1, out_$p146: ref, out_$i147: i32, out_$i148: i32, out_$i149: i1, out_$i150: i32, out_$i151: i1, out_$p152: ref, out_$i154: i32, out_$i155: i1, out_$p156: ref, out_$i157: i64, out_$i159: i32, out_$i160: i1, out_$p161: ref, out_$i162: i64, out_$i164: i32, out_$i165: i1, out_$p166: ref, out_$i167: i64, out_$i169: i32, out_$i170: i1, out_$p171: ref, out_$i172: i32, out_$i173: i32, out_$i174: i1, out_$i175: i32, out_$i176: i32, out_$i177: i32, out_$i178: i1, out_$p179: ref, out_$i180: i32, out_$i181: i1, out_$p182: ref, out_$i183: i32, out_$i184: i1, out_$p185: ref, out_$i186: i32, out_$i187: i1, out_$p188: ref, out_$i190: i32, out_$i191: i1, out_$p192: ref, out_$i193: i32, out_$i194: i1, out_$p195: ref, out_$i196: i32, out_$i197: i1, out_$p198: ref, out_$i199: i32, out_$i200: i1, out_$p201: ref, out_$i202: i32, out_$i203: i1, out_$p204: ref, out_$i205: i32, out_$i206: i1, out_$p207: ref, out_$i208: i32, out_$i209: i1, out_$p210: ref, out_$i211: i32, out_$i212: i1, out_$p213: ref, out_$i214: i32, out_$i215: i1, out_$p216: ref, out_$i217: i32, out_$i218: i1, out_$p219: ref, out_$i221: i32, out_$i222: i1, out_$p223: ref, out_$i225: i32, out_$i226: i1, out_$p227: ref, out_$i229: i32, out_$i230: i1, out_$p231: ref, out_$p232: ref, out_$i234: i32, out_$i235: i1, out_$p236: ref, out_$p237: ref, out_$i239: i32, out_$i240: i1, out_$p241: ref, out_$p242: ref, out_$i244: i32, out_$i245: i1, out_$p246: ref, out_$i248: i32, out_$i249: i1, out_$p250: ref, out_$i252: i32, out_$i253: i1, out_$p254: ref, out_$i255: i32, out_$i256: i32, out_$i257: i32, out_$i258: i1, out_$p259: ref, out_$i260: i8, out_$i261: i1, out_$i263: i32, out_$i264: i1, out_$p265: ref, out_$i266: i8, out_$i267: i1, out_$i269: i32, out_$i270: i1, out_$p271: ref, out_$i272: i8, out_$i273: i1, out_$i275: i32, out_$i276: i1, out_$p277: ref, out_$i279: i32, out_$i280: i1, out_$p281: ref, out_$i283: i32, out_$i284: i1, out_$p285: ref, out_$i287: i32, out_$i288: i1, out_$p289: ref, out_$i291: i32, out_$i292: i1, out_$p293: ref, out_$i295: i32, out_$i296: i1, out_$p297: ref, out_$i299: i32, out_$i300: i1, out_$i301: i32, out_$i302: i1, out_$i303: i32, out_$i304: i1, out_$i306: i32, out_$i307: i1, out_$i308: i32, out_$i309: i1, out_$i310: i1, out_$i311: i1, out_$i312: i32, out_$i313: i1, out_$i314: i32, out_$i315: i1, out_$i316: i32, out_$i317: i1, out_$i318: i32, out_$i319: i32, out_$i320: i1, out_$i321: i32, out_$i322: i1, out_$i323: i32, out_$i324: i1, out_$i325: i32, out_$i326: i1, out_$i327: i1, out_$i328: i1, out_$i329: i32, out_$i330: i1, out_$p331: ref, out_$i332: i32, out_$i333: i1, out_$p334: ref, out_$i336: i32, out_$i337: i1, out_$i338: i32, out_$i339: i1, out_$i340: i1, out_$i341: i1, out_$i342: i1, out_$i343: i1, out_$i344: i1, out_$i345: i1, out_$i346: i1, out_$i347: i32, out_$i348: i1, out_$p349: ref, out_$i350: i32, out_$i351: i32, out_$i352: i32, out_$i353: i1, out_$i355: i32, out_$i356: i1, out_$i358: i32, out_$i359: i1, out_$i361: i32, out_$i362: i1, out_$p363: ref, out_$p364: ref, out_$i366: i32, out_$i367: i1, out_$p368: ref, out_$p369: ref, out_$i371: i32, out_$i372: i1, out_$p373: ref, out_$p374: ref, out_$i376: i32, out_$i377: i1, out_$i379: i32, out_$i380: i1, out_$i382: i32, out_$i383: i1, out_$i385: i32, out_$i386: i1, out_$p387: ref, out_$p388: ref, out_$p389: ref, out_$i391: i32, out_$i392: i1, out_$p393: ref, out_$p394: ref, out_$p395: ref, out_$i397: i32, out_$i398: i1, out_$p399: ref, out_$p400: ref, out_$p401: ref, out_$i403: i32, out_$i404: i1, out_$i406: i32, out_$i407: i32, out_$i408: i32, out_$i409: i1, out_$i411: i32, out_$i412: i32, out_$i413: i32, out_$i414: i1, out_vslice_dummy_var_117: i32, out_vslice_dummy_var_118: i32, out_vslice_dummy_var_119: i32, out_vslice_dummy_var_120: i32, out_vslice_dummy_var_121: i32, out_vslice_dummy_var_122: i32, out_vslice_dummy_var_123: i32, out_vslice_dummy_var_124: i32, out_vslice_dummy_var_125: i32, out_vslice_dummy_var_126: i32, out_vslice_dummy_var_127: i32, out_vslice_dummy_var_128: i32, out_vslice_dummy_var_129: i32, out_vslice_dummy_var_130: i64, out_vslice_dummy_var_131: i64, out_vslice_dummy_var_132: i64, out_vslice_dummy_var_133: i32, out_vslice_dummy_var_134: i32, out_vslice_dummy_var_135: i32, out_vslice_dummy_var_136: i32, out_vslice_dummy_var_137: i16, out_vslice_dummy_var_138: i16, out_vslice_dummy_var_139: i16, out_vslice_dummy_var_140: i32, out_vslice_dummy_var_141: i32, out_vslice_dummy_var_142: i32, out_vslice_dummy_var_143: i32, out_vslice_dummy_var_144: i32, out_vslice_dummy_var_145: i32, out_vslice_dummy_var_146: i32, out_vslice_dummy_var_147: i32, out_vslice_dummy_var_148: ref, out_vslice_dummy_var_149: ref, out_vslice_dummy_var_150: ref, out_vslice_dummy_var_151: i32, out_vslice_dummy_var_152: i32, out_vslice_dummy_var_153: i32, out_vslice_dummy_var_154: i32, out_vslice_dummy_var_155: i32, out_vslice_dummy_var_156: i32, out_vslice_dummy_var_157: i32, out_vslice_dummy_var_158: i32, out_vslice_dummy_var_159: i32, out_vslice_dummy_var_160: i32, out_vslice_dummy_var_161: i32, out_vslice_dummy_var_162: i32, out_vslice_dummy_var_163: i32, out_vslice_dummy_var_164: i32, out_vslice_dummy_var_165: i32, out_vslice_dummy_var_166: i32, out_vslice_dummy_var_167: i32);
  modifies $M.43, $M.27, $M.28, $CurrAddr, $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.16, $M.25, $M.26, $M.31, $M.32, $M.23, $M.24, $M.4, $M.3, $M.49, $M.29, $M.30, $M.45, $M.50, $M.21, $M.22, $M.44, $M.34, $M.38, $M.47, $M.35, $M.36, $M.37, $M.48, $M.46, $M.52, $M.5, $M.12;



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();


