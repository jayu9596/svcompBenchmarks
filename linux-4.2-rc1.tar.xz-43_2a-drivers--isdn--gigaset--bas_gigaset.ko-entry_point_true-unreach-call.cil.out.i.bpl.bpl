var $M.0: [ref]i8;

var $M.1: ref;

var $M.2: i32;

var $M.3: [ref]i8;

var $M.4: i32;

var $M.5: [ref]i32;

var $M.7: i32;

var $M.8: i32;

var $M.9: ref;

var $M.10: i32;

var $M.11: ref;

var $M.12: i32;

var $M.13: ref;

var $M.14: i32;

var $M.15: ref;

var $M.16: i32;

var $M.17: ref;

var $M.18: i32;

var $M.19: ref;

var $M.20: i32;

var $M.21: ref;

var $M.22: i32;

var $M.23: ref;

var $M.24: [ref]i8;

var $M.26: [ref]i8;

var $M.34: [ref]i16;

var $M.35: [ref]i8;

var $M.36: i32;

var $M.37: ref;

var $M.38: i32;

var $M.39: ref;

var $M.40: i32;

var $M.41: ref;

var $M.42: i32;

var $M.43: ref;

var $M.45: [ref]i64;

var $M.46: ref;

var $M.47: ref;

var $M.48: [ref]i64;

var $M.49: i32;

var $M.50: ref;

var $M.51: i32;

var $M.52: ref;

var $M.53: i32;

var $M.54: ref;

var $M.55: i32;

var $M.56: ref;

var $M.57: i32;

var $M.58: i32;

var $M.59: i32;

var $M.60: i32;

var $M.61: ref;

var $M.62: ref;

var $M.63: ref;

var $M.64: ref;

var $M.65: [ref]i64;

var $M.66: ref;

var $M.67: i32;

var $M.68: i32;

var $M.69: i32;

var $M.70: i32;

var $M.71: i32;

var $M.72: i32;

var $M.73: i32;

var $M.74: i32;

var $M.75: i32;

var $M.76: i32;

var $M.77: i32;

var $M.78: i32;

var $M.79: i32;

var $M.80: i32;

var $M.81: [ref]i16;

var $M.82: [ref]i16;

var $M.83: [ref]i16;

var $M.84: [ref]i16;

var $M.85: [ref]i16;

var $M.86: [ref]i8;

var $M.87: [ref]i8;

var $M.88: [ref]i8;

var $M.89: [ref]i8;

var $M.90: [ref]i8;

var $M.91: [ref]i8;

var $M.92: [ref]i8;

var $M.93: [ref]i64;

var $M.110: [ref]i8;

var $M.111: [ref]i8;

var $M.112: [ref]i8;

var $M.113: [ref]i8;

var $M.114: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 638289);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32824));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 1028);

const ldv_work_1_0: ref;

axiom ldv_work_1_0 == $sub.ref(0, 2056);

const ldv_work_struct_1_0: ref;

axiom ldv_work_struct_1_0 == $sub.ref(0, 3088);

const ldv_work_1_1: ref;

axiom ldv_work_1_1 == $sub.ref(0, 4116);

const ldv_work_struct_1_1: ref;

axiom ldv_work_struct_1_1 == $sub.ref(0, 5148);

const ldv_work_1_2: ref;

axiom ldv_work_1_2 == $sub.ref(0, 6176);

const ldv_work_struct_1_2: ref;

axiom ldv_work_struct_1_2 == $sub.ref(0, 7208);

const ldv_work_1_3: ref;

axiom ldv_work_1_3 == $sub.ref(0, 8236);

const ldv_work_struct_1_3: ref;

axiom ldv_work_struct_1_3 == $sub.ref(0, 9268);

const ldv_timer_2_0: ref;

axiom ldv_timer_2_0 == $sub.ref(0, 10296);

const ldv_timer_list_2_0: ref;

axiom ldv_timer_list_2_0 == $sub.ref(0, 11328);

const ldv_timer_2_1: ref;

axiom ldv_timer_2_1 == $sub.ref(0, 12356);

const ldv_timer_list_2_1: ref;

axiom ldv_timer_list_2_1 == $sub.ref(0, 13388);

const ldv_timer_2_2: ref;

axiom ldv_timer_2_2 == $sub.ref(0, 14416);

const ldv_timer_list_2_2: ref;

axiom ldv_timer_list_2_2 == $sub.ref(0, 15448);

const ldv_timer_2_3: ref;

axiom ldv_timer_2_3 == $sub.ref(0, 16476);

const ldv_timer_list_2_3: ref;

axiom ldv_timer_list_2_3 == $sub.ref(0, 17508);

const gigops_group1: ref;

axiom gigops_group1 == $sub.ref(0, 18540);

const gigops_group0: ref;

axiom gigops_group0 == $sub.ref(0, 19572);

const ldv_timer_5_0: ref;

axiom ldv_timer_5_0 == $sub.ref(0, 20600);

const ldv_timer_list_5_0: ref;

axiom ldv_timer_list_5_0 == $sub.ref(0, 21632);

const ldv_timer_5_1: ref;

axiom ldv_timer_5_1 == $sub.ref(0, 22660);

const ldv_timer_list_5_1: ref;

axiom ldv_timer_list_5_1 == $sub.ref(0, 23692);

const ldv_timer_5_2: ref;

axiom ldv_timer_5_2 == $sub.ref(0, 24720);

const ldv_timer_list_5_2: ref;

axiom ldv_timer_list_5_2 == $sub.ref(0, 25752);

const ldv_timer_5_3: ref;

axiom ldv_timer_5_3 == $sub.ref(0, 26780);

const ldv_timer_list_5_3: ref;

axiom ldv_timer_list_5_3 == $sub.ref(0, 27812);

const ldv_timer_3_0: ref;

axiom ldv_timer_3_0 == $sub.ref(0, 28840);

const ldv_timer_list_3_0: ref;

axiom ldv_timer_list_3_0 == $sub.ref(0, 29872);

const ldv_timer_3_1: ref;

axiom ldv_timer_3_1 == $sub.ref(0, 30900);

const ldv_timer_list_3_1: ref;

axiom ldv_timer_list_3_1 == $sub.ref(0, 31932);

const ldv_timer_3_2: ref;

axiom ldv_timer_3_2 == $sub.ref(0, 32960);

const ldv_timer_list_3_2: ref;

axiom ldv_timer_list_3_2 == $sub.ref(0, 33992);

const ldv_timer_3_3: ref;

axiom ldv_timer_3_3 == $sub.ref(0, 35020);

const ldv_timer_list_3_3: ref;

axiom ldv_timer_list_3_3 == $sub.ref(0, 36052);

const ldv_timer_list_4_0: ref;

axiom ldv_timer_list_4_0 == $sub.ref(0, 37084);

const ldv_timer_4_0: ref;

axiom ldv_timer_4_0 == $sub.ref(0, 38112);

const ldv_timer_list_4_1: ref;

axiom ldv_timer_list_4_1 == $sub.ref(0, 39144);

const ldv_timer_4_1: ref;

axiom ldv_timer_4_1 == $sub.ref(0, 40172);

const ldv_timer_list_4_2: ref;

axiom ldv_timer_list_4_2 == $sub.ref(0, 41204);

const ldv_timer_4_2: ref;

axiom ldv_timer_4_2 == $sub.ref(0, 42232);

const ldv_timer_list_4_3: ref;

axiom ldv_timer_list_4_3 == $sub.ref(0, 43264);

const ldv_timer_4_3: ref;

axiom ldv_timer_4_3 == $sub.ref(0, 44292);

const gigaset_usb_driver_group1: ref;

axiom gigaset_usb_driver_group1 == $sub.ref(0, 45324);

const ldv_state_variable_6: ref;

axiom ldv_state_variable_6 == $sub.ref(0, 46352);

const ldv_state_variable_3: ref;

axiom ldv_state_variable_3 == $sub.ref(0, 47380);

const ldv_state_variable_7: ref;

axiom ldv_state_variable_7 == $sub.ref(0, 48408);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 49436);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 50464);

const ldv_state_variable_4: ref;

axiom ldv_state_variable_4 == $sub.ref(0, 51492);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 52520);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 53548);

const ldv_state_variable_5: ref;

axiom ldv_state_variable_5 == $sub.ref(0, 54576);

const ldv_retval_2: ref;

axiom ldv_retval_2 == $sub.ref(0, 55604);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 56632);

const usb_counter: ref;

axiom usb_counter == $sub.ref(0, 57660);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 58688);

const ldv_retval_3: ref;

axiom ldv_retval_3 == $sub.ref(0, 59716);

const ldv_spin: ref;

axiom ldv_spin == $sub.ref(0, 60744);

const {:count 5} __mod_usb__gigaset_table_device_table: ref;

axiom __mod_usb__gigaset_table_device_table == $sub.ref(0, 61928);

const {:count 256} bitcounts: ref;

axiom bitcounts == $sub.ref(0, 63208);

const {:count 1280} stufftab: ref;

axiom stufftab == $sub.ref(0, 66792);

const gigops: ref;

axiom gigops == $sub.ref(0, 67944);

const {:count 5} gigaset_table: ref;

axiom gigaset_table == $sub.ref(0, 69128);

const gigaset_usb_driver: ref;

axiom gigaset_usb_driver == $sub.ref(0, 70456);

const startmode: ref;

axiom startmode == $sub.ref(0, 71484);

const cidmode: ref;

axiom cidmode == $sub.ref(0, 72512);

const driver: ref;

axiom driver == $sub.ref(0, 73544);

const {:count 12} .str.172: ref;

axiom .str.172 == $sub.ref(0, 74580);

const {:count 38} .str.34: ref;

axiom .str.34 == $sub.ref(0, 75642);

const gigaset_debuglevel: ref;

axiom gigaset_debuglevel == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 31} .str.200: ref;

axiom .str.200 == $sub.ref(0, 76697);

const {:count 8} .str.16: ref;

axiom .str.16 == $sub.ref(0, 77729);

const {:count 14} .str.17: ref;

axiom .str.17 == $sub.ref(0, 78767);

const {:count 19} .str.18: ref;

axiom .str.18 == $sub.ref(0, 79810);

const {:count 21} .str.19: ref;

axiom .str.19 == $sub.ref(0, 80855);

const {:count 23} .str.20: ref;

axiom .str.20 == $sub.ref(0, 81902);

const {:count 17} .str.21: ref;

axiom .str.21 == $sub.ref(0, 82943);

const {:count 44} .str.22: ref;

axiom .str.22 == $sub.ref(0, 84011);

const {:count 31} .str.23: ref;

axiom .str.23 == $sub.ref(0, 85066);

const {:count 17} .str.24: ref;

axiom .str.24 == $sub.ref(0, 86107);

const {:count 20} .str.25: ref;

axiom .str.25 == $sub.ref(0, 87151);

const {:count 31} .str.26: ref;

axiom .str.26 == $sub.ref(0, 88206);

const {:count 17} .str.27: ref;

axiom .str.27 == $sub.ref(0, 89247);

const {:count 16} .str.28: ref;

axiom .str.28 == $sub.ref(0, 90287);

const {:count 17} .str.29: ref;

axiom .str.29 == $sub.ref(0, 91328);

const {:count 17} .str.30: ref;

axiom .str.30 == $sub.ref(0, 92369);

const {:count 33} .str.190: ref;

axiom .str.190 == $sub.ref(0, 93426);

const {:count 213} .str.191: ref;

axiom .str.191 == $sub.ref(0, 94663);

const {:count 42} .str.192: ref;

axiom .str.192 == $sub.ref(0, 95729);

const {:count 17} .str.193: ref;

axiom .str.193 == $sub.ref(0, 96770);

const {:count 19} .str.194: ref;

axiom .str.194 == $sub.ref(0, 97813);

const {:count 19} .str.195: ref;

axiom .str.195 == $sub.ref(0, 98856);

const {:count 21} .str.196: ref;

axiom .str.196 == $sub.ref(0, 99901);

const {:count 21} .str.197: ref;

axiom .str.197 == $sub.ref(0, 100946);

const {:count 34} .str.198: ref;

axiom .str.198 == $sub.ref(0, 102004);

const {:count 32} .str.199: ref;

axiom .str.199 == $sub.ref(0, 103060);

const {:count 36} .str.46: ref;

axiom .str.46 == $sub.ref(0, 104120);

const {:count 67} .str.47: ref;

axiom .str.47 == $sub.ref(0, 105211);

const {:count 37} .str.48: ref;

axiom .str.48 == $sub.ref(0, 106272);

const {:count 45} .str.49: ref;

axiom .str.49 == $sub.ref(0, 107341);

const jiffies: ref;

axiom jiffies == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 22} .str.50: ref;

axiom .str.50 == $sub.ref(0, 108387);

const {:count 20} .str.51: ref;

axiom .str.51 == $sub.ref(0, 109431);

const {:count 35} .str.52: ref;

axiom .str.52 == $sub.ref(0, 110490);

const {:count 38} .str.53: ref;

axiom .str.53 == $sub.ref(0, 111552);

const {:count 39} .str.54: ref;

axiom .str.54 == $sub.ref(0, 112615);

const {:count 16} .str.55: ref;

axiom .str.55 == $sub.ref(0, 113655);

const {:count 18} .str.56: ref;

axiom .str.56 == $sub.ref(0, 114697);

const {:count 46} .str.57: ref;

axiom .str.57 == $sub.ref(0, 115767);

const {:count 44} .str.58: ref;

axiom .str.58 == $sub.ref(0, 116835);

const {:count 21} .str.59: ref;

axiom .str.59 == $sub.ref(0, 117880);

const {:count 18} .str.60: ref;

axiom .str.60 == $sub.ref(0, 118922);

const {:count 20} .str.61: ref;

axiom .str.61 == $sub.ref(0, 119966);

const {:count 16} .str.62: ref;

axiom .str.62 == $sub.ref(0, 121006);

const {:count 13} .str.63: ref;

axiom .str.63 == $sub.ref(0, 122043);

const {:count 15} .str.64: ref;

axiom .str.64 == $sub.ref(0, 123082);

const {:count 22} .str.65: ref;

axiom .str.65 == $sub.ref(0, 124128);

const {:count 12} .str.66: ref;

axiom .str.66 == $sub.ref(0, 125164);

const {:count 17} .str.67: ref;

axiom .str.67 == $sub.ref(0, 126205);

const {:count 18} .str.68: ref;

axiom .str.68 == $sub.ref(0, 127247);

const {:count 28} .str.189: ref;

axiom .str.189 == $sub.ref(0, 128299);

const {:count 32} .str.187: ref;

axiom .str.187 == $sub.ref(0, 129355);

const {:count 9} .str.188: ref;

axiom .str.188 == $sub.ref(0, 130388);

const {:count 76} .str.166: ref;

axiom .str.166 == $sub.ref(0, 131488);

const {:count 14} .str.167: ref;

axiom .str.167 == $sub.ref(0, 132526);

const {:count 65} .str.168: ref;

axiom .str.168 == $sub.ref(0, 133615);

const {:count 64} .str.169: ref;

axiom .str.169 == $sub.ref(0, 134703);

const {:count 27} .str.170: ref;

axiom .str.170 == $sub.ref(0, 135754);

const {:count 50} .str.171: ref;

axiom .str.171 == $sub.ref(0, 136828);

const {:count 36} .str.173: ref;

axiom .str.173 == $sub.ref(0, 137888);

const {:count 25} .str.174: ref;

axiom .str.174 == $sub.ref(0, 138937);

const {:count 18} .str.175: ref;

axiom .str.175 == $sub.ref(0, 139979);

const {:count 20} .str.176: ref;

axiom .str.176 == $sub.ref(0, 141023);

const {:count 40} .str.177: ref;

axiom .str.177 == $sub.ref(0, 142087);

const {:count 55} .str.178: ref;

axiom .str.178 == $sub.ref(0, 143166);

const {:count 63} .str.179: ref;

axiom .str.179 == $sub.ref(0, 144253);

const {:count 44} .str.180: ref;

axiom .str.180 == $sub.ref(0, 145321);

const {:count 63} .str.181: ref;

axiom .str.181 == $sub.ref(0, 146408);

const {:count 40} .str.182: ref;

axiom .str.182 == $sub.ref(0, 147472);

const {:count 33} .str.183: ref;

axiom .str.183 == $sub.ref(0, 148529);

const {:count 22} .str.184: ref;

axiom .str.184 == $sub.ref(0, 149575);

const {:count 30} .str.185: ref;

axiom .str.185 == $sub.ref(0, 150629);

const {:count 44} .str.186: ref;

axiom .str.186 == $sub.ref(0, 151697);

const {:count 40} .str.45: ref;

axiom .str.45 == $sub.ref(0, 152761);

const {:count 47} .str.73: ref;

axiom .str.73 == $sub.ref(0, 153832);

const {:count 46} .str.74: ref;

axiom .str.74 == $sub.ref(0, 154902);

const {:count 54} .str.75: ref;

axiom .str.75 == $sub.ref(0, 155980);

const {:count 40} .str.76: ref;

axiom .str.76 == $sub.ref(0, 157044);

const {:count 46} .str.77: ref;

axiom .str.77 == $sub.ref(0, 158114);

const {:count 23} .str.78: ref;

axiom .str.78 == $sub.ref(0, 159161);

const {:count 19} .str.79: ref;

axiom .str.79 == $sub.ref(0, 160204);

const {:count 32} .str.80: ref;

axiom .str.80 == $sub.ref(0, 161260);

const {:count 44} .str.81: ref;

axiom .str.81 == $sub.ref(0, 162328);

const {:count 59} .str.163: ref;

axiom .str.163 == $sub.ref(0, 163411);

const {:count 9} .str.164: ref;

axiom .str.164 == $sub.ref(0, 164444);

const {:count 60} .str.165: ref;

axiom .str.165 == $sub.ref(0, 165528);

const {:count 26} .str.83: ref;

axiom .str.83 == $sub.ref(0, 166578);

const {:count 35} .str.84: ref;

axiom .str.84 == $sub.ref(0, 167637);

const {:count 48} .str.86: ref;

axiom .str.86 == $sub.ref(0, 168709);

const {:count 47} .str.87: ref;

axiom .str.87 == $sub.ref(0, 169780);

const {:count 41} .str.88: ref;

axiom .str.88 == $sub.ref(0, 170845);

const {:count 53} .str.89: ref;

axiom .str.89 == $sub.ref(0, 171922);

const {:count 23} .str.90: ref;

axiom .str.90 == $sub.ref(0, 172969);

const {:count 47} .str.91: ref;

axiom .str.91 == $sub.ref(0, 174040);

const {:count 52} .str.92: ref;

axiom .str.92 == $sub.ref(0, 175116);

const {:count 47} .str.93: ref;

axiom .str.93 == $sub.ref(0, 176187);

const {:count 29} .str.94: ref;

axiom .str.94 == $sub.ref(0, 177240);

const {:count 53} .str.85: ref;

axiom .str.85 == $sub.ref(0, 178317);

const system_wq: ref;

axiom system_wq == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const {:count 38} .str.8: ref;

axiom .str.8 == $sub.ref(0, 179379);

const {:count 35} .str.9: ref;

axiom .str.9 == $sub.ref(0, 180438);

const {:count 18} .str.10: ref;

axiom .str.10 == $sub.ref(0, 181480);

const {:count 34} .str.11: ref;

axiom .str.11 == $sub.ref(0, 182538);

const {:count 25} .str.226: ref;

axiom .str.226 == $sub.ref(0, 183587);

const {:count 39} .str.12: ref;

axiom .str.12 == $sub.ref(0, 184650);

const {:count 22} .str.13: ref;

axiom .str.13 == $sub.ref(0, 185696);

const {:count 29} .str.105: ref;

axiom .str.105 == $sub.ref(0, 186749);

const {:count 21} .str.148: ref;

axiom .str.148 == $sub.ref(0, 187794);

const {:count 16} .str.149: ref;

axiom .str.149 == $sub.ref(0, 188834);

const {:count 18} .str.150: ref;

axiom .str.150 == $sub.ref(0, 189876);

const {:count 30} .str.14: ref;

axiom .str.14 == $sub.ref(0, 190930);

const {:count 23} .str.15: ref;

axiom .str.15 == $sub.ref(0, 191977);

const {:count 42} .str.31: ref;

axiom .str.31 == $sub.ref(0, 193043);

const {:count 28} .str.32: ref;

axiom .str.32 == $sub.ref(0, 194095);

const {:count 16} .str.33: ref;

axiom .str.33 == $sub.ref(0, 195135);

const {:count 42} .str.69: ref;

axiom .str.69 == $sub.ref(0, 196201);

const {:count 15} .str.70: ref;

axiom .str.70 == $sub.ref(0, 197240);

const {:count 49} .str.71: ref;

axiom .str.71 == $sub.ref(0, 198313);

const {:count 37} .str.72: ref;

axiom .str.72 == $sub.ref(0, 199374);

const {:count 42} .str.82: ref;

axiom .str.82 == $sub.ref(0, 200440);

const {:count 38} .str.35: ref;

axiom .str.35 == $sub.ref(0, 201502);

const {:count 12} .str.36: ref;

axiom .str.36 == $sub.ref(0, 202538);

const {:count 28} .str.37: ref;

axiom .str.37 == $sub.ref(0, 203590);

const {:count 27} .str.38: ref;

axiom .str.38 == $sub.ref(0, 204641);

const {:count 27} .str.39: ref;

axiom .str.39 == $sub.ref(0, 205692);

const {:count 28} .str.40: ref;

axiom .str.40 == $sub.ref(0, 206744);

const {:count 27} .str.41: ref;

axiom .str.41 == $sub.ref(0, 207795);

const {:count 27} .str.42: ref;

axiom .str.42 == $sub.ref(0, 208846);

const {:count 52} .str.43: ref;

axiom .str.43 == $sub.ref(0, 209922);

const {:count 36} .str.44: ref;

axiom .str.44 == $sub.ref(0, 210982);

const {:count 27} .str.103: ref;

axiom .str.103 == $sub.ref(0, 212033);

const {:count 26} .str.104: ref;

axiom .str.104 == $sub.ref(0, 213083);

const {:count 37} .str.99: ref;

axiom .str.99 == $sub.ref(0, 214144);

const {:count 18} .str.100: ref;

axiom .str.100 == $sub.ref(0, 215186);

const {:count 55} .str.121: ref;

axiom .str.121 == $sub.ref(0, 216265);

const {:count 68} .str.122: ref;

axiom .str.122 == $sub.ref(0, 217357);

const {:count 17} .str.123: ref;

axiom .str.123 == $sub.ref(0, 218398);

const {:count 43} .str.110: ref;

axiom .str.110 == $sub.ref(0, 219465);

const {:count 20} .str.124: ref;

axiom .str.124 == $sub.ref(0, 220509);

const {:count 15} .str.125: ref;

axiom .str.125 == $sub.ref(0, 221548);

const {:count 44} .str.126: ref;

axiom .str.126 == $sub.ref(0, 222616);

const {:count 29} .str.127: ref;

axiom .str.127 == $sub.ref(0, 223669);

const {:count 23} .str.128: ref;

axiom .str.128 == $sub.ref(0, 224716);

const {:count 30} .str.129: ref;

axiom .str.129 == $sub.ref(0, 225770);

const {:count 22} .str.130: ref;

axiom .str.130 == $sub.ref(0, 226816);

const {:count 34} .str.131: ref;

axiom .str.131 == $sub.ref(0, 227874);

const {:count 38} .str.132: ref;

axiom .str.132 == $sub.ref(0, 228936);

const {:count 19} .str.133: ref;

axiom .str.133 == $sub.ref(0, 229979);

const {:count 34} .str.134: ref;

axiom .str.134 == $sub.ref(0, 231037);

const {:count 3} .str.136: ref;

axiom .str.136 == $sub.ref(0, 232064);

const {:count 4} .str.137: ref;

axiom .str.137 == $sub.ref(0, 233092);

const {:count 89} .str.135: ref;

axiom .str.135 == $sub.ref(0, 234205);

const {:count 86} .str.138: ref;

axiom .str.138 == $sub.ref(0, 235315);

const {:count 84} .str.139: ref;

axiom .str.139 == $sub.ref(0, 236423);

const {:count 71} .str.140: ref;

axiom .str.140 == $sub.ref(0, 237518);

const {:count 71} .str.141: ref;

axiom .str.141 == $sub.ref(0, 238613);

const {:count 18} .str.142: ref;

axiom .str.142 == $sub.ref(0, 239655);

const {:count 5} .str.143: ref;

axiom .str.143 == $sub.ref(0, 240684);

const {:count 4} .str.144: ref;

axiom .str.144 == $sub.ref(0, 241712);

const {:count 5} .str.145: ref;

axiom .str.145 == $sub.ref(0, 242741);

const {:count 5} .str.146: ref;

axiom .str.146 == $sub.ref(0, 243770);

const {:count 2} .str.147: ref;

axiom .str.147 == $sub.ref(0, 244796);

const {:count 9} .str.225: ref;

axiom .str.225 == $sub.ref(0, 245829);

const {:count 21} .str.212: ref;

axiom .str.212 == $sub.ref(0, 246874);

const hex_asc: ref;

axiom hex_asc == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

const byte_rev_table: ref;

axiom byte_rev_table == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32808));

const {:count 24} .str.218: ref;

axiom .str.218 == $sub.ref(0, 247922);

const {:count 28} .str.220: ref;

axiom .str.220 == $sub.ref(0, 248974);

const {:count 10} .str.221: ref;

axiom .str.221 == $sub.ref(0, 250008);

const {:count 34} .str.222: ref;

axiom .str.222 == $sub.ref(0, 251066);

const {:count 19} .str.223: ref;

axiom .str.223 == $sub.ref(0, 252109);

const {:count 42} .str.224: ref;

axiom .str.224 == $sub.ref(0, 253175);

const {:count 23} .str.217: ref;

axiom .str.217 == $sub.ref(0, 254222);

const {:count 33} .str.219: ref;

axiom .str.219 == $sub.ref(0, 255279);

const {:count 37} .str.216: ref;

axiom .str.216 == $sub.ref(0, 256340);

const crc_ccitt_table: ref;

axiom crc_ccitt_table == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32816));

const {:count 31} .str.106: ref;

axiom .str.106 == $sub.ref(0, 257395);

const {:count 18} .str.107: ref;

axiom .str.107 == $sub.ref(0, 258437);

const {:count 21} .str.108: ref;

axiom .str.108 == $sub.ref(0, 259482);

const {:count 23} .str.109: ref;

axiom .str.109 == $sub.ref(0, 260529);

const {:count 33} .str.111: ref;

axiom .str.111 == $sub.ref(0, 261586);

const {:count 21} .str.112: ref;

axiom .str.112 == $sub.ref(0, 262631);

const {:count 16} .str.113: ref;

axiom .str.113 == $sub.ref(0, 263671);

const {:count 41} .str.114: ref;

axiom .str.114 == $sub.ref(0, 264736);

const {:count 39} .str.5: ref;

axiom .str.5 == $sub.ref(0, 265799);

const {:count 24} .str.6: ref;

axiom .str.6 == $sub.ref(0, 266847);

const {:count 40} .str.7: ref;

axiom .str.7 == $sub.ref(0, 267911);

const {:count 34} .str.214: ref;

axiom .str.214 == $sub.ref(0, 268969);

const {:count 28} .str.215: ref;

axiom .str.215 == $sub.ref(0, 270021);

const {:count 9} .str.211: ref;

axiom .str.211 == $sub.ref(0, 271054);

const {:count 56} .str.206: ref;

axiom .str.206 == $sub.ref(0, 272134);

const {:count 19} .str.207: ref;

axiom .str.207 == $sub.ref(0, 273177);

const {:count 76} .str.208: ref;

axiom .str.208 == $sub.ref(0, 274277);

const {:count 44} .str.209: ref;

axiom .str.209 == $sub.ref(0, 275345);

const {:count 16} .str.210: ref;

axiom .str.210 == $sub.ref(0, 276385);

const {:count 35} .str.213: ref;

axiom .str.213 == $sub.ref(0, 277444);

const {:count 32} .str.115: ref;

axiom .str.115 == $sub.ref(0, 278500);

const {:count 21} .str.116: ref;

axiom .str.116 == $sub.ref(0, 279545);

const {:count 43} .str.117: ref;

axiom .str.117 == $sub.ref(0, 280612);

const {:count 33} .str.118: ref;

axiom .str.118 == $sub.ref(0, 281669);

const {:count 32} .str.119: ref;

axiom .str.119 == $sub.ref(0, 282725);

const {:count 37} .str.120: ref;

axiom .str.120 == $sub.ref(0, 283786);

const .str: ref;

axiom .str == $sub.ref(0, 284855);

const {:count 25} .str.1: ref;

axiom .str.1 == $sub.ref(0, 285904);

const {:count 31} .str.2: ref;

axiom .str.2 == $sub.ref(0, 286959);

const {:count 44} .str.3: ref;

axiom .str.3 == $sub.ref(0, 288027);

const {:count 40} .str.4: ref;

axiom .str.4 == $sub.ref(0, 289091);

const {:count 33} .str.97: ref;

axiom .str.97 == $sub.ref(0, 290148);

const {:count 23} .str.101: ref;

axiom .str.101 == $sub.ref(0, 291195);

const {:count 28} .str.102: ref;

axiom .str.102 == $sub.ref(0, 292247);

const {:count 22} .str.151: ref;

axiom .str.151 == $sub.ref(0, 293293);

const {:count 44} .str.152: ref;

axiom .str.152 == $sub.ref(0, 294361);

const {:count 9} .str.153: ref;

axiom .str.153 == $sub.ref(0, 295394);

const {:count 46} .str.154: ref;

axiom .str.154 == $sub.ref(0, 296464);

const {:count 28} .str.155: ref;

axiom .str.155 == $sub.ref(0, 297516);

const {:count 18} .str.156: ref;

axiom .str.156 == $sub.ref(0, 298558);

const {:count 19} .str.157: ref;

axiom .str.157 == $sub.ref(0, 299601);

const {:count 26} .str.158: ref;

axiom .str.158 == $sub.ref(0, 300651);

const {:count 19} .str.162: ref;

axiom .str.162 == $sub.ref(0, 301694);

const {:count 18} .str.159: ref;

axiom .str.159 == $sub.ref(0, 302736);

const {:count 27} .str.160: ref;

axiom .str.160 == $sub.ref(0, 303787);

const {:count 10} .str.161: ref;

axiom .str.161 == $sub.ref(0, 304821);

const {:count 13} .str.95: ref;

axiom .str.95 == $sub.ref(0, 305858);

const {:count 4} .str.96: ref;

axiom .str.96 == $sub.ref(0, 306886);

const {:count 18} .str.98: ref;

axiom .str.98 == $sub.ref(0, 307928);

const {:count 6} .str.203: ref;

axiom .str.203 == $sub.ref(0, 308958);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32824));

const {:count 47} .str.204: ref;

axiom .str.204 == $sub.ref(0, 310029);

const {:count 43} .str.205: ref;

axiom .str.205 == $sub.ref(0, 311096);

const {:count 34} .str.201: ref;

axiom .str.201 == $sub.ref(0, 312154);

const {:count 34} .str.202: ref;

axiom .str.202 == $sub.ref(0, 313212);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 314244);

const {:count 3} .str.1.466: ref;

axiom .str.1.466 == $sub.ref(0, 315271);

const {:count 14} .str.467: ref;

axiom .str.467 == $sub.ref(0, 316309);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 317337);

const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 318369);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const malloc: ref;

axiom malloc == $sub.ref(0, 319401);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 0} $r := $malloc($i0);
    return;
}



const gigaset_probe: ref;

axiom gigaset_probe == $sub.ref(0, 320433);

procedure gigaset_probe($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.7, assertsPassed, $CurrAddr, $M.17, $M.16, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22;



implementation gigaset_probe($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $p11: ref;
  var $i12: i16;
  var $i13: i32;
  var $p15: ref;
  var $i16: i16;
  var $i17: i32;
  var $p19: ref;
  var $p20: ref;
  var $p22: ref;
  var $i23: i8;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $i30: i64;
  var $i31: i64;
  var $i32: i1;
  var $p34: ref;
  var $i35: i8;
  var $i36: i32;
  var $p39: ref;
  var $i40: i8;
  var $i41: i32;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $p48: ref;
  var $i49: i8;
  var $i50: i32;
  var $p52: ref;
  var $i53: i8;
  var $i54: i32;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p60: ref;
  var $i61: i8;
  var $i62: i32;
  var $i63: i1;
  var $p64: ref;
  var $p66: ref;
  var $i67: i8;
  var $i68: i32;
  var $p69: ref;
  var $p71: ref;
  var $i72: i16;
  var $i73: i32;
  var $p75: ref;
  var $i76: i16;
  var $i77: i32;
  var $p78: ref;
  var $i79: i32;
  var $p80: ref;
  var $i81: i64;
  var $i82: i1;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $i93: i64;
  var $i94: i1;
  var $p95: ref;
  var $p96: ref;
  var $i97: i64;
  var $i98: i1;
  var $p99: ref;
  var $p100: ref;
  var $i101: i64;
  var $i102: i1;
  var $p103: ref;
  var $p104: ref;
  var $i105: i64;
  var $i106: i1;
  var $p108: ref;
  var $p109: ref;
  var $i110: i64;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p116: ref;
  var $i117: i64;
  var $p120: ref;
  var $i121: i64;
  var $i122: i1;
  var $i123: i32;
  var $i124: i1;
  var $i115: i32;
  var $p126: ref;
  var $i127: i64;
  var $p129: ref;
  var $i130: i64;
  var $i131: i1;
  var $i132: i32;
  var $i133: i1;
  var $i125: i32;
  var $i134: i32;
  var $i135: i1;
  var $i107: i32;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $i141: i32;
  var $i142: i32;
  var $p143: ref;
  var $p144: ref;
  var $i145: i32;
  var $p146: ref;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $i150: i8;
  var $i151: i32;
  var $p152: ref;
  var $p153: ref;
  var $i154: i32;
  var $i155: i1;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $p160: ref;
  var $p161: ref;
  var $p162: ref;
  var $i163: i32;
  var $i164: i1;
  var $i165: i32;
  var $i166: i1;
  var $p167: ref;
  var $p168: ref;
  var $i169: i32;
  var $i170: i1;
  var $p171: ref;
  var $p172: ref;
  var $i159: i32;
  var $i55: i32;
  var vslice_dummy_var_9: i32;
  var vslice_dummy_var_10: i32;
  var vslice_dummy_var_11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1} $p2 := interface_to_usbdev($p0);
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, gigaset_debuglevel);
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 32768);
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} $i8 := ldv__builtin_expect($i7, 0);
    call {:si_unique_call 3} {:cexpr "tmp___0"} boogie_si_record_i64($i8);
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_9;

  corral_source_split_9:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(8, 1));
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p20, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.0, $p22);
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 3);
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $p58 := $p20;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($p58, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(5, 1));
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    $i61 := $load.i8($M.0, $p60);
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    $i62 := $zext.i8.i32($i61);
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    $i63 := $ne.i32($i62, 255);
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p2, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2040)), $mul.ref(1568, 1)), $mul.ref(8, 1));
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    $i72 := $load.i16($M.0, $p71);
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    $i73 := $zext.i16.i32($i72);
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2040)), $mul.ref(1568, 1)), $mul.ref(10, 1));
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    $i76 := $load.i16($M.0, $p75);
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    $i77 := $zext.i16.i32($i76);
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    call {:si_unique_call 12} _dev_info.ref.ref.ref.i32.i32($p69, .str.171, .str.167, $i73, $i77);
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    $p78 := $M.1;
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    $i79 := $M.2;
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} $p80 := gigaset_initcs($p78, 2, 0, 0, $i79, .str.172);
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    $i81 := $p2i.ref.i64($p80);
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    $i82 := $eq.i64($i81, 0);
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    assume {:branchcond $i82} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p80, $mul.ref(0, 5232)), $mul.ref(5224, 1));
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    $p84 := $bitcast.ref.ref($p83);
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.0, $p84);
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} vslice_dummy_var_11 := usb_get_dev($p2);
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p85, $mul.ref(0, 888)), $mul.ref(0, 1));
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p87, $p2);
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p85, $mul.ref(0, 888)), $mul.ref(8, 1));
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p88, $p0);
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p80, $mul.ref(0, 5232)), $mul.ref(16, 1));
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p90, $p89);
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 15} $p91 := ldv_usb_alloc_urb_63(0, 208);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p85, $mul.ref(0, 888)), $mul.ref(480, 1));
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p92, $p91);
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    $i93 := $p2i.ref.i64($p91);
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    $i94 := $eq.i64($i93, 0);
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i94 == 1);
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} $p95 := ldv_usb_alloc_urb_64(0, 208);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p85, $mul.ref(0, 888)), $mul.ref(328, 1));
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p96, $p95);
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    $i97 := $p2i.ref.i64($p95);
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    $i98 := $eq.i64($i97, 0);
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    assume {:branchcond $i98} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i98 == 1);
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 18} $p99 := ldv_usb_alloc_urb_65(0, 208);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p85, $mul.ref(0, 888)), $mul.ref(304, 1));
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p100, $p99);
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    $i101 := $p2i.ref.i64($p99);
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    $i102 := $eq.i64($i101, 0);
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    assume {:branchcond $i102} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i102 == 1);
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} $p103 := ldv_usb_alloc_urb_66(0, 208);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p85, $mul.ref(0, 888)), $mul.ref(24, 1));
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p104, $p103);
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    $i105 := $p2i.ref.i64($p103);
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    $i106 := $eq.i64($i105, 0);
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    assume {:branchcond $i106} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i107 := 0;
    goto $bb33;

  $bb33:
    call $p108, $p109, $i110, $p112, $p113, $p114, $p116, $i117, $p120, $i121, $i122, $i123, $i124, $i115, $p126, $i127, $p129, $i130, $i131, $i132, $i133, $i125, $i134, $i135, $i107 := gigaset_probe_loop_$bb33($p80, $p108, $p109, $i110, $p112, $p113, $p114, $p116, $i117, $p120, $i121, $i122, $i123, $i124, $i115, $p126, $i127, $p129, $i130, $i131, $i132, $i133, $i125, $i134, $i135, $i107);
    goto $bb33_last;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p80, $mul.ref(0, 5232)), $mul.ref(160, 1));
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    $p109 := $load.ref($M.0, $p108);
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    $i110 := $sext.i32.i64($i107);
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p109, $mul.ref($i110, 480)), $mul.ref(384, 1));
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    $p113 := $bitcast.ref.ref($p112);
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    $p114 := $load.ref($M.0, $p113);
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    $i115 := 0;
    goto $bb35;

  $bb35:
    call $p116, $i117, $p120, $i121, $i122, $i123, $i124, $i115 := gigaset_probe_loop_$bb35($p114, $p116, $i117, $p120, $i121, $i122, $i123, $i124, $i115);
    goto $bb35_last;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 20} $p116 := ldv_usb_alloc_urb_67(8, 208);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    $i117 := $sext.i32.i64($i115);
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($add.ref($add.ref($p114, $mul.ref(0, 824)), $mul.ref(80, 1)), $mul.ref($i117, 24)), $mul.ref(0, 1));
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p120, $p116);
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    $i121 := $p2i.ref.i64($p116);
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $i122 := $eq.i64($i121, 0);
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i123 := $add.i32($i115, 1);
    call {:si_unique_call 21} {:cexpr "i"} boogie_si_record_i32($i123);
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    $i124 := $sle.i32($i123, 2);
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i124 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i125 := 0;
    goto $bb43;

  $bb43:
    call $p126, $i127, $p129, $i130, $i131, $i132, $i133, $i125 := gigaset_probe_loop_$bb43($p114, $p126, $i127, $p129, $i130, $i131, $i132, $i133, $i125);
    goto $bb43_last;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} $p126 := ldv_usb_alloc_urb_68(8, 208);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    $i127 := $sext.i32.i64($i125);
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($add.ref($p114, $mul.ref(0, 824)), $mul.ref(304, 1)), $mul.ref($i127, 8));
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p129, $p126);
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    $i130 := $p2i.ref.i64($p126);
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    $i131 := $eq.i64($i130, 0);
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i131 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i132 := $add.i32($i125, 1);
    call {:si_unique_call 23} {:cexpr "i"} boogie_si_record_i32($i132);
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    $i133 := $sle.i32($i132, 2);
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i134 := $add.i32($i107, 1);
    call {:si_unique_call 24} {:cexpr "j"} boogie_si_record_i32($i134);
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    $i135 := $sle.i32($i134, 1);
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p85, $mul.ref(0, 888)), $mul.ref(472, 1));
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p136, $0.ref);
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p85, $mul.ref(0, 888)), $mul.ref(880, 1));
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p137, 0);
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p58, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    $p139 := $load.ref($M.0, $p138);
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p139, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} $i141 := usb_endpoint_num($p140);
    call {:si_unique_call 26} {:cexpr "tmp___9"} boogie_si_record_i32($i141);
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} $i142 := __create_pipe($p2, $i141);
    call {:si_unique_call 28} {:cexpr "tmp___10"} boogie_si_record_i32($i142);
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p85, $mul.ref(0, 888)), $mul.ref(480, 1));
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    $p144 := $load.ref($M.0, $p143);
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    $i145 := $or.i32($i142, 1073741952);
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p85, $mul.ref(0, 888)), $mul.ref(488, 1));
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    $p147 := $load.ref($M.0, $p146);
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    $p148 := $bitcast.ref.ref($p80);
    $p149 := $add.ref($add.ref($add.ref($p139, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(6, 1));
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    $i150 := $load.i8($M.0, $p149);
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    $i151 := $zext.i8.i32($i150);
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} usb_fill_int_urb($p144, $p2, $i145, $p147, 3, read_int_callback, $p148, $i151);
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p85, $mul.ref(0, 888)), $mul.ref(480, 1));
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    $p153 := $load.ref($M.0, $p152);
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} $i154 := ldv_usb_submit_urb_69($p153, 208);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    call {:si_unique_call 31} {:cexpr "rc"} boogie_si_record_i32($i154);
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    $i155 := $ne.i32($i154, 0);
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    assume {:branchcond $i155} true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p85, $mul.ref(0, 888)), $mul.ref(704, 1));
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p160, 0);
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p80, $mul.ref(0, 5232)), $mul.ref(160, 1));
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    $p162 := $load.ref($M.0, $p161);
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} $i163 := req_submit($p162, 52, 0, 0);
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    call {:si_unique_call 39} {:cexpr "rc"} boogie_si_record_i32($i163);
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    $i164 := $ne.i32($i163, 0);
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    assume {:branchcond $i164} true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i164 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $i165 := $M.4;
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    $i166 := $eq.i32($i165, 0);
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    assume {:branchcond $i166} true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i166 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $p168 := $bitcast.ref.ref($p80);
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} usb_set_intfdata($p0, $p168);
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 41} $i169 := gigaset_start($p80);
    call {:si_unique_call 42} {:cexpr "rc"} boogie_si_record_i32($i169);
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    $i170 := $slt.i32($i169, 0);
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    assume {:branchcond $i170} true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i170 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $i55 := 0;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    $r := $i55;
    return;

  $bb64:
    assume $i170 == 1;
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    $i159 := $i169;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} freeurbs($p80);
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} usb_set_intfdata($p0, $0.ref);
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} usb_put_dev($p2);
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} gigaset_freecs($p80);
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    $i55 := $i159;
    goto $bb11;

  $bb61:
    assume $i166 == 1;
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p80, $mul.ref(0, 5232)), $mul.ref(144, 1));
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p167, 2);
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb58:
    assume $i164 == 1;
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    $i159 := $i163;
    goto $bb56;

  SeqInstr_22:
    assume !assertsPassed;
    return;

  $bb54:
    assume $i155 == 1;
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} $p156 := get_usb_rcmsg($i154);
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p80, $mul.ref(0, 5232)), $mul.ref(16, 1));
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    $p158 := $load.ref($M.0, $p157);
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} dev_err.ref.ref.ref($p158, .str.173, $p156);
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    $i159 := $i154;
    goto $bb56;

  SeqInstr_19:
    assume !assertsPassed;
    return;

  $bb51:
    assume $i135 == 1;
    assume {:verifier.code 0} true;
    $i107 := $i134;
    goto $bb51_dummy;

  $bb48:
    assume $i133 == 1;
    assume {:verifier.code 0} true;
    $i125 := $i132;
    goto $bb48_dummy;

  $bb45:
    assume $i131 == 1;
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p80, $mul.ref(0, 5232)), $mul.ref(16, 1));
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    $p172 := $load.ref($M.0, $p171);
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 17} dev_err.ref.ref($p172, .str.174);
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    $i159 := $sub.i32(0, 12);
    goto $bb56;

  SeqInstr_16:
    assume !assertsPassed;
    return;

  $bb40:
    assume $i124 == 1;
    assume {:verifier.code 0} true;
    $i115 := $i123;
    goto $bb40_dummy;

  $bb37:
    assume $i122 == 1;
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    goto $bb22;

  SeqInstr_13:
    assume !assertsPassed;
    return;

  $bb27:
    assume $i106 == 1;
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    goto $bb22;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  $bb25:
    assume $i102 == 1;
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    goto $bb22;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i98 == 1;
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    goto $bb22;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i94 == 1;
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    goto $bb22;

  SeqInstr_1:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i82 == 1;
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    $i55 := $sub.i32(0, 19);
    goto $bb11;

  $bb14:
    assume $i63 == 1;
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p2, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($p58, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(5, 1));
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    $i67 := $load.i8($M.0, $p66);
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    $i68 := $zext.i8.i32($i67);
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} dev_warn.ref.ref.ref.i32($p64, .str.170, .str.167, $i68);
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    $i55 := $sub.i32(0, 19);
    goto $bb11;

  $bb4:
    assume $i25 == 1;
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, gigaset_debuglevel);
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i26, 32768);
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    $i29 := $zext.i1.i32($i28);
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i29);
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5} $i31 := ldv__builtin_expect($i30, 0);
    call {:si_unique_call 6} {:cexpr "tmp___1"} boogie_si_record_i64($i31);
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, 0);
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p20, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.0, $p39);
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i32($i40);
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 8} $i42 := usb_set_interface($p2, $i41, 3);
    call {:si_unique_call 9} {:cexpr "tmp___2"} boogie_si_record_i32($i42);
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    $i43 := $slt.i32($i42, 0);
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(8, 1));
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    $p58 := $p57;
    goto $bb13;

  $bb9:
    assume $i43 == 1;
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p2, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p2, $mul.ref(0, 2040)), $mul.ref(0, 1));
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p20, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    $i49 := $load.i8($M.0, $p48);
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i49);
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p20, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.0, $p52);
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i32($i53);
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} dev_warn.ref.ref.i32.i32.i32($p44, .str.169, $i46, $i50, $i54);
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    $i55 := $sub.i32(0, 19);
    goto $bb11;

  $bb6:
    assume $i32 == 1;
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p20, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.0, $p34);
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i35);
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 7} vslice_dummy_var_10 := printk.ref.ref.i32(.str.168, .str.167, $i36);
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2040)), $mul.ref(1568, 1)), $mul.ref(8, 1));
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    $i12 := $load.i16($M.0, $p11);
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i12);
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2040)), $mul.ref(1568, 1)), $mul.ref(10, 1));
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    $i16 := $load.i16($M.0, $p15);
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    $i17 := $zext.i16.i32($i16);
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4} vslice_dummy_var_9 := printk.ref.ref.i32.i32(.str.166, .str.167, $i13, $i17);
    goto corral_source_split_18;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb48_dummy:
    assume false;
    return;

  $bb43_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_168;

  $bb40_dummy:
    assume false;
    return;

  $bb35_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_154;

  $bb51_dummy:
    assume false;
    return;

  $bb33_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_144;
}



const gigaset_disconnect: ref;

axiom gigaset_disconnect == $sub.ref(0, 321465);

procedure gigaset_disconnect($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.16, $M.18, $M.20, $M.22, $M.8, $M.10, $M.12, $M.14, $M.7, $CurrAddr;



implementation gigaset_disconnect($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var $p15: ref;
  var $p17: ref;
  var $p19: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var vslice_dummy_var_12: i32;
  var vslice_dummy_var_13: i32;
  var vslice_dummy_var_14: i32;
  var vslice_dummy_var_15: i32;
  var vslice_dummy_var_16: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} $p1 := usb_get_intfdata($p0);
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 5232)), $mul.ref(5224, 1));
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 5232)), $mul.ref(16, 1));
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} _dev_info.ref.ref($p7, .str.189);
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p5, $mul.ref(0, 888)), $mul.ref(784, 1));
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, 0);
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 5232)), $mul.ref(160, 1));
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} gigaset_bchannel_down($p10);
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 5232)), $mul.ref(160, 1));
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($p31, $mul.ref(1, 480));
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} gigaset_bchannel_down($p32);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 47} gigaset_stop($p2);
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p5, $mul.ref(0, 888)), $mul.ref(40, 1));
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} vslice_dummy_var_12 := ldv_del_timer_sync_70($p11);
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p5, $mul.ref(0, 888)), $mul.ref(176, 1));
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} vslice_dummy_var_13 := ldv_del_timer_sync_71($p13);
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p5, $mul.ref(0, 888)), $mul.ref(344, 1));
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} vslice_dummy_var_14 := ldv_del_timer_sync_72($p15);
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p5, $mul.ref(0, 888)), $mul.ref(576, 1));
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 51} vslice_dummy_var_15 := ldv_del_timer_sync_73($p17);
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p5, $mul.ref(0, 888)), $mul.ref(496, 1));
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} vslice_dummy_var_16 := ldv_cancel_work_sync_74($p19);
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} freeurbs($p2);
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} usb_set_intfdata($p0, $0.ref);
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p5, $mul.ref(0, 888)), $mul.ref(472, 1));
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} kfree($p22);
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p5, $mul.ref(0, 888)), $mul.ref(472, 1));
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p23, $0.ref);
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p5, $mul.ref(0, 888)), $mul.ref(880, 1));
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, 0);
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p5, $mul.ref(0, 888)), $mul.ref(0, 1));
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} usb_put_dev($p26);
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p5, $mul.ref(0, 888)), $mul.ref(8, 1));
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p27, $0.ref);
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p5, $mul.ref(0, 888)), $mul.ref(0, 1));
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p28, $0.ref);
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 5232)), $mul.ref(16, 1));
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p29, $0.ref);
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} gigaset_freecs($p2);
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    return;
}



const gigaset_suspend: ref;

axiom gigaset_suspend == $sub.ref(0, 322497);

procedure gigaset_suspend($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.5, $M.0, $M.7, $CurrAddr, $M.16, $M.18, $M.20, $M.22, $M.8, $M.10, $M.12, $M.14, $M.17, $M.19, $M.21, $M.23, assertsPassed;



implementation gigaset_suspend($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $i27: i8;
  var $i28: i1;
  var $i29: i1;
  var $i30: i64;
  var $i31: i1;
  var $i33: i1;
  var $i32: i1;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $p39: ref;
  var $i40: i64;
  var $p41: ref;
  var $i42: i32;
  var $i43: i32;
  var $i44: i1;
  var $i45: i8;
  var $i46: i1;
  var $i47: i1;
  var $i48: i64;
  var $i49: i1;
  var $i51: i1;
  var $i50: i1;
  var $i52: i32;
  var $i53: i1;
  var $i54: i64;
  var $i55: i64;
  var $p56: ref;
  var $i57: i64;
  var $i58: i32;
  var $i59: i32;
  var $i60: i32;
  var $i61: i1;
  var $i62: i32;
  var $i63: i64;
  var $i64: i64;
  var $i65: i1;
  var $p67: ref;
  var $i68: i32;
  var $i69: i32;
  var $i70: i1;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i32;
  var $i75: i32;
  var $i76: i1;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $i80: i32;
  var $i81: i32;
  var $i82: i1;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $i86: i32;
  var $i87: i32;
  var $i88: i1;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $i92: i32;
  var $i93: i32;
  var $i94: i1;
  var $p95: ref;
  var $p96: ref;
  var $p98: ref;
  var $i99: i32;
  var $i100: i32;
  var $i101: i1;
  var $i102: i32;
  var $i103: i32;
  var $i104: i1;
  var $i105: i32;
  var $i106: i64;
  var $i107: i64;
  var $i108: i1;
  var $p110: ref;
  var $p111: ref;
  var $i112: i32;
  var $i113: i1;
  var $p115: ref;
  var $i116: i32;
  var $i117: i1;
  var $i118: i8;
  var $i119: i1;
  var $i120: i1;
  var $i121: i64;
  var $i122: i1;
  var $i124: i1;
  var $i123: i1;
  var $i125: i32;
  var $i126: i1;
  var $p127: ref;
  var $p128: ref;
  var $i129: i64;
  var $p130: ref;
  var $i131: i64;
  var $p132: ref;
  var $i133: i32;
  var $i134: i1;
  var $i135: i8;
  var $i136: i1;
  var $i137: i1;
  var $i138: i64;
  var $i139: i1;
  var $i141: i1;
  var $i140: i1;
  var $i142: i32;
  var $i143: i1;
  var $i144: i64;
  var $p145: ref;
  var $p146: ref;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $p150: ref;
  var $p152: ref;
  var $p154: ref;
  var $p156: ref;
  var $p158: ref;
  var $i159: i32;
  var $i160: i1;
  var $p161: ref;
  var $i163: i32;
  var $i164: i32;
  var $i165: i1;
  var $i166: i32;
  var $i167: i64;
  var $i168: i64;
  var $i169: i1;
  var $i22: i32;
  var vslice_dummy_var_17: i32;
  var vslice_dummy_var_18: i32;
  var vslice_dummy_var_19: i32;
  var vslice_dummy_var_20: i32;
  var vslice_dummy_var_21: i32;
  var vslice_dummy_var_22: i32;
  var vslice_dummy_var_23: i32;
  var vslice_dummy_var_24: i32;
  var vslice_dummy_var_25: i32;
  var vslice_dummy_var_26: i1;
  var vslice_dummy_var_27: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 58} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 60} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.5 := $store.i32($M.5, $p5, $i1);
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} $p6 := usb_get_intfdata($p0);
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 5232)), $mul.ref(5224, 1));
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} $i11 := update_basstate($p10, 256, 0);
    call {:si_unique_call 63} {:cexpr "tmp___1"} boogie_si_record_i32($i11);
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 256);
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} __might_sleep(.str.191, 2472, 0);
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p10, $mul.ref(0, 888)), $mul.ref(784, 1));
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i24, 198);
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 0);
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    $i27 := $zext.i1.i8($i26);
    call {:si_unique_call 68} {:cexpr "__cond___0"} boogie_si_record_i8($i27);
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i8.i1($i27);
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i30 := 500;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i8.i1($i27);
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    $i32 := 1;
    assume true;
    goto $bb14, $bb16;

  $bb16:
    assume !($i31 == 1);
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    $i33 := $eq.i64($i30, 0);
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    $i32 := $i33;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    $i34 := $zext.i1.i32($i32);
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 0);
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    $i57 := $i30;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    $i58 := $trunc.i64.i32($i57);
    call {:si_unique_call 76} {:cexpr "rc"} boogie_si_record_i32($i58);
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, gigaset_debuglevel);
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    $i60 := $and.i32($i59, 65536);
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    $i61 := $ne.i32($i60, 0);
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    $i62 := $zext.i1.i32($i61);
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    $i63 := $sext.i32.i64($i62);
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 77} $i64 := ldv__builtin_expect($i63, 0);
    call {:si_unique_call 78} {:cexpr "tmp___3"} boogie_si_record_i64($i64);
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    $i65 := $ne.i64($i64, 0);
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p10, $mul.ref(0, 888)), $mul.ref(784, 1));
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.0, $p67);
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    $i69 := $and.i32($i68, 198);
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    $i70 := $ne.i32($i69, 0);
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    assume {:branchcond $i70} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p10, $mul.ref(0, 888)), $mul.ref(784, 1));
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    $i99 := $load.i32($M.0, $p98);
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    $i100 := $and.i32($i99, 1);
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    $i101 := $ne.i32($i100, 0);
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p10, $mul.ref(0, 888)), $mul.ref(24, 1));
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    $p147 := $load.ref($M.0, $p146);
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 101} usb_kill_urb($p147);
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p10, $mul.ref(0, 888)), $mul.ref(480, 1));
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    $p149 := $load.ref($M.0, $p148);
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 102} usb_kill_urb($p149);
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p10, $mul.ref(0, 888)), $mul.ref(40, 1));
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 103} vslice_dummy_var_22 := ldv_del_timer_sync_75($p150);
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p10, $mul.ref(0, 888)), $mul.ref(176, 1));
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 104} vslice_dummy_var_23 := ldv_del_timer_sync_76($p152);
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p10, $mul.ref(0, 888)), $mul.ref(344, 1));
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 105} vslice_dummy_var_24 := ldv_del_timer_sync_77($p154);
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p10, $mul.ref(0, 888)), $mul.ref(576, 1));
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 106} vslice_dummy_var_25 := ldv_del_timer_sync_78($p156);
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    $i159 := $load.i32($M.5, $p158);
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    $i160 := $ne.i32($i159, 0);
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    assume {:branchcond $i160} true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i160 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    $i163 := $load.i32($M.0, gigaset_debuglevel);
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    $i164 := $and.i32($i163, 65536);
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    $i165 := $ne.i32($i164, 0);
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    $i166 := $zext.i1.i32($i165);
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    $i167 := $sext.i32.i64($i166);
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 108} $i168 := ldv__builtin_expect($i167, 0);
    call {:si_unique_call 109} {:cexpr "tmp___6"} boogie_si_record_i64($i168);
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    $i169 := $ne.i64($i168, 0);
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i169 == 1);
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    $i22 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    $r := $i22;
    return;

  $bb90:
    assume $i169 == 1;
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 110} vslice_dummy_var_27 := printk.ref(.str.199);
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb87:
    assume $i160 == 1;
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p10, $mul.ref(0, 888)), $mul.ref(496, 1));
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 107} vslice_dummy_var_26 := ldv_cancel_work_sync_79($p161);
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb52:
    assume $i101 == 1;
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    $i102 := $load.i32($M.0, gigaset_debuglevel);
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    $i103 := $and.i32($i102, 65536);
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    $i104 := $ne.i32($i103, 0);
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    $i105 := $zext.i1.i32($i104);
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    $i106 := $sext.i32.i64($i105);
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 86} $i107 := ldv__builtin_expect($i106, 0);
    call {:si_unique_call 87} {:cexpr "tmp___4"} boogie_si_record_i64($i107);
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    $i108 := $ne.i64($i107, 0);
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p7, $mul.ref(0, 5232)), $mul.ref(160, 1));
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    $p111 := $load.ref($M.0, $p110);
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 89} $i112 := req_submit($p111, 41, 0, 0);
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    call {:si_unique_call 90} {:cexpr "rc"} boogie_si_record_i32($i112);
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    $i113 := $ne.i32($i112, 0);
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    call {:si_unique_call 92} __might_sleep(.str.191, 2499, 0);
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p10, $mul.ref(0, 888)), $mul.ref(788, 1));
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    $i116 := $load.i32($M.0, $p115);
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    $i117 := $eq.i32($i116, 0);
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    $i118 := $zext.i1.i8($i117);
    call {:si_unique_call 93} {:cexpr "__cond___2"} boogie_si_record_i8($i118);
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    $i119 := $trunc.i8.i1($i118);
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    assume {:branchcond $i119} true;
    goto $bb60, $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    assume !($i119 == 1);
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $i121 := 500;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    $i122 := $trunc.i8.i1($i118);
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    $i123 := 1;
    assume true;
    goto $bb66, $bb68;

  $bb68:
    assume !($i122 == 1);
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    $i124 := $eq.i64($i121, 0);
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    $i123 := $i124;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    $i125 := $zext.i1.i32($i123);
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    $i126 := $eq.i32($i125, 0);
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    assume {:branchcond $i126} true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb69:
    assume $i126 == 1;
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 94} INIT_LIST_HEAD($p127);
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p128, 0);
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    $i129 := 500;
    goto $bb71;

  $bb71:
    call $i129, $p130, $i131, $p132, $i133, $i134, $i135, $i136, $i137, $i138, $i139, $i141, $i140, $i142, $i143, $i144 := gigaset_suspend_loop_$bb71($p4, $p10, $i129, $p130, $i131, $p132, $i133, $i134, $i135, $i136, $i137, $i138, $i139, $i141, $i140, $i142, $i143, $i144);
    goto $bb71_last;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p10, $mul.ref(0, 888)), $mul.ref(792, 1));
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 95} $i131 := prepare_to_wait_event($p130, $p4, 2);
    call {:si_unique_call 96} {:cexpr "tmp___5"} boogie_si_record_i64($i131);
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p10, $mul.ref(0, 888)), $mul.ref(788, 1));
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    $i133 := $load.i32($M.0, $p132);
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    $i134 := $eq.i32($i133, 0);
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    $i135 := $zext.i1.i8($i134);
    call {:si_unique_call 97} {:cexpr "__cond___1"} boogie_si_record_i8($i135);
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    $i136 := $trunc.i8.i1($i135);
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    assume !($i136 == 1);
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $i138 := $i129;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    $i139 := $trunc.i8.i1($i135);
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    $i140 := 1;
    assume true;
    goto $bb78, $bb80;

  $bb80:
    assume !($i139 == 1);
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    $i141 := $eq.i64($i138, 0);
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    $i140 := $i141;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    $i142 := $zext.i1.i32($i140);
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    $i143 := $ne.i32($i142, 0);
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i143 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    call {:si_unique_call 99} $i144 := schedule_timeout($i138);
    call {:si_unique_call 100} {:cexpr "__ret___2"} boogie_si_record_i64($i144);
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    $i129 := $i144;
    goto corral_source_split_525_dummy;

  $bb81:
    assume $i143 == 1;
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p10, $mul.ref(0, 888)), $mul.ref(792, 1));
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 98} finish_wait($p145, $p4);
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb78:
    assume {:verifier.code 0} true;
    assume $i139 == 1;
    goto $bb79;

  $bb72:
    assume $i136 == 1;
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    $i137 := $eq.i64($i129, 0);
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    assume !($i137 == 1);
    goto $bb74;

  $bb75:
    assume $i137 == 1;
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    $i138 := 1;
    goto $bb77;

  $bb66:
    assume {:verifier.code 0} true;
    assume $i122 == 1;
    goto $bb67;

  $bb60:
    assume $i119 == 1;
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    $i120 := $eq.i64(500, 0);
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    assume !($i120 == 1);
    goto $bb62;

  $bb63:
    assume $i120 == 1;
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    $i121 := 1;
    goto $bb65;

  $bb57:
    assume $i113 == 1;
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 91} vslice_dummy_var_21 := update_basstate($p10, 0, 256);
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    $i22 := $i112;
    goto $bb6;

  SeqInstr_25:
    assume !assertsPassed;
    return;

  $bb54:
    assume $i108 == 1;
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 88} vslice_dummy_var_20 := printk.ref(.str.198);
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb37:
    assume $i70 == 1;
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p7, $mul.ref(0, 5232)), $mul.ref(16, 1));
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 80} dev_warn.ref.ref($p72, .str.193);
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p10, $mul.ref(0, 888)), $mul.ref(784, 1));
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.0, $p73);
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    $i75 := $and.i32($i74, 2);
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    $i76 := $ne.i32($i75, 0);
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    assume {:branchcond $i76} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p10, $mul.ref(0, 888)), $mul.ref(784, 1));
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    $i80 := $load.i32($M.0, $p79);
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    $i81 := $and.i32($i80, 4);
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    $i82 := $ne.i32($i81, 0);
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    assume {:branchcond $i82} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p10, $mul.ref(0, 888)), $mul.ref(784, 1));
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    $i86 := $load.i32($M.0, $p85);
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    $i87 := $and.i32($i86, 64);
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    $i88 := $ne.i32($i87, 0);
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    assume {:branchcond $i88} true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p10, $mul.ref(0, 888)), $mul.ref(784, 1));
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    $i92 := $load.i32($M.0, $p91);
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    $i93 := $and.i32($i92, 128);
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    $i94 := $ne.i32($i93, 0);
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 85} vslice_dummy_var_19 := update_basstate($p10, 0, 256);
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32(0, 16);
    goto $bb6;

  $bb48:
    assume $i94 == 1;
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p7, $mul.ref(0, 5232)), $mul.ref(16, 1));
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    $p96 := $load.ref($M.0, $p95);
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 84} dev_warn.ref.ref($p96, .str.197);
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb45:
    assume $i88 == 1;
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p7, $mul.ref(0, 5232)), $mul.ref(16, 1));
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    $p90 := $load.ref($M.0, $p89);
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 83} dev_warn.ref.ref($p90, .str.196);
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb42:
    assume $i82 == 1;
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p7, $mul.ref(0, 5232)), $mul.ref(16, 1));
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.0, $p83);
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 82} dev_warn.ref.ref($p84, .str.195);
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb39:
    assume $i76 == 1;
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p7, $mul.ref(0, 5232)), $mul.ref(16, 1));
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.0, $p77);
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 81} dev_warn.ref.ref($p78, .str.194);
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb34:
    assume $i65 == 1;
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 79} vslice_dummy_var_18 := printk.ref.i32(.str.192, $i58);
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb17:
    assume $i35 == 1;
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 69} INIT_LIST_HEAD($p36);
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p37, 0);
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $i38 := 500;
    goto $bb19;

  $bb19:
    call $i38, $p39, $i40, $p41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i51, $i50, $i52, $i53, $i54, $i55 := gigaset_suspend_loop_$bb19($p3, $p10, $i38, $p39, $i40, $p41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i51, $i50, $i52, $i53, $i54, $i55);
    goto $bb19_last;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p10, $mul.ref(0, 888)), $mul.ref(792, 1));
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 70} $i40 := prepare_to_wait_event($p39, $p3, 2);
    call {:si_unique_call 71} {:cexpr "tmp___2"} boogie_si_record_i64($i40);
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p10, $mul.ref(0, 888)), $mul.ref(784, 1));
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    $i43 := $and.i32($i42, 198);
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i43, 0);
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    $i45 := $zext.i1.i8($i44);
    call {:si_unique_call 72} {:cexpr "__cond"} boogie_si_record_i8($i45);
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i8.i1($i45);
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i48 := $i38;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    $i49 := $trunc.i8.i1($i45);
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    $i50 := 1;
    assume true;
    goto $bb26, $bb28;

  $bb28:
    assume !($i49 == 1);
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    $i51 := $eq.i64($i48, 0);
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    $i50 := $i51;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    $i52 := $zext.i1.i32($i50);
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    $i54 := $i48;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 74} $i55 := schedule_timeout($i48);
    call {:si_unique_call 75} {:cexpr "__ret___0"} boogie_si_record_i64($i55);
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    $i38 := $i55;
    goto corral_source_split_377_dummy;

  $bb29:
    assume $i53 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p10, $mul.ref(0, 888)), $mul.ref(792, 1));
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 73} finish_wait($p56, $p3);
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    $i57 := $i54;
    goto $bb33;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i49 == 1;
    goto $bb27;

  $bb20:
    assume $i46 == 1;
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    $i47 := $eq.i64($i38, 0);
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i47 == 1);
    goto $bb22;

  $bb23:
    assume $i47 == 1;
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    $i48 := 1;
    goto $bb25;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i31 == 1;
    goto $bb15;

  $bb8:
    assume $i28 == 1;
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    $i29 := $eq.i64(500, 0);
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb10;

  $bb11:
    assume $i29 == 1;
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    $i30 := 1;
    goto $bb13;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, gigaset_debuglevel);
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i14, 65536);
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i32($i16);
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i17);
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 64} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 65} {:cexpr "tmp___0"} boogie_si_record_i64($i19);
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i22 := 0;
    goto $bb6;

  $bb3:
    assume $i20 == 1;
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 66} vslice_dummy_var_17 := printk.ref(.str.190);
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_525_dummy:
    assume false;
    return;

  $bb71_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_496;

  corral_source_split_377_dummy:
    assume false;
    return;

  $bb19_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_347;
}



const gigaset_resume: ref;

axiom gigaset_resume == $sub.ref(0, 323529);

procedure gigaset_resume($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.7, $CurrAddr, assertsPassed;



implementation gigaset_resume($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p14: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $i13: i32;
  var vslice_dummy_var_28: i32;
  var vslice_dummy_var_29: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 111} $p1 := usb_get_intfdata($p0);
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 5232)), $mul.ref(5224, 1));
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 888)), $mul.ref(480, 1));
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 112} $i8 := ldv_usb_submit_urb_80($p7, 208);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    call {:si_unique_call 113} {:cexpr "rc"} boogie_si_record_i32($i8);
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p5, $mul.ref(0, 888)), $mul.ref(704, 1));
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, 0);
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 116} vslice_dummy_var_28 := update_basstate($p5, 0, 256);
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, gigaset_debuglevel);
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i16, 65536);
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i32($i18);
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 117} $i21 := ldv__builtin_expect($i20, 0);
    call {:si_unique_call 118} {:cexpr "tmp___1"} boogie_si_record_i64($i21);
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb5:
    assume $i22 == 1;
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 119} vslice_dummy_var_29 := printk.ref(.str.200);
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 114} $p10 := get_usb_rcmsg($i8);
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 5232)), $mul.ref(16, 1));
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 115} dev_err.ref.ref.ref($p12, .str.34, $p10);
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    $i13 := $i8;
    goto $bb3;

  SeqInstr_28:
    assume !assertsPassed;
    return;
}



const gigaset_post_reset: ref;

axiom gigaset_post_reset == $sub.ref(0, 324561);

procedure gigaset_post_reset($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.7, $CurrAddr, assertsPassed;



implementation gigaset_post_reset($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 120} $i1 := gigaset_resume($p0);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    call {:si_unique_call 121} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;

  SeqInstr_31:
    assume !assertsPassed;
    return;
}



const gigaset_pre_reset: ref;

axiom gigaset_pre_reset == $sub.ref(0, 325593);

procedure gigaset_pre_reset($p0: ref) returns ($r: i32);



const usb_get_intfdata: ref;

axiom usb_get_intfdata == $sub.ref(0, 326625);

procedure usb_get_intfdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation usb_get_intfdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 122} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_usb_submit_urb_80: ref;

axiom ldv_usb_submit_urb_80 == $sub.ref(0, 327657);

procedure ldv_usb_submit_urb_80($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_submit_urb_80($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 123} {:cexpr "ldv_usb_submit_urb_80:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 124} ldv_check_alloc_flags($i1);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 125} $p2 := ldv_undef_ptr();
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_34:
    assume !assertsPassed;
    return;
}



const get_usb_rcmsg: ref;

axiom get_usb_rcmsg == $sub.ref(0, 328689);

procedure get_usb_rcmsg($i0: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation get_usb_rcmsg($i0: i32) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $p26: ref;
  var $p25: ref;
  var vslice_dummy_var_30: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 126} $p1 := $alloc($mul.ref(28, $zext.i32.i64(1)));
    call {:si_unique_call 127} {:cexpr "get_usb_rcmsg:arg:rc"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, $sub.i32(0, 19));
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i0, $sub.i32(0, 6));
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, $sub.i32(0, 1));
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p1);
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 128} vslice_dummy_var_30 := snprintf.ref.i64.ref.i32($p26, 28, .str.30, $i0);
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    $p25 := $p1;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $r := $p25;
    return;

  $bb10:
    assume $i6 == 1;
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    $p25 := .str.16;
    goto $bb49;

  $bb8:
    assume $i5 == 1;
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    $p25 := .str.28;
    goto $bb49;

  $bb6:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i0, $sub.i32(0, 2));
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i7 == 1);
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $p25 := .str.19;
    goto $bb49;

  $bb13:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i0, $sub.i32(0, 6));
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb12;

  $bb15:
    assume $i8 == 1;
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    $p25 := .str.20;
    goto $bb49;

  $bb4:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i0, $sub.i32(0, 12));
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i0, $sub.i32(0, 11));
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i0, $sub.i32(0, 11));
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb12;

  $bb21:
    assume $i11 == 1;
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    $p25 := .str.22;
    goto $bb49;

  $bb19:
    assume $i10 == 1;
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    $p25 := .str.17;
    goto $bb49;

  $bb17:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i0, $sub.i32(0, 19));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb12;

  $bb23:
    assume $i12 == 1;
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    $p25 := .str.18;
    goto $bb49;

  $bb2:
    assume $i2 == 1;
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i0, $sub.i32(0, 32));
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i0, $sub.i32(0, 27));
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i0, $sub.i32(0, 22));
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i0, $sub.i32(0, 22));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb12;

  $bb31:
    assume $i16 == 1;
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    $p25 := .str.21;
    goto $bb49;

  $bb29:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i0, $sub.i32(0, 27));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb12;

  $bb33:
    assume $i17 == 1;
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    $p25 := .str.23;
    goto $bb49;

  $bb27:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i0, $sub.i32(0, 28));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i18 == 1);
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    $p25 := .str.26;
    goto $bb49;

  $bb35:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i0, $sub.i32(0, 32));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb12;

  $bb37:
    assume $i19 == 1;
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    $p25 := .str.24;
    goto $bb49;

  $bb25:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i0, $sub.i32(0, 108));
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i0, $sub.i32(0, 90));
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i0, $sub.i32(0, 90));
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb43, $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb12;

  $bb43:
    assume $i22 == 1;
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    $p25 := .str.25;
    goto $bb49;

  $bb41:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i0, $sub.i32(0, 108));
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb45, $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb12;

  $bb45:
    assume $i23 == 1;
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    $p25 := .str.27;
    goto $bb49;

  $bb39:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i0, $sub.i32(0, 113));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb12;

  $bb47:
    assume $i24 == 1;
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    $p25 := .str.29;
    goto $bb49;
}



const dev_err: ref;

axiom dev_err == $sub.ref(0, 329721);

procedure dev_err.ref.ref.ref($p0: ref, $p1: ref, p.2: ref);
  free requires assertsPassed;



implementation dev_err.ref.ref.ref($p0: ref, $p1: ref, p.2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref.i32($p0: ref, $p1: ref, p.2: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.i32($p0: ref, $p1: ref, p.2: i32)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref.i32.ref($p0: ref, $p1: ref, p.2: i32, p.3: ref);
  free requires assertsPassed;



implementation dev_err.ref.ref.i32.ref($p0: ref, $p1: ref, p.2: i32, p.3: ref)
{

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i32);



procedure dev_err.ref.ref($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation dev_err.ref.ref($p0: ref, $p1: ref)
{

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32);



procedure dev_err.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32)
{

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    return;
}



const update_basstate: ref;

axiom update_basstate == $sub.ref(0, 330753);

procedure update_basstate($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.7;



implementation update_basstate($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 129} {:cexpr "update_basstate:arg:set"} boogie_si_record_i32($i1);
    call {:si_unique_call 130} {:cexpr "update_basstate:arg:clear"} boogie_si_record_i32($i2);
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} ldv_spin_lock();
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 888)), $mul.ref(784, 1));
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    call {:si_unique_call 132} {:cexpr "state"} boogie_si_record_i32($i4);
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    $i5 := $xor.i32($i2, $sub.i32(0, 1));
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, $i4);
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    $i7 := $or.i32($i6, $i1);
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 888)), $mul.ref(784, 1));
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, $i7);
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 888)), $mul.ref(712, 1));
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 133} spin_unlock_irqrestore($p9, $u0);
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 331785);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 134} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 135} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const printk: ref;

axiom printk == $sub.ref(0, 332817);

procedure printk.ref.ref.i32.ref($p0: ref, p.1: ref, p.2: i32, p.3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.ref($p0: ref, p.1: ref, p.2: i32, p.3: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 1} true;
    call {:si_unique_call 136} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 137} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 1} true;
    call {:si_unique_call 138} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 139} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 1} true;
    call {:si_unique_call 140} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 141} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 1} true;
    call {:si_unique_call 142} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 143} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref($p0: ref, p.1: ref, p.2: ref) returns ($r: i32);



procedure printk.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb5:
    assume {:verifier.code 1} true;
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 1} true;
    call {:si_unique_call 144} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 145} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i32) returns ($r: i32);



procedure printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb7:
    assume {:verifier.code 1} true;
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 1} true;
    call {:si_unique_call 146} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 147} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32, p.4: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 1} true;
    call {:si_unique_call 148} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 149} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i64.i64($p0: ref, p.1: i64, p.2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i64.i64($p0: ref, p.1: i64, p.2: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb9:
    assume {:verifier.code 1} true;
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 1} true;
    call {:si_unique_call 150} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 151} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i64.i32.i32.i64($p0: ref, p.1: i64, p.2: i32, p.3: i32, p.4: i64) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i64.i32.i32.i64($p0: ref, p.1: i64, p.2: i32, p.3: i32, p.4: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb10:
    assume {:verifier.code 1} true;
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 1} true;
    call {:si_unique_call 152} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 153} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i64.ref.i32.i32.ref.i64.i32($p0: ref, p.1: i64, p.2: ref, p.3: i32, p.4: i32, p.5: ref, p.6: i64, p.7: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i64.ref.i32.i32.ref.i64.i32($p0: ref, p.1: i64, p.2: ref, p.3: i32, p.4: i32, p.5: ref, p.6: i64, p.7: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb11:
    assume {:verifier.code 1} true;
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 1} true;
    call {:si_unique_call 154} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 155} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i64($p0: ref, p.1: ref, p.2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i64($p0: ref, p.1: ref, p.2: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb12:
    assume {:verifier.code 1} true;
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 1} true;
    call {:si_unique_call 156} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 157} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i32.ref($p0: ref, p.1: i32, p.2: i32, p.3: ref) returns ($r: i32);



procedure printk.ref.i32.i32($p0: ref, p.1: i32, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i32($p0: ref, p.1: i32, p.2: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb14:
    assume {:verifier.code 1} true;
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 1} true;
    call {:si_unique_call 158} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 159} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32) returns ($r: i32);



procedure printk.ref.i32.i32.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32, p.4: i32, p.5: i32) returns ($r: i32);



const ldv_spin_lock: ref;

axiom ldv_spin_lock == $sub.ref(0, 333849);

procedure ldv_spin_lock();
  free requires assertsPassed;
  modifies $M.7;



implementation ldv_spin_lock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    $M.7 := 1;
    call {:si_unique_call 160} {:cexpr "ldv_spin"} boogie_si_record_i32(1);
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    return;
}



const spin_unlock_irqrestore: ref;

axiom spin_unlock_irqrestore == $sub.ref(0, 334881);

procedure spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.7;



implementation spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 161} {:cexpr "spin_unlock_irqrestore:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} ldv_spin_unlock();
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 163} ldv_spin_unlock_irqrestore_12($p0, $i1);
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock: ref;

axiom ldv_spin_unlock == $sub.ref(0, 335913);

procedure ldv_spin_unlock();
  free requires assertsPassed;
  modifies $M.7;



implementation ldv_spin_unlock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $M.7 := 0;
    call {:si_unique_call 164} {:cexpr "ldv_spin"} boogie_si_record_i32(0);
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock_irqrestore_12: ref;

axiom ldv_spin_unlock_irqrestore_12 == $sub.ref(0, 336945);

procedure ldv_spin_unlock_irqrestore_12($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation ldv_spin_unlock_irqrestore_12($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 165} {:cexpr "ldv_spin_unlock_irqrestore_12:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 166} _raw_spin_unlock_irqrestore($p3, $i1);
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irqrestore: ref;

axiom _raw_spin_unlock_irqrestore == $sub.ref(0, 337977);

procedure _raw_spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation _raw_spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 167} {:cexpr "_raw_spin_unlock_irqrestore:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    return;
}



const snprintf: ref;

axiom snprintf == $sub.ref(0, 339009);

procedure snprintf.ref.i64.ref.i32($p0: ref, $i1: i64, $p2: ref, p.3: i32) returns ($r: i32);



const ldv_check_alloc_flags: ref;

axiom ldv_check_alloc_flags == $sub.ref(0, 340041);

procedure ldv_check_alloc_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_alloc_flags($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} {:cexpr "ldv_check_alloc_flags:arg:flags"} boogie_si_record_i32($i0);
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    $i1 := $M.7;
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i0, 16);
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 169} ldv_error();
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_37:
    assume !assertsPassed;
    return;
}



const ldv_undef_ptr: ref;

axiom ldv_undef_ptr == $sub.ref(0, 341073);

procedure ldv_undef_ptr() returns ($r: ref);
  free requires assertsPassed;



implementation ldv_undef_ptr() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 1} true;
    call {:si_unique_call 170} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 171} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 342105);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 172} __VERIFIER_error();
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_40:
    assume !assertsPassed;
    return;
}



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 343137);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(512, 1));
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __might_sleep: ref;

axiom __might_sleep == $sub.ref(0, 344169);

procedure __might_sleep($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;



implementation __might_sleep($p0: ref, $i1: i32, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} {:cexpr "__might_sleep:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 174} {:cexpr "__might_sleep:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    return;
}



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0, 345201);

procedure INIT_LIST_HEAD($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $p0);
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p0);
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    return;
}



const prepare_to_wait_event: ref;

axiom prepare_to_wait_event == $sub.ref(0, 346233);

procedure prepare_to_wait_event($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation prepare_to_wait_event($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 175} {:cexpr "prepare_to_wait_event:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 1} true;
    call {:si_unique_call 176} $i3 := __VERIFIER_nondet_long();
    call {:si_unique_call 177} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i3);
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const schedule_timeout: ref;

axiom schedule_timeout == $sub.ref(0, 347265);

procedure schedule_timeout($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation schedule_timeout($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 178} {:cexpr "schedule_timeout:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 1} true;
    call {:si_unique_call 179} $i1 := __VERIFIER_nondet_long();
    call {:si_unique_call 180} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i1);
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const finish_wait: ref;

axiom finish_wait == $sub.ref(0, 348297);

procedure finish_wait($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation finish_wait($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    return;
}



const dev_warn: ref;

axiom dev_warn == $sub.ref(0, 349329);

procedure dev_warn.ref.ref.ref($p0: ref, $p1: ref, p.2: ref);



procedure dev_warn.ref.ref.i32.i32.i32.ref($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: ref);



procedure dev_warn.ref.ref($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation dev_warn.ref.ref($p0: ref, $p1: ref)
{

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_warn.ref.ref.i32($p0: ref, $p1: ref, p.2: i32);
  free requires assertsPassed;



implementation dev_warn.ref.ref.i32($p0: ref, $p1: ref, p.2: i32)
{

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_warn.ref.ref.i32.i32.ref($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: ref);



procedure dev_warn.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32);
  free requires assertsPassed;



implementation dev_warn.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32)
{

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_warn.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32);



procedure dev_warn.ref.ref.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32);
  free requires assertsPassed;



implementation dev_warn.ref.ref.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32)
{

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    return;
}



const req_submit: ref;

axiom req_submit == $sub.ref(0, 350361);

procedure req_submit($p0: ref, $i1: i32, $i2: i32, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $M.0, $CurrAddr, $M.17, $M.16, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22, assertsPassed;



implementation req_submit($p0: ref, $i1: i32, $i2: i32, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $p29: ref;
  var $i30: i8;
  var $p32: ref;
  var $i33: i16;
  var $p35: ref;
  var $p37: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $i55: i1;
  var $i56: i32;
  var $i57: i64;
  var $i58: i64;
  var $i59: i1;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $i67: i1;
  var $i68: i32;
  var $i69: i32;
  var $i70: i1;
  var $i71: i32;
  var $i72: i64;
  var $i73: i64;
  var $i74: i1;
  var $p76: ref;
  var $i77: i32;
  var $i78: i32;
  var $i79: i64;
  var $i80: i64;
  var $i81: i64;
  var $p83: ref;
  var $i27: i32;
  var vslice_dummy_var_31: i32;
  var vslice_dummy_var_32: i32;
  var vslice_dummy_var_33: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 181} {:cexpr "req_submit:arg:req"} boogie_si_record_i32($i1);
    call {:si_unique_call 182} {:cexpr "req_submit:arg:val"} boogie_si_record_i32($i2);
    call {:si_unique_call 183} {:cexpr "req_submit:arg:timeout"} boogie_si_record_i32($i3);
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 480)), $mul.ref(288, 1));
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 5232)), $mul.ref(5224, 1));
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, gigaset_debuglevel);
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 1048576);
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 184} $i14 := ldv__builtin_expect($i13, 0);
    call {:si_unique_call 185} {:cexpr "tmp"} boogie_si_record_i64($i14);
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} ldv_spin_lock();
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p8, $mul.ref(0, 888)), $mul.ref(788, 1));
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 888)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p29, 66);
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i32.i8($i1);
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 888)), $mul.ref(32, 1)), $mul.ref(1, 1));
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p32, $i30);
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i32.i16($i2);
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 888)), $mul.ref(32, 1)), $mul.ref(2, 1));
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p35, $i33);
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 888)), $mul.ref(32, 1)), $mul.ref(4, 1));
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p37, 0);
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 888)), $mul.ref(32, 1)), $mul.ref(6, 1));
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p39, 0);
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p8, $mul.ref(0, 888)), $mul.ref(0, 1));
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} $i42 := __create_pipe($p41, 0);
    call {:si_unique_call 191} {:cexpr "tmp___0"} boogie_si_record_i32($i42);
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p8, $mul.ref(0, 888)), $mul.ref(24, 1));
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p8, $mul.ref(0, 888)), $mul.ref(0, 1));
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    $i47 := $or.i32($i42, $sub.i32(0, 2147483648));
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p8, $mul.ref(0, 888)), $mul.ref(32, 1));
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p8);
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 192} usb_fill_control_urb($p44, $p46, $i47, $p49, $0.ref, 0, write_ctrl_callback, $p50);
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p8, $mul.ref(0, 888)), $mul.ref(168, 1));
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p51, 0);
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p8, $mul.ref(0, 888)), $mul.ref(24, 1));
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 193} $i54 := ldv_usb_submit_urb_59($p53, 32);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    call {:si_unique_call 194} {:cexpr "ret"} boogie_si_record_i32($i54);
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i54, 0);
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    $i56 := $zext.i1.i32($i55);
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    $i57 := $sext.i32.i64($i56);
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 195} $i58 := ldv__builtin_expect($i57, 0);
    call {:si_unique_call 196} {:cexpr "tmp___2"} boogie_si_record_i64($i58);
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    $i59 := $ne.i64($i58, 0);
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p8, $mul.ref(0, 888)), $mul.ref(788, 1));
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p66, $i1);
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    $i67 := $sgt.i32($i3, 0);
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p8, $mul.ref(0, 888)), $mul.ref(712, 1));
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 204} spin_unlock_irqrestore($p83, $u0);
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    $i27 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    $r := $i27;
    return;

  $bb11:
    assume $i67 == 1;
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.0, gigaset_debuglevel);
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    $i69 := $and.i32($i68, 1048576);
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    $i70 := $ne.i32($i69, 0);
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    $i71 := $zext.i1.i32($i70);
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    $i72 := $sext.i32.i64($i71);
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 200} $i73 := ldv__builtin_expect($i72, 0);
    call {:si_unique_call 201} {:cexpr "tmp___3"} boogie_si_record_i64($i73);
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    $i74 := $ne.i64($i73, 0);
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    assume {:branchcond $i74} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p8, $mul.ref(0, 888)), $mul.ref(40, 1));
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    $i77 := $mul.i32($i3, 250);
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    $i78 := $sdiv.i32($i77, 10);
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    $i79 := $sext.i32.i64($i78);
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    $i80 := $load.i64($M.0, jiffies);
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    $i81 := $add.i64($i79, $i80);
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} vslice_dummy_var_33 := ldv_mod_timer_60($p76, $i81);
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i74 == 1;
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 202} vslice_dummy_var_32 := printk.ref.i32(.str.49, $i3);
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb8:
    assume $i59 == 1;
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} $p60 := get_usb_rcmsg($i54);
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 480)), $mul.ref(288, 1));
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p62, $mul.ref(0, 5232)), $mul.ref(16, 1));
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 198} dev_err.ref.ref.i32.ref($p64, .str.48, $i1, $p60);
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p8, $mul.ref(0, 888)), $mul.ref(712, 1));
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 199} spin_unlock_irqrestore($p65, $u0);
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    $i27 := $i54;
    goto $bb6;

  SeqInstr_43:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i19 == 1;
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p8, $mul.ref(0, 888)), $mul.ref(712, 1));
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} spin_unlock_irqrestore($p20, $u0);
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 480)), $mul.ref(288, 1));
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 5232)), $mul.ref(16, 1));
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p8, $mul.ref(0, 888)), $mul.ref(788, 1));
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 189} dev_err.ref.ref.i32.i32($p24, .str.47, $i1, $i26);
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    $i27 := $sub.i32(0, 16);
    goto $bb6;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 186} vslice_dummy_var_31 := printk.ref.i32.i32(.str.46, $i1, $i2);
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const usb_kill_urb: ref;

axiom usb_kill_urb == $sub.ref(0, 351393);

procedure usb_kill_urb($p0: ref);
  free requires assertsPassed;



implementation usb_kill_urb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    return;
}



const ldv_del_timer_sync_75: ref;

axiom ldv_del_timer_sync_75 == $sub.ref(0, 352425);

procedure ldv_del_timer_sync_75($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.16, $M.18, $M.20, $M.22;



implementation ldv_del_timer_sync_75($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 205} $i1 := del_timer_sync($p0);
    call {:si_unique_call 206} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 207} disable_suitable_timer_3($p0);
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_del_timer_sync_76: ref;

axiom ldv_del_timer_sync_76 == $sub.ref(0, 353457);

procedure ldv_del_timer_sync_76($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.16, $M.18, $M.20, $M.22;



implementation ldv_del_timer_sync_76($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 208} $i1 := del_timer_sync($p0);
    call {:si_unique_call 209} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 210} disable_suitable_timer_3($p0);
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_del_timer_sync_77: ref;

axiom ldv_del_timer_sync_77 == $sub.ref(0, 354489);

procedure ldv_del_timer_sync_77($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.16, $M.18, $M.20, $M.22;



implementation ldv_del_timer_sync_77($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 211} $i1 := del_timer_sync($p0);
    call {:si_unique_call 212} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 213} disable_suitable_timer_3($p0);
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_del_timer_sync_78: ref;

axiom ldv_del_timer_sync_78 == $sub.ref(0, 355521);

procedure ldv_del_timer_sync_78($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.16, $M.18, $M.20, $M.22;



implementation ldv_del_timer_sync_78($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 214} $i1 := del_timer_sync($p0);
    call {:si_unique_call 215} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 216} disable_suitable_timer_3($p0);
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_cancel_work_sync_79: ref;

axiom ldv_cancel_work_sync_79 == $sub.ref(0, 356553);

procedure ldv_cancel_work_sync_79($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.8, $M.10, $M.12, $M.14;



implementation ldv_cancel_work_sync_79($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} $i1 := cancel_work_sync($p0);
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 218} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 219} {:cexpr "ldv_func_res"} boogie_si_record_i8($i4);
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 220} disable_work_1($p0);
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const cancel_work_sync: ref;

axiom cancel_work_sync == $sub.ref(0, 357585);

procedure cancel_work_sync($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation cancel_work_sync($p0: ref) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 1} true;
    call {:si_unique_call 221} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 222} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const disable_work_1: ref;

axiom disable_work_1 == $sub.ref(0, 358617);

procedure disable_work_1($p0: ref);
  free requires assertsPassed;
  modifies $M.8, $M.10, $M.12, $M.14;



implementation disable_work_1($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i31: i64;
  var $i32: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    $i1 := $M.8;
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 3);
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i2 == 1);
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    $i3 := $M.8;
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 2);
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i9 := $M.10;
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 3);
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb10, $bb12;

  $bb12:
    assume !($i10 == 1);
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    $i11 := $M.10;
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 2);
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i17 := $M.12;
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 3);
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb21;

  $bb21:
    assume !($i18 == 1);
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    $i19 := $M.12;
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 2);
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i25 := $M.14;
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 3);
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb30;

  $bb30:
    assume !($i26 == 1);
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $i27 := $M.14;
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    return;

  $bb31:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p29 := $M.15;
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p0);
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    $i32 := $eq.i64($i30, $i31);
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb33;

  $bb34:
    assume $i32 == 1;
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    $M.14 := 1;
    call {:si_unique_call 226} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(1);
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb28:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb29;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p21 := $M.13;
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p0);
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i22, $i23);
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb24;

  $bb25:
    assume $i24 == 1;
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    $M.12 := 1;
    call {:si_unique_call 225} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(1);
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb20;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p13 := $M.11;
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p0);
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i14, $i15);
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb15;

  $bb16:
    assume $i16 == 1;
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    $M.10 := 1;
    call {:si_unique_call 224} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(1);
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb11;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p5 := $M.9;
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p0);
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i6, $i7);
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb6;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    $M.8 := 1;
    call {:si_unique_call 223} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(1);
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb2;
}



const del_timer_sync: ref;

axiom del_timer_sync == $sub.ref(0, 359649);

procedure del_timer_sync($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation del_timer_sync($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 1} true;
    call {:si_unique_call 227} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 228} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const disable_suitable_timer_3: ref;

axiom disable_suitable_timer_3 == $sub.ref(0, 360681);

procedure disable_suitable_timer_3($p0: ref);
  free requires assertsPassed;
  modifies $M.16, $M.18, $M.20, $M.22;



implementation disable_suitable_timer_3($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i64;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i64;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i64;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $i21: i64;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    $i1 := $M.16;
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i7 := $M.18;
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i13 := $M.20;
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i19 := $M.22;
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb20:
    assume $i20 == 1;
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p0);
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    $p22 := $M.23;
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i21, $i23);
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb22;

  $bb23:
    assume $i24 == 1;
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    $M.22 := 0;
    call {:si_unique_call 232} {:cexpr "ldv_timer_3_3"} boogie_si_record_i32(0);
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb14:
    assume $i14 == 1;
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p0);
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    $p16 := $M.21;
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i15, $i17);
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb16;

  $bb17:
    assume $i18 == 1;
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    $M.20 := 0;
    call {:si_unique_call 231} {:cexpr "ldv_timer_3_2"} boogie_si_record_i32(0);
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb8:
    assume $i8 == 1;
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p0);
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    $p10 := $M.19;
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i9, $i11);
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb10;

  $bb11:
    assume $i12 == 1;
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    $M.18 := 0;
    call {:si_unique_call 230} {:cexpr "ldv_timer_3_1"} boogie_si_record_i32(0);
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    $p4 := $M.17;
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i3, $i5);
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    $M.16 := 0;
    call {:si_unique_call 229} {:cexpr "ldv_timer_3_0"} boogie_si_record_i32(0);
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const __create_pipe: ref;

axiom __create_pipe == $sub.ref(0, 361713);

procedure __create_pipe($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __create_pipe($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 233} {:cexpr "__create_pipe:arg:endpoint"} boogie_si_record_i32($i1);
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(0, 1));
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    $i4 := $shl.i32($i3, 8);
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    $i5 := $shl.i32($i1, 15);
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    $i6 := $or.i32($i4, $i5);
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const write_ctrl_callback: ref;

axiom write_ctrl_callback == $sub.ref(0, 362745);

procedure write_ctrl_callback($p0: ref);



const usb_fill_control_urb: ref;

axiom usb_fill_control_urb == $sub.ref(0, 363777);

procedure usb_fill_control_urb($p0: ref, $p1: ref, $i2: i32, $p3: ref, $p4: ref, $i5: i32, $p6: ref, $p7: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_fill_control_urb($p0: ref, $p1: ref, $i2: i32, $p3: ref, $p4: ref, $i5: i32, $p6: ref, $p7: ref)
{
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 234} {:cexpr "usb_fill_control_urb:arg:pipe"} boogie_si_record_i32($i2);
    call {:si_unique_call 235} {:cexpr "usb_fill_control_urb:arg:buffer_length"} boogie_si_record_i32($i5);
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, $p1);
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, $i2);
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(144, 1));
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, $p3);
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, $p4);
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, $i5);
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, $p6);
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p14, $p7);
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_submit_urb_59: ref;

axiom ldv_usb_submit_urb_59 == $sub.ref(0, 364809);

procedure ldv_usb_submit_urb_59($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_submit_urb_59($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} {:cexpr "ldv_usb_submit_urb_59:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 237} ldv_check_alloc_flags($i1);
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 238} $p2 := ldv_undef_ptr();
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_46:
    assume !assertsPassed;
    return;
}



const ldv_mod_timer_60: ref;

axiom ldv_mod_timer_60 == $sub.ref(0, 365841);

procedure ldv_mod_timer_60($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.17, $M.0, $M.16, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22;



implementation ldv_mod_timer_60($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 239} {:cexpr "ldv_mod_timer_60:arg:ldv_func_arg2"} boogie_si_record_i64($i1);
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 240} $i2 := mod_timer($p0, $i1);
    call {:si_unique_call 241} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 242} activate_pending_timer_3($p0, $i1, 1);
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const mod_timer: ref;

axiom mod_timer == $sub.ref(0, 366873);

procedure mod_timer($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation mod_timer($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 243} {:cexpr "mod_timer:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 1} true;
    call {:si_unique_call 244} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 245} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const activate_pending_timer_3: ref;

axiom activate_pending_timer_3 == $sub.ref(0, 367905);

procedure activate_pending_timer_3($p0: ref, $i1: i64, $i2: i32);
  free requires assertsPassed;
  modifies $M.17, $M.0, $M.16, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22;



implementation activate_pending_timer_3($p0: ref, $i1: i64, $i2: i32)
{
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i64;
  var $i33: i1;
  var $i34: i32;
  var $i35: i1;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 246} {:cexpr "activate_pending_timer_3:arg:data"} boogie_si_record_i64($i1);
    call {:si_unique_call 247} {:cexpr "activate_pending_timer_3:arg:pending_flag"} boogie_si_record_i32($i2);
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    $p3 := $M.17;
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p0);
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i4, $i5);
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p12 := $M.19;
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p0);
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i13, $i14);
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p21 := $M.21;
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p0);
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i22, $i23);
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p30 := $M.23;
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p0);
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    $i33 := $eq.i64($i31, $i32);
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 252} activate_suitable_timer_3($p0, $i1);
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb29:
    assume $i33 == 1;
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    $i34 := $M.22;
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 2);
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb33;

  $bb33:
    assume !($i35 == 1);
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i2, 0);
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb34:
    assume {:verifier.code 0} true;
    assume $i36 == 1;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $M.23 := $p0;
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    $p37 := $M.23;
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p38, $i1);
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    $M.22 := 1;
    call {:si_unique_call 251} {:cexpr "ldv_timer_3_3"} boogie_si_record_i32(1);
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb31:
    assume {:verifier.code 0} true;
    assume $i35 == 1;
    goto $bb32;

  $bb20:
    assume $i24 == 1;
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    $i25 := $M.20;
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 2);
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb24;

  $bb24:
    assume !($i26 == 1);
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i2, 0);
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i27 == 1;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $M.21 := $p0;
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    $p28 := $M.21;
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p29, $i1);
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    $M.20 := 1;
    call {:si_unique_call 250} {:cexpr "ldv_timer_3_2"} boogie_si_record_i32(1);
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb23;

  $bb11:
    assume $i15 == 1;
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    $i16 := $M.18;
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 2);
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i17 == 1);
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i2, 0);
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $M.19 := $p0;
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    $p19 := $M.19;
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p20, $i1);
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    $M.18 := 1;
    call {:si_unique_call 249} {:cexpr "ldv_timer_3_1"} boogie_si_record_i32(1);
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb14;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    $i7 := $M.16;
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 2);
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i8 == 1);
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i2, 0);
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $M.17 := $p0;
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    $p10 := $M.17;
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p11, $i1);
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    $M.16 := 1;
    call {:si_unique_call 248} {:cexpr "ldv_timer_3_0"} boogie_si_record_i32(1);
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb4;
}



const activate_suitable_timer_3: ref;

axiom activate_suitable_timer_3 == $sub.ref(0, 368937);

procedure activate_suitable_timer_3($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.17, $M.0, $M.16, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22;



implementation activate_suitable_timer_3($p0: ref, $i1: i64)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 253} {:cexpr "activate_suitable_timer_3:arg:data"} boogie_si_record_i64($i1);
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    $i2 := $M.16;
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i3 == 1);
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    $i4 := $M.16;
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 2);
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i8 := $M.18;
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i9 == 1);
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    $i10 := $M.18;
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 2);
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i14 := $M.20;
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 0);
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb14, $bb16;

  $bb16:
    assume !($i15 == 1);
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    $i16 := $M.20;
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 2);
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i20 := $M.22;
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 0);
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i21 == 1);
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    $i22 := $M.22;
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 2);
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $M.23 := $p0;
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    $p24 := $M.23;
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p25, $i1);
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    $M.22 := 1;
    call {:si_unique_call 257} {:cexpr "ldv_timer_3_3"} boogie_si_record_i32(1);
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb21;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $M.21 := $p0;
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    $p18 := $M.21;
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p19, $i1);
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    $M.20 := 1;
    call {:si_unique_call 256} {:cexpr "ldv_timer_3_2"} boogie_si_record_i32(1);
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb15;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $M.19 := $p0;
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    $p12 := $M.19;
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p13, $i1);
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    $M.18 := 1;
    call {:si_unique_call 255} {:cexpr "ldv_timer_3_1"} boogie_si_record_i32(1);
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb9;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $M.17 := $p0;
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    $p6 := $M.17;
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p7, $i1);
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    $M.16 := 1;
    call {:si_unique_call 254} {:cexpr "ldv_timer_3_0"} boogie_si_record_i32(1);
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;
}



const ldv_del_timer_56: ref;

axiom ldv_del_timer_56 == $sub.ref(0, 369969);

procedure ldv_del_timer_56($p0: ref) returns ($r: i32);



const get_usb_statmsg: ref;

axiom get_usb_statmsg == $sub.ref(0, 371001);

procedure get_usb_statmsg($i0: i32) returns ($r: ref);



const dev_notice: ref;

axiom dev_notice == $sub.ref(0, 372033);

procedure dev_notice.ref.ref($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation dev_notice.ref.ref($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_notice.ref.ref.i32($p0: ref, $p1: ref, p.2: i32);



procedure dev_notice.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32);



procedure dev_notice.ref.ref.i32.ref.i32($p0: ref, $p1: ref, p.2: i32, p.3: ref, p.4: i32);



const ldv_usb_submit_urb_57: ref;

axiom ldv_usb_submit_urb_57 == $sub.ref(0, 373065);

procedure ldv_usb_submit_urb_57($p0: ref, $i1: i32) returns ($r: i32);



const ldv_del_timer_58: ref;

axiom ldv_del_timer_58 == $sub.ref(0, 374097);

procedure ldv_del_timer_58($p0: ref) returns ($r: i32);



const __wake_up: ref;

axiom __wake_up == $sub.ref(0, 375129);

procedure __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref);
  free requires assertsPassed;



implementation __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 258} {:cexpr "__wake_up:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 259} {:cexpr "__wake_up:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    return;
}



const del_timer: ref;

axiom del_timer == $sub.ref(0, 376161);

procedure del_timer($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation del_timer($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 1} true;
    call {:si_unique_call 260} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 261} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const _dev_info: ref;

axiom _dev_info == $sub.ref(0, 377193);

procedure _dev_info.ref.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    return;
}



procedure _dev_info.ref.ref($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation _dev_info.ref.ref($p0: ref, $p1: ref)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    return;
}



const gigaset_bchannel_down: ref;

axiom gigaset_bchannel_down == $sub.ref(0, 378225);

procedure gigaset_bchannel_down($p0: ref);
  free requires assertsPassed;
  modifies $M.7, $CurrAddr;



implementation gigaset_bchannel_down($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var vslice_dummy_var_34: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 480)), $mul.ref(288, 1));
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 480)), $mul.ref(120, 1));
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 262} vslice_dummy_var_34 := gigaset_add_event($p2, $p3, $sub.i32(0, 118), $0.ref, 0, $0.ref);
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 480)), $mul.ref(288, 1));
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 263} gigaset_schedule_event($p6);
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    return;
}



const gigaset_stop: ref;

axiom gigaset_stop == $sub.ref(0, 379257);

procedure gigaset_stop($p0: ref);
  free requires assertsPassed;



implementation gigaset_stop($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    return;
}



const ldv_del_timer_sync_70: ref;

axiom ldv_del_timer_sync_70 == $sub.ref(0, 380289);

procedure ldv_del_timer_sync_70($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.16, $M.18, $M.20, $M.22;



implementation ldv_del_timer_sync_70($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 264} $i1 := del_timer_sync($p0);
    call {:si_unique_call 265} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 266} disable_suitable_timer_3($p0);
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_del_timer_sync_71: ref;

axiom ldv_del_timer_sync_71 == $sub.ref(0, 381321);

procedure ldv_del_timer_sync_71($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.16, $M.18, $M.20, $M.22;



implementation ldv_del_timer_sync_71($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 267} $i1 := del_timer_sync($p0);
    call {:si_unique_call 268} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 269} disable_suitable_timer_3($p0);
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_del_timer_sync_72: ref;

axiom ldv_del_timer_sync_72 == $sub.ref(0, 382353);

procedure ldv_del_timer_sync_72($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.16, $M.18, $M.20, $M.22;



implementation ldv_del_timer_sync_72($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 270} $i1 := del_timer_sync($p0);
    call {:si_unique_call 271} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 272} disable_suitable_timer_3($p0);
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_del_timer_sync_73: ref;

axiom ldv_del_timer_sync_73 == $sub.ref(0, 383385);

procedure ldv_del_timer_sync_73($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.16, $M.18, $M.20, $M.22;



implementation ldv_del_timer_sync_73($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 273} $i1 := del_timer_sync($p0);
    call {:si_unique_call 274} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} disable_suitable_timer_3($p0);
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_cancel_work_sync_74: ref;

axiom ldv_cancel_work_sync_74 == $sub.ref(0, 384417);

procedure ldv_cancel_work_sync_74($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.8, $M.10, $M.12, $M.14;



implementation ldv_cancel_work_sync_74($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 276} $i1 := cancel_work_sync($p0);
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 277} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 278} {:cexpr "ldv_func_res"} boogie_si_record_i8($i4);
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 279} disable_work_1($p0);
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const freeurbs: ref;

axiom freeurbs == $sub.ref(0, 385449);

procedure freeurbs($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation freeurbs($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p19: ref;
  var $p20: ref;
  var $p23: ref;
  var $p24: ref;
  var $p27: ref;
  var $p29: ref;
  var $p30: ref;
  var $p32: ref;
  var $p33: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p58: ref;
  var $p59: ref;
  var $p62: ref;
  var $p63: ref;
  var $p66: ref;
  var $p69: ref;
  var $p70: ref;
  var $p73: ref;
  var $p74: ref;
  var $p77: ref;
  var $p79: ref;
  var $p80: ref;
  var $p82: ref;
  var $p83: ref;
  var $p85: ref;
  var $p87: ref;
  var $p88: ref;
  var $p90: ref;
  var $p91: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p102: ref;
  var $p103: ref;
  var $p106: ref;
  var $p107: ref;
  var $p110: ref;
  var $p113: ref;
  var $p114: ref;
  var $p117: ref;
  var $p118: ref;
  var $p121: ref;
  var $p124: ref;
  var $p125: ref;
  var $p128: ref;
  var $p129: ref;
  var $p132: ref;
  var $p134: ref;
  var $p135: ref;
  var $p137: ref;
  var $p138: ref;
  var $p140: ref;
  var $p142: ref;
  var $p143: ref;
  var $p145: ref;
  var $p146: ref;
  var $p148: ref;
  var $p150: ref;
  var $p151: ref;
  var $p153: ref;
  var $p154: ref;
  var $p156: ref;
  var vslice_dummy_var_35: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 5232)), $mul.ref(5224, 1));
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, gigaset_debuglevel);
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 32768);
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 281} {:cexpr "tmp"} boogie_si_record_i64($i9);
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 5232)), $mul.ref(160, 1));
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 480)), $mul.ref(384, 1));
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($add.ref($p16, $mul.ref(0, 824)), $mul.ref(80, 1)), $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 283} usb_kill_urb($p20);
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($add.ref($p16, $mul.ref(0, 824)), $mul.ref(80, 1)), $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 284} usb_free_urb($p24);
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($add.ref($p16, $mul.ref(0, 824)), $mul.ref(80, 1)), $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p27, $0.ref);
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($add.ref($p16, $mul.ref(0, 824)), $mul.ref(80, 1)), $mul.ref(1, 24)), $mul.ref(0, 1));
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} usb_kill_urb($p59);
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($add.ref($p16, $mul.ref(0, 824)), $mul.ref(80, 1)), $mul.ref(1, 24)), $mul.ref(0, 1));
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} usb_free_urb($p63);
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($add.ref($p16, $mul.ref(0, 824)), $mul.ref(80, 1)), $mul.ref(1, 24)), $mul.ref(0, 1));
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p66, $0.ref);
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($add.ref($p16, $mul.ref(0, 824)), $mul.ref(80, 1)), $mul.ref(2, 24)), $mul.ref(0, 1));
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.0, $p69);
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 299} usb_kill_urb($p70);
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($add.ref($p16, $mul.ref(0, 824)), $mul.ref(80, 1)), $mul.ref(2, 24)), $mul.ref(0, 1));
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.0, $p73);
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 300} usb_free_urb($p74);
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($add.ref($p16, $mul.ref(0, 824)), $mul.ref(80, 1)), $mul.ref(2, 24)), $mul.ref(0, 1));
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p77, $0.ref);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p16, $mul.ref(0, 824)), $mul.ref(304, 1)), $mul.ref(0, 8));
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 287} usb_kill_urb($p30);
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p16, $mul.ref(0, 824)), $mul.ref(304, 1)), $mul.ref(0, 8));
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} usb_free_urb($p33);
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p16, $mul.ref(0, 824)), $mul.ref(304, 1)), $mul.ref(0, 8));
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p35, $0.ref);
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($add.ref($p16, $mul.ref(0, 824)), $mul.ref(304, 1)), $mul.ref(1, 8));
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.0, $p79);
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} usb_kill_urb($p80);
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($add.ref($p16, $mul.ref(0, 824)), $mul.ref(304, 1)), $mul.ref(1, 8));
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.0, $p82);
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} usb_free_urb($p83);
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref($p16, $mul.ref(0, 824)), $mul.ref(304, 1)), $mul.ref(1, 8));
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p85, $0.ref);
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($add.ref($p16, $mul.ref(0, 824)), $mul.ref(304, 1)), $mul.ref(2, 8));
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.0, $p87);
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 301} usb_kill_urb($p88);
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($add.ref($p16, $mul.ref(0, 824)), $mul.ref(304, 1)), $mul.ref(2, 8));
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.0, $p90);
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 302} usb_free_urb($p91);
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($add.ref($p16, $mul.ref(0, 824)), $mul.ref(304, 1)), $mul.ref(2, 8));
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p93, $0.ref);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p0, $mul.ref(0, 5232)), $mul.ref(160, 1));
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    $p95 := $load.ref($M.0, $p94);
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p95, $mul.ref(1, 480)), $mul.ref(384, 1));
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    $p98 := $bitcast.ref.ref($p97);
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    $p99 := $load.ref($M.0, $p98);
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($add.ref($add.ref($p99, $mul.ref(0, 824)), $mul.ref(80, 1)), $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    $p103 := $load.ref($M.0, $p102);
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 303} usb_kill_urb($p103);
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($add.ref($add.ref($p99, $mul.ref(0, 824)), $mul.ref(80, 1)), $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    $p107 := $load.ref($M.0, $p106);
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 304} usb_free_urb($p107);
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($add.ref($add.ref($p99, $mul.ref(0, 824)), $mul.ref(80, 1)), $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p110, $0.ref);
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($add.ref($add.ref($p99, $mul.ref(0, 824)), $mul.ref(80, 1)), $mul.ref(1, 24)), $mul.ref(0, 1));
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    $p114 := $load.ref($M.0, $p113);
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} usb_kill_urb($p114);
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($add.ref($add.ref($p99, $mul.ref(0, 824)), $mul.ref(80, 1)), $mul.ref(1, 24)), $mul.ref(0, 1));
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    $p118 := $load.ref($M.0, $p117);
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 306} usb_free_urb($p118);
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($add.ref($add.ref($p99, $mul.ref(0, 824)), $mul.ref(80, 1)), $mul.ref(1, 24)), $mul.ref(0, 1));
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p121, $0.ref);
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($add.ref($add.ref($p99, $mul.ref(0, 824)), $mul.ref(80, 1)), $mul.ref(2, 24)), $mul.ref(0, 1));
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    $p125 := $load.ref($M.0, $p124);
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} usb_kill_urb($p125);
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($add.ref($add.ref($p99, $mul.ref(0, 824)), $mul.ref(80, 1)), $mul.ref(2, 24)), $mul.ref(0, 1));
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    $p129 := $load.ref($M.0, $p128);
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} usb_free_urb($p129);
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($add.ref($add.ref($p99, $mul.ref(0, 824)), $mul.ref(80, 1)), $mul.ref(2, 24)), $mul.ref(0, 1));
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p132, $0.ref);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($add.ref($p99, $mul.ref(0, 824)), $mul.ref(304, 1)), $mul.ref(0, 8));
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    $p135 := $load.ref($M.0, $p134);
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 309} usb_kill_urb($p135);
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($add.ref($p99, $mul.ref(0, 824)), $mul.ref(304, 1)), $mul.ref(0, 8));
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    $p138 := $load.ref($M.0, $p137);
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} usb_free_urb($p138);
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($add.ref($p99, $mul.ref(0, 824)), $mul.ref(304, 1)), $mul.ref(0, 8));
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p140, $0.ref);
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($add.ref($p99, $mul.ref(0, 824)), $mul.ref(304, 1)), $mul.ref(1, 8));
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    $p143 := $load.ref($M.0, $p142);
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 311} usb_kill_urb($p143);
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($add.ref($p99, $mul.ref(0, 824)), $mul.ref(304, 1)), $mul.ref(1, 8));
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    $p146 := $load.ref($M.0, $p145);
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 312} usb_free_urb($p146);
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($add.ref($p99, $mul.ref(0, 824)), $mul.ref(304, 1)), $mul.ref(1, 8));
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p148, $0.ref);
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($add.ref($p99, $mul.ref(0, 824)), $mul.ref(304, 1)), $mul.ref(2, 8));
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    $p151 := $load.ref($M.0, $p150);
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} usb_kill_urb($p151);
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($add.ref($p99, $mul.ref(0, 824)), $mul.ref(304, 1)), $mul.ref(2, 8));
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    $p154 := $load.ref($M.0, $p153);
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 314} usb_free_urb($p154);
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($add.ref($p99, $mul.ref(0, 824)), $mul.ref(304, 1)), $mul.ref(2, 8));
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p156, $0.ref);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p3, $mul.ref(0, 888)), $mul.ref(480, 1));
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 291} usb_kill_urb($p37);
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p3, $mul.ref(0, 888)), $mul.ref(480, 1));
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 292} usb_free_urb($p39);
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p3, $mul.ref(0, 888)), $mul.ref(480, 1));
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p40, $0.ref);
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p3, $mul.ref(0, 888)), $mul.ref(304, 1));
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} usb_kill_urb($p42);
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p3, $mul.ref(0, 888)), $mul.ref(304, 1));
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 294} usb_free_urb($p44);
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p3, $mul.ref(0, 888)), $mul.ref(304, 1));
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p45, $0.ref);
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p3, $mul.ref(0, 888)), $mul.ref(328, 1));
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} usb_kill_urb($p47);
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p3, $mul.ref(0, 888)), $mul.ref(328, 1));
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 296} usb_free_urb($p49);
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p3, $mul.ref(0, 888)), $mul.ref(328, 1));
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p50, $0.ref);
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p3, $mul.ref(0, 888)), $mul.ref(24, 1));
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 297} usb_kill_urb($p52);
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p3, $mul.ref(0, 888)), $mul.ref(24, 1));
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 298} usb_free_urb($p54);
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p3, $mul.ref(0, 888)), $mul.ref(24, 1));
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p55, $0.ref);
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} vslice_dummy_var_35 := printk.ref.ref(.str.187, .str.188);
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const usb_set_intfdata: ref;

axiom usb_set_intfdata == $sub.ref(0, 386481);

procedure usb_set_intfdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_set_intfdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 315} dev_set_drvdata($p2, $p1);
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    return;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 387513);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 316} free_($p0);
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    return;
}



const usb_put_dev: ref;

axiom usb_put_dev == $sub.ref(0, 388545);

procedure usb_put_dev($p0: ref);
  free requires assertsPassed;



implementation usb_put_dev($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    return;
}



const gigaset_freecs: ref;

axiom gigaset_freecs == $sub.ref(0, 389577);

procedure gigaset_freecs($p0: ref);
  free requires assertsPassed;



implementation gigaset_freecs($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 390609);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 317} $free($p0);
    return;
}



const dev_set_drvdata: ref;

axiom dev_set_drvdata == $sub.ref(0, 391641);

procedure dev_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation dev_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(512, 1));
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p1);
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    return;
}



const usb_free_urb: ref;

axiom usb_free_urb == $sub.ref(0, 392673);

procedure usb_free_urb($p0: ref);
  free requires assertsPassed;



implementation usb_free_urb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    return;
}



const gigaset_add_event: ref;

axiom gigaset_add_event == $sub.ref(0, 393705);

procedure gigaset_add_event($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref) returns ($r: ref);
  free requires assertsPassed;



implementation gigaset_add_event($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref) returns ($r: ref)
{
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 318} {:cexpr "gigaset_add_event:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 319} {:cexpr "gigaset_add_event:arg:arg4"} boogie_si_record_i32($i4);
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} $p6 := external_alloc();
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;
}



const gigaset_schedule_event: ref;

axiom gigaset_schedule_event == $sub.ref(0, 394737);

procedure gigaset_schedule_event($p0: ref);
  free requires assertsPassed;
  modifies $M.7, $CurrAddr;



implementation gigaset_schedule_event($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 321} ldv_spin_lock();
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 5232)), $mul.ref(1608, 1));
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 5232)), $mul.ref(176, 1));
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 323} spin_unlock_irqrestore($p5, $u0);
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 5232)), $mul.ref(1984, 1));
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} tasklet_schedule($p4);
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const tasklet_schedule: ref;

axiom tasklet_schedule == $sub.ref(0, 395769);

procedure tasklet_schedule($p0: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation tasklet_schedule($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} $i2 := test_and_set_bit(0, $p1);
    call {:si_unique_call 325} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} __tasklet_schedule($p0);
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const test_and_set_bit: ref;

axiom test_and_set_bit == $sub.ref(0, 396801);

procedure test_and_set_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation test_and_set_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 327} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 328} {:cexpr "test_and_set_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 329} devirtbounce(0, $p1, $p2, $i0, $p1);
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.24, $p2);
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    $i4 := $sext.i8.i32($i3);
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const __tasklet_schedule: ref;

axiom __tasklet_schedule == $sub.ref(0, 397833);

procedure __tasklet_schedule($p0: ref);
  free requires assertsPassed;



implementation __tasklet_schedule($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 398865);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 1} true;
    call {:si_unique_call 330} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 331} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const interface_to_usbdev: ref;

axiom interface_to_usbdev == $sub.ref(0, 399897);

procedure interface_to_usbdev($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation interface_to_usbdev($p0: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref($sub.ref(0, 144), 2040));
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const usb_set_interface: ref;

axiom usb_set_interface == $sub.ref(0, 400929);

procedure usb_set_interface($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usb_set_interface($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 332} {:cexpr "usb_set_interface:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 333} {:cexpr "usb_set_interface:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 1} true;
    call {:si_unique_call 334} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 335} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const gigaset_initcs: ref;

axiom gigaset_initcs == $sub.ref(0, 401961);

procedure gigaset_initcs($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $p5: ref) returns ($r: ref);
  free requires assertsPassed;



implementation gigaset_initcs($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $p5: ref) returns ($r: ref)
{
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} {:cexpr "gigaset_initcs:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 337} {:cexpr "gigaset_initcs:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 338} {:cexpr "gigaset_initcs:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 339} {:cexpr "gigaset_initcs:arg:arg4"} boogie_si_record_i32($i4);
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 340} $p6 := external_alloc();
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;
}



const usb_get_dev: ref;

axiom usb_get_dev == $sub.ref(0, 402993);

procedure usb_get_dev($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation usb_get_dev($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 341} $p1 := external_alloc();
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_usb_alloc_urb_63: ref;

axiom ldv_usb_alloc_urb_63 == $sub.ref(0, 404025);

procedure ldv_usb_alloc_urb_63($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_alloc_urb_63($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 342} {:cexpr "ldv_usb_alloc_urb_63:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    call {:si_unique_call 343} {:cexpr "ldv_usb_alloc_urb_63:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} ldv_check_alloc_flags($i1);
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 345} $p2 := ldv_undef_ptr();
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  SeqInstr_49:
    assume !assertsPassed;
    return;
}



const ldv_usb_alloc_urb_64: ref;

axiom ldv_usb_alloc_urb_64 == $sub.ref(0, 405057);

procedure ldv_usb_alloc_urb_64($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_alloc_urb_64($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 346} {:cexpr "ldv_usb_alloc_urb_64:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    call {:si_unique_call 347} {:cexpr "ldv_usb_alloc_urb_64:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} ldv_check_alloc_flags($i1);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 349} $p2 := ldv_undef_ptr();
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  SeqInstr_52:
    assume !assertsPassed;
    return;
}



const ldv_usb_alloc_urb_65: ref;

axiom ldv_usb_alloc_urb_65 == $sub.ref(0, 406089);

procedure ldv_usb_alloc_urb_65($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_alloc_urb_65($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 350} {:cexpr "ldv_usb_alloc_urb_65:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    call {:si_unique_call 351} {:cexpr "ldv_usb_alloc_urb_65:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} ldv_check_alloc_flags($i1);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 353} $p2 := ldv_undef_ptr();
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  SeqInstr_55:
    assume !assertsPassed;
    return;
}



const ldv_usb_alloc_urb_66: ref;

axiom ldv_usb_alloc_urb_66 == $sub.ref(0, 407121);

procedure ldv_usb_alloc_urb_66($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_alloc_urb_66($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 354} {:cexpr "ldv_usb_alloc_urb_66:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    call {:si_unique_call 355} {:cexpr "ldv_usb_alloc_urb_66:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 356} ldv_check_alloc_flags($i1);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} $p2 := ldv_undef_ptr();
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  SeqInstr_58:
    assume !assertsPassed;
    return;
}



const ldv_usb_alloc_urb_67: ref;

axiom ldv_usb_alloc_urb_67 == $sub.ref(0, 408153);

procedure ldv_usb_alloc_urb_67($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_alloc_urb_67($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 358} {:cexpr "ldv_usb_alloc_urb_67:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    call {:si_unique_call 359} {:cexpr "ldv_usb_alloc_urb_67:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 360} ldv_check_alloc_flags($i1);
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} $p2 := ldv_undef_ptr();
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  SeqInstr_61:
    assume !assertsPassed;
    return;
}



const ldv_usb_alloc_urb_68: ref;

axiom ldv_usb_alloc_urb_68 == $sub.ref(0, 409185);

procedure ldv_usb_alloc_urb_68($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_alloc_urb_68($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 362} {:cexpr "ldv_usb_alloc_urb_68:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    call {:si_unique_call 363} {:cexpr "ldv_usb_alloc_urb_68:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 364} ldv_check_alloc_flags($i1);
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 365} $p2 := ldv_undef_ptr();
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  SeqInstr_64:
    assume !assertsPassed;
    return;
}



const usb_endpoint_num: ref;

axiom usb_endpoint_num == $sub.ref(0, 410217);

procedure usb_endpoint_num($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_num($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 15);
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const read_int_callback: ref;

axiom read_int_callback == $sub.ref(0, 411249);

procedure read_int_callback($p0: ref);



const usb_fill_int_urb: ref;

axiom usb_fill_int_urb == $sub.ref(0, 412281);

procedure usb_fill_int_urb($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $p6: ref, $i7: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_fill_int_urb($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $p6: ref, $i7: i32)
{
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $i20: i1;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 366} {:cexpr "usb_fill_int_urb:arg:pipe"} boogie_si_record_i32($i2);
    call {:si_unique_call 367} {:cexpr "usb_fill_int_urb:arg:buffer_length"} boogie_si_record_i32($i4);
    call {:si_unique_call 368} {:cexpr "usb_fill_int_urb:arg:interval"} boogie_si_record_i32($i7);
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, $p1);
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, $i2);
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, $p3);
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, $i4);
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, $p5);
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, $p6);
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 2040)), $mul.ref(28, 1));
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 3);
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i16 == 1);
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 2040)), $mul.ref(28, 1));
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 5);
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i19 == 1);
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(168, 1));
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, $i7);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(160, 1));
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, $sub.i32(0, 1));
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb2;

  $bb2:
    call {:si_unique_call 369} {:cexpr "usb_fill_int_urb:arg:_max1"} boogie_si_record_i32($i7);
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    $i20 := $sgt.i32($i7, 1);
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i20 == 1);
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    $i21 := 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i21, 16);
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i22 == 1);
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    $i23 := 16;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    $i24 := $add.i32($i23, $sub.i32(0, 1));
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    $i25 := $shl.i32(1, $i24);
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(168, 1));
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, $i25);
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i22 == 1;
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    $i23 := $i21;
    goto $bb11;

  $bb6:
    assume $i20 == 1;
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    $i21 := $i7;
    goto $bb8;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb2;
}



const ldv_usb_submit_urb_69: ref;

axiom ldv_usb_submit_urb_69 == $sub.ref(0, 413313);

procedure ldv_usb_submit_urb_69($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_submit_urb_69($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 370} {:cexpr "ldv_usb_submit_urb_69:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} ldv_check_alloc_flags($i1);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 372} $p2 := ldv_undef_ptr();
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_67:
    assume !assertsPassed;
    return;
}



const gigaset_start: ref;

axiom gigaset_start == $sub.ref(0, 414345);

procedure gigaset_start($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation gigaset_start($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 1} true;
    call {:si_unique_call 373} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 374} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const schedule_work: ref;

axiom schedule_work == $sub.ref(0, 415377);

procedure schedule_work($p0: ref) returns ($r: i1);



const ldv_mod_timer_48: ref;

axiom ldv_mod_timer_48 == $sub.ref(0, 416409);

procedure ldv_mod_timer_48($p0: ref, $i1: i64) returns ($r: i32);



const ldv_del_timer_49: ref;

axiom ldv_del_timer_49 == $sub.ref(0, 417441);

procedure ldv_del_timer_49($p0: ref) returns ($r: i32);



const start_cbsend: ref;

axiom start_cbsend == $sub.ref(0, 418473);

procedure start_cbsend($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $M.0, $CurrAddr, $M.17, $M.16, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22, assertsPassed;



implementation start_cbsend($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i25: i64;
  var $i26: i64;
  var $i27: i1;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var $p37: ref;
  var $i38: i64;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $i45: i1;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $i54: i32;
  var $i55: i1;
  var $i56: i32;
  var $i57: i64;
  var $i58: i64;
  var $i59: i1;
  var $i60: i32;
  var $p61: ref;
  var $i62: i64;
  var $i63: i1;
  var $p47: ref;
  var $i48: i32;
  var $i65: i32;
  var $i66: i32;
  var $i67: i1;
  var $i68: i32;
  var $i64: i32;
  var $i46: i32;
  var $p69: ref;
  var $i16: i32;
  var vslice_dummy_var_36: i32;
  var vslice_dummy_var_37: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 5232)), $mul.ref(5224, 1));
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 888)), $mul.ref(784, 1));
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 256);
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 888)), $mul.ref(784, 1));
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i18, 1);
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 0);
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} ldv_spin_lock();
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p3, $mul.ref(0, 888)), $mul.ref(784, 1));
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 5232)), $mul.ref(408, 1));
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p43);
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    $i45 := $ne.i64($i44, 0);
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    $i46 := 0;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i45 == 1);
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 5232)), $mul.ref(424, 1));
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} spin_unlock_irqrestore($p69, $u0);
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    $i16 := $i46;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb25:
    assume $i45 == 1;
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $p47, $i48 := $p43, 0;
    goto $bb28;

  $bb28:
    call $p49, $p50, $p51, $p52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $p61, $i62, $i63, $p47, $i48, $i65, $i66, $i67, $i68, $i64 := start_cbsend_loop_$bb28($p0, $p3, $p41, $p42, $p49, $p50, $p51, $p52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $p61, $i62, $i63, $p47, $i48, $i65, $i66, $i67, $i68, $i64);
    goto $bb28_last;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.0, $p41);
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    $i66 := $and.i32($i65, 8);
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    $i67 := $ne.i32($i66, 0);
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $i68 := $i48;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    $i46 := $i68;
    goto $bb27;

  $bb35:
    assume $i67 == 1;
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p3, $mul.ref(0, 888)), $mul.ref(320, 1));
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p49, 0);
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p47, $mul.ref(0, 32)), $mul.ref(32, 1));
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p50);
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p47, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.0, $p52);
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} $i54 := atwrite_submit($p0, $p51, $i53);
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    call {:si_unique_call 388} {:cexpr "rc"} boogie_si_record_i32($i54);
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i54, 0);
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    $i56 := $zext.i1.i32($i55);
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    $i57 := $sext.i32.i64($i56);
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 389} $i58 := ldv__builtin_expect($i57, 0);
    call {:si_unique_call 390} {:cexpr "tmp___1"} boogie_si_record_i64($i58);
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $i59 := $ne.i64($i58, 0);
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    $i60 := $i48;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p42);
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    $i62 := $p2i.ref.i64($p61);
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    $i63 := $ne.i64($i62, 0);
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    $i64 := $i60;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    $i46 := $i64;
    goto $bb27;

  $bb33:
    assume $i63 == 1;
    assume {:verifier.code 0} true;
    $p47, $i48 := $p61, $i60;
    goto $bb33_dummy;

  $bb30:
    assume $i59 == 1;
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 391} complete_cb($p0);
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    $i60 := $i54;
    goto $bb32;

  SeqInstr_73:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i20 == 1;
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, gigaset_debuglevel);
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    $i22 := $and.i32($i21, 131072);
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i32($i23);
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} $i26 := ldv__builtin_expect($i25, 0);
    call {:si_unique_call 379} {:cexpr "tmp___0"} boogie_si_record_i64($i26);
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 5232)), $mul.ref(160, 1));
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 381} $i31 := req_submit($p30, 40, 0, 20);
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    call {:si_unique_call 382} {:cexpr "rc"} boogie_si_record_i32($i31);
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    $i32 := $slt.i32($i31, 0);
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i16 := $i31;
    goto $bb6;

  $bb13:
    assume $i32 == 1;
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} ldv_spin_lock();
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 5232)), $mul.ref(408, 1));
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i35, 0);
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 5232)), $mul.ref(424, 1));
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 385} spin_unlock_irqrestore($p40, $u0);
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb15:
    assume $i36 == 1;
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    call $p37, $i38, $i39 := start_cbsend_loop_$bb18($p0, $p33, $p37, $i38, $i39);
    goto $bb18_last;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} complete_cb($p0);
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p33);
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p37);
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    $i39 := $ne.i64($i38, 0);
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i39 == 1);
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i39 == 1;
    goto $bb20_dummy;

  SeqInstr_70:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i27 == 1;
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} vslice_dummy_var_37 := printk.ref(.str.84);
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, gigaset_debuglevel);
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 131072);
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 375} $i13 := ldv__builtin_expect($i12, 0);
    call {:si_unique_call 376} {:cexpr "tmp"} boogie_si_record_i64($i13);
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 113);
    goto $bb6;

  $bb3:
    assume $i14 == 1;
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 377} vslice_dummy_var_36 := printk.ref(.str.83);
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb33_dummy:
    assume false;
    return;

  $bb28_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1623;

  $bb20_dummy:
    assume false;
    return;

  $bb18_last:
    assume {:verifier.code 0} true;
    goto $bb19;
}



const gigaset_bchannel_up: ref;

axiom gigaset_bchannel_up == $sub.ref(0, 419505);

procedure gigaset_bchannel_up($p0: ref);



const stopurbs: ref;

axiom stopurbs == $sub.ref(0, 420537);

procedure stopurbs($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation stopurbs($p0: ref)
{
  var $p1: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i64;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i32;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i38: i64;
  var $i39: i64;
  var $i40: i1;
  var $p41: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $i48: i32;
  var $i49: i32;
  var $i50: i1;
  var $i51: i32;
  var $i52: i64;
  var $i53: i64;
  var $i54: i1;
  var $p55: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i32;
  var $i61: i32;
  var $i62: i32;
  var $i63: i1;
  var $i64: i32;
  var $i65: i64;
  var $i66: i64;
  var $i67: i1;
  var $p68: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i32;
  var $i74: i32;
  var $i75: i32;
  var $i76: i1;
  var $i77: i32;
  var $i78: i64;
  var $i79: i64;
  var $i80: i1;
  var $p81: ref;
  var vslice_dummy_var_38: i32;
  var vslice_dummy_var_39: i32;
  var vslice_dummy_var_40: i32;
  var vslice_dummy_var_41: i32;
  var vslice_dummy_var_42: i32;
  var vslice_dummy_var_43: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(0, 1));
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1, 0);
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(304, 1)), $mul.ref(0, 8));
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 393} $i5 := usb_unlink_urb($p4);
    call {:si_unique_call 394} {:cexpr "rc"} boogie_si_record_i32($i5);
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, gigaset_debuglevel);
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 262144);
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 395} $i11 := ldv__builtin_expect($i10, 0);
    call {:si_unique_call 396} {:cexpr "tmp___0"} boogie_si_record_i64($i11);
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(304, 1)), $mul.ref(1, 8));
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} $i60 := usb_unlink_urb($p59);
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.0, gigaset_debuglevel);
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    $i62 := $and.i32($i61, 262144);
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    $i63 := $ne.i32($i62, 0);
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    $i64 := $zext.i1.i32($i63);
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    $i65 := $sext.i32.i64($i64);
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} $i66 := ldv__builtin_expect($i65, 0);
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    $i67 := $ne.i64($i66, 0);
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(304, 1)), $mul.ref(2, 8));
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 417} $i73 := usb_unlink_urb($p72);
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.0, gigaset_debuglevel);
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    $i75 := $and.i32($i74, 262144);
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    $i76 := $ne.i32($i75, 0);
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    $i77 := $zext.i1.i32($i76);
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    $i78 := $sext.i32.i64($i77);
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 418} $i79 := ldv__builtin_expect($i78, 0);
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    $i80 := $ne.i64($i79, 0);
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    assume {:branchcond $i80} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(80, 1)), $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 401} $i19 := usb_unlink_urb($p18);
    call {:si_unique_call 402} {:cexpr "rc"} boogie_si_record_i32($i19);
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, gigaset_debuglevel);
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i20, 262144);
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    $i23 := $zext.i1.i32($i22);
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    $i24 := $sext.i32.i64($i23);
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} $i25 := ldv__builtin_expect($i24, 0);
    call {:si_unique_call 404} {:cexpr "tmp___2"} boogie_si_record_i64($i25);
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(80, 1)), $mul.ref(1, 24)), $mul.ref(0, 1));
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 407} $i33 := usb_unlink_urb($p32);
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, gigaset_debuglevel);
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    $i35 := $and.i32($i34, 262144);
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    $i37 := $zext.i1.i32($i36);
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    $i38 := $sext.i32.i64($i37);
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} $i39 := ldv__builtin_expect($i38, 0);
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    $i40 := $ne.i64($i39, 0);
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 824)), $mul.ref(80, 1)), $mul.ref(2, 24)), $mul.ref(0, 1));
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 411} $i47 := usb_unlink_urb($p46);
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.0, gigaset_debuglevel);
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    $i49 := $and.i32($i48, 262144);
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i49, 0);
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    $i51 := $zext.i1.i32($i50);
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    $i52 := $sext.i32.i64($i51);
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} $i53 := ldv__builtin_expect($i52, 0);
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    $i54 := $ne.i64($i53, 0);
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    return;

  $bb19:
    assume $i54 == 1;
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} $p55 := get_usb_rcmsg($i47);
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} vslice_dummy_var_41 := printk.ref.ref.i32.ref(.str.165, .str.164, 2, $p55);
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb15:
    assume $i40 == 1;
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 409} $p41 := get_usb_rcmsg($i33);
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 410} vslice_dummy_var_40 := printk.ref.ref.i32.ref(.str.165, .str.164, 1, $p41);
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb10:
    assume $i26 == 1;
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 405} $p27 := get_usb_rcmsg($i19);
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} vslice_dummy_var_39 := printk.ref.ref.i32.ref(.str.165, .str.164, 0, $p27);
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb26:
    assume $i80 == 1;
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} $p81 := get_usb_rcmsg($i73);
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} vslice_dummy_var_43 := printk.ref.ref.i32.ref(.str.163, .str.164, 2, $p81);
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb22:
    assume $i67 == 1;
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 415} $p68 := get_usb_rcmsg($i60);
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} vslice_dummy_var_42 := printk.ref.ref.i32.ref(.str.163, .str.164, 1, $p68);
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb3:
    assume $i12 == 1;
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 397} $p13 := get_usb_rcmsg($i5);
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 398} vslice_dummy_var_38 := printk.ref.ref.i32.ref(.str.163, .str.164, 0, $p13);
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const atomic_add: ref;

axiom atomic_add == $sub.ref(0, 421569);

procedure atomic_add($i0: i32, $p1: ref);



const atomic_read: ref;

axiom atomic_read == $sub.ref(0, 422601);

procedure atomic_read($p0: ref) returns ($r: i32);



const kmalloc: ref;

axiom kmalloc == $sub.ref(0, 423633);

procedure kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} {:cexpr "kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 422} {:cexpr "kmalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 423} ldv_check_alloc_flags($i1);
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} $p2 := ldv_undef_ptr();
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  SeqInstr_76:
    assume !assertsPassed;
    return;
}



const atread_submit: ref;

axiom atread_submit == $sub.ref(0, 424665);

procedure atread_submit($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.7, $M.17, $M.16, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22, $CurrAddr, assertsPassed;



implementation atread_submit($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $i13: i32;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p27: ref;
  var $p29: ref;
  var $p31: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i16;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $i58: i32;
  var $i59: i1;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i1;
  var $i65: i32;
  var $i66: i32;
  var $i67: i1;
  var $i68: i32;
  var $i69: i64;
  var $i70: i64;
  var $i71: i1;
  var $p73: ref;
  var $i74: i32;
  var $i75: i32;
  var $i76: i64;
  var $i77: i64;
  var $i78: i64;
  var $i20: i32;
  var vslice_dummy_var_44: i32;
  var vslice_dummy_var_45: i32;
  var vslice_dummy_var_46: i32;
  var vslice_dummy_var_47: i32;
  var vslice_dummy_var_48: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} {:cexpr "atread_submit:arg:timeout"} boogie_si_record_i32($i1);
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 5232)), $mul.ref(5224, 1));
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, gigaset_debuglevel);
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 1048576);
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 426} $i10 := ldv__builtin_expect($i9, 0);
    call {:si_unique_call 427} {:cexpr "tmp"} boogie_si_record_i64($i10);
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 429} $i15 := update_basstate($p4, 64, 0);
    call {:si_unique_call 430} {:cexpr "basstate"} boogie_si_record_i32($i15);
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i15, 64);
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i15, 256);
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 888)), $mul.ref(336, 1)), $mul.ref(0, 1));
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p27, $sub.i8(0, 62));
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 888)), $mul.ref(336, 1)), $mul.ref(1, 1));
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p29, 19);
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 888)), $mul.ref(336, 1)), $mul.ref(2, 1));
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p31, 0);
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 888)), $mul.ref(336, 1)), $mul.ref(4, 1));
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p33, 0);
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p4, $mul.ref(0, 888)), $mul.ref(880, 1));
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i32.i16($i35);
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 888)), $mul.ref(336, 1)), $mul.ref(6, 1));
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p38, $i36);
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p4, $mul.ref(0, 888)), $mul.ref(0, 1));
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 434} $i41 := __create_pipe($p40, 0);
    call {:si_unique_call 435} {:cexpr "tmp___0"} boogie_si_record_i32($i41);
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p4, $mul.ref(0, 888)), $mul.ref(328, 1));
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p4, $mul.ref(0, 888)), $mul.ref(0, 1));
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    $i46 := $or.i32($i41, $sub.i32(0, 2147483520));
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p4, $mul.ref(0, 888)), $mul.ref(336, 1));
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p4, $mul.ref(0, 888)), $mul.ref(472, 1));
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p4, $mul.ref(0, 888)), $mul.ref(880, 1));
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.0, $p51);
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 5232)), $mul.ref(400, 1));
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p54);
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 436} usb_fill_control_urb($p43, $p45, $i46, $p48, $p50, $i52, read_ctrl_callback, $p55);
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p4, $mul.ref(0, 888)), $mul.ref(328, 1));
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} $i58 := ldv_usb_submit_urb_44($p57, 32);
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    call {:si_unique_call 438} {:cexpr "ret"} boogie_si_record_i32($i58);
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    $i59 := $ne.i32($i58, 0);
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i64 := $sgt.i32($i1, 0);
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    assume {:branchcond $i64} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i20 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  $bb14:
    assume $i64 == 1;
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.0, gigaset_debuglevel);
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    $i66 := $and.i32($i65, 1048576);
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    $i67 := $ne.i32($i66, 0);
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    $i68 := $zext.i1.i32($i67);
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    $i69 := $sext.i32.i64($i68);
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 442} $i70 := ldv__builtin_expect($i69, 0);
    call {:si_unique_call 443} {:cexpr "tmp___2"} boogie_si_record_i64($i70);
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    $i71 := $ne.i64($i70, 0);
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p4, $mul.ref(0, 888)), $mul.ref(344, 1));
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    $i74 := $mul.i32($i1, 250);
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    $i75 := $sdiv.i32($i74, 10);
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    $i76 := $sext.i32.i64($i75);
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    $i77 := $load.i64($M.0, jiffies);
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    $i78 := $add.i64($i76, $i77);
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 445} vslice_dummy_var_48 := ldv_mod_timer_45($p73, $i78);
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume $i71 == 1;
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 444} vslice_dummy_var_47 := printk.ref.i32(.str.49, $i1);
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb11:
    assume $i59 == 1;
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 439} vslice_dummy_var_46 := update_basstate($p4, 0, 64);
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} $p61 := get_usb_rcmsg($i58);
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 5232)), $mul.ref(16, 1));
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 441} dev_err.ref.ref.ref($p63, .str.76, $p61);
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    $i20 := $i58;
    goto $bb6;

  SeqInstr_79:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i22 == 1;
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 5232)), $mul.ref(16, 1));
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 432} dev_notice.ref.ref($p24, .str.75);
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} vslice_dummy_var_45 := update_basstate($p4, 0, 64);
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, 19);
    goto $bb6;

  $bb4:
    assume $i17 == 1;
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 5232)), $mul.ref(16, 1));
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 431} dev_err.ref.ref($p19, .str.74);
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, 16);
    goto $bb6;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 888)), $mul.ref(880, 1));
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 428} vslice_dummy_var_44 := printk.ref.i32(.str.73, $i13);
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const error_reset: ref;

axiom error_reset == $sub.ref(0, 425697);

procedure error_reset($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.7, $CurrAddr, $M.17, $M.16, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22, assertsPassed;



implementation error_reset($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var vslice_dummy_var_49: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 5232)), $mul.ref(5224, 1));
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} vslice_dummy_var_49 := update_basstate($p3, 512, 0);
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 5232)), $mul.ref(160, 1));
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} $i7 := req_submit($p6, 39, 0, 20);
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    call {:si_unique_call 448} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 5232)), $mul.ref(5224, 1));
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 888)), $mul.ref(8, 1));
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 449} usb_queue_reset_device($p13);
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_82:
    assume !assertsPassed;
    return;
}



const check_pending: ref;

axiom check_pending == $sub.ref(0, 426729);

procedure check_pending($p0: ref);
  free requires assertsPassed;
  modifies $M.7, $M.0, $M.16, $M.18, $M.20, $M.22;



implementation check_pending($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $p55: ref;
  var $p56: ref;
  var $i57: i32;
  var $i58: i1;
  var $p59: ref;
  var $p61: ref;
  var vslice_dummy_var_50: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} ldv_spin_lock();
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 888)), $mul.ref(788, 1));
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i2, 38);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i2, 40);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i2, 41);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i2, 52);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i2, 52);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 888)), $mul.ref(8, 1));
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p51, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 888)), $mul.ref(788, 1));
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p53);
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 451} dev_warn.ref.ref.i32($p52, .str.45, $i54);
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 888)), $mul.ref(788, 1));
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p55, 0);
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 888)), $mul.ref(788, 1));
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.0, $p56);
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    $i58 := $eq.i32($i57, 0);
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 888)), $mul.ref(712, 1));
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 453} spin_unlock_irqrestore($p61, $u0);
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    return;

  $bb49:
    assume $i58 == 1;
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 888)), $mul.ref(40, 1));
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} vslice_dummy_var_50 := ldv_del_timer_42($p59);
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb10:
    assume $i7 == 1;
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 888)), $mul.ref(788, 1));
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p44, 0);
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb8:
    assume $i6 == 1;
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i2, 41);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb12;

  $bb13:
    assume $i8 == 1;
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 888)), $mul.ref(784, 1));
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    $i31 := $and.i32($i30, 1);
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i31, 0);
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb35:
    assume $i32 == 1;
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 888)), $mul.ref(788, 1));
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, 0);
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb6:
    assume $i5 == 1;
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 888)), $mul.ref(784, 1));
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i15, 1);
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb26:
    assume $i17 == 1;
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 888)), $mul.ref(788, 1));
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, 0);
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb4:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i2, 39);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i9 == 1);
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 888)), $mul.ref(784, 1));
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    $i47 := $and.i32($i46, 512);
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i47, 0);
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb44:
    assume $i48 == 1;
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 888)), $mul.ref(788, 1));
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p49, 0);
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb15:
    assume $i9 == 1;
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 888)), $mul.ref(784, 1));
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    $i41 := $and.i32($i40, 4);
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i41, 0);
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb41:
    assume $i42 == 1;
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 888)), $mul.ref(788, 1));
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p43, 0);
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb2:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i2, 36);
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i2, 37);
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i11 == 1);
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 888)), $mul.ref(784, 1));
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i25, 4);
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb32:
    assume $i27 == 1;
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 888)), $mul.ref(788, 1));
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, 0);
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb19:
    assume $i11 == 1;
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 888)), $mul.ref(784, 1));
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    $i36 := $and.i32($i35, 2);
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, 0);
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb38:
    assume $i37 == 1;
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 888)), $mul.ref(788, 1));
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p38, 0);
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb17:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i2, 35);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i12 == 1);
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 888)), $mul.ref(784, 1));
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i20, 2);
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb29:
    assume $i22 == 1;
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 888)), $mul.ref(788, 1));
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, 0);
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb21:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i2, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb12;

  $bb23:
    assume $i13 == 1;
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    goto $bb25;
}



const ldv_usb_submit_urb_50: ref;

axiom ldv_usb_submit_urb_50 == $sub.ref(0, 427761);

procedure ldv_usb_submit_urb_50($p0: ref, $i1: i32) returns ($r: i32);



const ldv_del_timer_42: ref;

axiom ldv_del_timer_42 == $sub.ref(0, 428793);

procedure ldv_del_timer_42($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.16, $M.18, $M.20, $M.22;



implementation ldv_del_timer_42($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 454} $i1 := del_timer($p0);
    call {:si_unique_call 455} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 456} disable_suitable_timer_3($p0);
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const usb_queue_reset_device: ref;

axiom usb_queue_reset_device == $sub.ref(0, 429825);

procedure usb_queue_reset_device($p0: ref);
  free requires assertsPassed;



implementation usb_queue_reset_device($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    return;
}



const read_ctrl_callback: ref;

axiom read_ctrl_callback == $sub.ref(0, 430857);

procedure read_ctrl_callback($p0: ref);



const ldv_usb_submit_urb_44: ref;

axiom ldv_usb_submit_urb_44 == $sub.ref(0, 431889);

procedure ldv_usb_submit_urb_44($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_submit_urb_44($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} {:cexpr "ldv_usb_submit_urb_44:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 458} ldv_check_alloc_flags($i1);
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 459} $p2 := ldv_undef_ptr();
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_85:
    assume !assertsPassed;
    return;
}



const ldv_mod_timer_45: ref;

axiom ldv_mod_timer_45 == $sub.ref(0, 432921);

procedure ldv_mod_timer_45($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.17, $M.0, $M.16, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22;



implementation ldv_mod_timer_45($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 460} {:cexpr "ldv_mod_timer_45:arg:ldv_func_arg2"} boogie_si_record_i64($i1);
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} $i2 := mod_timer($p0, $i1);
    call {:si_unique_call 462} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} activate_pending_timer_3($p0, $i1, 1);
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_del_timer_43: ref;

axiom ldv_del_timer_43 == $sub.ref(0, 433953);

procedure ldv_del_timer_43($p0: ref) returns ($r: i32);



const gigaset_fill_inbuf: ref;

axiom gigaset_fill_inbuf == $sub.ref(0, 434985);

procedure gigaset_fill_inbuf($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);



const usb_unlink_urb: ref;

axiom usb_unlink_urb == $sub.ref(0, 436017);

procedure usb_unlink_urb($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_unlink_urb($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 1} true;
    call {:si_unique_call 464} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 465} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const complete_cb: ref;

axiom complete_cb == $sub.ref(0, 437049);

procedure complete_cb($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation complete_cb($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $i19: i32;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var vslice_dummy_var_51: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 5232)), $mul.ref(408, 1));
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 5232)), $mul.ref(500, 1));
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 5232)), $mul.ref(496, 1));
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32($i4, $i6);
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 5232)), $mul.ref(500, 1));
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, $i7);
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, gigaset_debuglevel);
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 131072);
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 466} $i14 := ldv__builtin_expect($i13, 0);
    call {:si_unique_call 467} {:cexpr "tmp"} boogie_si_record_i64($i14);
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i24 == 1);
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 5232)), $mul.ref(408, 1));
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p36, $0.ref);
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 5232)), $mul.ref(416, 1));
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p37, $0.ref);
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 5232)), $mul.ref(496, 1));
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p38, 0);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p40);
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, 0);
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p2);
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} kfree($p45);
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    return;

  $bb7:
    assume $i42 == 1;
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 469} tasklet_schedule($p44);
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i24 == 1;
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 5232)), $mul.ref(408, 1));
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p27, $p26);
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 5232)), $mul.ref(408, 1));
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p30, $0.ref);
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 5232)), $mul.ref(408, 1));
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 5232)), $mul.ref(496, 1));
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p35, $i34);
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 5232)), $mul.ref(496, 1));
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 5232)), $mul.ref(500, 1));
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} vslice_dummy_var_51 := printk.ref.i32.i32(.str.85, $i17, $i19);
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const atwrite_submit: ref;

axiom atwrite_submit == $sub.ref(0, 438081);

procedure atwrite_submit($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.7, $M.17, $M.16, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22, $CurrAddr, assertsPassed;



implementation atwrite_submit($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p21: ref;
  var $p23: ref;
  var $p25: ref;
  var $p27: ref;
  var $i28: i16;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $i45: i1;
  var $i46: i32;
  var $i47: i64;
  var $i48: i64;
  var $i49: i1;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $i55: i32;
  var $i56: i1;
  var $i57: i32;
  var $i58: i32;
  var $i59: i1;
  var $i60: i32;
  var $i61: i64;
  var $i62: i64;
  var $i63: i1;
  var $p65: ref;
  var $i66: i64;
  var $i67: i64;
  var $i19: i32;
  var vslice_dummy_var_52: i32;
  var vslice_dummy_var_53: i32;
  var vslice_dummy_var_54: i32;
  var vslice_dummy_var_55: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} {:cexpr "atwrite_submit:arg:len"} boogie_si_record_i32($i2);
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 5232)), $mul.ref(5224, 1));
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, gigaset_debuglevel);
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 1048576);
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 472} $i11 := ldv__builtin_expect($i10, 0);
    call {:si_unique_call 473} {:cexpr "tmp"} boogie_si_record_i64($i11);
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 475} $i14 := update_basstate($p5, 128, 0);
    call {:si_unique_call 476} {:cexpr "tmp___0"} boogie_si_record_i32($i14);
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i14, 128);
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 888)), $mul.ref(312, 1)), $mul.ref(0, 1));
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p21, 66);
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 888)), $mul.ref(312, 1)), $mul.ref(1, 1));
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p23, 18);
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 888)), $mul.ref(312, 1)), $mul.ref(2, 1));
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p25, 0);
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 888)), $mul.ref(312, 1)), $mul.ref(4, 1));
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p27, 0);
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i32.i16($i2);
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 888)), $mul.ref(312, 1)), $mul.ref(6, 1));
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p30, $i28);
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p5, $mul.ref(0, 888)), $mul.ref(0, 1));
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 478} $i33 := __create_pipe($p32, 0);
    call {:si_unique_call 479} {:cexpr "tmp___1"} boogie_si_record_i32($i33);
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p5, $mul.ref(0, 888)), $mul.ref(304, 1));
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p5, $mul.ref(0, 888)), $mul.ref(0, 1));
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    $i38 := $or.i32($i33, $sub.i32(0, 2147483648));
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p5, $mul.ref(0, 888)), $mul.ref(312, 1));
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p0);
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} usb_fill_control_urb($p35, $p37, $i38, $p40, $p1, $i2, write_command_callback, $p41);
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p5, $mul.ref(0, 888)), $mul.ref(304, 1));
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 481} $i44 := ldv_usb_submit_urb_61($p43, 32);
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    call {:si_unique_call 482} {:cexpr "rc"} boogie_si_record_i32($i44);
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    $i46 := $zext.i1.i32($i45);
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    $i47 := $sext.i32.i64($i46);
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} $i48 := ldv__builtin_expect($i47, 0);
    call {:si_unique_call 484} {:cexpr "tmp___3"} boogie_si_record_i64($i48);
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    $i49 := $ne.i64($i48, 0);
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} $i54 := update_basstate($p5, 32, 8);
    call {:si_unique_call 489} {:cexpr "tmp___5"} boogie_si_record_i32($i54);
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    $i55 := $and.i32($i54, 32);
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    $i56 := $eq.i32($i55, 0);
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    assume {:branchcond $i56} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  $bb11:
    assume $i56 == 1;
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.0, gigaset_debuglevel);
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    $i58 := $and.i32($i57, 131072);
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    $i59 := $ne.i32($i58, 0);
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    $i60 := $zext.i1.i32($i59);
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    $i61 := $sext.i32.i64($i60);
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 490} $i62 := ldv__builtin_expect($i61, 0);
    call {:si_unique_call 491} {:cexpr "tmp___4"} boogie_si_record_i64($i62);
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    $i63 := $ne.i64($i62, 0);
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p5, $mul.ref(0, 888)), $mul.ref(176, 1));
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    $i66 := $load.i64($M.0, jiffies);
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    $i67 := $add.i64($i66, 75);
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} vslice_dummy_var_55 := ldv_mod_timer_62($p65, $i67);
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i63 == 1;
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} vslice_dummy_var_54 := printk.ref.i32(.str.89, 3);
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb8:
    assume $i49 == 1;
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} vslice_dummy_var_53 := update_basstate($p5, 0, 128);
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 486} $p51 := get_usb_rcmsg($i44);
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 5232)), $mul.ref(16, 1));
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} dev_err.ref.ref.ref($p53, .str.88, $p51);
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    $i19 := $i44;
    goto $bb6;

  SeqInstr_88:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i16 == 1;
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 5232)), $mul.ref(16, 1));
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 477} dev_err.ref.ref($p18, .str.87);
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 16);
    goto $bb6;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 474} vslice_dummy_var_52 := printk.ref.i32(.str.86, $i2);
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const write_command_callback: ref;

axiom write_command_callback == $sub.ref(0, 439113);

procedure write_command_callback($p0: ref);



const ldv_usb_submit_urb_61: ref;

axiom ldv_usb_submit_urb_61 == $sub.ref(0, 440145);

procedure ldv_usb_submit_urb_61($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_submit_urb_61($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} {:cexpr "ldv_usb_submit_urb_61:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 495} ldv_check_alloc_flags($i1);
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} $p2 := ldv_undef_ptr();
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_91:
    assume !assertsPassed;
    return;
}



const ldv_mod_timer_62: ref;

axiom ldv_mod_timer_62 == $sub.ref(0, 441177);

procedure ldv_mod_timer_62($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.17, $M.0, $M.16, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22;



implementation ldv_mod_timer_62($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} {:cexpr "ldv_mod_timer_62:arg:ldv_func_arg2"} boogie_si_record_i64($i1);
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 498} $i2 := mod_timer($p0, $i1);
    call {:si_unique_call 499} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} activate_pending_timer_3($p0, $i1, 1);
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const queue_work: ref;

axiom queue_work == $sub.ref(0, 442209);

procedure queue_work($p0: ref, $p1: ref) returns ($r: i1);



const ldv_queue_work_on_15: ref;

axiom ldv_queue_work_on_15 == $sub.ref(0, 443241);

procedure ldv_queue_work_on_15($i0: i32, $p1: ref, $p2: ref) returns ($r: i1);



const queue_work_on: ref;

axiom queue_work_on == $sub.ref(0, 444273);

procedure queue_work_on($i0: i32, $p1: ref, $p2: ref) returns ($r: i1);



const activate_work_1: ref;

axiom activate_work_1 == $sub.ref(0, 445305);

procedure activate_work_1($p0: ref, $i1: i32);



const gigaset_write_cmd: ref;

axiom gigaset_write_cmd == $sub.ref(0, 446337);

procedure gigaset_write_cmd($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $M.0, $M.17, $M.16, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22, $CurrAddr, assertsPassed;



implementation gigaset_write_cmd($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $p6: ref;
  var $i7: i32;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $p47: ref;
  var $p48: ref;
  var $i49: i64;
  var $i50: i1;
  var $p51: ref;
  var $p52: ref;
  var $i53: i1;
  var $p54: ref;
  var $i55: i32;
  var $i56: i32;
  var $p57: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i64;
  var $i65: i1;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i32;
  var $p72: ref;
  var $p73: ref;
  var $i74: i32;
  var $p75: ref;
  var $i76: i32;
  var $i77: i32;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $i82: i32;
  var $i83: i1;
  var $i84: i32;
  var $i85: i64;
  var $i86: i64;
  var $i87: i1;
  var $p88: ref;
  var $i89: i32;
  var $i90: i32;
  var $i91: i1;
  var $i92: i32;
  var $i93: i64;
  var $i94: i64;
  var $i95: i1;
  var $p97: ref;
  var $p98: ref;
  var $i99: i64;
  var $i100: i1;
  var $p101: ref;
  var $i102: i64;
  var $i103: i1;
  var $p104: ref;
  var $i105: i32;
  var $p106: ref;
  var $i107: i1;
  var $p108: ref;
  var $i109: i32;
  var $i110: i32;
  var $i58: i32;
  var vslice_dummy_var_56: i32;
  var vslice_dummy_var_57: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 5232)), $mul.ref(144, 1));
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 2);
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    $i5 := (if $i4 == 1 then 8192 else 2097152);
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(32, 1));
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} gigaset_dbg_buffer($i5, .str.95, $i8, $p10);
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 3);
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} ldv_spin_lock();
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 5232)), $mul.ref(416, 1));
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p61, $p60);
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 5232)), $mul.ref(416, 1));
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    $i64 := $p2i.ref.i64($p63);
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    $i65 := $ne.i64($i64, 0);
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i65 == 1);
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 5232)), $mul.ref(408, 1));
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p69, $p1);
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.0, $p70);
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 5232)), $mul.ref(496, 1));
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p72, $i71);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p0, $mul.ref(0, 5232)), $mul.ref(500, 1));
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.0, $p73);
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.0, $p75);
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    $i77 := $add.i32($i74, $i76);
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p0, $mul.ref(0, 5232)), $mul.ref(500, 1));
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p78, $i77);
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p0, $mul.ref(0, 5232)), $mul.ref(416, 1));
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p79, $p1);
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p0, $mul.ref(0, 5232)), $mul.ref(424, 1));
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} spin_unlock_irqrestore($p80, $u0);
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} ldv_spin_lock();
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p0, $mul.ref(0, 5232)), $mul.ref(1612, 1));
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.0, $p81);
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    $i83 := $eq.i32($i82, 0);
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    $i84 := $zext.i1.i32($i83);
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    $i85 := $sext.i32.i64($i84);
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} $i86 := ldv__builtin_expect($i85, 0);
    call {:si_unique_call 517} {:cexpr "tmp___1"} boogie_si_record_i64($i86);
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    $i87 := $ne.i64($i86, 0);
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 525} $i105 := start_cbsend($p0);
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    call {:si_unique_call 526} {:cexpr "rc"} boogie_si_record_i32($i105);
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p0, $mul.ref(0, 5232)), $mul.ref(176, 1));
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 527} spin_unlock_irqrestore($p106, $u0);
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    $i107 := $sge.i32($i105, 0);
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    assume {:branchcond $i107} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i107 == 1);
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    $i110 := $i105;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    $i58 := $i110;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    $r := $i58;
    return;

  $bb34:
    assume $i107 == 1;
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    $i109 := $load.i32($M.0, $p108);
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    $i110 := $i109;
    goto $bb36;

  SeqInstr_100:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i87 == 1;
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p0, $mul.ref(0, 5232)), $mul.ref(176, 1));
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} spin_unlock_irqrestore($p88, $u0);
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    $i89 := $load.i32($M.0, gigaset_debuglevel);
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    $i90 := $and.i32($i89, 1048576);
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    $i91 := $ne.i32($i90, 0);
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    $i92 := $zext.i1.i32($i91);
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    $i93 := $sext.i32.i64($i92);
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} $i94 := ldv__builtin_expect($i93, 0);
    call {:si_unique_call 520} {:cexpr "tmp___0"} boogie_si_record_i64($i94);
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    $i95 := $ne.i64($i94, 0);
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    assume {:branchcond $i95} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 522} ldv_spin_lock();
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p0, $mul.ref(0, 5232)), $mul.ref(408, 1));
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    $p98 := $load.ref($M.0, $p97);
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    $i99 := $p2i.ref.i64($p98);
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    $i100 := $ne.i64($i99, 0);
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    assume {:branchcond $i100} true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i100 == 1);
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p0, $mul.ref(0, 5232)), $mul.ref(424, 1));
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} spin_unlock_irqrestore($p104, $u0);
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    $i58 := $sub.i32(0, 19);
    goto $bb14;

  $bb25:
    assume $i100 == 1;
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    call $p101, $i102, $i103 := gigaset_write_cmd_loop_$bb28($p0, $p97, $p101, $i102, $i103);
    goto $bb28_last;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 523} complete_cb($p0);
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    $p101 := $load.ref($M.0, $p97);
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    $i102 := $p2i.ref.i64($p101);
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    $i103 := $ne.i64($i102, 0);
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i103 == 1);
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb30:
    assume {:verifier.code 0} true;
    assume $i103 == 1;
    goto $bb30_dummy;

  $bb22:
    assume $i95 == 1;
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 521} vslice_dummy_var_57 := printk.ref.ref(.str.97, .str.98);
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb17:
    assume $i65 == 1;
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 5232)), $mul.ref(416, 1));
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p67, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p68, $p1);
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(32, 1));
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} $i16 := memcmp($p15, .str.96, 3);
    call {:si_unique_call 503} {:cexpr "tmp"} boogie_si_record_i32($i16);
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 0);
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb3:
    assume $i17 == 1;
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} ldv_spin_lock();
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 5232)), $mul.ref(5224, 1));
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 888)), $mul.ref(784, 1));
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    $i23 := $and.i32($i22, 64);
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 5232)), $mul.ref(176, 1));
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} spin_unlock_irqrestore($p43, $u0);
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 5232)), $mul.ref(160, 1));
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} $i46 := req_submit($p45, 41, 0, 20);
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    call {:si_unique_call 509} {:cexpr "rc"} boogie_si_record_i32($i46);
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    $i49 := $p2i.ref.i64($p48);
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    $i50 := $ne.i64($i49, 0);
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i46, 0);
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    $i56 := $i46;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p1);
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} kfree($p57);
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    $i58 := $i56;
    goto $bb14;

  $bb11:
    assume $i53 == 1;
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    call {:si_unique_call 511} {:cexpr "rc"} boogie_si_record_i32($i55);
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    $i56 := $i55;
    goto $bb13;

  $bb8:
    assume $i50 == 1;
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 510} tasklet_schedule($p52);
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_97:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i24 == 1;
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 5232)), $mul.ref(5224, 1));
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 888)), $mul.ref(472, 1));
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 505} kfree($p29);
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 5232)), $mul.ref(5224, 1));
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 888)), $mul.ref(472, 1));
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p33, $0.ref);
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 5232)), $mul.ref(5224, 1));
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 888)), $mul.ref(880, 1));
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p37, 0);
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 5232)), $mul.ref(5224, 1));
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p40, $mul.ref(0, 888)), $mul.ref(884, 1));
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p41, 0);
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} vslice_dummy_var_56 := atread_submit($p0, 0);
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_94:
    assume !assertsPassed;
    return;

  $bb30_dummy:
    assume false;
    return;

  $bb28_last:
    assume {:verifier.code 0} true;
    goto $bb29;
}



const gigaset_write_room: ref;

axiom gigaset_write_room == $sub.ref(0, 447369);

procedure gigaset_write_room($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation gigaset_write_room($p0: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    $r := 264;
    return;
}



const gigaset_chars_in_buffer: ref;

axiom gigaset_chars_in_buffer == $sub.ref(0, 448401);

procedure gigaset_chars_in_buffer($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation gigaset_chars_in_buffer($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 5232)), $mul.ref(500, 1));
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const gigaset_brkchars: ref;

axiom gigaset_brkchars == $sub.ref(0, 449433);

procedure gigaset_brkchars($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation gigaset_brkchars($p0: ref, $p1: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    $r := $sub.i32(0, 22);
    return;
}



const gigaset_init_bchannel: ref;

axiom gigaset_init_bchannel == $sub.ref(0, 450465);

procedure gigaset_init_bchannel($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $M.0, $CurrAddr, $M.17, $M.16, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22, assertsPassed;



implementation gigaset_init_bchannel($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $p18: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i32;
  var $i41: i1;
  var $p42: ref;
  var $i43: i32;
  var $i44: i1;
  var $i45: i32;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $i52: i32;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i1;
  var $i58: i1;
  var $i19: i32;
  var vslice_dummy_var_58: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 480)), $mul.ref(288, 1));
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} ldv_spin_lock();
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 5232)), $mul.ref(1612, 1));
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 529} $i8 := ldv__builtin_expect($i7, 0);
    call {:si_unique_call 530} {:cexpr "tmp___0"} boogie_si_record_i64($i8);
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 5232)), $mul.ref(5224, 1));
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 888)), $mul.ref(784, 1));
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i24, 256);
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 537} $i30 := starturbs($p0);
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    call {:si_unique_call 538} {:cexpr "ret"} boogie_si_record_i32($i30);
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i30, 0);
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 480)), $mul.ref(280, 1));
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    $i45 := (if $i44 == 1 then 37 else 35);
    call {:si_unique_call 543} {:cexpr "req"} boogie_si_record_i32($i45);
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} $i46 := req_submit($p0, $i45, 0, 20);
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    call {:si_unique_call 545} {:cexpr "ret"} boogie_si_record_i32($i46);
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    $i47 := $slt.i32($i46, 0);
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p2, $mul.ref(0, 5232)), $mul.ref(176, 1));
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} spin_unlock_irqrestore($p56, $u0);
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    $i57 := $slt.i32($i46, 0);
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i57 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i19 := $i46;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  $bb23:
    assume $i57 == 1;
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    $i58 := $ne.i32($i46, $sub.i32(0, 19));
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i58 == 1);
    goto $bb25;

  $bb26:
    assume $i58 == 1;
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 549} error_hangup($p0);
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb20:
    assume $i47 == 1;
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p2, $mul.ref(0, 5232)), $mul.ref(16, 1));
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 480)), $mul.ref(280, 1));
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $i52 := $add.i32($i51, 1);
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 546} dev_err.ref.ref.i32($p49, .str.155, $i52);
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 480)), $mul.ref(384, 1));
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p53);
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 547} stopurbs($p55);
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    goto $bb22;

  SeqInstr_106:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i31 == 1;
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p2, $mul.ref(0, 5232)), $mul.ref(176, 1));
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} spin_unlock_irqrestore($p32, $u0);
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i30, $sub.i32(0, 14));
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    $p35 := .str.153;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p2, $mul.ref(0, 5232)), $mul.ref(16, 1));
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 480)), $mul.ref(280, 1));
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    $i40 := $add.i32($i39, 1);
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} dev_err.ref.ref.i32.ref($p37, .str.154, $i40, $p35);
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i30, $sub.i32(0, 19));
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i19 := $i30;
    goto $bb6;

  $bb16:
    assume $i41 == 1;
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} error_hangup($p0);
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume $i33 == 1;
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} $p34 := get_usb_rcmsg($i30);
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    $p35 := $p34;
    goto $bb15;

  SeqInstr_103:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i26 == 1;
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 5232)), $mul.ref(16, 1));
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} dev_notice.ref.ref($p28, .str.152);
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 5232)), $mul.ref(176, 1));
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} spin_unlock_irqrestore($p29, $u0);
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 113);
    goto $bb6;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, gigaset_debuglevel);
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 1048576);
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i12);
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 531} $i15 := ldv__builtin_expect($i14, 0);
    call {:si_unique_call 532} {:cexpr "tmp"} boogie_si_record_i64($i15);
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 5232)), $mul.ref(176, 1));
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 534} spin_unlock_irqrestore($p18, $u0);
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 19);
    goto $bb6;

  $bb3:
    assume $i16 == 1;
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 533} vslice_dummy_var_58 := printk.ref.ref(.str.97, .str.151);
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const gigaset_close_bchannel: ref;

axiom gigaset_close_bchannel == $sub.ref(0, 451497);

procedure gigaset_close_bchannel($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $M.0, $CurrAddr, $M.17, $M.16, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22, assertsPassed;



implementation gigaset_close_bchannel($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i32;
  var $p43: ref;
  var $i19: i32;
  var vslice_dummy_var_59: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 480)), $mul.ref(288, 1));
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} ldv_spin_lock();
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 5232)), $mul.ref(1612, 1));
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 551} $i8 := ldv__builtin_expect($i7, 0);
    call {:si_unique_call 552} {:cexpr "tmp___0"} boogie_si_record_i64($i8);
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 5232)), $mul.ref(5224, 1));
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 888)), $mul.ref(784, 1));
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 480)), $mul.ref(280, 1));
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    $i28 := (if $i27 == 1 then 4 else 2);
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i24, $i28);
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 0);
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 480)), $mul.ref(280, 1));
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    $i35 := (if $i34 == 1 then 38 else 36);
    call {:si_unique_call 559} {:cexpr "req"} boogie_si_record_i32($i35);
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} $i36 := req_submit($p0, $i35, 0, 20);
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    call {:si_unique_call 561} {:cexpr "ret"} boogie_si_record_i32($i36);
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    $i37 := $slt.i32($i36, 0);
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref(0, 5232)), $mul.ref(176, 1));
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} spin_unlock_irqrestore($p43, $u0);
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    $i19 := $i36;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  $bb11:
    assume $i37 == 1;
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p2, $mul.ref(0, 5232)), $mul.ref(16, 1));
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 480)), $mul.ref(280, 1));
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    $i42 := $add.i32($i41, 1);
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} dev_err.ref.ref.i32($p39, .str.102, $i42);
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_109:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i30 == 1;
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref(0, 5232)), $mul.ref(176, 1));
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 557} spin_unlock_irqrestore($p31, $u0);
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} gigaset_bchannel_down($p0);
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb6;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 5232)), $mul.ref(176, 1));
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} spin_unlock_irqrestore($p10, $u0);
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, gigaset_debuglevel);
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 1048576);
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 555} {:cexpr "tmp"} boogie_si_record_i64($i16);
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 19);
    goto $bb6;

  $bb3:
    assume $i17 == 1;
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} vslice_dummy_var_59 := printk.ref.ref(.str.97, .str.101);
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const gigaset_initbcshw: ref;

axiom gigaset_initbcshw == $sub.ref(0, 452529);

procedure gigaset_initbcshw($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, assertsPassed;



implementation gigaset_initbcshw($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p16: ref;
  var $p17: ref;
  var $p20: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $p41: ref;
  var $p44: ref;
  var $p45: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i64;
  var $i10: i32;
  var $p66: ref;
  var $p68: ref;
  var $p71: ref;
  var $p74: ref;
  var $p77: ref;
  var $p80: ref;
  var vslice_dummy_var_60: i32;
  var vslice_dummy_var_61: ref;
  var vslice_dummy_var_62: i32;
  var vslice_dummy_var_63: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 564} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 566} $p3 := kmalloc(824, 208);
    goto SeqInstr_112, SeqInstr_113;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  SeqInstr_114:
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 480)), $mul.ref(384, 1));
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, $p3);
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p4);
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 824)), $mul.ref(0, 1));
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, 0);
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 824)), $mul.ref(4, 1));
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 568} atomic_set($p12, 0);
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 824)), $mul.ref(8, 1));
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 569} vslice_dummy_var_61 := spinlock_check($p13);
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 824)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 570} __raw_spin_lock_init($p17, .str.103, $p1);
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 824)), $mul.ref(80, 1)), $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p20, $0.ref);
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 824)), $mul.ref(80, 1)), $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p23, $p0);
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 824)), $mul.ref(80, 1)), $mul.ref(1, 24)), $mul.ref(0, 1));
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p71, $0.ref);
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 824)), $mul.ref(80, 1)), $mul.ref(1, 24)), $mul.ref(8, 1));
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p74, $p0);
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 824)), $mul.ref(80, 1)), $mul.ref(2, 24)), $mul.ref(0, 1));
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p77, $0.ref);
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 824)), $mul.ref(80, 1)), $mul.ref(2, 24)), $mul.ref(8, 1));
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p80, $p0);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p4, $mul.ref(0, 824)), $mul.ref(168, 1));
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p24, $0.ref);
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p4, $mul.ref(0, 824)), $mul.ref(160, 1));
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p25, $0.ref);
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p4, $mul.ref(0, 824)), $mul.ref(152, 1));
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p26, $0.ref);
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p4, $mul.ref(0, 824)), $mul.ref(184, 1));
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, 0);
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 571} $p28 := kmalloc(4136, 208);
    goto SeqInstr_115, SeqInstr_116;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  SeqInstr_117:
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p4, $mul.ref(0, 824)), $mul.ref(176, 1));
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p30, $p28);
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p4, $mul.ref(0, 824)), $mul.ref(176, 1));
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p32);
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    $i34 := $eq.i64($i33, 0);
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p4, $mul.ref(0, 824)), $mul.ref(192, 1));
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p0);
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} tasklet_init($p39, write_iso_tasklet, $i40);
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p4, $mul.ref(0, 824)), $mul.ref(232, 1));
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} vslice_dummy_var_63 := spinlock_check($p41);
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 824)), $mul.ref(232, 1)), $mul.ref(0, 1));
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} __raw_spin_lock_init($p45, .str.104, $p2);
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 824)), $mul.ref(304, 1)), $mul.ref(0, 8));
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p47, $0.ref);
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 824)), $mul.ref(304, 1)), $mul.ref(1, 8));
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p66, $0.ref);
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 824)), $mul.ref(304, 1)), $mul.ref(2, 8));
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p68, $0.ref);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p4, $mul.ref(0, 824)), $mul.ref(712, 1));
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p48, $0.ref);
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p4, $mul.ref(0, 824)), $mul.ref(724, 1));
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p49, $sub.i32(0, 115));
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p4, $mul.ref(0, 824)), $mul.ref(728, 1));
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p50, 0);
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p4, $mul.ref(0, 824)), $mul.ref(732, 1));
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p51, 0);
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p4, $mul.ref(0, 824)), $mul.ref(736, 1));
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p52, 0);
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p4, $mul.ref(0, 824)), $mul.ref(740, 1));
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p53, 0);
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p4, $mul.ref(0, 824)), $mul.ref(744, 1));
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p54, 0);
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p4, $mul.ref(0, 824)), $mul.ref(748, 1));
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p55, 0);
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p4, $mul.ref(0, 824)), $mul.ref(752, 1));
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p56, 0);
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p4, $mul.ref(0, 824)), $mul.ref(756, 1));
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p57, 0);
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p4, $mul.ref(0, 824)), $mul.ref(760, 1));
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p58, 0);
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p4, $mul.ref(0, 824)), $mul.ref(764, 1));
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p59, 0);
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p4, $mul.ref(0, 824)), $mul.ref(768, 1));
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p60, 0);
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p4, $mul.ref(0, 824)), $mul.ref(772, 1));
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p61, 0);
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p4, $mul.ref(0, 824)), $mul.ref(776, 1));
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p62, 0);
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p4, $mul.ref(0, 824)), $mul.ref(784, 1));
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    $i64 := $p2i.ref.i64($p0);
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 577} tasklet_init($p63, read_iso_tasklet, $i64);
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb9:
    assume $i34 == 1;
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 572} vslice_dummy_var_62 := printk.ref(.str.105);
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p4);
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} kfree($p36);
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 480)), $mul.ref(384, 1));
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p38, $0.ref);
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_115:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 567} vslice_dummy_var_60 := printk.ref(.str.105);
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_112:
    assume !assertsPassed;
    return;
}



const gigaset_freebcshw: ref;

axiom gigaset_freebcshw == $sub.ref(0, 453561);

procedure gigaset_freebcshw($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation gigaset_freebcshw($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $p17: ref;
  var $p18: ref;
  var $p21: ref;
  var $p22: ref;
  var $p24: ref;
  var $p25: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p38: ref;
  var $p39: ref;
  var $p41: ref;
  var $p42: ref;
  var $p44: ref;
  var $p45: ref;
  var $p47: ref;
  var $p48: ref;
  var $p51: ref;
  var $p52: ref;
  var $p55: ref;
  var $p56: ref;
  var $p59: ref;
  var $p60: ref;
  var $p63: ref;
  var $p64: ref;
  var vslice_dummy_var_64: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 480)), $mul.ref(384, 1));
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 824)), $mul.ref(0, 1));
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, 0);
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, gigaset_debuglevel);
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 32768);
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 578} $i12 := ldv__builtin_expect($i11, 0);
    call {:si_unique_call 579} {:cexpr "tmp"} boogie_si_record_i64($i12);
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 824)), $mul.ref(80, 1)), $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} usb_kill_urb($p18);
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 824)), $mul.ref(80, 1)), $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 582} usb_free_urb($p22);
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 824)), $mul.ref(80, 1)), $mul.ref(1, 24)), $mul.ref(0, 1));
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} usb_kill_urb($p52);
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 824)), $mul.ref(80, 1)), $mul.ref(1, 24)), $mul.ref(0, 1));
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 584} usb_free_urb($p56);
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 824)), $mul.ref(80, 1)), $mul.ref(2, 24)), $mul.ref(0, 1));
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 595} usb_kill_urb($p60);
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 824)), $mul.ref(80, 1)), $mul.ref(2, 24)), $mul.ref(0, 1));
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 596} usb_free_urb($p64);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 824)), $mul.ref(304, 1)), $mul.ref(0, 8));
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 585} usb_kill_urb($p25);
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 824)), $mul.ref(304, 1)), $mul.ref(0, 8));
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 586} usb_free_urb($p28);
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 824)), $mul.ref(304, 1)), $mul.ref(1, 8));
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} usb_kill_urb($p39);
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 824)), $mul.ref(304, 1)), $mul.ref(1, 8));
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 588} usb_free_urb($p42);
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 824)), $mul.ref(304, 1)), $mul.ref(2, 8));
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 593} usb_kill_urb($p45);
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 824)), $mul.ref(304, 1)), $mul.ref(2, 8));
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 594} usb_free_urb($p48);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p3, $mul.ref(0, 824)), $mul.ref(192, 1));
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} tasklet_kill($p29);
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p3, $mul.ref(0, 824)), $mul.ref(784, 1));
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 590} tasklet_kill($p30);
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p3, $mul.ref(0, 824)), $mul.ref(176, 1));
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} kfree($p33);
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p3);
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} kfree($p34);
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 480)), $mul.ref(384, 1));
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p36, $0.ref);
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 580} vslice_dummy_var_64 := printk.ref.ref(.str.99, .str.100);
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const gigaset_reinitbcshw: ref;

axiom gigaset_reinitbcshw == $sub.ref(0, 454593);

procedure gigaset_reinitbcshw($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation gigaset_reinitbcshw($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var vslice_dummy_var_65: ref;
  var vslice_dummy_var_66: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 597} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 598} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 480)), $mul.ref(384, 1));
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 480)), $mul.ref(384, 1));
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 824)), $mul.ref(0, 1));
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, 0);
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 480)), $mul.ref(384, 1));
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 824)), $mul.ref(4, 1));
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 599} atomic_set($p13, 0);
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 480)), $mul.ref(384, 1));
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 824)), $mul.ref(184, 1));
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, 0);
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p5, $mul.ref(0, 824)), $mul.ref(8, 1));
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 600} vslice_dummy_var_65 := spinlock_check($p18);
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 824)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 601} __raw_spin_lock_init($p22, .str.103, $p1);
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p5, $mul.ref(0, 824)), $mul.ref(232, 1));
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 602} vslice_dummy_var_66 := spinlock_check($p23);
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 824)), $mul.ref(232, 1)), $mul.ref(0, 1));
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} __raw_spin_lock_init($p27, .str.104, $p2);
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p5, $mul.ref(0, 824)), $mul.ref(724, 1));
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, $sub.i32(0, 115));
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    return;
}



const gigaset_initcshw: ref;

axiom gigaset_initcshw == $sub.ref(0, 455625);

procedure gigaset_initcshw($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.17, $M.16, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22, $CurrAddr, assertsPassed;



implementation gigaset_initcshw($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $p35: ref;
  var $i36: i64;
  var $p38: ref;
  var $i39: i64;
  var $p41: ref;
  var $i42: i64;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p52: ref;
  var $p54: ref;
  var $p56: ref;
  var $p57: ref;
  var $i12: i32;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;
  var vslice_dummy_var_67: i32;
  var vslice_dummy_var_68: i32;
  var vslice_dummy_var_69: ref;
  var vslice_dummy_var_70: i32;
  var vslice_dummy_var_71: i32;
  var vslice_dummy_var_72: i32;
  var vslice_dummy_var_73: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 604} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 605} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 606} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 607} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} $p5 := kmalloc(888, 208);
    goto SeqInstr_118, SeqInstr_119;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  SeqInstr_120:
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 5232)), $mul.ref(5224, 1));
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, $p5);
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p6);
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} $p13 := kmalloc(3, 208);
    goto SeqInstr_121, SeqInstr_122;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  SeqInstr_123:
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p6, $mul.ref(0, 888)), $mul.ref(488, 1));
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p14, $p13);
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p6, $mul.ref(0, 888)), $mul.ref(488, 1));
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i17, 0);
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p6, $mul.ref(0, 888)), $mul.ref(328, 1));
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p21, $0.ref);
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p6, $mul.ref(0, 888)), $mul.ref(304, 1));
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p22, $0.ref);
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p6, $mul.ref(0, 888)), $mul.ref(472, 1));
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p23, $0.ref);
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p6, $mul.ref(0, 888)), $mul.ref(880, 1));
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, 0);
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p6, $mul.ref(0, 888)), $mul.ref(712, 1));
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} vslice_dummy_var_69 := spinlock_check($p25);
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 888)), $mul.ref(712, 1)), $mul.ref(0, 1));
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 614} __raw_spin_lock_init($p29, .str.148, $p1);
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p6, $mul.ref(0, 888)), $mul.ref(788, 1));
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, 0);
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p6, $mul.ref(0, 888)), $mul.ref(784, 1));
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p31, 0);
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p6, $mul.ref(0, 888)), $mul.ref(40, 1));
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p0);
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 615} vslice_dummy_var_70 := reg_timer_3($p32, req_timeout, $i33);
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p6, $mul.ref(0, 888)), $mul.ref(176, 1));
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p0);
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} vslice_dummy_var_71 := reg_timer_3($p35, atrdy_timeout, $i36);
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p6, $mul.ref(0, 888)), $mul.ref(344, 1));
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p0);
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} vslice_dummy_var_72 := reg_timer_3($p38, cmd_in_timeout, $i39);
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p6, $mul.ref(0, 888)), $mul.ref(576, 1));
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p0);
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 618} vslice_dummy_var_73 := reg_timer_3($p41, int_in_resubmit, $i42);
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p6, $mul.ref(0, 888)), $mul.ref(792, 1));
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 619} __init_waitqueue_head($p44, .str.149, $p2);
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p6, $mul.ref(0, 888)), $mul.ref(496, 1));
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 620} __init_work($p45, 0);
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p46, 137438953408);
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 888)), $mul.ref(496, 1)), $mul.ref(0, 1));
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p4);
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 621} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p49, $p50, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_2;
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 888)), $mul.ref(496, 1)), $mul.ref(32, 1));
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 622} lockdep_init_map($p52, .str.150, $p3, 0);
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 888)), $mul.ref(496, 1)), $mul.ref(8, 1));
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 623} INIT_LIST_HEAD($p54);
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 888)), $mul.ref(496, 1)), $mul.ref(24, 1));
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p56);
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p57, int_in_work);
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb5:
    assume $i18 == 1;
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p6);
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 611} kfree($p19);
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} vslice_dummy_var_68 := printk.ref(.str.105);
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_121:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 609} vslice_dummy_var_67 := printk.ref(.str.105);
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_118:
    assume !assertsPassed;
    return;
}



const gigaset_freecshw: ref;

axiom gigaset_freecshw == $sub.ref(0, 456657);

procedure gigaset_freecshw($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation gigaset_freecshw($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 5232)), $mul.ref(5224, 1));
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 888)), $mul.ref(488, 1));
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 624} kfree($p5);
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 5232)), $mul.ref(5224, 1));
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 625} kfree($p9);
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 5232)), $mul.ref(5224, 1));
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, $0.ref);
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    return;
}



const gigaset_set_modem_ctrl: ref;

axiom gigaset_set_modem_ctrl == $sub.ref(0, 457689);

procedure gigaset_set_modem_ctrl($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation gigaset_set_modem_ctrl($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 626} {:cexpr "gigaset_set_modem_ctrl:arg:old_state"} boogie_si_record_i32($i1);
    call {:si_unique_call 627} {:cexpr "gigaset_set_modem_ctrl:arg:new_state"} boogie_si_record_i32($i2);
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    $r := $sub.i32(0, 22);
    return;
}



const gigaset_baud_rate: ref;

axiom gigaset_baud_rate == $sub.ref(0, 458721);

procedure gigaset_baud_rate($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation gigaset_baud_rate($p0: ref, $i1: i32) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 628} {:cexpr "gigaset_baud_rate:arg:cflag"} boogie_si_record_i32($i1);
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    $r := $sub.i32(0, 22);
    return;
}



const gigaset_set_line_ctrl: ref;

axiom gigaset_set_line_ctrl == $sub.ref(0, 459753);

procedure gigaset_set_line_ctrl($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation gigaset_set_line_ctrl($p0: ref, $i1: i32) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 629} {:cexpr "gigaset_set_line_ctrl:arg:cflag"} boogie_si_record_i32($i1);
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    $r := $sub.i32(0, 22);
    return;
}



const gigaset_isoc_send_skb: ref;

axiom gigaset_isoc_send_skb == $sub.ref(0, 460785);

procedure gigaset_isoc_send_skb($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $CurrAddr;



implementation gigaset_isoc_send_skb($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $i22: i32;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i12: i32;
  var vslice_dummy_var_74: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    call {:si_unique_call 630} {:cexpr "len"} boogie_si_record_i32($i3);
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} ldv_spin_lock();
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 480)), $mul.ref(288, 1));
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 5232)), $mul.ref(1612, 1));
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 480)), $mul.ref(8, 1));
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 633} skb_queue_tail($p13, $p1);
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, gigaset_debuglevel);
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i14, 262144);
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i32($i16);
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i17);
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 634} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 635} {:cexpr "tmp___0"} boogie_si_record_i64($i19);
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 480)), $mul.ref(384, 1));
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 824)), $mul.ref(192, 1));
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 639} tasklet_schedule($p27);
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 480)), $mul.ref(288, 1));
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 5232)), $mul.ref(176, 1));
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 640} spin_unlock_irqrestore($p30, $u0);
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    $i12 := $i3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb5:
    assume $i20 == 1;
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 480)), $mul.ref(8, 1));
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 636} $i22 := skb_queue_len($p21);
    call {:si_unique_call 637} {:cexpr "tmp"} boogie_si_record_i32($i22);
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} vslice_dummy_var_74 := printk.ref.ref.i32(.str.12, .str.13, $i22);
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 480)), $mul.ref(288, 1));
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 5232)), $mul.ref(176, 1));
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} spin_unlock_irqrestore($p11, $u0);
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 19);
    goto $bb3;
}



const gigaset_isoc_input: ref;

axiom gigaset_isoc_input == $sub.ref(0, 461817);

procedure gigaset_isoc_input($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation gigaset_isoc_input($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $i18: i1;
  var $i19: i32;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i29: i64;
  var $i30: i64;
  var $i31: i1;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $i36: i64;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $i40: i32;
  var $i41: i1;
  var $i42: i32;
  var $i43: i32;
  var $i44: i32;
  var $i45: i1;
  var $i46: i32;
  var $i47: i64;
  var $i48: i64;
  var $i49: i1;
  var $p51: ref;
  var $i52: i32;
  var $i53: i1;
  var $i8: i32;
  var $i9: i32;
  var vslice_dummy_var_75: i32;
  var vslice_dummy_var_76: i32;
  var vslice_dummy_var_77: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 8216)), $mul.ref(0, 1));
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 8216)), $mul.ref(12, 1));
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    call {:si_unique_call 641} {:cexpr "head"} boogie_si_record_i32($i4);
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 8216)), $mul.ref(16, 1));
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    call {:si_unique_call 642} {:cexpr "tail"} boogie_si_record_i32($i6);
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, $i4);
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    $i8, $i9 := $i6, $i4;
    goto $bb4;

  $bb4:
    call $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i18, $i19, $p20, $p21, $i22, $p23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $p33, $i34, $i35, $i36, $p37, $p38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $p51, $i52, $i53, $i8, $i9, vslice_dummy_var_75, vslice_dummy_var_76, vslice_dummy_var_77 := gigaset_isoc_input_loop_$bb4($p0, $p2, $p5, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i18, $i19, $p20, $p21, $i22, $p23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $p33, $i34, $i35, $i36, $p37, $p38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $p51, $i52, $i53, $i8, $i9, vslice_dummy_var_75, vslice_dummy_var_76, vslice_dummy_var_77);
    goto $bb4_last;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, gigaset_debuglevel);
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 8);
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i12);
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 643} $i15 := ldv__builtin_expect($i14, 0);
    call {:si_unique_call 644} {:cexpr "tmp"} boogie_si_record_i64($i15);
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i18 := $ugt.i32($i9, $i8);
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i19 := $i8;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 8216)), $mul.ref(20, 1));
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    $i22 := $zext.i32.i64($i9);
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p21, $mul.ref($i22, 1));
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32($i19, $i9);
    call {:si_unique_call 646} {:cexpr "numbytes"} boogie_si_record_i32($i24);
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, gigaset_debuglevel);
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i25, 8);
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    $i28 := $zext.i1.i32($i27);
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    $i29 := $sext.i32.i64($i28);
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 647} $i30 := ldv__builtin_expect($i29, 0);
    call {:si_unique_call 648} {:cexpr "tmp___0"} boogie_si_record_i64($i30);
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, 0);
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref(0, 5232)), $mul.ref(144, 1));
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 2);
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i35 == 1);
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} cmd_loop($p23, $i24, $p0);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i40 := $add.i32($i9, $i24);
    call {:si_unique_call 653} {:cexpr "head"} boogie_si_record_i32($i40);
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i40, 8192);
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    $i42 := $i40;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, gigaset_debuglevel);
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    $i44 := $and.i32($i43, 8);
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    $i46 := $zext.i1.i32($i45);
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    $i47 := $sext.i32.i64($i46);
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 654} $i48 := ldv__builtin_expect($i47, 0);
    call {:si_unique_call 655} {:cexpr "tmp___1"} boogie_si_record_i64($i48);
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    $i49 := $ne.i64($i48, 0);
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 8216)), $mul.ref(12, 1));
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p51, $i42);
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.0, $p5);
    call {:si_unique_call 657} {:cexpr "tail"} boogie_si_record_i32($i52);
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, $i42);
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i53 == 1);
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb24:
    assume $i53 == 1;
    assume {:verifier.code 0} true;
    $i8, $i9 := $i52, $i42;
    goto $bb24_dummy;

  $bb21:
    assume $i49 == 1;
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} vslice_dummy_var_77 := printk.ref.i32(.str.11, $i42);
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb18:
    assume $i41 == 1;
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    $i42 := 0;
    goto $bb20;

  $bb15:
    assume $i35 == 1;
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    $i36 := $zext.i32.i64($i24);
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 650} gigaset_dbg_buffer(2097152, .str.10, $i36, $p23);
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 8216)), $mul.ref(0, 1));
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    $i39 := $zext.i32.i64($i24);
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} gigaset_if_receive($p38, $p23, $i39);
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb12:
    assume $i31 == 1;
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 649} vslice_dummy_var_76 := printk.ref.i32(.str.9, $i24);
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb9:
    assume $i18 == 1;
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    $i19 := 8192;
    goto $bb11;

  $bb6:
    assume $i16 == 1;
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} vslice_dummy_var_75 := printk.ref.i32.i32(.str.8, $i9, $i8);
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb24_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2866;
}



const gigaset_dbg_buffer: ref;

axiom gigaset_dbg_buffer == $sub.ref(0, 462849);

procedure gigaset_dbg_buffer($i0: i32, $p1: ref, $i2: i64, $p3: ref);
  free requires assertsPassed;



implementation gigaset_dbg_buffer($i0: i32, $p1: ref, $i2: i64, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 658} {:cexpr "gigaset_dbg_buffer:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 659} {:cexpr "gigaset_dbg_buffer:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    return;
}



const gigaset_if_receive: ref;

axiom gigaset_if_receive == $sub.ref(0, 463881);

procedure gigaset_if_receive($p0: ref, $p1: ref, $i2: i64);
  free requires assertsPassed;



implementation gigaset_if_receive($p0: ref, $p1: ref, $i2: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 660} {:cexpr "gigaset_if_receive:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    return;
}



const cmd_loop: ref;

axiom cmd_loop == $sub.ref(0, 464913);

procedure cmd_loop($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation cmd_loop($p0: ref, $i1: i32, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $p21: ref;
  var $i22: i8;
  var $i23: i32;
  var $i24: i1;
  var $p26: ref;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $p32: ref;
  var $i33: i64;
  var $p34: ref;
  var $p35: ref;
  var $p37: ref;
  var $i38: i1;
  var $i39: i64;
  var $p41: ref;
  var $i42: i32;
  var $i27: i32;
  var $i43: i32;
  var $i44: i1;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $i45: i32;
  var $i9: i32;
  var $p46: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 661} {:cexpr "cmd_loop:arg:numbytes"} boogie_si_record_i32($i1);
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 8216)), $mul.ref(0, 1));
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 5232)), $mul.ref(5216, 1));
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    call {:si_unique_call 662} {:cexpr "cbytes"} boogie_si_record_i32($i6);
    call {:si_unique_call 663} {:cexpr "cmd_loop:arg:tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32($i1, 1);
    call {:si_unique_call 664} {:cexpr "numbytes"} boogie_si_record_i32($i7);
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i1, 0);
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    $i9 := $i6;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p4, $mul.ref(0, 5232)), $mul.ref(5216, 1));
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p46, $i9);
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    $i10, $p11, $i12 := $i7, $p0, $i6;
    goto $bb4;

  $bb4:
    call $p13, $i14, $i15, $i16, $i17, $i18, $i19, $p21, $i22, $i23, $i24, $p26, $i28, $p29, $p30, $i31, $p32, $i33, $p34, $p35, $p37, $i38, $i39, $p41, $i42, $i27, $i43, $i44, $i10, $p11, $i12, $i45 := cmd_loop_loop_$bb4($p4, $p13, $i14, $i15, $i16, $i17, $i18, $i19, $p21, $i22, $i23, $i24, $p26, $i28, $p29, $p30, $i31, $p32, $i33, $p34, $p35, $p37, $i38, $i39, $p41, $i42, $i27, $i43, $i44, $i10, $p11, $i12, $i45);
    goto $bb4_last;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p11, $mul.ref(1, 1));
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p11);
    call {:si_unique_call 665} {:cexpr "c"} boogie_si_record_i8($i14);
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i15, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i15, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i38 := $ule.i32($i12, 510);
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i42 := $add.i32($i12, 1);
    call {:si_unique_call 670} {:cexpr "cbytes"} boogie_si_record_i32($i42);
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i27 := $i42;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    $i43 := $sub.i32($i10, 1);
    call {:si_unique_call 666} {:cexpr "numbytes"} boogie_si_record_i32($i43);
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i10, 0);
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    $i45 := $i27;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    $i9 := $i45;
    goto $bb3;

  $bb30:
    assume $i44 == 1;
    assume {:verifier.code 0} true;
    $i10, $p11, $i12 := $i43, $p13, $i27;
    goto $bb30_dummy;

  $bb26:
    assume $i38 == 1;
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    $i39 := $zext.i32.i64($i12);
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 5232)), $mul.ref(4704, 1)), $mul.ref($i39, 1));
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p41, $i14);
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb9:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i28 := $ugt.i32($i12, 510);
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i31 := $i12;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p4, $mul.ref(0, 5232)), $mul.ref(5216, 1));
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, $i31);
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    $i33 := $zext.i32.i64($i31);
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p4, $mul.ref(0, 5232)), $mul.ref(4704, 1));
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 668} gigaset_dbg_buffer(8192, .str.10, $i33, $p35);
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 669} gigaset_handle_modem_response($p4);
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 5232)), $mul.ref(4704, 1)), $mul.ref(0, 1));
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p37, $i14);
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    $i27 := 0;
    goto $bb20;

  $bb22:
    assume $i28 == 1;
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p4, $mul.ref(0, 5232)), $mul.ref(16, 1));
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 667} dev_warn.ref.ref.i32($p30, .str.226, $i12);
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    $i31 := 511;
    goto $bb24;

  $bb7:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i15, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb12;

  $bb13:
    assume $i18 == 1;
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i12, 0);
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb15:
    assume $i19 == 1;
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 5232)), $mul.ref(4704, 1)), $mul.ref(0, 1));
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.0, $p21);
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 13);
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb17;

  $bb18:
    assume $i24 == 1;
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 5232)), $mul.ref(4704, 1)), $mul.ref(0, 1));
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p26, 0);
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    $i27 := $i12;
    goto $bb20;

  $bb30_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2952;
}



const gigaset_handle_modem_response: ref;

axiom gigaset_handle_modem_response == $sub.ref(0, 465945);

procedure gigaset_handle_modem_response($p0: ref);
  free requires assertsPassed;



implementation gigaset_handle_modem_response($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    return;
}



const skb_queue_tail: ref;

axiom skb_queue_tail == $sub.ref(0, 466977);

procedure skb_queue_tail($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation skb_queue_tail($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    return;
}



const skb_queue_len: ref;

axiom skb_queue_len == $sub.ref(0, 468009);

procedure skb_queue_len($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation skb_queue_len($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 469041);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 470073);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    return;
}



const req_timeout: ref;

axiom req_timeout == $sub.ref(0, 471105);

procedure req_timeout($i0: i64);
  free requires assertsPassed;
  modifies $M.7, $M.0, $M.16, $M.18, $M.20, $M.22, $CurrAddr, $M.17, $M.19, $M.21, $M.23, assertsPassed;



implementation req_timeout($i0: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var vslice_dummy_var_78: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 671} {:cexpr "req_timeout:arg:data"} boogie_si_record_i64($i0);
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    $p1 := $i2p.i64.ref($i0);
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 5232)), $mul.ref(5224, 1));
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 672} check_pending($p4);
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 673} ldv_spin_lock();
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 888)), $mul.ref(788, 1));
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    call {:si_unique_call 674} {:cexpr "pending"} boogie_si_record_i32($i6);
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 888)), $mul.ref(788, 1));
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, 0);
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 888)), $mul.ref(712, 1));
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 675} spin_unlock_irqrestore($p8, $u0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i6, 38);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i6, 40);
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i6, 41);
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i6, 41);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p1, $mul.ref(0, 5232)), $mul.ref(16, 1));
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} dev_warn.ref.ref.i32($p48, .str.44, $i6);
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p4, $mul.ref(0, 888)), $mul.ref(792, 1));
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} __wake_up($p49, 3, 1, $0.ref);
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i12 == 1;
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 5232)), $mul.ref(16, 1));
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 678} dev_err.ref.ref($p38, .str.40);
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} error_reset($p1);
    goto SeqInstr_127, SeqInstr_128;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  SeqInstr_129:
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    goto $bb24;

  SeqInstr_127:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i11 == 1;
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 5232)), $mul.ref(16, 1));
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 676} dev_err.ref.ref($p27, .str.37);
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 677} error_reset($p1);
    goto SeqInstr_124, SeqInstr_125;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  SeqInstr_126:
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    goto $bb24;

  SeqInstr_124:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i6, 39);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i13 == 1);
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p1, $mul.ref(0, 5232)), $mul.ref(16, 1));
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 682} dev_err.ref.ref($p44, .str.43);
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p4, $mul.ref(0, 888)), $mul.ref(8, 1));
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} usb_queue_reset_device($p46);
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb11:
    assume $i13 == 1;
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p1, $mul.ref(0, 5232)), $mul.ref(16, 1));
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 680} dev_err.ref.ref($p42, .str.42);
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} error_reset($p1);
    goto SeqInstr_130, SeqInstr_131;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  SeqInstr_132:
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    goto $bb24;

  SeqInstr_130:
    assume !assertsPassed;
    return;

  $bb2:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i6, 36);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i6, 37);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i15 == 1);
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 5232)), $mul.ref(16, 1));
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 686} dev_err.ref.ref($p33, .str.39);
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 5232)), $mul.ref(160, 1));
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($p35, $mul.ref(1, 480));
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 687} error_hangup($p36);
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb15:
    assume $i15 == 1;
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 5232)), $mul.ref(16, 1));
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} dev_err.ref.ref($p40, .str.41);
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 685} error_reset($p1);
    goto SeqInstr_133, SeqInstr_134;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  SeqInstr_135:
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    goto $bb24;

  SeqInstr_133:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i6, 35);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i16 == 1);
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 5232)), $mul.ref(16, 1));
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} dev_err.ref.ref($p29, .str.38);
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 5232)), $mul.ref(160, 1));
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 689} error_hangup($p31);
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb17:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i6, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb10;

  $bb19:
    assume $i17 == 1;
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, gigaset_debuglevel);
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i18, 1048576);
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    $i21 := $zext.i1.i32($i20);
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i21);
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 690} $i23 := ldv__builtin_expect($i22, 0);
    call {:si_unique_call 691} {:cexpr "tmp"} boogie_si_record_i64($i23);
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb21:
    assume $i24 == 1;
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 692} vslice_dummy_var_78 := printk.ref.ref(.str.35, .str.36);
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    goto $bb23;
}



const reg_timer_3: ref;

axiom reg_timer_3 == $sub.ref(0, 472137);

procedure reg_timer_3($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.17, $M.0, $M.16, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22;



implementation reg_timer_3($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $i3: i64;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} {:cexpr "reg_timer_3:arg:data"} boogie_si_record_i64($i2);
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p1);
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, $p2i.ref.i64(atrdy_timeout));
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} activate_suitable_timer_3($p0, $i2);
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const atrdy_timeout: ref;

axiom atrdy_timeout == $sub.ref(0, 473169);

procedure atrdy_timeout($i0: i64);
  free requires assertsPassed;
  modifies $M.0, $M.7, $CurrAddr, $M.17, $M.16, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22, assertsPassed;



implementation atrdy_timeout($i0: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var vslice_dummy_var_79: i32;
  var vslice_dummy_var_80: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 697} {:cexpr "atrdy_timeout:arg:data"} boogie_si_record_i64($i0);
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    $p1 := $i2p.i64.ref($i0);
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 5232)), $mul.ref(5224, 1));
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 5232)), $mul.ref(16, 1));
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} dev_warn.ref.ref($p6, .str.82);
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} vslice_dummy_var_79 := update_basstate($p4, 8, 32);
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 700} vslice_dummy_var_80 := start_cbsend($p1);
    goto SeqInstr_136, SeqInstr_137;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  SeqInstr_138:
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_136:
    assume !assertsPassed;
    return;
}



const cmd_in_timeout: ref;

axiom cmd_in_timeout == $sub.ref(0, 474201);

procedure cmd_in_timeout($i0: i64);
  free requires assertsPassed;
  modifies $M.0, $M.7, $M.17, $M.16, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22, $CurrAddr, assertsPassed;



implementation cmd_in_timeout($i0: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $p21: ref;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $i33: i1;
  var $i34: i32;
  var $i35: i64;
  var $i36: i64;
  var $i37: i1;
  var $p38: ref;
  var $i39: i32;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i1;
  var vslice_dummy_var_81: i32;
  var vslice_dummy_var_82: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 701} {:cexpr "cmd_in_timeout:arg:data"} boogie_si_record_i64($i0);
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    $p1 := $i2p.i64.ref($i0);
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 5232)), $mul.ref(5224, 1));
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 888)), $mul.ref(880, 1));
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p4, $mul.ref(0, 888)), $mul.ref(884, 1));
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    call {:si_unique_call 705} {:cexpr "tmp___0"} boogie_si_record_i32($i17);
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p4, $mul.ref(0, 888)), $mul.ref(884, 1));
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    $i20 := $add.i32($i19, 1);
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p4, $mul.ref(0, 888)), $mul.ref(884, 1));
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, $i20);
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    $i22 := $sgt.i32($i17, 2);
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, gigaset_debuglevel);
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $i32 := $and.i32($i31, 1048576);
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    $i34 := $zext.i1.i32($i33);
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    $i35 := $sext.i32.i64($i34);
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 709} $i36 := ldv__builtin_expect($i35, 0);
    call {:si_unique_call 710} {:cexpr "tmp___1"} boogie_si_record_i64($i36);
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    $i37 := $ne.i64($i36, 0);
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 712} $i41 := atread_submit($p1, 20);
    goto SeqInstr_142, SeqInstr_143;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  SeqInstr_144:
    call {:si_unique_call 713} {:cexpr "rc"} boogie_si_record_i32($i41);
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    $i42 := $slt.i32($i41, 0);
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb14:
    assume $i42 == 1;
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p4, $mul.ref(0, 888)), $mul.ref(472, 1));
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 714} kfree($p44);
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p4, $mul.ref(0, 888)), $mul.ref(472, 1));
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p45, $0.ref);
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p4, $mul.ref(0, 888)), $mul.ref(880, 1));
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p46, 0);
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i41, $sub.i32(0, 19));
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume $i47 == 1;
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 715} error_reset($p1);
    goto SeqInstr_145, SeqInstr_146;

  SeqInstr_146:
    assume assertsPassed;
    goto SeqInstr_147;

  SeqInstr_147:
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    goto $bb18;

  SeqInstr_145:
    assume !assertsPassed;
    return;

  SeqInstr_142:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i37 == 1;
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p4, $mul.ref(0, 888)), $mul.ref(884, 1));
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 711} vslice_dummy_var_82 := printk.ref.ref.i32(.str.72, .str.70, $i39);
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i22 == 1;
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 5232)), $mul.ref(16, 1));
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p4, $mul.ref(0, 888)), $mul.ref(884, 1));
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 706} dev_err.ref.ref.i32($p24, .str.71, $i26);
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p4, $mul.ref(0, 888)), $mul.ref(472, 1));
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 707} kfree($p28);
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p4, $mul.ref(0, 888)), $mul.ref(472, 1));
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p29, $0.ref);
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p4, $mul.ref(0, 888)), $mul.ref(880, 1));
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, 0);
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 708} error_reset($p1);
    goto SeqInstr_139, SeqInstr_140;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  SeqInstr_141:
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_139:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, gigaset_debuglevel);
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 1048576);
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 702} $i13 := ldv__builtin_expect($i12, 0);
    call {:si_unique_call 703} {:cexpr "tmp"} boogie_si_record_i64($i13);
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i14 == 1;
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 704} vslice_dummy_var_81 := printk.ref.ref(.str.69, .str.70);
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const int_in_resubmit: ref;

axiom int_in_resubmit == $sub.ref(0, 475233);

procedure int_in_resubmit($i0: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, assertsPassed;



implementation int_in_resubmit($i0: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $i26: i32;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var vslice_dummy_var_83: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 716} {:cexpr "int_in_resubmit:arg:data"} boogie_si_record_i64($i0);
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    $p1 := $i2p.i64.ref($i0);
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 5232)), $mul.ref(5224, 1));
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 888)), $mul.ref(704, 1));
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    call {:si_unique_call 717} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 888)), $mul.ref(704, 1));
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    $i9 := $add.i32($i8, 1);
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 888)), $mul.ref(704, 1));
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i9);
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    $i11 := $sgt.i32($i6, 2);
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, gigaset_debuglevel);
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i18, 1048576);
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    $i21 := $zext.i1.i32($i20);
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i21);
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 720} $i23 := ldv__builtin_expect($i22, 0);
    call {:si_unique_call 721} {:cexpr "tmp___0"} boogie_si_record_i64($i23);
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p4, $mul.ref(0, 888)), $mul.ref(480, 1));
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 723} $i30 := ldv_usb_submit_urb_47($p29, 32);
    goto SeqInstr_148, SeqInstr_149;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  SeqInstr_150:
    call {:si_unique_call 724} {:cexpr "rc"} boogie_si_record_i32($i30);
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i31 == 1;
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i30, $sub.i32(0, 19));
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb10;

  $bb11:
    assume $i32 == 1;
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 725} $p33 := get_usb_rcmsg($i30);
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 5232)), $mul.ref(16, 1));
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 726} dev_err.ref.ref.ref($p35, .str.34, $p33);
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p4, $mul.ref(0, 888)), $mul.ref(8, 1));
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 727} usb_queue_reset_device($p37);
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_148:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i24 == 1;
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p4, $mul.ref(0, 888)), $mul.ref(704, 1));
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 722} vslice_dummy_var_83 := printk.ref.ref.i32(.str.32, .str.33, $i26);
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 5232)), $mul.ref(16, 1));
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 888)), $mul.ref(704, 1));
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 718} dev_err.ref.ref.i32($p13, .str.31, $i15);
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p4, $mul.ref(0, 888)), $mul.ref(8, 1));
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 719} usb_queue_reset_device($p17);
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __init_waitqueue_head: ref;

axiom __init_waitqueue_head == $sub.ref(0, 476265);

procedure __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    return;
}



const __init_work: ref;

axiom __init_work == $sub.ref(0, 477297);

procedure __init_work($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __init_work($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 728} {:cexpr "__init_work:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    return;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 478329);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const lockdep_init_map: ref;

axiom lockdep_init_map == $sub.ref(0, 479361);

procedure lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;



implementation lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 729} {:cexpr "lockdep_init_map:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    return;
}



const int_in_work: ref;

axiom int_in_work == $sub.ref(0, 480393);

procedure int_in_work($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, assertsPassed;



implementation int_in_work($p0: ref)
{
  var $p1: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $i22: i1;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var vslice_dummy_var_84: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 496), 888)), $mul.ref(480, 1));
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 496), 888)), $mul.ref(0, 1));
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} $i12 := usb_clear_halt($p9, $i11);
    call {:si_unique_call 731} {:cexpr "rc"} boogie_si_record_i32($i12);
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, gigaset_debuglevel);
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, 1048576);
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 732} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 733} {:cexpr "tmp___0"} boogie_si_record_i64($i18);
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i12, 0);
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i24 := $i12;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i24, $sub.i32(0, 19));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i24, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i24, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 738} $p30 := get_usb_rcmsg($i24);
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p7, $mul.ref(0, 5232)), $mul.ref(16, 1));
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} dev_err.ref.ref.ref($p32, .str.15, $p30);
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 496), 888)), $mul.ref(0, 1));
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 496), 888)), $mul.ref(8, 1));
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 740} $i37 := usb_lock_device_for_reset($p34, $p36);
    call {:si_unique_call 741} {:cexpr "rc"} boogie_si_record_i32($i37);
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 0);
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 496), 888)), $mul.ref(704, 1));
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p45, 0);
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    return;

  $bb23:
    assume $i38 == 1;
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 496), 888)), $mul.ref(0, 1));
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 742} $i41 := usb_reset_device($p40);
    call {:si_unique_call 743} {:cexpr "rc"} boogie_si_record_i32($i41);
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 496), 888)), $mul.ref(0, 1));
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p43, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} device_unlock($p44);
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb12:
    assume $i27 == 1;
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb10:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i24, $sub.i32(0, 19));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb14;

  $bb15:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb16;

  $bb8:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i24, $sub.i32(0, 22));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb14;

  $bb18:
    assume {:verifier.code 0} true;
    assume $i29 == 1;
    goto $bb19;

  $bb4:
    assume $i22 == 1;
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 736} $i23 := ldv_usb_submit_urb_46($p4, 32);
    goto SeqInstr_151, SeqInstr_152;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  SeqInstr_153:
    call {:si_unique_call 737} {:cexpr "rc"} boogie_si_record_i32($i23);
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    $i24 := $i23;
    goto $bb6;

  SeqInstr_151:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 734} $p20 := get_usb_rcmsg($i12);
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 735} vslice_dummy_var_84 := printk.ref.ref(.str.14, $p20);
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const usb_clear_halt: ref;

axiom usb_clear_halt == $sub.ref(0, 481425);

procedure usb_clear_halt($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usb_clear_halt($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 745} {:cexpr "usb_clear_halt:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 1} true;
    call {:si_unique_call 746} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 747} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_usb_submit_urb_46: ref;

axiom ldv_usb_submit_urb_46 == $sub.ref(0, 482457);

procedure ldv_usb_submit_urb_46($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_submit_urb_46($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} {:cexpr "ldv_usb_submit_urb_46:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 749} ldv_check_alloc_flags($i1);
    goto SeqInstr_154, SeqInstr_155;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  SeqInstr_156:
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 750} $p2 := ldv_undef_ptr();
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_154:
    assume !assertsPassed;
    return;
}



const usb_lock_device_for_reset: ref;

axiom usb_lock_device_for_reset == $sub.ref(0, 483489);

procedure usb_lock_device_for_reset($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_lock_device_for_reset($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 1} true;
    call {:si_unique_call 751} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 752} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const usb_reset_device: ref;

axiom usb_reset_device == $sub.ref(0, 484521);

procedure usb_reset_device($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_reset_device($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 1} true;
    call {:si_unique_call 753} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 754} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const device_unlock: ref;

axiom device_unlock == $sub.ref(0, 485553);

procedure device_unlock($p0: ref);
  free requires assertsPassed;



implementation device_unlock($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(328, 1));
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 755} mutex_unlock($p1);
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    return;
}



const mutex_unlock: ref;

axiom mutex_unlock == $sub.ref(0, 486585);

procedure mutex_unlock($p0: ref);
  free requires assertsPassed;



implementation mutex_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_submit_urb_47: ref;

axiom ldv_usb_submit_urb_47 == $sub.ref(0, 487617);

procedure ldv_usb_submit_urb_47($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_submit_urb_47($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} {:cexpr "ldv_usb_submit_urb_47:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 757} ldv_check_alloc_flags($i1);
    goto SeqInstr_157, SeqInstr_158;

  SeqInstr_158:
    assume assertsPassed;
    goto SeqInstr_159;

  SeqInstr_159:
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} $p2 := ldv_undef_ptr();
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_157:
    assume !assertsPassed;
    return;
}



const error_hangup: ref;

axiom error_hangup == $sub.ref(0, 488649);

procedure error_hangup($p0: ref);
  free requires assertsPassed;
  modifies $M.7, $CurrAddr;



implementation error_hangup($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var vslice_dummy_var_85: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 480)), $mul.ref(288, 1));
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 480)), $mul.ref(120, 1));
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 759} vslice_dummy_var_85 := gigaset_add_event($p2, $p3, $sub.i32(0, 116), $0.ref, 0, $0.ref);
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} gigaset_schedule_event($p2);
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    return;
}



const atomic_set: ref;

axiom atomic_set == $sub.ref(0, 489681);

procedure atomic_set($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation atomic_set($p0: ref, $i1: i32)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 761} {:cexpr "atomic_set:arg:i"} boogie_si_record_i32($i1);
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i1);
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    return;
}



const tasklet_kill: ref;

axiom tasklet_kill == $sub.ref(0, 490713);

procedure tasklet_kill($p0: ref);
  free requires assertsPassed;



implementation tasklet_kill($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    return;
}



const write_iso_tasklet: ref;

axiom write_iso_tasklet == $sub.ref(0, 491745);

procedure write_iso_tasklet($i0: i64);



const tasklet_init: ref;

axiom tasklet_init == $sub.ref(0, 492777);

procedure tasklet_init($p0: ref, $p1: ref, $i2: i64);
  free requires assertsPassed;



implementation tasklet_init($p0: ref, $p1: ref, $i2: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} {:cexpr "tasklet_init:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    return;
}



const read_iso_tasklet: ref;

axiom read_iso_tasklet == $sub.ref(0, 493809);

procedure read_iso_tasklet($i0: i64);



const gigaset_isoc_receive: ref;

axiom gigaset_isoc_receive == $sub.ref(0, 494841);

procedure gigaset_isoc_receive($p0: ref, $i1: i32, $p2: ref);



const ldv_usb_submit_urb_55: ref;

axiom ldv_usb_submit_urb_55 == $sub.ref(0, 495873);

procedure ldv_usb_submit_urb_55($p0: ref, $i1: i32) returns ($r: i32);



const dump_urb: ref;

axiom dump_urb == $sub.ref(0, 496905);

procedure dump_urb($i0: i32, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation dump_urb($i0: i32, $p1: ref, $p2: ref)
{
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $i10: i64;
  var $i12: i64;
  var $i13: i1;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $i30: i32;
  var $p31: ref;
  var $i32: i32;
  var $i33: i32;
  var $i34: i32;
  var $p35: ref;
  var $i36: i32;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $p43: ref;
  var $i44: i32;
  var $i46: i32;
  var $i47: i32;
  var $i48: i1;
  var $i49: i32;
  var $i50: i64;
  var $i51: i64;
  var $i52: i1;
  var $p53: ref;
  var $p54: ref;
  var $i55: i64;
  var $p56: ref;
  var $i57: i32;
  var $p58: ref;
  var $i59: i32;
  var $p60: ref;
  var $p61: ref;
  var $i62: i64;
  var $i64: i32;
  var $i65: i32;
  var $i66: i1;
  var $i67: i32;
  var $i68: i64;
  var $i69: i64;
  var $i70: i1;
  var $p71: ref;
  var $i72: i32;
  var $p73: ref;
  var $i74: i32;
  var $p75: ref;
  var $i76: i32;
  var $p77: ref;
  var $i78: i32;
  var $i80: i32;
  var $i81: i32;
  var $i82: i1;
  var $i83: i32;
  var $i84: i64;
  var $i85: i64;
  var $i86: i1;
  var $p87: ref;
  var $p88: ref;
  var $i89: i64;
  var $p90: ref;
  var $p91: ref;
  var $i92: i64;
  var $p94: ref;
  var $i95: i32;
  var $i96: i1;
  var $p98: ref;
  var $p99: ref;
  var $i100: i64;
  var $i102: i32;
  var $i103: i32;
  var $i104: i1;
  var $i105: i32;
  var $i106: i64;
  var $i107: i64;
  var $i108: i1;
  var $p109: ref;
  var $i110: i32;
  var $p111: ref;
  var $i112: i32;
  var $p113: ref;
  var $i114: i32;
  var $p115: ref;
  var $i116: i32;
  var $i118: i32;
  var $i119: i32;
  var $i120: i1;
  var $i97: i32;
  var $i121: i32;
  var $i122: i32;
  var $i123: i1;
  var $i124: i32;
  var $i125: i64;
  var $i126: i64;
  var $i127: i1;
  var vslice_dummy_var_86: i32;
  var vslice_dummy_var_87: i32;
  var vslice_dummy_var_88: i32;
  var vslice_dummy_var_89: i32;
  var vslice_dummy_var_90: i32;
  var vslice_dummy_var_91: i32;
  var vslice_dummy_var_92: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 763} {:cexpr "dump_urb:arg:level"} boogie_si_record_i32($i0);
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, gigaset_debuglevel);
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, $i0);
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} $i8 := ldv__builtin_expect($i7, 0);
    call {:si_unique_call 765} {:cexpr "tmp"} boogie_si_record_i64($i8);
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p2);
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i121 := $load.i32($M.0, gigaset_debuglevel);
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    $i122 := $and.i32($i121, $i0);
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    $i123 := $ne.i32($i122, 0);
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    $i124 := $zext.i1.i32($i123);
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    $i125 := $sext.i32.i64($i124);
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} $i126 := ldv__builtin_expect($i125, 0);
    call {:si_unique_call 785} {:cexpr "tmp___6"} boogie_si_record_i64($i126);
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    $i127 := $ne.i64($i126, 0);
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    return;

  $bb30:
    assume $i127 == 1;
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 786} vslice_dummy_var_92 := printk.ref(.str.142);
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, gigaset_debuglevel);
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i14, $i0);
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i32($i16);
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i17);
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 767} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 768} {:cexpr "tmp___1"} boogie_si_record_i64($i19);
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, gigaset_debuglevel);
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    $i47 := $and.i32($i46, $i0);
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    $i49 := $zext.i1.i32($i48);
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    $i50 := $sext.i32.i64($i49);
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} $i51 := ldv__builtin_expect($i50, 0);
    call {:si_unique_call 772} {:cexpr "tmp___2"} boogie_si_record_i64($i51);
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    $i52 := $ne.i64($i51, 0);
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.0, gigaset_debuglevel);
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    $i65 := $and.i32($i64, $i0);
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    $i66 := $ne.i32($i65, 0);
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    $i67 := $zext.i1.i32($i66);
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    $i68 := $sext.i32.i64($i67);
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} $i69 := ldv__builtin_expect($i68, 0);
    call {:si_unique_call 775} {:cexpr "tmp___3"} boogie_si_record_i64($i69);
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    $i70 := $ne.i64($i69, 0);
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    assume {:branchcond $i70} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i80 := $load.i32($M.0, gigaset_debuglevel);
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    $i81 := $and.i32($i80, $i0);
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    $i82 := $ne.i32($i81, 0);
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    $i83 := $zext.i1.i32($i82);
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    $i84 := $sext.i32.i64($i83);
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} $i85 := ldv__builtin_expect($i84, 0);
    call {:si_unique_call 778} {:cexpr "tmp___4"} boogie_si_record_i64($i85);
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    $i86 := $ne.i64($i85, 0);
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    assume {:branchcond $i86} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p2, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    $i95 := $load.i32($M.0, $p94);
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    $i96 := $sgt.i32($i95, 0);
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    assume {:branchcond $i96} true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i96 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb18:
    assume $i96 == 1;
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    $i97 := 0;
    goto $bb21;

  $bb21:
    call $p98, $p99, $i100, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $p109, $i110, $p111, $i112, $p113, $i114, $p115, $i116, $i118, $i119, $i120, $i97, vslice_dummy_var_91 := dump_urb_loop_$bb21($i0, $p2, $p94, $p98, $p99, $i100, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $p109, $i110, $p111, $i112, $p113, $i114, $p115, $i116, $i118, $i119, $i120, $i97, vslice_dummy_var_91);
    goto $bb21_last;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p2, $mul.ref(0, 192)), $mul.ref(192, 1));
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    $p99 := $bitcast.ref.ref($p98);
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    $i100 := $sext.i32.i64($i97);
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    $i102 := $load.i32($M.0, gigaset_debuglevel);
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    $i103 := $and.i32($i102, $i0);
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    $i104 := $ne.i32($i103, 0);
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    $i105 := $zext.i1.i32($i104);
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    $i106 := $sext.i32.i64($i105);
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} $i107 := ldv__builtin_expect($i106, 0);
    call {:si_unique_call 781} {:cexpr "tmp___5"} boogie_si_record_i64($i107);
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    $i108 := $ne.i64($i107, 0);
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i118 := $add.i32($i97, 1);
    call {:si_unique_call 783} {:cexpr "i"} boogie_si_record_i32($i118);
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    $i119 := $load.i32($M.0, $p94);
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    $i120 := $sgt.i32($i119, $i118);
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i120 == 1);
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb26:
    assume $i120 == 1;
    assume {:verifier.code 0} true;
    $i97 := $i118;
    goto $bb26_dummy;

  $bb23:
    assume $i108 == 1;
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p99, $mul.ref($i100, 16)), $mul.ref(0, 1));
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    $i110 := $load.i32($M.0, $p109);
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p99, $mul.ref($i100, 16)), $mul.ref(4, 1));
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    $i112 := $load.i32($M.0, $p111);
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p99, $mul.ref($i100, 16)), $mul.ref(8, 1));
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    $i114 := $load.i32($M.0, $p113);
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p99, $mul.ref($i100, 16)), $mul.ref(12, 1));
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    $i116 := $load.i32($M.0, $p115);
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} vslice_dummy_var_91 := printk.ref.i32.i32.i32.i32(.str.141, $i110, $i112, $i114, $i116);
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb15:
    assume $i86 == 1;
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p2, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.0, $p87);
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    $i89 := $p2i.ref.i64($p88);
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p2, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.0, $p90);
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    $i92 := $p2i.ref.i64($p91);
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} vslice_dummy_var_90 := printk.ref.i64.i64(.str.140, $i89, $i92);
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb12:
    assume $i70 == 1;
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p2, $mul.ref(0, 192)), $mul.ref(160, 1));
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.0, $p71);
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p2, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.0, $p73);
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p2, $mul.ref(0, 192)), $mul.ref(168, 1));
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.0, $p75);
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p2, $mul.ref(0, 192)), $mul.ref(172, 1));
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.0, $p77);
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 776} vslice_dummy_var_89 := printk.ref.i32.i32.i32.i32(.str.139, $i72, $i74, $i76, $i78);
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb9:
    assume $i52 == 1;
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p2, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    $i55 := $p2i.ref.i64($p54);
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p2, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.0, $p56);
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p2, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p58);
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p2, $mul.ref(0, 192)), $mul.ref(144, 1));
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    $i62 := $p2i.ref.i64($p61);
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 773} vslice_dummy_var_88 := printk.ref.i64.i32.i32.i64(.str.138, $i55, $i57, $i59, $i62);
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb6:
    assume $i20 == 1;
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 769} $p23 := usb_pipetype_str($i22);
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    $i29 := $lshr.i32($i28, 15);
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    $i30 := $and.i32($i29, 15);
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    $i33 := $lshr.i32($i32, 8);
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    $i34 := $and.i32($i33, 127);
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p2, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    $i37 := $and.i32($i36, 128);
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    $p39 := (if $i38 == 1 then .str.136 else .str.137);
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p2, $mul.ref(0, 192)), $mul.ref(8, 1));
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p41);
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 770} vslice_dummy_var_87 := printk.ref.i64.ref.i32.i32.ref.i64.i32(.str.135, $i26, $p23, $i30, $i34, $p39, $i42, $i44);
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p2);
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} vslice_dummy_var_86 := printk.ref.ref.i64(.str.134, $p1, $i10);
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb26_dummy:
    assume false;
    return;

  $bb21_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3465;
}



const usb_pipetype_str: ref;

axiom usb_pipetype_str == $sub.ref(0, 497937);

procedure usb_pipetype_str($i0: i32) returns ($r: ref);
  free requires assertsPassed;



implementation usb_pipetype_str($i0: i32) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 787} {:cexpr "usb_pipetype_str:arg:pipe"} boogie_si_record_i32($i0);
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    $i1 := $lshr.i32($i0, 30);
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 0);
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i4 := $lshr.i32($i0, 30);
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 1);
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i6 := $lshr.i32($i0, 30);
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 2);
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i8 := $lshr.i32($i0, 30);
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 3);
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p3 := .str.147;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    $p3 := .str.146;
    goto $bb3;

  $bb8:
    assume $i7 == 1;
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    $p3 := .str.145;
    goto $bb3;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    $p3 := .str.144;
    goto $bb3;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    $p3 := .str.143;
    goto $bb3;
}



const hdlc_unpack: ref;

axiom hdlc_unpack == $sub.ref(0, 498969);

procedure hdlc_unpack($p0: ref, $i1: i32, $p2: ref);



const trans_receive: ref;

axiom trans_receive == $sub.ref(0, 500001);

procedure trans_receive($p0: ref, $i1: i32, $p2: ref);



const gigaset_new_rx_skb: ref;

axiom gigaset_new_rx_skb == $sub.ref(0, 501033);

procedure gigaset_new_rx_skb($p0: ref) returns ($r: ref);



const skb_put: ref;

axiom skb_put == $sub.ref(0, 502065);

procedure skb_put($p0: ref, $i1: i32) returns ($r: ref);



const __bitrev8: ref;

axiom __bitrev8 == $sub.ref(0, 503097);

procedure __bitrev8($i0: i8) returns ($r: i8);



const dump_bytes: ref;

axiom dump_bytes == $sub.ref(0, 504129);

procedure dump_bytes($i0: i32, $p1: ref, $p2: ref, $i3: i32);



const gigaset_skb_rcvd: ref;

axiom gigaset_skb_rcvd == $sub.ref(0, 505161);

procedure gigaset_skb_rcvd($p0: ref, $p1: ref);



const dev_alloc_skb: ref;

axiom dev_alloc_skb == $sub.ref(0, 506193);

procedure dev_alloc_skb($i0: i32) returns ($r: ref);



const skb_reserve: ref;

axiom skb_reserve == $sub.ref(0, 507225);

procedure skb_reserve($p0: ref, $i1: i32);



const netdev_alloc_skb: ref;

axiom netdev_alloc_skb == $sub.ref(0, 508257);

procedure netdev_alloc_skb($p0: ref, $i1: i32) returns ($r: ref);



const ldv___netdev_alloc_skb_144: ref;

axiom ldv___netdev_alloc_skb_144 == $sub.ref(0, 509289);

procedure ldv___netdev_alloc_skb_144($p0: ref, $i1: i32, $i2: i32) returns ($r: ref);



const hdlc_putbyte: ref;

axiom hdlc_putbyte == $sub.ref(0, 510321);

procedure hdlc_putbyte($i0: i8, $p1: ref);



const hdlc_flush: ref;

axiom hdlc_flush == $sub.ref(0, 511353);

procedure hdlc_flush($p0: ref);



const hdlc_frag: ref;

axiom hdlc_frag == $sub.ref(0, 512385);

procedure hdlc_frag($p0: ref, $i1: i32);



const hdlc_done: ref;

axiom hdlc_done == $sub.ref(0, 513417);

procedure hdlc_done($p0: ref);



const gigaset_isdn_rcv_err: ref;

axiom gigaset_isdn_rcv_err == $sub.ref(0, 514449);

procedure gigaset_isdn_rcv_err($p0: ref);



const dev_kfree_skb_any: ref;

axiom dev_kfree_skb_any == $sub.ref(0, 515481);

procedure dev_kfree_skb_any($p0: ref);



const __skb_trim: ref;

axiom __skb_trim == $sub.ref(0, 516513);

procedure __skb_trim($p0: ref, $i1: i32);



const skb_is_nonlinear: ref;

axiom skb_is_nonlinear == $sub.ref(0, 517545);

procedure skb_is_nonlinear($p0: ref) returns ($r: i1);



const warn_slowpath_null: ref;

axiom warn_slowpath_null == $sub.ref(0, 518577);

procedure warn_slowpath_null($p0: ref, $i1: i32);



const skb_set_tail_pointer: ref;

axiom skb_set_tail_pointer == $sub.ref(0, 519609);

procedure skb_set_tail_pointer($p0: ref, $i1: i32);



const skb_reset_tail_pointer: ref;

axiom skb_reset_tail_pointer == $sub.ref(0, 520641);

procedure skb_reset_tail_pointer($p0: ref);



const __dev_kfree_skb_any: ref;

axiom __dev_kfree_skb_any == $sub.ref(0, 521673);

procedure __dev_kfree_skb_any($p0: ref, $i1: i32);



const skb_trim: ref;

axiom skb_trim == $sub.ref(0, 522705);

procedure skb_trim($p0: ref, $i1: i32);



const crc_ccitt_byte: ref;

axiom crc_ccitt_byte == $sub.ref(0, 523737);

procedure crc_ccitt_byte($i0: i16, $i1: i8) returns ($r: i16);



const __skb_put: ref;

axiom __skb_put == $sub.ref(0, 524769);

procedure __skb_put($p0: ref, $i1: i32) returns ($r: ref);



const skb_tail_pointer: ref;

axiom skb_tail_pointer == $sub.ref(0, 525801);

procedure skb_tail_pointer($p0: ref) returns ($r: ref);



const submit_iso_write_urb: ref;

axiom submit_iso_write_urb == $sub.ref(0, 526833);

procedure submit_iso_write_urb($p0: ref) returns ($r: i32);



const gigaset_isoc_buildframe: ref;

axiom gigaset_isoc_buildframe == $sub.ref(0, 527865);

procedure gigaset_isoc_buildframe($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);



const skb_queue_head: ref;

axiom skb_queue_head == $sub.ref(0, 528897);

procedure skb_queue_head($p0: ref, $p1: ref);



const skb_pull: ref;

axiom skb_pull == $sub.ref(0, 529929);

procedure skb_pull($p0: ref, $i1: i32) returns ($r: ref);



const gigaset_skb_sent: ref;

axiom gigaset_skb_sent == $sub.ref(0, 530961);

procedure gigaset_skb_sent($p0: ref, $p1: ref);



const skb_dequeue: ref;

axiom skb_dequeue == $sub.ref(0, 531993);

procedure skb_dequeue($p0: ref) returns ($r: ref);



const hdlc_buildframe: ref;

axiom hdlc_buildframe == $sub.ref(0, 533025);

procedure hdlc_buildframe($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);



const trans_buildframe: ref;

axiom trans_buildframe == $sub.ref(0, 534057);

procedure trans_buildframe($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);



const isowbuf_freebytes: ref;

axiom isowbuf_freebytes == $sub.ref(0, 535089);

procedure isowbuf_freebytes($p0: ref) returns ($r: i32);



const isowbuf_startwrite: ref;

axiom isowbuf_startwrite == $sub.ref(0, 536121);

procedure isowbuf_startwrite($p0: ref) returns ($r: i32);



const isowbuf_donewrite: ref;

axiom isowbuf_donewrite == $sub.ref(0, 537153);

procedure isowbuf_donewrite($p0: ref) returns ($r: i32);



const atomic_inc: ref;

axiom atomic_inc == $sub.ref(0, 538185);

procedure atomic_inc($p0: ref);



const atomic_dec_and_test: ref;

axiom atomic_dec_and_test == $sub.ref(0, 539217);

procedure atomic_dec_and_test($p0: ref) returns ($r: i32);



const hdlc_bitstuff_byte: ref;

axiom hdlc_bitstuff_byte == $sub.ref(0, 540249);

procedure hdlc_bitstuff_byte($p0: ref, $i1: i8, $i2: i32) returns ($r: i32);



const isowbuf_putflag: ref;

axiom isowbuf_putflag == $sub.ref(0, 541281);

procedure isowbuf_putflag($p0: ref);



const isowbuf_putbits: ref;

axiom isowbuf_putbits == $sub.ref(0, 542313);

procedure isowbuf_putbits($p0: ref, $i1: i32, $i2: i32);



const gigaset_isowbuf_getbytes: ref;

axiom gigaset_isowbuf_getbytes == $sub.ref(0, 543345);

procedure gigaset_isowbuf_getbytes($p0: ref, $i1: i32) returns ($r: i32);



const ldv_usb_submit_urb_54: ref;

axiom ldv_usb_submit_urb_54 == $sub.ref(0, 544377);

procedure ldv_usb_submit_urb_54($p0: ref, $i1: i32) returns ($r: i32);



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 545409);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const starturbs: ref;

axiom starturbs == $sub.ref(0, 546441);

procedure starturbs($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, assertsPassed;



implementation starturbs($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $i13: i64;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $i33: i32;
  var $i34: i32;
  var $i35: i32;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i64;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p49: ref;
  var $p52: ref;
  var $p55: ref;
  var $p58: ref;
  var $p61: ref;
  var $i62: i32;
  var $i63: i1;
  var $i64: i32;
  var $i65: i32;
  var $i66: i1;
  var $i12: i32;
  var $p67: ref;
  var $p68: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i64;
  var $i74: i1;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $i86: i32;
  var $i87: i32;
  var $i88: i32;
  var $i89: i32;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p103: ref;
  var $p106: ref;
  var $p109: ref;
  var $p112: ref;
  var $p115: ref;
  var $p118: ref;
  var $i121: i64;
  var $p124: ref;
  var $p125: ref;
  var $i126: i32;
  var $i127: i1;
  var $i128: i32;
  var $i129: i32;
  var $i130: i1;
  var $i119: i32;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $i19: i32;
  var $i137: i32;
  var $p140: ref;
  var $p143: ref;
  var $p146: ref;
  var $p149: ref;
  var $p152: ref;
  var $p155: ref;
  var $p158: ref;
  var $p161: ref;
  var $p164: ref;
  var $p167: ref;
  var $p170: ref;
  var $p173: ref;
  var $p176: ref;
  var $p179: ref;
  var $p182: ref;
  var $p185: ref;
  var $p188: ref;
  var $p191: ref;
  var $p194: ref;
  var $p197: ref;
  var $p200: ref;
  var $p203: ref;
  var $p206: ref;
  var $p209: ref;
  var $p212: ref;
  var $p215: ref;
  var $p218: ref;
  var $p221: ref;
  var $p224: ref;
  var $p225: ref;
  var $i226: i64;
  var $i227: i1;
  var $p228: ref;
  var $p229: ref;
  var $p230: ref;
  var $p231: ref;
  var $p232: ref;
  var $p233: ref;
  var $p234: ref;
  var $p235: ref;
  var $p236: ref;
  var $p237: ref;
  var $p238: ref;
  var $i239: i32;
  var $i240: i32;
  var $i241: i32;
  var $i242: i32;
  var $p243: ref;
  var $p244: ref;
  var $p245: ref;
  var $p246: ref;
  var $p247: ref;
  var $p249: ref;
  var $p250: ref;
  var $p251: ref;
  var $p252: ref;
  var $p253: ref;
  var $p254: ref;
  var $p255: ref;
  var $p256: ref;
  var $p257: ref;
  var $p260: ref;
  var $p263: ref;
  var $p266: ref;
  var $p269: ref;
  var $p272: ref;
  var $p275: ref;
  var $p278: ref;
  var $p281: ref;
  var $p284: ref;
  var $p287: ref;
  var $p290: ref;
  var $p293: ref;
  var $p296: ref;
  var $p299: ref;
  var $p302: ref;
  var $p305: ref;
  var $p308: ref;
  var $p311: ref;
  var $p314: ref;
  var $p317: ref;
  var $p320: ref;
  var $p323: ref;
  var $p326: ref;
  var $p329: ref;
  var $p332: ref;
  var $p335: ref;
  var $p338: ref;
  var $p341: ref;
  var $p344: ref;
  var $p347: ref;
  var $p350: ref;
  var $p353: ref;
  var $p356: ref;
  var $p359: ref;
  var $p120: ref;
  var $i360: i64;
  var $i361: i1;
  var $p362: ref;
  var $p363: ref;
  var $p364: ref;
  var $p365: ref;
  var $p366: ref;
  var $p367: ref;
  var $p368: ref;
  var $p369: ref;
  var $p370: ref;
  var $p371: ref;
  var $p372: ref;
  var $i373: i32;
  var $i374: i32;
  var $i375: i32;
  var $i376: i32;
  var $p377: ref;
  var $p378: ref;
  var $p379: ref;
  var $p380: ref;
  var $p381: ref;
  var $p383: ref;
  var $p384: ref;
  var $p385: ref;
  var $p386: ref;
  var $p387: ref;
  var $p388: ref;
  var $p389: ref;
  var $p390: ref;
  var $p391: ref;
  var $p394: ref;
  var $p397: ref;
  var $p400: ref;
  var $p403: ref;
  var $p406: ref;
  var $p409: ref;
  var $p412: ref;
  var $p415: ref;
  var $p418: ref;
  var $p421: ref;
  var $p424: ref;
  var $p427: ref;
  var $p430: ref;
  var $p433: ref;
  var $p436: ref;
  var $p439: ref;
  var $p442: ref;
  var $p445: ref;
  var $p448: ref;
  var $p451: ref;
  var $p454: ref;
  var $p457: ref;
  var $p460: ref;
  var $p463: ref;
  var $p466: ref;
  var $p469: ref;
  var $p472: ref;
  var $p475: ref;
  var $p478: ref;
  var $p481: ref;
  var $p484: ref;
  var $p487: ref;
  var $p490: ref;
  var $p493: ref;
  var $p496: ref;
  var $p499: ref;
  var $p502: ref;
  var $p505: ref;
  var $p508: ref;
  var $p511: ref;
  var $p514: ref;
  var $p517: ref;
  var $p520: ref;
  var $p523: ref;
  var $p526: ref;
  var $p529: ref;
  var $p532: ref;
  var $p535: ref;
  var $p538: ref;
  var $p541: ref;
  var $p544: ref;
  var $p547: ref;
  var $p550: ref;
  var $p553: ref;
  var $p556: ref;
  var $p559: ref;
  var $p562: ref;
  var $p565: ref;
  var $p568: ref;
  var $p571: ref;
  var $p574: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 480)), $mul.ref(384, 1));
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 480)), $mul.ref(304, 1));
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 1);
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 824)), $mul.ref(0, 1));
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, 1);
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb4;

  $bb4:
    call $i13, $p15, $p16, $i17, $i18, $p20, $p21, $p22, $p23, $p24, $p25, $p26, $p27, $p28, $p29, $p30, $i31, $i32, $i33, $i34, $i35, $p36, $p37, $p38, $p39, $i40, $i41, $p42, $p43, $p44, $p45, $p46, $p47, $p49, $p52, $p55, $p58, $p61, $i62, $i63, $i64, $i65, $i66, $i12, $p493, $p496, $p499, $p502, $p505, $p508, $p511, $p514, $p517, $p520, $p523, $p526, $p529, $p532, $p535, $p538, $p541, $p544, $p547, $p550, $p553, $p556, $p559, $p562, $p565, $p568, $p571, $p574 := starturbs_loop_$bb4($p0, $p3, $i13, $p15, $p16, $i17, $i18, $p20, $p21, $p22, $p23, $p24, $p25, $p26, $p27, $p28, $p29, $p30, $i31, $i32, $i33, $i34, $i35, $p36, $p37, $p38, $p39, $i40, $i41, $p42, $p43, $p44, $p45, $p46, $p47, $p49, $p52, $p55, $p58, $p61, $i62, $i63, $i64, $i65, $i66, $i12, $p493, $p496, $p499, $p502, $p505, $p508, $p511, $p514, $p517, $p520, $p523, $p526, $p529, $p532, $p535, $p538, $p541, $p544, $p547, $p550, $p553, $p556, $p559, $p562, $p565, $p568, $p571, $p574);
    goto $bb4_last;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 824)), $mul.ref(304, 1)), $mul.ref($i13, 8));
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i17, 0);
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 480)), $mul.ref(288, 1));
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 5232)), $mul.ref(5224, 1));
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 888)), $mul.ref(0, 1));
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p16, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p27, $p26);
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p16, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 480)), $mul.ref(280, 1));
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    $i32 := $mul.i32($i31, 2);
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    $i33 := $add.i32($i32, 3);
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 789} $i34 := __create_pipe($p29, $i33);
    call {:si_unique_call 790} {:cexpr "tmp"} boogie_si_record_i32($i34);
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    $i35 := $or.i32($i34, 128);
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p16, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, $i35);
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p16, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p37, 2);
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p3, $mul.ref(0, 824)), $mul.ref(328, 1));
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    $i40 := $mul.i32($i12, 128);
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    $i41 := $sext.i32.i64($i40);
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($p39, $mul.ref($i41, 1));
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p16, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p43, $p42);
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p16, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p44, 128);
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p16, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p45, 8);
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p16, $mul.ref(0, 192)), $mul.ref(168, 1));
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p46, 1);
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p16, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p47, read_iso_callback);
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p16, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p49, $p0);
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($add.ref($p16, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p52, 0);
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($add.ref($p16, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p55, 16);
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($add.ref($p16, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p58, 0);
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($add.ref($p16, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p61, 0);
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p493 := $add.ref($add.ref($add.ref($add.ref($p16, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(1, 16)), $mul.ref(0, 1));
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p493, 16);
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    $p496 := $add.ref($add.ref($add.ref($add.ref($p16, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(1, 16)), $mul.ref(4, 1));
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p496, 16);
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    $p499 := $add.ref($add.ref($add.ref($add.ref($p16, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(1, 16)), $mul.ref(12, 1));
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p499, 0);
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    $p502 := $add.ref($add.ref($add.ref($add.ref($p16, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(1, 16)), $mul.ref(8, 1));
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p502, 0);
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $p505 := $add.ref($add.ref($add.ref($add.ref($p16, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(2, 16)), $mul.ref(0, 1));
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p505, 32);
    goto corral_source_split_4015;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    $p508 := $add.ref($add.ref($add.ref($add.ref($p16, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(2, 16)), $mul.ref(4, 1));
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p508, 16);
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    $p511 := $add.ref($add.ref($add.ref($add.ref($p16, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(2, 16)), $mul.ref(12, 1));
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p511, 0);
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    $p514 := $add.ref($add.ref($add.ref($add.ref($p16, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(2, 16)), $mul.ref(8, 1));
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p514, 0);
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $p517 := $add.ref($add.ref($add.ref($add.ref($p16, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(3, 16)), $mul.ref(0, 1));
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p517, 48);
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    $p520 := $add.ref($add.ref($add.ref($add.ref($p16, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(3, 16)), $mul.ref(4, 1));
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p520, 16);
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    $p523 := $add.ref($add.ref($add.ref($add.ref($p16, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(3, 16)), $mul.ref(12, 1));
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p523, 0);
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    $p526 := $add.ref($add.ref($add.ref($add.ref($p16, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(3, 16)), $mul.ref(8, 1));
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p526, 0);
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $p529 := $add.ref($add.ref($add.ref($add.ref($p16, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(4, 16)), $mul.ref(0, 1));
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p529, 64);
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    $p532 := $add.ref($add.ref($add.ref($add.ref($p16, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(4, 16)), $mul.ref(4, 1));
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p532, 16);
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    $p535 := $add.ref($add.ref($add.ref($add.ref($p16, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(4, 16)), $mul.ref(12, 1));
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p535, 0);
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    $p538 := $add.ref($add.ref($add.ref($add.ref($p16, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(4, 16)), $mul.ref(8, 1));
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p538, 0);
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $p541 := $add.ref($add.ref($add.ref($add.ref($p16, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(5, 16)), $mul.ref(0, 1));
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p541, 80);
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    $p544 := $add.ref($add.ref($add.ref($add.ref($p16, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(5, 16)), $mul.ref(4, 1));
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p544, 16);
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    $p547 := $add.ref($add.ref($add.ref($add.ref($p16, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(5, 16)), $mul.ref(12, 1));
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p547, 0);
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    $p550 := $add.ref($add.ref($add.ref($add.ref($p16, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(5, 16)), $mul.ref(8, 1));
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p550, 0);
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $p553 := $add.ref($add.ref($add.ref($add.ref($p16, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(6, 16)), $mul.ref(0, 1));
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p553, 96);
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    $p556 := $add.ref($add.ref($add.ref($add.ref($p16, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(6, 16)), $mul.ref(4, 1));
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p556, 16);
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    $p559 := $add.ref($add.ref($add.ref($add.ref($p16, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(6, 16)), $mul.ref(12, 1));
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p559, 0);
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    $p562 := $add.ref($add.ref($add.ref($add.ref($p16, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(6, 16)), $mul.ref(8, 1));
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p562, 0);
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $p565 := $add.ref($add.ref($add.ref($add.ref($p16, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(7, 16)), $mul.ref(0, 1));
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p565, 112);
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    $p568 := $add.ref($add.ref($add.ref($add.ref($p16, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(7, 16)), $mul.ref(4, 1));
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p568, 16);
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    $p571 := $add.ref($add.ref($add.ref($add.ref($p16, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(7, 16)), $mul.ref(12, 1));
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p571, 0);
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    $p574 := $add.ref($add.ref($add.ref($add.ref($p16, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(7, 16)), $mul.ref(8, 1));
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p574, 0);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} dump_urb(262144, .str.156, $p16);
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 792} $i62 := ldv_usb_submit_urb_52($p16, 32);
    goto SeqInstr_160, SeqInstr_161;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  SeqInstr_162:
    call {:si_unique_call 793} {:cexpr "rc"} boogie_si_record_i32($i62);
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    $i63 := $ne.i32($i62, 0);
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    $i64 := $i62;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i65 := $add.i32($i12, 1);
    call {:si_unique_call 794} {:cexpr "k"} boogie_si_record_i32($i65);
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    $i66 := $sle.i32($i65, 2);
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p3, $mul.ref(0, 824)), $mul.ref(176, 1));
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 795} gigaset_isowbuf_init($p68, 126);
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 824)), $mul.ref(80, 1)), $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    $i73 := $p2i.ref.i64($p72);
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    $i74 := $eq.i64($i73, 0);
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    assume {:branchcond $i74} true;
    goto $bb22, $bb24;

  $bb24:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p0, $mul.ref(0, 480)), $mul.ref(288, 1));
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.0, $p75);
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p76, $mul.ref(0, 5232)), $mul.ref(5224, 1));
    goto corral_source_split_3639;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p77);
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.0, $p78);
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p79, $mul.ref(0, 888)), $mul.ref(0, 1));
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.0, $p80);
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p72, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p82, $p81);
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p72, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.0, $p83);
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p0, $mul.ref(0, 480)), $mul.ref(280, 1));
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    $i86 := $load.i32($M.0, $p85);
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    $i87 := $add.i32($i86, 2);
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    $i88 := $mul.i32($i87, 2);
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 796} $i89 := __create_pipe($p84, $i88);
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p72, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p90, $i89);
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p72, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p91, 2);
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p3, $mul.ref(0, 824)), $mul.ref(176, 1));
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.0, $p92);
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p93, $mul.ref(0, 4136)), $mul.ref(20, 1));
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p72, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p96, $p94);
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p72, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p97, 4112);
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p72, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p98, 8);
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p72, $mul.ref(0, 192)), $mul.ref(168, 1));
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p99, 1);
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p72, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p100, write_iso_callback);
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p3, $mul.ref(0, 824)), $mul.ref(80, 1));
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p72, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p103, $p101);
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($add.ref($add.ref($p72, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p106, 4096);
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($add.ref($add.ref($p72, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p109, 8);
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($add.ref($add.ref($p72, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p112, 0);
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($add.ref($add.ref($p72, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p115, 0);
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($add.ref($add.ref($p72, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(1, 16)), $mul.ref(0, 1));
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p140, 4096);
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($add.ref($add.ref($p72, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(1, 16)), $mul.ref(4, 1));
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p143, 8);
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($add.ref($add.ref($p72, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(1, 16)), $mul.ref(12, 1));
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p146, 0);
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($add.ref($add.ref($p72, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(1, 16)), $mul.ref(8, 1));
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p149, 0);
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($add.ref($add.ref($p72, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(2, 16)), $mul.ref(0, 1));
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p152, 4096);
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($add.ref($add.ref($p72, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(2, 16)), $mul.ref(4, 1));
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p155, 8);
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($add.ref($add.ref($p72, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(2, 16)), $mul.ref(12, 1));
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p158, 0);
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($add.ref($add.ref($p72, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(2, 16)), $mul.ref(8, 1));
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p161, 0);
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($add.ref($add.ref($p72, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(3, 16)), $mul.ref(0, 1));
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p164, 4096);
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($add.ref($add.ref($p72, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(3, 16)), $mul.ref(4, 1));
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p167, 8);
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($add.ref($add.ref($p72, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(3, 16)), $mul.ref(12, 1));
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p170, 0);
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($add.ref($add.ref($p72, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(3, 16)), $mul.ref(8, 1));
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p173, 0);
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($add.ref($add.ref($p72, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(4, 16)), $mul.ref(0, 1));
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p176, 4096);
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($add.ref($add.ref($p72, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(4, 16)), $mul.ref(4, 1));
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p179, 8);
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($add.ref($add.ref($p72, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(4, 16)), $mul.ref(12, 1));
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p182, 0);
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($add.ref($add.ref($p72, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(4, 16)), $mul.ref(8, 1));
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p185, 0);
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($add.ref($add.ref($p72, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(5, 16)), $mul.ref(0, 1));
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p188, 4096);
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($add.ref($add.ref($p72, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(5, 16)), $mul.ref(4, 1));
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p191, 8);
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($add.ref($add.ref($p72, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(5, 16)), $mul.ref(12, 1));
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p194, 0);
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($add.ref($add.ref($p72, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(5, 16)), $mul.ref(8, 1));
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p197, 0);
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($add.ref($add.ref($p72, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(6, 16)), $mul.ref(0, 1));
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p200, 4096);
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($add.ref($add.ref($p72, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(6, 16)), $mul.ref(4, 1));
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p203, 8);
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($add.ref($add.ref($p72, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(6, 16)), $mul.ref(12, 1));
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p206, 0);
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($add.ref($add.ref($p72, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(6, 16)), $mul.ref(8, 1));
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p209, 0);
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($add.ref($add.ref($p72, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(7, 16)), $mul.ref(0, 1));
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p212, 4096);
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($add.ref($add.ref($p72, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(7, 16)), $mul.ref(4, 1));
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p215, 8);
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($add.ref($add.ref($p72, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(7, 16)), $mul.ref(12, 1));
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p218, 0);
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($add.ref($add.ref($p72, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(7, 16)), $mul.ref(8, 1));
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p221, 0);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 824)), $mul.ref(80, 1)), $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p118, $sub.i32(0, 1));
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 824)), $mul.ref(80, 1)), $mul.ref(1, 24)), $mul.ref(0, 1));
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    $p225 := $load.ref($M.0, $p224);
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    $i226 := $p2i.ref.i64($p225);
    goto corral_source_split_3699;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    $i227 := $eq.i64($i226, 0);
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    assume {:branchcond $i227} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i227 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($p0, $mul.ref(0, 480)), $mul.ref(288, 1));
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    $p229 := $load.ref($M.0, $p228);
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($add.ref($p229, $mul.ref(0, 5232)), $mul.ref(5224, 1));
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    $p231 := $bitcast.ref.ref($p230);
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    $p232 := $load.ref($M.0, $p231);
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($add.ref($p232, $mul.ref(0, 888)), $mul.ref(0, 1));
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    $p234 := $load.ref($M.0, $p233);
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($add.ref($p225, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p235, $p234);
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    $p236 := $add.ref($add.ref($p225, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    $p237 := $load.ref($M.0, $p236);
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    $p238 := $add.ref($add.ref($p0, $mul.ref(0, 480)), $mul.ref(280, 1));
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    $i239 := $load.i32($M.0, $p238);
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    $i240 := $add.i32($i239, 2);
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    $i241 := $mul.i32($i240, 2);
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} $i242 := __create_pipe($p237, $i241);
    goto corral_source_split_3797;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($add.ref($p225, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p243, $i242);
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($p225, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p244, 2);
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($add.ref($p3, $mul.ref(0, 824)), $mul.ref(176, 1));
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    $p246 := $load.ref($M.0, $p245);
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($add.ref($p246, $mul.ref(0, 4136)), $mul.ref(20, 1));
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($add.ref($p225, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p249, $p247);
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($add.ref($p225, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p250, 4112);
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    $p251 := $add.ref($add.ref($p225, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p251, 8);
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    $p252 := $add.ref($add.ref($p225, $mul.ref(0, 192)), $mul.ref(168, 1));
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p252, 1);
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    $p253 := $add.ref($add.ref($p225, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p253, write_iso_callback);
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    $p254 := $add.ref($add.ref($p3, $mul.ref(0, 824)), $mul.ref(80, 1));
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    $p255 := $bitcast.ref.ref($p254);
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    $p256 := $add.ref($p255, $mul.ref(1, 1));
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    $p257 := $add.ref($add.ref($p225, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_3819;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p257, $p256);
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p260 := $add.ref($add.ref($add.ref($add.ref($p225, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p260, 4096);
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    $p263 := $add.ref($add.ref($add.ref($add.ref($p225, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p263, 8);
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    $p266 := $add.ref($add.ref($add.ref($add.ref($p225, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p266, 0);
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    $p269 := $add.ref($add.ref($add.ref($add.ref($p225, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p269, 0);
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p272 := $add.ref($add.ref($add.ref($add.ref($p225, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(1, 16)), $mul.ref(0, 1));
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p272, 4096);
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    $p275 := $add.ref($add.ref($add.ref($add.ref($p225, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(1, 16)), $mul.ref(4, 1));
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p275, 8);
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    $p278 := $add.ref($add.ref($add.ref($add.ref($p225, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(1, 16)), $mul.ref(12, 1));
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p278, 0);
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    $p281 := $add.ref($add.ref($add.ref($add.ref($p225, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(1, 16)), $mul.ref(8, 1));
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p281, 0);
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p284 := $add.ref($add.ref($add.ref($add.ref($p225, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(2, 16)), $mul.ref(0, 1));
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p284, 4096);
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    $p287 := $add.ref($add.ref($add.ref($add.ref($p225, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(2, 16)), $mul.ref(4, 1));
    goto corral_source_split_3842;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p287, 8);
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    $p290 := $add.ref($add.ref($add.ref($add.ref($p225, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(2, 16)), $mul.ref(12, 1));
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p290, 0);
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    $p293 := $add.ref($add.ref($add.ref($add.ref($p225, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(2, 16)), $mul.ref(8, 1));
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p293, 0);
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $p296 := $add.ref($add.ref($add.ref($add.ref($p225, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(3, 16)), $mul.ref(0, 1));
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p296, 4096);
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    $p299 := $add.ref($add.ref($add.ref($add.ref($p225, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(3, 16)), $mul.ref(4, 1));
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p299, 8);
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    $p302 := $add.ref($add.ref($add.ref($add.ref($p225, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(3, 16)), $mul.ref(12, 1));
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p302, 0);
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    $p305 := $add.ref($add.ref($add.ref($add.ref($p225, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(3, 16)), $mul.ref(8, 1));
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p305, 0);
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p308 := $add.ref($add.ref($add.ref($add.ref($p225, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(4, 16)), $mul.ref(0, 1));
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p308, 4096);
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    $p311 := $add.ref($add.ref($add.ref($add.ref($p225, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(4, 16)), $mul.ref(4, 1));
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p311, 8);
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    $p314 := $add.ref($add.ref($add.ref($add.ref($p225, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(4, 16)), $mul.ref(12, 1));
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p314, 0);
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    $p317 := $add.ref($add.ref($add.ref($add.ref($p225, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(4, 16)), $mul.ref(8, 1));
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p317, 0);
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $p320 := $add.ref($add.ref($add.ref($add.ref($p225, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(5, 16)), $mul.ref(0, 1));
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p320, 4096);
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    $p323 := $add.ref($add.ref($add.ref($add.ref($p225, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(5, 16)), $mul.ref(4, 1));
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p323, 8);
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    $p326 := $add.ref($add.ref($add.ref($add.ref($p225, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(5, 16)), $mul.ref(12, 1));
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p326, 0);
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    $p329 := $add.ref($add.ref($add.ref($add.ref($p225, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(5, 16)), $mul.ref(8, 1));
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p329, 0);
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $p332 := $add.ref($add.ref($add.ref($add.ref($p225, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(6, 16)), $mul.ref(0, 1));
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p332, 4096);
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    $p335 := $add.ref($add.ref($add.ref($add.ref($p225, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(6, 16)), $mul.ref(4, 1));
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p335, 8);
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    $p338 := $add.ref($add.ref($add.ref($add.ref($p225, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(6, 16)), $mul.ref(12, 1));
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p338, 0);
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    $p341 := $add.ref($add.ref($add.ref($add.ref($p225, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(6, 16)), $mul.ref(8, 1));
    goto corral_source_split_3882;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p341, 0);
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $p344 := $add.ref($add.ref($add.ref($add.ref($p225, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(7, 16)), $mul.ref(0, 1));
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p344, 4096);
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    $p347 := $add.ref($add.ref($add.ref($add.ref($p225, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(7, 16)), $mul.ref(4, 1));
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p347, 8);
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    $p350 := $add.ref($add.ref($add.ref($add.ref($p225, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(7, 16)), $mul.ref(12, 1));
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p350, 0);
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    $p353 := $add.ref($add.ref($add.ref($add.ref($p225, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(7, 16)), $mul.ref(8, 1));
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p353, 0);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $p356 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 824)), $mul.ref(80, 1)), $mul.ref(1, 24)), $mul.ref(16, 1));
    goto corral_source_split_3893;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p356, $sub.i32(0, 1));
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p359 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 824)), $mul.ref(80, 1)), $mul.ref(2, 24)), $mul.ref(0, 1));
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    $p120 := $load.ref($M.0, $p359);
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    $i360 := $p2i.ref.i64($p120);
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    $i361 := $eq.i64($i360, 0);
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    assume {:branchcond $i361} true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i361 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $p362 := $add.ref($add.ref($p0, $mul.ref(0, 480)), $mul.ref(288, 1));
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    $p363 := $load.ref($M.0, $p362);
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    $p364 := $add.ref($add.ref($p363, $mul.ref(0, 5232)), $mul.ref(5224, 1));
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    $p365 := $bitcast.ref.ref($p364);
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $p366 := $load.ref($M.0, $p365);
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    $p367 := $add.ref($add.ref($p366, $mul.ref(0, 888)), $mul.ref(0, 1));
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    $p368 := $load.ref($M.0, $p367);
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    $p369 := $add.ref($add.ref($p120, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p369, $p368);
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    $p370 := $add.ref($add.ref($p120, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    $p371 := $load.ref($M.0, $p370);
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    $p372 := $add.ref($add.ref($p0, $mul.ref(0, 480)), $mul.ref(280, 1));
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    $i373 := $load.i32($M.0, $p372);
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    $i374 := $add.i32($i373, 2);
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    $i375 := $mul.i32($i374, 2);
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 803} $i376 := __create_pipe($p371, $i375);
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    $p377 := $add.ref($add.ref($p120, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p377, $i376);
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    $p378 := $add.ref($add.ref($p120, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p378, 2);
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    $p379 := $add.ref($add.ref($p3, $mul.ref(0, 824)), $mul.ref(176, 1));
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    $p380 := $load.ref($M.0, $p379);
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    $p381 := $add.ref($add.ref($p380, $mul.ref(0, 4136)), $mul.ref(20, 1));
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    $p383 := $add.ref($add.ref($p120, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p383, $p381);
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    $p384 := $add.ref($add.ref($p120, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p384, 4112);
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    $p385 := $add.ref($add.ref($p120, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p385, 8);
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    $p386 := $add.ref($add.ref($p120, $mul.ref(0, 192)), $mul.ref(168, 1));
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p386, 1);
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    $p387 := $add.ref($add.ref($p120, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p387, write_iso_callback);
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    $p388 := $add.ref($add.ref($p3, $mul.ref(0, 824)), $mul.ref(80, 1));
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    $p389 := $bitcast.ref.ref($p388);
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    $p390 := $add.ref($p389, $mul.ref(2, 1));
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    $p391 := $add.ref($add.ref($p120, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p391, $p390);
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $p394 := $add.ref($add.ref($add.ref($add.ref($p120, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p394, 4096);
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    $p397 := $add.ref($add.ref($add.ref($add.ref($p120, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p397, 8);
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    $p400 := $add.ref($add.ref($add.ref($add.ref($p120, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p400, 0);
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    $p403 := $add.ref($add.ref($add.ref($add.ref($p120, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p403, 0);
    goto corral_source_split_3948;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $p406 := $add.ref($add.ref($add.ref($add.ref($p120, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(1, 16)), $mul.ref(0, 1));
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p406, 4096);
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    $p409 := $add.ref($add.ref($add.ref($add.ref($p120, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(1, 16)), $mul.ref(4, 1));
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p409, 8);
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    $p412 := $add.ref($add.ref($add.ref($add.ref($p120, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(1, 16)), $mul.ref(12, 1));
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p412, 0);
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    $p415 := $add.ref($add.ref($add.ref($add.ref($p120, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(1, 16)), $mul.ref(8, 1));
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p415, 0);
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $p418 := $add.ref($add.ref($add.ref($add.ref($p120, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(2, 16)), $mul.ref(0, 1));
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p418, 4096);
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    $p421 := $add.ref($add.ref($add.ref($add.ref($p120, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(2, 16)), $mul.ref(4, 1));
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p421, 8);
    goto corral_source_split_3962;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    $p424 := $add.ref($add.ref($add.ref($add.ref($p120, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(2, 16)), $mul.ref(12, 1));
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p424, 0);
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    $p427 := $add.ref($add.ref($add.ref($add.ref($p120, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(2, 16)), $mul.ref(8, 1));
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p427, 0);
    goto corral_source_split_3966;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $p430 := $add.ref($add.ref($add.ref($add.ref($p120, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(3, 16)), $mul.ref(0, 1));
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p430, 4096);
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    $p433 := $add.ref($add.ref($add.ref($add.ref($p120, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(3, 16)), $mul.ref(4, 1));
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p433, 8);
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    $p436 := $add.ref($add.ref($add.ref($add.ref($p120, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(3, 16)), $mul.ref(12, 1));
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p436, 0);
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    $p439 := $add.ref($add.ref($add.ref($add.ref($p120, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(3, 16)), $mul.ref(8, 1));
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p439, 0);
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $p442 := $add.ref($add.ref($add.ref($add.ref($p120, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(4, 16)), $mul.ref(0, 1));
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p442, 4096);
    goto corral_source_split_3978;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    $p445 := $add.ref($add.ref($add.ref($add.ref($p120, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(4, 16)), $mul.ref(4, 1));
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p445, 8);
    goto corral_source_split_3980;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    $p448 := $add.ref($add.ref($add.ref($add.ref($p120, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(4, 16)), $mul.ref(12, 1));
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p448, 0);
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    $p451 := $add.ref($add.ref($add.ref($add.ref($p120, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(4, 16)), $mul.ref(8, 1));
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p451, 0);
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $p454 := $add.ref($add.ref($add.ref($add.ref($p120, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(5, 16)), $mul.ref(0, 1));
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p454, 4096);
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    $p457 := $add.ref($add.ref($add.ref($add.ref($p120, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(5, 16)), $mul.ref(4, 1));
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p457, 8);
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    $p460 := $add.ref($add.ref($add.ref($add.ref($p120, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(5, 16)), $mul.ref(12, 1));
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p460, 0);
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    $p463 := $add.ref($add.ref($add.ref($add.ref($p120, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(5, 16)), $mul.ref(8, 1));
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p463, 0);
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $p466 := $add.ref($add.ref($add.ref($add.ref($p120, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(6, 16)), $mul.ref(0, 1));
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p466, 4096);
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    $p469 := $add.ref($add.ref($add.ref($add.ref($p120, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(6, 16)), $mul.ref(4, 1));
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p469, 8);
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    $p472 := $add.ref($add.ref($add.ref($add.ref($p120, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(6, 16)), $mul.ref(12, 1));
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p472, 0);
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    $p475 := $add.ref($add.ref($add.ref($add.ref($p120, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(6, 16)), $mul.ref(8, 1));
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p475, 0);
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $p478 := $add.ref($add.ref($add.ref($add.ref($p120, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(7, 16)), $mul.ref(0, 1));
    goto corral_source_split_4004;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p478, 4096);
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    $p481 := $add.ref($add.ref($add.ref($add.ref($p120, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(7, 16)), $mul.ref(4, 1));
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p481, 8);
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    $p484 := $add.ref($add.ref($add.ref($add.ref($p120, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(7, 16)), $mul.ref(12, 1));
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p484, 0);
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    $p487 := $add.ref($add.ref($add.ref($add.ref($p120, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(7, 16)), $mul.ref(8, 1));
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p487, 0);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $p490 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 824)), $mul.ref(80, 1)), $mul.ref(2, 24)), $mul.ref(16, 1));
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p490, $sub.i32(0, 1));
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i119 := 0;
    goto $bb32;

  $bb32:
    call $i121, $p124, $p125, $i126, $i127, $i128, $i129, $i130, $i119 := starturbs_loop_$bb32($p3, $i121, $p124, $p125, $i126, $i127, $i128, $i129, $i130, $i119, $p120);
    goto $bb32_last;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 797} dump_urb(262144, .str.157, $p120);
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    $i121 := $sext.i32.i64($i119);
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 824)), $mul.ref(80, 1)), $mul.ref($i121, 24)), $mul.ref(0, 1));
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    $p125 := $load.ref($M.0, $p124);
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} $i126 := ldv_usb_submit_urb_53($p125, 32);
    goto SeqInstr_163, SeqInstr_164;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  SeqInstr_165:
    call {:si_unique_call 799} {:cexpr "rc"} boogie_si_record_i32($i126);
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    $i127 := $ne.i32($i126, 0);
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    $i128 := $i126;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i129 := $add.i32($i119, 1);
    call {:si_unique_call 800} {:cexpr "k"} boogie_si_record_i32($i129);
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    $i130 := $sle.i32($i129, 1);
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 801} dump_urb(262144, .str.158, $p120);
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p3, $mul.ref(0, 824)), $mul.ref(80, 1));
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    $p132 := $bitcast.ref.ref($p131);
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($p132, $mul.ref(2, 24));
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p3, $mul.ref(0, 824)), $mul.ref(160, 1));
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p134, $p133);
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p3, $mul.ref(0, 824)), $mul.ref(168, 1));
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p135, $0.ref);
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p3, $mul.ref(0, 824)), $mul.ref(152, 1));
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p136, $0.ref);
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    $i137 := 0;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    $r := $i137;
    return;

  $bb37:
    assume $i130 == 1;
    assume {:verifier.code 0} true;
    $i119 := $i129;
    goto $bb37_dummy;

  $bb34:
    assume $i127 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    $i19 := $i128;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 788} stopurbs($p3);
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    $i137 := $i19;
    goto $bb40;

  SeqInstr_163:
    assume !assertsPassed;
    return;

  $bb61:
    assume {:verifier.code 0} true;
    assume $i361 == 1;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 14);
    goto $bb8;

  $bb47:
    assume {:verifier.code 0} true;
    assume $i227 == 1;
    goto $bb23;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i74 == 1;
    goto $bb23;

  $bb17:
    assume $i66 == 1;
    assume {:verifier.code 0} true;
    $i12 := $i65;
    goto $bb17_dummy;

  $bb14:
    assume $i63 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    $i19 := $i64;
    goto $bb8;

  SeqInstr_160:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i18 == 1;
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 14);
    goto $bb8;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 480)), $mul.ref(276, 1));
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    $i9 := $or.i32($i8, 64);
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 480)), $mul.ref(276, 1));
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i9);
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb37_dummy:
    assume false;
    return;

  $bb32_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3702;

  $bb17_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3548;
}



const read_iso_callback: ref;

axiom read_iso_callback == $sub.ref(0, 547473);

procedure read_iso_callback($p0: ref);



const ldv_usb_submit_urb_52: ref;

axiom ldv_usb_submit_urb_52 == $sub.ref(0, 548505);

procedure ldv_usb_submit_urb_52($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_submit_urb_52($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 804} {:cexpr "ldv_usb_submit_urb_52:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_4067;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 805} ldv_check_alloc_flags($i1);
    goto SeqInstr_166, SeqInstr_167;

  SeqInstr_167:
    assume assertsPassed;
    goto SeqInstr_168;

  SeqInstr_168:
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 806} $p2 := ldv_undef_ptr();
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_166:
    assume !assertsPassed;
    return;
}



const gigaset_isowbuf_init: ref;

axiom gigaset_isowbuf_init == $sub.ref(0, 549537);

procedure gigaset_isowbuf_init($p0: ref, $i1: i8);
  free requires assertsPassed;
  modifies $M.0;



implementation gigaset_isowbuf_init($p0: ref, $i1: i8)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i8;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 807} {:cexpr "gigaset_isowbuf_init:arg:idle"} boogie_si_record_i8($i1);
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4136)), $mul.ref(0, 1));
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 0);
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 4136)), $mul.ref(4, 1));
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, 0);
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 4136)), $mul.ref(8, 1));
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, 0);
    goto corral_source_split_4079;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 4136)), $mul.ref(12, 1));
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 808} atomic_set($p5, 1);
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 4136)), $mul.ref(16, 1));
    goto corral_source_split_4082;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, 0);
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 4136)), $mul.ref(4132, 1));
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p7, $i1);
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 4136)), $mul.ref(20, 1));
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p9, $mul.ref(4096, 1));
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i1);
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i8($i11);
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.0;
    call {:si_unique_call 809} cmdloc_dummy_var_4 := $memset.i8(cmdloc_dummy_var_3, $p10, $i12, 16, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_4;
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    return;
}



const write_iso_callback: ref;

axiom write_iso_callback == $sub.ref(0, 550569);

procedure write_iso_callback($p0: ref);



const ldv_usb_submit_urb_53: ref;

axiom ldv_usb_submit_urb_53 == $sub.ref(0, 551601);

procedure ldv_usb_submit_urb_53($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_submit_urb_53($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} {:cexpr "ldv_usb_submit_urb_53:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_4093;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 811} ldv_check_alloc_flags($i1);
    goto SeqInstr_169, SeqInstr_170;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  SeqInstr_171:
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 812} $p2 := ldv_undef_ptr();
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_4097;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_169:
    assume !assertsPassed;
    return;
}



const tasklet_hi_schedule: ref;

axiom tasklet_hi_schedule == $sub.ref(0, 552633);

procedure tasklet_hi_schedule($p0: ref);



const __tasklet_hi_schedule: ref;

axiom __tasklet_hi_schedule == $sub.ref(0, 553665);

procedure __tasklet_hi_schedule($p0: ref);



const ldv_usb_submit_urb_51: ref;

axiom ldv_usb_submit_urb_51 == $sub.ref(0, 554697);

procedure ldv_usb_submit_urb_51($p0: ref, $i1: i32) returns ($r: i32);



const memcmp: ref;

axiom memcmp == $sub.ref(0, 555729);

procedure memcmp($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);



const ldv_init_zalloc: ref;

axiom ldv_init_zalloc == $sub.ref(0, 556761);

procedure ldv_init_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_init_zalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 813} {:cexpr "ldv_init_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 814} $p1 := calloc(1, $i0);
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 1} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 1} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 1} true;
    call {:si_unique_call 815} __VERIFIER_assume($i4);
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const ldv_memset: ref;

axiom ldv_memset == $sub.ref(0, 557793);

procedure ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.35;



implementation ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref)
{
  var $i3: i8;
  var cmdloc_dummy_var_5: [ref]i8;
  var cmdloc_dummy_var_6: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 816} {:cexpr "ldv_memset:arg:c"} boogie_si_record_i32($i1);
    call {:si_unique_call 817} {:cexpr "ldv_memset:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i8($i1);
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_5 := $M.35;
    call {:si_unique_call 818} cmdloc_dummy_var_6 := $memset.i8(cmdloc_dummy_var_5, $p0, $i3, $i2, $zext.i32.i64(1), 0 == 1);
    $M.35 := cmdloc_dummy_var_6;
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const choose_timer_2: ref;

axiom choose_timer_2 == $sub.ref(0, 558825);

procedure choose_timer_2();
  free requires assertsPassed;
  modifies $M.36, $M.38, $M.40, $M.42, $M.7, $M.0, $M.16, $M.18, $M.20, $M.22, $CurrAddr, $M.17, $M.19, $M.21, $M.23, assertsPassed;



implementation choose_timer_2()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $p21: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 1} true;
    call {:si_unique_call 819} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 820} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 821} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 830} ldv_stop();
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    $i18 := $M.42;
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb23:
    assume $i19 == 1;
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    $M.42 := 2;
    call {:si_unique_call 828} {:cexpr "ldv_timer_2_3"} boogie_si_record_i32(2);
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    $i20 := $M.42;
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    $p21 := $M.43;
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} ldv_timer_2($i20, $p21);
    goto SeqInstr_181, SeqInstr_182;

  SeqInstr_182:
    assume assertsPassed;
    goto SeqInstr_183;

  SeqInstr_183:
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    goto $bb25;

  SeqInstr_181:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_4112;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    $i14 := $M.40;
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 1);
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb20:
    assume $i15 == 1;
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    $M.40 := 2;
    call {:si_unique_call 826} {:cexpr "ldv_timer_2_2"} boogie_si_record_i32(2);
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    $i16 := $M.40;
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    $p17 := $M.41;
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} ldv_timer_2($i16, $p17);
    goto SeqInstr_178, SeqInstr_179;

  SeqInstr_179:
    assume assertsPassed;
    goto SeqInstr_180;

  SeqInstr_180:
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    goto $bb22;

  SeqInstr_178:
    assume !assertsPassed;
    return;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    $i10 := $M.38;
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 1);
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb17:
    assume $i11 == 1;
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    $M.38 := 2;
    call {:si_unique_call 824} {:cexpr "ldv_timer_2_1"} boogie_si_record_i32(2);
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    $i12 := $M.38;
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    $p13 := $M.39;
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 825} ldv_timer_2($i12, $p13);
    goto SeqInstr_175, SeqInstr_176;

  SeqInstr_176:
    assume assertsPassed;
    goto SeqInstr_177;

  SeqInstr_177:
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    goto $bb19;

  SeqInstr_175:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    $i6 := $M.36;
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 1);
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i7 == 1;
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    $M.36 := 2;
    call {:si_unique_call 822} {:cexpr "ldv_timer_2_0"} boogie_si_record_i32(2);
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    $i8 := $M.36;
    goto corral_source_split_4130;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    $p9 := $M.37;
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 823} ldv_timer_2($i8, $p9);
    goto SeqInstr_172, SeqInstr_173;

  SeqInstr_173:
    assume assertsPassed;
    goto SeqInstr_174;

  SeqInstr_174:
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_172:
    assume !assertsPassed;
    return;
}



const ldv_timer_2: ref;

axiom ldv_timer_2 == $sub.ref(0, 559857);

procedure ldv_timer_2($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.7, $M.0, $M.16, $M.18, $M.20, $M.22, $CurrAddr, $M.17, $M.19, $M.21, $M.23, assertsPassed;



implementation ldv_timer_2($i0: i32, $p1: ref)
{
  var $p2: ref;
  var $i3: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 831} {:cexpr "ldv_timer_2:arg:state"} boogie_si_record_i32($i0);
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 832} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(2);
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.45, $p2);
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} req_timeout($i3);
    goto SeqInstr_184, SeqInstr_185;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  SeqInstr_186:
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 834} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_184:
    assume !assertsPassed;
    return;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 560889);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const ldv_initialize_gigaset_ops_6: ref;

axiom ldv_initialize_gigaset_ops_6 == $sub.ref(0, 561921);

procedure ldv_initialize_gigaset_ops_6();
  free requires assertsPassed;
  modifies $M.46, $M.47, $M.0, $CurrAddr;



implementation ldv_initialize_gigaset_ops_6()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} $p0 := ldv_init_zalloc(5232);
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    $M.46 := $p0;
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 836} $p2 := ldv_init_zalloc(480);
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    $M.47 := $p2;
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    return;
}



const ldv_timer_5: ref;

axiom ldv_timer_5 == $sub.ref(0, 562953);

procedure ldv_timer_5($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, assertsPassed;



implementation ldv_timer_5($i0: i32, $p1: ref)
{
  var $p2: ref;
  var $i3: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 837} {:cexpr "ldv_timer_5:arg:state"} boogie_si_record_i32($i0);
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 838} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(2);
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.48, $p2);
    goto corral_source_split_4174;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 839} int_in_resubmit($i3);
    goto SeqInstr_187, SeqInstr_188;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  SeqInstr_189:
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 840} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_187:
    assume !assertsPassed;
    return;
}



const choose_timer_5: ref;

axiom choose_timer_5 == $sub.ref(0, 563985);

procedure choose_timer_5();
  free requires assertsPassed;
  modifies $M.49, $M.0, $M.51, $M.53, $M.55, $CurrAddr, assertsPassed;



implementation choose_timer_5()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $p21: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 1} true;
    call {:si_unique_call 841} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 842} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 843} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 852} ldv_stop();
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    $i18 := $M.55;
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb23:
    assume $i19 == 1;
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    $M.55 := 2;
    call {:si_unique_call 850} {:cexpr "ldv_timer_5_3"} boogie_si_record_i32(2);
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    $i20 := $M.55;
    goto corral_source_split_4216;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    $p21 := $M.56;
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 851} ldv_timer_5($i20, $p21);
    goto SeqInstr_199, SeqInstr_200;

  SeqInstr_200:
    assume assertsPassed;
    goto SeqInstr_201;

  SeqInstr_201:
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    goto $bb25;

  SeqInstr_199:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    $i14 := $M.53;
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 1);
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb20:
    assume $i15 == 1;
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    $M.53 := 2;
    call {:si_unique_call 848} {:cexpr "ldv_timer_5_2"} boogie_si_record_i32(2);
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    $i16 := $M.53;
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    $p17 := $M.54;
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} ldv_timer_5($i16, $p17);
    goto SeqInstr_196, SeqInstr_197;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  SeqInstr_198:
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    goto $bb22;

  SeqInstr_196:
    assume !assertsPassed;
    return;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_4188;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    $i10 := $M.51;
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 1);
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb17:
    assume $i11 == 1;
    goto corral_source_split_4202;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    $M.51 := 2;
    call {:si_unique_call 846} {:cexpr "ldv_timer_5_1"} boogie_si_record_i32(2);
    goto corral_source_split_4203;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    $i12 := $M.51;
    goto corral_source_split_4204;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    $p13 := $M.52;
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 847} ldv_timer_5($i12, $p13);
    goto SeqInstr_193, SeqInstr_194;

  SeqInstr_194:
    assume assertsPassed;
    goto SeqInstr_195;

  SeqInstr_195:
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    goto $bb19;

  SeqInstr_193:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    $i6 := $M.49;
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 1);
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i7 == 1;
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    $M.49 := 2;
    call {:si_unique_call 844} {:cexpr "ldv_timer_5_0"} boogie_si_record_i32(2);
    goto corral_source_split_4197;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    $i8 := $M.49;
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    $p9 := $M.50;
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 845} ldv_timer_5($i8, $p9);
    goto SeqInstr_190, SeqInstr_191;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  SeqInstr_192:
    goto corral_source_split_4200;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_190:
    assume !assertsPassed;
    return;
}



const choose_timer_3: ref;

axiom choose_timer_3 == $sub.ref(0, 565017);

procedure choose_timer_3();
  free requires assertsPassed;
  modifies $M.16, $M.18, $M.20, $M.22, $M.0, $M.7, $CurrAddr, $M.17, $M.19, $M.21, $M.23, assertsPassed;



implementation choose_timer_3()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $p21: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 1} true;
    call {:si_unique_call 853} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 854} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 855} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 864} ldv_stop();
    goto corral_source_split_4264;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    $i18 := $M.22;
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb23:
    assume $i19 == 1;
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    $M.22 := 2;
    call {:si_unique_call 862} {:cexpr "ldv_timer_3_3"} boogie_si_record_i32(2);
    goto corral_source_split_4259;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    $i20 := $M.22;
    goto corral_source_split_4260;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    $p21 := $M.23;
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 863} ldv_timer_3($i20, $p21);
    goto SeqInstr_211, SeqInstr_212;

  SeqInstr_212:
    assume assertsPassed;
    goto SeqInstr_213;

  SeqInstr_213:
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    goto $bb25;

  SeqInstr_211:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_4224;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    $i14 := $M.20;
    goto corral_source_split_4225;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 1);
    goto corral_source_split_4226;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb20:
    assume $i15 == 1;
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    $M.20 := 2;
    call {:si_unique_call 860} {:cexpr "ldv_timer_3_2"} boogie_si_record_i32(2);
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    $i16 := $M.20;
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    $p17 := $M.21;
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 861} ldv_timer_3($i16, $p17);
    goto SeqInstr_208, SeqInstr_209;

  SeqInstr_209:
    assume assertsPassed;
    goto SeqInstr_210;

  SeqInstr_210:
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    goto $bb22;

  SeqInstr_208:
    assume !assertsPassed;
    return;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_4232;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    $i10 := $M.18;
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 1);
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb17:
    assume $i11 == 1;
    goto corral_source_split_4246;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    $M.18 := 2;
    call {:si_unique_call 858} {:cexpr "ldv_timer_3_1"} boogie_si_record_i32(2);
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    $i12 := $M.18;
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    $p13 := $M.19;
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 859} ldv_timer_3($i12, $p13);
    goto SeqInstr_205, SeqInstr_206;

  SeqInstr_206:
    assume assertsPassed;
    goto SeqInstr_207;

  SeqInstr_207:
    goto corral_source_split_4250;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    goto $bb19;

  SeqInstr_205:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    $i6 := $M.16;
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 1);
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i7 == 1;
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    $M.16 := 2;
    call {:si_unique_call 856} {:cexpr "ldv_timer_3_0"} boogie_si_record_i32(2);
    goto corral_source_split_4241;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    $i8 := $M.16;
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    $p9 := $M.17;
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 857} ldv_timer_3($i8, $p9);
    goto SeqInstr_202, SeqInstr_203;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  SeqInstr_204:
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_202:
    assume !assertsPassed;
    return;
}



const ldv_timer_3: ref;

axiom ldv_timer_3 == $sub.ref(0, 566049);

procedure ldv_timer_3($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.7, $CurrAddr, $M.17, $M.16, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22, assertsPassed;



implementation ldv_timer_3($i0: i32, $p1: ref)
{
  var $p2: ref;
  var $i3: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 865} {:cexpr "ldv_timer_3:arg:state"} boogie_si_record_i32($i0);
    goto corral_source_split_4266;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 866} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(2);
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.0, $p2);
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 867} atrdy_timeout($i3);
    goto SeqInstr_214, SeqInstr_215;

  SeqInstr_215:
    assume assertsPassed;
    goto SeqInstr_216;

  SeqInstr_216:
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_4271;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_214:
    assume !assertsPassed;
    return;
}



const timer_init_4: ref;

axiom timer_init_4 == $sub.ref(0, 567081);

procedure timer_init_4();
  free requires assertsPassed;
  modifies $M.57, $M.58, $M.59, $M.60;



implementation timer_init_4()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    $M.57 := 0;
    call {:si_unique_call 869} {:cexpr "ldv_timer_4_0"} boogie_si_record_i32(0);
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    $M.58 := 0;
    call {:si_unique_call 870} {:cexpr "ldv_timer_4_1"} boogie_si_record_i32(0);
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    $M.59 := 0;
    call {:si_unique_call 871} {:cexpr "ldv_timer_4_2"} boogie_si_record_i32(0);
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    $M.60 := 0;
    call {:si_unique_call 872} {:cexpr "ldv_timer_4_3"} boogie_si_record_i32(0);
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    return;
}



const timer_init_3: ref;

axiom timer_init_3 == $sub.ref(0, 568113);

procedure timer_init_3();
  free requires assertsPassed;
  modifies $M.16, $M.18, $M.20, $M.22;



implementation timer_init_3()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    $M.16 := 0;
    call {:si_unique_call 873} {:cexpr "ldv_timer_3_0"} boogie_si_record_i32(0);
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    $M.18 := 0;
    call {:si_unique_call 874} {:cexpr "ldv_timer_3_1"} boogie_si_record_i32(0);
    goto corral_source_split_4281;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    $M.20 := 0;
    call {:si_unique_call 875} {:cexpr "ldv_timer_3_2"} boogie_si_record_i32(0);
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    $M.22 := 0;
    call {:si_unique_call 876} {:cexpr "ldv_timer_3_3"} boogie_si_record_i32(0);
    goto corral_source_split_4283;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    return;
}



const choose_timer_4: ref;

axiom choose_timer_4 == $sub.ref(0, 569145);

procedure choose_timer_4();
  free requires assertsPassed;
  modifies $M.57, $M.58, $M.59, $M.60, $M.0, $M.7, $M.17, $M.16, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22, $CurrAddr, assertsPassed;



implementation choose_timer_4()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $p21: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 1} true;
    call {:si_unique_call 877} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 878} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 879} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 888} ldv_stop();
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    $i18 := $M.60;
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb23:
    assume $i19 == 1;
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    $M.60 := 2;
    call {:si_unique_call 886} {:cexpr "ldv_timer_4_3"} boogie_si_record_i32(2);
    goto corral_source_split_4322;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    $i20 := $M.60;
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    $p21 := $M.64;
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 887} ldv_timer_4($i20, $p21);
    goto SeqInstr_226, SeqInstr_227;

  SeqInstr_227:
    assume assertsPassed;
    goto SeqInstr_228;

  SeqInstr_228:
    goto corral_source_split_4325;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    goto $bb25;

  SeqInstr_226:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_4287;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    $i14 := $M.59;
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 1);
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb20:
    assume $i15 == 1;
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    $M.59 := 2;
    call {:si_unique_call 884} {:cexpr "ldv_timer_4_2"} boogie_si_record_i32(2);
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    $i16 := $M.59;
    goto corral_source_split_4317;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    $p17 := $M.63;
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} ldv_timer_4($i16, $p17);
    goto SeqInstr_223, SeqInstr_224;

  SeqInstr_224:
    assume assertsPassed;
    goto SeqInstr_225;

  SeqInstr_225:
    goto corral_source_split_4319;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    goto $bb22;

  SeqInstr_223:
    assume !assertsPassed;
    return;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    $i10 := $M.58;
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 1);
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb17:
    assume $i11 == 1;
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    $M.58 := 2;
    call {:si_unique_call 882} {:cexpr "ldv_timer_4_1"} boogie_si_record_i32(2);
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    $i12 := $M.58;
    goto corral_source_split_4311;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    $p13 := $M.62;
    goto corral_source_split_4312;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 883} ldv_timer_4($i12, $p13);
    goto SeqInstr_220, SeqInstr_221;

  SeqInstr_221:
    assume assertsPassed;
    goto SeqInstr_222;

  SeqInstr_222:
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    goto $bb19;

  SeqInstr_220:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    $i6 := $M.57;
    goto corral_source_split_4300;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 1);
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i7 == 1;
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    $M.57 := 2;
    call {:si_unique_call 880} {:cexpr "ldv_timer_4_0"} boogie_si_record_i32(2);
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    $i8 := $M.57;
    goto corral_source_split_4305;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    $p9 := $M.61;
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 881} ldv_timer_4($i8, $p9);
    goto SeqInstr_217, SeqInstr_218;

  SeqInstr_218:
    assume assertsPassed;
    goto SeqInstr_219;

  SeqInstr_219:
    goto corral_source_split_4307;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_217:
    assume !assertsPassed;
    return;
}



const ldv_timer_4: ref;

axiom ldv_timer_4 == $sub.ref(0, 570177);

procedure ldv_timer_4($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.7, $M.17, $M.16, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22, $CurrAddr, assertsPassed;



implementation ldv_timer_4($i0: i32, $p1: ref)
{
  var $p2: ref;
  var $i3: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 889} {:cexpr "ldv_timer_4:arg:state"} boogie_si_record_i32($i0);
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(2);
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_4331;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.65, $p2);
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 891} cmd_in_timeout($i3);
    goto SeqInstr_229, SeqInstr_230;

  SeqInstr_230:
    assume assertsPassed;
    goto SeqInstr_231;

  SeqInstr_231:
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 892} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_4334;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_229:
    assume !assertsPassed;
    return;
}



const timer_init_2: ref;

axiom timer_init_2 == $sub.ref(0, 571209);

procedure timer_init_2();
  free requires assertsPassed;
  modifies $M.36, $M.38, $M.40, $M.42;



implementation timer_init_2()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    $M.36 := 0;
    call {:si_unique_call 893} {:cexpr "ldv_timer_2_0"} boogie_si_record_i32(0);
    goto corral_source_split_4337;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    $M.38 := 0;
    call {:si_unique_call 894} {:cexpr "ldv_timer_2_1"} boogie_si_record_i32(0);
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    $M.40 := 0;
    call {:si_unique_call 895} {:cexpr "ldv_timer_2_2"} boogie_si_record_i32(0);
    goto corral_source_split_4339;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    $M.42 := 0;
    call {:si_unique_call 896} {:cexpr "ldv_timer_2_3"} boogie_si_record_i32(0);
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_driver_7: ref;

axiom ldv_usb_driver_7 == $sub.ref(0, 572241);

procedure ldv_usb_driver_7();
  free requires assertsPassed;
  modifies $M.66, $M.0, $CurrAddr;



implementation ldv_usb_driver_7()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 897} $p0 := ldv_init_zalloc(1560);
    goto corral_source_split_4343;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    goto corral_source_split_4344;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    $M.66 := $p0;
    goto corral_source_split_4345;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    return;
}



const timer_init_5: ref;

axiom timer_init_5 == $sub.ref(0, 573273);

procedure timer_init_5();
  free requires assertsPassed;
  modifies $M.49, $M.51, $M.53, $M.55;



implementation timer_init_5()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    $M.49 := 0;
    call {:si_unique_call 898} {:cexpr "ldv_timer_5_0"} boogie_si_record_i32(0);
    goto corral_source_split_4348;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    $M.51 := 0;
    call {:si_unique_call 899} {:cexpr "ldv_timer_5_1"} boogie_si_record_i32(0);
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    $M.53 := 0;
    call {:si_unique_call 900} {:cexpr "ldv_timer_5_2"} boogie_si_record_i32(0);
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    $M.55 := 0;
    call {:si_unique_call 901} {:cexpr "ldv_timer_5_3"} boogie_si_record_i32(0);
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    return;
}



const work_init_1: ref;

axiom work_init_1 == $sub.ref(0, 574305);

procedure work_init_1();
  free requires assertsPassed;
  modifies $M.8, $M.10, $M.12, $M.14;



implementation work_init_1()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4353;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    $M.8 := 0;
    call {:si_unique_call 902} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(0);
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    $M.10 := 0;
    call {:si_unique_call 903} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(0);
    goto corral_source_split_4355;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    $M.12 := 0;
    call {:si_unique_call 904} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(0);
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    $M.14 := 0;
    call {:si_unique_call 905} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(0);
    goto corral_source_split_4357;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    return;
}



const invoke_work_1: ref;

axiom invoke_work_1 == $sub.ref(0, 575337);

procedure invoke_work_1();
  free requires assertsPassed;
  modifies $M.8, $M.0, $M.10, $M.12, $M.14, $CurrAddr, assertsPassed;



implementation invoke_work_1()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 1} true;
    call {:si_unique_call 906} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 907} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 908} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 921} ldv_stop();
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_4365;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    $i21 := $M.14;
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 2);
    goto corral_source_split_4367;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb32, $bb34;

  $bb34:
    assume !($i22 == 1);
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    $i23 := $M.14;
    goto corral_source_split_4410;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 3);
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb35:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $M.14 := 4;
    call {:si_unique_call 918} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(4);
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    $p25 := $M.9;
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 919} int_in_work($p25);
    goto SeqInstr_241, SeqInstr_242;

  SeqInstr_242:
    assume assertsPassed;
    goto SeqInstr_243;

  SeqInstr_243:
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    $M.14 := 1;
    call {:si_unique_call 920} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(1);
    goto corral_source_split_4407;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    goto $bb37;

  SeqInstr_241:
    assume !assertsPassed;
    return;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb33;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    $i16 := $M.12;
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 2);
    goto corral_source_split_4363;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb28;

  $bb28:
    assume !($i17 == 1);
    goto corral_source_split_4400;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    $i18 := $M.12;
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 3);
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $M.12 := 4;
    call {:si_unique_call 915} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(4);
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    $p20 := $M.9;
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 916} int_in_work($p20);
    goto SeqInstr_238, SeqInstr_239;

  SeqInstr_239:
    assume assertsPassed;
    goto SeqInstr_240;

  SeqInstr_240:
    goto corral_source_split_4397;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    $M.12 := 1;
    call {:si_unique_call 917} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(1);
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    goto $bb31;

  SeqInstr_238:
    assume !assertsPassed;
    return;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb27;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    $i11 := $M.10;
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 2);
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i12 == 1);
    goto corral_source_split_4391;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    $i13 := $M.10;
    goto corral_source_split_4392;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 3);
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $M.10 := 4;
    call {:si_unique_call 912} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(4);
    goto corral_source_split_4386;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    $p15 := $M.9;
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 913} int_in_work($p15);
    goto SeqInstr_235, SeqInstr_236;

  SeqInstr_236:
    assume assertsPassed;
    goto SeqInstr_237;

  SeqInstr_237:
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    $M.10 := 1;
    call {:si_unique_call 914} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(1);
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    goto $bb25;

  SeqInstr_235:
    assume !assertsPassed;
    return;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb21;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    $i6 := $M.8;
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 2);
    goto corral_source_split_4375;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i7 == 1);
    goto corral_source_split_4382;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    $i8 := $M.8;
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 3);
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $M.8 := 4;
    call {:si_unique_call 909} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(4);
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    $p10 := $M.9;
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 910} int_in_work($p10);
    goto SeqInstr_232, SeqInstr_233;

  SeqInstr_233:
    assume assertsPassed;
    goto SeqInstr_234;

  SeqInstr_234:
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    $M.8 := 1;
    call {:si_unique_call 911} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(1);
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    goto $bb18;

  SeqInstr_232:
    assume !assertsPassed;
    return;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb14;
}



const main: ref;

axiom main == $sub.ref(0, 576369);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.35, $M.67, $M.16, $M.18, $M.20, $M.22, $M.68, $M.69, $M.36, $M.38, $M.40, $M.42, $M.70, $M.8, $M.10, $M.12, $M.14, $M.71, $M.57, $M.58, $M.59, $M.60, $M.72, $M.73, $M.74, $M.49, $M.51, $M.53, $M.55, $M.75, $M.0, $M.7, $M.76, $M.77, $M.5, $M.79, $M.80, $M.46, $M.47, $M.9, $M.11, $M.13, $M.15, $M.37, $M.39, $M.41, $M.43, $M.50, $M.52, $M.54, $M.56, $M.17, $M.19, $M.21, $M.23, $M.61, $M.62, $M.63, $M.64, $M.66, $M.78, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.89, $M.90, $M.91, $M.92, $M.93, $M.26, $M.34, $M.110, $M.111, $M.4, $M.2, $M.1, $M.3, $M.112, $M.113, $M.114, $CurrAddr, assertsPassed;



implementation main() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p16: ref;
  var $p18: ref;
  var $p20: ref;
  var $p22: ref;
  var $i24: i32;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $i48: i1;
  var $i49: i1;
  var $i50: i1;
  var $i51: i1;
  var $i52: i1;
  var $i53: i1;
  var $i54: i1;
  var $i55: i1;
  var $i56: i32;
  var $i57: i1;
  var $i58: i32;
  var $i59: i1;
  var $i60: i32;
  var $i61: i1;
  var $p62: ref;
  var $i64: i32;
  var $i65: i1;
  var $p66: ref;
  var $i67: i32;
  var $i68: i1;
  var $p69: ref;
  var $i70: i32;
  var $i71: i1;
  var $p72: ref;
  var $i73: i32;
  var $i74: i32;
  var $i76: i32;
  var $i77: i1;
  var $p78: ref;
  var $i79: i32;
  var $i80: i32;
  var $i82: i32;
  var $i83: i1;
  var $p84: ref;
  var $i86: i32;
  var $i87: i1;
  var $p88: ref;
  var $i90: i32;
  var $i91: i1;
  var $p92: ref;
  var $i93: i32;
  var $i94: i1;
  var $p95: ref;
  var $i96: i32;
  var $i97: i1;
  var $p98: ref;
  var $i100: i32;
  var $i101: i1;
  var $p102: ref;
  var $i104: i32;
  var $i105: i1;
  var $p106: ref;
  var $i108: i32;
  var $i109: i1;
  var $p110: ref;
  var $i112: i32;
  var $i113: i1;
  var $p114: ref;
  var $i116: i32;
  var $i117: i1;
  var $p118: ref;
  var $i120: i32;
  var $i121: i1;
  var $p122: ref;
  var $i124: i32;
  var $i125: i1;
  var $p126: ref;
  var $i128: i32;
  var $i129: i1;
  var $p130: ref;
  var $i131: i32;
  var $i132: i1;
  var $p133: ref;
  var $i134: i32;
  var $i135: i1;
  var $p136: ref;
  var $i138: i32;
  var $i139: i1;
  var $p140: ref;
  var $i142: i32;
  var $i143: i1;
  var $p144: ref;
  var $i146: i32;
  var $i147: i1;
  var $p148: ref;
  var $i150: i32;
  var $i151: i1;
  var $p152: ref;
  var $i153: i32;
  var $i155: i32;
  var $i156: i1;
  var $p157: ref;
  var $i158: i32;
  var $i160: i32;
  var $i161: i1;
  var $p162: ref;
  var $i164: i32;
  var $i165: i1;
  var $p166: ref;
  var $i168: i32;
  var $i169: i1;
  var $p170: ref;
  var $i171: i32;
  var $i173: i32;
  var $i174: i1;
  var $p175: ref;
  var $i176: i32;
  var $i178: i32;
  var $i179: i1;
  var $i181: i32;
  var $i182: i32;
  var $i183: i32;
  var $i184: i1;
  var $i186: i32;
  var $i187: i32;
  var $i188: i32;
  var $i189: i1;
  var $i190: i32;
  var $i191: i1;
  var $i192: i32;
  var $i193: i1;
  var $i194: i1;
  var $i195: i1;
  var $i196: i1;
  var $i197: i1;
  var $i198: i1;
  var $i199: i32;
  var $i200: i1;
  var $p201: ref;
  var $i202: i32;
  var $i203: i32;
  var $i204: i1;
  var $i205: i32;
  var $i206: i32;
  var $i207: i32;
  var $i208: i1;
  var $p209: ref;
  var $i210: i32;
  var $i211: i32;
  var $i212: i1;
  var $i213: i32;
  var $i214: i1;
  var $i215: i32;
  var $i216: i1;
  var $p217: ref;
  var $i218: i32;
  var $i219: i32;
  var $i220: i32;
  var $i221: i1;
  var $i222: i32;
  var $i223: i1;
  var $p224: ref;
  var $i225: i32;
  var $i226: i32;
  var $i227: i32;
  var $i228: i1;
  var $p229: ref;
  var $p230: ref;
  var $i231: i32;
  var $i233: i32;
  var $i234: i1;
  var $p235: ref;
  var $i236: i32;
  var $i237: i32;
  var $i238: i1;
  var $i239: i32;
  var $i240: i1;
  var $i241: i32;
  var $i242: i1;
  var $i243: i32;
  var $i244: i1;
  var $i245: i32;
  var $i246: i1;
  var $i247: i32;
  var $i248: i1;
  var $i249: i1;
  var $i250: i1;
  var $i251: i32;
  var $i252: i1;
  var $i253: i32;
  var $i254: i1;
  var $i255: i32;
  var $i256: i1;
  var $i257: i32;
  var $i258: i32;
  var $i259: i1;
  var $i260: i32;
  var $i261: i1;
  var $i262: i32;
  var $i263: i1;
  var vslice_dummy_var_93: ref;
  var vslice_dummy_var_94: ref;
  var vslice_dummy_var_95: ref;
  var vslice_dummy_var_96: ref;
  var vslice_dummy_var_97: ref;
  var vslice_dummy_var_98: i32;
  var vslice_dummy_var_99: i32;
  var vslice_dummy_var_100: i32;
  var vslice_dummy_var_101: i32;
  var vslice_dummy_var_102: i32;
  var vslice_dummy_var_103: i32;
  var vslice_dummy_var_104: i32;
  var vslice_dummy_var_105: i32;
  var vslice_dummy_var_106: i32;
  var vslice_dummy_var_107: i32;
  var vslice_dummy_var_108: i32;
  var vslice_dummy_var_109: i32;
  var vslice_dummy_var_110: i32;
  var vslice_dummy_var_111: i32;
  var vslice_dummy_var_112: i32;
  var vslice_dummy_var_113: i32;
  var vslice_dummy_var_114: i32;
  var vslice_dummy_var_115: i32;
  var vslice_dummy_var_116: i32;
  var vslice_dummy_var_117: i32;
  var vslice_dummy_var_118: i32;
  var vslice_dummy_var_119: i32;
  var vslice_dummy_var_120: i32;
  var vslice_dummy_var_121: i32;
  var vslice_dummy_var_122: i32;
  var vslice_dummy_var_123: i32;

  $bb0:
    call {:si_unique_call 922} $initialize();
    goto corral_source_split_4415;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 923} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    assume {:verifier.code 0} true;
    call {:si_unique_call 924} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 925} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 926} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 927} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 928} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 929} $p5 := ldv_init_zalloc(8216);
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_4418;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 930} $p7 := ldv_init_zalloc(232);
    goto corral_source_split_4419;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 931} $p9 := ldv_init_zalloc(32);
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 932} $p11 := ldv_init_zalloc(1);
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 933} $p12 := ldv_init_zalloc(32);
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 934} ldv_initialize();
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p0);
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 935} vslice_dummy_var_93 := ldv_memset($p14, 0, 4);
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p1);
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 936} vslice_dummy_var_94 := ldv_memset($p16, 0, 4);
    goto corral_source_split_4430;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p2);
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 937} vslice_dummy_var_95 := ldv_memset($p18, 0, 4);
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p3);
    goto corral_source_split_4433;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} vslice_dummy_var_96 := ldv_memset($p20, 0, 4);
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p4);
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 939} vslice_dummy_var_97 := ldv_memset($p22, 0, 4);
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    $M.67 := 0;
    call {:si_unique_call 940} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    goto corral_source_split_4437;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 941} timer_init_3();
    goto corral_source_split_4438;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    $M.68 := 1;
    call {:si_unique_call 942} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    $M.69 := 0;
    call {:si_unique_call 943} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 944} timer_init_2();
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    $M.70 := 1;
    call {:si_unique_call 945} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 946} work_init_1();
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    $M.71 := 1;
    call {:si_unique_call 947} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 948} timer_init_4();
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    $M.72 := 1;
    call {:si_unique_call 949} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    $M.73 := 0;
    call {:si_unique_call 950} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    $M.74 := 1;
    call {:si_unique_call 951} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 952} timer_init_5();
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    $M.75 := 1;
    call {:si_unique_call 953} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $p62, $i64, $i65, $p66, $i67, $i68, $p69, $i70, $i71, $p72, $i73, $i74, $i76, $i77, $p78, $i79, $i80, $i82, $i83, $p84, $i86, $i87, $p88, $i90, $i91, $p92, $i93, $i94, $p95, $i96, $i97, $p98, $i100, $i101, $p102, $i104, $i105, $p106, $i108, $i109, $p110, $i112, $i113, $p114, $i116, $i117, $p118, $i120, $i121, $p122, $i124, $i125, $p126, $i128, $i129, $p130, $i131, $i132, $p133, $i134, $i135, $p136, $i138, $i139, $p140, $i142, $i143, $p144, $i146, $i147, $p148, $i150, $i151, $p152, $i153, $i155, $i156, $p157, $i158, $i160, $i161, $p162, $i164, $i165, $p166, $i168, $i169, $p170, $i171, $i173, $i174, $p175, $i176, $i178, $i179, $i181, $i182, $i183, $i184, $i186, $i187, $i188, $i189, $i190, $i191, $i192, $i193, $i194, $i195, $i196, $i197, $i198, $i199, $i200, $p201, $i202, $i203, $i204, $i205, $i206, $i207, $i208, $p209, $i210, $i211, $i212, $i213, $i214, $i215, $i216, $p217, $i218, $i219, $i220, $i221, $i222, $i223, $p224, $i225, $i226, $i227, $i228, $p229, $p230, $i231, $i233, $i234, $p235, $i236, $i237, $i238, $i239, $i240, $i241, $i242, $i243, $i244, $i245, $i246, $i247, $i248, $i249, $i250, $i251, $i252, $i253, $i254, $i255, $i256, $i257, $i258, $i259, $i260, $i261, $i262, $i263, vslice_dummy_var_98, vslice_dummy_var_99, vslice_dummy_var_100, vslice_dummy_var_101, vslice_dummy_var_102, vslice_dummy_var_103, vslice_dummy_var_104, vslice_dummy_var_105, vslice_dummy_var_106, vslice_dummy_var_107, vslice_dummy_var_108, vslice_dummy_var_109, vslice_dummy_var_110, vslice_dummy_var_111, vslice_dummy_var_112, vslice_dummy_var_113, vslice_dummy_var_114, vslice_dummy_var_115, vslice_dummy_var_116, vslice_dummy_var_117, vslice_dummy_var_118, vslice_dummy_var_119, vslice_dummy_var_120, vslice_dummy_var_121, vslice_dummy_var_122, vslice_dummy_var_123 := main_loop_$bb1($p0, $p1, $p2, $p3, $p4, $p6, $p8, $p10, $p11, $p13, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $p62, $i64, $i65, $p66, $i67, $i68, $p69, $i70, $i71, $p72, $i73, $i74, $i76, $i77, $p78, $i79, $i80, $i82, $i83, $p84, $i86, $i87, $p88, $i90, $i91, $p92, $i93, $i94, $p95, $i96, $i97, $p98, $i100, $i101, $p102, $i104, $i105, $p106, $i108, $i109, $p110, $i112, $i113, $p114, $i116, $i117, $p118, $i120, $i121, $p122, $i124, $i125, $p126, $i128, $i129, $p130, $i131, $i132, $p133, $i134, $i135, $p136, $i138, $i139, $p140, $i142, $i143, $p144, $i146, $i147, $p148, $i150, $i151, $p152, $i153, $i155, $i156, $p157, $i158, $i160, $i161, $p162, $i164, $i165, $p166, $i168, $i169, $p170, $i171, $i173, $i174, $p175, $i176, $i178, $i179, $i181, $i182, $i183, $i184, $i186, $i187, $i188, $i189, $i190, $i191, $i192, $i193, $i194, $i195, $i196, $i197, $i198, $i199, $i200, $p201, $i202, $i203, $i204, $i205, $i206, $i207, $i208, $p209, $i210, $i211, $i212, $i213, $i214, $i215, $i216, $p217, $i218, $i219, $i220, $i221, $i222, $i223, $p224, $i225, $i226, $i227, $i228, $p229, $p230, $i231, $i233, $i234, $p235, $i236, $i237, $i238, $i239, $i240, $i241, $i242, $i243, $i244, $i245, $i246, $i247, $i248, $i249, $i250, $i251, $i252, $i253, $i254, $i255, $i256, $i257, $i258, $i259, $i260, $i261, $i262, $i263, vslice_dummy_var_98, vslice_dummy_var_99, vslice_dummy_var_100, vslice_dummy_var_101, vslice_dummy_var_102, vslice_dummy_var_103, vslice_dummy_var_104, vslice_dummy_var_105, vslice_dummy_var_106, vslice_dummy_var_107, vslice_dummy_var_108, vslice_dummy_var_109, vslice_dummy_var_110, vslice_dummy_var_111, vslice_dummy_var_112, vslice_dummy_var_113, vslice_dummy_var_114, vslice_dummy_var_115, vslice_dummy_var_116, vslice_dummy_var_117, vslice_dummy_var_118, vslice_dummy_var_119, vslice_dummy_var_120, vslice_dummy_var_121, vslice_dummy_var_122, vslice_dummy_var_123);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i24, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i24, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $i27 := $slt.i32($i24, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i24, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1069} ldv_stop();
    goto corral_source_split_4925;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    goto $bb267;

  $bb267:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    goto $bb167_dummy;

  $bb9:
    assume $i28 == 1;
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    $i262 := $M.75;
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    $i263 := $ne.i32($i262, 0);
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb263, $bb264;

  $bb264:
    assume !($i263 == 1);
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb265:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb263:
    assume $i263 == 1;
    goto corral_source_split_4922;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1068} choose_timer_5();
    goto SeqInstr_295, SeqInstr_296;

  SeqInstr_296:
    assume assertsPassed;
    goto SeqInstr_297;

  SeqInstr_297:
    goto corral_source_split_4923;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    goto $bb265;

  SeqInstr_295:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i27 == 1;
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    $i245 := $M.74;
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    $i246 := $ne.i32($i245, 0);
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb233, $bb234;

  $bb234:
    assume !($i246 == 1);
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb262:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb233:
    assume $i246 == 1;
    goto corral_source_split_4883;

  corral_source_split_4883:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1055} $i247 := __VERIFIER_nondet_int();
    call {:si_unique_call 1056} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i247);
    call {:si_unique_call 1057} {:cexpr "tmp___7"} boogie_si_record_i32($i247);
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb235:
    assume {:verifier.code 0} true;
    $i248 := $slt.i32($i247, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb236, $bb237;

  $bb237:
    assume !($i248 == 1);
    assume {:verifier.code 0} true;
    $i249 := $eq.i32($i247, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb238, $bb239;

  $bb239:
    assume {:verifier.code 0} true;
    assume !($i249 == 1);
    goto $bb240;

  $bb240:
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1067} ldv_stop();
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    goto $bb261;

  $bb261:
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb250:
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb238:
    assume $i249 == 1;
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    $i255 := $M.74;
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    $i256 := $eq.i32($i255, 1);
    goto corral_source_split_4887;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb251, $bb252;

  $bb252:
    assume !($i256 == 1);
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb259:
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb251:
    assume $i256 == 1;
    goto corral_source_split_4903;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1061} $i257 := bas_gigaset_init();
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    $M.80 := $i257;
    call {:si_unique_call 1062} {:cexpr "ldv_retval_3"} boogie_si_record_i32($i257);
    goto corral_source_split_4905;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    $i258 := $M.80;
    goto corral_source_split_4906;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    $i259 := $eq.i32($i258, 0);
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb253, $bb254;

  $bb254:
    assume !($i259 == 1);
    assume {:verifier.code 0} true;
    goto $bb255;

  $bb255:
    assume {:verifier.code 0} true;
    $i260 := $M.80;
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    $i261 := $ne.i32($i260, 0);
    goto corral_source_split_4915;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb256, $bb257;

  $bb257:
    assume !($i261 == 1);
    assume {:verifier.code 0} true;
    goto $bb258;

  $bb258:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb256:
    assume $i261 == 1;
    goto corral_source_split_4917;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    $M.74 := 2;
    call {:si_unique_call 1066} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_4918;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1060} ldv_check_final_state();
    goto corral_source_split_4901;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb253:
    assume $i259 == 1;
    goto corral_source_split_4909;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    $M.74 := 3;
    call {:si_unique_call 1063} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    $M.67 := 1;
    call {:si_unique_call 1064} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4911;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1065} ldv_initialize_gigaset_ops_6();
    goto corral_source_split_4912;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    goto $bb255;

  $bb236:
    assume $i248 == 1;
    assume {:verifier.code 0} true;
    $i250 := $eq.i32($i247, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb241, $bb242;

  $bb242:
    assume {:verifier.code 0} true;
    assume !($i250 == 1);
    goto $bb240;

  $bb241:
    assume $i250 == 1;
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    $i251 := $M.74;
    goto corral_source_split_4890;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    $i252 := $eq.i32($i251, 3);
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb243, $bb244;

  $bb244:
    assume {:verifier.code 0} true;
    assume !($i252 == 1);
    goto $bb245;

  $bb245:
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb249:
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb243:
    assume $i252 == 1;
    goto corral_source_split_4893;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    $i253 := $M.73;
    goto corral_source_split_4894;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    $i254 := $eq.i32($i253, 0);
    goto corral_source_split_4895;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb246, $bb247;

  $bb247:
    assume {:verifier.code 0} true;
    assume !($i254 == 1);
    goto $bb245;

  $bb246:
    assume $i254 == 1;
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1058} bas_gigaset_exit();
    goto corral_source_split_4898;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    $M.74 := 2;
    call {:si_unique_call 1059} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_4899;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb5:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i24, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i29 == 1);
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    $i243 := $M.72;
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    $i244 := $ne.i32($i243, 0);
    goto corral_source_split_4466;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb230, $bb231;

  $bb231:
    assume !($i244 == 1);
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb232:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb230:
    assume $i244 == 1;
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1054} choose_timer_4();
    goto SeqInstr_292, SeqInstr_293;

  SeqInstr_293:
    assume assertsPassed;
    goto SeqInstr_294;

  SeqInstr_294:
    goto corral_source_split_4881;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    goto $bb232;

  SeqInstr_292:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i29 == 1;
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    $i241 := $M.71;
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    $i242 := $ne.i32($i241, 0);
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb227, $bb228;

  $bb228:
    assume !($i242 == 1);
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb229:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb227:
    assume $i242 == 1;
    goto corral_source_split_4877;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1053} invoke_work_1();
    goto SeqInstr_289, SeqInstr_290;

  SeqInstr_290:
    assume assertsPassed;
    goto SeqInstr_291;

  SeqInstr_291:
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    goto $bb229;

  SeqInstr_289:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    $i30 := $slt.i32($i24, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i24, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i31 == 1);
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    $i239 := $M.70;
    goto corral_source_split_4473;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    $i240 := $ne.i32($i239, 0);
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb224, $bb225;

  $bb225:
    assume !($i240 == 1);
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb226:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb224:
    assume $i240 == 1;
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1052} choose_timer_2();
    goto SeqInstr_286, SeqInstr_287;

  SeqInstr_287:
    assume assertsPassed;
    goto SeqInstr_288;

  SeqInstr_288:
    goto corral_source_split_4875;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    goto $bb226;

  SeqInstr_286:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i31 == 1;
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    $i190 := $M.69;
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    $i191 := $ne.i32($i190, 0);
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb171, $bb172;

  $bb172:
    assume !($i191 == 1);
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb223:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb171:
    assume $i191 == 1;
    goto corral_source_split_4783;

  corral_source_split_4783:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1030} $i192 := __VERIFIER_nondet_int();
    call {:si_unique_call 1031} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i192);
    call {:si_unique_call 1032} {:cexpr "tmp___6"} boogie_si_record_i32($i192);
    assume {:verifier.code 0} true;
    goto $bb173;

  $bb173:
    assume {:verifier.code 0} true;
    $i193 := $slt.i32($i192, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb174, $bb175;

  $bb175:
    assume !($i193 == 1);
    assume {:verifier.code 0} true;
    $i194 := $slt.i32($i192, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb176, $bb177;

  $bb177:
    assume !($i194 == 1);
    assume {:verifier.code 0} true;
    $i195 := $slt.i32($i192, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb178, $bb179;

  $bb179:
    assume !($i195 == 1);
    assume {:verifier.code 0} true;
    $i196 := $eq.i32($i192, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb180, $bb181;

  $bb181:
    assume {:verifier.code 0} true;
    assume !($i196 == 1);
    goto $bb182;

  $bb182:
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1051} ldv_stop();
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb222:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb180:
    assume $i196 == 1;
    goto corral_source_split_4793;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    $i233 := $M.69;
    goto corral_source_split_4794;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    $i234 := $eq.i32($i233, 3);
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb215, $bb216;

  $bb216:
    assume !($i234 == 1);
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb220:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb215:
    assume $i234 == 1;
    goto corral_source_split_4862;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    $p235 := $M.66;
    goto corral_source_split_4863;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1048} $i236 := gigaset_resume($p235);
    goto SeqInstr_283, SeqInstr_284;

  SeqInstr_284:
    assume assertsPassed;
    goto SeqInstr_285;

  SeqInstr_285:
    goto corral_source_split_4864;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    $M.79 := $i236;
    call {:si_unique_call 1049} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i236);
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    $i237 := $M.79;
    goto corral_source_split_4866;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    $i238 := $eq.i32($i237, 0);
    goto corral_source_split_4867;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb217, $bb218;

  $bb218:
    assume !($i238 == 1);
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb219:
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb217:
    assume $i238 == 1;
    goto corral_source_split_4869;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    $M.69 := 2;
    call {:si_unique_call 1050} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_4870;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    goto $bb219;

  SeqInstr_283:
    assume !assertsPassed;
    return;

  $bb178:
    assume $i195 == 1;
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    $i227 := $M.69;
    goto corral_source_split_4790;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    $i228 := $eq.i32($i227, 2);
    goto corral_source_split_4791;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb212, $bb213;

  $bb213:
    assume !($i228 == 1);
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb214:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb212:
    assume $i228 == 1;
    goto corral_source_split_4855;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    $p229 := $M.66;
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_4857;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    $i231 := $load.i32($M.35, $p230);
    goto corral_source_split_4858;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1046} vslice_dummy_var_123 := gigaset_suspend($p229, $i231);
    goto SeqInstr_280, SeqInstr_281;

  SeqInstr_281:
    assume assertsPassed;
    goto SeqInstr_282;

  SeqInstr_282:
    goto corral_source_split_4859;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    $M.69 := 3;
    call {:si_unique_call 1047} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_4860;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    goto $bb214;

  SeqInstr_280:
    assume !assertsPassed;
    return;

  $bb176:
    assume $i194 == 1;
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    $i213 := $M.69;
    goto corral_source_split_4786;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    $i214 := $eq.i32($i213, 3);
    goto corral_source_split_4787;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb200, $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    assume !($i214 == 1);
    goto $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb205:
    assume {:verifier.code 0} true;
    $i220 := $M.69;
    goto corral_source_split_4840;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    $i221 := $eq.i32($i220, 2);
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb206, $bb207;

  $bb207:
    assume {:verifier.code 0} true;
    assume !($i221 == 1);
    goto $bb208;

  $bb208:
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb211:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb206:
    assume $i221 == 1;
    goto corral_source_split_4843;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    $i222 := $M.78;
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    $i223 := $eq.i32($i222, 0);
    goto corral_source_split_4845;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb209, $bb210;

  $bb210:
    assume {:verifier.code 0} true;
    assume !($i223 == 1);
    goto $bb208;

  $bb209:
    assume $i223 == 1;
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    $p224 := $M.66;
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1043} gigaset_disconnect($p224);
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 1044} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    $i225 := $M.73;
    goto corral_source_split_4851;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    $i226 := $sub.i32($i225, 1);
    goto corral_source_split_4852;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    $M.73 := $i226;
    call {:si_unique_call 1045} {:cexpr "ref_cnt"} boogie_si_record_i32($i226);
    goto corral_source_split_4853;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb200:
    assume $i214 == 1;
    goto corral_source_split_4828;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    $i215 := $M.78;
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    $i216 := $eq.i32($i215, 0);
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb203, $bb204;

  $bb204:
    assume {:verifier.code 0} true;
    assume !($i216 == 1);
    goto $bb202;

  $bb203:
    assume $i216 == 1;
    goto corral_source_split_4832;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    $p217 := $M.66;
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1040} gigaset_disconnect($p217);
    goto corral_source_split_4834;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 1041} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_4835;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    $i218 := $M.73;
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    $i219 := $sub.i32($i218, 1);
    goto corral_source_split_4837;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    $M.73 := $i219;
    call {:si_unique_call 1042} {:cexpr "ref_cnt"} boogie_si_record_i32($i219);
    goto corral_source_split_4838;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb174:
    assume $i193 == 1;
    assume {:verifier.code 0} true;
    $i197 := $slt.i32($i192, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb183, $bb184;

  $bb184:
    assume !($i197 == 1);
    goto corral_source_split_4797;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    $i207 := $M.69;
    goto corral_source_split_4798;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    $i208 := $eq.i32($i207, 3);
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb194, $bb195;

  $bb195:
    assume !($i208 == 1);
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb199:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb194:
    assume $i208 == 1;
    goto corral_source_split_4818;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    $p209 := $M.66;
    goto corral_source_split_4819;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1037} $i210 := gigaset_post_reset($p209);
    goto SeqInstr_277, SeqInstr_278;

  SeqInstr_278:
    assume assertsPassed;
    goto SeqInstr_279;

  SeqInstr_279:
    goto corral_source_split_4820;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    $M.77 := $i210;
    call {:si_unique_call 1038} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i210);
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    $i211 := $M.77;
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    $i212 := $eq.i32($i211, 0);
    goto corral_source_split_4823;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb196, $bb197;

  $bb197:
    assume !($i212 == 1);
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb196:
    assume $i212 == 1;
    goto corral_source_split_4825;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    $M.69 := 2;
    call {:si_unique_call 1039} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_4826;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    goto $bb198;

  SeqInstr_277:
    assume !assertsPassed;
    return;

  $bb183:
    assume $i197 == 1;
    assume {:verifier.code 0} true;
    $i198 := $eq.i32($i192, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb185, $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    assume !($i198 == 1);
    goto $bb182;

  $bb185:
    assume $i198 == 1;
    goto corral_source_split_4801;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    $i199 := $M.69;
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    $i200 := $eq.i32($i199, 1);
    goto corral_source_split_4803;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb187, $bb188;

  $bb188:
    assume !($i200 == 1);
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb192:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb187:
    assume $i200 == 1;
    goto corral_source_split_4805;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    $p201 := $M.66;
    goto corral_source_split_4806;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1033} $i202 := gigaset_probe($p201, $p13);
    goto SeqInstr_274, SeqInstr_275;

  SeqInstr_275:
    assume assertsPassed;
    goto SeqInstr_276;

  SeqInstr_276:
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    $M.76 := $i202;
    call {:si_unique_call 1034} {:cexpr "ldv_retval_2"} boogie_si_record_i32($i202);
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    $i203 := $M.76;
    goto corral_source_split_4809;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    $i204 := $eq.i32($i203, 0);
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb189, $bb190;

  $bb190:
    assume !($i204 == 1);
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb191:
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb189:
    assume $i204 == 1;
    goto corral_source_split_4812;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    $M.69 := 2;
    call {:si_unique_call 1035} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_4813;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    $i205 := $M.73;
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    $i206 := $add.i32($i205, 1);
    goto corral_source_split_4815;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    $M.73 := $i206;
    call {:si_unique_call 1036} {:cexpr "ref_cnt"} boogie_si_record_i32($i206);
    goto corral_source_split_4816;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    goto $bb191;

  SeqInstr_274:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i30 == 1;
    assume {:verifier.code 0} true;
    $i32 := $slt.i32($i24, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i32 == 1);
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    $i188 := $M.68;
    goto corral_source_split_4477;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    $i189 := $ne.i32($i188, 0);
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb168, $bb169;

  $bb169:
    assume !($i189 == 1);
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb168:
    assume $i189 == 1;
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1029} choose_timer_3();
    goto SeqInstr_271, SeqInstr_272;

  SeqInstr_272:
    assume assertsPassed;
    goto SeqInstr_273;

  SeqInstr_273:
    goto corral_source_split_4781;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    goto $bb170;

  SeqInstr_271:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i32 == 1;
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i24, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb11;

  $bb20:
    assume $i33 == 1;
    goto corral_source_split_4480;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    $i34 := $M.67;
    goto corral_source_split_4481;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb22:
    assume $i35 == 1;
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 1} true;
    call {:si_unique_call 957} $i36 := __VERIFIER_nondet_int();
    call {:si_unique_call 958} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i36);
    call {:si_unique_call 959} {:cexpr "tmp___5"} boogie_si_record_i32($i36);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i37 := $slt.i32($i36, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    $i38 := $slt.i32($i36, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    $i39 := $slt.i32($i36, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    $i40 := $slt.i32($i36, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    $i41 := $slt.i32($i36, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i36, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1028} ldv_stop();
    goto corral_source_split_4778;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb35:
    assume $i42 == 1;
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    $i183 := $M.67;
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    $i184 := $eq.i32($i183, 1);
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb161, $bb162;

  $bb162:
    assume !($i184 == 1);
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb161:
    assume $i184 == 1;
    goto corral_source_split_4771;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1025} vslice_dummy_var_122 := ldv_probe_6();
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    $M.67 := 2;
    call {:si_unique_call 1026} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_4773;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    $i186 := $M.73;
    goto corral_source_split_4774;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    $i187 := $add.i32($i186, 1);
    goto corral_source_split_4775;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    $M.73 := $i187;
    call {:si_unique_call 1027} {:cexpr "ref_cnt"} boogie_si_record_i32($i187);
    goto corral_source_split_4776;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb33:
    assume $i41 == 1;
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    $i178 := $M.67;
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    $i179 := $eq.i32($i178, 2);
    goto corral_source_split_4492;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb158, $bb159;

  $bb159:
    assume !($i179 == 1);
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb158:
    assume $i179 == 1;
    goto corral_source_split_4764;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1022} vslice_dummy_var_121 := ldv_release_6();
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    $M.67 := 1;
    call {:si_unique_call 1023} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4766;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    $i181 := $M.73;
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    $i182 := $sub.i32($i181, 1);
    goto corral_source_split_4768;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    $M.73 := $i182;
    call {:si_unique_call 1024} {:cexpr "ref_cnt"} boogie_si_record_i32($i182);
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb31:
    assume $i40 == 1;
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    $i168 := $M.67;
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    $i169 := $eq.i32($i168, 1);
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb152, $bb153;

  $bb153:
    assume !($i169 == 1);
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    $i173 := $M.67;
    goto corral_source_split_4755;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    $i174 := $eq.i32($i173, 2);
    goto corral_source_split_4756;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb155, $bb156;

  $bb156:
    assume !($i174 == 1);
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb155:
    assume $i174 == 1;
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    $p175 := $M.46;
    goto corral_source_split_4759;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    $i176 := $load.i32($M.35, $p0);
    goto corral_source_split_4760;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1020} vslice_dummy_var_120 := gigaset_baud_rate($p175, $i176);
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    $M.67 := 2;
    call {:si_unique_call 1021} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_4762;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb152:
    assume $i169 == 1;
    goto corral_source_split_4749;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    $p170 := $M.46;
    goto corral_source_split_4750;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    $i171 := $load.i32($M.35, $p0);
    goto corral_source_split_4751;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1018} vslice_dummy_var_119 := gigaset_baud_rate($p170, $i171);
    goto corral_source_split_4752;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    $M.67 := 1;
    call {:si_unique_call 1019} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4753;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb29:
    assume $i39 == 1;
    assume {:verifier.code 0} true;
    $i43 := $slt.i32($i36, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i43 == 1);
    goto corral_source_split_4502;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    $i160 := $M.67;
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    $i161 := $eq.i32($i160, 1);
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb146, $bb147;

  $bb147:
    assume !($i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    $i164 := $M.67;
    goto corral_source_split_4741;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    $i165 := $eq.i32($i164, 2);
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb149, $bb150;

  $bb150:
    assume !($i165 == 1);
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb149:
    assume $i165 == 1;
    goto corral_source_split_4744;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    $p166 := $M.46;
    goto corral_source_split_4745;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1016} vslice_dummy_var_118 := gigaset_chars_in_buffer($p166);
    goto corral_source_split_4746;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    $M.67 := 2;
    call {:si_unique_call 1017} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_4747;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb146:
    assume $i161 == 1;
    goto corral_source_split_4736;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    $p162 := $M.46;
    goto corral_source_split_4737;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1014} vslice_dummy_var_117 := gigaset_chars_in_buffer($p162);
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    $M.67 := 1;
    call {:si_unique_call 1015} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4739;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb38:
    assume $i43 == 1;
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    $i150 := $M.67;
    goto corral_source_split_4499;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    $i151 := $eq.i32($i150, 1);
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb140, $bb141;

  $bb141:
    assume !($i151 == 1);
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    $i155 := $M.67;
    goto corral_source_split_4727;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    $i156 := $eq.i32($i155, 2);
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb143, $bb144;

  $bb144:
    assume !($i156 == 1);
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb143:
    assume $i156 == 1;
    goto corral_source_split_4730;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    $p157 := $M.46;
    goto corral_source_split_4731;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    $i158 := $load.i32($M.35, $p2);
    goto corral_source_split_4732;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1012} vslice_dummy_var_116 := gigaset_set_line_ctrl($p157, $i158);
    goto corral_source_split_4733;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    $M.67 := 2;
    call {:si_unique_call 1013} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb140:
    assume $i151 == 1;
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    $p152 := $M.46;
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    $i153 := $load.i32($M.35, $p2);
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1010} vslice_dummy_var_115 := gigaset_set_line_ctrl($p152, $i153);
    goto corral_source_split_4724;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    $M.67 := 1;
    call {:si_unique_call 1011} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb27:
    assume $i38 == 1;
    assume {:verifier.code 0} true;
    $i44 := $slt.i32($i36, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    $i45 := $slt.i32($i36, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i45 == 1);
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    $i142 := $M.67;
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    $i143 := $eq.i32($i142, 1);
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb134, $bb135;

  $bb135:
    assume !($i143 == 1);
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    $i146 := $M.67;
    goto corral_source_split_4713;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    $i147 := $eq.i32($i146, 2);
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb137, $bb138;

  $bb138:
    assume !($i147 == 1);
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb137:
    assume $i147 == 1;
    goto corral_source_split_4716;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    $p148 := $M.47;
    goto corral_source_split_4717;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1008} vslice_dummy_var_114 := gigaset_init_bchannel($p148);
    goto SeqInstr_268, SeqInstr_269;

  SeqInstr_269:
    assume assertsPassed;
    goto SeqInstr_270;

  SeqInstr_270:
    goto corral_source_split_4718;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    $M.67 := 2;
    call {:si_unique_call 1009} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_4719;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    goto $bb139;

  SeqInstr_268:
    assume !assertsPassed;
    return;

  $bb134:
    assume $i143 == 1;
    goto corral_source_split_4708;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    $p144 := $M.47;
    goto corral_source_split_4709;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1006} vslice_dummy_var_113 := gigaset_init_bchannel($p144);
    goto SeqInstr_265, SeqInstr_266;

  SeqInstr_266:
    assume assertsPassed;
    goto SeqInstr_267;

  SeqInstr_267:
    goto corral_source_split_4710;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    $M.67 := 1;
    call {:si_unique_call 1007} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    goto $bb136;

  SeqInstr_265:
    assume !assertsPassed;
    return;

  $bb42:
    assume $i45 == 1;
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    $i134 := $M.67;
    goto corral_source_split_4507;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    $i135 := $eq.i32($i134, 1);
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb128, $bb129;

  $bb129:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    $i138 := $M.67;
    goto corral_source_split_4700;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    $i139 := $eq.i32($i138, 2);
    goto corral_source_split_4701;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb131, $bb132;

  $bb132:
    assume !($i139 == 1);
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb131:
    assume $i139 == 1;
    goto corral_source_split_4703;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    $p140 := $M.46;
    goto corral_source_split_4704;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1004} vslice_dummy_var_112 := gigaset_write_room($p140);
    goto corral_source_split_4705;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    $M.67 := 2;
    call {:si_unique_call 1005} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_4706;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb128:
    assume $i135 == 1;
    goto corral_source_split_4695;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    $p136 := $M.46;
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1002} vslice_dummy_var_111 := gigaset_write_room($p136);
    goto corral_source_split_4697;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    $M.67 := 1;
    call {:si_unique_call 1003} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb40:
    assume $i44 == 1;
    assume {:verifier.code 0} true;
    $i46 := $slt.i32($i36, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i46 == 1);
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    $i128 := $M.67;
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    $i129 := $eq.i32($i128, 1);
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb122, $bb123;

  $bb123:
    assume !($i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    $i131 := $M.67;
    goto corral_source_split_4687;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    $i132 := $eq.i32($i131, 2);
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb125, $bb126;

  $bb126:
    assume !($i132 == 1);
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb125:
    assume $i132 == 1;
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    $p133 := $M.46;
    goto corral_source_split_4691;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1000} gigaset_freecshw($p133);
    goto corral_source_split_4692;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    $M.67 := 2;
    call {:si_unique_call 1001} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb122:
    assume $i129 == 1;
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    $p130 := $M.46;
    goto corral_source_split_4683;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 998} gigaset_freecshw($p130);
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    $M.67 := 1;
    call {:si_unique_call 999} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4685;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb44:
    assume $i46 == 1;
    goto corral_source_split_4514;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    $i120 := $M.67;
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    $i121 := $eq.i32($i120, 1);
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116, $bb117;

  $bb117:
    assume !($i121 == 1);
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    $i124 := $M.67;
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    $i125 := $eq.i32($i124, 2);
    goto corral_source_split_4675;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb119, $bb120;

  $bb120:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb119:
    assume $i125 == 1;
    goto corral_source_split_4677;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    $p126 := $M.46;
    goto corral_source_split_4678;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 996} vslice_dummy_var_110 := gigaset_brkchars($p126, $p11);
    goto corral_source_split_4679;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    $M.67 := 2;
    call {:si_unique_call 997} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb116:
    assume $i121 == 1;
    goto corral_source_split_4669;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    $p122 := $M.46;
    goto corral_source_split_4670;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 994} vslice_dummy_var_109 := gigaset_brkchars($p122, $p11);
    goto corral_source_split_4671;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    $M.67 := 1;
    call {:si_unique_call 995} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb25:
    assume $i37 == 1;
    assume {:verifier.code 0} true;
    $i47 := $slt.i32($i36, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    $i48 := $slt.i32($i36, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    $i49 := $slt.i32($i36, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    $i50 := $slt.i32($i36, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i50 == 1);
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    $i112 := $M.67;
    goto corral_source_split_4531;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    $i113 := $eq.i32($i112, 1);
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  $bb111:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    $i116 := $M.67;
    goto corral_source_split_4661;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    $i117 := $eq.i32($i116, 2);
    goto corral_source_split_4662;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113, $bb114;

  $bb114:
    assume !($i117 == 1);
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb113:
    assume $i117 == 1;
    goto corral_source_split_4664;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    $p118 := $M.47;
    goto corral_source_split_4665;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 992} vslice_dummy_var_108 := gigaset_isoc_send_skb($p118, $p8);
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    $M.67 := 2;
    call {:si_unique_call 993} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_4667;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb110:
    assume $i113 == 1;
    goto corral_source_split_4656;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    $p114 := $M.47;
    goto corral_source_split_4657;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 990} vslice_dummy_var_107 := gigaset_isoc_send_skb($p114, $p8);
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    $M.67 := 1;
    call {:si_unique_call 991} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4659;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb52:
    assume $i50 == 1;
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    $i104 := $M.67;
    goto corral_source_split_4527;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    $i105 := $eq.i32($i104, 1);
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb104, $bb105;

  $bb105:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    $i108 := $M.67;
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    $i109 := $eq.i32($i108, 2);
    goto corral_source_split_4649;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  $bb108:
    assume !($i109 == 1);
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb107:
    assume $i109 == 1;
    goto corral_source_split_4651;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    $p110 := $M.46;
    goto corral_source_split_4652;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 988} vslice_dummy_var_106 := gigaset_initcshw($p110);
    goto SeqInstr_262, SeqInstr_263;

  SeqInstr_263:
    assume assertsPassed;
    goto SeqInstr_264;

  SeqInstr_264:
    goto corral_source_split_4653;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    $M.67 := 2;
    call {:si_unique_call 989} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    goto $bb109;

  SeqInstr_262:
    assume !assertsPassed;
    return;

  $bb104:
    assume $i105 == 1;
    goto corral_source_split_4643;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    $p106 := $M.46;
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 986} vslice_dummy_var_105 := gigaset_initcshw($p106);
    goto SeqInstr_259, SeqInstr_260;

  SeqInstr_260:
    assume assertsPassed;
    goto SeqInstr_261;

  SeqInstr_261:
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    $M.67 := 1;
    call {:si_unique_call 987} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    goto $bb106;

  SeqInstr_259:
    assume !assertsPassed;
    return;

  $bb50:
    assume $i49 == 1;
    goto corral_source_split_4522;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    $i96 := $M.67;
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    $i97 := $eq.i32($i96, 1);
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb98, $bb99;

  $bb99:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    $i100 := $M.67;
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    $i101 := $eq.i32($i100, 2);
    goto corral_source_split_4636;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb101:
    assume $i101 == 1;
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    $p102 := $M.47;
    goto corral_source_split_4639;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 984} vslice_dummy_var_104 := gigaset_initbcshw($p102);
    goto SeqInstr_256, SeqInstr_257;

  SeqInstr_257:
    assume assertsPassed;
    goto SeqInstr_258;

  SeqInstr_258:
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    $M.67 := 2;
    call {:si_unique_call 985} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_4641;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    goto $bb103;

  SeqInstr_256:
    assume !assertsPassed;
    return;

  $bb98:
    assume $i97 == 1;
    goto corral_source_split_4630;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    $p98 := $M.47;
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 982} vslice_dummy_var_103 := gigaset_initbcshw($p98);
    goto SeqInstr_253, SeqInstr_254;

  SeqInstr_254:
    assume assertsPassed;
    goto SeqInstr_255;

  SeqInstr_255:
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    $M.67 := 1;
    call {:si_unique_call 983} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4633;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    goto $bb100;

  SeqInstr_253:
    assume !assertsPassed;
    return;

  $bb48:
    assume $i48 == 1;
    assume {:verifier.code 0} true;
    $i51 := $slt.i32($i36, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i51 == 1);
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    $i90 := $M.67;
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    $i91 := $eq.i32($i90, 1);
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    $i93 := $M.67;
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    $i94 := $eq.i32($i93, 2);
    goto corral_source_split_4623;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  $bb96:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb95:
    assume $i94 == 1;
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    $p95 := $M.47;
    goto corral_source_split_4626;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 980} gigaset_reinitbcshw($p95);
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    $M.67 := 2;
    call {:si_unique_call 981} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_4628;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb92:
    assume $i91 == 1;
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    $p92 := $M.47;
    goto corral_source_split_4618;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 978} gigaset_reinitbcshw($p92);
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    $M.67 := 1;
    call {:si_unique_call 979} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4620;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb54:
    assume $i51 == 1;
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    $i82 := $M.67;
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    $i83 := $eq.i32($i82, 1);
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    $i86 := $M.67;
    goto corral_source_split_4609;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    $i87 := $eq.i32($i86, 2);
    goto corral_source_split_4610;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb89:
    assume $i87 == 1;
    goto corral_source_split_4612;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    $p88 := $M.47;
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 976} vslice_dummy_var_102 := gigaset_close_bchannel($p88);
    goto SeqInstr_250, SeqInstr_251;

  SeqInstr_251:
    assume assertsPassed;
    goto SeqInstr_252;

  SeqInstr_252:
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    $M.67 := 2;
    call {:si_unique_call 977} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_4615;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    goto $bb91;

  SeqInstr_250:
    assume !assertsPassed;
    return;

  $bb86:
    assume $i83 == 1;
    goto corral_source_split_4604;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    $p84 := $M.47;
    goto corral_source_split_4605;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 974} vslice_dummy_var_101 := gigaset_close_bchannel($p84);
    goto SeqInstr_247, SeqInstr_248;

  SeqInstr_248:
    assume assertsPassed;
    goto SeqInstr_249;

  SeqInstr_249:
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    $M.67 := 1;
    call {:si_unique_call 975} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4607;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    goto $bb88;

  SeqInstr_247:
    assume !assertsPassed;
    return;

  $bb46:
    assume $i47 == 1;
    assume {:verifier.code 0} true;
    $i52 := $slt.i32($i36, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    $i53 := $slt.i32($i36, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i53 == 1);
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    $i70 := $M.67;
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    $i71 := $eq.i32($i70, 1);
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $i76 := $M.67;
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    $i77 := $eq.i32($i76, 2);
    goto corral_source_split_4595;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb83:
    assume $i77 == 1;
    goto corral_source_split_4597;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    $p78 := $M.46;
    goto corral_source_split_4598;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    $i79 := $load.i32($M.35, $p1);
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    $i80 := $load.i32($M.35, $p3);
    goto corral_source_split_4600;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 972} vslice_dummy_var_100 := gigaset_set_modem_ctrl($p78, $i79, $i80);
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    $M.67 := 2;
    call {:si_unique_call 973} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb80:
    assume $i71 == 1;
    goto corral_source_split_4587;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    $p72 := $M.46;
    goto corral_source_split_4588;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.35, $p1);
    goto corral_source_split_4589;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.35, $p3);
    goto corral_source_split_4590;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 970} vslice_dummy_var_99 := gigaset_set_modem_ctrl($p72, $i73, $i74);
    goto corral_source_split_4591;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    $M.67 := 1;
    call {:si_unique_call 971} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4592;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb58:
    assume $i53 == 1;
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    $i64 := $M.67;
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i64, 1);
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $i67 := $M.67;
    goto corral_source_split_4579;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    $i68 := $eq.i32($i67, 2);
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb77:
    assume $i68 == 1;
    goto corral_source_split_4582;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    $p69 := $M.47;
    goto corral_source_split_4583;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 968} gigaset_freebcshw($p69);
    goto corral_source_split_4584;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    $M.67 := 2;
    call {:si_unique_call 969} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb74:
    assume $i65 == 1;
    goto corral_source_split_4574;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    $p66 := $M.47;
    goto corral_source_split_4575;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 966} gigaset_freebcshw($p66);
    goto corral_source_split_4576;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    $M.67 := 1;
    call {:si_unique_call 967} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb56:
    assume $i52 == 1;
    assume {:verifier.code 0} true;
    $i54 := $slt.i32($i36, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i54 == 1);
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    $i60 := $M.67;
    goto corral_source_split_4551;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    $i61 := $eq.i32($i60, 2);
    goto corral_source_split_4552;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb71:
    assume $i61 == 1;
    goto corral_source_split_4569;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    $p62 := $M.46;
    goto corral_source_split_4570;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 964} vslice_dummy_var_98 := gigaset_write_cmd($p62, $p10);
    goto SeqInstr_244, SeqInstr_245;

  SeqInstr_245:
    assume assertsPassed;
    goto SeqInstr_246;

  SeqInstr_246:
    goto corral_source_split_4571;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    $M.67 := 2;
    call {:si_unique_call 965} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    goto $bb73;

  SeqInstr_244:
    assume !assertsPassed;
    return;

  $bb60:
    assume $i54 == 1;
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i36, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    assume !($i55 == 1);
    goto $bb37;

  $bb62:
    assume $i55 == 1;
    goto corral_source_split_4554;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    $i56 := $M.67;
    goto corral_source_split_4555;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i56, 1);
    goto corral_source_split_4556;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $i58 := $M.67;
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    $i59 := $eq.i32($i58, 2);
    goto corral_source_split_4563;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb67:
    assume $i59 == 1;
    goto corral_source_split_4565;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} gigaset_isoc_input($p6);
    goto corral_source_split_4566;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    $M.67 := 2;
    call {:si_unique_call 963} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb64:
    assume $i57 == 1;
    goto corral_source_split_4558;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 960} gigaset_isoc_input($p6);
    goto corral_source_split_4559;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    $M.67 := 1;
    call {:si_unique_call 961} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb167_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 954} $i24 := __VERIFIER_nondet_int();
    call {:si_unique_call 955} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i24);
    call {:si_unique_call 956} {:cexpr "tmp___4"} boogie_si_record_i32($i24);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 577401);

procedure ldv_initialize();
  free requires assertsPassed;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4927;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    return;
}



const ldv_release_6: ref;

axiom ldv_release_6 == $sub.ref(0, 578433);

procedure ldv_release_6() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_6() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4929;

  corral_source_split_4929:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1070} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1071} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_4930;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_probe_6: ref;

axiom ldv_probe_6 == $sub.ref(0, 579465);

procedure ldv_probe_6() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_probe_6() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1072} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1073} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_4933;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const bas_gigaset_exit: ref;

axiom bas_gigaset_exit == $sub.ref(0, 580497);

procedure bas_gigaset_exit();
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.69;



implementation bas_gigaset_exit()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i29: i64;
  var $i30: i64;
  var $i31: i1;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $p40: ref;
  var $i41: i32;
  var $i42: i32;
  var $i43: i1;
  var $i44: i32;
  var $i45: i32;
  var $i46: i1;
  var $i47: i32;
  var $i48: i64;
  var $i49: i64;
  var $i50: i1;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $p55: ref;
  var $p56: ref;
  var $i57: i32;
  var $p59: ref;
  var $i60: i32;
  var $i61: i32;
  var $i62: i1;
  var $i63: i32;
  var $i64: i32;
  var $i65: i1;
  var $i66: i32;
  var $i67: i64;
  var $i68: i64;
  var $i69: i1;
  var $p71: ref;
  var $p72: ref;
  var $i73: i32;
  var $p74: ref;
  var $p75: ref;
  var $i76: i32;
  var $p78: ref;
  var $i79: i32;
  var $p80: ref;
  var $p81: ref;
  var $i82: i32;
  var $i83: i1;
  var $i5: i32;
  var $p84: ref;
  var vslice_dummy_var_124: i32;
  var vslice_dummy_var_125: i32;
  var vslice_dummy_var_126: i32;
  var vslice_dummy_var_127: i32;
  var vslice_dummy_var_128: i32;
  var vslice_dummy_var_129: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4935;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    $p0 := $M.1;
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1074} gigaset_blockdriver($p0);
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    $p1 := $M.1;
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(104, 1));
    goto corral_source_split_4939;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_4940;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    $i4 := $ult.i32(0, $i3);
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1096} ldv_usb_deregister_82(gigaset_usb_driver);
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    $p84 := $M.1;
    goto corral_source_split_5052;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1097} gigaset_freedriver($p84);
    goto corral_source_split_5053;

  corral_source_split_5053:
    assume {:verifier.code 0} true;
    $M.1 := $0.ref;
    goto corral_source_split_5054;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_4943;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb4;

  $bb4:
    call $p6, $p7, $p8, $i9, $p10, $i11, $i12, $p13, $p14, $p15, $i16, $p18, $p19, $p20, $p21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $p33, $p34, $i35, $p36, $p37, $i38, $p40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $p52, $p53, $i54, $p55, $p56, $i57, $p59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $p71, $p72, $i73, $p74, $p75, $i76, $p78, $i79, $p80, $p81, $i82, $i83, $i5, vslice_dummy_var_124, vslice_dummy_var_125, vslice_dummy_var_126, vslice_dummy_var_127, vslice_dummy_var_128, vslice_dummy_var_129 := bas_gigaset_exit_loop_$bb4($p6, $p7, $p8, $i9, $p10, $i11, $i12, $p13, $p14, $p15, $i16, $p18, $p19, $p20, $p21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $p33, $p34, $i35, $p36, $p37, $i38, $p40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $p52, $p53, $i54, $p55, $p56, $i57, $p59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $p71, $p72, $i73, $p74, $p75, $i76, $p78, $i79, $p80, $p81, $i82, $i83, $i5, vslice_dummy_var_124, vslice_dummy_var_125, vslice_dummy_var_126, vslice_dummy_var_127, vslice_dummy_var_128, vslice_dummy_var_129);
    goto $bb4_last;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p6 := $M.1;
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 144)), $mul.ref(112, 1));
    goto corral_source_split_4948;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_4949;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i5);
    goto corral_source_split_4950;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p8, $mul.ref($i9, 5232));
    goto corral_source_split_4951;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1075} $i11 := gigaset_shutdown($p10);
    call {:si_unique_call 1076} {:cexpr "tmp"} boogie_si_record_i32($i11);
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i11, 0);
    goto corral_source_split_4953;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p13 := $M.1;
    goto corral_source_split_4963;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 144)), $mul.ref(112, 1));
    goto corral_source_split_4964;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_4965;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i5);
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    goto corral_source_split_4967;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p15, $mul.ref($i16, 5232)), $mul.ref(5224, 1));
    goto corral_source_split_4968;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_4970;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 888)), $mul.ref(784, 1));
    goto corral_source_split_4971;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_4972;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    $i23 := $and.i32($i22, 2);
    goto corral_source_split_4973;

  corral_source_split_4973:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_4974;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p20, $mul.ref(0, 888)), $mul.ref(784, 1));
    goto corral_source_split_4996;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_4997;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    $i42 := $and.i32($i41, 4);
    goto corral_source_split_4998;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 0);
    goto corral_source_split_4999;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p20, $mul.ref(0, 888)), $mul.ref(784, 1));
    goto corral_source_split_5021;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.0, $p59);
    goto corral_source_split_5022;

  corral_source_split_5022:
    assume {:verifier.code 0} true;
    $i61 := $and.i32($i60, 1);
    goto corral_source_split_5023;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    $i62 := $ne.i32($i61, 0);
    goto corral_source_split_5024;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p20, $mul.ref(0, 888)), $mul.ref(784, 1));
    goto corral_source_split_5046;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p78, 0);
    goto corral_source_split_5047;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i79 := $add.i32($i5, 1);
    call {:si_unique_call 1077} {:cexpr "i"} boogie_si_record_i32($i79);
    goto corral_source_split_4957;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    $p80 := $M.1;
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p80, $mul.ref(0, 144)), $mul.ref(104, 1));
    goto corral_source_split_4959;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.0, $p81);
    goto corral_source_split_4960;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    $i83 := $ult.i32($i79, $i82);
    goto corral_source_split_4961;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i83 == 1);
    goto corral_source_split_5049;

  corral_source_split_5049:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb28:
    assume $i83 == 1;
    assume {:verifier.code 0} true;
    $i5 := $i79;
    goto $bb28_dummy;

  $bb22:
    assume $i62 == 1;
    goto corral_source_split_5026;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.0, gigaset_debuglevel);
    goto corral_source_split_5027;

  corral_source_split_5027:
    assume {:verifier.code 0} true;
    $i64 := $and.i32($i63, 32768);
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    $i65 := $ne.i32($i64, 0);
    goto corral_source_split_5029;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    $i66 := $zext.i1.i32($i65);
    goto corral_source_split_5030;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    $i67 := $sext.i32.i64($i66);
    goto corral_source_split_5031;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1090} $i68 := ldv__builtin_expect($i67, 0);
    call {:si_unique_call 1091} {:cexpr "tmp___4"} boogie_si_record_i64($i68);
    goto corral_source_split_5032;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    $i69 := $ne.i64($i68, 0);
    goto corral_source_split_5033;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p20, $mul.ref(0, 888)), $mul.ref(0, 1));
    goto corral_source_split_5038;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_5039;

  corral_source_split_5039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1093} $i73 := __create_pipe($p72, 0);
    call {:si_unique_call 1094} {:cexpr "tmp___5"} boogie_si_record_i32($i73);
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p20, $mul.ref(0, 888)), $mul.ref(0, 1));
    goto corral_source_split_5041;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.0, $p74);
    goto corral_source_split_5042;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    $i76 := $or.i32($i73, $sub.i32(0, 2147483648));
    goto corral_source_split_5043;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1095} vslice_dummy_var_129 := usb_control_msg($p75, $i76, 41, 66, 0, 0, $0.ref, 0, 20);
    goto corral_source_split_5044;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb24:
    assume $i69 == 1;
    goto corral_source_split_5035;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1092} vslice_dummy_var_128 := printk.ref(.str.198);
    goto corral_source_split_5036;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb16:
    assume $i43 == 1;
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, gigaset_debuglevel);
    goto corral_source_split_5002;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    $i45 := $and.i32($i44, 32768);
    goto corral_source_split_5003;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    $i47 := $zext.i1.i32($i46);
    goto corral_source_split_5005;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    $i48 := $sext.i32.i64($i47);
    goto corral_source_split_5006;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1084} $i49 := ldv__builtin_expect($i48, 0);
    call {:si_unique_call 1085} {:cexpr "tmp___2"} boogie_si_record_i64($i49);
    goto corral_source_split_5007;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    $i50 := $ne.i64($i49, 0);
    goto corral_source_split_5008;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p20, $mul.ref(0, 888)), $mul.ref(0, 1));
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_5014;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1087} $i54 := __create_pipe($p53, 0);
    call {:si_unique_call 1088} {:cexpr "tmp___3"} boogie_si_record_i32($i54);
    goto corral_source_split_5015;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p20, $mul.ref(0, 888)), $mul.ref(0, 1));
    goto corral_source_split_5016;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_5017;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    $i57 := $or.i32($i54, $sub.i32(0, 2147483648));
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1089} vslice_dummy_var_127 := usb_control_msg($p56, $i57, 38, 66, 0, 0, $0.ref, 0, 20);
    goto corral_source_split_5019;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb18:
    assume $i50 == 1;
    goto corral_source_split_5010;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1086} vslice_dummy_var_126 := printk.ref(.str.202);
    goto corral_source_split_5011;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb10:
    assume $i24 == 1;
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, gigaset_debuglevel);
    goto corral_source_split_4977;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i25, 32768);
    goto corral_source_split_4978;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    $i28 := $zext.i1.i32($i27);
    goto corral_source_split_4980;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    $i29 := $sext.i32.i64($i28);
    goto corral_source_split_4981;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1078} $i30 := ldv__builtin_expect($i29, 0);
    call {:si_unique_call 1079} {:cexpr "tmp___0"} boogie_si_record_i64($i30);
    goto corral_source_split_4982;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, 0);
    goto corral_source_split_4983;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p20, $mul.ref(0, 888)), $mul.ref(0, 1));
    goto corral_source_split_4988;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_4989;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1081} $i35 := __create_pipe($p34, 0);
    call {:si_unique_call 1082} {:cexpr "tmp___1"} boogie_si_record_i32($i35);
    goto corral_source_split_4990;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p20, $mul.ref(0, 888)), $mul.ref(0, 1));
    goto corral_source_split_4991;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    $i38 := $or.i32($i35, $sub.i32(0, 2147483648));
    goto corral_source_split_4993;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1083} vslice_dummy_var_125 := usb_control_msg($p37, $i38, 36, 66, 0, 0, $0.ref, 0, 20);
    goto corral_source_split_4994;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb12:
    assume $i31 == 1;
    goto corral_source_split_4985;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1080} vslice_dummy_var_124 := printk.ref(.str.201);
    goto corral_source_split_4986;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb6:
    assume $i12 == 1;
    goto corral_source_split_4955;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb28_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4945;
}



const bas_gigaset_init: ref;

axiom bas_gigaset_init == $sub.ref(0, 581529);

procedure bas_gigaset_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.69, $M.78, $M.66, $M.0, $CurrAddr;



implementation bas_gigaset_init() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $i9: i32;
  var vslice_dummy_var_130: i32;
  var vslice_dummy_var_131: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5056;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1098} $p0 := gigaset_initdriver(16, 1, .str.172, .str.203, gigops, __this_module);
    goto corral_source_split_5057;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    $M.1 := $p0;
    goto corral_source_split_5058;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    $p1 := $M.1;
    goto corral_source_split_5059;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_5060;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_5061;

  corral_source_split_5061:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1099} $i4 := ldv_usb_register_driver_81(gigaset_usb_driver, __this_module, .str.172);
    call {:si_unique_call 1100} {:cexpr "result"} boogie_si_record_i32($i4);
    goto corral_source_split_5069;

  corral_source_split_5069:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i4, 0);
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1102} vslice_dummy_var_131 := printk.ref(.str.205);
    goto corral_source_split_5076;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_5078;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_5072;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, $i4);
    goto corral_source_split_5073;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1101} vslice_dummy_var_130 := printk.ref.i32(.str.204, $i6);
    goto corral_source_split_5074;

  corral_source_split_5074:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p10 := $M.1;
    goto corral_source_split_5065;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_5066;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $M.1 := $0.ref;
    goto corral_source_split_5084;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 1);
    goto $bb8;

  $bb9:
    assume $i12 == 1;
    goto corral_source_split_5080;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    $p13 := $M.1;
    goto corral_source_split_5081;

  corral_source_split_5081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1103} gigaset_freedriver($p13);
    goto corral_source_split_5082;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5063;

  corral_source_split_5063:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 582561);

procedure ldv_check_final_state();
  free requires assertsPassed;



implementation ldv_check_final_state()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5086;

  corral_source_split_5086:
    assume {:verifier.code 0} true;
    return;
}



const gigaset_initdriver: ref;

axiom gigaset_initdriver == $sub.ref(0, 583593);

procedure gigaset_initdriver($i0: i32, $i1: i32, $p2: ref, $p3: ref, $p4: ref, $p5: ref) returns ($r: ref);
  free requires assertsPassed;



implementation gigaset_initdriver($i0: i32, $i1: i32, $p2: ref, $p3: ref, $p4: ref, $p5: ref) returns ($r: ref)
{
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1104} {:cexpr "gigaset_initdriver:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 1105} {:cexpr "gigaset_initdriver:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_5088;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1106} $p6 := external_alloc();
    goto corral_source_split_5089;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_5090;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;
}



const ldv_usb_register_driver_81: ref;

axiom ldv_usb_register_driver_81 == $sub.ref(0, 584625);

procedure ldv_usb_register_driver_81($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.69, $M.78, $M.66, $M.0, $CurrAddr;



implementation ldv_usb_register_driver_81($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5092;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1107} $i3 := usb_register_driver($p0, $p1, $p2);
    call {:si_unique_call 1108} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_5093;

  corral_source_split_5093:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 1109} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_5094;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    $M.78 := 0;
    call {:si_unique_call 1110} {:cexpr "usb_counter"} boogie_si_record_i32(0);
    goto corral_source_split_5095;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1111} ldv_usb_driver_7();
    goto corral_source_split_5096;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const gigaset_freedriver: ref;

axiom gigaset_freedriver == $sub.ref(0, 585657);

procedure gigaset_freedriver($p0: ref);
  free requires assertsPassed;



implementation gigaset_freedriver($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5098;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    return;
}



const usb_register_driver: ref;

axiom usb_register_driver == $sub.ref(0, 586689);

procedure usb_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5100;

  corral_source_split_5100:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1112} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1113} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_5101;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const gigaset_blockdriver: ref;

axiom gigaset_blockdriver == $sub.ref(0, 587721);

procedure gigaset_blockdriver($p0: ref);
  free requires assertsPassed;



implementation gigaset_blockdriver($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5103;

  corral_source_split_5103:
    assume {:verifier.code 0} true;
    return;
}



const gigaset_shutdown: ref;

axiom gigaset_shutdown == $sub.ref(0, 588753);

procedure gigaset_shutdown($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation gigaset_shutdown($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5105;

  corral_source_split_5105:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1114} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1115} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5106;

  corral_source_split_5106:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const usb_control_msg: ref;

axiom usb_control_msg == $sub.ref(0, 589785);

procedure usb_control_msg($p0: ref, $i1: i32, $i2: i8, $i3: i8, $i4: i16, $i5: i16, $p6: ref, $i7: i16, $i8: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usb_control_msg($p0: ref, $i1: i32, $i2: i8, $i3: i8, $i4: i16, $i5: i16, $p6: ref, $i7: i16, $i8: i32) returns ($r: i32)
{
  var $i9: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1116} {:cexpr "usb_control_msg:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1117} {:cexpr "usb_control_msg:arg:arg2"} boogie_si_record_i8($i2);
    call {:si_unique_call 1118} {:cexpr "usb_control_msg:arg:arg3"} boogie_si_record_i8($i3);
    call {:si_unique_call 1119} {:cexpr "usb_control_msg:arg:arg4"} boogie_si_record_i16($i4);
    call {:si_unique_call 1120} {:cexpr "usb_control_msg:arg:arg5"} boogie_si_record_i16($i5);
    call {:si_unique_call 1121} {:cexpr "usb_control_msg:arg:arg7"} boogie_si_record_i16($i7);
    call {:si_unique_call 1122} {:cexpr "usb_control_msg:arg:arg8"} boogie_si_record_i32($i8);
    goto corral_source_split_5108;

  corral_source_split_5108:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1123} $i9 := __VERIFIER_nondet_int();
    call {:si_unique_call 1124} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i9);
    goto corral_source_split_5109;

  corral_source_split_5109:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const ldv_usb_deregister_82: ref;

axiom ldv_usb_deregister_82 == $sub.ref(0, 590817);

procedure ldv_usb_deregister_82($p0: ref);
  free requires assertsPassed;
  modifies $M.69;



implementation ldv_usb_deregister_82($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5111;

  corral_source_split_5111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1125} usb_deregister($p0);
    goto corral_source_split_5112;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    $M.69 := 0;
    call {:si_unique_call 1126} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    goto corral_source_split_5113;

  corral_source_split_5113:
    assume {:verifier.code 0} true;
    return;
}



const usb_deregister: ref;

axiom usb_deregister == $sub.ref(0, 591849);

procedure usb_deregister($p0: ref);
  free requires assertsPassed;



implementation usb_deregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5115;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 592881);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1127} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_5117;

  corral_source_split_5117:
    assume {:verifier.code 1} true;
    goto corral_source_split_5118;

  corral_source_split_5118:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_5119;

  corral_source_split_5119:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 593913);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 594945);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 595977);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5121;

  corral_source_split_5121:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_298, SeqInstr_299;

  SeqInstr_299:
    assume assertsPassed;
    goto SeqInstr_300;

  SeqInstr_300:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_5122;

  corral_source_split_5122:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_298:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 597009);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 598041);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 599073);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 600105);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 601137);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 602169);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 603201);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 604233);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 605265);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 606297);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5124;

  corral_source_split_5124:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1128} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 1129} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1130} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_5126;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_5130;

  corral_source_split_5130:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_5131;

  corral_source_split_5131:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1131} __VERIFIER_assume($i4);
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_5128;

  corral_source_split_5128:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 607329);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 608361);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 609393);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 610425);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __VERIFIER_nondet_long: ref;

axiom __VERIFIER_nondet_long == $sub.ref(0, 611457);

procedure __VERIFIER_nondet_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5134;

  corral_source_split_5134:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1132} $i0 := __SMACK_nondet_long();
    call {:si_unique_call 1133} {:cexpr "smack:ext:__SMACK_nondet_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1134} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_5135;

  corral_source_split_5135:
    assume {:verifier.code 0} true;
    $i1 := $sge.i64($i0, $sub.i64(0, 9223372036854775808));
    goto corral_source_split_5136;

  corral_source_split_5136:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_5140;

  corral_source_split_5140:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_5141;

  corral_source_split_5141:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1135} __VERIFIER_assume($i4);
    goto corral_source_split_5142;

  corral_source_split_5142:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_5138;

  corral_source_split_5138:
    assume {:verifier.code 1} true;
    $i3 := $sle.i64($i0, 9223372036854775807);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 612489);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 613521);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 614553);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 615585);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 616617);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 617649);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 618681);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 619713);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 620745);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 621777);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 622809);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 623841);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_bool: ref;

axiom __VERIFIER_nondet_bool == $sub.ref(0, 624873);

procedure __VERIFIER_nondet_bool() returns ($r: i1);
  free requires assertsPassed;



implementation __VERIFIER_nondet_bool() returns ($r: i1)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i6: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5144;

  corral_source_split_5144:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1136} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1137} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_5145;

  corral_source_split_5145:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_5146;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1138} {:cexpr "x"} boogie_si_record_i8($i2);
    goto corral_source_split_5147;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_5148;

  corral_source_split_5148:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_5149;

  corral_source_split_5149:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_5150;

  corral_source_split_5150:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume {:branchcond $i5} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_5157;

  corral_source_split_5157:
    assume {:verifier.code 1} true;
    $i7 := $trunc.i8.i1($i2);
    goto corral_source_split_5158;

  corral_source_split_5158:
    assume {:verifier.code 1} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_5159;

  corral_source_split_5159:
    assume {:verifier.code 1} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_5160;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_5152;

  corral_source_split_5152:
    assume {:verifier.code 1} true;
    $i10 := $zext.i1.i32($i6);
    goto corral_source_split_5153;

  corral_source_split_5153:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1139} __VERIFIER_assume($i10);
    goto corral_source_split_5154;

  corral_source_split_5154:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_5155;

  corral_source_split_5155:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 625905);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1140} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 1141} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_5163;

  corral_source_split_5163:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 626937);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 627969);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1142} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1143} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 629001);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 630033);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5165;

  corral_source_split_5165:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_5166;

  corral_source_split_5166:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 631065);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1144} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 1145} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_5168;

  corral_source_split_5168:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1146} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1147} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_5169;

  corral_source_split_5169:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_5170;

  corral_source_split_5170:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_5174;

  corral_source_split_5174:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_5175;

  corral_source_split_5175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1148} $p6 := malloc($i5);
    goto corral_source_split_5176;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_5177;

  corral_source_split_5177:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_7 := $M.0;
    call {:si_unique_call 1149} cmdloc_dummy_var_8 := $memset.i8(cmdloc_dummy_var_7, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_8;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5179;

  corral_source_split_5179:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5172;

  corral_source_split_5172:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 632097);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 633129);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.36, $M.37, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.46, $M.47, $M.49, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.56, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.23, $M.61, $M.57, $M.62, $M.58, $M.63, $M.59, $M.64, $M.60, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.72, $M.73, $M.74, $M.75, $M.76, $M.77, $M.78, $M.79, $M.80, $M.7, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.89, $M.90, $M.91, $M.92, $M.93, $M.26, $M.34, $M.110, $M.111, $M.4, $M.2, $M.1, $M.3, $M.112, $M.113, $M.114;



implementation __SMACK_static_init()
{

  $bb0:
    call {:si_unique_call 1150} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    $M.8 := 0;
    call {:si_unique_call 1151} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(0);
    $M.9 := $0.ref;
    $M.10 := 0;
    call {:si_unique_call 1152} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(0);
    $M.11 := $0.ref;
    $M.12 := 0;
    call {:si_unique_call 1153} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(0);
    $M.13 := $0.ref;
    $M.14 := 0;
    call {:si_unique_call 1154} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(0);
    $M.15 := $0.ref;
    $M.36 := 0;
    call {:si_unique_call 1155} {:cexpr "ldv_timer_2_0"} boogie_si_record_i32(0);
    $M.37 := $0.ref;
    $M.38 := 0;
    call {:si_unique_call 1156} {:cexpr "ldv_timer_2_1"} boogie_si_record_i32(0);
    $M.39 := $0.ref;
    $M.40 := 0;
    call {:si_unique_call 1157} {:cexpr "ldv_timer_2_2"} boogie_si_record_i32(0);
    $M.41 := $0.ref;
    $M.42 := 0;
    call {:si_unique_call 1158} {:cexpr "ldv_timer_2_3"} boogie_si_record_i32(0);
    $M.43 := $0.ref;
    $M.46 := $0.ref;
    $M.47 := $0.ref;
    $M.49 := 0;
    call {:si_unique_call 1159} {:cexpr "ldv_timer_5_0"} boogie_si_record_i32(0);
    $M.50 := $0.ref;
    $M.51 := 0;
    call {:si_unique_call 1160} {:cexpr "ldv_timer_5_1"} boogie_si_record_i32(0);
    $M.52 := $0.ref;
    $M.53 := 0;
    call {:si_unique_call 1161} {:cexpr "ldv_timer_5_2"} boogie_si_record_i32(0);
    $M.54 := $0.ref;
    $M.55 := 0;
    call {:si_unique_call 1162} {:cexpr "ldv_timer_5_3"} boogie_si_record_i32(0);
    $M.56 := $0.ref;
    $M.16 := 0;
    call {:si_unique_call 1163} {:cexpr "ldv_timer_3_0"} boogie_si_record_i32(0);
    $M.17 := $0.ref;
    $M.18 := 0;
    call {:si_unique_call 1164} {:cexpr "ldv_timer_3_1"} boogie_si_record_i32(0);
    $M.19 := $0.ref;
    $M.20 := 0;
    call {:si_unique_call 1165} {:cexpr "ldv_timer_3_2"} boogie_si_record_i32(0);
    $M.21 := $0.ref;
    $M.22 := 0;
    call {:si_unique_call 1166} {:cexpr "ldv_timer_3_3"} boogie_si_record_i32(0);
    $M.23 := $0.ref;
    $M.61 := $0.ref;
    $M.57 := 0;
    call {:si_unique_call 1167} {:cexpr "ldv_timer_4_0"} boogie_si_record_i32(0);
    $M.62 := $0.ref;
    $M.58 := 0;
    call {:si_unique_call 1168} {:cexpr "ldv_timer_4_1"} boogie_si_record_i32(0);
    $M.63 := $0.ref;
    $M.59 := 0;
    call {:si_unique_call 1169} {:cexpr "ldv_timer_4_2"} boogie_si_record_i32(0);
    $M.64 := $0.ref;
    $M.60 := 0;
    call {:si_unique_call 1170} {:cexpr "ldv_timer_4_3"} boogie_si_record_i32(0);
    $M.66 := $0.ref;
    $M.67 := 0;
    call {:si_unique_call 1171} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    $M.68 := 0;
    call {:si_unique_call 1172} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    $M.69 := 0;
    call {:si_unique_call 1173} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    $M.70 := 0;
    call {:si_unique_call 1174} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.71 := 0;
    call {:si_unique_call 1175} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.72 := 0;
    call {:si_unique_call 1176} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    $M.73 := 0;
    call {:si_unique_call 1177} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.74 := 0;
    call {:si_unique_call 1178} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.75 := 0;
    call {:si_unique_call 1179} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    $M.76 := 0;
    call {:si_unique_call 1180} {:cexpr "ldv_retval_2"} boogie_si_record_i32(0);
    $M.77 := 0;
    call {:si_unique_call 1181} {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
    $M.78 := 0;
    call {:si_unique_call 1182} {:cexpr "usb_counter"} boogie_si_record_i32(0);
    $M.79 := 0;
    call {:si_unique_call 1183} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.80 := 0;
    call {:si_unique_call 1184} {:cexpr "ldv_retval_3"} boogie_si_record_i32(0);
    $M.7 := 0;
    call {:si_unique_call 1185} {:cexpr "ldv_spin"} boogie_si_record_i32(0);
    $M.81 := $store.i16($M.81, __mod_usb__gigaset_table_device_table, 0);
    $M.82 := $store.i16($M.82, $add.ref($add.ref($add.ref(__mod_usb__gigaset_table_device_table, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(2, 1)), 0);
    $M.83 := $store.i16($M.83, $add.ref($add.ref($add.ref(__mod_usb__gigaset_table_device_table, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(4, 1)), 0);
    $M.84 := $store.i16($M.84, $add.ref($add.ref($add.ref(__mod_usb__gigaset_table_device_table, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(6, 1)), 0);
    $M.85 := $store.i16($M.85, $add.ref($add.ref($add.ref(__mod_usb__gigaset_table_device_table, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref(__mod_usb__gigaset_table_device_table, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(10, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref(__mod_usb__gigaset_table_device_table, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(11, 1)), 0);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref(__mod_usb__gigaset_table_device_table, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(12, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(__mod_usb__gigaset_table_device_table, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(13, 1)), 0);
    $M.90 := $store.i8($M.90, $add.ref($add.ref($add.ref(__mod_usb__gigaset_table_device_table, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(14, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(__mod_usb__gigaset_table_device_table, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(15, 1)), 0);
    $M.92 := $store.i8($M.92, $add.ref($add.ref($add.ref(__mod_usb__gigaset_table_device_table, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.93 := $store.i64($M.93, $add.ref($add.ref($add.ref(__mod_usb__gigaset_table_device_table, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.81 := $store.i16($M.81, $add.ref($add.ref($add.ref(__mod_usb__gigaset_table_device_table, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), 0);
    $M.82 := $store.i16($M.82, $add.ref($add.ref($add.ref(__mod_usb__gigaset_table_device_table, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(2, 1)), 0);
    $M.83 := $store.i16($M.83, $add.ref($add.ref($add.ref(__mod_usb__gigaset_table_device_table, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(4, 1)), 0);
    $M.84 := $store.i16($M.84, $add.ref($add.ref($add.ref(__mod_usb__gigaset_table_device_table, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(6, 1)), 0);
    $M.85 := $store.i16($M.85, $add.ref($add.ref($add.ref(__mod_usb__gigaset_table_device_table, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref(__mod_usb__gigaset_table_device_table, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(10, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref(__mod_usb__gigaset_table_device_table, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(11, 1)), 0);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref(__mod_usb__gigaset_table_device_table, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(12, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(__mod_usb__gigaset_table_device_table, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(13, 1)), 0);
    $M.90 := $store.i8($M.90, $add.ref($add.ref($add.ref(__mod_usb__gigaset_table_device_table, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(14, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(__mod_usb__gigaset_table_device_table, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(15, 1)), 0);
    $M.92 := $store.i8($M.92, $add.ref($add.ref($add.ref(__mod_usb__gigaset_table_device_table, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.93 := $store.i64($M.93, $add.ref($add.ref($add.ref(__mod_usb__gigaset_table_device_table, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.81 := $store.i16($M.81, $add.ref($add.ref($add.ref(__mod_usb__gigaset_table_device_table, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), 0);
    $M.82 := $store.i16($M.82, $add.ref($add.ref($add.ref(__mod_usb__gigaset_table_device_table, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(2, 1)), 0);
    $M.83 := $store.i16($M.83, $add.ref($add.ref($add.ref(__mod_usb__gigaset_table_device_table, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(4, 1)), 0);
    $M.84 := $store.i16($M.84, $add.ref($add.ref($add.ref(__mod_usb__gigaset_table_device_table, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(6, 1)), 0);
    $M.85 := $store.i16($M.85, $add.ref($add.ref($add.ref(__mod_usb__gigaset_table_device_table, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref(__mod_usb__gigaset_table_device_table, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(10, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref(__mod_usb__gigaset_table_device_table, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(11, 1)), 0);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref(__mod_usb__gigaset_table_device_table, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(12, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(__mod_usb__gigaset_table_device_table, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(13, 1)), 0);
    $M.90 := $store.i8($M.90, $add.ref($add.ref($add.ref(__mod_usb__gigaset_table_device_table, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(14, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(__mod_usb__gigaset_table_device_table, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(15, 1)), 0);
    $M.92 := $store.i8($M.92, $add.ref($add.ref($add.ref(__mod_usb__gigaset_table_device_table, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(16, 1)), 0);
    $M.93 := $store.i64($M.93, $add.ref($add.ref($add.ref(__mod_usb__gigaset_table_device_table, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(24, 1)), 0);
    $M.81 := $store.i16($M.81, $add.ref($add.ref($add.ref(__mod_usb__gigaset_table_device_table, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), 0);
    $M.82 := $store.i16($M.82, $add.ref($add.ref($add.ref(__mod_usb__gigaset_table_device_table, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(2, 1)), 0);
    $M.83 := $store.i16($M.83, $add.ref($add.ref($add.ref(__mod_usb__gigaset_table_device_table, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(4, 1)), 0);
    $M.84 := $store.i16($M.84, $add.ref($add.ref($add.ref(__mod_usb__gigaset_table_device_table, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(6, 1)), 0);
    $M.85 := $store.i16($M.85, $add.ref($add.ref($add.ref(__mod_usb__gigaset_table_device_table, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref(__mod_usb__gigaset_table_device_table, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(10, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref(__mod_usb__gigaset_table_device_table, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(11, 1)), 0);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref(__mod_usb__gigaset_table_device_table, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(12, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(__mod_usb__gigaset_table_device_table, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(13, 1)), 0);
    $M.90 := $store.i8($M.90, $add.ref($add.ref($add.ref(__mod_usb__gigaset_table_device_table, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(14, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(__mod_usb__gigaset_table_device_table, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(15, 1)), 0);
    $M.92 := $store.i8($M.92, $add.ref($add.ref($add.ref(__mod_usb__gigaset_table_device_table, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(16, 1)), 0);
    $M.93 := $store.i64($M.93, $add.ref($add.ref($add.ref(__mod_usb__gigaset_table_device_table, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(24, 1)), 0);
    $M.81 := $store.i16($M.81, $add.ref($add.ref($add.ref(__mod_usb__gigaset_table_device_table, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), 0);
    $M.82 := $store.i16($M.82, $add.ref($add.ref($add.ref(__mod_usb__gigaset_table_device_table, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(2, 1)), 0);
    $M.83 := $store.i16($M.83, $add.ref($add.ref($add.ref(__mod_usb__gigaset_table_device_table, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(4, 1)), 0);
    $M.84 := $store.i16($M.84, $add.ref($add.ref($add.ref(__mod_usb__gigaset_table_device_table, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(6, 1)), 0);
    $M.85 := $store.i16($M.85, $add.ref($add.ref($add.ref(__mod_usb__gigaset_table_device_table, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref(__mod_usb__gigaset_table_device_table, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(10, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref(__mod_usb__gigaset_table_device_table, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(11, 1)), 0);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref(__mod_usb__gigaset_table_device_table, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(12, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(__mod_usb__gigaset_table_device_table, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(13, 1)), 0);
    $M.90 := $store.i8($M.90, $add.ref($add.ref($add.ref(__mod_usb__gigaset_table_device_table, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(14, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(__mod_usb__gigaset_table_device_table, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(15, 1)), 0);
    $M.92 := $store.i8($M.92, $add.ref($add.ref($add.ref(__mod_usb__gigaset_table_device_table, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(16, 1)), 0);
    $M.93 := $store.i64($M.93, $add.ref($add.ref($add.ref(__mod_usb__gigaset_table_device_table, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(24, 1)), 0);
    $M.26 := $store.i8($M.26, bitcounts, 0);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(1, 1)), 1);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(2, 1)), 0);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(3, 1)), 2);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(4, 1)), 0);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(5, 1)), 1);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(6, 1)), 0);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(7, 1)), 3);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(8, 1)), 0);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(9, 1)), 1);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(10, 1)), 0);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(11, 1)), 2);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(12, 1)), 0);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(13, 1)), 1);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(14, 1)), 0);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(15, 1)), 4);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(16, 1)), 0);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(17, 1)), 1);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(18, 1)), 0);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(19, 1)), 2);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(20, 1)), 0);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(21, 1)), 1);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(22, 1)), 0);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(23, 1)), 3);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(24, 1)), 0);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(25, 1)), 1);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(26, 1)), 0);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(27, 1)), 2);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(28, 1)), 0);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(29, 1)), 1);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(30, 1)), 0);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(31, 1)), 5);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(32, 1)), 0);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(33, 1)), 1);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(34, 1)), 0);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(35, 1)), 2);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(36, 1)), 0);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(37, 1)), 1);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(38, 1)), 0);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(39, 1)), 3);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(40, 1)), 0);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(41, 1)), 1);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(42, 1)), 0);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(43, 1)), 2);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(44, 1)), 0);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(45, 1)), 1);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(46, 1)), 0);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(47, 1)), 4);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(48, 1)), 0);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(49, 1)), 1);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(50, 1)), 0);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(51, 1)), 2);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(52, 1)), 0);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(53, 1)), 1);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(54, 1)), 0);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(55, 1)), 3);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(56, 1)), 0);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(57, 1)), 1);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(58, 1)), 0);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(59, 1)), 2);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(60, 1)), 0);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(61, 1)), 1);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(62, 1)), $sub.i8(0, 128));
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(63, 1)), 6);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(64, 1)), 0);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(65, 1)), 1);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(66, 1)), 0);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(67, 1)), 2);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(68, 1)), 0);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(69, 1)), 1);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(70, 1)), 0);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(71, 1)), 3);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(72, 1)), 0);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(73, 1)), 1);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(74, 1)), 0);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(75, 1)), 2);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(76, 1)), 0);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(77, 1)), 1);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(78, 1)), 0);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(79, 1)), 4);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(80, 1)), 0);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(81, 1)), 1);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(82, 1)), 0);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(83, 1)), 2);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(84, 1)), 0);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(85, 1)), 1);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(86, 1)), 0);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(87, 1)), 3);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(88, 1)), 0);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(89, 1)), 1);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(90, 1)), 0);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(91, 1)), 2);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(92, 1)), 0);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(93, 1)), 1);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(94, 1)), 0);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(95, 1)), 5);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(96, 1)), 0);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(97, 1)), 1);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(98, 1)), 0);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(99, 1)), 2);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(100, 1)), 0);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(101, 1)), 1);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(102, 1)), 0);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(103, 1)), 3);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(104, 1)), 0);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(105, 1)), 1);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(106, 1)), 0);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(107, 1)), 2);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(108, 1)), 0);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(109, 1)), 1);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(110, 1)), 0);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(111, 1)), 4);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(112, 1)), 0);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(113, 1)), 1);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(114, 1)), 0);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(115, 1)), 2);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(116, 1)), 0);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(117, 1)), 1);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(118, 1)), 0);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(119, 1)), 3);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(120, 1)), 0);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(121, 1)), 1);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(122, 1)), 0);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(123, 1)), 2);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(124, 1)), $sub.i8(0, 128));
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(125, 1)), $sub.i8(0, 127));
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(126, 1)), $sub.i8(0, 128));
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(127, 1)), 7);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(128, 1)), 16);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(129, 1)), 17);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(130, 1)), 16);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(131, 1)), 18);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(132, 1)), 16);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(133, 1)), 17);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(134, 1)), 16);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(135, 1)), 19);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(136, 1)), 16);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(137, 1)), 17);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(138, 1)), 16);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(139, 1)), 18);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(140, 1)), 16);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(141, 1)), 17);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(142, 1)), 16);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(143, 1)), 20);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(144, 1)), 16);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(145, 1)), 17);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(146, 1)), 16);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(147, 1)), 18);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(148, 1)), 16);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(149, 1)), 17);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(150, 1)), 16);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(151, 1)), 19);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(152, 1)), 16);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(153, 1)), 17);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(154, 1)), 16);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(155, 1)), 18);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(156, 1)), 16);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(157, 1)), 17);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(158, 1)), 16);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(159, 1)), 21);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(160, 1)), 16);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(161, 1)), 17);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(162, 1)), 16);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(163, 1)), 18);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(164, 1)), 16);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(165, 1)), 17);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(166, 1)), 16);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(167, 1)), 19);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(168, 1)), 16);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(169, 1)), 17);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(170, 1)), 16);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(171, 1)), 18);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(172, 1)), 16);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(173, 1)), 17);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(174, 1)), 16);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(175, 1)), 20);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(176, 1)), 16);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(177, 1)), 17);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(178, 1)), 16);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(179, 1)), 18);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(180, 1)), 16);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(181, 1)), 17);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(182, 1)), 16);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(183, 1)), 19);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(184, 1)), 16);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(185, 1)), 17);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(186, 1)), 16);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(187, 1)), 18);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(188, 1)), 16);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(189, 1)), 17);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(190, 1)), $sub.i8(0, 112));
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(191, 1)), 22);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(192, 1)), 32);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(193, 1)), 33);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(194, 1)), 32);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(195, 1)), 34);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(196, 1)), 32);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(197, 1)), 33);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(198, 1)), 32);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(199, 1)), 35);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(200, 1)), 32);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(201, 1)), 33);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(202, 1)), 32);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(203, 1)), 34);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(204, 1)), 32);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(205, 1)), 33);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(206, 1)), 32);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(207, 1)), 36);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(208, 1)), 32);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(209, 1)), 33);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(210, 1)), 32);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(211, 1)), 34);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(212, 1)), 32);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(213, 1)), 33);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(214, 1)), 32);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(215, 1)), 35);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(216, 1)), 32);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(217, 1)), 33);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(218, 1)), 32);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(219, 1)), 34);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(220, 1)), 32);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(221, 1)), 33);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(222, 1)), 32);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(223, 1)), 37);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(224, 1)), 48);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(225, 1)), 49);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(226, 1)), 48);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(227, 1)), 50);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(228, 1)), 48);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(229, 1)), 49);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(230, 1)), 48);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(231, 1)), 51);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(232, 1)), 48);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(233, 1)), 49);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(234, 1)), 48);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(235, 1)), 50);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(236, 1)), 48);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(237, 1)), 49);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(238, 1)), 48);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(239, 1)), 52);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(240, 1)), 64);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(241, 1)), 65);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(242, 1)), 64);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(243, 1)), 66);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(244, 1)), 64);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(245, 1)), 65);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(246, 1)), 64);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(247, 1)), 67);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(248, 1)), 80);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(249, 1)), 81);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(250, 1)), 80);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(251, 1)), 82);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(252, 1)), 96);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(253, 1)), 97);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(254, 1)), 112);
    $M.26 := $store.i8($M.26, $add.ref($add.ref(bitcounts, $mul.ref(0, 256)), $mul.ref(255, 1)), 120);
    $M.34 := $store.i16($M.34, stufftab, 0);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1, 2)), 1);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(2, 2)), 2);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(3, 2)), 3);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(4, 2)), 4);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(5, 2)), 5);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(6, 2)), 6);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(7, 2)), 7);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(8, 2)), 8);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(9, 2)), 9);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(10, 2)), 10);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(11, 2)), 11);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(12, 2)), 12);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(13, 2)), 13);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(14, 2)), 14);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(15, 2)), 15);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(16, 2)), 16);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(17, 2)), 17);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(18, 2)), 18);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(19, 2)), 19);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(20, 2)), 20);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(21, 2)), 21);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(22, 2)), 22);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(23, 2)), 23);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(24, 2)), 24);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(25, 2)), 25);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(26, 2)), 26);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(27, 2)), 27);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(28, 2)), 28);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(29, 2)), 29);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(30, 2)), 30);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(31, 2)), 8223);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(32, 2)), 32);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(33, 2)), 33);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(34, 2)), 34);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(35, 2)), 35);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(36, 2)), 36);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(37, 2)), 37);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(38, 2)), 38);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(39, 2)), 39);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(40, 2)), 40);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(41, 2)), 41);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(42, 2)), 42);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(43, 2)), 43);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(44, 2)), 44);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(45, 2)), 45);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(46, 2)), 46);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(47, 2)), 47);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(48, 2)), 48);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(49, 2)), 49);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(50, 2)), 50);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(51, 2)), 51);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(52, 2)), 52);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(53, 2)), 53);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(54, 2)), 54);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(55, 2)), 55);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(56, 2)), 56);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(57, 2)), 57);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(58, 2)), 58);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(59, 2)), 59);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(60, 2)), 60);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(61, 2)), 61);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(62, 2)), 8254);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(63, 2)), 8287);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(64, 2)), 64);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(65, 2)), 65);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(66, 2)), 66);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(67, 2)), 67);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(68, 2)), 68);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(69, 2)), 69);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(70, 2)), 70);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(71, 2)), 71);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(72, 2)), 72);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(73, 2)), 73);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(74, 2)), 74);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(75, 2)), 75);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(76, 2)), 76);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(77, 2)), 77);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(78, 2)), 78);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(79, 2)), 79);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(80, 2)), 80);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(81, 2)), 81);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(82, 2)), 82);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(83, 2)), 83);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(84, 2)), 84);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(85, 2)), 85);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(86, 2)), 86);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(87, 2)), 87);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(88, 2)), 88);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(89, 2)), 89);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(90, 2)), 90);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(91, 2)), 91);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(92, 2)), 92);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(93, 2)), 93);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(94, 2)), 94);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(95, 2)), 8351);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(96, 2)), 96);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(97, 2)), 97);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(98, 2)), 98);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(99, 2)), 99);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(100, 2)), 100);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(101, 2)), 101);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(102, 2)), 102);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(103, 2)), 103);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(104, 2)), 104);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(105, 2)), 105);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(106, 2)), 106);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(107, 2)), 107);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(108, 2)), 108);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(109, 2)), 109);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(110, 2)), 110);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(111, 2)), 111);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(112, 2)), 112);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(113, 2)), 113);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(114, 2)), 114);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(115, 2)), 115);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(116, 2)), 116);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(117, 2)), 117);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(118, 2)), 118);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(119, 2)), 119);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(120, 2)), 120);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(121, 2)), 121);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(122, 2)), 122);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(123, 2)), 123);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(124, 2)), 8316);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(125, 2)), 8317);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(126, 2)), 8382);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(127, 2)), 8415);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(128, 2)), 1152);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(129, 2)), 1153);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(130, 2)), 1154);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(131, 2)), 1155);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(132, 2)), 1156);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(133, 2)), 1157);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(134, 2)), 1158);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(135, 2)), 1159);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(136, 2)), 1160);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(137, 2)), 1161);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(138, 2)), 1162);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(139, 2)), 1163);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(140, 2)), 1164);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(141, 2)), 1165);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(142, 2)), 1166);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(143, 2)), 1167);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(144, 2)), 1168);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(145, 2)), 1169);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(146, 2)), 1170);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(147, 2)), 1171);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(148, 2)), 1172);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(149, 2)), 1173);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(150, 2)), 1174);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(151, 2)), 1175);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(152, 2)), 1176);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(153, 2)), 1177);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(154, 2)), 1178);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(155, 2)), 1179);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(156, 2)), 1180);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(157, 2)), 1181);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(158, 2)), 1182);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(159, 2)), 9503);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(160, 2)), 1184);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(161, 2)), 1185);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(162, 2)), 1186);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(163, 2)), 1187);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(164, 2)), 1188);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(165, 2)), 1189);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(166, 2)), 1190);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(167, 2)), 1191);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(168, 2)), 1192);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(169, 2)), 1193);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(170, 2)), 1194);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(171, 2)), 1195);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(172, 2)), 1196);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(173, 2)), 1197);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(174, 2)), 1198);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(175, 2)), 1199);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(176, 2)), 1200);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(177, 2)), 1201);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(178, 2)), 1202);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(179, 2)), 1203);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(180, 2)), 1204);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(181, 2)), 1205);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(182, 2)), 1206);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(183, 2)), 1207);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(184, 2)), 1208);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(185, 2)), 1209);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(186, 2)), 1210);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(187, 2)), 1211);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(188, 2)), 1212);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(189, 2)), 1213);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(190, 2)), 9534);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(191, 2)), 9567);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(192, 2)), 2240);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(193, 2)), 2241);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(194, 2)), 2242);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(195, 2)), 2243);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(196, 2)), 2244);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(197, 2)), 2245);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(198, 2)), 2246);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(199, 2)), 2247);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(200, 2)), 2248);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(201, 2)), 2249);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(202, 2)), 2250);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(203, 2)), 2251);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(204, 2)), 2252);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(205, 2)), 2253);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(206, 2)), 2254);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(207, 2)), 2255);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(208, 2)), 2256);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(209, 2)), 2257);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(210, 2)), 2258);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(211, 2)), 2259);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(212, 2)), 2260);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(213, 2)), 2261);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(214, 2)), 2262);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(215, 2)), 2263);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(216, 2)), 2264);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(217, 2)), 2265);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(218, 2)), 2266);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(219, 2)), 2267);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(220, 2)), 2268);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(221, 2)), 2269);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(222, 2)), 2270);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(223, 2)), 10655);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(224, 2)), 3296);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(225, 2)), 3297);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(226, 2)), 3298);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(227, 2)), 3299);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(228, 2)), 3300);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(229, 2)), 3301);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(230, 2)), 3302);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(231, 2)), 3303);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(232, 2)), 3304);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(233, 2)), 3305);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(234, 2)), 3306);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(235, 2)), 3307);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(236, 2)), 3308);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(237, 2)), 3309);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(238, 2)), 3310);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(239, 2)), 3311);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(240, 2)), 4336);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(241, 2)), 4337);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(242, 2)), 4338);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(243, 2)), 4339);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(244, 2)), 4340);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(245, 2)), 4341);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(246, 2)), 4342);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(247, 2)), 4343);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(248, 2)), 8440);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(249, 2)), 8441);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(250, 2)), 8442);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(251, 2)), 8443);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(252, 2)), 9596);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(253, 2)), 9597);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(254, 2)), 10686);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(255, 2)), 11743);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(256, 2)), 0);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(257, 2)), 1);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(258, 2)), 2);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(259, 2)), 3);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(260, 2)), 4);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(261, 2)), 5);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(262, 2)), 6);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(263, 2)), 7);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(264, 2)), 8);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(265, 2)), 9);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(266, 2)), 10);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(267, 2)), 11);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(268, 2)), 12);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(269, 2)), 13);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(270, 2)), 14);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(271, 2)), 8207);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(272, 2)), 16);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(273, 2)), 17);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(274, 2)), 18);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(275, 2)), 19);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(276, 2)), 20);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(277, 2)), 21);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(278, 2)), 22);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(279, 2)), 23);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(280, 2)), 24);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(281, 2)), 25);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(282, 2)), 26);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(283, 2)), 27);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(284, 2)), 28);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(285, 2)), 29);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(286, 2)), 30);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(287, 2)), 8239);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(288, 2)), 32);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(289, 2)), 33);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(290, 2)), 34);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(291, 2)), 35);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(292, 2)), 36);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(293, 2)), 37);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(294, 2)), 38);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(295, 2)), 39);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(296, 2)), 40);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(297, 2)), 41);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(298, 2)), 42);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(299, 2)), 43);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(300, 2)), 44);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(301, 2)), 45);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(302, 2)), 46);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(303, 2)), 8271);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(304, 2)), 48);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(305, 2)), 49);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(306, 2)), 50);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(307, 2)), 51);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(308, 2)), 52);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(309, 2)), 53);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(310, 2)), 54);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(311, 2)), 55);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(312, 2)), 56);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(313, 2)), 57);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(314, 2)), 58);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(315, 2)), 59);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(316, 2)), 60);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(317, 2)), 61);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(318, 2)), 8254);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(319, 2)), 8303);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(320, 2)), 64);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(321, 2)), 65);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(322, 2)), 66);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(323, 2)), 67);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(324, 2)), 68);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(325, 2)), 69);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(326, 2)), 70);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(327, 2)), 71);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(328, 2)), 72);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(329, 2)), 73);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(330, 2)), 74);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(331, 2)), 75);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(332, 2)), 76);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(333, 2)), 77);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(334, 2)), 78);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(335, 2)), 8335);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(336, 2)), 80);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(337, 2)), 81);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(338, 2)), 82);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(339, 2)), 83);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(340, 2)), 84);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(341, 2)), 85);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(342, 2)), 86);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(343, 2)), 87);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(344, 2)), 88);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(345, 2)), 89);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(346, 2)), 90);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(347, 2)), 91);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(348, 2)), 92);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(349, 2)), 93);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(350, 2)), 94);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(351, 2)), 8367);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(352, 2)), 96);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(353, 2)), 97);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(354, 2)), 98);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(355, 2)), 99);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(356, 2)), 100);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(357, 2)), 101);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(358, 2)), 102);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(359, 2)), 103);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(360, 2)), 104);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(361, 2)), 105);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(362, 2)), 106);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(363, 2)), 107);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(364, 2)), 108);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(365, 2)), 109);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(366, 2)), 110);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(367, 2)), 8399);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(368, 2)), 112);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(369, 2)), 113);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(370, 2)), 114);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(371, 2)), 115);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(372, 2)), 116);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(373, 2)), 117);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(374, 2)), 118);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(375, 2)), 119);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(376, 2)), 120);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(377, 2)), 121);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(378, 2)), 122);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(379, 2)), 123);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(380, 2)), 8316);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(381, 2)), 8317);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(382, 2)), 8382);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(383, 2)), 8431);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(384, 2)), 1152);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(385, 2)), 1153);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(386, 2)), 1154);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(387, 2)), 1155);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(388, 2)), 1156);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(389, 2)), 1157);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(390, 2)), 1158);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(391, 2)), 1159);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(392, 2)), 1160);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(393, 2)), 1161);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(394, 2)), 1162);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(395, 2)), 1163);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(396, 2)), 1164);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(397, 2)), 1165);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(398, 2)), 1166);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(399, 2)), 9487);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(400, 2)), 1168);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(401, 2)), 1169);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(402, 2)), 1170);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(403, 2)), 1171);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(404, 2)), 1172);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(405, 2)), 1173);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(406, 2)), 1174);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(407, 2)), 1175);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(408, 2)), 1176);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(409, 2)), 1177);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(410, 2)), 1178);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(411, 2)), 1179);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(412, 2)), 1180);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(413, 2)), 1181);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(414, 2)), 1182);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(415, 2)), 9519);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(416, 2)), 1184);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(417, 2)), 1185);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(418, 2)), 1186);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(419, 2)), 1187);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(420, 2)), 1188);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(421, 2)), 1189);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(422, 2)), 1190);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(423, 2)), 1191);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(424, 2)), 1192);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(425, 2)), 1193);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(426, 2)), 1194);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(427, 2)), 1195);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(428, 2)), 1196);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(429, 2)), 1197);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(430, 2)), 1198);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(431, 2)), 9551);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(432, 2)), 1200);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(433, 2)), 1201);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(434, 2)), 1202);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(435, 2)), 1203);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(436, 2)), 1204);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(437, 2)), 1205);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(438, 2)), 1206);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(439, 2)), 1207);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(440, 2)), 1208);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(441, 2)), 1209);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(442, 2)), 1210);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(443, 2)), 1211);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(444, 2)), 1212);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(445, 2)), 1213);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(446, 2)), 9534);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(447, 2)), 9583);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(448, 2)), 2240);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(449, 2)), 2241);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(450, 2)), 2242);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(451, 2)), 2243);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(452, 2)), 2244);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(453, 2)), 2245);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(454, 2)), 2246);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(455, 2)), 2247);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(456, 2)), 2248);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(457, 2)), 2249);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(458, 2)), 2250);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(459, 2)), 2251);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(460, 2)), 2252);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(461, 2)), 2253);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(462, 2)), 2254);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(463, 2)), 10639);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(464, 2)), 2256);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(465, 2)), 2257);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(466, 2)), 2258);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(467, 2)), 2259);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(468, 2)), 2260);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(469, 2)), 2261);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(470, 2)), 2262);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(471, 2)), 2263);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(472, 2)), 2264);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(473, 2)), 2265);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(474, 2)), 2266);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(475, 2)), 2267);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(476, 2)), 2268);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(477, 2)), 2269);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(478, 2)), 2270);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(479, 2)), 10671);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(480, 2)), 3296);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(481, 2)), 3297);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(482, 2)), 3298);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(483, 2)), 3299);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(484, 2)), 3300);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(485, 2)), 3301);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(486, 2)), 3302);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(487, 2)), 3303);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(488, 2)), 3304);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(489, 2)), 3305);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(490, 2)), 3306);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(491, 2)), 3307);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(492, 2)), 3308);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(493, 2)), 3309);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(494, 2)), 3310);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(495, 2)), 11727);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(496, 2)), 4336);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(497, 2)), 4337);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(498, 2)), 4338);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(499, 2)), 4339);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(500, 2)), 4340);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(501, 2)), 4341);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(502, 2)), 4342);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(503, 2)), 4343);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(504, 2)), 8440);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(505, 2)), 8441);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(506, 2)), 8442);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(507, 2)), 8443);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(508, 2)), 9596);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(509, 2)), 9597);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(510, 2)), 10686);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(511, 2)), 12783);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(512, 2)), 0);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(513, 2)), 1);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(514, 2)), 2);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(515, 2)), 3);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(516, 2)), 4);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(517, 2)), 5);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(518, 2)), 6);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(519, 2)), 8199);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(520, 2)), 8);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(521, 2)), 9);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(522, 2)), 10);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(523, 2)), 11);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(524, 2)), 12);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(525, 2)), 13);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(526, 2)), 14);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(527, 2)), 8215);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(528, 2)), 16);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(529, 2)), 17);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(530, 2)), 18);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(531, 2)), 19);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(532, 2)), 20);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(533, 2)), 21);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(534, 2)), 22);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(535, 2)), 8231);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(536, 2)), 24);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(537, 2)), 25);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(538, 2)), 26);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(539, 2)), 27);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(540, 2)), 28);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(541, 2)), 29);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(542, 2)), 30);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(543, 2)), 8247);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(544, 2)), 32);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(545, 2)), 33);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(546, 2)), 34);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(547, 2)), 35);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(548, 2)), 36);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(549, 2)), 37);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(550, 2)), 38);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(551, 2)), 8263);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(552, 2)), 40);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(553, 2)), 41);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(554, 2)), 42);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(555, 2)), 43);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(556, 2)), 44);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(557, 2)), 45);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(558, 2)), 46);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(559, 2)), 8279);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(560, 2)), 48);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(561, 2)), 49);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(562, 2)), 50);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(563, 2)), 51);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(564, 2)), 52);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(565, 2)), 53);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(566, 2)), 54);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(567, 2)), 8295);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(568, 2)), 56);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(569, 2)), 57);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(570, 2)), 58);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(571, 2)), 59);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(572, 2)), 60);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(573, 2)), 61);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(574, 2)), 8254);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(575, 2)), 8311);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(576, 2)), 64);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(577, 2)), 65);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(578, 2)), 66);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(579, 2)), 67);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(580, 2)), 68);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(581, 2)), 69);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(582, 2)), 70);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(583, 2)), 8327);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(584, 2)), 72);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(585, 2)), 73);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(586, 2)), 74);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(587, 2)), 75);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(588, 2)), 76);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(589, 2)), 77);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(590, 2)), 78);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(591, 2)), 8343);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(592, 2)), 80);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(593, 2)), 81);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(594, 2)), 82);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(595, 2)), 83);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(596, 2)), 84);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(597, 2)), 85);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(598, 2)), 86);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(599, 2)), 8359);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(600, 2)), 88);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(601, 2)), 89);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(602, 2)), 90);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(603, 2)), 91);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(604, 2)), 92);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(605, 2)), 93);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(606, 2)), 94);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(607, 2)), 8375);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(608, 2)), 96);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(609, 2)), 97);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(610, 2)), 98);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(611, 2)), 99);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(612, 2)), 100);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(613, 2)), 101);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(614, 2)), 102);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(615, 2)), 8391);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(616, 2)), 104);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(617, 2)), 105);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(618, 2)), 106);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(619, 2)), 107);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(620, 2)), 108);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(621, 2)), 109);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(622, 2)), 110);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(623, 2)), 8407);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(624, 2)), 112);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(625, 2)), 113);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(626, 2)), 114);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(627, 2)), 115);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(628, 2)), 116);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(629, 2)), 117);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(630, 2)), 118);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(631, 2)), 8423);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(632, 2)), 120);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(633, 2)), 121);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(634, 2)), 122);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(635, 2)), 123);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(636, 2)), 8316);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(637, 2)), 8317);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(638, 2)), 8382);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(639, 2)), 8439);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(640, 2)), 1152);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(641, 2)), 1153);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(642, 2)), 1154);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(643, 2)), 1155);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(644, 2)), 1156);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(645, 2)), 1157);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(646, 2)), 1158);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(647, 2)), 9479);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(648, 2)), 1160);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(649, 2)), 1161);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(650, 2)), 1162);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(651, 2)), 1163);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(652, 2)), 1164);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(653, 2)), 1165);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(654, 2)), 1166);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(655, 2)), 9495);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(656, 2)), 1168);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(657, 2)), 1169);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(658, 2)), 1170);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(659, 2)), 1171);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(660, 2)), 1172);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(661, 2)), 1173);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(662, 2)), 1174);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(663, 2)), 9511);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(664, 2)), 1176);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(665, 2)), 1177);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(666, 2)), 1178);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(667, 2)), 1179);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(668, 2)), 1180);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(669, 2)), 1181);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(670, 2)), 1182);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(671, 2)), 9527);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(672, 2)), 1184);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(673, 2)), 1185);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(674, 2)), 1186);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(675, 2)), 1187);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(676, 2)), 1188);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(677, 2)), 1189);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(678, 2)), 1190);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(679, 2)), 9543);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(680, 2)), 1192);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(681, 2)), 1193);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(682, 2)), 1194);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(683, 2)), 1195);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(684, 2)), 1196);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(685, 2)), 1197);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(686, 2)), 1198);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(687, 2)), 9559);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(688, 2)), 1200);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(689, 2)), 1201);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(690, 2)), 1202);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(691, 2)), 1203);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(692, 2)), 1204);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(693, 2)), 1205);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(694, 2)), 1206);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(695, 2)), 9575);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(696, 2)), 1208);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(697, 2)), 1209);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(698, 2)), 1210);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(699, 2)), 1211);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(700, 2)), 1212);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(701, 2)), 1213);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(702, 2)), 9534);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(703, 2)), 9591);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(704, 2)), 2240);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(705, 2)), 2241);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(706, 2)), 2242);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(707, 2)), 2243);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(708, 2)), 2244);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(709, 2)), 2245);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(710, 2)), 2246);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(711, 2)), 10631);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(712, 2)), 2248);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(713, 2)), 2249);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(714, 2)), 2250);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(715, 2)), 2251);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(716, 2)), 2252);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(717, 2)), 2253);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(718, 2)), 2254);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(719, 2)), 10647);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(720, 2)), 2256);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(721, 2)), 2257);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(722, 2)), 2258);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(723, 2)), 2259);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(724, 2)), 2260);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(725, 2)), 2261);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(726, 2)), 2262);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(727, 2)), 10663);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(728, 2)), 2264);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(729, 2)), 2265);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(730, 2)), 2266);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(731, 2)), 2267);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(732, 2)), 2268);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(733, 2)), 2269);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(734, 2)), 2270);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(735, 2)), 10679);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(736, 2)), 3296);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(737, 2)), 3297);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(738, 2)), 3298);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(739, 2)), 3299);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(740, 2)), 3300);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(741, 2)), 3301);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(742, 2)), 3302);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(743, 2)), 11719);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(744, 2)), 3304);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(745, 2)), 3305);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(746, 2)), 3306);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(747, 2)), 3307);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(748, 2)), 3308);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(749, 2)), 3309);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(750, 2)), 3310);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(751, 2)), 11735);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(752, 2)), 4336);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(753, 2)), 4337);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(754, 2)), 4338);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(755, 2)), 4339);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(756, 2)), 4340);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(757, 2)), 4341);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(758, 2)), 4342);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(759, 2)), 12775);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(760, 2)), 8440);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(761, 2)), 8441);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(762, 2)), 8442);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(763, 2)), 8443);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(764, 2)), 9596);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(765, 2)), 9597);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(766, 2)), 10686);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(767, 2)), 16887);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(768, 2)), 0);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(769, 2)), 1);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(770, 2)), 2);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(771, 2)), 8195);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(772, 2)), 4);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(773, 2)), 5);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(774, 2)), 6);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(775, 2)), 8203);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(776, 2)), 8);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(777, 2)), 9);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(778, 2)), 10);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(779, 2)), 8211);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(780, 2)), 12);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(781, 2)), 13);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(782, 2)), 14);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(783, 2)), 8219);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(784, 2)), 16);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(785, 2)), 17);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(786, 2)), 18);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(787, 2)), 8227);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(788, 2)), 20);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(789, 2)), 21);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(790, 2)), 22);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(791, 2)), 8235);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(792, 2)), 24);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(793, 2)), 25);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(794, 2)), 26);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(795, 2)), 8243);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(796, 2)), 28);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(797, 2)), 29);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(798, 2)), 30);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(799, 2)), 8251);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(800, 2)), 32);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(801, 2)), 33);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(802, 2)), 34);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(803, 2)), 8259);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(804, 2)), 36);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(805, 2)), 37);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(806, 2)), 38);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(807, 2)), 8267);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(808, 2)), 40);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(809, 2)), 41);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(810, 2)), 42);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(811, 2)), 8275);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(812, 2)), 44);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(813, 2)), 45);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(814, 2)), 46);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(815, 2)), 8283);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(816, 2)), 48);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(817, 2)), 49);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(818, 2)), 50);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(819, 2)), 8291);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(820, 2)), 52);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(821, 2)), 53);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(822, 2)), 54);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(823, 2)), 8299);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(824, 2)), 56);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(825, 2)), 57);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(826, 2)), 58);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(827, 2)), 8307);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(828, 2)), 60);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(829, 2)), 61);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(830, 2)), 8254);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(831, 2)), 8315);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(832, 2)), 64);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(833, 2)), 65);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(834, 2)), 66);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(835, 2)), 8323);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(836, 2)), 68);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(837, 2)), 69);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(838, 2)), 70);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(839, 2)), 8331);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(840, 2)), 72);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(841, 2)), 73);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(842, 2)), 74);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(843, 2)), 8339);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(844, 2)), 76);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(845, 2)), 77);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(846, 2)), 78);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(847, 2)), 8347);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(848, 2)), 80);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(849, 2)), 81);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(850, 2)), 82);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(851, 2)), 8355);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(852, 2)), 84);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(853, 2)), 85);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(854, 2)), 86);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(855, 2)), 8363);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(856, 2)), 88);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(857, 2)), 89);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(858, 2)), 90);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(859, 2)), 8371);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(860, 2)), 92);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(861, 2)), 93);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(862, 2)), 94);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(863, 2)), 8379);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(864, 2)), 96);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(865, 2)), 97);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(866, 2)), 98);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(867, 2)), 8387);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(868, 2)), 100);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(869, 2)), 101);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(870, 2)), 102);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(871, 2)), 8395);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(872, 2)), 104);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(873, 2)), 105);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(874, 2)), 106);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(875, 2)), 8403);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(876, 2)), 108);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(877, 2)), 109);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(878, 2)), 110);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(879, 2)), 8411);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(880, 2)), 112);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(881, 2)), 113);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(882, 2)), 114);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(883, 2)), 8419);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(884, 2)), 116);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(885, 2)), 117);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(886, 2)), 118);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(887, 2)), 8427);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(888, 2)), 120);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(889, 2)), 121);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(890, 2)), 122);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(891, 2)), 8435);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(892, 2)), 8316);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(893, 2)), 8317);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(894, 2)), 8382);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(895, 2)), 16635);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(896, 2)), 1152);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(897, 2)), 1153);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(898, 2)), 1154);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(899, 2)), 9475);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(900, 2)), 1156);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(901, 2)), 1157);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(902, 2)), 1158);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(903, 2)), 9483);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(904, 2)), 1160);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(905, 2)), 1161);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(906, 2)), 1162);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(907, 2)), 9491);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(908, 2)), 1164);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(909, 2)), 1165);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(910, 2)), 1166);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(911, 2)), 9499);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(912, 2)), 1168);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(913, 2)), 1169);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(914, 2)), 1170);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(915, 2)), 9507);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(916, 2)), 1172);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(917, 2)), 1173);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(918, 2)), 1174);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(919, 2)), 9515);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(920, 2)), 1176);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(921, 2)), 1177);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(922, 2)), 1178);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(923, 2)), 9523);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(924, 2)), 1180);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(925, 2)), 1181);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(926, 2)), 1182);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(927, 2)), 9531);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(928, 2)), 1184);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(929, 2)), 1185);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(930, 2)), 1186);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(931, 2)), 9539);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(932, 2)), 1188);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(933, 2)), 1189);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(934, 2)), 1190);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(935, 2)), 9547);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(936, 2)), 1192);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(937, 2)), 1193);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(938, 2)), 1194);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(939, 2)), 9555);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(940, 2)), 1196);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(941, 2)), 1197);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(942, 2)), 1198);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(943, 2)), 9563);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(944, 2)), 1200);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(945, 2)), 1201);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(946, 2)), 1202);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(947, 2)), 9571);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(948, 2)), 1204);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(949, 2)), 1205);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(950, 2)), 1206);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(951, 2)), 9579);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(952, 2)), 1208);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(953, 2)), 1209);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(954, 2)), 1210);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(955, 2)), 9587);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(956, 2)), 1212);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(957, 2)), 1213);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(958, 2)), 9534);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(959, 2)), 9595);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(960, 2)), 2240);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(961, 2)), 2241);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(962, 2)), 2242);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(963, 2)), 10627);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(964, 2)), 2244);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(965, 2)), 2245);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(966, 2)), 2246);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(967, 2)), 10635);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(968, 2)), 2248);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(969, 2)), 2249);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(970, 2)), 2250);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(971, 2)), 10643);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(972, 2)), 2252);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(973, 2)), 2253);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(974, 2)), 2254);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(975, 2)), 10651);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(976, 2)), 2256);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(977, 2)), 2257);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(978, 2)), 2258);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(979, 2)), 10659);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(980, 2)), 2260);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(981, 2)), 2261);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(982, 2)), 2262);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(983, 2)), 10667);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(984, 2)), 2264);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(985, 2)), 2265);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(986, 2)), 2266);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(987, 2)), 10675);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(988, 2)), 2268);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(989, 2)), 2269);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(990, 2)), 2270);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(991, 2)), 10683);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(992, 2)), 3296);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(993, 2)), 3297);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(994, 2)), 3298);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(995, 2)), 11715);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(996, 2)), 3300);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(997, 2)), 3301);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(998, 2)), 3302);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(999, 2)), 11723);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1000, 2)), 3304);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1001, 2)), 3305);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1002, 2)), 3306);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1003, 2)), 11731);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1004, 2)), 3308);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1005, 2)), 3309);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1006, 2)), 3310);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1007, 2)), 11739);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1008, 2)), 4336);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1009, 2)), 4337);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1010, 2)), 4338);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1011, 2)), 12771);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1012, 2)), 4340);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1013, 2)), 4341);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1014, 2)), 4342);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1015, 2)), 12779);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1016, 2)), 8440);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1017, 2)), 8441);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1018, 2)), 8442);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1019, 2)), 16883);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1020, 2)), 9596);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1021, 2)), 9597);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1022, 2)), 10686);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1023, 2)), 18171);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1024, 2)), 0);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1025, 2)), 8193);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1026, 2)), 2);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1027, 2)), 8197);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1028, 2)), 4);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1029, 2)), 8201);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1030, 2)), 6);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1031, 2)), 8205);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1032, 2)), 8);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1033, 2)), 8209);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1034, 2)), 10);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1035, 2)), 8213);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1036, 2)), 12);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1037, 2)), 8217);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1038, 2)), 14);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1039, 2)), 8221);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1040, 2)), 16);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1041, 2)), 8225);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1042, 2)), 18);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1043, 2)), 8229);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1044, 2)), 20);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1045, 2)), 8233);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1046, 2)), 22);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1047, 2)), 8237);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1048, 2)), 24);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1049, 2)), 8241);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1050, 2)), 26);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1051, 2)), 8245);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1052, 2)), 28);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1053, 2)), 8249);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1054, 2)), 30);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1055, 2)), 8253);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1056, 2)), 32);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1057, 2)), 8257);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1058, 2)), 34);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1059, 2)), 8261);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1060, 2)), 36);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1061, 2)), 8265);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1062, 2)), 38);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1063, 2)), 8269);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1064, 2)), 40);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1065, 2)), 8273);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1066, 2)), 42);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1067, 2)), 8277);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1068, 2)), 44);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1069, 2)), 8281);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1070, 2)), 46);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1071, 2)), 8285);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1072, 2)), 48);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1073, 2)), 8289);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1074, 2)), 50);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1075, 2)), 8293);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1076, 2)), 52);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1077, 2)), 8297);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1078, 2)), 54);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1079, 2)), 8301);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1080, 2)), 56);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1081, 2)), 8305);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1082, 2)), 58);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1083, 2)), 8309);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1084, 2)), 60);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1085, 2)), 8313);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1086, 2)), 8254);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1087, 2)), 16509);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1088, 2)), 64);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1089, 2)), 8321);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1090, 2)), 66);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1091, 2)), 8325);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1092, 2)), 68);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1093, 2)), 8329);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1094, 2)), 70);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1095, 2)), 8333);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1096, 2)), 72);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1097, 2)), 8337);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1098, 2)), 74);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1099, 2)), 8341);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1100, 2)), 76);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1101, 2)), 8345);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1102, 2)), 78);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1103, 2)), 8349);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1104, 2)), 80);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1105, 2)), 8353);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1106, 2)), 82);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1107, 2)), 8357);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1108, 2)), 84);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1109, 2)), 8361);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1110, 2)), 86);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1111, 2)), 8365);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1112, 2)), 88);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1113, 2)), 8369);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1114, 2)), 90);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1115, 2)), 8373);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1116, 2)), 92);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1117, 2)), 8377);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1118, 2)), 94);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1119, 2)), 8381);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1120, 2)), 96);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1121, 2)), 8385);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1122, 2)), 98);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1123, 2)), 8389);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1124, 2)), 100);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1125, 2)), 8393);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1126, 2)), 102);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1127, 2)), 8397);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1128, 2)), 104);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1129, 2)), 8401);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1130, 2)), 106);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1131, 2)), 8405);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1132, 2)), 108);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1133, 2)), 8409);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1134, 2)), 110);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1135, 2)), 8413);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1136, 2)), 112);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1137, 2)), 8417);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1138, 2)), 114);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1139, 2)), 8421);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1140, 2)), 116);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1141, 2)), 8425);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1142, 2)), 118);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1143, 2)), 8429);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1144, 2)), 120);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1145, 2)), 8433);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1146, 2)), 122);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1147, 2)), 8437);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1148, 2)), 8316);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1149, 2)), 16633);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1150, 2)), 8382);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1151, 2)), 16765);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1152, 2)), 1152);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1153, 2)), 9473);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1154, 2)), 1154);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1155, 2)), 9477);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1156, 2)), 1156);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1157, 2)), 9481);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1158, 2)), 1158);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1159, 2)), 9485);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1160, 2)), 1160);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1161, 2)), 9489);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1162, 2)), 1162);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1163, 2)), 9493);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1164, 2)), 1164);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1165, 2)), 9497);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1166, 2)), 1166);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1167, 2)), 9501);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1168, 2)), 1168);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1169, 2)), 9505);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1170, 2)), 1170);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1171, 2)), 9509);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1172, 2)), 1172);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1173, 2)), 9513);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1174, 2)), 1174);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1175, 2)), 9517);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1176, 2)), 1176);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1177, 2)), 9521);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1178, 2)), 1178);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1179, 2)), 9525);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1180, 2)), 1180);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1181, 2)), 9529);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1182, 2)), 1182);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1183, 2)), 9533);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1184, 2)), 1184);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1185, 2)), 9537);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1186, 2)), 1186);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1187, 2)), 9541);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1188, 2)), 1188);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1189, 2)), 9545);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1190, 2)), 1190);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1191, 2)), 9549);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1192, 2)), 1192);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1193, 2)), 9553);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1194, 2)), 1194);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1195, 2)), 9557);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1196, 2)), 1196);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1197, 2)), 9561);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1198, 2)), 1198);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1199, 2)), 9565);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1200, 2)), 1200);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1201, 2)), 9569);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1202, 2)), 1202);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1203, 2)), 9573);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1204, 2)), 1204);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1205, 2)), 9577);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1206, 2)), 1206);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1207, 2)), 9581);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1208, 2)), 1208);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1209, 2)), 9585);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1210, 2)), 1210);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1211, 2)), 9589);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1212, 2)), 1212);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1213, 2)), 9593);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1214, 2)), 9534);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1215, 2)), 18045);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1216, 2)), 2240);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1217, 2)), 10625);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1218, 2)), 2242);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1219, 2)), 10629);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1220, 2)), 2244);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1221, 2)), 10633);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1222, 2)), 2246);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1223, 2)), 10637);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1224, 2)), 2248);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1225, 2)), 10641);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1226, 2)), 2250);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1227, 2)), 10645);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1228, 2)), 2252);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1229, 2)), 10649);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1230, 2)), 2254);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1231, 2)), 10653);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1232, 2)), 2256);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1233, 2)), 10657);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1234, 2)), 2258);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1235, 2)), 10661);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1236, 2)), 2260);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1237, 2)), 10665);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1238, 2)), 2262);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1239, 2)), 10669);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1240, 2)), 2264);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1241, 2)), 10673);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1242, 2)), 2266);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1243, 2)), 10677);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1244, 2)), 2268);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1245, 2)), 10681);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1246, 2)), 2270);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1247, 2)), 10685);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1248, 2)), 3296);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1249, 2)), 11713);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1250, 2)), 3298);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1251, 2)), 11717);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1252, 2)), 3300);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1253, 2)), 11721);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1254, 2)), 3302);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1255, 2)), 11725);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1256, 2)), 3304);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1257, 2)), 11729);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1258, 2)), 3306);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1259, 2)), 11733);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1260, 2)), 3308);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1261, 2)), 11737);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1262, 2)), 3310);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1263, 2)), 11741);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1264, 2)), 4336);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1265, 2)), 12769);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1266, 2)), 4338);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1267, 2)), 12773);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1268, 2)), 4340);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1269, 2)), 12777);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1270, 2)), 4342);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1271, 2)), 12781);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1272, 2)), 8440);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1273, 2)), 16881);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1274, 2)), 8442);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1275, 2)), 16885);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1276, 2)), 9596);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1277, 2)), 18169);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1278, 2)), 10686);
    $M.34 := $store.i16($M.34, $add.ref($add.ref(stufftab, $mul.ref(0, 2560)), $mul.ref(1279, 2)), 19325);
    $M.110 := $store.i16($M.110, gigaset_table, 3);
    $M.110 := $store.i16($M.110, $add.ref($add.ref($add.ref(gigaset_table, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(2, 1)), 1665);
    $M.110 := $store.i16($M.110, $add.ref($add.ref($add.ref(gigaset_table, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(4, 1)), 1);
    $M.110 := $store.i16($M.110, $add.ref($add.ref($add.ref(gigaset_table, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(6, 1)), 0);
    $M.110 := $store.i16($M.110, $add.ref($add.ref($add.ref(gigaset_table, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(8, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(gigaset_table, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(10, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(gigaset_table, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(11, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(gigaset_table, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(12, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(gigaset_table, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(13, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(gigaset_table, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(14, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(gigaset_table, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(15, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(gigaset_table, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.110 := $store.i64($M.110, $add.ref($add.ref($add.ref(gigaset_table, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.110 := $store.i16($M.110, $add.ref($add.ref($add.ref(gigaset_table, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), 3);
    $M.110 := $store.i16($M.110, $add.ref($add.ref($add.ref(gigaset_table, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(2, 1)), 1665);
    $M.110 := $store.i16($M.110, $add.ref($add.ref($add.ref(gigaset_table, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(4, 1)), 2);
    $M.110 := $store.i16($M.110, $add.ref($add.ref($add.ref(gigaset_table, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(6, 1)), 0);
    $M.110 := $store.i16($M.110, $add.ref($add.ref($add.ref(gigaset_table, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(8, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(gigaset_table, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(10, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(gigaset_table, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(11, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(gigaset_table, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(12, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(gigaset_table, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(13, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(gigaset_table, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(14, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(gigaset_table, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(15, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(gigaset_table, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.110 := $store.i64($M.110, $add.ref($add.ref($add.ref(gigaset_table, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.110 := $store.i16($M.110, $add.ref($add.ref($add.ref(gigaset_table, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), 3);
    $M.110 := $store.i16($M.110, $add.ref($add.ref($add.ref(gigaset_table, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(2, 1)), 1665);
    $M.110 := $store.i16($M.110, $add.ref($add.ref($add.ref(gigaset_table, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(4, 1)), 33);
    $M.110 := $store.i16($M.110, $add.ref($add.ref($add.ref(gigaset_table, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(6, 1)), 0);
    $M.110 := $store.i16($M.110, $add.ref($add.ref($add.ref(gigaset_table, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(8, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(gigaset_table, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(10, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(gigaset_table, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(11, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(gigaset_table, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(12, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(gigaset_table, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(13, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(gigaset_table, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(14, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(gigaset_table, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(15, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(gigaset_table, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(16, 1)), 0);
    $M.110 := $store.i64($M.110, $add.ref($add.ref($add.ref(gigaset_table, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(24, 1)), 0);
    $M.110 := $store.i16($M.110, $add.ref($add.ref($add.ref(gigaset_table, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), 3);
    $M.110 := $store.i16($M.110, $add.ref($add.ref($add.ref(gigaset_table, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(2, 1)), 1665);
    $M.110 := $store.i16($M.110, $add.ref($add.ref($add.ref(gigaset_table, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(4, 1)), 34);
    $M.110 := $store.i16($M.110, $add.ref($add.ref($add.ref(gigaset_table, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(6, 1)), 0);
    $M.110 := $store.i16($M.110, $add.ref($add.ref($add.ref(gigaset_table, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(8, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(gigaset_table, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(10, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(gigaset_table, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(11, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(gigaset_table, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(12, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(gigaset_table, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(13, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(gigaset_table, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(14, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(gigaset_table, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(15, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(gigaset_table, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(16, 1)), 0);
    $M.110 := $store.i64($M.110, $add.ref($add.ref($add.ref(gigaset_table, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(24, 1)), 0);
    $M.110 := $store.i16($M.110, $add.ref($add.ref($add.ref(gigaset_table, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), 0);
    $M.110 := $store.i16($M.110, $add.ref($add.ref($add.ref(gigaset_table, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(2, 1)), 0);
    $M.110 := $store.i16($M.110, $add.ref($add.ref($add.ref(gigaset_table, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(4, 1)), 0);
    $M.110 := $store.i16($M.110, $add.ref($add.ref($add.ref(gigaset_table, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(6, 1)), 0);
    $M.110 := $store.i16($M.110, $add.ref($add.ref($add.ref(gigaset_table, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(8, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(gigaset_table, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(10, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(gigaset_table, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(11, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(gigaset_table, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(12, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(gigaset_table, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(13, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(gigaset_table, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(14, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(gigaset_table, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(15, 1)), 0);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(gigaset_table, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(16, 1)), 0);
    $M.110 := $store.i64($M.110, $add.ref($add.ref($add.ref(gigaset_table, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(24, 1)), 0);
    $M.111 := $store.ref($M.111, gigaset_usb_driver, .str.172);
    $M.111 := $store.ref($M.111, $add.ref($add.ref(gigaset_usb_driver, $mul.ref(0, 304)), $mul.ref(8, 1)), gigaset_probe);
    $M.111 := $store.ref($M.111, $add.ref($add.ref(gigaset_usb_driver, $mul.ref(0, 304)), $mul.ref(16, 1)), gigaset_disconnect);
    $M.111 := $store.ref($M.111, $add.ref($add.ref(gigaset_usb_driver, $mul.ref(0, 304)), $mul.ref(24, 1)), $0.ref);
    $M.111 := $store.ref($M.111, $add.ref($add.ref(gigaset_usb_driver, $mul.ref(0, 304)), $mul.ref(32, 1)), gigaset_suspend);
    $M.111 := $store.ref($M.111, $add.ref($add.ref(gigaset_usb_driver, $mul.ref(0, 304)), $mul.ref(40, 1)), gigaset_resume);
    $M.111 := $store.ref($M.111, $add.ref($add.ref(gigaset_usb_driver, $mul.ref(0, 304)), $mul.ref(48, 1)), gigaset_post_reset);
    $M.111 := $store.ref($M.111, $add.ref($add.ref(gigaset_usb_driver, $mul.ref(0, 304)), $mul.ref(56, 1)), gigaset_pre_reset);
    $M.111 := $store.ref($M.111, $add.ref($add.ref(gigaset_usb_driver, $mul.ref(0, 304)), $mul.ref(64, 1)), gigaset_post_reset);
    $M.111 := $store.ref($M.111, $add.ref($add.ref(gigaset_usb_driver, $mul.ref(0, 304)), $mul.ref(72, 1)), gigaset_table);
    $M.111 := $store.i32($M.111, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gigaset_usb_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.111 := $store.i32($M.111, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gigaset_usb_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.111 := $store.i32($M.111, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gigaset_usb_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.111 := $store.ref($M.111, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gigaset_usb_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.111 := $store.ref($M.111, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gigaset_usb_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.111 := $store.ref($M.111, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gigaset_usb_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.111 := $store.ref($M.111, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gigaset_usb_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.111 := $store.ref($M.111, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gigaset_usb_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.111 := $store.i32($M.111, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gigaset_usb_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.111 := $store.i64($M.111, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gigaset_usb_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.111 := $store.ref($M.111, $add.ref($add.ref($add.ref($add.ref(gigaset_usb_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.111 := $store.ref($M.111, $add.ref($add.ref($add.ref($add.ref(gigaset_usb_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.111 := $store.ref($M.111, $add.ref($add.ref($add.ref($add.ref(gigaset_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.111 := $store.ref($M.111, $add.ref($add.ref($add.ref($add.ref(gigaset_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.111 := $store.ref($M.111, $add.ref($add.ref($add.ref($add.ref(gigaset_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.111 := $store.ref($M.111, $add.ref($add.ref($add.ref($add.ref(gigaset_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $0.ref);
    $M.111 := $store.i8($M.111, $add.ref($add.ref($add.ref($add.ref(gigaset_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), 0);
    $M.111 := $store.i32($M.111, $add.ref($add.ref($add.ref($add.ref(gigaset_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(36, 1)), 0);
    $M.111 := $store.ref($M.111, $add.ref($add.ref($add.ref($add.ref(gigaset_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(40, 1)), $0.ref);
    $M.111 := $store.ref($M.111, $add.ref($add.ref($add.ref($add.ref(gigaset_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(48, 1)), $0.ref);
    $M.111 := $store.ref($M.111, $add.ref($add.ref($add.ref($add.ref(gigaset_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(56, 1)), $0.ref);
    $M.111 := $store.ref($M.111, $add.ref($add.ref($add.ref($add.ref(gigaset_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(64, 1)), $0.ref);
    $M.111 := $store.ref($M.111, $add.ref($add.ref($add.ref($add.ref(gigaset_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(72, 1)), $0.ref);
    $M.111 := $store.ref($M.111, $add.ref($add.ref($add.ref($add.ref(gigaset_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(80, 1)), $0.ref);
    $M.111 := $store.ref($M.111, $add.ref($add.ref($add.ref($add.ref(gigaset_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(88, 1)), $0.ref);
    $M.111 := $store.ref($M.111, $add.ref($add.ref($add.ref($add.ref(gigaset_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(96, 1)), $0.ref);
    $M.111 := $store.ref($M.111, $add.ref($add.ref($add.ref($add.ref(gigaset_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(104, 1)), $0.ref);
    $M.111 := $store.ref($M.111, $add.ref($add.ref($add.ref($add.ref(gigaset_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(112, 1)), $0.ref);
    $M.111 := $store.i32($M.111, $add.ref($add.ref($add.ref(gigaset_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(120, 1)), 0);
    $M.111 := $store.i8($M.111, $add.ref($add.ref(gigaset_usb_driver, $mul.ref(0, 304)), $mul.ref(296, 1)), 4);
    $M.4 := 1;
    call {:si_unique_call 1186} {:cexpr "startmode"} boogie_si_record_i32(1);
    $M.2 := 1;
    call {:si_unique_call 1187} {:cexpr "cidmode"} boogie_si_record_i32(1);
    $M.1 := $0.ref;
    $M.3 := $store.i8($M.3, .str.16, 115);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.16, $mul.ref(0, 8)), $mul.ref(1, 1)), 117);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.16, $mul.ref(0, 8)), $mul.ref(2, 1)), 99);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.16, $mul.ref(0, 8)), $mul.ref(3, 1)), 99);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.16, $mul.ref(0, 8)), $mul.ref(4, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.16, $mul.ref(0, 8)), $mul.ref(5, 1)), 115);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.16, $mul.ref(0, 8)), $mul.ref(6, 1)), 115);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.16, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.3 := $store.i8($M.3, .str.17, 111);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.17, $mul.ref(0, 14)), $mul.ref(1, 1)), 117);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.17, $mul.ref(0, 14)), $mul.ref(2, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.17, $mul.ref(0, 14)), $mul.ref(3, 1)), 32);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.17, $mul.ref(0, 14)), $mul.ref(4, 1)), 111);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.17, $mul.ref(0, 14)), $mul.ref(5, 1)), 102);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.17, $mul.ref(0, 14)), $mul.ref(6, 1)), 32);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.17, $mul.ref(0, 14)), $mul.ref(7, 1)), 109);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.17, $mul.ref(0, 14)), $mul.ref(8, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.17, $mul.ref(0, 14)), $mul.ref(9, 1)), 109);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.17, $mul.ref(0, 14)), $mul.ref(10, 1)), 111);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.17, $mul.ref(0, 14)), $mul.ref(11, 1)), 114);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.17, $mul.ref(0, 14)), $mul.ref(12, 1)), 121);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.17, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.3 := $store.i8($M.3, .str.18, 100);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.18, $mul.ref(0, 19)), $mul.ref(1, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.18, $mul.ref(0, 19)), $mul.ref(2, 1)), 118);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.18, $mul.ref(0, 19)), $mul.ref(3, 1)), 105);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.18, $mul.ref(0, 19)), $mul.ref(4, 1)), 99);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.18, $mul.ref(0, 19)), $mul.ref(5, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.18, $mul.ref(0, 19)), $mul.ref(6, 1)), 32);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.18, $mul.ref(0, 19)), $mul.ref(7, 1)), 110);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.18, $mul.ref(0, 19)), $mul.ref(8, 1)), 111);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.18, $mul.ref(0, 19)), $mul.ref(9, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.18, $mul.ref(0, 19)), $mul.ref(10, 1)), 32);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.18, $mul.ref(0, 19)), $mul.ref(11, 1)), 112);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.18, $mul.ref(0, 19)), $mul.ref(12, 1)), 114);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.18, $mul.ref(0, 19)), $mul.ref(13, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.18, $mul.ref(0, 19)), $mul.ref(14, 1)), 115);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.18, $mul.ref(0, 19)), $mul.ref(15, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.18, $mul.ref(0, 19)), $mul.ref(16, 1)), 110);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.18, $mul.ref(0, 19)), $mul.ref(17, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.18, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.3 := $store.i8($M.3, .str.19, 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.19, $mul.ref(0, 21)), $mul.ref(1, 1)), 110);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.19, $mul.ref(0, 21)), $mul.ref(2, 1)), 100);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.19, $mul.ref(0, 21)), $mul.ref(3, 1)), 112);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.19, $mul.ref(0, 21)), $mul.ref(4, 1)), 111);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.19, $mul.ref(0, 21)), $mul.ref(5, 1)), 105);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.19, $mul.ref(0, 21)), $mul.ref(6, 1)), 110);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.19, $mul.ref(0, 21)), $mul.ref(7, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.19, $mul.ref(0, 21)), $mul.ref(8, 1)), 32);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.19, $mul.ref(0, 21)), $mul.ref(9, 1)), 110);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.19, $mul.ref(0, 21)), $mul.ref(10, 1)), 111);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.19, $mul.ref(0, 21)), $mul.ref(11, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.19, $mul.ref(0, 21)), $mul.ref(12, 1)), 32);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.19, $mul.ref(0, 21)), $mul.ref(13, 1)), 112);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.19, $mul.ref(0, 21)), $mul.ref(14, 1)), 114);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.19, $mul.ref(0, 21)), $mul.ref(15, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.19, $mul.ref(0, 21)), $mul.ref(16, 1)), 115);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.19, $mul.ref(0, 21)), $mul.ref(17, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.19, $mul.ref(0, 21)), $mul.ref(18, 1)), 110);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.19, $mul.ref(0, 21)), $mul.ref(19, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.19, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.3 := $store.i8($M.3, .str.20, 85);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.20, $mul.ref(0, 23)), $mul.ref(1, 1)), 82);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.20, $mul.ref(0, 23)), $mul.ref(2, 1)), 66);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.20, $mul.ref(0, 23)), $mul.ref(3, 1)), 32);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.20, $mul.ref(0, 23)), $mul.ref(4, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.20, $mul.ref(0, 23)), $mul.ref(5, 1)), 121);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.20, $mul.ref(0, 23)), $mul.ref(6, 1)), 112);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.20, $mul.ref(0, 23)), $mul.ref(7, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.20, $mul.ref(0, 23)), $mul.ref(8, 1)), 32);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.20, $mul.ref(0, 23)), $mul.ref(9, 1)), 110);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.20, $mul.ref(0, 23)), $mul.ref(10, 1)), 111);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.20, $mul.ref(0, 23)), $mul.ref(11, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.20, $mul.ref(0, 23)), $mul.ref(12, 1)), 32);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.20, $mul.ref(0, 23)), $mul.ref(13, 1)), 115);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.20, $mul.ref(0, 23)), $mul.ref(14, 1)), 117);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.20, $mul.ref(0, 23)), $mul.ref(15, 1)), 112);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.20, $mul.ref(0, 23)), $mul.ref(16, 1)), 112);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.20, $mul.ref(0, 23)), $mul.ref(17, 1)), 111);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.20, $mul.ref(0, 23)), $mul.ref(18, 1)), 114);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.20, $mul.ref(0, 23)), $mul.ref(19, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.20, $mul.ref(0, 23)), $mul.ref(20, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.20, $mul.ref(0, 23)), $mul.ref(21, 1)), 100);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.20, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.3 := $store.i8($M.3, .str.21, 105);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.21, $mul.ref(0, 17)), $mul.ref(1, 1)), 110);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.21, $mul.ref(0, 17)), $mul.ref(2, 1)), 118);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.21, $mul.ref(0, 17)), $mul.ref(3, 1)), 97);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.21, $mul.ref(0, 17)), $mul.ref(4, 1)), 108);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.21, $mul.ref(0, 17)), $mul.ref(5, 1)), 105);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.21, $mul.ref(0, 17)), $mul.ref(6, 1)), 100);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.21, $mul.ref(0, 17)), $mul.ref(7, 1)), 32);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.21, $mul.ref(0, 17)), $mul.ref(8, 1)), 97);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.21, $mul.ref(0, 17)), $mul.ref(9, 1)), 114);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.21, $mul.ref(0, 17)), $mul.ref(10, 1)), 103);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.21, $mul.ref(0, 17)), $mul.ref(11, 1)), 117);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.21, $mul.ref(0, 17)), $mul.ref(12, 1)), 109);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.21, $mul.ref(0, 17)), $mul.ref(13, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.21, $mul.ref(0, 17)), $mul.ref(14, 1)), 110);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.21, $mul.ref(0, 17)), $mul.ref(15, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.21, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.3 := $store.i8($M.3, .str.22, 115);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.22, $mul.ref(0, 44)), $mul.ref(1, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.22, $mul.ref(0, 44)), $mul.ref(2, 1)), 97);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.22, $mul.ref(0, 44)), $mul.ref(3, 1)), 114);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.22, $mul.ref(0, 44)), $mul.ref(4, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.22, $mul.ref(0, 44)), $mul.ref(5, 1)), 32);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.22, $mul.ref(0, 44)), $mul.ref(6, 1)), 102);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.22, $mul.ref(0, 44)), $mul.ref(7, 1)), 114);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.22, $mul.ref(0, 44)), $mul.ref(8, 1)), 97);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.22, $mul.ref(0, 44)), $mul.ref(9, 1)), 109);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.22, $mul.ref(0, 44)), $mul.ref(10, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.22, $mul.ref(0, 44)), $mul.ref(11, 1)), 32);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.22, $mul.ref(0, 44)), $mul.ref(12, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.22, $mul.ref(0, 44)), $mul.ref(13, 1)), 111);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.22, $mul.ref(0, 44)), $mul.ref(14, 1)), 111);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.22, $mul.ref(0, 44)), $mul.ref(15, 1)), 32);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.22, $mul.ref(0, 44)), $mul.ref(16, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.22, $mul.ref(0, 44)), $mul.ref(17, 1)), 97);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.22, $mul.ref(0, 44)), $mul.ref(18, 1)), 114);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.22, $mul.ref(0, 44)), $mul.ref(19, 1)), 108);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.22, $mul.ref(0, 44)), $mul.ref(20, 1)), 121);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.22, $mul.ref(0, 44)), $mul.ref(21, 1)), 32);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.22, $mul.ref(0, 44)), $mul.ref(22, 1)), 111);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.22, $mul.ref(0, 44)), $mul.ref(23, 1)), 114);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.22, $mul.ref(0, 44)), $mul.ref(24, 1)), 32);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.22, $mul.ref(0, 44)), $mul.ref(25, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.22, $mul.ref(0, 44)), $mul.ref(26, 1)), 111);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.22, $mul.ref(0, 44)), $mul.ref(27, 1)), 111);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.22, $mul.ref(0, 44)), $mul.ref(28, 1)), 32);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.22, $mul.ref(0, 44)), $mul.ref(29, 1)), 109);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.22, $mul.ref(0, 44)), $mul.ref(30, 1)), 117);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.22, $mul.ref(0, 44)), $mul.ref(31, 1)), 99);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.22, $mul.ref(0, 44)), $mul.ref(32, 1)), 104);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.22, $mul.ref(0, 44)), $mul.ref(33, 1)), 32);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.22, $mul.ref(0, 44)), $mul.ref(34, 1)), 115);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.22, $mul.ref(0, 44)), $mul.ref(35, 1)), 99);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.22, $mul.ref(0, 44)), $mul.ref(36, 1)), 104);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.22, $mul.ref(0, 44)), $mul.ref(37, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.22, $mul.ref(0, 44)), $mul.ref(38, 1)), 100);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.22, $mul.ref(0, 44)), $mul.ref(39, 1)), 117);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.22, $mul.ref(0, 44)), $mul.ref(40, 1)), 108);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.22, $mul.ref(0, 44)), $mul.ref(41, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.22, $mul.ref(0, 44)), $mul.ref(42, 1)), 100);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.22, $mul.ref(0, 44)), $mul.ref(43, 1)), 0);
    $M.3 := $store.i8($M.3, .str.23, 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.23, $mul.ref(0, 31)), $mul.ref(1, 1)), 111);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.23, $mul.ref(0, 31)), $mul.ref(2, 1)), 111);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.23, $mul.ref(0, 31)), $mul.ref(3, 1)), 32);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.23, $mul.ref(0, 31)), $mul.ref(4, 1)), 109);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.23, $mul.ref(0, 31)), $mul.ref(5, 1)), 97);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.23, $mul.ref(0, 31)), $mul.ref(6, 1)), 110);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.23, $mul.ref(0, 31)), $mul.ref(7, 1)), 121);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.23, $mul.ref(0, 31)), $mul.ref(8, 1)), 32);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.23, $mul.ref(0, 31)), $mul.ref(9, 1)), 105);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.23, $mul.ref(0, 31)), $mul.ref(10, 1)), 115);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.23, $mul.ref(0, 31)), $mul.ref(11, 1)), 111);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.23, $mul.ref(0, 31)), $mul.ref(12, 1)), 99);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.23, $mul.ref(0, 31)), $mul.ref(13, 1)), 32);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.23, $mul.ref(0, 31)), $mul.ref(14, 1)), 102);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.23, $mul.ref(0, 31)), $mul.ref(15, 1)), 114);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.23, $mul.ref(0, 31)), $mul.ref(16, 1)), 97);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.23, $mul.ref(0, 31)), $mul.ref(17, 1)), 109);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.23, $mul.ref(0, 31)), $mul.ref(18, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.23, $mul.ref(0, 31)), $mul.ref(19, 1)), 115);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.23, $mul.ref(0, 31)), $mul.ref(20, 1)), 32);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.23, $mul.ref(0, 31)), $mul.ref(21, 1)), 114);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.23, $mul.ref(0, 31)), $mul.ref(22, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.23, $mul.ref(0, 31)), $mul.ref(23, 1)), 113);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.23, $mul.ref(0, 31)), $mul.ref(24, 1)), 117);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.23, $mul.ref(0, 31)), $mul.ref(25, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.23, $mul.ref(0, 31)), $mul.ref(26, 1)), 115);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.23, $mul.ref(0, 31)), $mul.ref(27, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.23, $mul.ref(0, 31)), $mul.ref(28, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.23, $mul.ref(0, 31)), $mul.ref(29, 1)), 100);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.23, $mul.ref(0, 31)), $mul.ref(30, 1)), 0);
    $M.3 := $store.i8($M.3, .str.24, 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.24, $mul.ref(0, 17)), $mul.ref(1, 1)), 110);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.24, $mul.ref(0, 17)), $mul.ref(2, 1)), 100);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.24, $mul.ref(0, 17)), $mul.ref(3, 1)), 112);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.24, $mul.ref(0, 17)), $mul.ref(4, 1)), 111);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.24, $mul.ref(0, 17)), $mul.ref(5, 1)), 105);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.24, $mul.ref(0, 17)), $mul.ref(6, 1)), 110);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.24, $mul.ref(0, 17)), $mul.ref(7, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.24, $mul.ref(0, 17)), $mul.ref(8, 1)), 32);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.24, $mul.ref(0, 17)), $mul.ref(9, 1)), 115);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.24, $mul.ref(0, 17)), $mul.ref(10, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.24, $mul.ref(0, 17)), $mul.ref(11, 1)), 97);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.24, $mul.ref(0, 17)), $mul.ref(12, 1)), 108);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.24, $mul.ref(0, 17)), $mul.ref(13, 1)), 108);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.24, $mul.ref(0, 17)), $mul.ref(14, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.24, $mul.ref(0, 17)), $mul.ref(15, 1)), 100);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.24, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.3 := $store.i8($M.3, .str.25, 105);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.25, $mul.ref(0, 20)), $mul.ref(1, 1)), 110);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.25, $mul.ref(0, 20)), $mul.ref(2, 1)), 118);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.25, $mul.ref(0, 20)), $mul.ref(3, 1)), 97);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.25, $mul.ref(0, 20)), $mul.ref(4, 1)), 108);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.25, $mul.ref(0, 20)), $mul.ref(5, 1)), 105);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.25, $mul.ref(0, 20)), $mul.ref(6, 1)), 100);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.25, $mul.ref(0, 20)), $mul.ref(7, 1)), 32);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.25, $mul.ref(0, 20)), $mul.ref(8, 1)), 112);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.25, $mul.ref(0, 20)), $mul.ref(9, 1)), 97);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.25, $mul.ref(0, 20)), $mul.ref(10, 1)), 99);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.25, $mul.ref(0, 20)), $mul.ref(11, 1)), 107);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.25, $mul.ref(0, 20)), $mul.ref(12, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.25, $mul.ref(0, 20)), $mul.ref(13, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.25, $mul.ref(0, 20)), $mul.ref(14, 1)), 32);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.25, $mul.ref(0, 20)), $mul.ref(15, 1)), 115);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.25, $mul.ref(0, 20)), $mul.ref(16, 1)), 105);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.25, $mul.ref(0, 20)), $mul.ref(17, 1)), 122);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.25, $mul.ref(0, 20)), $mul.ref(18, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.25, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.3 := $store.i8($M.3, .str.26, 119);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.26, $mul.ref(0, 31)), $mul.ref(1, 1)), 111);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.26, $mul.ref(0, 31)), $mul.ref(2, 1)), 117);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.26, $mul.ref(0, 31)), $mul.ref(3, 1)), 108);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.26, $mul.ref(0, 31)), $mul.ref(4, 1)), 100);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.26, $mul.ref(0, 31)), $mul.ref(5, 1)), 32);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.26, $mul.ref(0, 31)), $mul.ref(6, 1)), 111);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.26, $mul.ref(0, 31)), $mul.ref(7, 1)), 118);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.26, $mul.ref(0, 31)), $mul.ref(8, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.26, $mul.ref(0, 31)), $mul.ref(9, 1)), 114);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.26, $mul.ref(0, 31)), $mul.ref(10, 1)), 99);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.26, $mul.ref(0, 31)), $mul.ref(11, 1)), 111);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.26, $mul.ref(0, 31)), $mul.ref(12, 1)), 109);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.26, $mul.ref(0, 31)), $mul.ref(13, 1)), 109);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.26, $mul.ref(0, 31)), $mul.ref(14, 1)), 105);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.26, $mul.ref(0, 31)), $mul.ref(15, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.26, $mul.ref(0, 31)), $mul.ref(16, 1)), 32);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.26, $mul.ref(0, 31)), $mul.ref(17, 1)), 85);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.26, $mul.ref(0, 31)), $mul.ref(18, 1)), 83);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.26, $mul.ref(0, 31)), $mul.ref(19, 1)), 66);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.26, $mul.ref(0, 31)), $mul.ref(20, 1)), 32);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.26, $mul.ref(0, 31)), $mul.ref(21, 1)), 98);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.26, $mul.ref(0, 31)), $mul.ref(22, 1)), 97);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.26, $mul.ref(0, 31)), $mul.ref(23, 1)), 110);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.26, $mul.ref(0, 31)), $mul.ref(24, 1)), 100);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.26, $mul.ref(0, 31)), $mul.ref(25, 1)), 119);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.26, $mul.ref(0, 31)), $mul.ref(26, 1)), 105);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.26, $mul.ref(0, 31)), $mul.ref(27, 1)), 100);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.26, $mul.ref(0, 31)), $mul.ref(28, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.26, $mul.ref(0, 31)), $mul.ref(29, 1)), 104);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.26, $mul.ref(0, 31)), $mul.ref(30, 1)), 0);
    $M.3 := $store.i8($M.3, .str.27, 100);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.27, $mul.ref(0, 17)), $mul.ref(1, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.27, $mul.ref(0, 17)), $mul.ref(2, 1)), 118);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.27, $mul.ref(0, 17)), $mul.ref(3, 1)), 105);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.27, $mul.ref(0, 17)), $mul.ref(4, 1)), 99);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.27, $mul.ref(0, 17)), $mul.ref(5, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.27, $mul.ref(0, 17)), $mul.ref(6, 1)), 32);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.27, $mul.ref(0, 17)), $mul.ref(7, 1)), 115);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.27, $mul.ref(0, 17)), $mul.ref(8, 1)), 104);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.27, $mul.ref(0, 17)), $mul.ref(9, 1)), 117);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.27, $mul.ref(0, 17)), $mul.ref(10, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.27, $mul.ref(0, 17)), $mul.ref(11, 1)), 32);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.27, $mul.ref(0, 17)), $mul.ref(12, 1)), 100);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.27, $mul.ref(0, 17)), $mul.ref(13, 1)), 111);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.27, $mul.ref(0, 17)), $mul.ref(14, 1)), 119);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.27, $mul.ref(0, 17)), $mul.ref(15, 1)), 110);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.27, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.3 := $store.i8($M.3, .str.28, 114);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.28, $mul.ref(0, 16)), $mul.ref(1, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.28, $mul.ref(0, 16)), $mul.ref(2, 1)), 106);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.28, $mul.ref(0, 16)), $mul.ref(3, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.28, $mul.ref(0, 16)), $mul.ref(4, 1)), 99);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.28, $mul.ref(0, 16)), $mul.ref(5, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.28, $mul.ref(0, 16)), $mul.ref(6, 1)), 32);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.28, $mul.ref(0, 16)), $mul.ref(7, 1)), 102);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.28, $mul.ref(0, 16)), $mul.ref(8, 1)), 108);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.28, $mul.ref(0, 16)), $mul.ref(9, 1)), 97);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.28, $mul.ref(0, 16)), $mul.ref(10, 1)), 103);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.28, $mul.ref(0, 16)), $mul.ref(11, 1)), 32);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.28, $mul.ref(0, 16)), $mul.ref(12, 1)), 115);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.28, $mul.ref(0, 16)), $mul.ref(13, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.28, $mul.ref(0, 16)), $mul.ref(14, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.28, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.3 := $store.i8($M.3, .str.29, 100);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.29, $mul.ref(0, 17)), $mul.ref(1, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.29, $mul.ref(0, 17)), $mul.ref(2, 1)), 118);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.29, $mul.ref(0, 17)), $mul.ref(3, 1)), 105);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.29, $mul.ref(0, 17)), $mul.ref(4, 1)), 99);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.29, $mul.ref(0, 17)), $mul.ref(5, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.29, $mul.ref(0, 17)), $mul.ref(6, 1)), 32);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.29, $mul.ref(0, 17)), $mul.ref(7, 1)), 115);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.29, $mul.ref(0, 17)), $mul.ref(8, 1)), 117);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.29, $mul.ref(0, 17)), $mul.ref(9, 1)), 115);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.29, $mul.ref(0, 17)), $mul.ref(10, 1)), 112);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.29, $mul.ref(0, 17)), $mul.ref(11, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.29, $mul.ref(0, 17)), $mul.ref(12, 1)), 110);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.29, $mul.ref(0, 17)), $mul.ref(13, 1)), 100);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.29, $mul.ref(0, 17)), $mul.ref(14, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.29, $mul.ref(0, 17)), $mul.ref(15, 1)), 100);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.29, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.112 := $store.i8($M.112, .str.30, 117);
    $M.112 := $store.i8($M.112, $add.ref($add.ref(.str.30, $mul.ref(0, 17)), $mul.ref(1, 1)), 110);
    $M.112 := $store.i8($M.112, $add.ref($add.ref(.str.30, $mul.ref(0, 17)), $mul.ref(2, 1)), 107);
    $M.112 := $store.i8($M.112, $add.ref($add.ref(.str.30, $mul.ref(0, 17)), $mul.ref(3, 1)), 110);
    $M.112 := $store.i8($M.112, $add.ref($add.ref(.str.30, $mul.ref(0, 17)), $mul.ref(4, 1)), 111);
    $M.112 := $store.i8($M.112, $add.ref($add.ref(.str.30, $mul.ref(0, 17)), $mul.ref(5, 1)), 119);
    $M.112 := $store.i8($M.112, $add.ref($add.ref(.str.30, $mul.ref(0, 17)), $mul.ref(6, 1)), 110);
    $M.112 := $store.i8($M.112, $add.ref($add.ref(.str.30, $mul.ref(0, 17)), $mul.ref(7, 1)), 32);
    $M.112 := $store.i8($M.112, $add.ref($add.ref(.str.30, $mul.ref(0, 17)), $mul.ref(8, 1)), 101);
    $M.112 := $store.i8($M.112, $add.ref($add.ref(.str.30, $mul.ref(0, 17)), $mul.ref(9, 1)), 114);
    $M.112 := $store.i8($M.112, $add.ref($add.ref(.str.30, $mul.ref(0, 17)), $mul.ref(10, 1)), 114);
    $M.112 := $store.i8($M.112, $add.ref($add.ref(.str.30, $mul.ref(0, 17)), $mul.ref(11, 1)), 111);
    $M.112 := $store.i8($M.112, $add.ref($add.ref(.str.30, $mul.ref(0, 17)), $mul.ref(12, 1)), 114);
    $M.112 := $store.i8($M.112, $add.ref($add.ref(.str.30, $mul.ref(0, 17)), $mul.ref(13, 1)), 32);
    $M.112 := $store.i8($M.112, $add.ref($add.ref(.str.30, $mul.ref(0, 17)), $mul.ref(14, 1)), 37);
    $M.112 := $store.i8($M.112, $add.ref($add.ref(.str.30, $mul.ref(0, 17)), $mul.ref(15, 1)), 100);
    $M.112 := $store.i8($M.112, $add.ref($add.ref(.str.30, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.3 := $store.i8($M.3, .str.51, 119);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.51, $mul.ref(0, 20)), $mul.ref(1, 1)), 114);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.51, $mul.ref(0, 20)), $mul.ref(2, 1)), 105);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.51, $mul.ref(0, 20)), $mul.ref(3, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.51, $mul.ref(0, 20)), $mul.ref(4, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.51, $mul.ref(0, 20)), $mul.ref(5, 1)), 95);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.51, $mul.ref(0, 20)), $mul.ref(6, 1)), 99);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.51, $mul.ref(0, 20)), $mul.ref(7, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.51, $mul.ref(0, 20)), $mul.ref(8, 1)), 114);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.51, $mul.ref(0, 20)), $mul.ref(9, 1)), 108);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.51, $mul.ref(0, 20)), $mul.ref(10, 1)), 95);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.51, $mul.ref(0, 20)), $mul.ref(11, 1)), 99);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.51, $mul.ref(0, 20)), $mul.ref(12, 1)), 97);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.51, $mul.ref(0, 20)), $mul.ref(13, 1)), 108);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.51, $mul.ref(0, 20)), $mul.ref(14, 1)), 108);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.51, $mul.ref(0, 20)), $mul.ref(15, 1)), 98);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.51, $mul.ref(0, 20)), $mul.ref(16, 1)), 97);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.51, $mul.ref(0, 20)), $mul.ref(17, 1)), 99);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.51, $mul.ref(0, 20)), $mul.ref(18, 1)), 107);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.51, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.3 := $store.i8($M.3, .str.55, 117);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.55, $mul.ref(0, 16)), $mul.ref(1, 1)), 110);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.55, $mul.ref(0, 16)), $mul.ref(2, 1)), 108);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.55, $mul.ref(0, 16)), $mul.ref(3, 1)), 105);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.55, $mul.ref(0, 16)), $mul.ref(4, 1)), 110);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.55, $mul.ref(0, 16)), $mul.ref(5, 1)), 107);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.55, $mul.ref(0, 16)), $mul.ref(6, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.55, $mul.ref(0, 16)), $mul.ref(7, 1)), 100);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.55, $mul.ref(0, 16)), $mul.ref(8, 1)), 32);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.55, $mul.ref(0, 16)), $mul.ref(9, 1)), 40);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.55, $mul.ref(0, 16)), $mul.ref(10, 1)), 115);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.55, $mul.ref(0, 16)), $mul.ref(11, 1)), 121);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.55, $mul.ref(0, 16)), $mul.ref(12, 1)), 110);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.55, $mul.ref(0, 16)), $mul.ref(13, 1)), 99);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.55, $mul.ref(0, 16)), $mul.ref(14, 1)), 41);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.55, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.3 := $store.i8($M.3, .str.56, 85);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.56, $mul.ref(0, 18)), $mul.ref(1, 1)), 82);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.56, $mul.ref(0, 18)), $mul.ref(2, 1)), 66);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.56, $mul.ref(0, 18)), $mul.ref(3, 1)), 32);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.56, $mul.ref(0, 18)), $mul.ref(4, 1)), 115);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.56, $mul.ref(0, 18)), $mul.ref(5, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.56, $mul.ref(0, 18)), $mul.ref(6, 1)), 105);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.56, $mul.ref(0, 18)), $mul.ref(7, 1)), 108);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.56, $mul.ref(0, 18)), $mul.ref(8, 1)), 108);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.56, $mul.ref(0, 18)), $mul.ref(9, 1)), 32);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.56, $mul.ref(0, 18)), $mul.ref(10, 1)), 112);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.56, $mul.ref(0, 18)), $mul.ref(11, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.56, $mul.ref(0, 18)), $mul.ref(12, 1)), 110);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.56, $mul.ref(0, 18)), $mul.ref(13, 1)), 100);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.56, $mul.ref(0, 18)), $mul.ref(14, 1)), 105);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.56, $mul.ref(0, 18)), $mul.ref(15, 1)), 110);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.56, $mul.ref(0, 18)), $mul.ref(16, 1)), 103);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.56, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.3 := $store.i8($M.3, .str.57, 98);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.57, $mul.ref(0, 46)), $mul.ref(1, 1)), 105);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.57, $mul.ref(0, 46)), $mul.ref(2, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.57, $mul.ref(0, 46)), $mul.ref(3, 1)), 115);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.57, $mul.ref(0, 46)), $mul.ref(4, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.57, $mul.ref(0, 46)), $mul.ref(5, 1)), 117);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.57, $mul.ref(0, 46)), $mul.ref(6, 1)), 102);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.57, $mul.ref(0, 46)), $mul.ref(7, 1)), 102);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.57, $mul.ref(0, 46)), $mul.ref(8, 1)), 32);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.57, $mul.ref(0, 46)), $mul.ref(9, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.57, $mul.ref(0, 46)), $mul.ref(10, 1)), 114);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.57, $mul.ref(0, 46)), $mul.ref(11, 1)), 114);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.57, $mul.ref(0, 46)), $mul.ref(12, 1)), 111);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.57, $mul.ref(0, 46)), $mul.ref(13, 1)), 114);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.57, $mul.ref(0, 46)), $mul.ref(14, 1)), 44);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.57, $mul.ref(0, 46)), $mul.ref(15, 1)), 32);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.57, $mul.ref(0, 46)), $mul.ref(16, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.57, $mul.ref(0, 46)), $mul.ref(17, 1)), 105);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.57, $mul.ref(0, 46)), $mul.ref(18, 1)), 109);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.57, $mul.ref(0, 46)), $mul.ref(19, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.57, $mul.ref(0, 46)), $mul.ref(20, 1)), 111);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.57, $mul.ref(0, 46)), $mul.ref(21, 1)), 117);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.57, $mul.ref(0, 46)), $mul.ref(22, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.57, $mul.ref(0, 46)), $mul.ref(23, 1)), 44);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.57, $mul.ref(0, 46)), $mul.ref(24, 1)), 32);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.57, $mul.ref(0, 46)), $mul.ref(25, 1)), 111);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.57, $mul.ref(0, 46)), $mul.ref(26, 1)), 114);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.57, $mul.ref(0, 46)), $mul.ref(27, 1)), 32);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.57, $mul.ref(0, 46)), $mul.ref(28, 1)), 117);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.57, $mul.ref(0, 46)), $mul.ref(29, 1)), 110);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.57, $mul.ref(0, 46)), $mul.ref(30, 1)), 107);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.57, $mul.ref(0, 46)), $mul.ref(31, 1)), 110);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.57, $mul.ref(0, 46)), $mul.ref(32, 1)), 111);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.57, $mul.ref(0, 46)), $mul.ref(33, 1)), 119);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.57, $mul.ref(0, 46)), $mul.ref(34, 1)), 110);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.57, $mul.ref(0, 46)), $mul.ref(35, 1)), 32);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.57, $mul.ref(0, 46)), $mul.ref(36, 1)), 85);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.57, $mul.ref(0, 46)), $mul.ref(37, 1)), 83);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.57, $mul.ref(0, 46)), $mul.ref(38, 1)), 66);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.57, $mul.ref(0, 46)), $mul.ref(39, 1)), 32);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.57, $mul.ref(0, 46)), $mul.ref(40, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.57, $mul.ref(0, 46)), $mul.ref(41, 1)), 114);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.57, $mul.ref(0, 46)), $mul.ref(42, 1)), 114);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.57, $mul.ref(0, 46)), $mul.ref(43, 1)), 111);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.57, $mul.ref(0, 46)), $mul.ref(44, 1)), 114);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.57, $mul.ref(0, 46)), $mul.ref(45, 1)), 0);
    $M.3 := $store.i8($M.3, .str.58, 67);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.58, $mul.ref(0, 44)), $mul.ref(1, 1)), 82);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.58, $mul.ref(0, 44)), $mul.ref(2, 1)), 67);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.58, $mul.ref(0, 44)), $mul.ref(3, 1)), 32);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.58, $mul.ref(0, 44)), $mul.ref(4, 1)), 109);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.58, $mul.ref(0, 44)), $mul.ref(5, 1)), 105);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.58, $mul.ref(0, 44)), $mul.ref(6, 1)), 115);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.58, $mul.ref(0, 44)), $mul.ref(7, 1)), 109);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.58, $mul.ref(0, 44)), $mul.ref(8, 1)), 97);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.58, $mul.ref(0, 44)), $mul.ref(9, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.58, $mul.ref(0, 44)), $mul.ref(10, 1)), 99);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.58, $mul.ref(0, 44)), $mul.ref(11, 1)), 104);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.58, $mul.ref(0, 44)), $mul.ref(12, 1)), 44);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.58, $mul.ref(0, 44)), $mul.ref(13, 1)), 32);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.58, $mul.ref(0, 44)), $mul.ref(14, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.58, $mul.ref(0, 44)), $mul.ref(15, 1)), 105);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.58, $mul.ref(0, 44)), $mul.ref(16, 1)), 109);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.58, $mul.ref(0, 44)), $mul.ref(17, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.58, $mul.ref(0, 44)), $mul.ref(18, 1)), 111);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.58, $mul.ref(0, 44)), $mul.ref(19, 1)), 117);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.58, $mul.ref(0, 44)), $mul.ref(20, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.58, $mul.ref(0, 44)), $mul.ref(21, 1)), 44);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.58, $mul.ref(0, 44)), $mul.ref(22, 1)), 32);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.58, $mul.ref(0, 44)), $mul.ref(23, 1)), 111);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.58, $mul.ref(0, 44)), $mul.ref(24, 1)), 114);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.58, $mul.ref(0, 44)), $mul.ref(25, 1)), 32);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.58, $mul.ref(0, 44)), $mul.ref(26, 1)), 117);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.58, $mul.ref(0, 44)), $mul.ref(27, 1)), 110);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.58, $mul.ref(0, 44)), $mul.ref(28, 1)), 107);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.58, $mul.ref(0, 44)), $mul.ref(29, 1)), 110);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.58, $mul.ref(0, 44)), $mul.ref(30, 1)), 111);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.58, $mul.ref(0, 44)), $mul.ref(31, 1)), 119);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.58, $mul.ref(0, 44)), $mul.ref(32, 1)), 110);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.58, $mul.ref(0, 44)), $mul.ref(33, 1)), 32);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.58, $mul.ref(0, 44)), $mul.ref(34, 1)), 85);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.58, $mul.ref(0, 44)), $mul.ref(35, 1)), 83);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.58, $mul.ref(0, 44)), $mul.ref(36, 1)), 66);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.58, $mul.ref(0, 44)), $mul.ref(37, 1)), 32);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.58, $mul.ref(0, 44)), $mul.ref(38, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.58, $mul.ref(0, 44)), $mul.ref(39, 1)), 114);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.58, $mul.ref(0, 44)), $mul.ref(40, 1)), 114);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.58, $mul.ref(0, 44)), $mul.ref(41, 1)), 111);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.58, $mul.ref(0, 44)), $mul.ref(42, 1)), 114);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.58, $mul.ref(0, 44)), $mul.ref(43, 1)), 0);
    $M.3 := $store.i8($M.3, .str.59, 85);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.59, $mul.ref(0, 21)), $mul.ref(1, 1)), 83);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.59, $mul.ref(0, 21)), $mul.ref(2, 1)), 66);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.59, $mul.ref(0, 21)), $mul.ref(3, 1)), 32);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.59, $mul.ref(0, 21)), $mul.ref(4, 1)), 114);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.59, $mul.ref(0, 21)), $mul.ref(5, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.59, $mul.ref(0, 21)), $mul.ref(6, 1)), 115);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.59, $mul.ref(0, 21)), $mul.ref(7, 1)), 112);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.59, $mul.ref(0, 21)), $mul.ref(8, 1)), 111);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.59, $mul.ref(0, 21)), $mul.ref(9, 1)), 110);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.59, $mul.ref(0, 21)), $mul.ref(10, 1)), 115);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.59, $mul.ref(0, 21)), $mul.ref(11, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.59, $mul.ref(0, 21)), $mul.ref(12, 1)), 32);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.59, $mul.ref(0, 21)), $mul.ref(13, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.59, $mul.ref(0, 21)), $mul.ref(14, 1)), 105);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.59, $mul.ref(0, 21)), $mul.ref(15, 1)), 109);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.59, $mul.ref(0, 21)), $mul.ref(16, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.59, $mul.ref(0, 21)), $mul.ref(17, 1)), 111);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.59, $mul.ref(0, 21)), $mul.ref(18, 1)), 117);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.59, $mul.ref(0, 21)), $mul.ref(19, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.59, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.3 := $store.i8($M.3, .str.60, 73);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.60, $mul.ref(0, 18)), $mul.ref(1, 1)), 78);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.60, $mul.ref(0, 18)), $mul.ref(2, 1)), 32);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.60, $mul.ref(0, 18)), $mul.ref(3, 1)), 98);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.60, $mul.ref(0, 18)), $mul.ref(4, 1)), 117);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.60, $mul.ref(0, 18)), $mul.ref(5, 1)), 102);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.60, $mul.ref(0, 18)), $mul.ref(6, 1)), 102);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.60, $mul.ref(0, 18)), $mul.ref(7, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.60, $mul.ref(0, 18)), $mul.ref(8, 1)), 114);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.60, $mul.ref(0, 18)), $mul.ref(9, 1)), 32);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.60, $mul.ref(0, 18)), $mul.ref(10, 1)), 111);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.60, $mul.ref(0, 18)), $mul.ref(11, 1)), 118);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.60, $mul.ref(0, 18)), $mul.ref(12, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.60, $mul.ref(0, 18)), $mul.ref(13, 1)), 114);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.60, $mul.ref(0, 18)), $mul.ref(14, 1)), 114);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.60, $mul.ref(0, 18)), $mul.ref(15, 1)), 117);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.60, $mul.ref(0, 18)), $mul.ref(16, 1)), 110);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.60, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.3 := $store.i8($M.3, .str.61, 79);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.61, $mul.ref(0, 20)), $mul.ref(1, 1)), 85);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.61, $mul.ref(0, 20)), $mul.ref(2, 1)), 84);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.61, $mul.ref(0, 20)), $mul.ref(3, 1)), 32);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.61, $mul.ref(0, 20)), $mul.ref(4, 1)), 98);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.61, $mul.ref(0, 20)), $mul.ref(5, 1)), 117);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.61, $mul.ref(0, 20)), $mul.ref(6, 1)), 102);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.61, $mul.ref(0, 20)), $mul.ref(7, 1)), 102);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.61, $mul.ref(0, 20)), $mul.ref(8, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.61, $mul.ref(0, 20)), $mul.ref(9, 1)), 114);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.61, $mul.ref(0, 20)), $mul.ref(10, 1)), 32);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.61, $mul.ref(0, 20)), $mul.ref(11, 1)), 117);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.61, $mul.ref(0, 20)), $mul.ref(12, 1)), 110);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.61, $mul.ref(0, 20)), $mul.ref(13, 1)), 100);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.61, $mul.ref(0, 20)), $mul.ref(14, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.61, $mul.ref(0, 20)), $mul.ref(15, 1)), 114);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.61, $mul.ref(0, 20)), $mul.ref(16, 1)), 114);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.61, $mul.ref(0, 20)), $mul.ref(17, 1)), 117);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.61, $mul.ref(0, 20)), $mul.ref(18, 1)), 110);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.61, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.3 := $store.i8($M.3, .str.62, 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.62, $mul.ref(0, 16)), $mul.ref(1, 1)), 110);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.62, $mul.ref(0, 16)), $mul.ref(2, 1)), 100);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.62, $mul.ref(0, 16)), $mul.ref(3, 1)), 112);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.62, $mul.ref(0, 16)), $mul.ref(4, 1)), 111);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.62, $mul.ref(0, 16)), $mul.ref(5, 1)), 105);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.62, $mul.ref(0, 16)), $mul.ref(6, 1)), 110);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.62, $mul.ref(0, 16)), $mul.ref(7, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.62, $mul.ref(0, 16)), $mul.ref(8, 1)), 32);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.62, $mul.ref(0, 16)), $mul.ref(9, 1)), 98);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.62, $mul.ref(0, 16)), $mul.ref(10, 1)), 97);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.62, $mul.ref(0, 16)), $mul.ref(11, 1)), 98);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.62, $mul.ref(0, 16)), $mul.ref(12, 1)), 98);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.62, $mul.ref(0, 16)), $mul.ref(13, 1)), 108);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.62, $mul.ref(0, 16)), $mul.ref(14, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.62, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.3 := $store.i8($M.3, .str.63, 115);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.63, $mul.ref(0, 13)), $mul.ref(1, 1)), 104);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.63, $mul.ref(0, 13)), $mul.ref(2, 1)), 111);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.63, $mul.ref(0, 13)), $mul.ref(3, 1)), 114);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.63, $mul.ref(0, 13)), $mul.ref(4, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.63, $mul.ref(0, 13)), $mul.ref(5, 1)), 32);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.63, $mul.ref(0, 13)), $mul.ref(6, 1)), 112);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.63, $mul.ref(0, 13)), $mul.ref(7, 1)), 97);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.63, $mul.ref(0, 13)), $mul.ref(8, 1)), 99);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.63, $mul.ref(0, 13)), $mul.ref(9, 1)), 107);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.63, $mul.ref(0, 13)), $mul.ref(10, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.63, $mul.ref(0, 13)), $mul.ref(11, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.63, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.3 := $store.i8($M.3, .str.64, 100);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.64, $mul.ref(0, 15)), $mul.ref(1, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.64, $mul.ref(0, 15)), $mul.ref(2, 1)), 118);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.64, $mul.ref(0, 15)), $mul.ref(3, 1)), 105);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.64, $mul.ref(0, 15)), $mul.ref(4, 1)), 99);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.64, $mul.ref(0, 15)), $mul.ref(5, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.64, $mul.ref(0, 15)), $mul.ref(6, 1)), 32);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.64, $mul.ref(0, 15)), $mul.ref(7, 1)), 114);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.64, $mul.ref(0, 15)), $mul.ref(8, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.64, $mul.ref(0, 15)), $mul.ref(9, 1)), 109);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.64, $mul.ref(0, 15)), $mul.ref(10, 1)), 111);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.64, $mul.ref(0, 15)), $mul.ref(11, 1)), 118);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.64, $mul.ref(0, 15)), $mul.ref(12, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.64, $mul.ref(0, 15)), $mul.ref(13, 1)), 100);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.64, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.3 := $store.i8($M.3, .str.65, 112);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.65, $mul.ref(0, 22)), $mul.ref(1, 1)), 97);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.65, $mul.ref(0, 22)), $mul.ref(2, 1)), 114);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.65, $mul.ref(0, 22)), $mul.ref(3, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.65, $mul.ref(0, 22)), $mul.ref(4, 1)), 105);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.65, $mul.ref(0, 22)), $mul.ref(5, 1)), 97);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.65, $mul.ref(0, 22)), $mul.ref(6, 1)), 108);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.65, $mul.ref(0, 22)), $mul.ref(7, 1)), 32);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.65, $mul.ref(0, 22)), $mul.ref(8, 1)), 105);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.65, $mul.ref(0, 22)), $mul.ref(9, 1)), 115);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.65, $mul.ref(0, 22)), $mul.ref(10, 1)), 111);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.65, $mul.ref(0, 22)), $mul.ref(11, 1)), 99);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.65, $mul.ref(0, 22)), $mul.ref(12, 1)), 32);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.65, $mul.ref(0, 22)), $mul.ref(13, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.65, $mul.ref(0, 22)), $mul.ref(14, 1)), 114);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.65, $mul.ref(0, 22)), $mul.ref(15, 1)), 97);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.65, $mul.ref(0, 22)), $mul.ref(16, 1)), 110);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.65, $mul.ref(0, 22)), $mul.ref(17, 1)), 115);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.65, $mul.ref(0, 22)), $mul.ref(18, 1)), 102);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.65, $mul.ref(0, 22)), $mul.ref(19, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.65, $mul.ref(0, 22)), $mul.ref(20, 1)), 114);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.65, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.3 := $store.i8($M.3, .str.66, 73);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.66, $mul.ref(0, 12)), $mul.ref(1, 1)), 83);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.66, $mul.ref(0, 12)), $mul.ref(2, 1)), 79);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.66, $mul.ref(0, 12)), $mul.ref(3, 1)), 32);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.66, $mul.ref(0, 12)), $mul.ref(4, 1)), 109);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.66, $mul.ref(0, 12)), $mul.ref(5, 1)), 97);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.66, $mul.ref(0, 12)), $mul.ref(6, 1)), 100);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.66, $mul.ref(0, 12)), $mul.ref(7, 1)), 110);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.66, $mul.ref(0, 12)), $mul.ref(8, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.66, $mul.ref(0, 12)), $mul.ref(9, 1)), 115);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.66, $mul.ref(0, 12)), $mul.ref(10, 1)), 115);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.66, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.3 := $store.i8($M.3, .str.67, 117);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.67, $mul.ref(0, 17)), $mul.ref(1, 1)), 110);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.67, $mul.ref(0, 17)), $mul.ref(2, 1)), 108);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.67, $mul.ref(0, 17)), $mul.ref(3, 1)), 105);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.67, $mul.ref(0, 17)), $mul.ref(4, 1)), 110);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.67, $mul.ref(0, 17)), $mul.ref(5, 1)), 107);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.67, $mul.ref(0, 17)), $mul.ref(6, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.67, $mul.ref(0, 17)), $mul.ref(7, 1)), 100);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.67, $mul.ref(0, 17)), $mul.ref(8, 1)), 32);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.67, $mul.ref(0, 17)), $mul.ref(9, 1)), 40);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.67, $mul.ref(0, 17)), $mul.ref(10, 1)), 97);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.67, $mul.ref(0, 17)), $mul.ref(11, 1)), 115);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.67, $mul.ref(0, 17)), $mul.ref(12, 1)), 121);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.67, $mul.ref(0, 17)), $mul.ref(13, 1)), 110);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.67, $mul.ref(0, 17)), $mul.ref(14, 1)), 99);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.67, $mul.ref(0, 17)), $mul.ref(15, 1)), 41);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.67, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.113 := $store.i8($M.113, .str.68, 117);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.68, $mul.ref(0, 18)), $mul.ref(1, 1)), 110);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.68, $mul.ref(0, 18)), $mul.ref(2, 1)), 107);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.68, $mul.ref(0, 18)), $mul.ref(3, 1)), 110);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.68, $mul.ref(0, 18)), $mul.ref(4, 1)), 111);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.68, $mul.ref(0, 18)), $mul.ref(5, 1)), 119);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.68, $mul.ref(0, 18)), $mul.ref(6, 1)), 110);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.68, $mul.ref(0, 18)), $mul.ref(7, 1)), 32);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.68, $mul.ref(0, 18)), $mul.ref(8, 1)), 115);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.68, $mul.ref(0, 18)), $mul.ref(9, 1)), 116);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.68, $mul.ref(0, 18)), $mul.ref(10, 1)), 97);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.68, $mul.ref(0, 18)), $mul.ref(11, 1)), 116);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.68, $mul.ref(0, 18)), $mul.ref(12, 1)), 117);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.68, $mul.ref(0, 18)), $mul.ref(13, 1)), 115);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.68, $mul.ref(0, 18)), $mul.ref(14, 1)), 32);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.68, $mul.ref(0, 18)), $mul.ref(15, 1)), 37);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.68, $mul.ref(0, 18)), $mul.ref(16, 1)), 100);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.68, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.3 := $store.i8($M.3, .str.175, 114);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.175, $mul.ref(0, 18)), $mul.ref(1, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.175, $mul.ref(0, 18)), $mul.ref(2, 1)), 97);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.175, $mul.ref(0, 18)), $mul.ref(3, 1)), 100);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.175, $mul.ref(0, 18)), $mul.ref(4, 1)), 95);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.175, $mul.ref(0, 18)), $mul.ref(5, 1)), 105);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.175, $mul.ref(0, 18)), $mul.ref(6, 1)), 110);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.175, $mul.ref(0, 18)), $mul.ref(7, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.175, $mul.ref(0, 18)), $mul.ref(8, 1)), 95);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.175, $mul.ref(0, 18)), $mul.ref(9, 1)), 99);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.175, $mul.ref(0, 18)), $mul.ref(10, 1)), 97);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.175, $mul.ref(0, 18)), $mul.ref(11, 1)), 108);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.175, $mul.ref(0, 18)), $mul.ref(12, 1)), 108);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.175, $mul.ref(0, 18)), $mul.ref(13, 1)), 98);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.175, $mul.ref(0, 18)), $mul.ref(14, 1)), 97);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.175, $mul.ref(0, 18)), $mul.ref(15, 1)), 99);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.175, $mul.ref(0, 18)), $mul.ref(16, 1)), 107);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.175, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.3 := $store.i8($M.3, .str.79, 114);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.79, $mul.ref(0, 19)), $mul.ref(1, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.79, $mul.ref(0, 19)), $mul.ref(2, 1)), 97);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.79, $mul.ref(0, 19)), $mul.ref(3, 1)), 100);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.79, $mul.ref(0, 19)), $mul.ref(4, 1)), 95);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.79, $mul.ref(0, 19)), $mul.ref(5, 1)), 99);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.79, $mul.ref(0, 19)), $mul.ref(6, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.79, $mul.ref(0, 19)), $mul.ref(7, 1)), 114);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.79, $mul.ref(0, 19)), $mul.ref(8, 1)), 108);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.79, $mul.ref(0, 19)), $mul.ref(9, 1)), 95);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.79, $mul.ref(0, 19)), $mul.ref(10, 1)), 99);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.79, $mul.ref(0, 19)), $mul.ref(11, 1)), 97);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.79, $mul.ref(0, 19)), $mul.ref(12, 1)), 108);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.79, $mul.ref(0, 19)), $mul.ref(13, 1)), 108);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.79, $mul.ref(0, 19)), $mul.ref(14, 1)), 98);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.79, $mul.ref(0, 19)), $mul.ref(15, 1)), 97);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.79, $mul.ref(0, 19)), $mul.ref(16, 1)), 99);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.79, $mul.ref(0, 19)), $mul.ref(17, 1)), 107);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.79, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.3 := $store.i8($M.3, .str.164, 115);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.164, $mul.ref(0, 9)), $mul.ref(1, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.164, $mul.ref(0, 9)), $mul.ref(2, 1)), 111);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.164, $mul.ref(0, 9)), $mul.ref(3, 1)), 112);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.164, $mul.ref(0, 9)), $mul.ref(4, 1)), 117);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.164, $mul.ref(0, 9)), $mul.ref(5, 1)), 114);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.164, $mul.ref(0, 9)), $mul.ref(6, 1)), 98);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.164, $mul.ref(0, 9)), $mul.ref(7, 1)), 115);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.164, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.3 := $store.i8($M.3, .str.90, 119);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.90, $mul.ref(0, 23)), $mul.ref(1, 1)), 114);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.90, $mul.ref(0, 23)), $mul.ref(2, 1)), 105);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.90, $mul.ref(0, 23)), $mul.ref(3, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.90, $mul.ref(0, 23)), $mul.ref(4, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.90, $mul.ref(0, 23)), $mul.ref(5, 1)), 95);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.90, $mul.ref(0, 23)), $mul.ref(6, 1)), 99);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.90, $mul.ref(0, 23)), $mul.ref(7, 1)), 111);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.90, $mul.ref(0, 23)), $mul.ref(8, 1)), 109);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.90, $mul.ref(0, 23)), $mul.ref(9, 1)), 109);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.90, $mul.ref(0, 23)), $mul.ref(10, 1)), 97);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.90, $mul.ref(0, 23)), $mul.ref(11, 1)), 110);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.90, $mul.ref(0, 23)), $mul.ref(12, 1)), 100);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.90, $mul.ref(0, 23)), $mul.ref(13, 1)), 95);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.90, $mul.ref(0, 23)), $mul.ref(14, 1)), 99);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.90, $mul.ref(0, 23)), $mul.ref(15, 1)), 97);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.90, $mul.ref(0, 23)), $mul.ref(16, 1)), 108);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.90, $mul.ref(0, 23)), $mul.ref(17, 1)), 108);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.90, $mul.ref(0, 23)), $mul.ref(18, 1)), 98);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.90, $mul.ref(0, 23)), $mul.ref(19, 1)), 97);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.90, $mul.ref(0, 23)), $mul.ref(20, 1)), 99);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.90, $mul.ref(0, 23)), $mul.ref(21, 1)), 107);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.90, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.3 := $store.i8($M.3, .str.123, 114);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.123, $mul.ref(0, 17)), $mul.ref(1, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.123, $mul.ref(0, 17)), $mul.ref(2, 1)), 97);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.123, $mul.ref(0, 17)), $mul.ref(3, 1)), 100);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.123, $mul.ref(0, 17)), $mul.ref(4, 1)), 95);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.123, $mul.ref(0, 17)), $mul.ref(5, 1)), 105);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.123, $mul.ref(0, 17)), $mul.ref(6, 1)), 115);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.123, $mul.ref(0, 17)), $mul.ref(7, 1)), 111);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.123, $mul.ref(0, 17)), $mul.ref(8, 1)), 95);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.123, $mul.ref(0, 17)), $mul.ref(9, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.123, $mul.ref(0, 17)), $mul.ref(10, 1)), 97);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.123, $mul.ref(0, 17)), $mul.ref(11, 1)), 115);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.123, $mul.ref(0, 17)), $mul.ref(12, 1)), 107);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.123, $mul.ref(0, 17)), $mul.ref(13, 1)), 108);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.123, $mul.ref(0, 17)), $mul.ref(14, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.123, $mul.ref(0, 17)), $mul.ref(15, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.123, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.3 := $store.i8($M.3, .str.153, 110);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.153, $mul.ref(0, 9)), $mul.ref(1, 1)), 117);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.153, $mul.ref(0, 9)), $mul.ref(2, 1)), 108);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.153, $mul.ref(0, 9)), $mul.ref(3, 1)), 108);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.153, $mul.ref(0, 9)), $mul.ref(4, 1)), 32);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.153, $mul.ref(0, 9)), $mul.ref(5, 1)), 85);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.153, $mul.ref(0, 9)), $mul.ref(6, 1)), 82);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.153, $mul.ref(0, 9)), $mul.ref(7, 1)), 66);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.153, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.3 := $store.i8($M.3, .str.162, 119);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.162, $mul.ref(0, 19)), $mul.ref(1, 1)), 114);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.162, $mul.ref(0, 19)), $mul.ref(2, 1)), 105);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.162, $mul.ref(0, 19)), $mul.ref(3, 1)), 116);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.162, $mul.ref(0, 19)), $mul.ref(4, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.162, $mul.ref(0, 19)), $mul.ref(5, 1)), 95);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.162, $mul.ref(0, 19)), $mul.ref(6, 1)), 105);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.162, $mul.ref(0, 19)), $mul.ref(7, 1)), 115);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.162, $mul.ref(0, 19)), $mul.ref(8, 1)), 111);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.162, $mul.ref(0, 19)), $mul.ref(9, 1)), 95);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.162, $mul.ref(0, 19)), $mul.ref(10, 1)), 99);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.162, $mul.ref(0, 19)), $mul.ref(11, 1)), 97);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.162, $mul.ref(0, 19)), $mul.ref(12, 1)), 108);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.162, $mul.ref(0, 19)), $mul.ref(13, 1)), 108);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.162, $mul.ref(0, 19)), $mul.ref(14, 1)), 98);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.162, $mul.ref(0, 19)), $mul.ref(15, 1)), 97);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.162, $mul.ref(0, 19)), $mul.ref(16, 1)), 99);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.162, $mul.ref(0, 19)), $mul.ref(17, 1)), 107);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.162, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.3 := $store.i8($M.3, .str.159, 114);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.159, $mul.ref(0, 18)), $mul.ref(1, 1)), 101);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.159, $mul.ref(0, 18)), $mul.ref(2, 1)), 97);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.159, $mul.ref(0, 18)), $mul.ref(3, 1)), 100);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.159, $mul.ref(0, 18)), $mul.ref(4, 1)), 95);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.159, $mul.ref(0, 18)), $mul.ref(5, 1)), 105);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.159, $mul.ref(0, 18)), $mul.ref(6, 1)), 115);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.159, $mul.ref(0, 18)), $mul.ref(7, 1)), 111);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.159, $mul.ref(0, 18)), $mul.ref(8, 1)), 95);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.159, $mul.ref(0, 18)), $mul.ref(9, 1)), 99);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.159, $mul.ref(0, 18)), $mul.ref(10, 1)), 97);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.159, $mul.ref(0, 18)), $mul.ref(11, 1)), 108);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.159, $mul.ref(0, 18)), $mul.ref(12, 1)), 108);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.159, $mul.ref(0, 18)), $mul.ref(13, 1)), 98);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.159, $mul.ref(0, 18)), $mul.ref(14, 1)), 97);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.159, $mul.ref(0, 18)), $mul.ref(15, 1)), 99);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.159, $mul.ref(0, 18)), $mul.ref(16, 1)), 107);
    $M.3 := $store.i8($M.3, $add.ref($add.ref(.str.159, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.114 := $store.i8($M.114, .str.96, 43);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.96, $mul.ref(0, 4)), $mul.ref(1, 1)), 43);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.96, $mul.ref(0, 4)), $mul.ref(2, 1)), 43);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.96, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    call {:si_unique_call 1188} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 634161);

procedure devirtbounce(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: ref);
  free requires assertsPassed;



implementation devirtbounce(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 635193);

procedure devirtbounce.1(funcPtr: ref, arg: ref, arg1: i32, arg2: ref);



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 636225);

procedure devirtbounce.2(funcPtr: ref, arg: ref, arg1: i32, arg2: i64);



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 637257);

procedure devirtbounce.3(funcPtr: ref, arg: ref, arg1: ref);



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 638289);

procedure devirtbounce.4(funcPtr: ref, arg: ref, arg1: ref, arg2: ref);



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



const $u0: i64;

procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.36, $M.37, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.46, $M.47, $M.49, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.56, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.23, $M.61, $M.57, $M.62, $M.58, $M.63, $M.59, $M.64, $M.60, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.72, $M.73, $M.74, $M.75, $M.76, $M.77, $M.78, $M.79, $M.80, $M.7, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.89, $M.90, $M.91, $M.92, $M.93, $M.26, $M.34, $M.110, $M.111, $M.4, $M.2, $M.1, $M.3, $M.112, $M.113, $M.114, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 1189} __SMACK_static_init();
    call {:si_unique_call 1190} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.35, $M.67, $M.16, $M.18, $M.20, $M.22, $M.68, $M.69, $M.36, $M.38, $M.40, $M.42, $M.70, $M.8, $M.10, $M.12, $M.14, $M.71, $M.57, $M.58, $M.59, $M.60, $M.72, $M.73, $M.74, $M.49, $M.51, $M.53, $M.55, $M.75, $M.0, $M.7, $M.76, $M.77, $M.5, $M.79, $M.80, $M.46, $M.47, $M.9, $M.11, $M.13, $M.15, $M.37, $M.39, $M.41, $M.43, $M.50, $M.52, $M.54, $M.56, $M.17, $M.19, $M.21, $M.23, $M.61, $M.62, $M.63, $M.64, $M.66, $M.78, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.89, $M.90, $M.91, $M.92, $M.93, $M.26, $M.34, $M.110, $M.111, $M.4, $M.2, $M.1, $M.3, $M.112, $M.113, $M.114, $CurrAddr;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation gigaset_probe_loop_$bb43(in_$p114: ref, in_$p126: ref, in_$i127: i64, in_$p129: ref, in_$i130: i64, in_$i131: i1, in_$i132: i32, in_$i133: i1, in_$i125: i32) returns (out_$p126: ref, out_$i127: i64, out_$p129: ref, out_$i130: i64, out_$i131: i1, out_$i132: i32, out_$i133: i1, out_$i125: i32)
{

  entry:
    out_$p126, out_$i127, out_$p129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i125 := in_$p126, in_$i127, in_$p129, in_$i130, in_$i131, in_$i132, in_$i133, in_$i125;
    goto $bb43, exit;

  $bb43:
    assume {:verifier.code 0} true;
    goto corral_source_split_168;

  $bb48:
    assume out_$i133 == 1;
    assume {:verifier.code 0} true;
    out_$i125 := out_$i132;
    goto $bb48_dummy;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    out_$i133 := $sle.i32(out_$i132, 2);
    goto corral_source_split_180;

  $bb47:
    assume {:verifier.code 0} true;
    out_$i132 := $add.i32(out_$i125, 1);
    call {:si_unique_call 23} {:cexpr "i"} boogie_si_record_i32(out_$i132);
    goto corral_source_split_179;

  $bb46:
    assume !(out_$i131 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    out_$i131 := $eq.i64(out_$i130, 0);
    goto corral_source_split_175;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    out_$i130 := $p2i.ref.i64(out_$p126);
    goto corral_source_split_174;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p129, out_$p126);
    goto corral_source_split_173;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    out_$p129 := $add.ref($add.ref($add.ref(in_$p114, $mul.ref(0, 824)), $mul.ref(304, 1)), $mul.ref(out_$i127, 8));
    goto corral_source_split_172;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    out_$i127 := $sext.i32.i64(out_$i125);
    goto corral_source_split_171;

  SeqInstr_18:
    goto corral_source_split_170;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} out_$p126 := ldv_usb_alloc_urb_68(8, 208);
    goto SeqInstr_17;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb48_dummy:
    call {:si_unique_call 1} out_$p126, out_$i127, out_$p129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i125 := gigaset_probe_loop_$bb43(in_$p114, out_$p126, out_$i127, out_$p129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i125);
    return;

  exit:
    return;
}



procedure gigaset_probe_loop_$bb43(in_$p114: ref, in_$p126: ref, in_$i127: i64, in_$p129: ref, in_$i130: i64, in_$i131: i1, in_$i132: i32, in_$i133: i1, in_$i125: i32) returns (out_$p126: ref, out_$i127: i64, out_$p129: ref, out_$i130: i64, out_$i131: i1, out_$i132: i32, out_$i133: i1, out_$i125: i32);
  modifies $M.0, assertsPassed;



implementation gigaset_probe_loop_$bb35(in_$p114: ref, in_$p116: ref, in_$i117: i64, in_$p120: ref, in_$i121: i64, in_$i122: i1, in_$i123: i32, in_$i124: i1, in_$i115: i32) returns (out_$p116: ref, out_$i117: i64, out_$p120: ref, out_$i121: i64, out_$i122: i1, out_$i123: i32, out_$i124: i1, out_$i115: i32)
{

  entry:
    out_$p116, out_$i117, out_$p120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i115 := in_$p116, in_$i117, in_$p120, in_$i121, in_$i122, in_$i123, in_$i124, in_$i115;
    goto $bb35, exit;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_154;

  $bb40:
    assume out_$i124 == 1;
    assume {:verifier.code 0} true;
    out_$i115 := out_$i123;
    goto $bb40_dummy;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    out_$i124 := $sle.i32(out_$i123, 2);
    goto corral_source_split_166;

  $bb39:
    assume {:verifier.code 0} true;
    out_$i123 := $add.i32(out_$i115, 1);
    call {:si_unique_call 21} {:cexpr "i"} boogie_si_record_i32(out_$i123);
    goto corral_source_split_165;

  $bb38:
    assume !(out_$i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    out_$i122 := $eq.i64(out_$i121, 0);
    goto corral_source_split_161;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    out_$i121 := $p2i.ref.i64(out_$p116);
    goto corral_source_split_160;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p120, out_$p116);
    goto corral_source_split_159;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    out_$p120 := $add.ref($add.ref($add.ref($add.ref(in_$p114, $mul.ref(0, 824)), $mul.ref(80, 1)), $mul.ref(out_$i117, 24)), $mul.ref(0, 1));
    goto corral_source_split_158;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    out_$i117 := $sext.i32.i64(out_$i115);
    goto corral_source_split_157;

  SeqInstr_15:
    goto corral_source_split_156;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  $bb36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 20} out_$p116 := ldv_usb_alloc_urb_67(8, 208);
    goto SeqInstr_14;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb40_dummy:
    call {:si_unique_call 1} out_$p116, out_$i117, out_$p120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i115 := gigaset_probe_loop_$bb35(in_$p114, out_$p116, out_$i117, out_$p120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i115);
    return;

  exit:
    return;
}



procedure gigaset_probe_loop_$bb35(in_$p114: ref, in_$p116: ref, in_$i117: i64, in_$p120: ref, in_$i121: i64, in_$i122: i1, in_$i123: i32, in_$i124: i1, in_$i115: i32) returns (out_$p116: ref, out_$i117: i64, out_$p120: ref, out_$i121: i64, out_$i122: i1, out_$i123: i32, out_$i124: i1, out_$i115: i32);
  modifies $M.0, assertsPassed;



implementation gigaset_probe_loop_$bb33(in_$p80: ref, in_$p108: ref, in_$p109: ref, in_$i110: i64, in_$p112: ref, in_$p113: ref, in_$p114: ref, in_$p116: ref, in_$i117: i64, in_$p120: ref, in_$i121: i64, in_$i122: i1, in_$i123: i32, in_$i124: i1, in_$i115: i32, in_$p126: ref, in_$i127: i64, in_$p129: ref, in_$i130: i64, in_$i131: i1, in_$i132: i32, in_$i133: i1, in_$i125: i32, in_$i134: i32, in_$i135: i1, in_$i107: i32) returns (out_$p108: ref, out_$p109: ref, out_$i110: i64, out_$p112: ref, out_$p113: ref, out_$p114: ref, out_$p116: ref, out_$i117: i64, out_$p120: ref, out_$i121: i64, out_$i122: i1, out_$i123: i32, out_$i124: i1, out_$i115: i32, out_$p126: ref, out_$i127: i64, out_$p129: ref, out_$i130: i64, out_$i131: i1, out_$i132: i32, out_$i133: i1, out_$i125: i32, out_$i134: i32, out_$i135: i1, out_$i107: i32)
{

  entry:
    out_$p108, out_$p109, out_$i110, out_$p112, out_$p113, out_$p114, out_$p116, out_$i117, out_$p120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i115, out_$p126, out_$i127, out_$p129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i125, out_$i134, out_$i135, out_$i107 := in_$p108, in_$p109, in_$i110, in_$p112, in_$p113, in_$p114, in_$p116, in_$i117, in_$p120, in_$i121, in_$i122, in_$i123, in_$i124, in_$i115, in_$p126, in_$i127, in_$p129, in_$i130, in_$i131, in_$i132, in_$i133, in_$i125, in_$i134, in_$i135, in_$i107;
    goto $bb33, exit;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_144;

  $bb51:
    assume out_$i135 == 1;
    assume {:verifier.code 0} true;
    out_$i107 := out_$i134;
    goto $bb51_dummy;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    out_$i135 := $sle.i32(out_$i134, 1);
    goto corral_source_split_183;

  $bb50:
    assume {:verifier.code 0} true;
    out_$i134 := $add.i32(out_$i107, 1);
    call {:si_unique_call 24} {:cexpr "j"} boogie_si_record_i32(out_$i134);
    goto corral_source_split_182;

  $bb49:
    assume !(out_$i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    out_$i133 := $sle.i32(out_$i132, 2);
    goto corral_source_split_180;

  $bb47:
    assume {:verifier.code 0} true;
    out_$i132 := $add.i32(out_$i125, 1);
    call {:si_unique_call 23} {:cexpr "i"} boogie_si_record_i32(out_$i132);
    goto corral_source_split_179;

  $bb46:
    assume !(out_$i131 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    out_$i131 := $eq.i64(out_$i130, 0);
    goto corral_source_split_175;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    out_$i130 := $p2i.ref.i64(out_$p126);
    goto corral_source_split_174;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p129, out_$p126);
    goto corral_source_split_173;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    out_$p129 := $add.ref($add.ref($add.ref(out_$p114, $mul.ref(0, 824)), $mul.ref(304, 1)), $mul.ref(out_$i127, 8));
    goto corral_source_split_172;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    out_$i127 := $sext.i32.i64(out_$i125);
    goto corral_source_split_171;

  SeqInstr_18:
    goto corral_source_split_170;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} out_$p126 := ldv_usb_alloc_urb_68(8, 208);
    goto SeqInstr_17;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb43:
    call out_$p126, out_$i127, out_$p129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i125 := gigaset_probe_loop_$bb43(out_$p114, out_$p126, out_$i127, out_$p129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i125);
    goto $bb43_last;

  $bb43_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_168;

  $bb42:
    assume {:verifier.code 0} true;
    out_$i125 := 0;
    goto $bb43;

  $bb48:
    assume out_$i133 == 1;
    assume {:verifier.code 0} true;
    out_$i125 := out_$i132;
    assume false;
    return;

  $bb41:
    assume !(out_$i124 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    out_$i124 := $sle.i32(out_$i123, 2);
    goto corral_source_split_166;

  $bb39:
    assume {:verifier.code 0} true;
    out_$i123 := $add.i32(out_$i115, 1);
    call {:si_unique_call 21} {:cexpr "i"} boogie_si_record_i32(out_$i123);
    goto corral_source_split_165;

  $bb38:
    assume !(out_$i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    out_$i122 := $eq.i64(out_$i121, 0);
    goto corral_source_split_161;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    out_$i121 := $p2i.ref.i64(out_$p116);
    goto corral_source_split_160;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p120, out_$p116);
    goto corral_source_split_159;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    out_$p120 := $add.ref($add.ref($add.ref($add.ref(out_$p114, $mul.ref(0, 824)), $mul.ref(80, 1)), $mul.ref(out_$i117, 24)), $mul.ref(0, 1));
    goto corral_source_split_158;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    out_$i117 := $sext.i32.i64(out_$i115);
    goto corral_source_split_157;

  SeqInstr_15:
    goto corral_source_split_156;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  $bb36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 20} out_$p116 := ldv_usb_alloc_urb_67(8, 208);
    goto SeqInstr_14;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb35:
    call out_$p116, out_$i117, out_$p120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i115 := gigaset_probe_loop_$bb35(out_$p114, out_$p116, out_$i117, out_$p120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i115);
    goto $bb35_last;

  $bb35_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_154;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    out_$i115 := 0;
    goto $bb35;

  $bb40:
    assume out_$i124 == 1;
    assume {:verifier.code 0} true;
    out_$i115 := out_$i123;
    assume false;
    return;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    out_$p114 := $load.ref($M.0, out_$p113);
    goto corral_source_split_152;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    out_$p113 := $bitcast.ref.ref(out_$p112);
    goto corral_source_split_151;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    out_$p112 := $add.ref($add.ref(out_$p109, $mul.ref(out_$i110, 480)), $mul.ref(384, 1));
    goto corral_source_split_150;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    goto corral_source_split_149;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    out_$i110 := $sext.i32.i64(out_$i107);
    goto corral_source_split_148;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    out_$p109 := $load.ref($M.0, out_$p108);
    goto corral_source_split_147;

  $bb34:
    assume {:verifier.code 0} true;
    out_$p108 := $add.ref($add.ref(in_$p80, $mul.ref(0, 5232)), $mul.ref(160, 1));
    goto corral_source_split_146;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb51_dummy:
    call {:si_unique_call 1} out_$p108, out_$p109, out_$i110, out_$p112, out_$p113, out_$p114, out_$p116, out_$i117, out_$p120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i115, out_$p126, out_$i127, out_$p129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i125, out_$i134, out_$i135, out_$i107 := gigaset_probe_loop_$bb33(in_$p80, out_$p108, out_$p109, out_$i110, out_$p112, out_$p113, out_$p114, out_$p116, out_$i117, out_$p120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i115, out_$p126, out_$i127, out_$p129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i125, out_$i134, out_$i135, out_$i107);
    return;

  exit:
    return;
}



procedure gigaset_probe_loop_$bb33(in_$p80: ref, in_$p108: ref, in_$p109: ref, in_$i110: i64, in_$p112: ref, in_$p113: ref, in_$p114: ref, in_$p116: ref, in_$i117: i64, in_$p120: ref, in_$i121: i64, in_$i122: i1, in_$i123: i32, in_$i124: i1, in_$i115: i32, in_$p126: ref, in_$i127: i64, in_$p129: ref, in_$i130: i64, in_$i131: i1, in_$i132: i32, in_$i133: i1, in_$i125: i32, in_$i134: i32, in_$i135: i1, in_$i107: i32) returns (out_$p108: ref, out_$p109: ref, out_$i110: i64, out_$p112: ref, out_$p113: ref, out_$p114: ref, out_$p116: ref, out_$i117: i64, out_$p120: ref, out_$i121: i64, out_$i122: i1, out_$i123: i32, out_$i124: i1, out_$i115: i32, out_$p126: ref, out_$i127: i64, out_$p129: ref, out_$i130: i64, out_$i131: i1, out_$i132: i32, out_$i133: i1, out_$i125: i32, out_$i134: i32, out_$i135: i1, out_$i107: i32);
  modifies $M.0, assertsPassed;



implementation gigaset_suspend_loop_$bb71(in_$p4: ref, in_$p10: ref, in_$i129: i64, in_$p130: ref, in_$i131: i64, in_$p132: ref, in_$i133: i32, in_$i134: i1, in_$i135: i8, in_$i136: i1, in_$i137: i1, in_$i138: i64, in_$i139: i1, in_$i141: i1, in_$i140: i1, in_$i142: i32, in_$i143: i1, in_$i144: i64) returns (out_$i129: i64, out_$p130: ref, out_$i131: i64, out_$p132: ref, out_$i133: i32, out_$i134: i1, out_$i135: i8, out_$i136: i1, out_$i137: i1, out_$i138: i64, out_$i139: i1, out_$i141: i1, out_$i140: i1, out_$i142: i32, out_$i143: i1, out_$i144: i64)
{

  entry:
    out_$i129, out_$p130, out_$i131, out_$p132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i141, out_$i140, out_$i142, out_$i143, out_$i144 := in_$i129, in_$p130, in_$i131, in_$p132, in_$i133, in_$i134, in_$i135, in_$i136, in_$i137, in_$i138, in_$i139, in_$i141, in_$i140, in_$i142, in_$i143, in_$i144;
    goto $bb71, exit;

  $bb71:
    assume {:verifier.code 0} true;
    goto corral_source_split_496;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    out_$i129 := out_$i144;
    goto corral_source_split_525_dummy;

  $bb84:
    assume {:verifier.code 0} true;
    call {:si_unique_call 99} out_$i144 := schedule_timeout(out_$i138);
    call {:si_unique_call 100} {:cexpr "__ret___2"} boogie_si_record_i64(out_$i144);
    goto corral_source_split_525;

  $bb82:
    assume !(out_$i143 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    out_$i143 := $ne.i32(out_$i142, 0);
    goto corral_source_split_515;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    out_$i142 := $zext.i1.i32(out_$i140);
    goto corral_source_split_514;

  $bb79:
    assume {:verifier.code 0} true;
    goto corral_source_split_513;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    out_$i140 := out_$i141;
    goto $bb79;

  $bb78:
    assume {:verifier.code 0} true;
    assume out_$i139 == 1;
    goto $bb79;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    out_$i140 := 1;
    assume true;
    goto $bb78, $bb80;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    out_$i139 := $trunc.i8.i1(out_$i135);
    goto corral_source_split_511;

  $bb77:
    assume {:verifier.code 0} true;
    goto corral_source_split_510;

  $bb74:
    assume {:verifier.code 0} true;
    out_$i138 := out_$i129;
    goto $bb77;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    out_$i138 := 1;
    goto $bb77;

  $bb75:
    assume out_$i137 == 1;
    goto corral_source_split_508;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    out_$i137 := $eq.i64(out_$i129, 0);
    goto corral_source_split_506;

  $bb72:
    assume out_$i136 == 1;
    goto corral_source_split_505;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    out_$i136 := $trunc.i8.i1(out_$i135);
    goto corral_source_split_503;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    out_$i135 := $zext.i1.i8(out_$i134);
    call {:si_unique_call 97} {:cexpr "__cond___1"} boogie_si_record_i8(out_$i135);
    goto corral_source_split_502;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    out_$i134 := $eq.i32(out_$i133, 0);
    goto corral_source_split_501;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    out_$i133 := $load.i32($M.0, out_$p132);
    goto corral_source_split_500;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    out_$p132 := $add.ref($add.ref(in_$p10, $mul.ref(0, 888)), $mul.ref(788, 1));
    goto corral_source_split_499;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 95} out_$i131 := prepare_to_wait_event(out_$p130, in_$p4, 2);
    call {:si_unique_call 96} {:cexpr "tmp___5"} boogie_si_record_i64(out_$i131);
    goto corral_source_split_498;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    out_$p130 := $add.ref($add.ref(in_$p10, $mul.ref(0, 888)), $mul.ref(792, 1));
    goto corral_source_split_497;

  $bb73:
    assume {:verifier.code 0} true;
    assume !(out_$i136 == 1);
    goto $bb74;

  $bb76:
    assume {:verifier.code 0} true;
    assume !(out_$i137 == 1);
    goto $bb74;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    out_$i141 := $eq.i64(out_$i138, 0);
    goto corral_source_split_518;

  $bb80:
    assume !(out_$i139 == 1);
    goto corral_source_split_517;

  corral_source_split_525_dummy:
    call {:si_unique_call 1} out_$i129, out_$p130, out_$i131, out_$p132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i141, out_$i140, out_$i142, out_$i143, out_$i144 := gigaset_suspend_loop_$bb71(in_$p4, in_$p10, out_$i129, out_$p130, out_$i131, out_$p132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i141, out_$i140, out_$i142, out_$i143, out_$i144);
    return;

  exit:
    return;
}



procedure gigaset_suspend_loop_$bb71(in_$p4: ref, in_$p10: ref, in_$i129: i64, in_$p130: ref, in_$i131: i64, in_$p132: ref, in_$i133: i32, in_$i134: i1, in_$i135: i8, in_$i136: i1, in_$i137: i1, in_$i138: i64, in_$i139: i1, in_$i141: i1, in_$i140: i1, in_$i142: i32, in_$i143: i1, in_$i144: i64) returns (out_$i129: i64, out_$p130: ref, out_$i131: i64, out_$p132: ref, out_$i133: i32, out_$i134: i1, out_$i135: i8, out_$i136: i1, out_$i137: i1, out_$i138: i64, out_$i139: i1, out_$i141: i1, out_$i140: i1, out_$i142: i32, out_$i143: i1, out_$i144: i64);



implementation gigaset_suspend_loop_$bb19(in_$p3: ref, in_$p10: ref, in_$i38: i64, in_$p39: ref, in_$i40: i64, in_$p41: ref, in_$i42: i32, in_$i43: i32, in_$i44: i1, in_$i45: i8, in_$i46: i1, in_$i47: i1, in_$i48: i64, in_$i49: i1, in_$i51: i1, in_$i50: i1, in_$i52: i32, in_$i53: i1, in_$i54: i64, in_$i55: i64) returns (out_$i38: i64, out_$p39: ref, out_$i40: i64, out_$p41: ref, out_$i42: i32, out_$i43: i32, out_$i44: i1, out_$i45: i8, out_$i46: i1, out_$i47: i1, out_$i48: i64, out_$i49: i1, out_$i51: i1, out_$i50: i1, out_$i52: i32, out_$i53: i1, out_$i54: i64, out_$i55: i64)
{

  entry:
    out_$i38, out_$p39, out_$i40, out_$p41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i51, out_$i50, out_$i52, out_$i53, out_$i54, out_$i55 := in_$i38, in_$p39, in_$i40, in_$p41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i51, in_$i50, in_$i52, in_$i53, in_$i54, in_$i55;
    goto $bb19, exit;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_347;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    out_$i38 := out_$i55;
    goto corral_source_split_377_dummy;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 74} out_$i55 := schedule_timeout(out_$i48);
    call {:si_unique_call 75} {:cexpr "__ret___0"} boogie_si_record_i64(out_$i55);
    goto corral_source_split_377;

  $bb30:
    assume !(out_$i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    out_$i54 := out_$i48;
    assume true;
    goto $bb30;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    out_$i53 := $ne.i32(out_$i52, 0);
    goto corral_source_split_367;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    out_$i52 := $zext.i1.i32(out_$i50);
    goto corral_source_split_366;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_365;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    out_$i50 := out_$i51;
    goto $bb27;

  $bb26:
    assume {:verifier.code 0} true;
    assume out_$i49 == 1;
    goto $bb27;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    out_$i50 := 1;
    assume true;
    goto $bb26, $bb28;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    out_$i49 := $trunc.i8.i1(out_$i45);
    goto corral_source_split_363;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_362;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i48 := out_$i38;
    goto $bb25;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    out_$i48 := 1;
    goto $bb25;

  $bb23:
    assume out_$i47 == 1;
    goto corral_source_split_360;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    out_$i47 := $eq.i64(out_$i38, 0);
    goto corral_source_split_358;

  $bb20:
    assume out_$i46 == 1;
    goto corral_source_split_357;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    out_$i46 := $trunc.i8.i1(out_$i45);
    goto corral_source_split_355;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    out_$i45 := $zext.i1.i8(out_$i44);
    call {:si_unique_call 72} {:cexpr "__cond"} boogie_si_record_i8(out_$i45);
    goto corral_source_split_354;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    out_$i44 := $eq.i32(out_$i43, 0);
    goto corral_source_split_353;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    out_$i43 := $and.i32(out_$i42, 198);
    goto corral_source_split_352;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    out_$i42 := $load.i32($M.0, out_$p41);
    goto corral_source_split_351;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(in_$p10, $mul.ref(0, 888)), $mul.ref(784, 1));
    goto corral_source_split_350;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 70} out_$i40 := prepare_to_wait_event(out_$p39, in_$p3, 2);
    call {:si_unique_call 71} {:cexpr "tmp___2"} boogie_si_record_i64(out_$i40);
    goto corral_source_split_349;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(in_$p10, $mul.ref(0, 888)), $mul.ref(792, 1));
    goto corral_source_split_348;

  $bb21:
    assume {:verifier.code 0} true;
    assume !(out_$i46 == 1);
    goto $bb22;

  $bb24:
    assume {:verifier.code 0} true;
    assume !(out_$i47 == 1);
    goto $bb22;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    out_$i51 := $eq.i64(out_$i48, 0);
    goto corral_source_split_370;

  $bb28:
    assume !(out_$i49 == 1);
    goto corral_source_split_369;

  corral_source_split_377_dummy:
    call {:si_unique_call 1} out_$i38, out_$p39, out_$i40, out_$p41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i51, out_$i50, out_$i52, out_$i53, out_$i54, out_$i55 := gigaset_suspend_loop_$bb19(in_$p3, in_$p10, out_$i38, out_$p39, out_$i40, out_$p41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i51, out_$i50, out_$i52, out_$i53, out_$i54, out_$i55);
    return;

  exit:
    return;
}



procedure gigaset_suspend_loop_$bb19(in_$p3: ref, in_$p10: ref, in_$i38: i64, in_$p39: ref, in_$i40: i64, in_$p41: ref, in_$i42: i32, in_$i43: i32, in_$i44: i1, in_$i45: i8, in_$i46: i1, in_$i47: i1, in_$i48: i64, in_$i49: i1, in_$i51: i1, in_$i50: i1, in_$i52: i32, in_$i53: i1, in_$i54: i64, in_$i55: i64) returns (out_$i38: i64, out_$p39: ref, out_$i40: i64, out_$p41: ref, out_$i42: i32, out_$i43: i32, out_$i44: i1, out_$i45: i8, out_$i46: i1, out_$i47: i1, out_$i48: i64, out_$i49: i1, out_$i51: i1, out_$i50: i1, out_$i52: i32, out_$i53: i1, out_$i54: i64, out_$i55: i64);



implementation start_cbsend_loop_$bb28(in_$p0: ref, in_$p3: ref, in_$p41: ref, in_$p42: ref, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$i53: i32, in_$i54: i32, in_$i55: i1, in_$i56: i32, in_$i57: i64, in_$i58: i64, in_$i59: i1, in_$i60: i32, in_$p61: ref, in_$i62: i64, in_$i63: i1, in_$p47: ref, in_$i48: i32, in_$i65: i32, in_$i66: i32, in_$i67: i1, in_$i68: i32, in_$i64: i32) returns (out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$i53: i32, out_$i54: i32, out_$i55: i1, out_$i56: i32, out_$i57: i64, out_$i58: i64, out_$i59: i1, out_$i60: i32, out_$p61: ref, out_$i62: i64, out_$i63: i1, out_$p47: ref, out_$i48: i32, out_$i65: i32, out_$i66: i32, out_$i67: i1, out_$i68: i32, out_$i64: i32)
{

  entry:
    out_$p49, out_$p50, out_$p51, out_$p52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p61, out_$i62, out_$i63, out_$p47, out_$i48, out_$i65, out_$i66, out_$i67, out_$i68, out_$i64 := in_$p49, in_$p50, in_$p51, in_$p52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i59, in_$i60, in_$p61, in_$i62, in_$i63, in_$p47, in_$i48, in_$i65, in_$i66, in_$i67, in_$i68, in_$i64;
    goto $bb28, exit;

  $bb28:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1623;

  $bb33:
    assume out_$i63 == 1;
    assume {:verifier.code 0} true;
    out_$p47, out_$i48 := out_$p61, out_$i60;
    goto $bb33_dummy;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    out_$i64 := out_$i60;
    assume true;
    goto $bb33;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    out_$i63 := $ne.i64(out_$i62, 0);
    goto corral_source_split_1647;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    out_$i62 := $p2i.ref.i64(out_$p61);
    goto corral_source_split_1646;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    out_$p61 := $load.ref($M.0, in_$p42);
    goto corral_source_split_1645;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_1644;

  $bb31:
    assume !(out_$i59 == 1);
    assume {:verifier.code 0} true;
    out_$i60 := out_$i48;
    goto $bb32;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    out_$i60 := out_$i54;
    goto $bb32;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 391} complete_cb(in_$p0);
    goto corral_source_split_1642;

  $bb30:
    assume out_$i59 == 1;
    goto corral_source_split_1641;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    out_$i59 := $ne.i64(out_$i58, 0);
    goto corral_source_split_1639;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 389} out_$i58 := ldv__builtin_expect(out_$i57, 0);
    call {:si_unique_call 390} {:cexpr "tmp___1"} boogie_si_record_i64(out_$i58);
    goto corral_source_split_1638;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    out_$i57 := $sext.i32.i64(out_$i56);
    goto corral_source_split_1637;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    out_$i56 := $zext.i1.i32(out_$i55);
    goto corral_source_split_1636;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    out_$i55 := $ne.i32(out_$i54, 0);
    goto corral_source_split_1635;

  SeqInstr_75:
    call {:si_unique_call 388} {:cexpr "rc"} boogie_si_record_i32(out_$i54);
    goto corral_source_split_1634;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} out_$i54 := atwrite_submit(in_$p0, out_$p51, out_$i53);
    goto SeqInstr_74;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    out_$i53 := $load.i32($M.0, out_$p52);
    goto corral_source_split_1633;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(out_$p47, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_1632;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    out_$p51 := $bitcast.ref.ref(out_$p50);
    goto corral_source_split_1631;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(out_$p47, $mul.ref(0, 32)), $mul.ref(32, 1));
    goto corral_source_split_1630;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p49, 0);
    goto corral_source_split_1629;

  $bb29:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(in_$p3, $mul.ref(0, 888)), $mul.ref(320, 1));
    goto corral_source_split_1628;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb35:
    assume out_$i67 == 1;
    goto corral_source_split_1651;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    out_$i68 := out_$i48;
    assume true;
    goto $bb35;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    out_$i67 := $ne.i32(out_$i66, 0);
    goto corral_source_split_1626;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    out_$i66 := $and.i32(out_$i65, 8);
    goto corral_source_split_1625;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    out_$i65 := $load.i32($M.0, in_$p41);
    goto corral_source_split_1624;

  $bb33_dummy:
    call {:si_unique_call 1} out_$p49, out_$p50, out_$p51, out_$p52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p61, out_$i62, out_$i63, out_$p47, out_$i48, out_$i65, out_$i66, out_$i67, out_$i68, out_$i64 := start_cbsend_loop_$bb28(in_$p0, in_$p3, in_$p41, in_$p42, out_$p49, out_$p50, out_$p51, out_$p52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p61, out_$i62, out_$i63, out_$p47, out_$i48, out_$i65, out_$i66, out_$i67, out_$i68, out_$i64);
    return;

  exit:
    return;
}



procedure start_cbsend_loop_$bb28(in_$p0: ref, in_$p3: ref, in_$p41: ref, in_$p42: ref, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$i53: i32, in_$i54: i32, in_$i55: i1, in_$i56: i32, in_$i57: i64, in_$i58: i64, in_$i59: i1, in_$i60: i32, in_$p61: ref, in_$i62: i64, in_$i63: i1, in_$p47: ref, in_$i48: i32, in_$i65: i32, in_$i66: i32, in_$i67: i1, in_$i68: i32, in_$i64: i32) returns (out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$i53: i32, out_$i54: i32, out_$i55: i1, out_$i56: i32, out_$i57: i64, out_$i58: i64, out_$i59: i1, out_$i60: i32, out_$p61: ref, out_$i62: i64, out_$i63: i1, out_$p47: ref, out_$i48: i32, out_$i65: i32, out_$i66: i32, out_$i67: i1, out_$i68: i32, out_$i64: i32);
  modifies $M.0, $CurrAddr, $M.7, $M.17, $M.16, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22, assertsPassed;



implementation start_cbsend_loop_$bb18(in_$p0: ref, in_$p33: ref, in_$p37: ref, in_$i38: i64, in_$i39: i1) returns (out_$p37: ref, out_$i38: i64, out_$i39: i1)
{

  entry:
    out_$p37, out_$i38, out_$i39 := in_$p37, in_$i38, in_$i39;
    goto $bb18, exit;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20:
    assume {:verifier.code 0} true;
    assume out_$i39 == 1;
    goto $bb20_dummy;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    out_$i39 := $ne.i64(out_$i38, 0);
    goto corral_source_split_1607;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    out_$i38 := $p2i.ref.i64(out_$p37);
    goto corral_source_split_1606;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    out_$p37 := $load.ref($M.0, in_$p33);
    goto corral_source_split_1605;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} complete_cb(in_$p0);
    goto corral_source_split_1604;

  $bb20_dummy:
    call {:si_unique_call 1} out_$p37, out_$i38, out_$i39 := start_cbsend_loop_$bb18(in_$p0, in_$p33, out_$p37, out_$i38, out_$i39);
    return;

  exit:
    return;
}



procedure start_cbsend_loop_$bb18(in_$p0: ref, in_$p33: ref, in_$p37: ref, in_$i38: i64, in_$i39: i1) returns (out_$p37: ref, out_$i38: i64, out_$i39: i1);
  modifies $M.0, $CurrAddr;



implementation gigaset_write_cmd_loop_$bb28(in_$p0: ref, in_$p97: ref, in_$p101: ref, in_$i102: i64, in_$i103: i1) returns (out_$p101: ref, out_$i102: i64, out_$i103: i1)
{

  entry:
    out_$p101, out_$i102, out_$i103 := in_$p101, in_$i102, in_$i103;
    goto $bb28, exit;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb30:
    assume {:verifier.code 0} true;
    assume out_$i103 == 1;
    goto $bb30_dummy;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    out_$i103 := $ne.i64(out_$i102, 0);
    goto corral_source_split_2307;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    out_$i102 := $p2i.ref.i64(out_$p101);
    goto corral_source_split_2306;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    out_$p101 := $load.ref($M.0, in_$p97);
    goto corral_source_split_2305;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 523} complete_cb(in_$p0);
    goto corral_source_split_2304;

  $bb30_dummy:
    call {:si_unique_call 1} out_$p101, out_$i102, out_$i103 := gigaset_write_cmd_loop_$bb28(in_$p0, in_$p97, out_$p101, out_$i102, out_$i103);
    return;

  exit:
    return;
}



procedure gigaset_write_cmd_loop_$bb28(in_$p0: ref, in_$p97: ref, in_$p101: ref, in_$i102: i64, in_$i103: i1) returns (out_$p101: ref, out_$i102: i64, out_$i103: i1);
  modifies $M.0, $CurrAddr;



implementation gigaset_isoc_input_loop_$bb4(in_$p0: ref, in_$p2: ref, in_$p5: ref, in_$i10: i32, in_$i11: i32, in_$i12: i1, in_$i13: i32, in_$i14: i64, in_$i15: i64, in_$i16: i1, in_$i18: i1, in_$i19: i32, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$p23: ref, in_$i24: i32, in_$i25: i32, in_$i26: i32, in_$i27: i1, in_$i28: i32, in_$i29: i64, in_$i30: i64, in_$i31: i1, in_$p33: ref, in_$i34: i32, in_$i35: i1, in_$i36: i64, in_$p37: ref, in_$p38: ref, in_$i39: i64, in_$i40: i32, in_$i41: i1, in_$i42: i32, in_$i43: i32, in_$i44: i32, in_$i45: i1, in_$i46: i32, in_$i47: i64, in_$i48: i64, in_$i49: i1, in_$p51: ref, in_$i52: i32, in_$i53: i1, in_$i8: i32, in_$i9: i32, in_vslice_dummy_var_75: i32, in_vslice_dummy_var_76: i32, in_vslice_dummy_var_77: i32) returns (out_$i10: i32, out_$i11: i32, out_$i12: i1, out_$i13: i32, out_$i14: i64, out_$i15: i64, out_$i16: i1, out_$i18: i1, out_$i19: i32, out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$p23: ref, out_$i24: i32, out_$i25: i32, out_$i26: i32, out_$i27: i1, out_$i28: i32, out_$i29: i64, out_$i30: i64, out_$i31: i1, out_$p33: ref, out_$i34: i32, out_$i35: i1, out_$i36: i64, out_$p37: ref, out_$p38: ref, out_$i39: i64, out_$i40: i32, out_$i41: i1, out_$i42: i32, out_$i43: i32, out_$i44: i32, out_$i45: i1, out_$i46: i32, out_$i47: i64, out_$i48: i64, out_$i49: i1, out_$p51: ref, out_$i52: i32, out_$i53: i1, out_$i8: i32, out_$i9: i32, out_vslice_dummy_var_75: i32, out_vslice_dummy_var_76: i32, out_vslice_dummy_var_77: i32)
{

  entry:
    out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i18, out_$i19, out_$p20, out_$p21, out_$i22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p33, out_$i34, out_$i35, out_$i36, out_$p37, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$p51, out_$i52, out_$i53, out_$i8, out_$i9, out_vslice_dummy_var_75, out_vslice_dummy_var_76, out_vslice_dummy_var_77 := in_$i10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i18, in_$i19, in_$p20, in_$p21, in_$i22, in_$p23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$p33, in_$i34, in_$i35, in_$i36, in_$p37, in_$p38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i49, in_$p51, in_$i52, in_$i53, in_$i8, in_$i9, in_vslice_dummy_var_75, in_vslice_dummy_var_76, in_vslice_dummy_var_77;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2866;

  $bb24:
    assume out_$i53 == 1;
    assume {:verifier.code 0} true;
    out_$i8, out_$i9 := out_$i52, out_$i42;
    goto $bb24_dummy;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    out_$i53 := $ne.i32(out_$i52, out_$i42);
    goto corral_source_split_2934;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    out_$i52 := $load.i32($M.0, in_$p5);
    call {:si_unique_call 657} {:cexpr "tail"} boogie_si_record_i32(out_$i52);
    goto corral_source_split_2933;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p51, out_$i42);
    goto corral_source_split_2932;

  $bb23:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8216)), $mul.ref(12, 1));
    goto corral_source_split_2931;

  $bb22:
    assume !(out_$i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} out_vslice_dummy_var_77 := printk.ref.i32(.str.11, out_$i42);
    goto corral_source_split_2929;

  $bb21:
    assume out_$i49 == 1;
    goto corral_source_split_2928;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    out_$i49 := $ne.i64(out_$i48, 0);
    goto corral_source_split_2926;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 654} out_$i48 := ldv__builtin_expect(out_$i47, 0);
    call {:si_unique_call 655} {:cexpr "tmp___1"} boogie_si_record_i64(out_$i48);
    goto corral_source_split_2925;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    out_$i47 := $sext.i32.i64(out_$i46);
    goto corral_source_split_2924;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    out_$i46 := $zext.i1.i32(out_$i45);
    goto corral_source_split_2923;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    out_$i45 := $ne.i32(out_$i44, 0);
    goto corral_source_split_2922;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    out_$i44 := $and.i32(out_$i43, 8);
    goto corral_source_split_2921;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    out_$i43 := $load.i32($M.0, gigaset_debuglevel);
    goto corral_source_split_2920;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_2919;

  $bb19:
    assume !(out_$i41 == 1);
    assume {:verifier.code 0} true;
    out_$i42 := out_$i40;
    goto $bb20;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    out_$i42 := 0;
    goto $bb20;

  $bb18:
    assume out_$i41 == 1;
    goto corral_source_split_2917;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    out_$i41 := $eq.i32(out_$i40, 8192);
    goto corral_source_split_2915;

  $bb17:
    assume {:verifier.code 0} true;
    out_$i40 := $add.i32(out_$i9, out_$i24);
    call {:si_unique_call 653} {:cexpr "head"} boogie_si_record_i32(out_$i40);
    goto corral_source_split_2914;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} cmd_loop(out_$p23, out_$i24, in_$p0);
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} gigaset_if_receive(out_$p38, out_$p23, out_$i39);
    goto corral_source_split_2910;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    out_$i39 := $zext.i32.i64(out_$i24);
    goto corral_source_split_2909;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    out_$p38 := $load.ref($M.0, out_$p37);
    goto corral_source_split_2908;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8216)), $mul.ref(0, 1));
    goto corral_source_split_2907;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 650} gigaset_dbg_buffer(2097152, .str.10, out_$i36, out_$p23);
    goto corral_source_split_2906;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    out_$i36 := $zext.i32.i64(out_$i24);
    goto corral_source_split_2905;

  $bb15:
    assume out_$i35 == 1;
    goto corral_source_split_2904;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    out_$i35 := $eq.i32(out_$i34, 2);
    goto corral_source_split_2902;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    out_$i34 := $load.i32($M.0, out_$p33);
    goto corral_source_split_2901;

  $bb14:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(in_$p2, $mul.ref(0, 5232)), $mul.ref(144, 1));
    goto corral_source_split_2900;

  $bb13:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 649} out_vslice_dummy_var_76 := printk.ref.i32(.str.9, out_$i24);
    goto corral_source_split_2898;

  $bb12:
    assume out_$i31 == 1;
    goto corral_source_split_2897;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    out_$i31 := $ne.i64(out_$i30, 0);
    goto corral_source_split_2895;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 647} out_$i30 := ldv__builtin_expect(out_$i29, 0);
    call {:si_unique_call 648} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i30);
    goto corral_source_split_2894;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    out_$i29 := $sext.i32.i64(out_$i28);
    goto corral_source_split_2893;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    out_$i28 := $zext.i1.i32(out_$i27);
    goto corral_source_split_2892;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    out_$i27 := $ne.i32(out_$i26, 0);
    goto corral_source_split_2891;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    out_$i26 := $and.i32(out_$i25, 8);
    goto corral_source_split_2890;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i32($M.0, gigaset_debuglevel);
    goto corral_source_split_2889;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    out_$i24 := $sub.i32(out_$i19, out_$i9);
    call {:si_unique_call 646} {:cexpr "numbytes"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_2888;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref(out_$p21, $mul.ref(out_$i22, 1));
    goto corral_source_split_2887;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    out_$i22 := $zext.i32.i64(out_$i9);
    goto corral_source_split_2886;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    out_$p21 := $bitcast.ref.ref(out_$p20);
    goto corral_source_split_2885;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8216)), $mul.ref(20, 1));
    goto corral_source_split_2884;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_2883;

  $bb10:
    assume !(out_$i18 == 1);
    assume {:verifier.code 0} true;
    out_$i19 := out_$i8;
    goto $bb11;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    out_$i19 := 8192;
    goto $bb11;

  $bb9:
    assume out_$i18 == 1;
    goto corral_source_split_2881;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i18 := $ugt.i32(out_$i9, out_$i8);
    goto corral_source_split_2879;

  $bb7:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} out_vslice_dummy_var_75 := printk.ref.i32.i32(.str.8, out_$i9, out_$i8);
    goto corral_source_split_2877;

  $bb6:
    assume out_$i16 == 1;
    goto corral_source_split_2876;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    out_$i16 := $ne.i64(out_$i15, 0);
    goto corral_source_split_2874;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 643} out_$i15 := ldv__builtin_expect(out_$i14, 0);
    call {:si_unique_call 644} {:cexpr "tmp"} boogie_si_record_i64(out_$i15);
    goto corral_source_split_2873;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    out_$i14 := $sext.i32.i64(out_$i13);
    goto corral_source_split_2872;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    out_$i13 := $zext.i1.i32(out_$i12);
    goto corral_source_split_2871;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    out_$i12 := $ne.i32(out_$i11, 0);
    goto corral_source_split_2870;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    out_$i11 := $and.i32(out_$i10, 8);
    goto corral_source_split_2869;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i10 := $load.i32($M.0, gigaset_debuglevel);
    goto corral_source_split_2868;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb16:
    assume !(out_$i35 == 1);
    goto corral_source_split_2912;

  $bb24_dummy:
    call {:si_unique_call 1} out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i18, out_$i19, out_$p20, out_$p21, out_$i22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p33, out_$i34, out_$i35, out_$i36, out_$p37, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$p51, out_$i52, out_$i53, out_$i8, out_$i9, out_vslice_dummy_var_75, out_vslice_dummy_var_76, out_vslice_dummy_var_77 := gigaset_isoc_input_loop_$bb4(in_$p0, in_$p2, in_$p5, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i18, out_$i19, out_$p20, out_$p21, out_$i22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p33, out_$i34, out_$i35, out_$i36, out_$p37, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$p51, out_$i52, out_$i53, out_$i8, out_$i9, out_vslice_dummy_var_75, out_vslice_dummy_var_76, out_vslice_dummy_var_77);
    return;

  exit:
    return;
}



procedure gigaset_isoc_input_loop_$bb4(in_$p0: ref, in_$p2: ref, in_$p5: ref, in_$i10: i32, in_$i11: i32, in_$i12: i1, in_$i13: i32, in_$i14: i64, in_$i15: i64, in_$i16: i1, in_$i18: i1, in_$i19: i32, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$p23: ref, in_$i24: i32, in_$i25: i32, in_$i26: i32, in_$i27: i1, in_$i28: i32, in_$i29: i64, in_$i30: i64, in_$i31: i1, in_$p33: ref, in_$i34: i32, in_$i35: i1, in_$i36: i64, in_$p37: ref, in_$p38: ref, in_$i39: i64, in_$i40: i32, in_$i41: i1, in_$i42: i32, in_$i43: i32, in_$i44: i32, in_$i45: i1, in_$i46: i32, in_$i47: i64, in_$i48: i64, in_$i49: i1, in_$p51: ref, in_$i52: i32, in_$i53: i1, in_$i8: i32, in_$i9: i32, in_vslice_dummy_var_75: i32, in_vslice_dummy_var_76: i32, in_vslice_dummy_var_77: i32) returns (out_$i10: i32, out_$i11: i32, out_$i12: i1, out_$i13: i32, out_$i14: i64, out_$i15: i64, out_$i16: i1, out_$i18: i1, out_$i19: i32, out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$p23: ref, out_$i24: i32, out_$i25: i32, out_$i26: i32, out_$i27: i1, out_$i28: i32, out_$i29: i64, out_$i30: i64, out_$i31: i1, out_$p33: ref, out_$i34: i32, out_$i35: i1, out_$i36: i64, out_$p37: ref, out_$p38: ref, out_$i39: i64, out_$i40: i32, out_$i41: i1, out_$i42: i32, out_$i43: i32, out_$i44: i32, out_$i45: i1, out_$i46: i32, out_$i47: i64, out_$i48: i64, out_$i49: i1, out_$p51: ref, out_$i52: i32, out_$i53: i1, out_$i8: i32, out_$i9: i32, out_vslice_dummy_var_75: i32, out_vslice_dummy_var_76: i32, out_vslice_dummy_var_77: i32);
  modifies $M.0;



implementation cmd_loop_loop_$bb4(in_$p4: ref, in_$p13: ref, in_$i14: i8, in_$i15: i32, in_$i16: i1, in_$i17: i1, in_$i18: i1, in_$i19: i1, in_$p21: ref, in_$i22: i8, in_$i23: i32, in_$i24: i1, in_$p26: ref, in_$i28: i1, in_$p29: ref, in_$p30: ref, in_$i31: i32, in_$p32: ref, in_$i33: i64, in_$p34: ref, in_$p35: ref, in_$p37: ref, in_$i38: i1, in_$i39: i64, in_$p41: ref, in_$i42: i32, in_$i27: i32, in_$i43: i32, in_$i44: i1, in_$i10: i32, in_$p11: ref, in_$i12: i32, in_$i45: i32) returns (out_$p13: ref, out_$i14: i8, out_$i15: i32, out_$i16: i1, out_$i17: i1, out_$i18: i1, out_$i19: i1, out_$p21: ref, out_$i22: i8, out_$i23: i32, out_$i24: i1, out_$p26: ref, out_$i28: i1, out_$p29: ref, out_$p30: ref, out_$i31: i32, out_$p32: ref, out_$i33: i64, out_$p34: ref, out_$p35: ref, out_$p37: ref, out_$i38: i1, out_$i39: i64, out_$p41: ref, out_$i42: i32, out_$i27: i32, out_$i43: i32, out_$i44: i1, out_$i10: i32, out_$p11: ref, out_$i12: i32, out_$i45: i32)
{

  entry:
    out_$p13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$p21, out_$i22, out_$i23, out_$i24, out_$p26, out_$i28, out_$p29, out_$p30, out_$i31, out_$p32, out_$i33, out_$p34, out_$p35, out_$p37, out_$i38, out_$i39, out_$p41, out_$i42, out_$i27, out_$i43, out_$i44, out_$i10, out_$p11, out_$i12, out_$i45 := in_$p13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$p21, in_$i22, in_$i23, in_$i24, in_$p26, in_$i28, in_$p29, in_$p30, in_$i31, in_$p32, in_$i33, in_$p34, in_$p35, in_$p37, in_$i38, in_$i39, in_$p41, in_$i42, in_$i27, in_$i43, in_$i44, in_$i10, in_$p11, in_$i12, in_$i45;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2952;

  $bb30:
    assume out_$i44 == 1;
    assume {:verifier.code 0} true;
    out_$i10, out_$p11, out_$i12 := out_$i43, out_$p13, out_$i27;
    goto $bb30_dummy;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    out_$i45 := out_$i27;
    assume true;
    goto $bb30;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    out_$i44 := $ne.i32(out_$i10, 0);
    goto corral_source_split_2974;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    out_$i43 := $sub.i32(out_$i10, 1);
    call {:si_unique_call 666} {:cexpr "numbytes"} boogie_si_record_i32(out_$i43);
    goto corral_source_split_2973;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_2972;

  $bb29:
    assume {:verifier.code 0} true;
    out_$i27 := out_$i42;
    goto $bb20;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    out_$i27 := 0;
    goto $bb20;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    out_$i27 := out_$i12;
    goto $bb20;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p26, 0);
    goto corral_source_split_2970;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref($add.ref(in_$p4, $mul.ref(0, 5232)), $mul.ref(4704, 1)), $mul.ref(0, 1));
    goto corral_source_split_2969;

  $bb18:
    assume out_$i24 == 1;
    goto corral_source_split_2968;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    out_$i24 := $eq.i32(out_$i23, 13);
    goto corral_source_split_2966;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    out_$i23 := $zext.i8.i32(out_$i22);
    goto corral_source_split_2965;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    out_$i22 := $load.i8($M.0, out_$p21);
    goto corral_source_split_2964;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref($add.ref(in_$p4, $mul.ref(0, 5232)), $mul.ref(4704, 1)), $mul.ref(0, 1));
    goto corral_source_split_2963;

  $bb15:
    assume out_$i19 == 1;
    goto corral_source_split_2962;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    out_$i19 := $eq.i32(out_$i12, 0);
    goto corral_source_split_2960;

  $bb13:
    assume out_$i18 == 1;
    goto corral_source_split_2959;

  $bb7:
    assume out_$i16 == 1;
    assume {:verifier.code 0} true;
    out_$i18 := $eq.i32(out_$i15, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb6:
    assume {:verifier.code 0} true;
    out_$i16 := $slt.i32(out_$i15, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    out_$i15 := $zext.i8.i32(out_$i14);
    assume {:verifier.code 0} true;
    goto $bb6;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    out_$i14 := $load.i8($M.0, out_$p11);
    call {:si_unique_call 665} {:cexpr "c"} boogie_si_record_i8(out_$i14);
    goto corral_source_split_2955;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref(out_$p11, $mul.ref(1, 1));
    goto corral_source_split_2954;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p37, out_$i14);
    goto corral_source_split_2990;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref($add.ref(in_$p4, $mul.ref(0, 5232)), $mul.ref(4704, 1)), $mul.ref(0, 1));
    goto corral_source_split_2989;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 669} gigaset_handle_modem_response(in_$p4);
    goto corral_source_split_2988;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 668} gigaset_dbg_buffer(8192, .str.10, out_$i33, out_$p35);
    goto corral_source_split_2987;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    out_$p35 := $bitcast.ref.ref(out_$p34);
    goto corral_source_split_2986;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(in_$p4, $mul.ref(0, 5232)), $mul.ref(4704, 1));
    goto corral_source_split_2985;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    out_$i33 := $zext.i32.i64(out_$i31);
    goto corral_source_split_2984;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p32, out_$i31);
    goto corral_source_split_2983;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(in_$p4, $mul.ref(0, 5232)), $mul.ref(5216, 1));
    goto corral_source_split_2982;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_2981;

  $bb23:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    out_$i31 := out_$i12;
    goto $bb24;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    out_$i31 := 511;
    goto $bb24;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 667} dev_warn.ref.ref.i32(out_$p30, .str.226, out_$i12);
    goto corral_source_split_2979;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    out_$p30 := $load.ref($M.0, out_$p29);
    goto corral_source_split_2978;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(in_$p4, $mul.ref(0, 5232)), $mul.ref(16, 1));
    goto corral_source_split_2977;

  $bb22:
    assume out_$i28 == 1;
    goto corral_source_split_2976;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i28 := $ugt.i32(out_$i12, 510);
    goto corral_source_split_2957;

  $bb9:
    assume {:verifier.code 0} true;
    assume out_$i17 == 1;
    goto $bb10;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb16:
    assume {:verifier.code 0} true;
    assume !(out_$i19 == 1);
    goto $bb17;

  $bb19:
    assume {:verifier.code 0} true;
    assume !(out_$i24 == 1);
    goto $bb17;

  $bb8:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    out_$i17 := $eq.i32(out_$i15, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb11;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb28:
    assume {:verifier.code 0} true;
    out_$i42 := $add.i32(out_$i12, 1);
    call {:si_unique_call 670} {:cexpr "cbytes"} boogie_si_record_i32(out_$i42);
    goto corral_source_split_2999;

  $bb27:
    assume !(out_$i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p41, out_$i14);
    goto corral_source_split_2997;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref($add.ref(in_$p4, $mul.ref(0, 5232)), $mul.ref(4704, 1)), $mul.ref(out_$i39, 1));
    goto corral_source_split_2996;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    out_$i39 := $zext.i32.i64(out_$i12);
    goto corral_source_split_2995;

  $bb26:
    assume out_$i38 == 1;
    goto corral_source_split_2994;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb25:
    assume {:verifier.code 0} true;
    out_$i38 := $ule.i32(out_$i12, 510);
    goto corral_source_split_2992;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb11:
    assume {:verifier.code 0} true;
    assume !(out_$i17 == 1);
    goto $bb12;

  $bb14:
    assume {:verifier.code 0} true;
    assume !(out_$i18 == 1);
    goto $bb12;

  $bb30_dummy:
    call {:si_unique_call 1} out_$p13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$p21, out_$i22, out_$i23, out_$i24, out_$p26, out_$i28, out_$p29, out_$p30, out_$i31, out_$p32, out_$i33, out_$p34, out_$p35, out_$p37, out_$i38, out_$i39, out_$p41, out_$i42, out_$i27, out_$i43, out_$i44, out_$i10, out_$p11, out_$i12, out_$i45 := cmd_loop_loop_$bb4(in_$p4, out_$p13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$p21, out_$i22, out_$i23, out_$i24, out_$p26, out_$i28, out_$p29, out_$p30, out_$i31, out_$p32, out_$i33, out_$p34, out_$p35, out_$p37, out_$i38, out_$i39, out_$p41, out_$i42, out_$i27, out_$i43, out_$i44, out_$i10, out_$p11, out_$i12, out_$i45);
    return;

  exit:
    return;
}



procedure cmd_loop_loop_$bb4(in_$p4: ref, in_$p13: ref, in_$i14: i8, in_$i15: i32, in_$i16: i1, in_$i17: i1, in_$i18: i1, in_$i19: i1, in_$p21: ref, in_$i22: i8, in_$i23: i32, in_$i24: i1, in_$p26: ref, in_$i28: i1, in_$p29: ref, in_$p30: ref, in_$i31: i32, in_$p32: ref, in_$i33: i64, in_$p34: ref, in_$p35: ref, in_$p37: ref, in_$i38: i1, in_$i39: i64, in_$p41: ref, in_$i42: i32, in_$i27: i32, in_$i43: i32, in_$i44: i1, in_$i10: i32, in_$p11: ref, in_$i12: i32, in_$i45: i32) returns (out_$p13: ref, out_$i14: i8, out_$i15: i32, out_$i16: i1, out_$i17: i1, out_$i18: i1, out_$i19: i1, out_$p21: ref, out_$i22: i8, out_$i23: i32, out_$i24: i1, out_$p26: ref, out_$i28: i1, out_$p29: ref, out_$p30: ref, out_$i31: i32, out_$p32: ref, out_$i33: i64, out_$p34: ref, out_$p35: ref, out_$p37: ref, out_$i38: i1, out_$i39: i64, out_$p41: ref, out_$i42: i32, out_$i27: i32, out_$i43: i32, out_$i44: i1, out_$i10: i32, out_$p11: ref, out_$i12: i32, out_$i45: i32);
  modifies $M.0;



implementation dump_urb_loop_$bb21(in_$i0: i32, in_$p2: ref, in_$p94: ref, in_$p98: ref, in_$p99: ref, in_$i100: i64, in_$i102: i32, in_$i103: i32, in_$i104: i1, in_$i105: i32, in_$i106: i64, in_$i107: i64, in_$i108: i1, in_$p109: ref, in_$i110: i32, in_$p111: ref, in_$i112: i32, in_$p113: ref, in_$i114: i32, in_$p115: ref, in_$i116: i32, in_$i118: i32, in_$i119: i32, in_$i120: i1, in_$i97: i32, in_vslice_dummy_var_91: i32) returns (out_$p98: ref, out_$p99: ref, out_$i100: i64, out_$i102: i32, out_$i103: i32, out_$i104: i1, out_$i105: i32, out_$i106: i64, out_$i107: i64, out_$i108: i1, out_$p109: ref, out_$i110: i32, out_$p111: ref, out_$i112: i32, out_$p113: ref, out_$i114: i32, out_$p115: ref, out_$i116: i32, out_$i118: i32, out_$i119: i32, out_$i120: i1, out_$i97: i32, out_vslice_dummy_var_91: i32)
{

  entry:
    out_$p98, out_$p99, out_$i100, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$p109, out_$i110, out_$p111, out_$i112, out_$p113, out_$i114, out_$p115, out_$i116, out_$i118, out_$i119, out_$i120, out_$i97, out_vslice_dummy_var_91 := in_$p98, in_$p99, in_$i100, in_$i102, in_$i103, in_$i104, in_$i105, in_$i106, in_$i107, in_$i108, in_$p109, in_$i110, in_$p111, in_$i112, in_$p113, in_$i114, in_$p115, in_$i116, in_$i118, in_$i119, in_$i120, in_$i97, in_vslice_dummy_var_91;
    goto $bb21, exit;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_3465;

  $bb26:
    assume out_$i120 == 1;
    assume {:verifier.code 0} true;
    out_$i97 := out_$i118;
    goto $bb26_dummy;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    out_$i120 := $sgt.i32(out_$i119, out_$i118);
    goto corral_source_split_3492;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    out_$i119 := $load.i32($M.0, in_$p94);
    goto corral_source_split_3491;

  $bb25:
    assume {:verifier.code 0} true;
    out_$i118 := $add.i32(out_$i97, 1);
    call {:si_unique_call 783} {:cexpr "i"} boogie_si_record_i32(out_$i118);
    goto corral_source_split_3490;

  $bb24:
    assume !(out_$i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} out_vslice_dummy_var_91 := printk.ref.i32.i32.i32.i32(.str.141, out_$i110, out_$i112, out_$i114, out_$i116);
    goto corral_source_split_3488;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    out_$i116 := $load.i32($M.0, out_$p115);
    goto corral_source_split_3487;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    out_$p115 := $add.ref($add.ref(out_$p99, $mul.ref(out_$i100, 16)), $mul.ref(12, 1));
    goto corral_source_split_3486;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    out_$i114 := $load.i32($M.0, out_$p113);
    goto corral_source_split_3485;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    out_$p113 := $add.ref($add.ref(out_$p99, $mul.ref(out_$i100, 16)), $mul.ref(8, 1));
    goto corral_source_split_3484;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    out_$i112 := $load.i32($M.0, out_$p111);
    goto corral_source_split_3483;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    out_$p111 := $add.ref($add.ref(out_$p99, $mul.ref(out_$i100, 16)), $mul.ref(4, 1));
    goto corral_source_split_3482;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    out_$i110 := $load.i32($M.0, out_$p109);
    goto corral_source_split_3481;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    out_$p109 := $add.ref($add.ref(out_$p99, $mul.ref(out_$i100, 16)), $mul.ref(0, 1));
    goto corral_source_split_3480;

  $bb23:
    assume out_$i108 == 1;
    goto corral_source_split_3479;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    out_$i108 := $ne.i64(out_$i107, 0);
    goto corral_source_split_3477;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} out_$i107 := ldv__builtin_expect(out_$i106, 0);
    call {:si_unique_call 781} {:cexpr "tmp___5"} boogie_si_record_i64(out_$i107);
    goto corral_source_split_3476;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    out_$i106 := $sext.i32.i64(out_$i105);
    goto corral_source_split_3475;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    out_$i105 := $zext.i1.i32(out_$i104);
    goto corral_source_split_3474;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    out_$i104 := $ne.i32(out_$i103, 0);
    goto corral_source_split_3473;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    out_$i103 := $and.i32(out_$i102, in_$i0);
    goto corral_source_split_3472;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    out_$i102 := $load.i32($M.0, gigaset_debuglevel);
    goto corral_source_split_3471;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    goto corral_source_split_3470;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    out_$i100 := $sext.i32.i64(out_$i97);
    goto corral_source_split_3469;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    out_$p99 := $bitcast.ref.ref(out_$p98);
    goto corral_source_split_3468;

  $bb22:
    assume {:verifier.code 0} true;
    out_$p98 := $add.ref($add.ref(in_$p2, $mul.ref(0, 192)), $mul.ref(192, 1));
    goto corral_source_split_3467;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb26_dummy:
    call {:si_unique_call 1} out_$p98, out_$p99, out_$i100, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$p109, out_$i110, out_$p111, out_$i112, out_$p113, out_$i114, out_$p115, out_$i116, out_$i118, out_$i119, out_$i120, out_$i97, out_vslice_dummy_var_91 := dump_urb_loop_$bb21(in_$i0, in_$p2, in_$p94, out_$p98, out_$p99, out_$i100, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$p109, out_$i110, out_$p111, out_$i112, out_$p113, out_$i114, out_$p115, out_$i116, out_$i118, out_$i119, out_$i120, out_$i97, out_vslice_dummy_var_91);
    return;

  exit:
    return;
}



procedure dump_urb_loop_$bb21(in_$i0: i32, in_$p2: ref, in_$p94: ref, in_$p98: ref, in_$p99: ref, in_$i100: i64, in_$i102: i32, in_$i103: i32, in_$i104: i1, in_$i105: i32, in_$i106: i64, in_$i107: i64, in_$i108: i1, in_$p109: ref, in_$i110: i32, in_$p111: ref, in_$i112: i32, in_$p113: ref, in_$i114: i32, in_$p115: ref, in_$i116: i32, in_$i118: i32, in_$i119: i32, in_$i120: i1, in_$i97: i32, in_vslice_dummy_var_91: i32) returns (out_$p98: ref, out_$p99: ref, out_$i100: i64, out_$i102: i32, out_$i103: i32, out_$i104: i1, out_$i105: i32, out_$i106: i64, out_$i107: i64, out_$i108: i1, out_$p109: ref, out_$i110: i32, out_$p111: ref, out_$i112: i32, out_$p113: ref, out_$i114: i32, out_$p115: ref, out_$i116: i32, out_$i118: i32, out_$i119: i32, out_$i120: i1, out_$i97: i32, out_vslice_dummy_var_91: i32);



implementation starturbs_loop_$bb32(in_$p3: ref, in_$i121: i64, in_$p124: ref, in_$p125: ref, in_$i126: i32, in_$i127: i1, in_$i128: i32, in_$i129: i32, in_$i130: i1, in_$i119: i32, in_$p120: ref) returns (out_$i121: i64, out_$p124: ref, out_$p125: ref, out_$i126: i32, out_$i127: i1, out_$i128: i32, out_$i129: i32, out_$i130: i1, out_$i119: i32)
{

  entry:
    out_$i121, out_$p124, out_$p125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i119 := in_$i121, in_$p124, in_$p125, in_$i126, in_$i127, in_$i128, in_$i129, in_$i130, in_$i119;
    goto $bb32, exit;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_3702;

  $bb37:
    assume out_$i130 == 1;
    assume {:verifier.code 0} true;
    out_$i119 := out_$i129;
    goto $bb37_dummy;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    out_$i130 := $sle.i32(out_$i129, 1);
    goto corral_source_split_3714;

  $bb36:
    assume {:verifier.code 0} true;
    out_$i129 := $add.i32(out_$i119, 1);
    call {:si_unique_call 800} {:cexpr "k"} boogie_si_record_i32(out_$i129);
    goto corral_source_split_3713;

  $bb35:
    assume !(out_$i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    out_$i128 := out_$i126;
    assume true;
    goto $bb35;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    out_$i127 := $ne.i32(out_$i126, 0);
    goto corral_source_split_3709;

  SeqInstr_165:
    call {:si_unique_call 799} {:cexpr "rc"} boogie_si_record_i32(out_$i126);
    goto corral_source_split_3708;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} out_$i126 := ldv_usb_submit_urb_53(out_$p125, 32);
    goto SeqInstr_164;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    out_$p125 := $load.ref($M.0, out_$p124);
    goto corral_source_split_3707;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    out_$p124 := $add.ref($add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 824)), $mul.ref(80, 1)), $mul.ref(out_$i121, 24)), $mul.ref(0, 1));
    goto corral_source_split_3706;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    out_$i121 := $sext.i32.i64(out_$i119);
    goto corral_source_split_3705;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 797} dump_urb(262144, .str.157, in_$p120);
    goto corral_source_split_3704;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb37_dummy:
    call {:si_unique_call 1} out_$i121, out_$p124, out_$p125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i119 := starturbs_loop_$bb32(in_$p3, out_$i121, out_$p124, out_$p125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i119, in_$p120);
    return;

  exit:
    return;
}



procedure starturbs_loop_$bb32(in_$p3: ref, in_$i121: i64, in_$p124: ref, in_$p125: ref, in_$i126: i32, in_$i127: i1, in_$i128: i32, in_$i129: i32, in_$i130: i1, in_$i119: i32, in_$p120: ref) returns (out_$i121: i64, out_$p124: ref, out_$p125: ref, out_$i126: i32, out_$i127: i1, out_$i128: i32, out_$i129: i32, out_$i130: i1, out_$i119: i32);
  modifies assertsPassed;



implementation starturbs_loop_$bb4(in_$p0: ref, in_$p3: ref, in_$i13: i64, in_$p15: ref, in_$p16: ref, in_$i17: i64, in_$i18: i1, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$i31: i32, in_$i32: i32, in_$i33: i32, in_$i34: i32, in_$i35: i32, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$i40: i32, in_$i41: i64, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p49: ref, in_$p52: ref, in_$p55: ref, in_$p58: ref, in_$p61: ref, in_$i62: i32, in_$i63: i1, in_$i64: i32, in_$i65: i32, in_$i66: i1, in_$i12: i32, in_$p493: ref, in_$p496: ref, in_$p499: ref, in_$p502: ref, in_$p505: ref, in_$p508: ref, in_$p511: ref, in_$p514: ref, in_$p517: ref, in_$p520: ref, in_$p523: ref, in_$p526: ref, in_$p529: ref, in_$p532: ref, in_$p535: ref, in_$p538: ref, in_$p541: ref, in_$p544: ref, in_$p547: ref, in_$p550: ref, in_$p553: ref, in_$p556: ref, in_$p559: ref, in_$p562: ref, in_$p565: ref, in_$p568: ref, in_$p571: ref, in_$p574: ref) returns (out_$i13: i64, out_$p15: ref, out_$p16: ref, out_$i17: i64, out_$i18: i1, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$i31: i32, out_$i32: i32, out_$i33: i32, out_$i34: i32, out_$i35: i32, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$i40: i32, out_$i41: i64, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p49: ref, out_$p52: ref, out_$p55: ref, out_$p58: ref, out_$p61: ref, out_$i62: i32, out_$i63: i1, out_$i64: i32, out_$i65: i32, out_$i66: i1, out_$i12: i32, out_$p493: ref, out_$p496: ref, out_$p499: ref, out_$p502: ref, out_$p505: ref, out_$p508: ref, out_$p511: ref, out_$p514: ref, out_$p517: ref, out_$p520: ref, out_$p523: ref, out_$p526: ref, out_$p529: ref, out_$p532: ref, out_$p535: ref, out_$p538: ref, out_$p541: ref, out_$p544: ref, out_$p547: ref, out_$p550: ref, out_$p553: ref, out_$p556: ref, out_$p559: ref, out_$p562: ref, out_$p565: ref, out_$p568: ref, out_$p571: ref, out_$p574: ref)
{

  entry:
    out_$i13, out_$p15, out_$p16, out_$i17, out_$i18, out_$p20, out_$p21, out_$p22, out_$p23, out_$p24, out_$p25, out_$p26, out_$p27, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$p36, out_$p37, out_$p38, out_$p39, out_$i40, out_$i41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p46, out_$p47, out_$p49, out_$p52, out_$p55, out_$p58, out_$p61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i12, out_$p493, out_$p496, out_$p499, out_$p502, out_$p505, out_$p508, out_$p511, out_$p514, out_$p517, out_$p520, out_$p523, out_$p526, out_$p529, out_$p532, out_$p535, out_$p538, out_$p541, out_$p544, out_$p547, out_$p550, out_$p553, out_$p556, out_$p559, out_$p562, out_$p565, out_$p568, out_$p571, out_$p574 := in_$i13, in_$p15, in_$p16, in_$i17, in_$i18, in_$p20, in_$p21, in_$p22, in_$p23, in_$p24, in_$p25, in_$p26, in_$p27, in_$p28, in_$p29, in_$p30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$p36, in_$p37, in_$p38, in_$p39, in_$i40, in_$i41, in_$p42, in_$p43, in_$p44, in_$p45, in_$p46, in_$p47, in_$p49, in_$p52, in_$p55, in_$p58, in_$p61, in_$i62, in_$i63, in_$i64, in_$i65, in_$i66, in_$i12, in_$p493, in_$p496, in_$p499, in_$p502, in_$p505, in_$p508, in_$p511, in_$p514, in_$p517, in_$p520, in_$p523, in_$p526, in_$p529, in_$p532, in_$p535, in_$p538, in_$p541, in_$p544, in_$p547, in_$p550, in_$p553, in_$p556, in_$p559, in_$p562, in_$p565, in_$p568, in_$p571, in_$p574;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_3548;

  $bb17:
    assume out_$i66 == 1;
    assume {:verifier.code 0} true;
    out_$i12 := out_$i65;
    goto $bb17_dummy;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    out_$i66 := $sle.i32(out_$i65, 2);
    goto corral_source_split_3626;

  $bb16:
    assume {:verifier.code 0} true;
    out_$i65 := $add.i32(out_$i12, 1);
    call {:si_unique_call 794} {:cexpr "k"} boogie_si_record_i32(out_$i65);
    goto corral_source_split_3625;

  $bb15:
    assume !(out_$i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    out_$i64 := out_$i62;
    assume true;
    goto $bb15;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    out_$i63 := $ne.i32(out_$i62, 0);
    goto corral_source_split_3621;

  SeqInstr_162:
    call {:si_unique_call 793} {:cexpr "rc"} boogie_si_record_i32(out_$i62);
    goto corral_source_split_3620;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 792} out_$i62 := ldv_usb_submit_urb_52(out_$p16, 32);
    goto SeqInstr_161;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} dump_urb(262144, .str.156, out_$p16);
    goto corral_source_split_3619;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p574, 0);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    out_$p574 := $add.ref($add.ref($add.ref($add.ref(out_$p16, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(7, 16)), $mul.ref(8, 1));
    goto corral_source_split_4065;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p571, 0);
    goto corral_source_split_4064;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    out_$p571 := $add.ref($add.ref($add.ref($add.ref(out_$p16, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(7, 16)), $mul.ref(12, 1));
    goto corral_source_split_4063;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p568, 16);
    goto corral_source_split_4062;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    out_$p568 := $add.ref($add.ref($add.ref($add.ref(out_$p16, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(7, 16)), $mul.ref(4, 1));
    goto corral_source_split_4061;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p565, 112);
    goto corral_source_split_4060;

  $bb79:
    assume {:verifier.code 0} true;
    out_$p565 := $add.ref($add.ref($add.ref($add.ref(out_$p16, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(7, 16)), $mul.ref(0, 1));
    goto corral_source_split_4059;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    goto $bb79;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p562, 0);
    goto corral_source_split_4057;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    out_$p562 := $add.ref($add.ref($add.ref($add.ref(out_$p16, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(6, 16)), $mul.ref(8, 1));
    goto corral_source_split_4056;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p559, 0);
    goto corral_source_split_4055;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    out_$p559 := $add.ref($add.ref($add.ref($add.ref(out_$p16, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(6, 16)), $mul.ref(12, 1));
    goto corral_source_split_4054;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p556, 16);
    goto corral_source_split_4053;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    out_$p556 := $add.ref($add.ref($add.ref($add.ref(out_$p16, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(6, 16)), $mul.ref(4, 1));
    goto corral_source_split_4052;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p553, 96);
    goto corral_source_split_4051;

  $bb78:
    assume {:verifier.code 0} true;
    out_$p553 := $add.ref($add.ref($add.ref($add.ref(out_$p16, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(6, 16)), $mul.ref(0, 1));
    goto corral_source_split_4050;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    goto $bb78;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p550, 0);
    goto corral_source_split_4048;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    out_$p550 := $add.ref($add.ref($add.ref($add.ref(out_$p16, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(5, 16)), $mul.ref(8, 1));
    goto corral_source_split_4047;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p547, 0);
    goto corral_source_split_4046;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    out_$p547 := $add.ref($add.ref($add.ref($add.ref(out_$p16, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(5, 16)), $mul.ref(12, 1));
    goto corral_source_split_4045;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p544, 16);
    goto corral_source_split_4044;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    out_$p544 := $add.ref($add.ref($add.ref($add.ref(out_$p16, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(5, 16)), $mul.ref(4, 1));
    goto corral_source_split_4043;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p541, 80);
    goto corral_source_split_4042;

  $bb77:
    assume {:verifier.code 0} true;
    out_$p541 := $add.ref($add.ref($add.ref($add.ref(out_$p16, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(5, 16)), $mul.ref(0, 1));
    goto corral_source_split_4041;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    goto $bb77;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p538, 0);
    goto corral_source_split_4039;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    out_$p538 := $add.ref($add.ref($add.ref($add.ref(out_$p16, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(4, 16)), $mul.ref(8, 1));
    goto corral_source_split_4038;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p535, 0);
    goto corral_source_split_4037;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    out_$p535 := $add.ref($add.ref($add.ref($add.ref(out_$p16, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(4, 16)), $mul.ref(12, 1));
    goto corral_source_split_4036;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p532, 16);
    goto corral_source_split_4035;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    out_$p532 := $add.ref($add.ref($add.ref($add.ref(out_$p16, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(4, 16)), $mul.ref(4, 1));
    goto corral_source_split_4034;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p529, 64);
    goto corral_source_split_4033;

  $bb76:
    assume {:verifier.code 0} true;
    out_$p529 := $add.ref($add.ref($add.ref($add.ref(out_$p16, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(4, 16)), $mul.ref(0, 1));
    goto corral_source_split_4032;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    goto $bb76;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p526, 0);
    goto corral_source_split_4030;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    out_$p526 := $add.ref($add.ref($add.ref($add.ref(out_$p16, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(3, 16)), $mul.ref(8, 1));
    goto corral_source_split_4029;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p523, 0);
    goto corral_source_split_4028;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    out_$p523 := $add.ref($add.ref($add.ref($add.ref(out_$p16, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(3, 16)), $mul.ref(12, 1));
    goto corral_source_split_4027;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p520, 16);
    goto corral_source_split_4026;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    out_$p520 := $add.ref($add.ref($add.ref($add.ref(out_$p16, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(3, 16)), $mul.ref(4, 1));
    goto corral_source_split_4025;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p517, 48);
    goto corral_source_split_4024;

  $bb75:
    assume {:verifier.code 0} true;
    out_$p517 := $add.ref($add.ref($add.ref($add.ref(out_$p16, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(3, 16)), $mul.ref(0, 1));
    goto corral_source_split_4023;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    goto $bb75;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p514, 0);
    goto corral_source_split_4021;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    out_$p514 := $add.ref($add.ref($add.ref($add.ref(out_$p16, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(2, 16)), $mul.ref(8, 1));
    goto corral_source_split_4020;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p511, 0);
    goto corral_source_split_4019;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    out_$p511 := $add.ref($add.ref($add.ref($add.ref(out_$p16, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(2, 16)), $mul.ref(12, 1));
    goto corral_source_split_4018;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p508, 16);
    goto corral_source_split_4017;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    out_$p508 := $add.ref($add.ref($add.ref($add.ref(out_$p16, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(2, 16)), $mul.ref(4, 1));
    goto corral_source_split_4016;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p505, 32);
    goto corral_source_split_4015;

  $bb74:
    assume {:verifier.code 0} true;
    out_$p505 := $add.ref($add.ref($add.ref($add.ref(out_$p16, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(2, 16)), $mul.ref(0, 1));
    goto corral_source_split_4014;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    goto $bb74;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p502, 0);
    goto corral_source_split_3617;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    out_$p502 := $add.ref($add.ref($add.ref($add.ref(out_$p16, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(1, 16)), $mul.ref(8, 1));
    goto corral_source_split_3616;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p499, 0);
    goto corral_source_split_3615;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    out_$p499 := $add.ref($add.ref($add.ref($add.ref(out_$p16, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(1, 16)), $mul.ref(12, 1));
    goto corral_source_split_3614;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p496, 16);
    goto corral_source_split_3613;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    out_$p496 := $add.ref($add.ref($add.ref($add.ref(out_$p16, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(1, 16)), $mul.ref(4, 1));
    goto corral_source_split_3612;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p493, 16);
    goto corral_source_split_3611;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p493 := $add.ref($add.ref($add.ref($add.ref(out_$p16, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(1, 16)), $mul.ref(0, 1));
    goto corral_source_split_3610;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p61, 0);
    goto corral_source_split_3608;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref($add.ref($add.ref(out_$p16, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3607;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p58, 0);
    goto corral_source_split_3606;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref($add.ref($add.ref(out_$p16, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_3605;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p55, 16);
    goto corral_source_split_3604;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref($add.ref($add.ref(out_$p16, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_3603;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p52, 0);
    goto corral_source_split_3602;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref($add.ref($add.ref(out_$p16, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3601;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p49, in_$p0);
    goto corral_source_split_3599;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(out_$p16, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_3598;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    goto corral_source_split_3597;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p47, read_iso_callback);
    goto corral_source_split_3596;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(out_$p16, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_3595;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p46, 1);
    goto corral_source_split_3594;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(out_$p16, $mul.ref(0, 192)), $mul.ref(168, 1));
    goto corral_source_split_3593;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p45, 8);
    goto corral_source_split_3592;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(out_$p16, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_3591;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p44, 128);
    goto corral_source_split_3590;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(out_$p16, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_3589;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p43, out_$p42);
    goto corral_source_split_3588;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(out_$p16, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_3587;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref(out_$p39, $mul.ref(out_$i41, 1));
    goto corral_source_split_3586;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    out_$i41 := $sext.i32.i64(out_$i40);
    goto corral_source_split_3585;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    out_$i40 := $mul.i32(out_$i12, 128);
    goto corral_source_split_3584;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    out_$p39 := $bitcast.ref.ref(out_$p38);
    goto corral_source_split_3583;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(in_$p3, $mul.ref(0, 824)), $mul.ref(328, 1));
    goto corral_source_split_3582;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p37, 2);
    goto corral_source_split_3581;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(out_$p16, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_3580;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p36, out_$i35);
    goto corral_source_split_3579;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(out_$p16, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_3578;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    out_$i35 := $or.i32(out_$i34, 128);
    goto corral_source_split_3577;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 789} out_$i34 := __create_pipe(out_$p29, out_$i33);
    call {:si_unique_call 790} {:cexpr "tmp"} boogie_si_record_i32(out_$i34);
    goto corral_source_split_3576;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    out_$i33 := $add.i32(out_$i32, 3);
    goto corral_source_split_3575;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    out_$i32 := $mul.i32(out_$i31, 2);
    goto corral_source_split_3574;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i32($M.0, out_$p30);
    goto corral_source_split_3573;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(in_$p0, $mul.ref(0, 480)), $mul.ref(280, 1));
    goto corral_source_split_3572;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    out_$p29 := $load.ref($M.0, out_$p28);
    goto corral_source_split_3571;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(out_$p16, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_3570;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p27, out_$p26);
    goto corral_source_split_3569;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p16, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_3568;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    out_$p26 := $load.ref($M.0, out_$p25);
    goto corral_source_split_3567;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(out_$p24, $mul.ref(0, 888)), $mul.ref(0, 1));
    goto corral_source_split_3566;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    out_$p24 := $load.ref($M.0, out_$p23);
    goto corral_source_split_3565;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    out_$p23 := $bitcast.ref.ref(out_$p22);
    goto corral_source_split_3564;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(out_$p21, $mul.ref(0, 5232)), $mul.ref(5224, 1));
    goto corral_source_split_3563;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    out_$p21 := $load.ref($M.0, out_$p20);
    goto corral_source_split_3562;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(in_$p0, $mul.ref(0, 480)), $mul.ref(288, 1));
    goto corral_source_split_3561;

  $bb7:
    assume !(out_$i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    out_$i18 := $eq.i64(out_$i17, 0);
    goto corral_source_split_3554;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    out_$i17 := $p2i.ref.i64(out_$p16);
    goto corral_source_split_3553;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    out_$p16 := $load.ref($M.0, out_$p15);
    goto corral_source_split_3552;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 824)), $mul.ref(304, 1)), $mul.ref(out_$i13, 8));
    goto corral_source_split_3551;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i13 := $sext.i32.i64(out_$i12);
    goto corral_source_split_3550;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb17_dummy:
    call {:si_unique_call 1} out_$i13, out_$p15, out_$p16, out_$i17, out_$i18, out_$p20, out_$p21, out_$p22, out_$p23, out_$p24, out_$p25, out_$p26, out_$p27, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$p36, out_$p37, out_$p38, out_$p39, out_$i40, out_$i41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p46, out_$p47, out_$p49, out_$p52, out_$p55, out_$p58, out_$p61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i12, out_$p493, out_$p496, out_$p499, out_$p502, out_$p505, out_$p508, out_$p511, out_$p514, out_$p517, out_$p520, out_$p523, out_$p526, out_$p529, out_$p532, out_$p535, out_$p538, out_$p541, out_$p544, out_$p547, out_$p550, out_$p553, out_$p556, out_$p559, out_$p562, out_$p565, out_$p568, out_$p571, out_$p574 := starturbs_loop_$bb4(in_$p0, in_$p3, out_$i13, out_$p15, out_$p16, out_$i17, out_$i18, out_$p20, out_$p21, out_$p22, out_$p23, out_$p24, out_$p25, out_$p26, out_$p27, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$p36, out_$p37, out_$p38, out_$p39, out_$i40, out_$i41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p46, out_$p47, out_$p49, out_$p52, out_$p55, out_$p58, out_$p61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i12, out_$p493, out_$p496, out_$p499, out_$p502, out_$p505, out_$p508, out_$p511, out_$p514, out_$p517, out_$p520, out_$p523, out_$p526, out_$p529, out_$p532, out_$p535, out_$p538, out_$p541, out_$p544, out_$p547, out_$p550, out_$p553, out_$p556, out_$p559, out_$p562, out_$p565, out_$p568, out_$p571, out_$p574);
    return;

  exit:
    return;
}



procedure starturbs_loop_$bb4(in_$p0: ref, in_$p3: ref, in_$i13: i64, in_$p15: ref, in_$p16: ref, in_$i17: i64, in_$i18: i1, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$i31: i32, in_$i32: i32, in_$i33: i32, in_$i34: i32, in_$i35: i32, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$i40: i32, in_$i41: i64, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p49: ref, in_$p52: ref, in_$p55: ref, in_$p58: ref, in_$p61: ref, in_$i62: i32, in_$i63: i1, in_$i64: i32, in_$i65: i32, in_$i66: i1, in_$i12: i32, in_$p493: ref, in_$p496: ref, in_$p499: ref, in_$p502: ref, in_$p505: ref, in_$p508: ref, in_$p511: ref, in_$p514: ref, in_$p517: ref, in_$p520: ref, in_$p523: ref, in_$p526: ref, in_$p529: ref, in_$p532: ref, in_$p535: ref, in_$p538: ref, in_$p541: ref, in_$p544: ref, in_$p547: ref, in_$p550: ref, in_$p553: ref, in_$p556: ref, in_$p559: ref, in_$p562: ref, in_$p565: ref, in_$p568: ref, in_$p571: ref, in_$p574: ref) returns (out_$i13: i64, out_$p15: ref, out_$p16: ref, out_$i17: i64, out_$i18: i1, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$i31: i32, out_$i32: i32, out_$i33: i32, out_$i34: i32, out_$i35: i32, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$i40: i32, out_$i41: i64, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p49: ref, out_$p52: ref, out_$p55: ref, out_$p58: ref, out_$p61: ref, out_$i62: i32, out_$i63: i1, out_$i64: i32, out_$i65: i32, out_$i66: i1, out_$i12: i32, out_$p493: ref, out_$p496: ref, out_$p499: ref, out_$p502: ref, out_$p505: ref, out_$p508: ref, out_$p511: ref, out_$p514: ref, out_$p517: ref, out_$p520: ref, out_$p523: ref, out_$p526: ref, out_$p529: ref, out_$p532: ref, out_$p535: ref, out_$p538: ref, out_$p541: ref, out_$p544: ref, out_$p547: ref, out_$p550: ref, out_$p553: ref, out_$p556: ref, out_$p559: ref, out_$p562: ref, out_$p565: ref, out_$p568: ref, out_$p571: ref, out_$p574: ref);
  modifies assertsPassed, $M.0;



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();



implementation main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p6: ref, in_$p8: ref, in_$p10: ref, in_$p11: ref, in_$p13: ref, in_$i24: i32, in_$i25: i1, in_$i26: i1, in_$i27: i1, in_$i28: i1, in_$i29: i1, in_$i30: i1, in_$i31: i1, in_$i32: i1, in_$i33: i1, in_$i34: i32, in_$i35: i1, in_$i36: i32, in_$i37: i1, in_$i38: i1, in_$i39: i1, in_$i40: i1, in_$i41: i1, in_$i42: i1, in_$i43: i1, in_$i44: i1, in_$i45: i1, in_$i46: i1, in_$i47: i1, in_$i48: i1, in_$i49: i1, in_$i50: i1, in_$i51: i1, in_$i52: i1, in_$i53: i1, in_$i54: i1, in_$i55: i1, in_$i56: i32, in_$i57: i1, in_$i58: i32, in_$i59: i1, in_$i60: i32, in_$i61: i1, in_$p62: ref, in_$i64: i32, in_$i65: i1, in_$p66: ref, in_$i67: i32, in_$i68: i1, in_$p69: ref, in_$i70: i32, in_$i71: i1, in_$p72: ref, in_$i73: i32, in_$i74: i32, in_$i76: i32, in_$i77: i1, in_$p78: ref, in_$i79: i32, in_$i80: i32, in_$i82: i32, in_$i83: i1, in_$p84: ref, in_$i86: i32, in_$i87: i1, in_$p88: ref, in_$i90: i32, in_$i91: i1, in_$p92: ref, in_$i93: i32, in_$i94: i1, in_$p95: ref, in_$i96: i32, in_$i97: i1, in_$p98: ref, in_$i100: i32, in_$i101: i1, in_$p102: ref, in_$i104: i32, in_$i105: i1, in_$p106: ref, in_$i108: i32, in_$i109: i1, in_$p110: ref, in_$i112: i32, in_$i113: i1, in_$p114: ref, in_$i116: i32, in_$i117: i1, in_$p118: ref, in_$i120: i32, in_$i121: i1, in_$p122: ref, in_$i124: i32, in_$i125: i1, in_$p126: ref, in_$i128: i32, in_$i129: i1, in_$p130: ref, in_$i131: i32, in_$i132: i1, in_$p133: ref, in_$i134: i32, in_$i135: i1, in_$p136: ref, in_$i138: i32, in_$i139: i1, in_$p140: ref, in_$i142: i32, in_$i143: i1, in_$p144: ref, in_$i146: i32, in_$i147: i1, in_$p148: ref, in_$i150: i32, in_$i151: i1, in_$p152: ref, in_$i153: i32, in_$i155: i32, in_$i156: i1, in_$p157: ref, in_$i158: i32, in_$i160: i32, in_$i161: i1, in_$p162: ref, in_$i164: i32, in_$i165: i1, in_$p166: ref, in_$i168: i32, in_$i169: i1, in_$p170: ref, in_$i171: i32, in_$i173: i32, in_$i174: i1, in_$p175: ref, in_$i176: i32, in_$i178: i32, in_$i179: i1, in_$i181: i32, in_$i182: i32, in_$i183: i32, in_$i184: i1, in_$i186: i32, in_$i187: i32, in_$i188: i32, in_$i189: i1, in_$i190: i32, in_$i191: i1, in_$i192: i32, in_$i193: i1, in_$i194: i1, in_$i195: i1, in_$i196: i1, in_$i197: i1, in_$i198: i1, in_$i199: i32, in_$i200: i1, in_$p201: ref, in_$i202: i32, in_$i203: i32, in_$i204: i1, in_$i205: i32, in_$i206: i32, in_$i207: i32, in_$i208: i1, in_$p209: ref, in_$i210: i32, in_$i211: i32, in_$i212: i1, in_$i213: i32, in_$i214: i1, in_$i215: i32, in_$i216: i1, in_$p217: ref, in_$i218: i32, in_$i219: i32, in_$i220: i32, in_$i221: i1, in_$i222: i32, in_$i223: i1, in_$p224: ref, in_$i225: i32, in_$i226: i32, in_$i227: i32, in_$i228: i1, in_$p229: ref, in_$p230: ref, in_$i231: i32, in_$i233: i32, in_$i234: i1, in_$p235: ref, in_$i236: i32, in_$i237: i32, in_$i238: i1, in_$i239: i32, in_$i240: i1, in_$i241: i32, in_$i242: i1, in_$i243: i32, in_$i244: i1, in_$i245: i32, in_$i246: i1, in_$i247: i32, in_$i248: i1, in_$i249: i1, in_$i250: i1, in_$i251: i32, in_$i252: i1, in_$i253: i32, in_$i254: i1, in_$i255: i32, in_$i256: i1, in_$i257: i32, in_$i258: i32, in_$i259: i1, in_$i260: i32, in_$i261: i1, in_$i262: i32, in_$i263: i1, in_vslice_dummy_var_98: i32, in_vslice_dummy_var_99: i32, in_vslice_dummy_var_100: i32, in_vslice_dummy_var_101: i32, in_vslice_dummy_var_102: i32, in_vslice_dummy_var_103: i32, in_vslice_dummy_var_104: i32, in_vslice_dummy_var_105: i32, in_vslice_dummy_var_106: i32, in_vslice_dummy_var_107: i32, in_vslice_dummy_var_108: i32, in_vslice_dummy_var_109: i32, in_vslice_dummy_var_110: i32, in_vslice_dummy_var_111: i32, in_vslice_dummy_var_112: i32, in_vslice_dummy_var_113: i32, in_vslice_dummy_var_114: i32, in_vslice_dummy_var_115: i32, in_vslice_dummy_var_116: i32, in_vslice_dummy_var_117: i32, in_vslice_dummy_var_118: i32, in_vslice_dummy_var_119: i32, in_vslice_dummy_var_120: i32, in_vslice_dummy_var_121: i32, in_vslice_dummy_var_122: i32, in_vslice_dummy_var_123: i32) returns (out_$i24: i32, out_$i25: i1, out_$i26: i1, out_$i27: i1, out_$i28: i1, out_$i29: i1, out_$i30: i1, out_$i31: i1, out_$i32: i1, out_$i33: i1, out_$i34: i32, out_$i35: i1, out_$i36: i32, out_$i37: i1, out_$i38: i1, out_$i39: i1, out_$i40: i1, out_$i41: i1, out_$i42: i1, out_$i43: i1, out_$i44: i1, out_$i45: i1, out_$i46: i1, out_$i47: i1, out_$i48: i1, out_$i49: i1, out_$i50: i1, out_$i51: i1, out_$i52: i1, out_$i53: i1, out_$i54: i1, out_$i55: i1, out_$i56: i32, out_$i57: i1, out_$i58: i32, out_$i59: i1, out_$i60: i32, out_$i61: i1, out_$p62: ref, out_$i64: i32, out_$i65: i1, out_$p66: ref, out_$i67: i32, out_$i68: i1, out_$p69: ref, out_$i70: i32, out_$i71: i1, out_$p72: ref, out_$i73: i32, out_$i74: i32, out_$i76: i32, out_$i77: i1, out_$p78: ref, out_$i79: i32, out_$i80: i32, out_$i82: i32, out_$i83: i1, out_$p84: ref, out_$i86: i32, out_$i87: i1, out_$p88: ref, out_$i90: i32, out_$i91: i1, out_$p92: ref, out_$i93: i32, out_$i94: i1, out_$p95: ref, out_$i96: i32, out_$i97: i1, out_$p98: ref, out_$i100: i32, out_$i101: i1, out_$p102: ref, out_$i104: i32, out_$i105: i1, out_$p106: ref, out_$i108: i32, out_$i109: i1, out_$p110: ref, out_$i112: i32, out_$i113: i1, out_$p114: ref, out_$i116: i32, out_$i117: i1, out_$p118: ref, out_$i120: i32, out_$i121: i1, out_$p122: ref, out_$i124: i32, out_$i125: i1, out_$p126: ref, out_$i128: i32, out_$i129: i1, out_$p130: ref, out_$i131: i32, out_$i132: i1, out_$p133: ref, out_$i134: i32, out_$i135: i1, out_$p136: ref, out_$i138: i32, out_$i139: i1, out_$p140: ref, out_$i142: i32, out_$i143: i1, out_$p144: ref, out_$i146: i32, out_$i147: i1, out_$p148: ref, out_$i150: i32, out_$i151: i1, out_$p152: ref, out_$i153: i32, out_$i155: i32, out_$i156: i1, out_$p157: ref, out_$i158: i32, out_$i160: i32, out_$i161: i1, out_$p162: ref, out_$i164: i32, out_$i165: i1, out_$p166: ref, out_$i168: i32, out_$i169: i1, out_$p170: ref, out_$i171: i32, out_$i173: i32, out_$i174: i1, out_$p175: ref, out_$i176: i32, out_$i178: i32, out_$i179: i1, out_$i181: i32, out_$i182: i32, out_$i183: i32, out_$i184: i1, out_$i186: i32, out_$i187: i32, out_$i188: i32, out_$i189: i1, out_$i190: i32, out_$i191: i1, out_$i192: i32, out_$i193: i1, out_$i194: i1, out_$i195: i1, out_$i196: i1, out_$i197: i1, out_$i198: i1, out_$i199: i32, out_$i200: i1, out_$p201: ref, out_$i202: i32, out_$i203: i32, out_$i204: i1, out_$i205: i32, out_$i206: i32, out_$i207: i32, out_$i208: i1, out_$p209: ref, out_$i210: i32, out_$i211: i32, out_$i212: i1, out_$i213: i32, out_$i214: i1, out_$i215: i32, out_$i216: i1, out_$p217: ref, out_$i218: i32, out_$i219: i32, out_$i220: i32, out_$i221: i1, out_$i222: i32, out_$i223: i1, out_$p224: ref, out_$i225: i32, out_$i226: i32, out_$i227: i32, out_$i228: i1, out_$p229: ref, out_$p230: ref, out_$i231: i32, out_$i233: i32, out_$i234: i1, out_$p235: ref, out_$i236: i32, out_$i237: i32, out_$i238: i1, out_$i239: i32, out_$i240: i1, out_$i241: i32, out_$i242: i1, out_$i243: i32, out_$i244: i1, out_$i245: i32, out_$i246: i1, out_$i247: i32, out_$i248: i1, out_$i249: i1, out_$i250: i1, out_$i251: i32, out_$i252: i1, out_$i253: i32, out_$i254: i1, out_$i255: i32, out_$i256: i1, out_$i257: i32, out_$i258: i32, out_$i259: i1, out_$i260: i32, out_$i261: i1, out_$i262: i32, out_$i263: i1, out_vslice_dummy_var_98: i32, out_vslice_dummy_var_99: i32, out_vslice_dummy_var_100: i32, out_vslice_dummy_var_101: i32, out_vslice_dummy_var_102: i32, out_vslice_dummy_var_103: i32, out_vslice_dummy_var_104: i32, out_vslice_dummy_var_105: i32, out_vslice_dummy_var_106: i32, out_vslice_dummy_var_107: i32, out_vslice_dummy_var_108: i32, out_vslice_dummy_var_109: i32, out_vslice_dummy_var_110: i32, out_vslice_dummy_var_111: i32, out_vslice_dummy_var_112: i32, out_vslice_dummy_var_113: i32, out_vslice_dummy_var_114: i32, out_vslice_dummy_var_115: i32, out_vslice_dummy_var_116: i32, out_vslice_dummy_var_117: i32, out_vslice_dummy_var_118: i32, out_vslice_dummy_var_119: i32, out_vslice_dummy_var_120: i32, out_vslice_dummy_var_121: i32, out_vslice_dummy_var_122: i32, out_vslice_dummy_var_123: i32)
{

  entry:
    out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$p62, out_$i64, out_$i65, out_$p66, out_$i67, out_$i68, out_$p69, out_$i70, out_$i71, out_$p72, out_$i73, out_$i74, out_$i76, out_$i77, out_$p78, out_$i79, out_$i80, out_$i82, out_$i83, out_$p84, out_$i86, out_$i87, out_$p88, out_$i90, out_$i91, out_$p92, out_$i93, out_$i94, out_$p95, out_$i96, out_$i97, out_$p98, out_$i100, out_$i101, out_$p102, out_$i104, out_$i105, out_$p106, out_$i108, out_$i109, out_$p110, out_$i112, out_$i113, out_$p114, out_$i116, out_$i117, out_$p118, out_$i120, out_$i121, out_$p122, out_$i124, out_$i125, out_$p126, out_$i128, out_$i129, out_$p130, out_$i131, out_$i132, out_$p133, out_$i134, out_$i135, out_$p136, out_$i138, out_$i139, out_$p140, out_$i142, out_$i143, out_$p144, out_$i146, out_$i147, out_$p148, out_$i150, out_$i151, out_$p152, out_$i153, out_$i155, out_$i156, out_$p157, out_$i158, out_$i160, out_$i161, out_$p162, out_$i164, out_$i165, out_$p166, out_$i168, out_$i169, out_$p170, out_$i171, out_$i173, out_$i174, out_$p175, out_$i176, out_$i178, out_$i179, out_$i181, out_$i182, out_$i183, out_$i184, out_$i186, out_$i187, out_$i188, out_$i189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$i196, out_$i197, out_$i198, out_$i199, out_$i200, out_$p201, out_$i202, out_$i203, out_$i204, out_$i205, out_$i206, out_$i207, out_$i208, out_$p209, out_$i210, out_$i211, out_$i212, out_$i213, out_$i214, out_$i215, out_$i216, out_$p217, out_$i218, out_$i219, out_$i220, out_$i221, out_$i222, out_$i223, out_$p224, out_$i225, out_$i226, out_$i227, out_$i228, out_$p229, out_$p230, out_$i231, out_$i233, out_$i234, out_$p235, out_$i236, out_$i237, out_$i238, out_$i239, out_$i240, out_$i241, out_$i242, out_$i243, out_$i244, out_$i245, out_$i246, out_$i247, out_$i248, out_$i249, out_$i250, out_$i251, out_$i252, out_$i253, out_$i254, out_$i255, out_$i256, out_$i257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i263, out_vslice_dummy_var_98, out_vslice_dummy_var_99, out_vslice_dummy_var_100, out_vslice_dummy_var_101, out_vslice_dummy_var_102, out_vslice_dummy_var_103, out_vslice_dummy_var_104, out_vslice_dummy_var_105, out_vslice_dummy_var_106, out_vslice_dummy_var_107, out_vslice_dummy_var_108, out_vslice_dummy_var_109, out_vslice_dummy_var_110, out_vslice_dummy_var_111, out_vslice_dummy_var_112, out_vslice_dummy_var_113, out_vslice_dummy_var_114, out_vslice_dummy_var_115, out_vslice_dummy_var_116, out_vslice_dummy_var_117, out_vslice_dummy_var_118, out_vslice_dummy_var_119, out_vslice_dummy_var_120, out_vslice_dummy_var_121, out_vslice_dummy_var_122, out_vslice_dummy_var_123 := in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i59, in_$i60, in_$i61, in_$p62, in_$i64, in_$i65, in_$p66, in_$i67, in_$i68, in_$p69, in_$i70, in_$i71, in_$p72, in_$i73, in_$i74, in_$i76, in_$i77, in_$p78, in_$i79, in_$i80, in_$i82, in_$i83, in_$p84, in_$i86, in_$i87, in_$p88, in_$i90, in_$i91, in_$p92, in_$i93, in_$i94, in_$p95, in_$i96, in_$i97, in_$p98, in_$i100, in_$i101, in_$p102, in_$i104, in_$i105, in_$p106, in_$i108, in_$i109, in_$p110, in_$i112, in_$i113, in_$p114, in_$i116, in_$i117, in_$p118, in_$i120, in_$i121, in_$p122, in_$i124, in_$i125, in_$p126, in_$i128, in_$i129, in_$p130, in_$i131, in_$i132, in_$p133, in_$i134, in_$i135, in_$p136, in_$i138, in_$i139, in_$p140, in_$i142, in_$i143, in_$p144, in_$i146, in_$i147, in_$p148, in_$i150, in_$i151, in_$p152, in_$i153, in_$i155, in_$i156, in_$p157, in_$i158, in_$i160, in_$i161, in_$p162, in_$i164, in_$i165, in_$p166, in_$i168, in_$i169, in_$p170, in_$i171, in_$i173, in_$i174, in_$p175, in_$i176, in_$i178, in_$i179, in_$i181, in_$i182, in_$i183, in_$i184, in_$i186, in_$i187, in_$i188, in_$i189, in_$i190, in_$i191, in_$i192, in_$i193, in_$i194, in_$i195, in_$i196, in_$i197, in_$i198, in_$i199, in_$i200, in_$p201, in_$i202, in_$i203, in_$i204, in_$i205, in_$i206, in_$i207, in_$i208, in_$p209, in_$i210, in_$i211, in_$i212, in_$i213, in_$i214, in_$i215, in_$i216, in_$p217, in_$i218, in_$i219, in_$i220, in_$i221, in_$i222, in_$i223, in_$p224, in_$i225, in_$i226, in_$i227, in_$i228, in_$p229, in_$p230, in_$i231, in_$i233, in_$i234, in_$p235, in_$i236, in_$i237, in_$i238, in_$i239, in_$i240, in_$i241, in_$i242, in_$i243, in_$i244, in_$i245, in_$i246, in_$i247, in_$i248, in_$i249, in_$i250, in_$i251, in_$i252, in_$i253, in_$i254, in_$i255, in_$i256, in_$i257, in_$i258, in_$i259, in_$i260, in_$i261, in_$i262, in_$i263, in_vslice_dummy_var_98, in_vslice_dummy_var_99, in_vslice_dummy_var_100, in_vslice_dummy_var_101, in_vslice_dummy_var_102, in_vslice_dummy_var_103, in_vslice_dummy_var_104, in_vslice_dummy_var_105, in_vslice_dummy_var_106, in_vslice_dummy_var_107, in_vslice_dummy_var_108, in_vslice_dummy_var_109, in_vslice_dummy_var_110, in_vslice_dummy_var_111, in_vslice_dummy_var_112, in_vslice_dummy_var_113, in_vslice_dummy_var_114, in_vslice_dummy_var_115, in_vslice_dummy_var_116, in_vslice_dummy_var_117, in_vslice_dummy_var_118, in_vslice_dummy_var_119, in_vslice_dummy_var_120, in_vslice_dummy_var_121, in_vslice_dummy_var_122, in_vslice_dummy_var_123;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 954} out_$i24 := __VERIFIER_nondet_int();
    call {:si_unique_call 955} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i24);
    call {:si_unique_call 956} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i24);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb167:
    assume {:verifier.code 0} true;
    goto $bb167_dummy;

  $bb267:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb265:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb262:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb232:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb229:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb226:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb223:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb170:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb166:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb23:
    assume !(out_$i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb165:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb163:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb160:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb157:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb151:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb145:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb139:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb133:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb127:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb121:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb115:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb109:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb103:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb91:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb85:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb68:
    assume !(out_$i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    $M.67 := 2;
    call {:si_unique_call 963} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_4567;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} gigaset_isoc_input(in_$p6);
    goto corral_source_split_4566;

  $bb67:
    assume out_$i59 == 1;
    goto corral_source_split_4565;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    out_$i59 := $eq.i32(out_$i58, 2);
    goto corral_source_split_4563;

  $bb66:
    assume {:verifier.code 0} true;
    out_$i58 := $M.67;
    goto corral_source_split_4562;

  $bb65:
    assume !(out_$i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    goto $bb66;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    $M.67 := 1;
    call {:si_unique_call 961} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4560;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 960} gigaset_isoc_input(in_$p6);
    goto corral_source_split_4559;

  $bb64:
    assume out_$i57 == 1;
    goto corral_source_split_4558;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    out_$i57 := $eq.i32(out_$i56, 1);
    goto corral_source_split_4556;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    out_$i56 := $M.67;
    goto corral_source_split_4555;

  $bb62:
    assume out_$i55 == 1;
    goto corral_source_split_4554;

  $bb60:
    assume out_$i54 == 1;
    assume {:verifier.code 0} true;
    out_$i55 := $eq.i32(out_$i36, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb56:
    assume out_$i52 == 1;
    assume {:verifier.code 0} true;
    out_$i54 := $slt.i32(out_$i36, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb46:
    assume out_$i47 == 1;
    assume {:verifier.code 0} true;
    out_$i52 := $slt.i32(out_$i36, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb25:
    assume out_$i37 == 1;
    assume {:verifier.code 0} true;
    out_$i47 := $slt.i32(out_$i36, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i37 := $slt.i32(out_$i36, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_4484:
    assume {:verifier.code 1} true;
    call {:si_unique_call 957} out_$i36 := __VERIFIER_nondet_int();
    call {:si_unique_call 958} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i36);
    call {:si_unique_call 959} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i36);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb22:
    assume out_$i35 == 1;
    goto corral_source_split_4484;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    out_$i35 := $ne.i32(out_$i34, 0);
    goto corral_source_split_4482;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    out_$i34 := $M.67;
    goto corral_source_split_4481;

  $bb20:
    assume out_$i33 == 1;
    goto corral_source_split_4480;

  $bb18:
    assume out_$i32 == 1;
    assume {:verifier.code 0} true;
    out_$i33 := $eq.i32(out_$i24, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb14:
    assume out_$i30 == 1;
    assume {:verifier.code 0} true;
    out_$i32 := $slt.i32(out_$i24, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb3:
    assume out_$i25 == 1;
    assume {:verifier.code 0} true;
    out_$i30 := $slt.i32(out_$i24, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i25 := $slt.i32(out_$i24, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb72:
    assume !(out_$i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    goto $bb73;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    $M.67 := 2;
    call {:si_unique_call 965} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_4572;

  SeqInstr_246:
    goto corral_source_split_4571;

  SeqInstr_245:
    assume assertsPassed;
    goto SeqInstr_246;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 964} out_vslice_dummy_var_98 := gigaset_write_cmd(out_$p62, in_$p10);
    goto SeqInstr_245;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    out_$p62 := $M.46;
    goto corral_source_split_4570;

  $bb71:
    assume out_$i61 == 1;
    goto corral_source_split_4569;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    out_$i61 := $eq.i32(out_$i60, 2);
    goto corral_source_split_4552;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    out_$i60 := $M.67;
    goto corral_source_split_4551;

  $bb61:
    assume !(out_$i54 == 1);
    goto corral_source_split_4550;

  $bb78:
    assume !(out_$i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    goto $bb79;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    $M.67 := 2;
    call {:si_unique_call 969} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_4585;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 968} gigaset_freebcshw(out_$p69);
    goto corral_source_split_4584;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    out_$p69 := $M.47;
    goto corral_source_split_4583;

  $bb77:
    assume out_$i68 == 1;
    goto corral_source_split_4582;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    out_$i68 := $eq.i32(out_$i67, 2);
    goto corral_source_split_4580;

  $bb76:
    assume {:verifier.code 0} true;
    out_$i67 := $M.67;
    goto corral_source_split_4579;

  $bb75:
    assume !(out_$i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    goto $bb76;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    $M.67 := 1;
    call {:si_unique_call 967} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4577;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 966} gigaset_freebcshw(out_$p66);
    goto corral_source_split_4576;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    out_$p66 := $M.47;
    goto corral_source_split_4575;

  $bb74:
    assume out_$i65 == 1;
    goto corral_source_split_4574;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    out_$i65 := $eq.i32(out_$i64, 1);
    goto corral_source_split_4544;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    out_$i64 := $M.67;
    goto corral_source_split_4543;

  $bb58:
    assume out_$i53 == 1;
    goto corral_source_split_4542;

  $bb57:
    assume !(out_$i52 == 1);
    assume {:verifier.code 0} true;
    out_$i53 := $slt.i32(out_$i36, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb84:
    assume !(out_$i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    goto $bb85;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    $M.67 := 2;
    call {:si_unique_call 973} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_4602;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 972} out_vslice_dummy_var_100 := gigaset_set_modem_ctrl(out_$p78, out_$i79, out_$i80);
    goto corral_source_split_4601;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    out_$i80 := $load.i32($M.35, in_$p3);
    goto corral_source_split_4600;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    out_$i79 := $load.i32($M.35, in_$p1);
    goto corral_source_split_4599;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    out_$p78 := $M.46;
    goto corral_source_split_4598;

  $bb83:
    assume out_$i77 == 1;
    goto corral_source_split_4597;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    out_$i77 := $eq.i32(out_$i76, 2);
    goto corral_source_split_4595;

  $bb82:
    assume {:verifier.code 0} true;
    out_$i76 := $M.67;
    goto corral_source_split_4594;

  $bb81:
    assume !(out_$i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    goto $bb82;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    $M.67 := 1;
    call {:si_unique_call 971} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4592;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 970} out_vslice_dummy_var_99 := gigaset_set_modem_ctrl(out_$p72, out_$i73, out_$i74);
    goto corral_source_split_4591;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    out_$i74 := $load.i32($M.35, in_$p3);
    goto corral_source_split_4590;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    out_$i73 := $load.i32($M.35, in_$p1);
    goto corral_source_split_4589;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    out_$p72 := $M.46;
    goto corral_source_split_4588;

  $bb80:
    assume out_$i71 == 1;
    goto corral_source_split_4587;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    out_$i71 := $eq.i32(out_$i70, 1);
    goto corral_source_split_4548;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    out_$i70 := $M.67;
    goto corral_source_split_4547;

  $bb59:
    assume !(out_$i53 == 1);
    goto corral_source_split_4546;

  $bb90:
    assume !(out_$i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    goto $bb91;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    $M.67 := 2;
    call {:si_unique_call 977} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_4615;

  SeqInstr_252:
    goto corral_source_split_4614;

  SeqInstr_251:
    assume assertsPassed;
    goto SeqInstr_252;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 976} out_vslice_dummy_var_102 := gigaset_close_bchannel(out_$p88);
    goto SeqInstr_251;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    out_$p88 := $M.47;
    goto corral_source_split_4613;

  $bb89:
    assume out_$i87 == 1;
    goto corral_source_split_4612;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    out_$i87 := $eq.i32(out_$i86, 2);
    goto corral_source_split_4610;

  $bb88:
    assume {:verifier.code 0} true;
    out_$i86 := $M.67;
    goto corral_source_split_4609;

  $bb87:
    assume !(out_$i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    goto $bb88;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    $M.67 := 1;
    call {:si_unique_call 975} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4607;

  SeqInstr_249:
    goto corral_source_split_4606;

  SeqInstr_248:
    assume assertsPassed;
    goto SeqInstr_249;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 974} out_vslice_dummy_var_101 := gigaset_close_bchannel(out_$p84);
    goto SeqInstr_248;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    out_$p84 := $M.47;
    goto corral_source_split_4605;

  $bb86:
    assume out_$i83 == 1;
    goto corral_source_split_4604;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    out_$i83 := $eq.i32(out_$i82, 1);
    goto corral_source_split_4536;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    out_$i82 := $M.67;
    goto corral_source_split_4535;

  $bb54:
    assume out_$i51 == 1;
    goto corral_source_split_4534;

  $bb48:
    assume out_$i48 == 1;
    assume {:verifier.code 0} true;
    out_$i51 := $slt.i32(out_$i36, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb47:
    assume !(out_$i47 == 1);
    assume {:verifier.code 0} true;
    out_$i48 := $slt.i32(out_$i36, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb96:
    assume !(out_$i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb97;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    goto $bb97;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    $M.67 := 2;
    call {:si_unique_call 981} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_4628;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 980} gigaset_reinitbcshw(out_$p95);
    goto corral_source_split_4627;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    out_$p95 := $M.47;
    goto corral_source_split_4626;

  $bb95:
    assume out_$i94 == 1;
    goto corral_source_split_4625;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    out_$i94 := $eq.i32(out_$i93, 2);
    goto corral_source_split_4623;

  $bb94:
    assume {:verifier.code 0} true;
    out_$i93 := $M.67;
    goto corral_source_split_4622;

  $bb93:
    assume !(out_$i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb94;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    goto $bb94;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    $M.67 := 1;
    call {:si_unique_call 979} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4620;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 978} gigaset_reinitbcshw(out_$p92);
    goto corral_source_split_4619;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    out_$p92 := $M.47;
    goto corral_source_split_4618;

  $bb92:
    assume out_$i91 == 1;
    goto corral_source_split_4617;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    out_$i91 := $eq.i32(out_$i90, 1);
    goto corral_source_split_4540;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    out_$i90 := $M.67;
    goto corral_source_split_4539;

  $bb55:
    assume !(out_$i51 == 1);
    goto corral_source_split_4538;

  $bb102:
    assume !(out_$i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    goto $bb103;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    $M.67 := 2;
    call {:si_unique_call 985} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_4641;

  SeqInstr_258:
    goto corral_source_split_4640;

  SeqInstr_257:
    assume assertsPassed;
    goto SeqInstr_258;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 984} out_vslice_dummy_var_104 := gigaset_initbcshw(out_$p102);
    goto SeqInstr_257;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    out_$p102 := $M.47;
    goto corral_source_split_4639;

  $bb101:
    assume out_$i101 == 1;
    goto corral_source_split_4638;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    out_$i101 := $eq.i32(out_$i100, 2);
    goto corral_source_split_4636;

  $bb100:
    assume {:verifier.code 0} true;
    out_$i100 := $M.67;
    goto corral_source_split_4635;

  $bb99:
    assume !(out_$i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb100;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    goto $bb100;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    $M.67 := 1;
    call {:si_unique_call 983} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4633;

  SeqInstr_255:
    goto corral_source_split_4632;

  SeqInstr_254:
    assume assertsPassed;
    goto SeqInstr_255;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 982} out_vslice_dummy_var_103 := gigaset_initbcshw(out_$p98);
    goto SeqInstr_254;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    out_$p98 := $M.47;
    goto corral_source_split_4631;

  $bb98:
    assume out_$i97 == 1;
    goto corral_source_split_4630;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb98, $bb99;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    out_$i97 := $eq.i32(out_$i96, 1);
    goto corral_source_split_4524;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    out_$i96 := $M.67;
    goto corral_source_split_4523;

  $bb50:
    assume out_$i49 == 1;
    goto corral_source_split_4522;

  $bb49:
    assume !(out_$i48 == 1);
    assume {:verifier.code 0} true;
    out_$i49 := $slt.i32(out_$i36, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb108:
    assume !(out_$i109 == 1);
    assume {:verifier.code 0} true;
    goto $bb109;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    goto $bb109;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    $M.67 := 2;
    call {:si_unique_call 989} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_4654;

  SeqInstr_264:
    goto corral_source_split_4653;

  SeqInstr_263:
    assume assertsPassed;
    goto SeqInstr_264;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 988} out_vslice_dummy_var_106 := gigaset_initcshw(out_$p110);
    goto SeqInstr_263;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    out_$p110 := $M.46;
    goto corral_source_split_4652;

  $bb107:
    assume out_$i109 == 1;
    goto corral_source_split_4651;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    out_$i109 := $eq.i32(out_$i108, 2);
    goto corral_source_split_4649;

  $bb106:
    assume {:verifier.code 0} true;
    out_$i108 := $M.67;
    goto corral_source_split_4648;

  $bb105:
    assume !(out_$i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb106;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    goto $bb106;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    $M.67 := 1;
    call {:si_unique_call 987} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4646;

  SeqInstr_261:
    goto corral_source_split_4645;

  SeqInstr_260:
    assume assertsPassed;
    goto SeqInstr_261;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 986} out_vslice_dummy_var_105 := gigaset_initcshw(out_$p106);
    goto SeqInstr_260;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    out_$p106 := $M.46;
    goto corral_source_split_4644;

  $bb104:
    assume out_$i105 == 1;
    goto corral_source_split_4643;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb104, $bb105;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    out_$i105 := $eq.i32(out_$i104, 1);
    goto corral_source_split_4528;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    out_$i104 := $M.67;
    goto corral_source_split_4527;

  $bb52:
    assume out_$i50 == 1;
    goto corral_source_split_4526;

  $bb51:
    assume !(out_$i49 == 1);
    assume {:verifier.code 0} true;
    out_$i50 := $slt.i32(out_$i36, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb114:
    assume !(out_$i117 == 1);
    assume {:verifier.code 0} true;
    goto $bb115;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    goto $bb115;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    $M.67 := 2;
    call {:si_unique_call 993} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_4667;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 992} out_vslice_dummy_var_108 := gigaset_isoc_send_skb(out_$p118, in_$p8);
    goto corral_source_split_4666;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    out_$p118 := $M.47;
    goto corral_source_split_4665;

  $bb113:
    assume out_$i117 == 1;
    goto corral_source_split_4664;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113, $bb114;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    out_$i117 := $eq.i32(out_$i116, 2);
    goto corral_source_split_4662;

  $bb112:
    assume {:verifier.code 0} true;
    out_$i116 := $M.67;
    goto corral_source_split_4661;

  $bb111:
    assume !(out_$i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb112;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    goto $bb112;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    $M.67 := 1;
    call {:si_unique_call 991} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4659;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 990} out_vslice_dummy_var_107 := gigaset_isoc_send_skb(out_$p114, in_$p8);
    goto corral_source_split_4658;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    out_$p114 := $M.47;
    goto corral_source_split_4657;

  $bb110:
    assume out_$i113 == 1;
    goto corral_source_split_4656;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    out_$i113 := $eq.i32(out_$i112, 1);
    goto corral_source_split_4532;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    out_$i112 := $M.67;
    goto corral_source_split_4531;

  $bb53:
    assume !(out_$i50 == 1);
    goto corral_source_split_4530;

  $bb120:
    assume !(out_$i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    goto $bb121;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    $M.67 := 2;
    call {:si_unique_call 997} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_4680;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 996} out_vslice_dummy_var_110 := gigaset_brkchars(out_$p126, in_$p11);
    goto corral_source_split_4679;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    out_$p126 := $M.46;
    goto corral_source_split_4678;

  $bb119:
    assume out_$i125 == 1;
    goto corral_source_split_4677;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb119, $bb120;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    out_$i125 := $eq.i32(out_$i124, 2);
    goto corral_source_split_4675;

  $bb118:
    assume {:verifier.code 0} true;
    out_$i124 := $M.67;
    goto corral_source_split_4674;

  $bb117:
    assume !(out_$i121 == 1);
    assume {:verifier.code 0} true;
    goto $bb118;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    goto $bb118;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    $M.67 := 1;
    call {:si_unique_call 995} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4672;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 994} out_vslice_dummy_var_109 := gigaset_brkchars(out_$p122, in_$p11);
    goto corral_source_split_4671;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    out_$p122 := $M.46;
    goto corral_source_split_4670;

  $bb116:
    assume out_$i121 == 1;
    goto corral_source_split_4669;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116, $bb117;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    out_$i121 := $eq.i32(out_$i120, 1);
    goto corral_source_split_4516;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    out_$i120 := $M.67;
    goto corral_source_split_4515;

  $bb44:
    assume out_$i46 == 1;
    goto corral_source_split_4514;

  $bb40:
    assume out_$i44 == 1;
    assume {:verifier.code 0} true;
    out_$i46 := $slt.i32(out_$i36, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb27:
    assume out_$i38 == 1;
    assume {:verifier.code 0} true;
    out_$i44 := $slt.i32(out_$i36, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb26:
    assume !(out_$i37 == 1);
    assume {:verifier.code 0} true;
    out_$i38 := $slt.i32(out_$i36, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb126:
    assume !(out_$i132 == 1);
    assume {:verifier.code 0} true;
    goto $bb127;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    goto $bb127;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    $M.67 := 2;
    call {:si_unique_call 1001} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_4693;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1000} gigaset_freecshw(out_$p133);
    goto corral_source_split_4692;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    out_$p133 := $M.46;
    goto corral_source_split_4691;

  $bb125:
    assume out_$i132 == 1;
    goto corral_source_split_4690;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb125, $bb126;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    out_$i132 := $eq.i32(out_$i131, 2);
    goto corral_source_split_4688;

  $bb124:
    assume {:verifier.code 0} true;
    out_$i131 := $M.67;
    goto corral_source_split_4687;

  $bb123:
    assume !(out_$i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb124;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    goto $bb124;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    $M.67 := 1;
    call {:si_unique_call 999} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4685;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 998} gigaset_freecshw(out_$p130);
    goto corral_source_split_4684;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    out_$p130 := $M.46;
    goto corral_source_split_4683;

  $bb122:
    assume out_$i129 == 1;
    goto corral_source_split_4682;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb122, $bb123;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    out_$i129 := $eq.i32(out_$i128, 1);
    goto corral_source_split_4520;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    out_$i128 := $M.67;
    goto corral_source_split_4519;

  $bb45:
    assume !(out_$i46 == 1);
    goto corral_source_split_4518;

  $bb132:
    assume !(out_$i139 == 1);
    assume {:verifier.code 0} true;
    goto $bb133;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    goto $bb133;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    $M.67 := 2;
    call {:si_unique_call 1005} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_4706;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1004} out_vslice_dummy_var_112 := gigaset_write_room(out_$p140);
    goto corral_source_split_4705;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    out_$p140 := $M.46;
    goto corral_source_split_4704;

  $bb131:
    assume out_$i139 == 1;
    goto corral_source_split_4703;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb131, $bb132;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    out_$i139 := $eq.i32(out_$i138, 2);
    goto corral_source_split_4701;

  $bb130:
    assume {:verifier.code 0} true;
    out_$i138 := $M.67;
    goto corral_source_split_4700;

  $bb129:
    assume !(out_$i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb130;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    goto $bb130;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    $M.67 := 1;
    call {:si_unique_call 1003} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4698;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1002} out_vslice_dummy_var_111 := gigaset_write_room(out_$p136);
    goto corral_source_split_4697;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    out_$p136 := $M.46;
    goto corral_source_split_4696;

  $bb128:
    assume out_$i135 == 1;
    goto corral_source_split_4695;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb128, $bb129;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    out_$i135 := $eq.i32(out_$i134, 1);
    goto corral_source_split_4508;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    out_$i134 := $M.67;
    goto corral_source_split_4507;

  $bb42:
    assume out_$i45 == 1;
    goto corral_source_split_4506;

  $bb41:
    assume !(out_$i44 == 1);
    assume {:verifier.code 0} true;
    out_$i45 := $slt.i32(out_$i36, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb138:
    assume !(out_$i147 == 1);
    assume {:verifier.code 0} true;
    goto $bb139;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    goto $bb139;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    $M.67 := 2;
    call {:si_unique_call 1009} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_4719;

  SeqInstr_270:
    goto corral_source_split_4718;

  SeqInstr_269:
    assume assertsPassed;
    goto SeqInstr_270;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1008} out_vslice_dummy_var_114 := gigaset_init_bchannel(out_$p148);
    goto SeqInstr_269;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    out_$p148 := $M.47;
    goto corral_source_split_4717;

  $bb137:
    assume out_$i147 == 1;
    goto corral_source_split_4716;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb137, $bb138;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    out_$i147 := $eq.i32(out_$i146, 2);
    goto corral_source_split_4714;

  $bb136:
    assume {:verifier.code 0} true;
    out_$i146 := $M.67;
    goto corral_source_split_4713;

  $bb135:
    assume !(out_$i143 == 1);
    assume {:verifier.code 0} true;
    goto $bb136;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    goto $bb136;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    $M.67 := 1;
    call {:si_unique_call 1007} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4711;

  SeqInstr_267:
    goto corral_source_split_4710;

  SeqInstr_266:
    assume assertsPassed;
    goto SeqInstr_267;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1006} out_vslice_dummy_var_113 := gigaset_init_bchannel(out_$p144);
    goto SeqInstr_266;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    out_$p144 := $M.47;
    goto corral_source_split_4709;

  $bb134:
    assume out_$i143 == 1;
    goto corral_source_split_4708;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb134, $bb135;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    out_$i143 := $eq.i32(out_$i142, 1);
    goto corral_source_split_4512;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    out_$i142 := $M.67;
    goto corral_source_split_4511;

  $bb43:
    assume !(out_$i45 == 1);
    goto corral_source_split_4510;

  $bb144:
    assume !(out_$i156 == 1);
    assume {:verifier.code 0} true;
    goto $bb145;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    goto $bb145;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    $M.67 := 2;
    call {:si_unique_call 1013} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_4734;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1012} out_vslice_dummy_var_116 := gigaset_set_line_ctrl(out_$p157, out_$i158);
    goto corral_source_split_4733;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    out_$i158 := $load.i32($M.35, in_$p2);
    goto corral_source_split_4732;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    out_$p157 := $M.46;
    goto corral_source_split_4731;

  $bb143:
    assume out_$i156 == 1;
    goto corral_source_split_4730;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb143, $bb144;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    out_$i156 := $eq.i32(out_$i155, 2);
    goto corral_source_split_4728;

  $bb142:
    assume {:verifier.code 0} true;
    out_$i155 := $M.67;
    goto corral_source_split_4727;

  $bb141:
    assume !(out_$i151 == 1);
    assume {:verifier.code 0} true;
    goto $bb142;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    goto $bb142;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    $M.67 := 1;
    call {:si_unique_call 1011} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4725;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1010} out_vslice_dummy_var_115 := gigaset_set_line_ctrl(out_$p152, out_$i153);
    goto corral_source_split_4724;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    out_$i153 := $load.i32($M.35, in_$p2);
    goto corral_source_split_4723;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    out_$p152 := $M.46;
    goto corral_source_split_4722;

  $bb140:
    assume out_$i151 == 1;
    goto corral_source_split_4721;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb140, $bb141;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    out_$i151 := $eq.i32(out_$i150, 1);
    goto corral_source_split_4500;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    out_$i150 := $M.67;
    goto corral_source_split_4499;

  $bb38:
    assume out_$i43 == 1;
    goto corral_source_split_4498;

  $bb29:
    assume out_$i39 == 1;
    assume {:verifier.code 0} true;
    out_$i43 := $slt.i32(out_$i36, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb28:
    assume !(out_$i38 == 1);
    assume {:verifier.code 0} true;
    out_$i39 := $slt.i32(out_$i36, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb150:
    assume !(out_$i165 == 1);
    assume {:verifier.code 0} true;
    goto $bb151;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    goto $bb151;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    $M.67 := 2;
    call {:si_unique_call 1017} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_4747;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1016} out_vslice_dummy_var_118 := gigaset_chars_in_buffer(out_$p166);
    goto corral_source_split_4746;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    out_$p166 := $M.46;
    goto corral_source_split_4745;

  $bb149:
    assume out_$i165 == 1;
    goto corral_source_split_4744;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb149, $bb150;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    out_$i165 := $eq.i32(out_$i164, 2);
    goto corral_source_split_4742;

  $bb148:
    assume {:verifier.code 0} true;
    out_$i164 := $M.67;
    goto corral_source_split_4741;

  $bb147:
    assume !(out_$i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb148;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    goto $bb148;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    $M.67 := 1;
    call {:si_unique_call 1015} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4739;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1014} out_vslice_dummy_var_117 := gigaset_chars_in_buffer(out_$p162);
    goto corral_source_split_4738;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    out_$p162 := $M.46;
    goto corral_source_split_4737;

  $bb146:
    assume out_$i161 == 1;
    goto corral_source_split_4736;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb146, $bb147;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    out_$i161 := $eq.i32(out_$i160, 1);
    goto corral_source_split_4504;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    out_$i160 := $M.67;
    goto corral_source_split_4503;

  $bb39:
    assume !(out_$i43 == 1);
    goto corral_source_split_4502;

  $bb156:
    assume !(out_$i174 == 1);
    assume {:verifier.code 0} true;
    goto $bb157;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    goto $bb157;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    $M.67 := 2;
    call {:si_unique_call 1021} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_4762;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1020} out_vslice_dummy_var_120 := gigaset_baud_rate(out_$p175, out_$i176);
    goto corral_source_split_4761;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    out_$i176 := $load.i32($M.35, in_$p0);
    goto corral_source_split_4760;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    out_$p175 := $M.46;
    goto corral_source_split_4759;

  $bb155:
    assume out_$i174 == 1;
    goto corral_source_split_4758;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb155, $bb156;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    out_$i174 := $eq.i32(out_$i173, 2);
    goto corral_source_split_4756;

  $bb154:
    assume {:verifier.code 0} true;
    out_$i173 := $M.67;
    goto corral_source_split_4755;

  $bb153:
    assume !(out_$i169 == 1);
    assume {:verifier.code 0} true;
    goto $bb154;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    goto $bb154;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    $M.67 := 1;
    call {:si_unique_call 1019} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4753;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1018} out_vslice_dummy_var_119 := gigaset_baud_rate(out_$p170, out_$i171);
    goto corral_source_split_4752;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    out_$i171 := $load.i32($M.35, in_$p0);
    goto corral_source_split_4751;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    out_$p170 := $M.46;
    goto corral_source_split_4750;

  $bb152:
    assume out_$i169 == 1;
    goto corral_source_split_4749;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb152, $bb153;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    out_$i169 := $eq.i32(out_$i168, 1);
    goto corral_source_split_4488;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    out_$i168 := $M.67;
    goto corral_source_split_4487;

  $bb31:
    assume out_$i40 == 1;
    goto corral_source_split_4486;

  $bb30:
    assume !(out_$i39 == 1);
    assume {:verifier.code 0} true;
    out_$i40 := $slt.i32(out_$i36, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb159:
    assume !(out_$i179 == 1);
    assume {:verifier.code 0} true;
    goto $bb160;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    goto $bb160;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    $M.73 := out_$i182;
    call {:si_unique_call 1024} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i182);
    goto corral_source_split_4769;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    out_$i182 := $sub.i32(out_$i181, 1);
    goto corral_source_split_4768;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    out_$i181 := $M.73;
    goto corral_source_split_4767;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    $M.67 := 1;
    call {:si_unique_call 1023} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4766;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1022} out_vslice_dummy_var_121 := ldv_release_6();
    goto corral_source_split_4765;

  $bb158:
    assume out_$i179 == 1;
    goto corral_source_split_4764;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb158, $bb159;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    out_$i179 := $eq.i32(out_$i178, 2);
    goto corral_source_split_4492;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    out_$i178 := $M.67;
    goto corral_source_split_4491;

  $bb33:
    assume out_$i41 == 1;
    goto corral_source_split_4490;

  $bb32:
    assume !(out_$i40 == 1);
    assume {:verifier.code 0} true;
    out_$i41 := $slt.i32(out_$i36, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb162:
    assume !(out_$i184 == 1);
    assume {:verifier.code 0} true;
    goto $bb163;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    goto $bb163;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    $M.73 := out_$i187;
    call {:si_unique_call 1027} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i187);
    goto corral_source_split_4776;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    out_$i187 := $add.i32(out_$i186, 1);
    goto corral_source_split_4775;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    out_$i186 := $M.73;
    goto corral_source_split_4774;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    $M.67 := 2;
    call {:si_unique_call 1026} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_4773;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1025} out_vslice_dummy_var_122 := ldv_probe_6();
    goto corral_source_split_4772;

  $bb161:
    assume out_$i184 == 1;
    goto corral_source_split_4771;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb161, $bb162;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    out_$i184 := $eq.i32(out_$i183, 1);
    goto corral_source_split_4496;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    out_$i183 := $M.67;
    goto corral_source_split_4495;

  $bb35:
    assume out_$i42 == 1;
    goto corral_source_split_4494;

  $bb34:
    assume !(out_$i41 == 1);
    assume {:verifier.code 0} true;
    out_$i42 := $eq.i32(out_$i36, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1028} ldv_stop();
    goto corral_source_split_4778;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb36:
    assume {:verifier.code 0} true;
    assume !(out_$i42 == 1);
    goto $bb37;

  $bb63:
    assume {:verifier.code 0} true;
    assume !(out_$i55 == 1);
    goto $bb37;

  $bb169:
    assume !(out_$i189 == 1);
    assume {:verifier.code 0} true;
    goto $bb170;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    goto $bb170;

  SeqInstr_273:
    goto corral_source_split_4781;

  SeqInstr_272:
    assume assertsPassed;
    goto SeqInstr_273;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1029} choose_timer_3();
    goto SeqInstr_272;

  $bb168:
    assume out_$i189 == 1;
    goto corral_source_split_4780;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb168, $bb169;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    out_$i189 := $ne.i32(out_$i188, 0);
    goto corral_source_split_4478;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    out_$i188 := $M.68;
    goto corral_source_split_4477;

  $bb19:
    assume !(out_$i32 == 1);
    goto corral_source_split_4476;

  $bb172:
    assume !(out_$i191 == 1);
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb193:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb222:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb220:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb214:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb211:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb199:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb192:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb188:
    assume !(out_$i200 == 1);
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb191:
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb190:
    assume !(out_$i204 == 1);
    assume {:verifier.code 0} true;
    goto $bb191;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    goto $bb191;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    $M.73 := out_$i206;
    call {:si_unique_call 1036} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i206);
    goto corral_source_split_4816;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    out_$i206 := $add.i32(out_$i205, 1);
    goto corral_source_split_4815;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    out_$i205 := $M.73;
    goto corral_source_split_4814;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    $M.69 := 2;
    call {:si_unique_call 1035} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_4813;

  $bb189:
    assume out_$i204 == 1;
    goto corral_source_split_4812;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb189, $bb190;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    out_$i204 := $eq.i32(out_$i203, 0);
    goto corral_source_split_4810;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    out_$i203 := $M.76;
    goto corral_source_split_4809;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    $M.76 := out_$i202;
    call {:si_unique_call 1034} {:cexpr "ldv_retval_2"} boogie_si_record_i32(out_$i202);
    goto corral_source_split_4808;

  SeqInstr_276:
    goto corral_source_split_4807;

  SeqInstr_275:
    assume assertsPassed;
    goto SeqInstr_276;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1033} out_$i202 := gigaset_probe(out_$p201, in_$p13);
    goto SeqInstr_275;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    out_$p201 := $M.66;
    goto corral_source_split_4806;

  $bb187:
    assume out_$i200 == 1;
    goto corral_source_split_4805;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb187, $bb188;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    out_$i200 := $eq.i32(out_$i199, 1);
    goto corral_source_split_4803;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    out_$i199 := $M.69;
    goto corral_source_split_4802;

  $bb185:
    assume out_$i198 == 1;
    goto corral_source_split_4801;

  $bb183:
    assume out_$i197 == 1;
    assume {:verifier.code 0} true;
    out_$i198 := $eq.i32(out_$i192, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb185, $bb186;

  $bb174:
    assume out_$i193 == 1;
    assume {:verifier.code 0} true;
    out_$i197 := $slt.i32(out_$i192, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb183, $bb184;

  $bb173:
    assume {:verifier.code 0} true;
    out_$i193 := $slt.i32(out_$i192, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb174, $bb175;

  corral_source_split_4783:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1030} out_$i192 := __VERIFIER_nondet_int();
    call {:si_unique_call 1031} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i192);
    call {:si_unique_call 1032} {:cexpr "tmp___6"} boogie_si_record_i32(out_$i192);
    assume {:verifier.code 0} true;
    goto $bb173;

  $bb171:
    assume out_$i191 == 1;
    goto corral_source_split_4783;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb171, $bb172;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    out_$i191 := $ne.i32(out_$i190, 0);
    goto corral_source_split_4470;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    out_$i190 := $M.69;
    goto corral_source_split_4469;

  $bb16:
    assume out_$i31 == 1;
    goto corral_source_split_4468;

  $bb15:
    assume !(out_$i30 == 1);
    assume {:verifier.code 0} true;
    out_$i31 := $slt.i32(out_$i24, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb195:
    assume !(out_$i208 == 1);
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb198:
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb197:
    assume !(out_$i212 == 1);
    assume {:verifier.code 0} true;
    goto $bb198;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    goto $bb198;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    $M.69 := 2;
    call {:si_unique_call 1039} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_4826;

  $bb196:
    assume out_$i212 == 1;
    goto corral_source_split_4825;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb196, $bb197;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    out_$i212 := $eq.i32(out_$i211, 0);
    goto corral_source_split_4823;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    out_$i211 := $M.77;
    goto corral_source_split_4822;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    $M.77 := out_$i210;
    call {:si_unique_call 1038} {:cexpr "ldv_retval_1"} boogie_si_record_i32(out_$i210);
    goto corral_source_split_4821;

  SeqInstr_279:
    goto corral_source_split_4820;

  SeqInstr_278:
    assume assertsPassed;
    goto SeqInstr_279;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1037} out_$i210 := gigaset_post_reset(out_$p209);
    goto SeqInstr_278;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    out_$p209 := $M.66;
    goto corral_source_split_4819;

  $bb194:
    assume out_$i208 == 1;
    goto corral_source_split_4818;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb194, $bb195;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    out_$i208 := $eq.i32(out_$i207, 3);
    goto corral_source_split_4799;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    out_$i207 := $M.69;
    goto corral_source_split_4798;

  $bb184:
    assume !(out_$i197 == 1);
    goto corral_source_split_4797;

  $bb208:
    assume {:verifier.code 0} true;
    goto $bb211;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    goto $bb211;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    $M.73 := out_$i226;
    call {:si_unique_call 1045} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i226);
    goto corral_source_split_4853;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    out_$i226 := $sub.i32(out_$i225, 1);
    goto corral_source_split_4852;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    out_$i225 := $M.73;
    goto corral_source_split_4851;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 1044} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_4850;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1043} gigaset_disconnect(out_$p224);
    goto corral_source_split_4849;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    out_$p224 := $M.66;
    goto corral_source_split_4848;

  $bb209:
    assume out_$i223 == 1;
    goto corral_source_split_4847;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb209, $bb210;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    out_$i223 := $eq.i32(out_$i222, 0);
    goto corral_source_split_4845;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    out_$i222 := $M.78;
    goto corral_source_split_4844;

  $bb206:
    assume out_$i221 == 1;
    goto corral_source_split_4843;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb206, $bb207;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    out_$i221 := $eq.i32(out_$i220, 2);
    goto corral_source_split_4841;

  $bb205:
    assume {:verifier.code 0} true;
    out_$i220 := $M.69;
    goto corral_source_split_4840;

  $bb202:
    assume {:verifier.code 0} true;
    goto $bb205;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    goto $bb205;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    $M.73 := out_$i219;
    call {:si_unique_call 1042} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i219);
    goto corral_source_split_4838;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    out_$i219 := $sub.i32(out_$i218, 1);
    goto corral_source_split_4837;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    out_$i218 := $M.73;
    goto corral_source_split_4836;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 1041} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_4835;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1040} gigaset_disconnect(out_$p217);
    goto corral_source_split_4834;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    out_$p217 := $M.66;
    goto corral_source_split_4833;

  $bb203:
    assume out_$i216 == 1;
    goto corral_source_split_4832;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb203, $bb204;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    out_$i216 := $eq.i32(out_$i215, 0);
    goto corral_source_split_4830;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    out_$i215 := $M.78;
    goto corral_source_split_4829;

  $bb200:
    assume out_$i214 == 1;
    goto corral_source_split_4828;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb200, $bb201;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    out_$i214 := $eq.i32(out_$i213, 3);
    goto corral_source_split_4787;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    out_$i213 := $M.69;
    goto corral_source_split_4786;

  $bb176:
    assume out_$i194 == 1;
    goto corral_source_split_4785;

  $bb175:
    assume !(out_$i193 == 1);
    assume {:verifier.code 0} true;
    out_$i194 := $slt.i32(out_$i192, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb176, $bb177;

  $bb201:
    assume {:verifier.code 0} true;
    assume !(out_$i214 == 1);
    goto $bb202;

  $bb204:
    assume {:verifier.code 0} true;
    assume !(out_$i216 == 1);
    goto $bb202;

  $bb207:
    assume {:verifier.code 0} true;
    assume !(out_$i221 == 1);
    goto $bb208;

  $bb210:
    assume {:verifier.code 0} true;
    assume !(out_$i223 == 1);
    goto $bb208;

  $bb213:
    assume !(out_$i228 == 1);
    assume {:verifier.code 0} true;
    goto $bb214;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    goto $bb214;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    $M.69 := 3;
    call {:si_unique_call 1047} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_4860;

  SeqInstr_282:
    goto corral_source_split_4859;

  SeqInstr_281:
    assume assertsPassed;
    goto SeqInstr_282;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1046} out_vslice_dummy_var_123 := gigaset_suspend(out_$p229, out_$i231);
    goto SeqInstr_281;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    out_$i231 := $load.i32($M.35, out_$p230);
    goto corral_source_split_4858;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    out_$p230 := $add.ref($add.ref(in_$p4, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_4857;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    out_$p229 := $M.66;
    goto corral_source_split_4856;

  $bb212:
    assume out_$i228 == 1;
    goto corral_source_split_4855;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb212, $bb213;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    out_$i228 := $eq.i32(out_$i227, 2);
    goto corral_source_split_4791;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    out_$i227 := $M.69;
    goto corral_source_split_4790;

  $bb178:
    assume out_$i195 == 1;
    goto corral_source_split_4789;

  $bb177:
    assume !(out_$i194 == 1);
    assume {:verifier.code 0} true;
    out_$i195 := $slt.i32(out_$i192, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb178, $bb179;

  $bb216:
    assume !(out_$i234 == 1);
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb219:
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb218:
    assume !(out_$i238 == 1);
    assume {:verifier.code 0} true;
    goto $bb219;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    goto $bb219;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    $M.69 := 2;
    call {:si_unique_call 1050} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_4870;

  $bb217:
    assume out_$i238 == 1;
    goto corral_source_split_4869;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb217, $bb218;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    out_$i238 := $eq.i32(out_$i237, 0);
    goto corral_source_split_4867;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    out_$i237 := $M.79;
    goto corral_source_split_4866;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    $M.79 := out_$i236;
    call {:si_unique_call 1049} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i236);
    goto corral_source_split_4865;

  SeqInstr_285:
    goto corral_source_split_4864;

  SeqInstr_284:
    assume assertsPassed;
    goto SeqInstr_285;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1048} out_$i236 := gigaset_resume(out_$p235);
    goto SeqInstr_284;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    out_$p235 := $M.66;
    goto corral_source_split_4863;

  $bb215:
    assume out_$i234 == 1;
    goto corral_source_split_4862;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb215, $bb216;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    out_$i234 := $eq.i32(out_$i233, 3);
    goto corral_source_split_4795;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    out_$i233 := $M.69;
    goto corral_source_split_4794;

  $bb180:
    assume out_$i196 == 1;
    goto corral_source_split_4793;

  $bb179:
    assume !(out_$i195 == 1);
    assume {:verifier.code 0} true;
    out_$i196 := $eq.i32(out_$i192, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb180, $bb181;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1051} ldv_stop();
    goto corral_source_split_4872;

  $bb182:
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb181:
    assume {:verifier.code 0} true;
    assume !(out_$i196 == 1);
    goto $bb182;

  $bb186:
    assume {:verifier.code 0} true;
    assume !(out_$i198 == 1);
    goto $bb182;

  $bb225:
    assume !(out_$i240 == 1);
    assume {:verifier.code 0} true;
    goto $bb226;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    goto $bb226;

  SeqInstr_288:
    goto corral_source_split_4875;

  SeqInstr_287:
    assume assertsPassed;
    goto SeqInstr_288;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1052} choose_timer_2();
    goto SeqInstr_287;

  $bb224:
    assume out_$i240 == 1;
    goto corral_source_split_4874;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb224, $bb225;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    out_$i240 := $ne.i32(out_$i239, 0);
    goto corral_source_split_4474;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    out_$i239 := $M.70;
    goto corral_source_split_4473;

  $bb17:
    assume !(out_$i31 == 1);
    goto corral_source_split_4472;

  $bb228:
    assume !(out_$i242 == 1);
    assume {:verifier.code 0} true;
    goto $bb229;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    goto $bb229;

  SeqInstr_291:
    goto corral_source_split_4878;

  SeqInstr_290:
    assume assertsPassed;
    goto SeqInstr_291;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1053} invoke_work_1();
    goto SeqInstr_290;

  $bb227:
    assume out_$i242 == 1;
    goto corral_source_split_4877;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb227, $bb228;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    out_$i242 := $ne.i32(out_$i241, 0);
    goto corral_source_split_4462;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    out_$i241 := $M.71;
    goto corral_source_split_4461;

  $bb12:
    assume out_$i29 == 1;
    goto corral_source_split_4460;

  $bb5:
    assume out_$i26 == 1;
    assume {:verifier.code 0} true;
    out_$i29 := $slt.i32(out_$i24, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb4:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    out_$i26 := $slt.i32(out_$i24, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb231:
    assume !(out_$i244 == 1);
    assume {:verifier.code 0} true;
    goto $bb232;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    goto $bb232;

  SeqInstr_294:
    goto corral_source_split_4881;

  SeqInstr_293:
    assume assertsPassed;
    goto SeqInstr_294;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1054} choose_timer_4();
    goto SeqInstr_293;

  $bb230:
    assume out_$i244 == 1;
    goto corral_source_split_4880;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb230, $bb231;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    out_$i244 := $ne.i32(out_$i243, 0);
    goto corral_source_split_4466;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    out_$i243 := $M.72;
    goto corral_source_split_4465;

  $bb13:
    assume !(out_$i29 == 1);
    goto corral_source_split_4464;

  $bb234:
    assume !(out_$i246 == 1);
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb250:
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb261:
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb259:
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb249:
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb245:
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb244:
    assume {:verifier.code 0} true;
    assume !(out_$i252 == 1);
    goto $bb245;

  $bb247:
    assume {:verifier.code 0} true;
    assume !(out_$i254 == 1);
    goto $bb245;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb247;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    out_$i254 := $eq.i32(out_$i253, 0);
    goto corral_source_split_4895;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    out_$i253 := $M.73;
    goto corral_source_split_4894;

  $bb243:
    assume out_$i252 == 1;
    goto corral_source_split_4893;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb243, $bb244;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    out_$i252 := $eq.i32(out_$i251, 3);
    goto corral_source_split_4891;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    out_$i251 := $M.74;
    goto corral_source_split_4890;

  $bb241:
    assume out_$i250 == 1;
    goto corral_source_split_4889;

  $bb236:
    assume out_$i248 == 1;
    assume {:verifier.code 0} true;
    out_$i250 := $eq.i32(out_$i247, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb241, $bb242;

  $bb235:
    assume {:verifier.code 0} true;
    out_$i248 := $slt.i32(out_$i247, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb236, $bb237;

  corral_source_split_4883:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1055} out_$i247 := __VERIFIER_nondet_int();
    call {:si_unique_call 1056} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i247);
    call {:si_unique_call 1057} {:cexpr "tmp___7"} boogie_si_record_i32(out_$i247);
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb233:
    assume out_$i246 == 1;
    goto corral_source_split_4883;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb233, $bb234;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    out_$i246 := $ne.i32(out_$i245, 0);
    goto corral_source_split_4454;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    out_$i245 := $M.74;
    goto corral_source_split_4453;

  $bb7:
    assume out_$i27 == 1;
    goto corral_source_split_4452;

  $bb6:
    assume !(out_$i26 == 1);
    assume {:verifier.code 0} true;
    out_$i27 := $slt.i32(out_$i24, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb252:
    assume !(out_$i256 == 1);
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb258:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb257:
    assume !(out_$i261 == 1);
    assume {:verifier.code 0} true;
    goto $bb258;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb257;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    out_$i261 := $ne.i32(out_$i260, 0);
    goto corral_source_split_4915;

  $bb255:
    assume {:verifier.code 0} true;
    out_$i260 := $M.80;
    goto corral_source_split_4914;

  $bb254:
    assume !(out_$i259 == 1);
    assume {:verifier.code 0} true;
    goto $bb255;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    goto $bb255;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1065} ldv_initialize_gigaset_ops_6();
    goto corral_source_split_4912;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    $M.67 := 1;
    call {:si_unique_call 1064} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4911;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    $M.74 := 3;
    call {:si_unique_call 1063} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_4910;

  $bb253:
    assume out_$i259 == 1;
    goto corral_source_split_4909;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb253, $bb254;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    out_$i259 := $eq.i32(out_$i258, 0);
    goto corral_source_split_4907;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    out_$i258 := $M.80;
    goto corral_source_split_4906;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    $M.80 := out_$i257;
    call {:si_unique_call 1062} {:cexpr "ldv_retval_3"} boogie_si_record_i32(out_$i257);
    goto corral_source_split_4905;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1061} out_$i257 := bas_gigaset_init();
    goto corral_source_split_4904;

  $bb251:
    assume out_$i256 == 1;
    goto corral_source_split_4903;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb251, $bb252;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    out_$i256 := $eq.i32(out_$i255, 1);
    goto corral_source_split_4887;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    out_$i255 := $M.74;
    goto corral_source_split_4886;

  $bb238:
    assume out_$i249 == 1;
    goto corral_source_split_4885;

  $bb237:
    assume !(out_$i248 == 1);
    assume {:verifier.code 0} true;
    out_$i249 := $eq.i32(out_$i247, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb238, $bb239;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    goto $bb261;

  $bb260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1067} ldv_stop();
    goto corral_source_split_4920;

  $bb240:
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb239:
    assume {:verifier.code 0} true;
    assume !(out_$i249 == 1);
    goto $bb240;

  $bb242:
    assume {:verifier.code 0} true;
    assume !(out_$i250 == 1);
    goto $bb240;

  $bb264:
    assume !(out_$i263 == 1);
    assume {:verifier.code 0} true;
    goto $bb265;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    goto $bb265;

  SeqInstr_297:
    goto corral_source_split_4923;

  SeqInstr_296:
    assume assertsPassed;
    goto SeqInstr_297;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1068} choose_timer_5();
    goto SeqInstr_296;

  $bb263:
    assume out_$i263 == 1;
    goto corral_source_split_4922;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb263, $bb264;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    out_$i263 := $ne.i32(out_$i262, 0);
    goto corral_source_split_4458;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    out_$i262 := $M.75;
    goto corral_source_split_4457;

  $bb9:
    assume out_$i28 == 1;
    goto corral_source_split_4456;

  $bb8:
    assume !(out_$i27 == 1);
    assume {:verifier.code 0} true;
    out_$i28 := $eq.i32(out_$i24, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    goto $bb267;

  $bb266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1069} ldv_stop();
    goto corral_source_split_4925;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i28 == 1);
    goto $bb11;

  $bb21:
    assume {:verifier.code 0} true;
    assume !(out_$i33 == 1);
    goto $bb11;

  $bb167_dummy:
    call {:si_unique_call 1} out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$p62, out_$i64, out_$i65, out_$p66, out_$i67, out_$i68, out_$p69, out_$i70, out_$i71, out_$p72, out_$i73, out_$i74, out_$i76, out_$i77, out_$p78, out_$i79, out_$i80, out_$i82, out_$i83, out_$p84, out_$i86, out_$i87, out_$p88, out_$i90, out_$i91, out_$p92, out_$i93, out_$i94, out_$p95, out_$i96, out_$i97, out_$p98, out_$i100, out_$i101, out_$p102, out_$i104, out_$i105, out_$p106, out_$i108, out_$i109, out_$p110, out_$i112, out_$i113, out_$p114, out_$i116, out_$i117, out_$p118, out_$i120, out_$i121, out_$p122, out_$i124, out_$i125, out_$p126, out_$i128, out_$i129, out_$p130, out_$i131, out_$i132, out_$p133, out_$i134, out_$i135, out_$p136, out_$i138, out_$i139, out_$p140, out_$i142, out_$i143, out_$p144, out_$i146, out_$i147, out_$p148, out_$i150, out_$i151, out_$p152, out_$i153, out_$i155, out_$i156, out_$p157, out_$i158, out_$i160, out_$i161, out_$p162, out_$i164, out_$i165, out_$p166, out_$i168, out_$i169, out_$p170, out_$i171, out_$i173, out_$i174, out_$p175, out_$i176, out_$i178, out_$i179, out_$i181, out_$i182, out_$i183, out_$i184, out_$i186, out_$i187, out_$i188, out_$i189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$i196, out_$i197, out_$i198, out_$i199, out_$i200, out_$p201, out_$i202, out_$i203, out_$i204, out_$i205, out_$i206, out_$i207, out_$i208, out_$p209, out_$i210, out_$i211, out_$i212, out_$i213, out_$i214, out_$i215, out_$i216, out_$p217, out_$i218, out_$i219, out_$i220, out_$i221, out_$i222, out_$i223, out_$p224, out_$i225, out_$i226, out_$i227, out_$i228, out_$p229, out_$p230, out_$i231, out_$i233, out_$i234, out_$p235, out_$i236, out_$i237, out_$i238, out_$i239, out_$i240, out_$i241, out_$i242, out_$i243, out_$i244, out_$i245, out_$i246, out_$i247, out_$i248, out_$i249, out_$i250, out_$i251, out_$i252, out_$i253, out_$i254, out_$i255, out_$i256, out_$i257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i263, out_vslice_dummy_var_98, out_vslice_dummy_var_99, out_vslice_dummy_var_100, out_vslice_dummy_var_101, out_vslice_dummy_var_102, out_vslice_dummy_var_103, out_vslice_dummy_var_104, out_vslice_dummy_var_105, out_vslice_dummy_var_106, out_vslice_dummy_var_107, out_vslice_dummy_var_108, out_vslice_dummy_var_109, out_vslice_dummy_var_110, out_vslice_dummy_var_111, out_vslice_dummy_var_112, out_vslice_dummy_var_113, out_vslice_dummy_var_114, out_vslice_dummy_var_115, out_vslice_dummy_var_116, out_vslice_dummy_var_117, out_vslice_dummy_var_118, out_vslice_dummy_var_119, out_vslice_dummy_var_120, out_vslice_dummy_var_121, out_vslice_dummy_var_122, out_vslice_dummy_var_123 := main_loop_$bb1(in_$p0, in_$p1, in_$p2, in_$p3, in_$p4, in_$p6, in_$p8, in_$p10, in_$p11, in_$p13, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$p62, out_$i64, out_$i65, out_$p66, out_$i67, out_$i68, out_$p69, out_$i70, out_$i71, out_$p72, out_$i73, out_$i74, out_$i76, out_$i77, out_$p78, out_$i79, out_$i80, out_$i82, out_$i83, out_$p84, out_$i86, out_$i87, out_$p88, out_$i90, out_$i91, out_$p92, out_$i93, out_$i94, out_$p95, out_$i96, out_$i97, out_$p98, out_$i100, out_$i101, out_$p102, out_$i104, out_$i105, out_$p106, out_$i108, out_$i109, out_$p110, out_$i112, out_$i113, out_$p114, out_$i116, out_$i117, out_$p118, out_$i120, out_$i121, out_$p122, out_$i124, out_$i125, out_$p126, out_$i128, out_$i129, out_$p130, out_$i131, out_$i132, out_$p133, out_$i134, out_$i135, out_$p136, out_$i138, out_$i139, out_$p140, out_$i142, out_$i143, out_$p144, out_$i146, out_$i147, out_$p148, out_$i150, out_$i151, out_$p152, out_$i153, out_$i155, out_$i156, out_$p157, out_$i158, out_$i160, out_$i161, out_$p162, out_$i164, out_$i165, out_$p166, out_$i168, out_$i169, out_$p170, out_$i171, out_$i173, out_$i174, out_$p175, out_$i176, out_$i178, out_$i179, out_$i181, out_$i182, out_$i183, out_$i184, out_$i186, out_$i187, out_$i188, out_$i189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$i196, out_$i197, out_$i198, out_$i199, out_$i200, out_$p201, out_$i202, out_$i203, out_$i204, out_$i205, out_$i206, out_$i207, out_$i208, out_$p209, out_$i210, out_$i211, out_$i212, out_$i213, out_$i214, out_$i215, out_$i216, out_$p217, out_$i218, out_$i219, out_$i220, out_$i221, out_$i222, out_$i223, out_$p224, out_$i225, out_$i226, out_$i227, out_$i228, out_$p229, out_$p230, out_$i231, out_$i233, out_$i234, out_$p235, out_$i236, out_$i237, out_$i238, out_$i239, out_$i240, out_$i241, out_$i242, out_$i243, out_$i244, out_$i245, out_$i246, out_$i247, out_$i248, out_$i249, out_$i250, out_$i251, out_$i252, out_$i253, out_$i254, out_$i255, out_$i256, out_$i257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i263, out_vslice_dummy_var_98, out_vslice_dummy_var_99, out_vslice_dummy_var_100, out_vslice_dummy_var_101, out_vslice_dummy_var_102, out_vslice_dummy_var_103, out_vslice_dummy_var_104, out_vslice_dummy_var_105, out_vslice_dummy_var_106, out_vslice_dummy_var_107, out_vslice_dummy_var_108, out_vslice_dummy_var_109, out_vslice_dummy_var_110, out_vslice_dummy_var_111, out_vslice_dummy_var_112, out_vslice_dummy_var_113, out_vslice_dummy_var_114, out_vslice_dummy_var_115, out_vslice_dummy_var_116, out_vslice_dummy_var_117, out_vslice_dummy_var_118, out_vslice_dummy_var_119, out_vslice_dummy_var_120, out_vslice_dummy_var_121, out_vslice_dummy_var_122, out_vslice_dummy_var_123);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p6: ref, in_$p8: ref, in_$p10: ref, in_$p11: ref, in_$p13: ref, in_$i24: i32, in_$i25: i1, in_$i26: i1, in_$i27: i1, in_$i28: i1, in_$i29: i1, in_$i30: i1, in_$i31: i1, in_$i32: i1, in_$i33: i1, in_$i34: i32, in_$i35: i1, in_$i36: i32, in_$i37: i1, in_$i38: i1, in_$i39: i1, in_$i40: i1, in_$i41: i1, in_$i42: i1, in_$i43: i1, in_$i44: i1, in_$i45: i1, in_$i46: i1, in_$i47: i1, in_$i48: i1, in_$i49: i1, in_$i50: i1, in_$i51: i1, in_$i52: i1, in_$i53: i1, in_$i54: i1, in_$i55: i1, in_$i56: i32, in_$i57: i1, in_$i58: i32, in_$i59: i1, in_$i60: i32, in_$i61: i1, in_$p62: ref, in_$i64: i32, in_$i65: i1, in_$p66: ref, in_$i67: i32, in_$i68: i1, in_$p69: ref, in_$i70: i32, in_$i71: i1, in_$p72: ref, in_$i73: i32, in_$i74: i32, in_$i76: i32, in_$i77: i1, in_$p78: ref, in_$i79: i32, in_$i80: i32, in_$i82: i32, in_$i83: i1, in_$p84: ref, in_$i86: i32, in_$i87: i1, in_$p88: ref, in_$i90: i32, in_$i91: i1, in_$p92: ref, in_$i93: i32, in_$i94: i1, in_$p95: ref, in_$i96: i32, in_$i97: i1, in_$p98: ref, in_$i100: i32, in_$i101: i1, in_$p102: ref, in_$i104: i32, in_$i105: i1, in_$p106: ref, in_$i108: i32, in_$i109: i1, in_$p110: ref, in_$i112: i32, in_$i113: i1, in_$p114: ref, in_$i116: i32, in_$i117: i1, in_$p118: ref, in_$i120: i32, in_$i121: i1, in_$p122: ref, in_$i124: i32, in_$i125: i1, in_$p126: ref, in_$i128: i32, in_$i129: i1, in_$p130: ref, in_$i131: i32, in_$i132: i1, in_$p133: ref, in_$i134: i32, in_$i135: i1, in_$p136: ref, in_$i138: i32, in_$i139: i1, in_$p140: ref, in_$i142: i32, in_$i143: i1, in_$p144: ref, in_$i146: i32, in_$i147: i1, in_$p148: ref, in_$i150: i32, in_$i151: i1, in_$p152: ref, in_$i153: i32, in_$i155: i32, in_$i156: i1, in_$p157: ref, in_$i158: i32, in_$i160: i32, in_$i161: i1, in_$p162: ref, in_$i164: i32, in_$i165: i1, in_$p166: ref, in_$i168: i32, in_$i169: i1, in_$p170: ref, in_$i171: i32, in_$i173: i32, in_$i174: i1, in_$p175: ref, in_$i176: i32, in_$i178: i32, in_$i179: i1, in_$i181: i32, in_$i182: i32, in_$i183: i32, in_$i184: i1, in_$i186: i32, in_$i187: i32, in_$i188: i32, in_$i189: i1, in_$i190: i32, in_$i191: i1, in_$i192: i32, in_$i193: i1, in_$i194: i1, in_$i195: i1, in_$i196: i1, in_$i197: i1, in_$i198: i1, in_$i199: i32, in_$i200: i1, in_$p201: ref, in_$i202: i32, in_$i203: i32, in_$i204: i1, in_$i205: i32, in_$i206: i32, in_$i207: i32, in_$i208: i1, in_$p209: ref, in_$i210: i32, in_$i211: i32, in_$i212: i1, in_$i213: i32, in_$i214: i1, in_$i215: i32, in_$i216: i1, in_$p217: ref, in_$i218: i32, in_$i219: i32, in_$i220: i32, in_$i221: i1, in_$i222: i32, in_$i223: i1, in_$p224: ref, in_$i225: i32, in_$i226: i32, in_$i227: i32, in_$i228: i1, in_$p229: ref, in_$p230: ref, in_$i231: i32, in_$i233: i32, in_$i234: i1, in_$p235: ref, in_$i236: i32, in_$i237: i32, in_$i238: i1, in_$i239: i32, in_$i240: i1, in_$i241: i32, in_$i242: i1, in_$i243: i32, in_$i244: i1, in_$i245: i32, in_$i246: i1, in_$i247: i32, in_$i248: i1, in_$i249: i1, in_$i250: i1, in_$i251: i32, in_$i252: i1, in_$i253: i32, in_$i254: i1, in_$i255: i32, in_$i256: i1, in_$i257: i32, in_$i258: i32, in_$i259: i1, in_$i260: i32, in_$i261: i1, in_$i262: i32, in_$i263: i1, in_vslice_dummy_var_98: i32, in_vslice_dummy_var_99: i32, in_vslice_dummy_var_100: i32, in_vslice_dummy_var_101: i32, in_vslice_dummy_var_102: i32, in_vslice_dummy_var_103: i32, in_vslice_dummy_var_104: i32, in_vslice_dummy_var_105: i32, in_vslice_dummy_var_106: i32, in_vslice_dummy_var_107: i32, in_vslice_dummy_var_108: i32, in_vslice_dummy_var_109: i32, in_vslice_dummy_var_110: i32, in_vslice_dummy_var_111: i32, in_vslice_dummy_var_112: i32, in_vslice_dummy_var_113: i32, in_vslice_dummy_var_114: i32, in_vslice_dummy_var_115: i32, in_vslice_dummy_var_116: i32, in_vslice_dummy_var_117: i32, in_vslice_dummy_var_118: i32, in_vslice_dummy_var_119: i32, in_vslice_dummy_var_120: i32, in_vslice_dummy_var_121: i32, in_vslice_dummy_var_122: i32, in_vslice_dummy_var_123: i32) returns (out_$i24: i32, out_$i25: i1, out_$i26: i1, out_$i27: i1, out_$i28: i1, out_$i29: i1, out_$i30: i1, out_$i31: i1, out_$i32: i1, out_$i33: i1, out_$i34: i32, out_$i35: i1, out_$i36: i32, out_$i37: i1, out_$i38: i1, out_$i39: i1, out_$i40: i1, out_$i41: i1, out_$i42: i1, out_$i43: i1, out_$i44: i1, out_$i45: i1, out_$i46: i1, out_$i47: i1, out_$i48: i1, out_$i49: i1, out_$i50: i1, out_$i51: i1, out_$i52: i1, out_$i53: i1, out_$i54: i1, out_$i55: i1, out_$i56: i32, out_$i57: i1, out_$i58: i32, out_$i59: i1, out_$i60: i32, out_$i61: i1, out_$p62: ref, out_$i64: i32, out_$i65: i1, out_$p66: ref, out_$i67: i32, out_$i68: i1, out_$p69: ref, out_$i70: i32, out_$i71: i1, out_$p72: ref, out_$i73: i32, out_$i74: i32, out_$i76: i32, out_$i77: i1, out_$p78: ref, out_$i79: i32, out_$i80: i32, out_$i82: i32, out_$i83: i1, out_$p84: ref, out_$i86: i32, out_$i87: i1, out_$p88: ref, out_$i90: i32, out_$i91: i1, out_$p92: ref, out_$i93: i32, out_$i94: i1, out_$p95: ref, out_$i96: i32, out_$i97: i1, out_$p98: ref, out_$i100: i32, out_$i101: i1, out_$p102: ref, out_$i104: i32, out_$i105: i1, out_$p106: ref, out_$i108: i32, out_$i109: i1, out_$p110: ref, out_$i112: i32, out_$i113: i1, out_$p114: ref, out_$i116: i32, out_$i117: i1, out_$p118: ref, out_$i120: i32, out_$i121: i1, out_$p122: ref, out_$i124: i32, out_$i125: i1, out_$p126: ref, out_$i128: i32, out_$i129: i1, out_$p130: ref, out_$i131: i32, out_$i132: i1, out_$p133: ref, out_$i134: i32, out_$i135: i1, out_$p136: ref, out_$i138: i32, out_$i139: i1, out_$p140: ref, out_$i142: i32, out_$i143: i1, out_$p144: ref, out_$i146: i32, out_$i147: i1, out_$p148: ref, out_$i150: i32, out_$i151: i1, out_$p152: ref, out_$i153: i32, out_$i155: i32, out_$i156: i1, out_$p157: ref, out_$i158: i32, out_$i160: i32, out_$i161: i1, out_$p162: ref, out_$i164: i32, out_$i165: i1, out_$p166: ref, out_$i168: i32, out_$i169: i1, out_$p170: ref, out_$i171: i32, out_$i173: i32, out_$i174: i1, out_$p175: ref, out_$i176: i32, out_$i178: i32, out_$i179: i1, out_$i181: i32, out_$i182: i32, out_$i183: i32, out_$i184: i1, out_$i186: i32, out_$i187: i32, out_$i188: i32, out_$i189: i1, out_$i190: i32, out_$i191: i1, out_$i192: i32, out_$i193: i1, out_$i194: i1, out_$i195: i1, out_$i196: i1, out_$i197: i1, out_$i198: i1, out_$i199: i32, out_$i200: i1, out_$p201: ref, out_$i202: i32, out_$i203: i32, out_$i204: i1, out_$i205: i32, out_$i206: i32, out_$i207: i32, out_$i208: i1, out_$p209: ref, out_$i210: i32, out_$i211: i32, out_$i212: i1, out_$i213: i32, out_$i214: i1, out_$i215: i32, out_$i216: i1, out_$p217: ref, out_$i218: i32, out_$i219: i32, out_$i220: i32, out_$i221: i1, out_$i222: i32, out_$i223: i1, out_$p224: ref, out_$i225: i32, out_$i226: i32, out_$i227: i32, out_$i228: i1, out_$p229: ref, out_$p230: ref, out_$i231: i32, out_$i233: i32, out_$i234: i1, out_$p235: ref, out_$i236: i32, out_$i237: i32, out_$i238: i1, out_$i239: i32, out_$i240: i1, out_$i241: i32, out_$i242: i1, out_$i243: i32, out_$i244: i1, out_$i245: i32, out_$i246: i1, out_$i247: i32, out_$i248: i1, out_$i249: i1, out_$i250: i1, out_$i251: i32, out_$i252: i1, out_$i253: i32, out_$i254: i1, out_$i255: i32, out_$i256: i1, out_$i257: i32, out_$i258: i32, out_$i259: i1, out_$i260: i32, out_$i261: i1, out_$i262: i32, out_$i263: i1, out_vslice_dummy_var_98: i32, out_vslice_dummy_var_99: i32, out_vslice_dummy_var_100: i32, out_vslice_dummy_var_101: i32, out_vslice_dummy_var_102: i32, out_vslice_dummy_var_103: i32, out_vslice_dummy_var_104: i32, out_vslice_dummy_var_105: i32, out_vslice_dummy_var_106: i32, out_vslice_dummy_var_107: i32, out_vslice_dummy_var_108: i32, out_vslice_dummy_var_109: i32, out_vslice_dummy_var_110: i32, out_vslice_dummy_var_111: i32, out_vslice_dummy_var_112: i32, out_vslice_dummy_var_113: i32, out_vslice_dummy_var_114: i32, out_vslice_dummy_var_115: i32, out_vslice_dummy_var_116: i32, out_vslice_dummy_var_117: i32, out_vslice_dummy_var_118: i32, out_vslice_dummy_var_119: i32, out_vslice_dummy_var_120: i32, out_vslice_dummy_var_121: i32, out_vslice_dummy_var_122: i32, out_vslice_dummy_var_123: i32);
  modifies $M.67, $M.0, $M.7, $M.17, $M.16, $M.19, $M.18, $M.21, $M.20, $M.23, $M.22, $CurrAddr, assertsPassed, $M.73, $M.69, $M.76, $M.77, $M.8, $M.10, $M.12, $M.14, $M.5, $M.79, $M.36, $M.38, $M.40, $M.42, $M.57, $M.58, $M.59, $M.60, $M.46, $M.47, $M.74, $M.80, $M.1, $M.78, $M.66, $M.49, $M.51, $M.53, $M.55;



implementation bas_gigaset_exit_loop_$bb4(in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$i9: i64, in_$p10: ref, in_$i11: i32, in_$i12: i1, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$i16: i64, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$i22: i32, in_$i23: i32, in_$i24: i1, in_$i25: i32, in_$i26: i32, in_$i27: i1, in_$i28: i32, in_$i29: i64, in_$i30: i64, in_$i31: i1, in_$p33: ref, in_$p34: ref, in_$i35: i32, in_$p36: ref, in_$p37: ref, in_$i38: i32, in_$p40: ref, in_$i41: i32, in_$i42: i32, in_$i43: i1, in_$i44: i32, in_$i45: i32, in_$i46: i1, in_$i47: i32, in_$i48: i64, in_$i49: i64, in_$i50: i1, in_$p52: ref, in_$p53: ref, in_$i54: i32, in_$p55: ref, in_$p56: ref, in_$i57: i32, in_$p59: ref, in_$i60: i32, in_$i61: i32, in_$i62: i1, in_$i63: i32, in_$i64: i32, in_$i65: i1, in_$i66: i32, in_$i67: i64, in_$i68: i64, in_$i69: i1, in_$p71: ref, in_$p72: ref, in_$i73: i32, in_$p74: ref, in_$p75: ref, in_$i76: i32, in_$p78: ref, in_$i79: i32, in_$p80: ref, in_$p81: ref, in_$i82: i32, in_$i83: i1, in_$i5: i32, in_vslice_dummy_var_124: i32, in_vslice_dummy_var_125: i32, in_vslice_dummy_var_126: i32, in_vslice_dummy_var_127: i32, in_vslice_dummy_var_128: i32, in_vslice_dummy_var_129: i32) returns (out_$p6: ref, out_$p7: ref, out_$p8: ref, out_$i9: i64, out_$p10: ref, out_$i11: i32, out_$i12: i1, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$i16: i64, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$i22: i32, out_$i23: i32, out_$i24: i1, out_$i25: i32, out_$i26: i32, out_$i27: i1, out_$i28: i32, out_$i29: i64, out_$i30: i64, out_$i31: i1, out_$p33: ref, out_$p34: ref, out_$i35: i32, out_$p36: ref, out_$p37: ref, out_$i38: i32, out_$p40: ref, out_$i41: i32, out_$i42: i32, out_$i43: i1, out_$i44: i32, out_$i45: i32, out_$i46: i1, out_$i47: i32, out_$i48: i64, out_$i49: i64, out_$i50: i1, out_$p52: ref, out_$p53: ref, out_$i54: i32, out_$p55: ref, out_$p56: ref, out_$i57: i32, out_$p59: ref, out_$i60: i32, out_$i61: i32, out_$i62: i1, out_$i63: i32, out_$i64: i32, out_$i65: i1, out_$i66: i32, out_$i67: i64, out_$i68: i64, out_$i69: i1, out_$p71: ref, out_$p72: ref, out_$i73: i32, out_$p74: ref, out_$p75: ref, out_$i76: i32, out_$p78: ref, out_$i79: i32, out_$p80: ref, out_$p81: ref, out_$i82: i32, out_$i83: i1, out_$i5: i32, out_vslice_dummy_var_124: i32, out_vslice_dummy_var_125: i32, out_vslice_dummy_var_126: i32, out_vslice_dummy_var_127: i32, out_vslice_dummy_var_128: i32, out_vslice_dummy_var_129: i32)
{

  entry:
    out_$p6, out_$p7, out_$p8, out_$i9, out_$p10, out_$i11, out_$i12, out_$p13, out_$p14, out_$p15, out_$i16, out_$p18, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p33, out_$p34, out_$i35, out_$p36, out_$p37, out_$i38, out_$p40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p52, out_$p53, out_$i54, out_$p55, out_$p56, out_$i57, out_$p59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$p71, out_$p72, out_$i73, out_$p74, out_$p75, out_$i76, out_$p78, out_$i79, out_$p80, out_$p81, out_$i82, out_$i83, out_$i5, out_vslice_dummy_var_124, out_vslice_dummy_var_125, out_vslice_dummy_var_126, out_vslice_dummy_var_127, out_vslice_dummy_var_128, out_vslice_dummy_var_129 := in_$p6, in_$p7, in_$p8, in_$i9, in_$p10, in_$i11, in_$i12, in_$p13, in_$p14, in_$p15, in_$i16, in_$p18, in_$p19, in_$p20, in_$p21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$p33, in_$p34, in_$i35, in_$p36, in_$p37, in_$i38, in_$p40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i50, in_$p52, in_$p53, in_$i54, in_$p55, in_$p56, in_$i57, in_$p59, in_$i60, in_$i61, in_$i62, in_$i63, in_$i64, in_$i65, in_$i66, in_$i67, in_$i68, in_$i69, in_$p71, in_$p72, in_$i73, in_$p74, in_$p75, in_$i76, in_$p78, in_$i79, in_$p80, in_$p81, in_$i82, in_$i83, in_$i5, in_vslice_dummy_var_124, in_vslice_dummy_var_125, in_vslice_dummy_var_126, in_vslice_dummy_var_127, in_vslice_dummy_var_128, in_vslice_dummy_var_129;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_4945;

  $bb28:
    assume out_$i83 == 1;
    assume {:verifier.code 0} true;
    out_$i5 := out_$i79;
    goto $bb28_dummy;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    out_$i83 := $ult.i32(out_$i79, out_$i82);
    goto corral_source_split_4961;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    out_$i82 := $load.i32($M.0, out_$p81);
    goto corral_source_split_4960;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref($add.ref(out_$p80, $mul.ref(0, 144)), $mul.ref(104, 1));
    goto corral_source_split_4959;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    out_$p80 := $M.1;
    goto corral_source_split_4958;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i79 := $add.i32(out_$i5, 1);
    call {:si_unique_call 1077} {:cexpr "i"} boogie_si_record_i32(out_$i79);
    goto corral_source_split_4957;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb6:
    assume out_$i12 == 1;
    goto corral_source_split_4955;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    out_$i12 := $slt.i32(out_$i11, 0);
    goto corral_source_split_4953;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1075} out_$i11 := gigaset_shutdown(out_$p10);
    call {:si_unique_call 1076} {:cexpr "tmp"} boogie_si_record_i32(out_$i11);
    goto corral_source_split_4952;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref(out_$p8, $mul.ref(out_$i9, 5232));
    goto corral_source_split_4951;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    out_$i9 := $sext.i32.i64(out_$i5);
    goto corral_source_split_4950;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    out_$p8 := $load.ref($M.0, out_$p7);
    goto corral_source_split_4949;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref($add.ref(out_$p6, $mul.ref(0, 144)), $mul.ref(112, 1));
    goto corral_source_split_4948;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p6 := $M.1;
    goto corral_source_split_4947;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p78, 0);
    goto corral_source_split_5047;

  $bb27:
    assume {:verifier.code 0} true;
    out_$p78 := $add.ref($add.ref(out_$p20, $mul.ref(0, 888)), $mul.ref(784, 1));
    goto corral_source_split_5046;

  $bb23:
    assume !(out_$i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1095} out_vslice_dummy_var_129 := usb_control_msg(out_$p75, out_$i76, 41, 66, 0, 0, $0.ref, 0, 20);
    goto corral_source_split_5044;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    out_$i76 := $or.i32(out_$i73, $sub.i32(0, 2147483648));
    goto corral_source_split_5043;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    out_$p75 := $load.ref($M.0, out_$p74);
    goto corral_source_split_5042;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref(out_$p20, $mul.ref(0, 888)), $mul.ref(0, 1));
    goto corral_source_split_5041;

  corral_source_split_5039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1093} out_$i73 := __create_pipe(out_$p72, 0);
    call {:si_unique_call 1094} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i73);
    goto corral_source_split_5040;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    out_$p72 := $load.ref($M.0, out_$p71);
    goto corral_source_split_5039;

  $bb26:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref(out_$p20, $mul.ref(0, 888)), $mul.ref(0, 1));
    goto corral_source_split_5038;

  $bb25:
    assume !(out_$i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1092} out_vslice_dummy_var_128 := printk.ref(.str.198);
    goto corral_source_split_5036;

  $bb24:
    assume out_$i69 == 1;
    goto corral_source_split_5035;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    out_$i69 := $ne.i64(out_$i68, 0);
    goto corral_source_split_5033;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1090} out_$i68 := ldv__builtin_expect(out_$i67, 0);
    call {:si_unique_call 1091} {:cexpr "tmp___4"} boogie_si_record_i64(out_$i68);
    goto corral_source_split_5032;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    out_$i67 := $sext.i32.i64(out_$i66);
    goto corral_source_split_5031;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    out_$i66 := $zext.i1.i32(out_$i65);
    goto corral_source_split_5030;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    out_$i65 := $ne.i32(out_$i64, 0);
    goto corral_source_split_5029;

  corral_source_split_5027:
    assume {:verifier.code 0} true;
    out_$i64 := $and.i32(out_$i63, 32768);
    goto corral_source_split_5028;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    out_$i63 := $load.i32($M.0, gigaset_debuglevel);
    goto corral_source_split_5027;

  $bb22:
    assume out_$i62 == 1;
    goto corral_source_split_5026;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    out_$i62 := $ne.i32(out_$i61, 0);
    goto corral_source_split_5024;

  corral_source_split_5022:
    assume {:verifier.code 0} true;
    out_$i61 := $and.i32(out_$i60, 1);
    goto corral_source_split_5023;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    out_$i60 := $load.i32($M.0, out_$p59);
    goto corral_source_split_5022;

  $bb21:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref(out_$p20, $mul.ref(0, 888)), $mul.ref(784, 1));
    goto corral_source_split_5021;

  $bb17:
    assume !(out_$i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1089} out_vslice_dummy_var_127 := usb_control_msg(out_$p56, out_$i57, 38, 66, 0, 0, $0.ref, 0, 20);
    goto corral_source_split_5019;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    out_$i57 := $or.i32(out_$i54, $sub.i32(0, 2147483648));
    goto corral_source_split_5018;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    out_$p56 := $load.ref($M.0, out_$p55);
    goto corral_source_split_5017;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(out_$p20, $mul.ref(0, 888)), $mul.ref(0, 1));
    goto corral_source_split_5016;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1087} out_$i54 := __create_pipe(out_$p53, 0);
    call {:si_unique_call 1088} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i54);
    goto corral_source_split_5015;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    out_$p53 := $load.ref($M.0, out_$p52);
    goto corral_source_split_5014;

  $bb20:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(out_$p20, $mul.ref(0, 888)), $mul.ref(0, 1));
    goto corral_source_split_5013;

  $bb19:
    assume !(out_$i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1086} out_vslice_dummy_var_126 := printk.ref(.str.202);
    goto corral_source_split_5011;

  $bb18:
    assume out_$i50 == 1;
    goto corral_source_split_5010;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    out_$i50 := $ne.i64(out_$i49, 0);
    goto corral_source_split_5008;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1084} out_$i49 := ldv__builtin_expect(out_$i48, 0);
    call {:si_unique_call 1085} {:cexpr "tmp___2"} boogie_si_record_i64(out_$i49);
    goto corral_source_split_5007;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    out_$i48 := $sext.i32.i64(out_$i47);
    goto corral_source_split_5006;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    out_$i47 := $zext.i1.i32(out_$i46);
    goto corral_source_split_5005;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    out_$i46 := $ne.i32(out_$i45, 0);
    goto corral_source_split_5004;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    out_$i45 := $and.i32(out_$i44, 32768);
    goto corral_source_split_5003;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    out_$i44 := $load.i32($M.0, gigaset_debuglevel);
    goto corral_source_split_5002;

  $bb16:
    assume out_$i43 == 1;
    goto corral_source_split_5001;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    out_$i43 := $ne.i32(out_$i42, 0);
    goto corral_source_split_4999;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    out_$i42 := $and.i32(out_$i41, 4);
    goto corral_source_split_4998;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    out_$i41 := $load.i32($M.0, out_$p40);
    goto corral_source_split_4997;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(out_$p20, $mul.ref(0, 888)), $mul.ref(784, 1));
    goto corral_source_split_4996;

  $bb11:
    assume !(out_$i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1083} out_vslice_dummy_var_125 := usb_control_msg(out_$p37, out_$i38, 36, 66, 0, 0, $0.ref, 0, 20);
    goto corral_source_split_4994;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    out_$i38 := $or.i32(out_$i35, $sub.i32(0, 2147483648));
    goto corral_source_split_4993;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    out_$p37 := $load.ref($M.0, out_$p36);
    goto corral_source_split_4992;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(out_$p20, $mul.ref(0, 888)), $mul.ref(0, 1));
    goto corral_source_split_4991;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1081} out_$i35 := __create_pipe(out_$p34, 0);
    call {:si_unique_call 1082} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i35);
    goto corral_source_split_4990;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    out_$p34 := $load.ref($M.0, out_$p33);
    goto corral_source_split_4989;

  $bb14:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(out_$p20, $mul.ref(0, 888)), $mul.ref(0, 1));
    goto corral_source_split_4988;

  $bb13:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1080} out_vslice_dummy_var_124 := printk.ref(.str.201);
    goto corral_source_split_4986;

  $bb12:
    assume out_$i31 == 1;
    goto corral_source_split_4985;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    out_$i31 := $ne.i64(out_$i30, 0);
    goto corral_source_split_4983;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1078} out_$i30 := ldv__builtin_expect(out_$i29, 0);
    call {:si_unique_call 1079} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i30);
    goto corral_source_split_4982;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    out_$i29 := $sext.i32.i64(out_$i28);
    goto corral_source_split_4981;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    out_$i28 := $zext.i1.i32(out_$i27);
    goto corral_source_split_4980;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    out_$i27 := $ne.i32(out_$i26, 0);
    goto corral_source_split_4979;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    out_$i26 := $and.i32(out_$i25, 32768);
    goto corral_source_split_4978;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i32($M.0, gigaset_debuglevel);
    goto corral_source_split_4977;

  $bb10:
    assume out_$i24 == 1;
    goto corral_source_split_4976;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_4973:
    assume {:verifier.code 0} true;
    out_$i24 := $ne.i32(out_$i23, 0);
    goto corral_source_split_4974;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    out_$i23 := $and.i32(out_$i22, 2);
    goto corral_source_split_4973;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    out_$i22 := $load.i32($M.0, out_$p21);
    goto corral_source_split_4972;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p20, $mul.ref(0, 888)), $mul.ref(784, 1));
    goto corral_source_split_4971;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.0, out_$p19);
    goto corral_source_split_4970;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    out_$p19 := $bitcast.ref.ref(out_$p18);
    goto corral_source_split_4969;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(out_$p15, $mul.ref(out_$i16, 5232)), $mul.ref(5224, 1));
    goto corral_source_split_4968;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    goto corral_source_split_4967;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    out_$i16 := $sext.i32.i64(out_$i5);
    goto corral_source_split_4966;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    out_$p15 := $load.ref($M.0, out_$p14);
    goto corral_source_split_4965;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(out_$p13, $mul.ref(0, 144)), $mul.ref(112, 1));
    goto corral_source_split_4964;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p13 := $M.1;
    goto corral_source_split_4963;

  $bb7:
    assume !(out_$i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb28_dummy:
    call {:si_unique_call 1} out_$p6, out_$p7, out_$p8, out_$i9, out_$p10, out_$i11, out_$i12, out_$p13, out_$p14, out_$p15, out_$i16, out_$p18, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p33, out_$p34, out_$i35, out_$p36, out_$p37, out_$i38, out_$p40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p52, out_$p53, out_$i54, out_$p55, out_$p56, out_$i57, out_$p59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$p71, out_$p72, out_$i73, out_$p74, out_$p75, out_$i76, out_$p78, out_$i79, out_$p80, out_$p81, out_$i82, out_$i83, out_$i5, out_vslice_dummy_var_124, out_vslice_dummy_var_125, out_vslice_dummy_var_126, out_vslice_dummy_var_127, out_vslice_dummy_var_128, out_vslice_dummy_var_129 := bas_gigaset_exit_loop_$bb4(out_$p6, out_$p7, out_$p8, out_$i9, out_$p10, out_$i11, out_$i12, out_$p13, out_$p14, out_$p15, out_$i16, out_$p18, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p33, out_$p34, out_$i35, out_$p36, out_$p37, out_$i38, out_$p40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p52, out_$p53, out_$i54, out_$p55, out_$p56, out_$i57, out_$p59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$p71, out_$p72, out_$i73, out_$p74, out_$p75, out_$i76, out_$p78, out_$i79, out_$p80, out_$p81, out_$i82, out_$i83, out_$i5, out_vslice_dummy_var_124, out_vslice_dummy_var_125, out_vslice_dummy_var_126, out_vslice_dummy_var_127, out_vslice_dummy_var_128, out_vslice_dummy_var_129);
    return;

  exit:
    return;
}



procedure bas_gigaset_exit_loop_$bb4(in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$i9: i64, in_$p10: ref, in_$i11: i32, in_$i12: i1, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$i16: i64, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$i22: i32, in_$i23: i32, in_$i24: i1, in_$i25: i32, in_$i26: i32, in_$i27: i1, in_$i28: i32, in_$i29: i64, in_$i30: i64, in_$i31: i1, in_$p33: ref, in_$p34: ref, in_$i35: i32, in_$p36: ref, in_$p37: ref, in_$i38: i32, in_$p40: ref, in_$i41: i32, in_$i42: i32, in_$i43: i1, in_$i44: i32, in_$i45: i32, in_$i46: i1, in_$i47: i32, in_$i48: i64, in_$i49: i64, in_$i50: i1, in_$p52: ref, in_$p53: ref, in_$i54: i32, in_$p55: ref, in_$p56: ref, in_$i57: i32, in_$p59: ref, in_$i60: i32, in_$i61: i32, in_$i62: i1, in_$i63: i32, in_$i64: i32, in_$i65: i1, in_$i66: i32, in_$i67: i64, in_$i68: i64, in_$i69: i1, in_$p71: ref, in_$p72: ref, in_$i73: i32, in_$p74: ref, in_$p75: ref, in_$i76: i32, in_$p78: ref, in_$i79: i32, in_$p80: ref, in_$p81: ref, in_$i82: i32, in_$i83: i1, in_$i5: i32, in_vslice_dummy_var_124: i32, in_vslice_dummy_var_125: i32, in_vslice_dummy_var_126: i32, in_vslice_dummy_var_127: i32, in_vslice_dummy_var_128: i32, in_vslice_dummy_var_129: i32) returns (out_$p6: ref, out_$p7: ref, out_$p8: ref, out_$i9: i64, out_$p10: ref, out_$i11: i32, out_$i12: i1, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$i16: i64, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$i22: i32, out_$i23: i32, out_$i24: i1, out_$i25: i32, out_$i26: i32, out_$i27: i1, out_$i28: i32, out_$i29: i64, out_$i30: i64, out_$i31: i1, out_$p33: ref, out_$p34: ref, out_$i35: i32, out_$p36: ref, out_$p37: ref, out_$i38: i32, out_$p40: ref, out_$i41: i32, out_$i42: i32, out_$i43: i1, out_$i44: i32, out_$i45: i32, out_$i46: i1, out_$i47: i32, out_$i48: i64, out_$i49: i64, out_$i50: i1, out_$p52: ref, out_$p53: ref, out_$i54: i32, out_$p55: ref, out_$p56: ref, out_$i57: i32, out_$p59: ref, out_$i60: i32, out_$i61: i32, out_$i62: i1, out_$i63: i32, out_$i64: i32, out_$i65: i1, out_$i66: i32, out_$i67: i64, out_$i68: i64, out_$i69: i1, out_$p71: ref, out_$p72: ref, out_$i73: i32, out_$p74: ref, out_$p75: ref, out_$i76: i32, out_$p78: ref, out_$i79: i32, out_$p80: ref, out_$p81: ref, out_$i82: i32, out_$i83: i1, out_$i5: i32, out_vslice_dummy_var_124: i32, out_vslice_dummy_var_125: i32, out_vslice_dummy_var_126: i32, out_vslice_dummy_var_127: i32, out_vslice_dummy_var_128: i32, out_vslice_dummy_var_129: i32);
  modifies $M.0;


