var $M.0: [ref]i8;

var $M.1: i8;

var $M.2: [ref]i8;

var $M.3: [ref]i64;

var $M.4: [ref]i8;

var $M.5: [ref]i8;

var $M.6: [ref]i8;

var $M.7: [ref]ref;

var $M.8: [ref]i32;

var $M.9: [ref]ref;

var $M.10: [ref]ref;

var $M.11: [ref]i64;

var $M.12: [ref]i32;

var $M.13: [ref]i8;

var $M.14: [ref]ref;

var $M.15: [ref]ref;

var $M.16: [ref]ref;

var $M.17: [ref]ref;

var $M.18: [ref]i8;

var $M.19: [ref]i64;

var $M.20: [ref]i8;

var $M.21: [ref]i8;

var $M.22: [ref]i8;

var $M.23: [ref]i64;

var $M.24: [ref]i64;

var $M.25: [ref]i64;

var $M.26: [ref]i64;

var $M.27: [ref]i8;

var $M.28: i32;

var $M.29: [ref]i32;

var $M.30: [ref]i64;

var $M.31: ref;

var $M.32: [ref]i8;

var $M.33: [ref]i8;

var $M.34: [ref]i64;

var $M.35: [ref]i8;

var $M.36: i32;

var $M.38: i32;

var $M.40: i32;

var $M.42: i32;

var $M.44: i32;

var $M.45: [ref]i64;

var $M.46: i32;

var $M.47: [ref]i64;

var $M.48: [ref]i64;

var $M.55: [ref]i8;

var $M.58: [ref]i64;

var $M.65: [ref]i8;

var $M.66: [ref]i32;

var $M.67: [ref]i8;

var $M.68: [ref]i8;

var $M.69: i32;

var $M.70: i32;

var $M.74: [ref]ref;

var $M.75: [ref]i8;

var $M.76: [ref]i8;

var $M.77: [ref]i32;

var $M.78: [ref]i64;

var $M.79: [ref]i64;

var $M.80: [ref]ref;

var $M.81: [ref]ref;

var $M.82: [ref]ref;

var $M.83: [ref]ref;

var $M.84: [ref]i24;

var $M.85: [ref]i8;

var $M.86: [ref]i64;

var $M.87: ref;

var $M.89: [ref]i64;

var $M.90: [ref]i64;

var $M.91: [ref]i64;

var $M.92: [ref]ref;

var $M.93: [ref]ref;

var $M.96: [ref]ref;

var $M.97: [ref]i64;

var $M.98: [ref]i64;

var $M.100: [ref]ref;

var $M.101: [ref]ref;

var $M.102: [ref]ref;

var $M.103: [ref]ref;

var $M.104: [ref]i24;

var $M.105: [ref]i8;

var $M.106: i8;

var $M.107: i8;

var $M.108: i32;

var $M.109: i32;

var $M.110: i32;

var $M.111: i32;

var $M.112: i32;

var $M.113: i32;

var $M.114: i32;

var $M.115: i32;

var $M.120: [ref]i8;

var $M.121: [ref]i8;

var $M.122: [ref]ref;

var $M.123: [ref]i64;

var $M.124: [ref]ref;

var $M.125: [ref]i32;

var $M.126: [ref]ref;

var $M.127: [ref]ref;

var $M.128: [ref]i8;

var $M.129: [ref]i64;

var $M.130: [ref]i64;

var $M.131: [ref]i8;

var $M.132: [ref]i64;

var $M.133: [ref]i8;

var $M.134: [ref]i8;

var $M.135: [ref]i8;

var $M.136: [ref]i8;

var $M.137: [ref]i64;

var $M.138: i32;

var $M.139: [ref]i8;

var $M.148: i32;

var $M.150: i32;

var $M.154: i32;

var $M.155: i32;

var $M.157: i32;

var $M.158: ref;

var $M.159: ref;

var $M.160: i32;

var $M.161: ref;

var $M.162: i32;

var $M.163: i8;

var $M.164: i8;

var $M.165: i8;

var $M.166: i8;

var $M.167: i32;

var $M.168: i32;

var $M.169: i32;

var $M.170: ref;

var $M.171: ref;

var $M.172: i32;

var $M.180: [ref]i8;

var $M.181: [ref]i8;

var $M.182: [ref]i8;

var $M.183: [ref]i8;

var $M.184: [ref]i8;

var $M.185: [ref]i8;

var $M.186: [ref]i8;

var $M.187: [ref]i8;

var $M.188: [ref]i8;

var $M.189: [ref]i8;

var $M.190: [ref]i8;

var $M.191: [ref]i8;

var $M.192: [ref]i8;

var $M.193: [ref]i8;

var $M.194: [ref]i8;

var $M.231: [ref]i8;

var $M.232: [ref]i8;

var $M.233: [ref]i8;

var $M.234: [ref]i8;

var $M.235: [ref]i8;

var $M.236: [ref]i8;

var $M.237: [ref]i8;

var $M.238: [ref]i8;

var $M.239: [ref]i8;

var $M.240: [ref]i8;

var $M.241: [ref]i8;

var $M.242: [ref]i8;

var $M.243: [ref]i8;

var $M.244: [ref]i8;

var $M.245: [ref]i32;

var $M.246: [ref]i32;

var $M.247: [ref]i32;

var $M.248: [ref]i32;

var $M.249: [ref]i32;

var $M.250: [ref]i32;

var $M.251: [ref]i64;

var $M.321: [ref]i8;

var $M.322: [ref]i8;

var $M.323: [ref]i8;

var $M.324: [ref]i8;

var $M.325: [ref]i8;

var $M.326: [ref]i8;

var $M.327: [ref]i8;

var $M.328: [ref]i8;

var $M.329: [ref]i8;

var $M.330: [ref]i8;

var $M.331: [ref]i8;

var $M.332: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 939441);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32816));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const ldv_irq_2_0: ref;

axiom ldv_irq_2_0 == $sub.ref(0, 1028);

const ldv_irq_2_2: ref;

axiom ldv_irq_2_2 == $sub.ref(0, 2056);

const ldv_irq_2_1: ref;

axiom ldv_irq_2_1 == $sub.ref(0, 3084);

const ldv_irq_1_3: ref;

axiom ldv_irq_1_3 == $sub.ref(0, 4112);

const ldv_irq_1_0: ref;

axiom ldv_irq_1_0 == $sub.ref(0, 5140);

const ldv_irq_1_2: ref;

axiom ldv_irq_1_2 == $sub.ref(0, 6168);

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 7196);

const ldv_irq_1_1: ref;

axiom ldv_irq_1_1 == $sub.ref(0, 8224);

const ldv_irq_2_3: ref;

axiom ldv_irq_2_3 == $sub.ref(0, 9252);

const __ksymtab_vmci_context_get_priv_flags: ref;

axiom __ksymtab_vmci_context_get_priv_flags == $sub.ref(0, 10292);

const {:count 28} __kstrtab_vmci_context_get_priv_flags: ref;

axiom __kstrtab_vmci_context_get_priv_flags == $sub.ref(0, 11344);

const ldv_mutex_subscriber_mutex: ref;

axiom ldv_mutex_subscriber_mutex == $sub.ref(0, 12372);

const ldv_mutex_mutex_of_vmci_queue_kern_if: ref;

axiom ldv_mutex_mutex_of_vmci_queue_kern_if == $sub.ref(0, 13400);

const ldv_mutex_mutex_of_qp_list: ref;

axiom ldv_mutex_mutex_of_qp_list == $sub.ref(0, 14428);

const ldv_mutex_mutex_of_device: ref;

axiom ldv_mutex_mutex_of_device == $sub.ref(0, 15456);

const ldv_mutex_lock_of_vmci_host_dev: ref;

axiom ldv_mutex_lock_of_vmci_host_dev == $sub.ref(0, 16484);

const ldv_mutex_lock: ref;

axiom ldv_mutex_lock == $sub.ref(0, 17512);

const ldv_mutex_i_mutex_of_inode: ref;

axiom ldv_mutex_i_mutex_of_inode == $sub.ref(0, 18540);

const vmci_resource_table: ref;

axiom vmci_resource_table == $sub.ref(0, 20660);

const {:count 17} __kstrtab_vmci_qpair_peekv: ref;

axiom __kstrtab_vmci_qpair_peekv == $sub.ref(0, 21701);

const {:count 18} __kstrtab_vmci_qpair_dequev: ref;

axiom __kstrtab_vmci_qpair_dequev == $sub.ref(0, 22743);

const {:count 18} __kstrtab_vmci_qpair_enquev: ref;

axiom __kstrtab_vmci_qpair_enquev == $sub.ref(0, 23785);

const {:count 16} __kstrtab_vmci_qpair_peek: ref;

axiom __kstrtab_vmci_qpair_peek == $sub.ref(0, 24825);

const {:count 19} __kstrtab_vmci_qpair_dequeue: ref;

axiom __kstrtab_vmci_qpair_dequeue == $sub.ref(0, 25868);

const {:count 19} __kstrtab_vmci_qpair_enqueue: ref;

axiom __kstrtab_vmci_qpair_enqueue == $sub.ref(0, 26911);

const {:count 29} __kstrtab_vmci_qpair_consume_buf_ready: ref;

axiom __kstrtab_vmci_qpair_consume_buf_ready == $sub.ref(0, 27964);

const {:count 29} __kstrtab_vmci_qpair_produce_buf_ready: ref;

axiom __kstrtab_vmci_qpair_produce_buf_ready == $sub.ref(0, 29017);

const {:count 30} __kstrtab_vmci_qpair_consume_free_space: ref;

axiom __kstrtab_vmci_qpair_consume_free_space == $sub.ref(0, 30071);

const {:count 30} __kstrtab_vmci_qpair_produce_free_space: ref;

axiom __kstrtab_vmci_qpair_produce_free_space == $sub.ref(0, 31125);

const {:count 31} __kstrtab_vmci_qpair_get_consume_indexes: ref;

axiom __kstrtab_vmci_qpair_get_consume_indexes == $sub.ref(0, 32180);

const {:count 31} __kstrtab_vmci_qpair_get_produce_indexes: ref;

axiom __kstrtab_vmci_qpair_get_produce_indexes == $sub.ref(0, 33235);

const {:count 18} __kstrtab_vmci_qpair_detach: ref;

axiom __kstrtab_vmci_qpair_detach == $sub.ref(0, 34277);

const {:count 17} __kstrtab_vmci_qpair_alloc: ref;

axiom __kstrtab_vmci_qpair_alloc == $sub.ref(0, 35318);

const VMCI_INVALID_HANDLE___2: ref;

axiom VMCI_INVALID_HANDLE___2 == $sub.ref(0, 36350);

const qp_guest_endpoints: ref;

axiom qp_guest_endpoints == $sub.ref(0, 37550);

const qp_broker_list: ref;

axiom qp_broker_list == $sub.ref(0, 38750);

const VMCI_ANON_SRC_HANDLE___1: ref;

axiom VMCI_ANON_SRC_HANDLE___1 == $sub.ref(0, 39782);

const vmuser_fops: ref;

axiom vmuser_fops == $sub.ref(0, 41030);

const vmci_host_miscdev: ref;

axiom vmci_host_miscdev == $sub.ref(0, 42134);

const vmci_host_active_users: ref;

axiom vmci_host_active_users == $sub.ref(0, 43162);

const VMCI_INVALID_HANDLE___1: ref;

axiom VMCI_INVALID_HANDLE___1 == $sub.ref(0, 44194);

const vmci_disable_msi: ref;

axiom vmci_disable_msi == $sub.ref(0, 45219);

const vmci_disable_msix: ref;

axiom vmci_disable_msix == $sub.ref(0, 46244);

const ctx_update_sub_id: ref;

axiom ctx_update_sub_id == $sub.ref(0, 47272);

const {:count 2} vmci_ids: ref;

axiom vmci_ids == $sub.ref(0, 48360);

const vmci_guest_driver: ref;

axiom vmci_guest_driver == $sub.ref(0, 49696);

const {:count 19} __kstrtab_vmci_send_datagram: ref;

axiom __kstrtab_vmci_send_datagram == $sub.ref(0, 50739);

const vmci_dev_spinlock: ref;

axiom vmci_dev_spinlock == $sub.ref(0, 51835);

const VMCI_ANON_SRC_HANDLE___0: ref;

axiom VMCI_ANON_SRC_HANDLE___0 == $sub.ref(0, 52867);

const vm_context_id: ref;

axiom vm_context_id == $sub.ref(0, 53895);

const vmci_num_guest_devices: ref;

axiom vmci_num_guest_devices == $sub.ref(0, 54923);

const {:count 23} __kstrtab_vmci_event_unsubscribe: ref;

axiom __kstrtab_vmci_event_unsubscribe == $sub.ref(0, 55970);

const {:count 21} __kstrtab_vmci_event_subscribe: ref;

axiom __kstrtab_vmci_event_subscribe == $sub.ref(0, 57015);

const subscriber_mutex: ref;

axiom subscriber_mutex == $sub.ref(0, 58199);

const vmci_disable_host: ref;

axiom vmci_disable_host == $sub.ref(0, 59224);

const vmci_disable_guest: ref;

axiom vmci_disable_guest == $sub.ref(0, 60249);

const vmci_host_personality_initialized: ref;

axiom vmci_host_personality_initialized == $sub.ref(0, 61274);

const vmci_guest_personality_initialized: ref;

axiom vmci_guest_personality_initialized == $sub.ref(0, 62299);

const {:count 20} __kstrtab_vmci_get_context_id: ref;

axiom __kstrtab_vmci_get_context_id == $sub.ref(0, 63343);

const {:count 21} __kstrtab_vmci_doorbell_notify: ref;

axiom __kstrtab_vmci_doorbell_notify == $sub.ref(0, 64388);

const VMCI_INVALID_HANDLE___0: ref;

axiom VMCI_INVALID_HANDLE___0 == $sub.ref(0, 65420);

const {:count 22} __kstrtab_vmci_doorbell_destroy: ref;

axiom __kstrtab_vmci_doorbell_destroy == $sub.ref(0, 66466);

const {:count 21} __kstrtab_vmci_doorbell_create: ref;

axiom __kstrtab_vmci_doorbell_create == $sub.ref(0, 67511);

const last_notify_idx_reserved: ref;

axiom last_notify_idx_reserved == $sub.ref(0, 68539);

const last_notify_idx_released: ref;

axiom last_notify_idx_released == $sub.ref(0, 69567);

const notify_idx_count: ref;

axiom notify_idx_count == $sub.ref(0, 70595);

const vmci_doorbell_it: ref;

axiom vmci_doorbell_it == $sub.ref(0, 72203);

const VMCI_ANON_SRC_HANDLE: ref;

axiom VMCI_ANON_SRC_HANDLE == $sub.ref(0, 73235);

const {:count 19} __kstrtab_vmci_datagram_send: ref;

axiom __kstrtab_vmci_datagram_send == $sub.ref(0, 74278);

const {:count 29} __kstrtab_vmci_datagram_destroy_handle: ref;

axiom __kstrtab_vmci_datagram_destroy_handle == $sub.ref(0, 75331);

const {:count 28} __kstrtab_vmci_datagram_create_handle: ref;

axiom __kstrtab_vmci_datagram_create_handle == $sub.ref(0, 76383);

const {:count 33} __kstrtab_vmci_datagram_create_handle_priv: ref;

axiom __kstrtab_vmci_datagram_create_handle_priv == $sub.ref(0, 77440);

const delayed_dg_host_queue_size: ref;

axiom delayed_dg_host_queue_size == $sub.ref(0, 78468);

const {:count 22} __kstrtab_vmci_is_context_owner: ref;

axiom __kstrtab_vmci_is_context_owner == $sub.ref(0, 79514);

const VMCI_INVALID_HANDLE: ref;

axiom VMCI_INVALID_HANDLE == $sub.ref(0, 80546);

const ctx_list: ref;

axiom ctx_list == $sub.ref(0, 81658);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 82686);

const vmci_host_device_initialized: ref;

axiom vmci_host_device_initialized == $sub.ref(0, 83711);

const host_context: ref;

axiom host_context == $sub.ref(0, 84743);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 85771);

const {:count 2} __mod_pci__vmci_ids_device_table: ref;

axiom __mod_pci__vmci_ids_device_table == $sub.ref(0, 86859);

const vmci_dev_g: ref;

axiom vmci_dev_g == $sub.ref(0, 87891);

const vmci_pdev: ref;

axiom vmci_pdev == $sub.ref(0, 88923);

const {:count 7} subscriber_array: ref;

axiom subscriber_array == $sub.ref(0, 90059);

const ldv_retval_2: ref;

axiom ldv_retval_2 == $sub.ref(0, 91087);

const ldv_state_variable_4: ref;

axiom ldv_state_variable_4 == $sub.ref(0, 92115);

const ldv_irq_line_1_0: ref;

axiom ldv_irq_line_1_0 == $sub.ref(0, 93143);

const ldv_state_variable_3: ref;

axiom ldv_state_variable_3 == $sub.ref(0, 94171);

const ldv_irq_line_1_3: ref;

axiom ldv_irq_line_1_3 == $sub.ref(0, 95199);

const vmci_guest_driver_group1: ref;

axiom vmci_guest_driver_group1 == $sub.ref(0, 96231);

const ldv_irq_data_2_0: ref;

axiom ldv_irq_data_2_0 == $sub.ref(0, 97263);

const ldv_irq_data_1_2: ref;

axiom ldv_irq_data_1_2 == $sub.ref(0, 98295);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 99323);

const ldv_irq_data_1_3: ref;

axiom ldv_irq_data_1_3 == $sub.ref(0, 100355);

const ldv_irq_line_2_1: ref;

axiom ldv_irq_line_2_1 == $sub.ref(0, 101383);

const ldv_irq_data_1_0: ref;

axiom ldv_irq_data_1_0 == $sub.ref(0, 102415);

const ldv_state_variable_6: ref;

axiom ldv_state_variable_6 == $sub.ref(0, 103443);

const ldv_irq_line_2_2: ref;

axiom ldv_irq_line_2_2 == $sub.ref(0, 104471);

const ldv_irq_data_1_1: ref;

axiom ldv_irq_data_1_1 == $sub.ref(0, 105503);

const ldv_irq_data_2_1: ref;

axiom ldv_irq_data_2_1 == $sub.ref(0, 106535);

const ldv_irq_line_2_3: ref;

axiom ldv_irq_line_2_3 == $sub.ref(0, 107563);

const vmuser_fops_group1: ref;

axiom vmuser_fops_group1 == $sub.ref(0, 108595);

const ldv_irq_line_1_2: ref;

axiom ldv_irq_line_1_2 == $sub.ref(0, 109623);

const ldv_state_variable_7: ref;

axiom ldv_state_variable_7 == $sub.ref(0, 110651);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 111679);

const ldv_irq_data_2_2: ref;

axiom ldv_irq_data_2_2 == $sub.ref(0, 112711);

const ldv_irq_line_1_1: ref;

axiom ldv_irq_line_1_1 == $sub.ref(0, 113739);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 114767);

const ldv_irq_line_2_0: ref;

axiom ldv_irq_line_2_0 == $sub.ref(0, 115795);

const ldv_irq_data_2_3: ref;

axiom ldv_irq_data_2_3 == $sub.ref(0, 116827);

const vmuser_fops_group2: ref;

axiom vmuser_fops_group2 == $sub.ref(0, 117859);

const ldv_state_variable_5: ref;

axiom ldv_state_variable_5 == $sub.ref(0, 118887);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 119915);

const pci_counter: ref;

axiom pci_counter == $sub.ref(0, 120943);

const max_notify_idx: ref;

axiom max_notify_idx == $sub.ref(0, 121971);

const ldv_work_5_2: ref;

axiom ldv_work_5_2 == $sub.ref(0, 122999);

const ldv_work_struct_5_1: ref;

axiom ldv_work_struct_5_1 == $sub.ref(0, 124031);

const ldv_work_struct_5_0: ref;

axiom ldv_work_struct_5_0 == $sub.ref(0, 125063);

const ldv_work_5_1: ref;

axiom ldv_work_5_1 == $sub.ref(0, 126091);

const ldv_work_5_0: ref;

axiom ldv_work_5_0 == $sub.ref(0, 127119);

const ldv_work_5_3: ref;

axiom ldv_work_5_3 == $sub.ref(0, 128147);

const ldv_work_struct_5_3: ref;

axiom ldv_work_struct_5_3 == $sub.ref(0, 129179);

const ldv_work_struct_5_2: ref;

axiom ldv_work_struct_5_2 == $sub.ref(0, 130211);

const ldv_work_struct_4_1: ref;

axiom ldv_work_struct_4_1 == $sub.ref(0, 131243);

const ldv_work_4_2: ref;

axiom ldv_work_4_2 == $sub.ref(0, 132271);

const ldv_work_struct_3_0: ref;

axiom ldv_work_struct_3_0 == $sub.ref(0, 133303);

const ldv_work_struct_4_2: ref;

axiom ldv_work_struct_4_2 == $sub.ref(0, 134335);

const ldv_work_3_1: ref;

axiom ldv_work_3_1 == $sub.ref(0, 135363);

const ldv_work_4_3: ref;

axiom ldv_work_4_3 == $sub.ref(0, 136391);

const ldv_work_4_1: ref;

axiom ldv_work_4_1 == $sub.ref(0, 137419);

const ldv_work_struct_3_2: ref;

axiom ldv_work_struct_3_2 == $sub.ref(0, 138451);

const ldv_work_4_0: ref;

axiom ldv_work_4_0 == $sub.ref(0, 139479);

const ldv_work_struct_3_3: ref;

axiom ldv_work_struct_3_3 == $sub.ref(0, 140511);

const ldv_work_struct_4_0: ref;

axiom ldv_work_struct_4_0 == $sub.ref(0, 141543);

const ldv_work_3_3: ref;

axiom ldv_work_3_3 == $sub.ref(0, 142571);

const ldv_work_struct_4_3: ref;

axiom ldv_work_struct_4_3 == $sub.ref(0, 143603);

const ldv_work_3_0: ref;

axiom ldv_work_3_0 == $sub.ref(0, 144631);

const ldv_work_3_2: ref;

axiom ldv_work_3_2 == $sub.ref(0, 145659);

const ldv_work_struct_3_1: ref;

axiom ldv_work_struct_3_1 == $sub.ref(0, 146691);

const ctx_dummy_notify: ref;

axiom ctx_dummy_notify == $sub.ref(0, 147716);

const __ksymtab_vmci_qpair_peekv: ref;

axiom __ksymtab_vmci_qpair_peekv == $sub.ref(0, 148756);

const __ksymtab_vmci_qpair_dequev: ref;

axiom __ksymtab_vmci_qpair_dequev == $sub.ref(0, 149796);

const __ksymtab_vmci_qpair_enquev: ref;

axiom __ksymtab_vmci_qpair_enquev == $sub.ref(0, 150836);

const __ksymtab_vmci_qpair_peek: ref;

axiom __ksymtab_vmci_qpair_peek == $sub.ref(0, 151876);

const __ksymtab_vmci_qpair_dequeue: ref;

axiom __ksymtab_vmci_qpair_dequeue == $sub.ref(0, 152916);

const __ksymtab_vmci_qpair_enqueue: ref;

axiom __ksymtab_vmci_qpair_enqueue == $sub.ref(0, 153956);

const __ksymtab_vmci_qpair_consume_buf_ready: ref;

axiom __ksymtab_vmci_qpair_consume_buf_ready == $sub.ref(0, 154996);

const __ksymtab_vmci_qpair_produce_buf_ready: ref;

axiom __ksymtab_vmci_qpair_produce_buf_ready == $sub.ref(0, 156036);

const __ksymtab_vmci_qpair_consume_free_space: ref;

axiom __ksymtab_vmci_qpair_consume_free_space == $sub.ref(0, 157076);

const __ksymtab_vmci_qpair_produce_free_space: ref;

axiom __ksymtab_vmci_qpair_produce_free_space == $sub.ref(0, 158116);

const __ksymtab_vmci_qpair_get_consume_indexes: ref;

axiom __ksymtab_vmci_qpair_get_consume_indexes == $sub.ref(0, 159156);

const __ksymtab_vmci_qpair_get_produce_indexes: ref;

axiom __ksymtab_vmci_qpair_get_produce_indexes == $sub.ref(0, 160196);

const __ksymtab_vmci_qpair_detach: ref;

axiom __ksymtab_vmci_qpair_detach == $sub.ref(0, 161236);

const __ksymtab_vmci_qpair_alloc: ref;

axiom __ksymtab_vmci_qpair_alloc == $sub.ref(0, 162276);

const __ksymtab_vmci_send_datagram: ref;

axiom __ksymtab_vmci_send_datagram == $sub.ref(0, 163316);

const __ksymtab_vmci_event_unsubscribe: ref;

axiom __ksymtab_vmci_event_unsubscribe == $sub.ref(0, 164356);

const __ksymtab_vmci_event_subscribe: ref;

axiom __ksymtab_vmci_event_subscribe == $sub.ref(0, 165396);

const __ksymtab_vmci_get_context_id: ref;

axiom __ksymtab_vmci_get_context_id == $sub.ref(0, 166436);

const __ksymtab_vmci_doorbell_notify: ref;

axiom __ksymtab_vmci_doorbell_notify == $sub.ref(0, 167476);

const __ksymtab_vmci_doorbell_destroy: ref;

axiom __ksymtab_vmci_doorbell_destroy == $sub.ref(0, 168516);

const __ksymtab_vmci_doorbell_create: ref;

axiom __ksymtab_vmci_doorbell_create == $sub.ref(0, 169556);

const __ksymtab_vmci_datagram_send: ref;

axiom __ksymtab_vmci_datagram_send == $sub.ref(0, 170596);

const __ksymtab_vmci_datagram_destroy_handle: ref;

axiom __ksymtab_vmci_datagram_destroy_handle == $sub.ref(0, 171636);

const __ksymtab_vmci_datagram_create_handle: ref;

axiom __ksymtab_vmci_datagram_create_handle == $sub.ref(0, 172676);

const __ksymtab_vmci_datagram_create_handle_priv: ref;

axiom __ksymtab_vmci_datagram_create_handle_priv == $sub.ref(0, 173716);

const __ksymtab_vmci_is_context_owner: ref;

axiom __ksymtab_vmci_is_context_owner == $sub.ref(0, 174756);

const {:count 21} .str.62: ref;

axiom .str.62 == $sub.ref(0, 175801);

const {:count 215} .str.63: ref;

axiom .str.63 == $sub.ref(0, 177040);

const {:count 21} .str.57: ref;

axiom .str.57 == $sub.ref(0, 178085);

const {:count 66} .str.50: ref;

axiom .str.50 == $sub.ref(0, 179175);

const {:count 104} .str.51: ref;

axiom .str.51 == $sub.ref(0, 180303);

const {:count 76} .str.52: ref;

axiom .str.52 == $sub.ref(0, 181403);

const {:count 7} .str.175: ref;

axiom .str.175 == $sub.ref(0, 182434);

const {:count 7} .str.176: ref;

axiom .str.176 == $sub.ref(0, 183465);

const {:count 71} .str.174: ref;

axiom .str.174 == $sub.ref(0, 184560);

const {:count 44} .str.18: ref;

axiom .str.18 == $sub.ref(0, 185628);

const {:count 56} .str.19: ref;

axiom .str.19 == $sub.ref(0, 186708);

const {:count 34} .str.20: ref;

axiom .str.20 == $sub.ref(0, 187766);

const {:count 216} .str.181: ref;

axiom .str.181 == $sub.ref(0, 189006);

const {:count 25} .str.59: ref;

axiom .str.59 == $sub.ref(0, 190055);

const {:count 44} .str.61: ref;

axiom .str.61 == $sub.ref(0, 191123);

const rcu_lock_map: ref;

axiom rcu_lock_map == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const __preempt_count: ref;

axiom __preempt_count == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 42} .str.60: ref;

axiom .str.60 == $sub.ref(0, 192189);

const {:count 81} .str.65: ref;

axiom .str.65 == $sub.ref(0, 193294);

const {:count 45} .str.66: ref;

axiom .str.66 == $sub.ref(0, 194363);

const {:count 52} .str.67: ref;

axiom .str.67 == $sub.ref(0, 195439);

const {:count 17} .str.22: ref;

axiom .str.22 == $sub.ref(0, 196480);

const {:count 72} .str.68: ref;

axiom .str.68 == $sub.ref(0, 197576);

const {:count 33} .str.6: ref;

axiom .str.6 == $sub.ref(0, 198633);

const {:count 28} .str.7: ref;

axiom .str.7 == $sub.ref(0, 199685);

const {:count 41} .str.8: ref;

axiom .str.8 == $sub.ref(0, 200750);

const {:count 42} .str.9: ref;

axiom .str.9 == $sub.ref(0, 201816);

const system_wq: ref;

axiom system_wq == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const {:count 67} .str.64: ref;

axiom .str.64 == $sub.ref(0, 202907);

const {:count 48} .str.23: ref;

axiom .str.23 == $sub.ref(0, 203979);

const {:count 46} .str.28: ref;

axiom .str.28 == $sub.ref(0, 205049);

const {:count 59} .str.31: ref;

axiom .str.31 == $sub.ref(0, 206132);

const {:count 9} .str.180: ref;

axiom .str.180 == $sub.ref(0, 207165);

const {:count 48} .str.24: ref;

axiom .str.24 == $sub.ref(0, 208237);

const {:count 38} .str.29: ref;

axiom .str.29 == $sub.ref(0, 209299);

const {:count 15} .str.30: ref;

axiom .str.30 == $sub.ref(0, 210338);

const {:count 48} .str.32: ref;

axiom .str.32 == $sub.ref(0, 211410);

const {:count 73} .str.33: ref;

axiom .str.33 == $sub.ref(0, 212507);

const {:count 34} .str.34: ref;

axiom .str.34 == $sub.ref(0, 213565);

const {:count 73} .str.16: ref;

axiom .str.16 == $sub.ref(0, 214662);

const {:count 67} .str.17: ref;

axiom .str.17 == $sub.ref(0, 215753);

const {:count 51} .str.25: ref;

axiom .str.25 == $sub.ref(0, 216828);

const {:count 51} .str.26: ref;

axiom .str.26 == $sub.ref(0, 217903);

const {:count 34} .str.36: ref;

axiom .str.36 == $sub.ref(0, 218961);

const {:count 21} .str.37: ref;

axiom .str.37 == $sub.ref(0, 220006);

const {:count 69} .str.38: ref;

axiom .str.38 == $sub.ref(0, 221099);

const {:count 24} .str.55: ref;

axiom .str.55 == $sub.ref(0, 222147);

const {:count 17} .str.56: ref;

axiom .str.56 == $sub.ref(0, 223188);

const {:count 48} .str.165: ref;

axiom .str.165 == $sub.ref(0, 224260);

const {:count 70} .str.168: ref;

axiom .str.168 == $sub.ref(0, 225354);

const {:count 77} .str.49: ref;

axiom .str.49 == $sub.ref(0, 226455);

const {:count 9} .str.39: ref;

axiom .str.39 == $sub.ref(0, 227488);

const {:count 24} .str.169: ref;

axiom .str.169 == $sub.ref(0, 228536);

const {:count 218} .str.170: ref;

axiom .str.170 == $sub.ref(0, 229778);

const {:count 48} .str.171: ref;

axiom .str.171 == $sub.ref(0, 230850);

const {:count 48} .str.172: ref;

axiom .str.172 == $sub.ref(0, 231922);

const {:count 58} .str.163: ref;

axiom .str.163 == $sub.ref(0, 233004);

const {:count 28} .str.164: ref;

axiom .str.164 == $sub.ref(0, 234056);

const {:count 44} .str.155: ref;

axiom .str.155 == $sub.ref(0, 235124);

const {:count 46} .str.156: ref;

axiom .str.156 == $sub.ref(0, 236194);

const {:count 43} .str.157: ref;

axiom .str.157 == $sub.ref(0, 237261);

const {:count 43} .str.158: ref;

axiom .str.158 == $sub.ref(0, 238328);

const {:count 32} .str.159: ref;

axiom .str.159 == $sub.ref(0, 239384);

const {:count 20} .str.160: ref;

axiom .str.160 == $sub.ref(0, 240428);

const {:count 26} .str.161: ref;

axiom .str.161 == $sub.ref(0, 241478);

const {:count 33} .str.162: ref;

axiom .str.162 == $sub.ref(0, 242535);

const {:count 14} .str.173: ref;

axiom .str.173 == $sub.ref(0, 243573);

const {:count 24} .str.150: ref;

axiom .str.150 == $sub.ref(0, 244621);

const {:count 14} .str.58: ref;

axiom .str.58 == $sub.ref(0, 245659);

const {:count 22} .str.69: ref;

axiom .str.69 == $sub.ref(0, 246705);

const {:count 27} .str.77: ref;

axiom .str.77 == $sub.ref(0, 247756);

const {:count 17} .str.78: ref;

axiom .str.78 == $sub.ref(0, 248797);

const {:count 18} .str.79: ref;

axiom .str.79 == $sub.ref(0, 249839);

const {:count 25} .str.111: ref;

axiom .str.111 == $sub.ref(0, 250888);

const {:count 213} .str.82: ref;

axiom .str.82 == $sub.ref(0, 252125);

const {:count 17} .str.112: ref;

axiom .str.112 == $sub.ref(0, 253166);

const {:count 74} .str.97: ref;

axiom .str.97 == $sub.ref(0, 254264);

const {:count 23} .str.113: ref;

axiom .str.113 == $sub.ref(0, 255311);

const {:count 24} .str.81: ref;

axiom .str.81 == $sub.ref(0, 256359);

const {:count 35} .str.83: ref;

axiom .str.83 == $sub.ref(0, 257418);

const {:count 34} .str.84: ref;

axiom .str.84 == $sub.ref(0, 258476);

const {:count 34} .str.85: ref;

axiom .str.85 == $sub.ref(0, 259534);

const {:count 39} .str.86: ref;

axiom .str.86 == $sub.ref(0, 260597);

const {:count 39} .str.87: ref;

axiom .str.87 == $sub.ref(0, 261660);

const {:count 43} .str.88: ref;

axiom .str.88 == $sub.ref(0, 262727);

const {:count 35} .str.89: ref;

axiom .str.89 == $sub.ref(0, 263786);

const {:count 40} .str.90: ref;

axiom .str.90 == $sub.ref(0, 264850);

const {:count 25} .str.91: ref;

axiom .str.91 == $sub.ref(0, 265899);

const {:count 66} .str.92: ref;

axiom .str.92 == $sub.ref(0, 266989);

const {:count 44} .str.93: ref;

axiom .str.93 == $sub.ref(0, 268057);

const {:count 19} .str.94: ref;

axiom .str.94 == $sub.ref(0, 269100);

const {:count 31} .str.95: ref;

axiom .str.95 == $sub.ref(0, 270155);

const {:count 19} .str.96: ref;

axiom .str.96 == $sub.ref(0, 271198);

const {:count 39} .str.80: ref;

axiom .str.80 == $sub.ref(0, 272261);

const {:count 31} .str.108: ref;

axiom .str.108 == $sub.ref(0, 273316);

const {:count 21} .str.109: ref;

axiom .str.109 == $sub.ref(0, 274361);

const {:count 66} .str.110: ref;

axiom .str.110 == $sub.ref(0, 275451);

const {:count 25} .str.103: ref;

axiom .str.103 == $sub.ref(0, 276500);

const {:count 21} .str.104: ref;

axiom .str.104 == $sub.ref(0, 277545);

const {:count 31} .str.105: ref;

axiom .str.105 == $sub.ref(0, 278600);

const {:count 7} .str.106: ref;

axiom .str.106 == $sub.ref(0, 279631);

const {:count 7} .str.107: ref;

axiom .str.107 == $sub.ref(0, 280662);

const {:count 64} .str.27: ref;

axiom .str.27 == $sub.ref(0, 281750);

const {:count 20} .str.101: ref;

axiom .str.101 == $sub.ref(0, 282794);

const {:count 25} .str.102: ref;

axiom .str.102 == $sub.ref(0, 283843);

const {:count 18} .str.98: ref;

axiom .str.98 == $sub.ref(0, 284885);

const {:count 50} .str.99: ref;

axiom .str.99 == $sub.ref(0, 285959);

const {:count 44} .str.100: ref;

axiom .str.100 == $sub.ref(0, 287027);

const {:count 47} .str.21: ref;

axiom .str.21 == $sub.ref(0, 288098);

const {:count 5} .str.114: ref;

axiom .str.114 == $sub.ref(0, 289127);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

const {:count 21} .str.154: ref;

axiom .str.154 == $sub.ref(0, 290172);

const {:count 85} .str.115: ref;

axiom .str.115 == $sub.ref(0, 291281);

const {:count 85} .str.116: ref;

axiom .str.116 == $sub.ref(0, 292390);

const {:count 85} .str.117: ref;

axiom .str.117 == $sub.ref(0, 293499);

const {:count 85} .str.118: ref;

axiom .str.118 == $sub.ref(0, 294608);

const {:count 85} .str.119: ref;

axiom .str.119 == $sub.ref(0, 295717);

const {:count 85} .str.120: ref;

axiom .str.120 == $sub.ref(0, 296826);

const {:count 85} .str.121: ref;

axiom .str.121 == $sub.ref(0, 297935);

const {:count 85} .str.122: ref;

axiom .str.122 == $sub.ref(0, 299044);

const {:count 85} .str.123: ref;

axiom .str.123 == $sub.ref(0, 300153);

const {:count 85} .str.124: ref;

axiom .str.124 == $sub.ref(0, 301262);

const {:count 85} .str.125: ref;

axiom .str.125 == $sub.ref(0, 302371);

const {:count 85} .str.126: ref;

axiom .str.126 == $sub.ref(0, 303480);

const {:count 85} .str.127: ref;

axiom .str.127 == $sub.ref(0, 304589);

const {:count 85} .str.128: ref;

axiom .str.128 == $sub.ref(0, 305698);

const {:count 85} .str.129: ref;

axiom .str.129 == $sub.ref(0, 306807);

const {:count 31} .str.130: ref;

axiom .str.130 == $sub.ref(0, 307862);

const {:count 25} .str.131: ref;

axiom .str.131 == $sub.ref(0, 308911);

const {:count 212} .str.46: ref;

axiom .str.46 == $sub.ref(0, 310147);

const {:count 30} .str.138: ref;

axiom .str.138 == $sub.ref(0, 311201);

const {:count 48} .str.153: ref;

axiom .str.153 == $sub.ref(0, 312273);

const {:count 33} .str.137: ref;

axiom .str.137 == $sub.ref(0, 313330);

const {:count 39} .str.151: ref;

axiom .str.151 == $sub.ref(0, 314393);

const {:count 37} .str.152: ref;

axiom .str.152 == $sub.ref(0, 315454);

const {:count 41} .str.148: ref;

axiom .str.148 == $sub.ref(0, 316519);

const {:count 23} .str.149: ref;

axiom .str.149 == $sub.ref(0, 317566);

const cpu_tss: ref;

axiom cpu_tss == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32808));

const {:count 56} .str.147: ref;

axiom .str.147 == $sub.ref(0, 318646);

const {:count 64} .str.14: ref;

axiom .str.14 == $sub.ref(0, 319734);

const {:count 30} .str.13: ref;

axiom .str.13 == $sub.ref(0, 320788);

const {:count 47} .str.15: ref;

axiom .str.15 == $sub.ref(0, 321859);

const {:count 84} .str.12: ref;

axiom .str.12 == $sub.ref(0, 322967);

const {:count 45} .str.146: ref;

axiom .str.146 == $sub.ref(0, 324036);

const {:count 66} .str.48: ref;

axiom .str.48 == $sub.ref(0, 325126);

const {:count 21} .str.145: ref;

axiom .str.145 == $sub.ref(0, 326171);

const {:count 105} .str.53: ref;

axiom .str.53 == $sub.ref(0, 327300);

const {:count 75} .str.54: ref;

axiom .str.54 == $sub.ref(0, 328399);

const {:count 23} .str.10: ref;

axiom .str.10 == $sub.ref(0, 329446);

const {:count 53} .str.11: ref;

axiom .str.11 == $sub.ref(0, 330523);

const {:count 36} .str.139: ref;

axiom .str.139 == $sub.ref(0, 331583);

const {:count 38} .str.140: ref;

axiom .str.140 == $sub.ref(0, 332645);

const {:count 50} .str.141: ref;

axiom .str.141 == $sub.ref(0, 333719);

const {:count 29} .str.142: ref;

axiom .str.142 == $sub.ref(0, 334772);

const {:count 29} .str.143: ref;

axiom .str.143 == $sub.ref(0, 335825);

const {:count 84} .str.144: ref;

axiom .str.144 == $sub.ref(0, 336933);

const {:count 31} .str.132: ref;

axiom .str.132 == $sub.ref(0, 337988);

const {:count 47} .str.133: ref;

axiom .str.133 == $sub.ref(0, 339059);

const {:count 40} .str.134: ref;

axiom .str.134 == $sub.ref(0, 340123);

const {:count 33} .str.135: ref;

axiom .str.135 == $sub.ref(0, 341180);

const {:count 31} .str.136: ref;

axiom .str.136 == $sub.ref(0, 342235);

const .str: ref;

axiom .str == $sub.ref(0, 343297);

const {:count 45} .str.1: ref;

axiom .str.1 == $sub.ref(0, 344366);

const {:count 26} .str.2: ref;

axiom .str.2 == $sub.ref(0, 345416);

const {:count 45} .str.3: ref;

axiom .str.3 == $sub.ref(0, 346485);

const {:count 25} .str.4: ref;

axiom .str.4 == $sub.ref(0, 347534);

const {:count 34} .str.5: ref;

axiom .str.5 == $sub.ref(0, 348592);

const current_task: ref;

axiom current_task == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32816));

const {:count 31} .str.166: ref;

axiom .str.166 == $sub.ref(0, 349647);

const {:count 21} .str.167: ref;

axiom .str.167 == $sub.ref(0, 350692);

const {:count 35} .str.177: ref;

axiom .str.177 == $sub.ref(0, 351751);

const {:count 25} .str.178: ref;

axiom .str.178 == $sub.ref(0, 352800);

const {:count 25} .str.179: ref;

axiom .str.179 == $sub.ref(0, 353849);

const {:count 45} .str.70: ref;

axiom .str.70 == $sub.ref(0, 354918);

const {:count 50} .str.71: ref;

axiom .str.71 == $sub.ref(0, 355992);

const {:count 7} .str.73: ref;

axiom .str.73 == $sub.ref(0, 357023);

const {:count 9} .str.74: ref;

axiom .str.74 == $sub.ref(0, 358056);

const {:count 42} .str.72: ref;

axiom .str.72 == $sub.ref(0, 359122);

const {:count 49} .str.75: ref;

axiom .str.75 == $sub.ref(0, 360195);

const {:count 31} .str.76: ref;

axiom .str.76 == $sub.ref(0, 361250);

const {:count 35} .str.35: ref;

axiom .str.35 == $sub.ref(0, 362309);

const {:count 45} .str.40: ref;

axiom .str.40 == $sub.ref(0, 363378);

const {:count 66} .str.41: ref;

axiom .str.41 == $sub.ref(0, 364468);

const {:count 40} .str.42: ref;

axiom .str.42 == $sub.ref(0, 365532);

const {:count 60} .str.43: ref;

axiom .str.43 == $sub.ref(0, 366616);

const {:count 43} .str.44: ref;

axiom .str.44 == $sub.ref(0, 367683);

const {:count 15} .str.45: ref;

axiom .str.45 == $sub.ref(0, 368722);

const {:count 34} .str.47: ref;

axiom .str.47 == $sub.ref(0, 369780);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 370812);

const {:count 3} .str.1.378: ref;

axiom .str.1.378 == $sub.ref(0, 371839);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 372877);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 373905);

const vmci_context_get_priv_flags: ref;

axiom vmci_context_get_priv_flags == $sub.ref(0, 374937);

procedure vmci_context_get_priv_flags($i0: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.2, $M.3, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.31, $M.87, $M.6, $M.13, $M.20, $M.21, $M.18, $M.19, $M.69, $M.70, $M.23, $M.24, $M.25, $M.26, $M.27, $M.108, $M.110, $M.112, $M.114, $M.28, $M.33, assertsPassed, $M.29, $M.45, $M.48, $M.47, $M.89, $M.109, $M.111, $M.113, $M.115, $M.34, $M.30, $M.35, $M.46, $M.90, $M.86, $M.91, $M.44, $M.32, $M.36, $M.38, $M.40, $M.42;



implementation vmci_context_get_priv_flags($i0: i32) returns ($r: i32)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $i9: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 0} {:cexpr "vmci_context_get_priv_flags:arg:context_id"} boogie_si_record_i32($i0);
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1} $i1 := vmci_host_code_active();
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 2} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3} $p4 := vmci_ctx_get($i0);
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_9;

  corral_source_split_9:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 304)), $mul.ref(272, 1));
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    call {:si_unique_call 4} {:cexpr "flags"} boogie_si_record_i32($i9);
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5} vmci_ctx_put($p4);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    $i7 := $i9;
    goto $bb5;

  SeqInstr_1:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i6 == 1;
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 0} true;
    $i7 := 1;
    goto $bb5;
}



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 375969);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const vmci_host_code_active: ref;

axiom vmci_host_code_active == $sub.ref(0, 377001);

procedure vmci_host_code_active() returns ($r: i1);
  free requires assertsPassed;



implementation vmci_host_code_active() returns ($r: i1)
{
  var $i0: i8;
  var $i1: i1;
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i7: i32;
  var $i11: i32;
  var $i12: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    $i0 := $M.1;
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $i1 := $trunc.i8.i1($i0);
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6} $i2 := vmci_guest_code_active();
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 7} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i6 == 1);
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 8} $i8 := atomic_read(vmci_host_active_users);
    call {:si_unique_call 9} {:cexpr "tmp___1"} boogie_si_record_i32($i8);
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    $i9 := $sgt.i32($i8, 0);
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i7 := $i10;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    $i11 := $i7;
    goto $bb12;

  $bb9:
    assume $i9 == 1;
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    $i10 := 1;
    goto $bb11;

  $bb6:
    assume $i6 == 1;
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    $i7 := 1;
    goto $bb8;

  $bb3:
    assume $i4 == 1;
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb5;
}



const vmci_ctx_get: ref;

axiom vmci_ctx_get == $sub.ref(0, 378033);

procedure vmci_ctx_get($i0: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation vmci_ctx_get($i0: i32) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $p17: ref;
  var $p23: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 12} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 14} {:cexpr "vmci_ctx_get:arg:cid"} boogie_si_record_i32($i0);
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, $sub.i32(0, 1));
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 15} rcu_read_lock();
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, ctx_list);
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $p7);
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p2);
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} __read_once_size($p8, $p10, 8);
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p2);
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    call {:si_unique_call 17} $i13 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 18} {:cexpr "tmp"} boogie_si_record_i32($i13);
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p12);
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, $p2i.ref.i64(ctx_list));
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p23 := $0.ref;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    call {:si_unique_call 20} rcu_read_unlock();
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    $p6 := $p23;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    $p17 := $p12;
    goto $bb8;

  $bb8:
    call $p18, $i19, $i20, $p21, $p25, $p26, $p27, $p28, $p29, $p30, $p31, $i32, $p33, $i34, $i35, $p17 := vmci_ctx_get_loop_$bb8($i0, $p3, $p4, $p18, $i19, $i20, $p21, $p25, $p26, $p27, $p28, $p29, $p30, $p31, $i32, $p33, $i34, $i35, $p17);
    goto $bb8_last;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 304)), $mul.ref(16, 1));
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, $i0);
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    $p21 := $p17;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 304)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, $p26);
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p3);
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p4);
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    call {:si_unique_call 21} __read_once_size($p27, $p29, 8);
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p4);
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} $i32 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 23} {:cexpr "tmp___0"} boogie_si_record_i32($i32);
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p31);
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p33);
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, $p2i.ref.i64(ctx_list));
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i35 == 1);
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb14:
    assume $i35 == 1;
    assume {:verifier.code 0} true;
    $p17 := $p31;
    goto $bb14_dummy;

  $bb10:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 304)), $mul.ref(20, 1));
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} kref_get($p22);
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    $p23 := $p21;
    goto $bb12;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    $p6 := $0.ref;
    goto $bb3;

  $bb14_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_69;
}



const vmci_ctx_put: ref;

axiom vmci_ctx_put == $sub.ref(0, 379065);

procedure vmci_ctx_put($p0: ref);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.31, $M.87, $M.6, $M.0, $M.13, $M.20, $M.21, $M.18, $M.19, $M.69, $M.70, $CurrAddr, $M.23, $M.24, $M.25, $M.26, $M.27, $M.108, $M.110, $M.112, $M.114, $M.28, $M.33, assertsPassed, $M.29, $M.45, $M.48, $M.47, $M.89, $M.109, $M.111, $M.113, $M.115, $M.34, $M.30, $M.35, $M.46, $M.90, $M.86, $M.91, $M.44, $M.32, $M.36, $M.38, $M.40, $M.42;



implementation vmci_ctx_put($p0: ref)
{
  var $p1: ref;
  var vslice_dummy_var_179: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(20, 1));
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} vslice_dummy_var_179 := kref_put($p1, ctx_free_ctx);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_4:
    assume !assertsPassed;
    return;
}



const ctx_free_ctx: ref;

axiom ctx_free_ctx == $sub.ref(0, 380097);

procedure ctx_free_ctx($p0: ref);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.6, $M.0, $M.13, $M.20, $M.21, $M.18, $M.19, $CurrAddr, $M.23, $M.24, $M.25, $M.26, $M.27, $M.29, $M.28, $M.45, $M.48, $M.47, $M.89, $M.33, $M.34, $M.30, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.31, $M.87, $M.69, $M.35, assertsPassed, $M.46, $M.90, $M.86, $M.91, $M.44, $M.32, $M.108, $M.110, $M.112, $M.114, $M.70, $M.109, $M.111, $M.113, $M.115, $M.36, $M.38, $M.40, $M.42;



implementation ctx_free_ctx($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i64;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i64;
  var $i37: i1;
  var $i38: i8;
  var $i39: i1;
  var $i40: i32;
  var $i41: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p47: ref;
  var $p48: ref;
  var $p50: ref;
  var $i51: i64;
  var $p52: ref;
  var $i53: i64;
  var $i54: i1;
  var $p57: ref;
  var $i58: i64;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i64;
  var $i63: i64;
  var $i64: i1;
  var $i65: i32;
  var $i66: i1;
  var $i67: i32;
  var $i68: i64;
  var $i69: i64;
  var $i70: i1;
  var $i71: i1;
  var $i72: i32;
  var $i73: i64;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p81: ref;
  var $p82: ref;
  var $p84: ref;
  var $i85: i64;
  var $i86: i1;
  var $p55: ref;
  var $p56: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p92: ref;
  var $p93: ref;
  var $p95: ref;
  var $i96: i64;
  var $p97: ref;
  var $i98: i64;
  var $i99: i1;
  var $p102: ref;
  var $p103: ref;
  var $p105: ref;
  var $p106: ref;
  var $p108: ref;
  var $i109: i64;
  var $i110: i1;
  var $p100: ref;
  var $p101: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $i119: i64;
  var $i120: i1;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;
  var vslice_dummy_var_180: i32;
  var vslice_dummy_var_181: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref($sub.ref(0, 20), 304));
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p5, $mul.ref($sub.ref(0, 20), 304)), $mul.ref(16, 1));
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref($sub.ref(0, 20), 304)), $mul.ref(272, 1));
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} vslice_dummy_var_180 := ctx_fire_notification($i8, $i10);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref($sub.ref(0, 20), 304)), $mul.ref(136, 1));
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} $i14 := vmci_handle_arr_get_entry($p13, 0);
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p2);
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p15, $i14);
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p1);
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p2);
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.2;
    cmdloc_dummy_var_1 := $M.2;
    call {:si_unique_call 31} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p16, $p17, 8, $zext.i32.i64(4), 0 == 1);
    $M.2 := cmdloc_dummy_var_2;
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $p18, $i19, $i20, $i21, $p22, $p23, $p24, $i25, $i26, $p27, $p28, $p29, $i30, $p31, $p32, $p33, $p34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, cmdloc_dummy_var_3, cmdloc_dummy_var_4, cmdloc_dummy_var_5 := ctx_free_ctx_loop_$bb1($p1, $p3, $p4, $p5, $p6, $p18, $i19, $i20, $i21, $p22, $p23, $p24, $i25, $i26, $p27, $p28, $p29, $i30, $p31, $p32, $p33, $p34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, cmdloc_dummy_var_3, cmdloc_dummy_var_4, cmdloc_dummy_var_5);
    goto $bb1_last;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.2, $p34);
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    $i36 := $load.i64($M.4, VMCI_INVALID_HANDLE);
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} $i37 := vmci_handle_is_equal($i35, $i36);
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    $i38 := $zext.i1.i8($i37);
    call {:si_unique_call 33} {:cexpr "tmp___1"} boogie_si_record_i8($i38);
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i8.i1($i38);
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    $i40 := 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p5, $mul.ref($sub.ref(0, 20), 304)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p45, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p45, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p50);
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p5, $mul.ref($sub.ref(0, 20), 304)), $mul.ref(24, 1));
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    $i53 := $p2i.ref.i64($p52);
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    $i54 := $ne.i64($i51, $i53);
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i54 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($add.ref($p5, $mul.ref($sub.ref(0, 20), 304)), $mul.ref(160, 1)), $mul.ref(0, 1));
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    $p89 := $load.ref($M.0, $p88);
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    $p90 := $bitcast.ref.ref($p89);
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($add.ref($p90, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.0, $p92);
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p90, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    $i96 := $p2i.ref.i64($p95);
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p5, $mul.ref($sub.ref(0, 20), 304)), $mul.ref(160, 1));
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    $i98 := $p2i.ref.i64($p97);
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    $i99 := $ne.i64($i96, $i98);
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    assume {:branchcond $i99} true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i99 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p5, $mul.ref($sub.ref(0, 20), 304)), $mul.ref(136, 1));
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $p112 := $load.ref($M.0, $p111);
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} vmci_handle_arr_destroy($p112);
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p5, $mul.ref($sub.ref(0, 20), 304)), $mul.ref(144, 1));
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    $p114 := $load.ref($M.0, $p113);
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} vmci_handle_arr_destroy($p114);
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p5, $mul.ref($sub.ref(0, 20), 304)), $mul.ref(152, 1));
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    $p116 := $load.ref($M.0, $p115);
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 51} vmci_handle_arr_destroy($p116);
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} vmci_ctx_unset_notify($p6);
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p5, $mul.ref($sub.ref(0, 20), 304)), $mul.ref(280, 1));
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    $p118 := $load.ref($M.0, $p117);
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    $i119 := $p2i.ref.i64($p118);
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    $i120 := $ne.i64($i119, 0);
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p123 := $bitcast.ref.ref($p6);
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} kfree($p123);
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    return;

  $bb31:
    assume $i120 == 1;
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p5, $mul.ref($sub.ref(0, 20), 304)), $mul.ref(280, 1));
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    $p122 := $load.ref($M.0, $p121);
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} put_cred($p122);
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb23:
    assume $i99 == 1;
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    $p100, $p101 := $p93, $p89;
    goto $bb26;

  $bb26:
    call $p102, $p103, $p105, $p106, $p108, $i109, $i110, $p100, $p101 := ctx_free_ctx_loop_$bb26($i98, $p102, $p103, $p105, $p106, $p108, $i109, $i110, $p100, $p101);
    goto $bb26_last;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p101, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 47} list_del($p102);
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    $p103 := $bitcast.ref.ref($p101);
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} kfree($p103);
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($add.ref($p100, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    $p106 := $load.ref($M.0, $p105);
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p100, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    $i109 := $p2i.ref.i64($p108);
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    $i110 := $ne.i64($i109, $i98);
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i110 == 1);
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb28:
    assume $i110 == 1;
    assume {:verifier.code 0} true;
    $p100, $p101 := $p106, $p100;
    goto $bb28_dummy;

  $bb12:
    assume $i54 == 1;
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    $p55, $p56 := $p44, $p48;
    goto $bb15;

  $bb15:
    call $p57, $i58, $p59, $p60, $p61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $p75, $p76, $p77, $p78, $p79, $p81, $p82, $p84, $i85, $i86, $p55, $p56, vslice_dummy_var_181 := ctx_free_ctx_loop_$bb15($i53, $p57, $i58, $p59, $p60, $p61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $p75, $p76, $p77, $p78, $p79, $p81, $p82, $p84, $i85, $i86, $p55, $p56, vslice_dummy_var_181);
    goto $bb15_last;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p55, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    $i58 := $load.i64($M.0, $p57);
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p55, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p60, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    $i62 := $load.i64($M.0, $p61);
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    $i63 := $add.i64($i62, 24);
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    $i64 := $ne.i64($i58, $i63);
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    $i65 := $zext.i1.i32($i64);
    call {:si_unique_call 39} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i65);
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    $i66 := $ne.i32($i65, 0);
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    $i67 := $zext.i1.i32($i66);
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    $i68 := $sext.i32.i64($i67);
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} $i69 := ldv__builtin_expect($i68, 0);
    call {:si_unique_call 41} {:cexpr "tmp___3"} boogie_si_record_i64($i69);
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    $i70 := $ne.i64($i69, 0);
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i71 := $ne.i32($i65, 0);
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    $i72 := $zext.i1.i32($i71);
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    $i73 := $sext.i32.i64($i72);
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} vslice_dummy_var_181 := ldv__builtin_expect($i73, 0);
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p55, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} list_del($p75);
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p55, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.0, $p76);
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p77);
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} kfree($p78);
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    $p79 := $bitcast.ref.ref($p55);
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} kfree($p79);
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($add.ref($p56, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.0, $p81);
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p56, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    $i85 := $p2i.ref.i64($p84);
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $i86 := $ne.i64($i85, $i53);
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i86 == 1);
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb20:
    assume $i86 == 1;
    assume {:verifier.code 0} true;
    $p55, $p56 := $p56, $p82;
    goto $bb20_dummy;

  $bb17:
    assume $i70 == 1;
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} warn_slowpath_null(.str.63, 466);
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb9:
    assume $i41 == 1;
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p1);
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    $i19 := $load.i64($M.2, $p18);
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} $i20 := vmci_qp_broker_detach($i19, $p6);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    call {:si_unique_call 35} {:cexpr "tmp___0"} boogie_si_record_i32($i20);
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i20, 0);
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p5, $mul.ref($sub.ref(0, 20), 304)), $mul.ref(136, 1));
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} $i30 := vmci_handle_arr_get_entry($p29, 0);
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p4);
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p31, $i30);
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p1);
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p4);
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.2;
    cmdloc_dummy_var_4 := $M.2;
    call {:si_unique_call 38} cmdloc_dummy_var_5 := $memcpy.i8(cmdloc_dummy_var_3, cmdloc_dummy_var_4, $p32, $p33, 8, $zext.i32.i64(4), 0 == 1);
    $M.2 := cmdloc_dummy_var_5;
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    goto corral_source_split_147_dummy;

  $bb3:
    assume $i21 == 1;
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p5, $mul.ref($sub.ref(0, 20), 304)), $mul.ref(136, 1));
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p1);
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    $i25 := $load.i64($M.2, $p24);
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} $i26 := vmci_handle_arr_remove_entry($p23, $i25);
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p3);
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    $M.3 := $store.i64($M.3, $p27, $i26);
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i39 == 1;
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    $i40 := 0;
    goto $bb8;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  $bb28_dummy:
    assume false;
    return;

  $bb26_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_225;

  $bb20_dummy:
    assume false;
    return;

  $bb15_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_170;

  corral_source_split_147_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p1);
    goto corral_source_split_119;
}



const kref_put: ref;

axiom kref_put == $sub.ref(0, 381129);

procedure kref_put($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.31, $M.87, $M.6, $M.0, $M.13, $M.20, $M.21, $M.18, $M.19, $M.69, $M.70, $CurrAddr, $M.23, $M.24, $M.25, $M.26, $M.27, $M.108, $M.110, $M.112, $M.114, $M.28, $M.33, assertsPassed, $M.29, $M.45, $M.48, $M.47, $M.89, $M.109, $M.111, $M.113, $M.115, $M.34, $M.30, $M.35, $M.46, $M.90, $M.86, $M.91, $M.44, $M.32, $M.36, $M.38, $M.40, $M.42;



implementation kref_put($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} $i2 := kref_sub($p0, 1, $p1);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    call {:si_unique_call 56} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_13:
    assume !assertsPassed;
    return;
}



const kref_sub: ref;

axiom kref_sub == $sub.ref(0, 382161);

procedure kref_sub($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.31, $M.87, $M.6, $M.0, $M.13, $M.20, $M.21, $M.18, $M.19, $M.69, $M.70, $CurrAddr, $M.23, $M.24, $M.25, $M.26, $M.27, $M.108, $M.110, $M.112, $M.114, $M.28, $M.33, assertsPassed, $M.29, $M.45, $M.48, $M.47, $M.89, $M.109, $M.111, $M.113, $M.115, $M.34, $M.30, $M.35, $M.46, $M.90, $M.86, $M.91, $M.44, $M.32, $M.36, $M.38, $M.40, $M.42;



implementation kref_sub($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i64;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var vslice_dummy_var_182: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} {:cexpr "kref_sub:arg:count"} boogie_si_record_i32($i1);
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    call {:si_unique_call 58} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i5);
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 60} {:cexpr "tmp"} boogie_si_record_i64($i9);
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i5, 0);
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} vslice_dummy_var_182 := ldv__builtin_expect($i13, 0);
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 63} $i16 := atomic_sub_and_test($i1, $p15);
    call {:si_unique_call 64} {:cexpr "tmp___0"} boogie_si_record_i32($i16);
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb4:
    assume $i17 == 1;
    call {:si_unique_call 65} devirtbounce($p2, $p0);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    $i18 := 1;
    goto $bb6;

  SeqInstr_16:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} warn_slowpath_null(.str.62, 71);
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 383193);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 66} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 67} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const warn_slowpath_null: ref;

axiom warn_slowpath_null == $sub.ref(0, 384225);

procedure warn_slowpath_null($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation warn_slowpath_null($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 68} {:cexpr "warn_slowpath_null:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    return;
}



const atomic_sub_and_test: ref;

axiom atomic_sub_and_test == $sub.ref(0, 385257);

procedure atomic_sub_and_test($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation atomic_sub_and_test($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 69} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 70} {:cexpr "atomic_sub_and_test:arg:i"} boogie_si_record_i32($i0);
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 71} devirtbounce.1(0, $p3, $p2, $i0, $p3);
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.5, $p2);
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    $i5 := $sext.i8.i32($i4);
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const ctx_fire_notification: ref;

axiom ctx_fire_notification == $sub.ref(0, 386289);

procedure ctx_fire_notification($i0: i32, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.0, $M.13, $M.20, $M.21, $CurrAddr, $M.29, $M.34, $M.30, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.31, $M.87, $M.69, $M.35, $M.44, $M.32, $M.108, $M.110, $M.112, $M.114, $M.70, $M.33, $M.2, $M.3, $M.109, $M.111, $M.113, $M.115, assertsPassed, $M.18, $M.19, $M.36, $M.38, $M.40, $M.42, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.45, $M.48, $M.47, $M.89, $M.46, $M.90, $M.86, $M.91;



implementation ctx_fire_notification($i0: i32, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $i37: i8;
  var $i38: i1;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i32;
  var $p49: ref;
  var $p50: ref;
  var $i51: i64;
  var $p52: ref;
  var $i53: i64;
  var $i54: i1;
  var $p57: ref;
  var $p58: ref;
  var $i59: i64;
  var $p60: ref;
  var $i61: i64;
  var $i62: i1;
  var $i63: i8;
  var $i64: i1;
  var $i65: i32;
  var $i66: i1;
  var $p67: ref;
  var $i68: i32;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i64;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $i81: i32;
  var $p82: ref;
  var $p83: ref;
  var $i84: i64;
  var $i85: i1;
  var $p56: ref;
  var $p55: ref;
  var $p39: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $i94: i32;
  var $p95: ref;
  var $i96: i64;
  var $i97: i1;
  var $p33: ref;
  var $p98: ref;
  var $i99: i64;
  var $i100: i32;
  var $i101: i1;
  var $p105: ref;
  var $p106: ref;
  var $i107: i64;
  var $i108: i64;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $p121: ref;
  var $p124: ref;
  var $p126: ref;
  var $p128: ref;
  var $i129: i32;
  var $i130: i1;
  var $p133: ref;
  var $i134: i32;
  var $p138: ref;
  var $i139: i32;
  var $i141: i32;
  var $i142: i1;
  var $i102: i32;
  var $p143: ref;
  var $i22: i32;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;
  var cmdloc_dummy_var_11: [ref]i8;
  var vslice_dummy_var_183: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 72} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 73} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 74} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 75} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 76} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 77} $p7 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 78} $p8 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 79} $p9 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 80} $p10 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 81} $p11 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 82} $p12 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 83} $p13 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 84} $p14 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 85} $p15 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 86} {:cexpr "ctx_fire_notification:arg:context_id"} boogie_si_record_i32($i0);
    call {:si_unique_call 87} {:cexpr "ctx_fire_notification:arg:priv_flags"} boogie_si_record_i32($i1);
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p16, $i0);
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p17, 0);
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 88} $p18 := vmci_handle_arr_create(0);
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p18);
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p2);
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    $i21 := $eq.i64($i20, 0);
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 89} rcu_read_lock();
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, ctx_list);
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, $p23);
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p4);
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p5);
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 90} __read_once_size($p24, $p26, 8);
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p5);
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.7, $p27);
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 91} $i29 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 92} {:cexpr "tmp"} boogie_si_record_i32($i29);
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p28);
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, $p2i.ref.i64(ctx_list));
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 107} rcu_read_unlock();
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    $p98 := $load.ref($M.0, $p2);
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 108} $i99 := vmci_handle_arr_get_size($p98);
    call {:si_unique_call 109} {:cexpr "tmp___6"} boogie_si_record_i64($i99);
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    $i100 := $trunc.i64.i32($i99);
    call {:si_unique_call 110} {:cexpr "array_size"} boogie_si_record_i32($i100);
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    $i101 := $ult.i32(0, $i100);
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    assume {:branchcond $i101} true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i101 == 1);
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p143 := $load.ref($M.0, $p2);
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 118} vmci_handle_arr_destroy($p143);
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    $i22 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    $r := $i22;
    return;

  $bb32:
    assume $i101 == 1;
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    $i102 := 0;
    goto $bb35;

  $bb35:
    call $p105, $p106, $i107, $i108, $p109, $p110, $p111, $p112, $p113, $p116, $p117, $p118, $p121, $p124, $p126, $p128, $i129, $i130, $p133, $i134, $p138, $i139, $i141, $i142, $i102, cmdloc_dummy_var_6, cmdloc_dummy_var_7, cmdloc_dummy_var_8, cmdloc_dummy_var_9, cmdloc_dummy_var_10, cmdloc_dummy_var_11, vslice_dummy_var_183 := ctx_fire_notification_loop_$bb35($i0, $p2, $p13, $p14, $p15, $i100, $p105, $p106, $i107, $i108, $p109, $p110, $p111, $p112, $p113, $p116, $p117, $p118, $p121, $p124, $p126, $p128, $i129, $i130, $p133, $i134, $p138, $i139, $i141, $i142, $i102, cmdloc_dummy_var_6, cmdloc_dummy_var_7, cmdloc_dummy_var_8, cmdloc_dummy_var_9, cmdloc_dummy_var_10, cmdloc_dummy_var_11, vslice_dummy_var_183);
    goto $bb35_last;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    $p106 := $load.ref($M.0, $p2);
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    $i107 := $zext.i32.i64($i102);
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 111} $i108 := vmci_handle_arr_get_entry($p106, $i107);
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    $p109 := $bitcast.ref.ref($p15);
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p109, $i108);
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    $p110 := $bitcast.ref.ref($p105);
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    $p111 := $bitcast.ref.ref($p15);
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_6 := $M.0;
    cmdloc_dummy_var_7 := $M.0;
    call {:si_unique_call 112} cmdloc_dummy_var_8 := $memcpy.i8(cmdloc_dummy_var_6, cmdloc_dummy_var_7, $p110, $p111, 8, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_8;
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p14, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p112, 0);
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p14, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p113, 0);
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    $p117 := $bitcast.ref.ref($p116);
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    $p118 := $bitcast.ref.ref($p14);
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_9 := $M.0;
    cmdloc_dummy_var_10 := $M.0;
    call {:si_unique_call 113} cmdloc_dummy_var_11 := $memcpy.i8(cmdloc_dummy_var_9, cmdloc_dummy_var_10, $p117, $p118, 8, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_11;
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p121, 16);
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p124, 1);
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p126, $i0);
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 114} $i129 := vmci_datagram_dispatch(0, $p128, 0);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    call {:si_unique_call 115} {:cexpr "result"} boogie_si_record_i32($i129);
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    $i130 := $slt.i32($i129, 0);
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i141 := $add.i32($i102, 1);
    call {:si_unique_call 117} {:cexpr "i"} boogie_si_record_i32($i141);
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    $i142 := $ult.i32($i141, $i100);
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i142 == 1);
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb40:
    assume $i142 == 1;
    assume {:verifier.code 0} true;
    $i102 := $i141;
    goto $bb40_dummy;

  $bb37:
    assume $i130 == 1;
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    $i134 := $load.i32($M.0, $p133);
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($add.ref($add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    $i139 := $load.i32($M.0, $p138);
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 116} vslice_dummy_var_183 := no_printk.ref.i32.i32(.str.64, $i134, $i139);
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    goto $bb39;

  SeqInstr_19:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i32 == 1;
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    $p33 := $p28;
    goto $bb8;

  $bb8:
    call $p34, $i35, $i36, $i37, $i38, $p41, $p42, $p43, $p44, $p45, $p46, $p47, $i48, $p49, $p50, $i51, $p52, $i53, $i54, $p57, $p58, $i59, $p60, $i61, $i62, $i63, $i64, $i65, $i66, $p67, $i68, $p69, $p70, $p71, $i72, $p74, $p75, $p76, $p77, $p78, $p79, $p80, $i81, $p82, $p83, $i84, $i85, $p56, $p55, $p39, $p87, $p88, $p89, $p90, $p91, $p92, $p93, $i94, $p95, $i96, $i97, $p33 := ctx_fire_notification_loop_$bb8($i1, $p2, $p3, $p6, $p7, $p8, $p9, $p10, $p11, $p12, $p34, $i35, $i36, $i37, $i38, $p41, $p42, $p43, $p44, $p45, $p46, $p47, $i48, $p49, $p50, $i51, $p52, $i53, $i54, $p57, $p58, $i59, $p60, $i61, $i62, $i63, $i64, $i65, $i66, $p67, $i68, $p69, $p70, $p71, $i72, $p74, $p75, $p76, $p77, $p78, $p79, $p80, $i81, $p82, $p83, $i84, $i85, $p56, $p55, $p39, $p87, $p88, $p89, $p90, $p91, $p92, $p93, $i94, $p95, $i96, $i97, $p33);
    goto $bb8_last;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 304)), $mul.ref(272, 1));
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.8, $p34);
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 93} $i36 := vmci_deny_interaction($i1, $i35);
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    $i37 := $zext.i1.i8($i36);
    call {:si_unique_call 94} {:cexpr "tmp___0"} boogie_si_record_i8($i37);
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i8.i1($i37);
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 304)), $mul.ref(160, 1)), $mul.ref(0, 1));
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.9, $p41);
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, $p42);
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p6);
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p7);
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 98} __read_once_size($p43, $p45, 8);
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p7);
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.10, $p46);
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 99} $i48 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 100} {:cexpr "tmp___1"} boogie_si_record_i32($i48);
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p47);
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p49, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p50);
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p33, $mul.ref(0, 304)), $mul.ref(160, 1));
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    $i53 := $p2i.ref.i64($p52);
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    $i54 := $ne.i64($i51, $i53);
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    $p55 := $p33;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i54 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p39 := $p55;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($add.ref($p39, $mul.ref(0, 304)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.16, $p87);
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, $p88);
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    $p89 := $bitcast.ref.ref($p11);
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $p90 := $bitcast.ref.ref($p12);
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    $p91 := $bitcast.ref.ref($p90);
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 95} __read_once_size($p89, $p91, 8);
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    $p92 := $bitcast.ref.ref($p12);
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.17, $p92);
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 96} $i94 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 97} {:cexpr "tmp___5"} boogie_si_record_i32($i94);
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    $p95 := $bitcast.ref.ref($p93);
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    $i96 := $p2i.ref.i64($p95);
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $i97 := $ne.i64($i96, $p2i.ref.i64(ctx_list));
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i97 == 1);
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb29:
    assume $i97 == 1;
    assume {:verifier.code 0} true;
    $p33 := $p93;
    goto $bb29_dummy;

  $bb14:
    assume $i54 == 1;
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    $p56 := $p47;
    goto $bb17;

  $bb17:
    call $p57, $p58, $i59, $p60, $i61, $i62, $i63, $i64, $i65, $i66, $p67, $i68, $p69, $p70, $p71, $i72, $p74, $p75, $p76, $p77, $p78, $p79, $p80, $i81, $p82, $p83, $i84, $i85, $p56 := ctx_fire_notification_loop_$bb17($p2, $p3, $p8, $p9, $p10, $i53, $p57, $p58, $i59, $p60, $i61, $i62, $i63, $i64, $i65, $i66, $p67, $i68, $p69, $p70, $p71, $i72, $p74, $p75, $p76, $p77, $p78, $p79, $p80, $i81, $p82, $p83, $i84, $i85, $p56, $p33);
    goto $bb17_last;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p56, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p57);
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    $i59 := $load.i64($M.11, $p58);
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p3);
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    $i61 := $load.i64($M.6, $p60);
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 101} $i62 := vmci_handle_is_equal($i59, $i61);
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    $i63 := $zext.i1.i8($i62);
    call {:si_unique_call 102} {:cexpr "tmp___2"} boogie_si_record_i8($i63);
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    $i64 := $trunc.i8.i1($i63);
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    $i65 := 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    $i66 := $ne.i32($i65, 0);
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p33, $mul.ref(0, 304)), $mul.ref(16, 1));
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.12, $p67);
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p8, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    $M.13 := $store.i32($M.13, $p69, $i68);
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p8, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    $M.13 := $store.i32($M.13, $p70, 0);
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p8);
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    $i72 := $load.i64($M.13, $p71);
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 106} vmci_handle_arr_append_entry($p2, $i72);
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($p56, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.14, $p74);
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p9, $p75);
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p9);
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p10);
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p77);
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 103} __read_once_size($p76, $p78, 8);
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    $p79 := $bitcast.ref.ref($p10);
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.15, $p79);
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 104} $i81 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 105} {:cexpr "tmp___4"} boogie_si_record_i32($i81);
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    $p82 := $bitcast.ref.ref($p80);
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p82, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    $i84 := $p2i.ref.i64($p83);
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    $i85 := $ne.i64($i84, $i53);
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i85 == 1);
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    $p55 := $p33;
    goto $bb16;

  $bb26:
    assume $i85 == 1;
    assume {:verifier.code 0} true;
    $p56 := $p80;
    goto $bb26_dummy;

  $bb22:
    assume $i66 == 1;
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb19:
    assume $i64 == 1;
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    $i65 := 0;
    goto $bb21;

  $bb10:
    assume $i38 == 1;
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    $p39 := $p33;
    goto $bb12;

  $bb1:
    assume $i21 == 1;
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32(0, 3);
    goto $bb3;

  $bb40_dummy:
    assume false;
    return;

  $bb35_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_432;

  $bb26_dummy:
    assume false;
    return;

  $bb17_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_377;

  $bb29_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_333;
}



const vmci_handle_arr_get_entry: ref;

axiom vmci_handle_arr_get_entry == $sub.ref(0, 387321);

procedure vmci_handle_arr_get_entry($p0: ref, $i1: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation vmci_handle_arr_get_entry($p0: ref, $i1: i64) returns ($r: i64)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var cmdloc_dummy_var_12: [ref]i8;
  var cmdloc_dummy_var_13: [ref]i8;
  var cmdloc_dummy_var_14: [ref]i8;
  var cmdloc_dummy_var_15: [ref]i8;
  var cmdloc_dummy_var_16: [ref]i8;
  var cmdloc_dummy_var_17: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 119} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 120} {:cexpr "vmci_handle_arr_get_entry:arg:index"} boogie_si_record_i64($i1);
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    $i5 := $ule.i64($i4, $i1);
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 121} $i8 := ldv__builtin_expect($i7, 0);
    call {:si_unique_call 122} {:cexpr "tmp"} boogie_si_record_i64($i8);
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(16, 1)), $mul.ref($i1, 8));
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p2);
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p12);
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_15 := $M.0;
    cmdloc_dummy_var_16 := $M.0;
    call {:si_unique_call 124} cmdloc_dummy_var_17 := $memcpy.i8(cmdloc_dummy_var_15, cmdloc_dummy_var_16, $p13, $p14, 8, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_17;
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p2);
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.0, $p15);
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_12 := $M.0;
    cmdloc_dummy_var_13 := $M.0;
    call {:si_unique_call 123} cmdloc_dummy_var_14 := $memcpy.i8(cmdloc_dummy_var_12, cmdloc_dummy_var_13, $p10, VMCI_INVALID_HANDLE___1, 8, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_14;
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 388353);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const vmci_qp_broker_detach: ref;

axiom vmci_qp_broker_detach == $sub.ref(0, 389385);

procedure vmci_qp_broker_detach($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.18, $M.0, $M.23, $M.20, $M.21, $M.24, $M.25, $M.26, $M.19, $M.27, $CurrAddr, $M.28, $M.45, $M.48, $M.47, $M.89, $M.29, $M.33, assertsPassed, $M.46, $M.90, $M.86, $M.91, $M.34, $M.30, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.31, $M.87, $M.69, $M.35, $M.44, $M.32, $M.108, $M.110, $M.112, $M.114, $M.70, $M.2, $M.3, $M.109, $M.111, $M.113, $M.115, $M.6, $M.13, $M.36, $M.38, $M.40, $M.42;



implementation vmci_qp_broker_detach($i0: i64, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $i8: i8;
  var $i9: i1;
  var $i10: i64;
  var $i11: i1;
  var $i12: i1;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $i17: i8;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $i24: i32;
  var $p27: ref;
  var $i28: i64;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $p32: ref;
  var $i33: i32;
  var $p34: ref;
  var $i35: i32;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $i47: i32;
  var $p48: ref;
  var $p50: ref;
  var $i51: i32;
  var $p52: ref;
  var $i49: i32;
  var $p54: ref;
  var $i55: i32;
  var $i56: i32;
  var $p58: ref;
  var $p60: ref;
  var $i61: i32;
  var $i62: i32;
  var $i63: i1;
  var $i64: i8;
  var $i65: i1;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i64;
  var $i73: i1;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $i79: i64;
  var $i80: i1;
  var $i74: i1;
  var $i81: i8;
  var $p82: ref;
  var $i83: i32;
  var $i84: i1;
  var $p85: ref;
  var $i86: i32;
  var $i87: i1;
  var $p88: ref;
  var $i89: i32;
  var $i90: i1;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $i95: i32;
  var $i96: i1;
  var $p97: ref;
  var $i98: i32;
  var $p99: ref;
  var $i100: i32;
  var $p102: ref;
  var $i103: i8;
  var $i104: i1;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $i113: i1;
  var $p114: ref;
  var $p115: ref;
  var $i116: i1;
  var $p117: ref;
  var $p118: ref;
  var $i119: i64;
  var $i120: i1;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $p126: ref;
  var $p127: ref;
  var $i128: i64;
  var $i129: i1;
  var $p130: ref;
  var $p131: ref;
  var $p133: ref;
  var $i134: i32;
  var $i135: i1;
  var $p136: ref;
  var $i137: i1;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $p147: ref;
  var $i148: i64;
  var $p149: ref;
  var $p150: ref;
  var $p152: ref;
  var $i153: i64;
  var $p154: ref;
  var $p155: ref;
  var $p156: ref;
  var $i157: i64;
  var $p159: ref;
  var $i160: i64;
  var $i162: i1;
  var $p163: ref;
  var $i164: i32;
  var $i165: i1;
  var $p166: ref;
  var $i167: i32;
  var $i168: i1;
  var $p169: ref;
  var $i170: i32;
  var $i171: i1;
  var $p172: ref;
  var $p173: ref;
  var $i174: i1;
  var $p175: ref;
  var $i176: i64;
  var $i26: i32;
  var $i13: i32;
  var vslice_dummy_var_184: i32;
  var vslice_dummy_var_185: i32;
  var vslice_dummy_var_186: i32;
  var vslice_dummy_var_187: i32;
  var vslice_dummy_var_188: i32;
  var vslice_dummy_var_189: i32;
  var vslice_dummy_var_190: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 125} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    assume {:verifier.code 0} true;
    $M.18 := $store.i64($M.18, $p3, $i0);
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 126} $i4 := vmci_ctx_get_id($p1);
    call {:si_unique_call 127} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p2);
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.18, $p5);
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 128} $i7 := vmci_handle_is_invalid___1($i6);
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i8($i7);
    call {:si_unique_call 129} {:cexpr "tmp___0"} boogie_si_record_i8($i8);
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i8);
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i9 == 1);
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p1);
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i4, $sub.i32(0, 1));
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 130} ldv_mutex_lock_228($add.ref($add.ref(qp_broker_list, $mul.ref(0, 176)), $mul.ref(16, 1)));
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p2);
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    $i15 := $load.i64($M.18, $p14);
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} $i16 := vmci_ctx_qp_exists($p1, $i15);
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i8($i16);
    call {:si_unique_call 132} {:cexpr "tmp___1"} boogie_si_record_i8($i17);
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i8.i1($i17);
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i19 := 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p2);
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    $i28 := $load.i64($M.18, $p27);
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} $p29 := qp_broker_handle_to_entry($i28);
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    $i31 := $eq.i64($i30, 0);
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p29, $mul.ref(0, 296)), $mul.ref(192, 1));
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, $i4);
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i39 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p29, $mul.ref(0, 296)), $mul.ref(192, 1));
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i44, $i4);
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i45 == 1);
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p29, $mul.ref(0, 296)), $mul.ref(192, 1));
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    call {:si_unique_call 138} {:cexpr "peer_id"} boogie_si_record_i32($i51);
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p29, $mul.ref(0, 296)), $mul.ref(196, 1));
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p52, $sub.i32(0, 1));
    assume {:verifier.code 0} true;
    $i49 := $i51;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($p29, $mul.ref(0, 296)), $mul.ref(136, 1)), $mul.ref(48, 1));
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    $i56 := $sub.i32($i55, 1);
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($p29, $mul.ref(0, 296)), $mul.ref(136, 1)), $mul.ref(48, 1));
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p58, $i56);
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($p29, $mul.ref(0, 296)), $mul.ref(136, 1)), $mul.ref(28, 1));
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.0, $p60);
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    $i62 := $and.i32($i61, 2);
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    $i63 := $ne.i32($i62, 0);
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    $i64 := $zext.i1.i8($i63);
    call {:si_unique_call 139} {:cexpr "is_local"} boogie_si_record_i8($i64);
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    $i65 := $ne.i32($i4, 2);
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i65 == 1);
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p29, $mul.ref(0, 296)), $mul.ref(272, 1));
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    $p127 := $load.ref($M.0, $p126);
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $i128 := $p2i.ref.i64($p127);
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    $i129 := $ne.i64($i128, 0);
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    assume {:branchcond $i129} true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($add.ref($p29, $mul.ref(0, 296)), $mul.ref(136, 1)), $mul.ref(48, 1));
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    $i134 := $load.i32($M.0, $p133);
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    $i135 := $eq.i32($i134, 0);
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    assume {:branchcond $i135} true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i135 == 1);
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    $p159 := $bitcast.ref.ref($p2);
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    $i160 := $load.i64($M.18, $p159);
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} vslice_dummy_var_188 := qp_notify_peer(0, $i160, $i4, $i49);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    $i162 := $eq.i32($i4, 2);
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    assume {:branchcond $i162} true;
    goto $bb67, $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    assume !($i162 == 1);
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p29, $mul.ref(0, 296)), $mul.ref(200, 1));
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p173, 5);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $i174 := $trunc.i8.i1($i64);
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    assume {:branchcond $i174} true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i174 == 1);
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    $p175 := $bitcast.ref.ref($p2);
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    $i176 := $load.i64($M.18, $p175);
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} vslice_dummy_var_190 := vmci_ctx_qp_destroy($p1, $i176);
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $i26 := 0;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 134} ldv_mutex_unlock_229($add.ref($add.ref(qp_broker_list, $mul.ref(0, 176)), $mul.ref(16, 1)));
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    $i13 := $i26;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  SeqInstr_25:
    assume !assertsPassed;
    return;

  $bb78:
    assume $i174 == 1;
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb67:
    assume $i162 == 1;
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p29, $mul.ref(0, 296)), $mul.ref(200, 1));
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    $i164 := $load.i32($M.0, $p163);
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    $i165 := $eq.i32($i164, 2);
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    assume {:branchcond $i165} true;
    goto $bb70, $bb72;

  $bb72:
    assume !($i165 == 1);
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p29, $mul.ref(0, 296)), $mul.ref(200, 1));
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    $i167 := $load.i32($M.0, $p166);
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    $i168 := $eq.i32($i167, 4);
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    assume {:branchcond $i168} true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i168 == 1);
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($p29, $mul.ref(0, 296)), $mul.ref(200, 1));
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    $i170 := $load.i32($M.0, $p169);
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    $i171 := $eq.i32($i170, 6);
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    assume {:branchcond $i171} true;
    goto $bb75, $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    assume !($i171 == 1);
    goto $bb69;

  $bb75:
    assume {:verifier.code 0} true;
    assume $i171 == 1;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p29, $mul.ref(0, 296)), $mul.ref(200, 1));
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p172, 6);
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb73:
    assume {:verifier.code 0} true;
    assume $i168 == 1;
    goto $bb71;

  $bb70:
    assume {:verifier.code 0} true;
    assume $i165 == 1;
    goto $bb71;

  SeqInstr_37:
    assume !assertsPassed;
    return;

  $bb61:
    assume $i135 == 1;
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p29, $mul.ref(0, 296)), $mul.ref(136, 1));
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 150} qp_list_remove_entry(qp_broker_list, $p136);
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    $i137 := $trunc.i8.i1($i64);
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    assume {:branchcond $i137} true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i137 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p29, $mul.ref(0, 296)), $mul.ref(208, 1));
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    $p141 := $load.ref($M.0, $p140);
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p29, $mul.ref(0, 296)), $mul.ref(216, 1));
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    $p143 := $load.ref($M.0, $p142);
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 153} qp_cleanup_queue_mutex($p141, $p143);
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p29, $mul.ref(0, 296)), $mul.ref(208, 1));
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    $p145 := $load.ref($M.0, $p144);
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($add.ref($p29, $mul.ref(0, 296)), $mul.ref(136, 1)), $mul.ref(32, 1));
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    $i148 := $load.i64($M.0, $p147);
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} qp_host_free_queue($p145, $i148);
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p29, $mul.ref(0, 296)), $mul.ref(216, 1));
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    $p150 := $load.ref($M.0, $p149);
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($add.ref($p29, $mul.ref(0, 296)), $mul.ref(136, 1)), $mul.ref(40, 1));
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    $i153 := $load.i64($M.0, $p152);
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} qp_host_free_queue($p150, $i153);
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p29, $mul.ref(0, 296)), $mul.ref(0, 1));
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} vmci_resource_remove($p154);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    $p155 := $bitcast.ref.ref($p29);
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} kfree($p155);
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    $p156 := $bitcast.ref.ref($p2);
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    $i157 := $load.i64($M.18, $p156);
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} vslice_dummy_var_189 := vmci_ctx_qp_destroy($p1, $i157);
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    goto $bb66;

  SeqInstr_40:
    assume !assertsPassed;
    return;

  $bb63:
    assume $i137 == 1;
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p29, $mul.ref(0, 296)), $mul.ref(288, 1));
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    $p139 := $load.ref($M.0, $p138);
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 152} kfree($p139);
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb58:
    assume $i129 == 1;
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p29, $mul.ref(0, 296)), $mul.ref(272, 1));
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p130, $0.ref);
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p29, $mul.ref(0, 296)), $mul.ref(280, 1));
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p131, $0.ref);
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb29:
    assume $i65 == 1;
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p29, $mul.ref(0, 296)), $mul.ref(208, 1));
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 140} qp_acquire_queue_mutex($p67);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p29, $mul.ref(0, 296)), $mul.ref(208, 1));
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.0, $p68);
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p69, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.0, $p70);
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    $i72 := $p2i.ref.i64($p71);
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    $i73 := $ne.i64($i72, 0);
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    $i74 := 1;
    assume {:branchcond $i73} true;
    goto $bb31, $bb33;

  $bb33:
    assume !($i73 == 1);
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p29, $mul.ref(0, 296)), $mul.ref(216, 1));
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.0, $p75);
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p76, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.0, $p77);
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    $i79 := $p2i.ref.i64($p78);
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    $i80 := $ne.i64($i79, 0);
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    $i74 := $i80;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    $i81 := $zext.i1.i8($i74);
    call {:si_unique_call 141} {:cexpr "headers_mapped"} boogie_si_record_i8($i81);
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p29, $mul.ref(0, 296)), $mul.ref(200, 1));
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    $i83 := $load.i32($M.0, $p82);
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    $i84 := $eq.i32($i83, 2);
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb36;

  $bb36:
    assume !($i84 == 1);
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p29, $mul.ref(0, 296)), $mul.ref(200, 1));
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    $i86 := $load.i32($M.0, $p85);
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    $i87 := $eq.i32($i86, 4);
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    assume {:branchcond $i87} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i87 == 1);
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p29, $mul.ref(0, 296)), $mul.ref(200, 1));
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    $i89 := $load.i32($M.0, $p88);
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    $i90 := $eq.i32($i89, 6);
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    assume {:branchcond $i90} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i113 := $trunc.i8.i1($i81);
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    assume {:branchcond $i113} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i113 == 1);
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 147} qp_reset_saved_headers($p29);
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p29, $mul.ref(0, 296)), $mul.ref(208, 1));
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    $p115 := $load.ref($M.0, $p114);
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 148} qp_release_queue_mutex($p115);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    $i116 := $trunc.i8.i1($i81);
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    assume {:branchcond $i116} true;
    goto $bb51, $bb53;

  $bb53:
    assume !($i116 == 1);
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p29, $mul.ref(0, 296)), $mul.ref(272, 1));
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    $p118 := $load.ref($M.0, $p117);
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    $i119 := $p2i.ref.i64($p118);
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    $i120 := $ne.i64($i119, 0);
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    assume !($i120 == 1);
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb54:
    assume $i120 == 1;
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p29, $mul.ref(0, 296)), $mul.ref(272, 1));
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    $p122 := $load.ref($M.0, $p121);
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p29, $mul.ref(0, 296)), $mul.ref(280, 1));
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    $p124 := $load.ref($M.0, $p123);
    call {:si_unique_call 149} vslice_dummy_var_187 := devirtbounce.2($p122, $p124);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    goto $bb56;

  SeqInstr_34:
    assume !assertsPassed;
    return;

  $bb51:
    assume {:verifier.code 0} true;
    assume $i116 == 1;
    goto $bb52;

  SeqInstr_31:
    assume !assertsPassed;
    return;

  $bb48:
    assume $i113 == 1;
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb39:
    assume {:verifier.code 0} true;
    assume $i90 == 1;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p29, $mul.ref(0, 296)), $mul.ref(208, 1));
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.0, $p91);
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p29, $mul.ref(0, 296)), $mul.ref(216, 1));
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    $p94 := $load.ref($M.0, $p93);
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 142} $i95 := qp_host_unmap_queues(0, $p92, $p94);
    call {:si_unique_call 143} {:cexpr "result"} boogie_si_record_i32($i95);
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    $i96 := $slt.i32($i95, 0);
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    assume {:branchcond $i96} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p29, $mul.ref(0, 296)), $mul.ref(206, 1));
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    $i103 := $load.i8($M.0, $p102);
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    $i104 := $trunc.i8.i1($i103);
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    assume {:branchcond $i104} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i104 == 1);
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p29, $mul.ref(0, 296)), $mul.ref(208, 1));
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    $p110 := $load.ref($M.0, $p109);
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p29, $mul.ref(0, 296)), $mul.ref(216, 1));
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    $p112 := $load.ref($M.0, $p111);
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 146} qp_host_unregister_user_memory($p110, $p112);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb44:
    assume $i104 == 1;
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p29, $mul.ref(0, 296)), $mul.ref(208, 1));
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    $p106 := $load.ref($M.0, $p105);
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p29, $mul.ref(0, 296)), $mul.ref(216, 1));
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    $p108 := $load.ref($M.0, $p107);
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 145} qp_host_unregister_user_memory($p106, $p108);
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb41:
    assume $i96 == 1;
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    $i98 := $load.i32($M.18, $p97);
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    $i100 := $load.i32($M.18, $p99);
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 144} vslice_dummy_var_186 := printk.ref.i32.i32.i32(.str.52, $i98, $i100, $i95);
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb37:
    assume {:verifier.code 0} true;
    assume $i87 == 1;
    goto $bb35;

  $bb34:
    assume {:verifier.code 0} true;
    assume $i84 == 1;
    goto $bb35;

  $bb31:
    assume {:verifier.code 0} true;
    assume $i73 == 1;
    goto $bb32;

  SeqInstr_28:
    assume !assertsPassed;
    return;

  $bb26:
    assume $i45 == 1;
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p29, $mul.ref(0, 296)), $mul.ref(196, 1));
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    call {:si_unique_call 137} {:cexpr "peer_id"} boogie_si_record_i32($i47);
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p29, $mul.ref(0, 296)), $mul.ref(192, 1));
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p48, $sub.i32(0, 1));
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    $i49 := $i47;
    goto $bb28;

  $bb20:
    assume $i39 == 1;
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p29, $mul.ref(0, 296)), $mul.ref(196, 1));
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, $i4);
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb22;

  $bb23:
    assume $i42 == 1;
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    $i26 := $sub.i32(0, 34);
    goto $bb15;

  $bb17:
    assume $i31 == 1;
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.18, $p32);
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.18, $p34);
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 136} vslice_dummy_var_185 := no_printk.ref.i32.i32.i32(.str.51, $i4, $i33, $i35);
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    $i26 := $sub.i32(0, 21);
    goto $bb15;

  $bb13:
    assume $i20 == 1;
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.18, $p21);
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.18, $p23);
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 133} vslice_dummy_var_184 := no_printk.ref.i32.i32.i32(.str.50, $i4, $i22, $i24);
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    $i26 := $sub.i32(0, 21);
    goto $bb15;

  $bb10:
    assume $i18 == 1;
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb12;

  SeqInstr_22:
    assume !assertsPassed;
    return;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 2);
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb2;
}



const vmci_handle_arr_remove_entry: ref;

axiom vmci_handle_arr_remove_entry == $sub.ref(0, 390417);

procedure vmci_handle_arr_remove_entry($p0: ref, $i1: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.19, $M.0, $M.20, $M.21, $CurrAddr;



implementation vmci_handle_arr_remove_entry($p0: ref, $i1: i64) returns ($r: i64)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $i18: i8;
  var $i19: i1;
  var $i20: i64;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i64;
  var $p28: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $i43: i64;
  var $i44: i1;
  var $i10: i64;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var cmdloc_dummy_var_18: [ref]i8;
  var cmdloc_dummy_var_19: [ref]i8;
  var cmdloc_dummy_var_20: [ref]i8;
  var cmdloc_dummy_var_21: [ref]i8;
  var cmdloc_dummy_var_22: [ref]i8;
  var cmdloc_dummy_var_23: [ref]i8;
  var cmdloc_dummy_var_24: [ref]i8;
  var cmdloc_dummy_var_25: [ref]i8;
  var cmdloc_dummy_var_26: [ref]i8;
  var cmdloc_dummy_var_27: [ref]i8;
  var cmdloc_dummy_var_28: [ref]i8;
  var cmdloc_dummy_var_29: [ref]i8;
  var cmdloc_dummy_var_30: [ref]i8;
  var cmdloc_dummy_var_31: [ref]i8;
  var cmdloc_dummy_var_32: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 161} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p3);
    assume {:verifier.code 0} true;
    $M.19 := $store.i64($M.19, $p5, $i1);
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p4);
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_18 := $M.0;
    cmdloc_dummy_var_19 := $M.0;
    call {:si_unique_call 163} cmdloc_dummy_var_20 := $memcpy.i8(cmdloc_dummy_var_18, cmdloc_dummy_var_19, $p6, VMCI_INVALID_HANDLE___1, 8, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_20;
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.0, $p7);
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    $i9 := $ugt.i64($i8, 0);
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p2);
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p4);
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_30 := $M.0;
    cmdloc_dummy_var_31 := $M.0;
    call {:si_unique_call 169} cmdloc_dummy_var_32 := $memcpy.i8(cmdloc_dummy_var_30, cmdloc_dummy_var_31, $p45, $p46, 8, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_32;
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p2);
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    $i48 := $load.i64($M.0, $p47);
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    $r := $i48;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb4;

  $bb4:
    call $p12, $p13, $i14, $p15, $i16, $i17, $i18, $i19, $i20, $i42, $i43, $i44, $i10 := vmci_handle_arr_remove_entry_loop_$bb4($p0, $p3, $p7, $p12, $p13, $i14, $p15, $i16, $i17, $i18, $i19, $i20, $i42, $i43, $i44, $i10);
    goto $bb4_last;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(16, 1)), $mul.ref($i10, 8));
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.0, $p13);
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p3);
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.19, $p15);
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 164} $i17 := vmci_handle_is_equal($i14, $i16);
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    $i18 := $zext.i1.i8($i17);
    call {:si_unique_call 165} {:cexpr "tmp"} boogie_si_record_i8($i18);
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i8.i1($i18);
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    $i20 := $i10;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i42 := $add.i64($i10, 1);
    call {:si_unique_call 170} {:cexpr "i"} boogie_si_record_i64($i42);
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    $i43 := $load.i64($M.0, $p7);
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    $i44 := $ugt.i64($i43, $i42);
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i44 == 1);
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i44 == 1;
    assume {:verifier.code 0} true;
    $i10 := $i42;
    goto $bb10_dummy;

  $bb6:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(16, 1)), $mul.ref($i20, 8));
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p4);
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p22);
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_21 := $M.0;
    cmdloc_dummy_var_22 := $M.0;
    call {:si_unique_call 166} cmdloc_dummy_var_23 := $memcpy.i8(cmdloc_dummy_var_21, cmdloc_dummy_var_22, $p23, $p24, 8, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_23;
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    $i26 := $load.i64($M.0, $p25);
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    $i27 := $sub.i64($i26, 1);
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p28, $i27);
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(16, 1)), $mul.ref($i20, 8));
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    $i32 := $load.i64($M.0, $p31);
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(16, 1)), $mul.ref($i32, 8));
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p30);
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p34);
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_24 := $M.0;
    cmdloc_dummy_var_25 := $M.0;
    call {:si_unique_call 167} cmdloc_dummy_var_26 := $memcpy.i8(cmdloc_dummy_var_24, cmdloc_dummy_var_25, $p35, $p36, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_26;
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    $i38 := $load.i64($M.0, $p37);
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(16, 1)), $mul.ref($i38, 8));
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_27 := $M.0;
    cmdloc_dummy_var_28 := $M.0;
    call {:si_unique_call 168} cmdloc_dummy_var_29 := $memcpy.i8(cmdloc_dummy_var_27, cmdloc_dummy_var_28, $p41, VMCI_INVALID_HANDLE___1, 8, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_29;
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_767;
}



const vmci_handle_is_equal: ref;

axiom vmci_handle_is_equal == $sub.ref(0, 391449);

procedure vmci_handle_is_equal($i0: i64, $i1: i64) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.20, $M.21, $CurrAddr;



implementation vmci_handle_is_equal($i0: i64, $i1: i64) returns ($r: i1)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 171} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 172} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p2);
    assume {:verifier.code 0} true;
    $M.20 := $store.i64($M.20, $p4, $i0);
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p3);
    assume {:verifier.code 0} true;
    $M.21 := $store.i64($M.21, $p5, $i1);
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.20, $p6);
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.21, $p8);
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i7, $i9);
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    $i11 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.20, $p12);
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.21, $p14);
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i13, $i15);
    assume {:verifier.code 0} true;
    $i11 := $i16;
    goto $bb3;
}



const list_del: ref;

axiom list_del == $sub.ref(0, 392481);

procedure list_del($p0: ref);
  free requires assertsPassed;



implementation list_del($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    return;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 393513);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} free_($p0);
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    return;
}



const vmci_handle_arr_destroy: ref;

axiom vmci_handle_arr_destroy == $sub.ref(0, 394545);

procedure vmci_handle_arr_destroy($p0: ref);
  free requires assertsPassed;



implementation vmci_handle_arr_destroy($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} kfree($p1);
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    return;
}



const vmci_ctx_unset_notify: ref;

axiom vmci_ctx_unset_notify == $sub.ref(0, 395577);

procedure vmci_ctx_unset_notify($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation vmci_ctx_unset_notify($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(64, 1));
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 175} spin_lock($p1);
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(296, 1));
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(288, 1));
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, ctx_dummy_notify);
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(296, 1));
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p5, $0.ref);
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(64, 1));
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 176} spin_unlock($p6);
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p3);
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} kunmap($p3);
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 178} put_page($p3);
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const put_cred: ref;

axiom put_cred == $sub.ref(0, 396609);

procedure put_cred($p0: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation put_cred($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 179} __validate_creds($p0, .str.57, 263);
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(0, 1));
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 180} $i2 := atomic_dec_and_test($p1);
    call {:si_unique_call 181} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 182} __put_cred($p0);
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __validate_creds: ref;

axiom __validate_creds == $sub.ref(0, 397641);

procedure __validate_creds($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;



implementation __validate_creds($p0: ref, $p1: ref, $i2: i32)
{
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 183} {:cexpr "__validate_creds:arg:line"} boogie_si_record_i32($i2);
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 184} $i3 := creds_are_invalid($p0);
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 185} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i64($i5);
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 186} $i7 := ldv__builtin_expect($i6, 0);
    call {:si_unique_call 187} {:cexpr "tmp___0"} boogie_si_record_i64($i7);
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} __invalid_creds($p0, $p1, $i2);
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const atomic_dec_and_test: ref;

axiom atomic_dec_and_test == $sub.ref(0, 398673);

procedure atomic_dec_and_test($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation atomic_dec_and_test($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 189} $p1 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 190} devirtbounce.3(0, $p2, $p1, $p2);
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.22, $p1);
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    $i4 := $sext.i8.i32($i3);
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const __put_cred: ref;

axiom __put_cred == $sub.ref(0, 399705);

procedure __put_cred($p0: ref);
  free requires assertsPassed;



implementation __put_cred($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    return;
}



const creds_are_invalid: ref;

axiom creds_are_invalid == $sub.ref(0, 400737);

procedure creds_are_invalid($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation creds_are_invalid($p0: ref) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 1} true;
    call {:si_unique_call 191} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 192} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __invalid_creds: ref;

axiom __invalid_creds == $sub.ref(0, 401769);

procedure __invalid_creds($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;



implementation __invalid_creds($p0: ref, $p1: ref, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 193} {:cexpr "__invalid_creds:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    return;
}



const spin_lock: ref;

axiom spin_lock == $sub.ref(0, 402801);

procedure spin_lock($p0: ref);
  free requires assertsPassed;



implementation spin_lock($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 194} _raw_spin_lock($p2);
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    return;
}



const spin_unlock: ref;

axiom spin_unlock == $sub.ref(0, 403833);

procedure spin_unlock($p0: ref);
  free requires assertsPassed;



implementation spin_unlock($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 195} _raw_spin_unlock($p2);
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    return;
}



const kunmap: ref;

axiom kunmap == $sub.ref(0, 404865);

procedure kunmap($p0: ref);
  free requires assertsPassed;



implementation kunmap($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    return;
}



const put_page: ref;

axiom put_page == $sub.ref(0, 405897);

procedure put_page($p0: ref);
  free requires assertsPassed;



implementation put_page($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock: ref;

axiom _raw_spin_unlock == $sub.ref(0, 406929);

procedure _raw_spin_unlock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock: ref;

axiom _raw_spin_lock == $sub.ref(0, 407961);

procedure _raw_spin_lock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 408993);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 196} $free($p0);
    return;
}



const vmci_ctx_get_id: ref;

axiom vmci_ctx_get_id == $sub.ref(0, 410025);

procedure vmci_ctx_get_id($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vmci_ctx_get_id($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $p4: ref;
  var $i5: i32;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(16, 1));
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    $i3 := $i5;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32(0, 1);
    goto $bb3;
}



const vmci_handle_is_invalid___1: ref;

axiom vmci_handle_is_invalid___1 == $sub.ref(0, 411057);

procedure vmci_handle_is_invalid___1($i0: i64) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.23, $M.20, $M.21, $CurrAddr;



implementation vmci_handle_is_invalid___1($i0: i64) returns ($r: i1)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i8;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    assume {:verifier.code 0} true;
    $M.23 := $store.i64($M.23, $p2, $i0);
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.23, $p3);
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    $i5 := $load.i64($M.0, VMCI_INVALID_HANDLE___2);
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 198} $i6 := vmci_handle_is_equal($i4, $i5);
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i6);
    call {:si_unique_call 199} {:cexpr "tmp"} boogie_si_record_i8($i7);
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i7);
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const ldv_mutex_lock_228: ref;

axiom ldv_mutex_lock_228 == $sub.ref(0, 412089);

procedure ldv_mutex_lock_228($p0: ref);
  free requires assertsPassed;
  modifies $M.28, assertsPassed;



implementation ldv_mutex_lock_228($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 200} ldv_mutex_lock_mutex_of_qp_list($p0);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 201} mutex_lock($p0);
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_43:
    assume !assertsPassed;
    return;
}



const vmci_ctx_qp_exists: ref;

axiom vmci_ctx_qp_exists == $sub.ref(0, 413121);

procedure vmci_ctx_qp_exists($p0: ref, $i1: i64) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.24, $M.45, $M.20, $M.21, $M.48, $CurrAddr;



implementation vmci_ctx_qp_exists($p0: ref, $i1: i64) returns ($r: i1)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $i10: i8;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $i17: i8;
  var $i18: i1;
  var $i6: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 202} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    assume {:verifier.code 0} true;
    $M.24 := $store.i64($M.24, $p3, $i1);
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p2);
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.24, $p7);
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} $i9 := vmci_handle_is_invalid($i8);
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i8($i9);
    call {:si_unique_call 204} {:cexpr "tmp"} boogie_si_record_i8($i10);
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i10);
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(136, 1));
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p2);
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    $i15 := $load.i64($M.24, $p14);
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 205} $i16 := vmci_handle_arr_has_entry($p13, $i15);
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i8($i16);
    call {:si_unique_call 206} {:cexpr "tmp___0"} boogie_si_record_i8($i17);
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i8.i1($i17);
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $i6 := $i18;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;
}



const no_printk: ref;

axiom no_printk == $sub.ref(0, 414153);

procedure no_printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation no_printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



procedure no_printk.ref($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation no_printk.ref($p0: ref) returns ($r: i32)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



procedure no_printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation no_printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32)
{

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



procedure no_printk.ref.i32.i32.i32.i32.i64($p0: ref, p.1: i32, p.2: i32, p.3: i32, p.4: i32, p.5: i64) returns ($r: i32);
  free requires assertsPassed;



implementation no_printk.ref.i32.i32.i32.i32.i64($p0: ref, p.1: i32, p.2: i32, p.3: i32, p.4: i32, p.5: i64) returns ($r: i32)
{

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



procedure no_printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation no_printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32)
{

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



procedure no_printk.ref.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation no_printk.ref.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32) returns ($r: i32)
{

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



procedure no_printk.ref.i32.i32($p0: ref, p.1: i32, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation no_printk.ref.i32.i32($p0: ref, p.1: i32, p.2: i32) returns ($r: i32)
{

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



procedure no_printk.ref.ref.i32.ref.ref($p0: ref, p.1: ref, p.2: i32, p.3: ref, p.4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation no_printk.ref.ref.i32.ref.ref($p0: ref, p.1: ref, p.2: i32, p.3: ref, p.4: ref) returns ($r: i32)
{

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



procedure no_printk.ref.i64($p0: ref, p.1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation no_printk.ref.i64($p0: ref, p.1: i64) returns ($r: i32)
{

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const qp_broker_handle_to_entry: ref;

axiom qp_broker_handle_to_entry == $sub.ref(0, 415185);

procedure qp_broker_handle_to_entry($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.25, $M.47, $M.23, $M.20, $M.21, $CurrAddr;



implementation qp_broker_handle_to_entry($i0: i64) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 207} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    assume {:verifier.code 0} true;
    $M.25 := $store.i64($M.25, $p2, $i0);
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.25, $p3);
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 208} $p5 := qp_list_find(qp_broker_list, $i4);
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $p10 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    $r := $p10;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p5);
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p8, $mul.ref($sub.ref(0, 136), 296));
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    $p10 := $p9;
    goto $bb3;
}



const qp_acquire_queue_mutex: ref;

axiom qp_acquire_queue_mutex == $sub.ref(0, 416217);

procedure qp_acquire_queue_mutex($p0: ref);
  free requires assertsPassed;
  modifies $M.46, assertsPassed;



implementation qp_acquire_queue_mutex($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 200)), $mul.ref(176, 1));
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 200)), $mul.ref(160, 1));
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} ldv_mutex_lock_211($p9);
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_46:
    assume !assertsPassed;
    return;
}



const qp_host_unmap_queues: ref;

axiom qp_host_unmap_queues == $sub.ref(0, 417249);

procedure qp_host_unmap_queues($i0: i32, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation qp_host_unmap_queues($i0: i32, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 210} {:cexpr "qp_host_unmap_queues:arg:gid"} boogie_si_record_i32($i0);
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    $i13 := $ult.i64($i9, $i12);
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i13 == 1);
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 212} vunmap($p19);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p20, $0.ref);
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p21, $0.ref);
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i13 == 1;
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 211} vunmap($p16);
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const printk: ref;

axiom printk == $sub.ref(0, 418281);

procedure printk.ref($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 1} true;
    call {:si_unique_call 213} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 214} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 1} true;
    call {:si_unique_call 215} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 216} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 1} true;
    call {:si_unique_call 217} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 218} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 1} true;
    call {:si_unique_call 219} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 220} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb4:
    assume {:verifier.code 1} true;
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 1} true;
    call {:si_unique_call 221} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 222} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb5:
    assume {:verifier.code 1} true;
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 1} true;
    call {:si_unique_call 223} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 224} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i32($p0: ref, p.1: i32, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i32($p0: ref, p.1: i32, p.2: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb6:
    assume {:verifier.code 1} true;
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 1} true;
    call {:si_unique_call 225} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 226} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb7:
    assume {:verifier.code 1} true;
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 1} true;
    call {:si_unique_call 227} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 228} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const qp_host_unregister_user_memory: ref;

axiom qp_host_unregister_user_memory == $sub.ref(0, 419313);

procedure qp_host_unregister_user_memory($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation qp_host_unregister_user_memory($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $i45: i64;
  var cmdloc_dummy_var_33: [ref]i8;
  var cmdloc_dummy_var_34: [ref]i8;
  var cmdloc_dummy_var_35: [ref]i8;
  var cmdloc_dummy_var_36: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 200)), $mul.ref(184, 1));
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 200)), $mul.ref(168, 1));
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.0, $p10);
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 229} qp_release_pages($p7, $i11, 1);
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 200)), $mul.ref(184, 1));
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 200)), $mul.ref(168, 1));
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    $i22 := $load.i64($M.0, $p21);
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    $i23 := $mul.i64($i22, 8);
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_33 := $M.0;
    call {:si_unique_call 230} cmdloc_dummy_var_34 := $memset.i8(cmdloc_dummy_var_33, $p18, 0, $i23, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_34;
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 200)), $mul.ref(184, 1));
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 200)), $mul.ref(168, 1));
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    $i33 := $load.i64($M.0, $p32);
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 231} qp_release_pages($p29, $i33, 1);
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 200)), $mul.ref(184, 1));
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p42, $mul.ref(0, 200)), $mul.ref(168, 1));
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    $i44 := $load.i64($M.0, $p43);
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    $i45 := $mul.i64($i44, 8);
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_35 := $M.0;
    call {:si_unique_call 232} cmdloc_dummy_var_36 := $memset.i8(cmdloc_dummy_var_35, $p40, 0, $i45, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_36;
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    return;
}



const qp_reset_saved_headers: ref;

axiom qp_reset_saved_headers == $sub.ref(0, 420345);

procedure qp_reset_saved_headers($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation qp_reset_saved_headers($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(208, 1));
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, $0.ref);
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(216, 1));
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, $0.ref);
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    return;
}



const qp_release_queue_mutex: ref;

axiom qp_release_queue_mutex == $sub.ref(0, 421377);

procedure qp_release_queue_mutex($p0: ref);
  free requires assertsPassed;
  modifies $M.46, assertsPassed;



implementation qp_release_queue_mutex($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 200)), $mul.ref(176, 1));
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 200)), $mul.ref(160, 1));
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 233} ldv_mutex_unlock_212($p9);
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_49:
    assume !assertsPassed;
    return;
}



const qp_list_remove_entry: ref;

axiom qp_list_remove_entry == $sub.ref(0, 422409);

procedure qp_list_remove_entry($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation qp_list_remove_entry($p0: ref, $p1: ref)
{
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 234} list_del($p4);
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const qp_cleanup_queue_mutex: ref;

axiom qp_cleanup_queue_mutex == $sub.ref(0, 423441);

procedure qp_cleanup_queue_mutex($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation qp_cleanup_queue_mutex($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 200)), $mul.ref(176, 1));
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i5);
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 200)), $mul.ref(160, 1));
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p9, $0.ref);
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 200)), $mul.ref(160, 1));
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, $0.ref);
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const qp_host_free_queue: ref;

axiom qp_host_free_queue == $sub.ref(0, 424473);

procedure qp_host_free_queue($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation qp_host_free_queue($p0: ref, $i1: i64)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 235} {:cexpr "qp_host_free_queue:arg:queue_size"} boogie_si_record_i64($i1);
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} kfree($p2);
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    return;
}



const vmci_resource_remove: ref;

axiom vmci_resource_remove == $sub.ref(0, 425505);

procedure vmci_resource_remove($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.20, $M.21, $M.33, $CurrAddr, $M.2, $M.3, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.31, $M.87, $M.6, $M.13, $M.18, $M.19, $M.69, $M.70, $M.23, $M.24, $M.25, $M.26, $M.27, $M.108, $M.110, $M.112, $M.114, $M.28, assertsPassed, $M.29, $M.45, $M.48, $M.47, $M.89, $M.109, $M.111, $M.113, $M.115, $M.34, $M.30, $M.35, $M.46, $M.90, $M.86, $M.91, $M.44, $M.32, $M.36, $M.38, $M.40, $M.42;



implementation vmci_resource_remove($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i32;
  var $i8: i64;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $i27: i8;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $i40: i1;
  var $p19: ref;
  var $p42: ref;
  var cmdloc_dummy_var_37: [ref]i8;
  var cmdloc_dummy_var_38: [ref]i8;
  var cmdloc_dummy_var_39: [ref]i8;
  var vslice_dummy_var_191: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 237} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(0, 1));
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p2);
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_37 := $M.0;
    cmdloc_dummy_var_38 := $M.0;
    call {:si_unique_call 238} cmdloc_dummy_var_39 := $memcpy.i8(cmdloc_dummy_var_37, cmdloc_dummy_var_38, $p3, $p4, 8, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_39;
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p1);
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.0, $p5);
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 239} $i7 := vmci_resource_hash($i6);
    call {:si_unique_call 240} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} spin_lock(vmci_resource_table);
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    $i8 := $zext.i32.i64($i7);
    $p10 := $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref($i8, 8)), $mul.ref(0, 1));
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $p16 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 245} spin_unlock(vmci_resource_table);
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 246} synchronize_rcu();
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 247} vslice_dummy_var_191 := vmci_resource_put($p0);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(40, 1));
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 248} wait_for_completion($p42);
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_52:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i18 == 1;
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    $p19 := $p16;
    goto $bb7;

  $bb7:
    call $p20, $p21, $p22, $i23, $p24, $i25, $i26, $i27, $i28, $p29, $p32, $p33, $i34, $i35, $p36, $p37, $p38, $i39, $i40, $p19 := vmci_resource_remove_loop_$bb7($p0, $p20, $p21, $p22, $i23, $p24, $i25, $i26, $i27, $i28, $p29, $p32, $p33, $i34, $i35, $p36, $p37, $p38, $i39, $i40, $p19);
    goto $bb7_last;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 136)), $mul.ref(0, 1));
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(0, 1));
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p20);
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    $i23 := $load.i64($M.0, $p22);
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p21);
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    $i25 := $load.i64($M.0, $p24);
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 242} $i26 := vmci_handle_is_equal($i23, $i25);
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    $i27 := $zext.i1.i8($i26);
    call {:si_unique_call 243} {:cexpr "tmp___1"} boogie_si_record_i8($i27);
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i8.i1($i27);
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    $p29 := $p19;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 136)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p33);
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, 0);
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    $p38 := $0.ref;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p38);
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    $i40 := $ne.i64($i39, 0);
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i40 == 1);
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb16:
    assume $i40 == 1;
    assume {:verifier.code 0} true;
    $p19 := $p38;
    goto $bb16_dummy;

  $bb13:
    assume $i35 == 1;
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p33);
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($p36, $mul.ref($sub.ref(0, 16), 136));
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    $p38 := $p37;
    goto $bb15;

  $bb9:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 136)), $mul.ref(16, 1));
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} hlist_del_init_rcu($p30);
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p11);
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p14, $mul.ref($sub.ref(0, 16), 136));
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    $p16 := $p15;
    goto $bb3;

  $bb16_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1182;
}



const vmci_ctx_qp_destroy: ref;

axiom vmci_ctx_qp_destroy == $sub.ref(0, 426537);

procedure vmci_ctx_qp_destroy($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.26, $M.19, $M.0, $M.27, $M.45, $M.20, $M.21, $CurrAddr;



implementation vmci_ctx_qp_destroy($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $i12: i8;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i64;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $i25: i8;
  var $i26: i1;
  var $i27: i32;
  var $i8: i32;
  var cmdloc_dummy_var_40: [ref]i8;
  var cmdloc_dummy_var_41: [ref]i8;
  var cmdloc_dummy_var_42: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 249} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 251} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p2);
    assume {:verifier.code 0} true;
    $M.26 := $store.i64($M.26, $p5, $i1);
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p0);
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p2);
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    $i10 := $load.i64($M.26, $p9);
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 252} $i11 := vmci_handle_is_invalid($i10);
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i8($i11);
    call {:si_unique_call 253} {:cexpr "tmp"} boogie_si_record_i8($i12);
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i8.i1($i12);
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(136, 1));
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p2);
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    $i17 := $load.i64($M.26, $p16);
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 254} $i18 := vmci_handle_arr_remove_entry($p15, $i17);
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p4);
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    $M.27 := $store.i64($M.27, $p19, $i18);
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p3);
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p4);
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_40 := $M.27;
    cmdloc_dummy_var_41 := $M.27;
    call {:si_unique_call 255} cmdloc_dummy_var_42 := $memcpy.i8(cmdloc_dummy_var_40, cmdloc_dummy_var_41, $p20, $p21, 8, $zext.i32.i64(4), 0 == 1);
    $M.27 := cmdloc_dummy_var_42;
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p3);
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    $i23 := $load.i64($M.27, $p22);
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} $i24 := vmci_handle_is_invalid($i23);
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    $i25 := $zext.i1.i8($i24);
    call {:si_unique_call 257} {:cexpr "tmp___0"} boogie_si_record_i8($i25);
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i8.i1($i25);
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    $i27 := (if $i26 == 1 then $sub.i32(0, 21) else 0);
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    $i8 := $i27;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 2);
    goto $bb3;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 2);
    goto $bb3;
}



const qp_notify_peer: ref;

axiom qp_notify_peer == $sub.ref(0, 427569);

procedure qp_notify_peer($i0: i1, $i1: i64, $i2: i32, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.23, $M.20, $M.21, $CurrAddr, $M.29, $M.34, $M.30, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.31, $M.87, $M.69, $M.35, $M.44, $M.32, $M.108, $M.110, $M.112, $M.114, $M.70, $M.33, $M.2, $M.3, $M.109, $M.111, $M.113, $M.115, assertsPassed, $M.6, $M.13, $M.18, $M.19, $M.36, $M.38, $M.40, $M.42, $M.24, $M.25, $M.26, $M.27, $M.28, $M.45, $M.48, $M.47, $M.89, $M.46, $M.90, $M.86, $M.91;



implementation qp_notify_peer($i0: i1, $i1: i64, $i2: i32, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i8;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $i13: i8;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $p18: ref;
  var $p19: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p34: ref;
  var $i35: i1;
  var $i36: i32;
  var $p39: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p45: ref;
  var $p47: ref;
  var $i48: i32;
  var $i49: i1;
  var $i50: i1;
  var $p51: ref;
  var $i17: i32;
  var cmdloc_dummy_var_43: [ref]i8;
  var cmdloc_dummy_var_44: [ref]i8;
  var cmdloc_dummy_var_45: [ref]i8;
  var cmdloc_dummy_var_46: [ref]i8;
  var cmdloc_dummy_var_47: [ref]i8;
  var cmdloc_dummy_var_48: [ref]i8;
  var cmdloc_dummy_var_49: [ref]i8;
  var cmdloc_dummy_var_50: [ref]i8;
  var cmdloc_dummy_var_51: [ref]i8;
  var vslice_dummy_var_192: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 258} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} $p5 := $alloc($mul.ref(48, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 260} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 261} $p7 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p4);
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p8, $i1);
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i8($i0);
    call {:si_unique_call 262} {:cexpr "qp_notify_peer:arg:attach"} boogie_si_record_i1($i0);
    call {:si_unique_call 263} {:cexpr "qp_notify_peer:arg:my_id"} boogie_si_record_i32($i2);
    call {:si_unique_call 264} {:cexpr "qp_notify_peer:arg:peer_id"} boogie_si_record_i32($i3);
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p4);
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.0, $p10);
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 265} $i12 := vmci_handle_is_invalid___1($i11);
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i8($i12);
    call {:si_unique_call 266} {:cexpr "tmp"} boogie_si_record_i8($i13);
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i8.i1($i13);
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i14 == 1);
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i2, $sub.i32(0, 1));
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i15 == 1);
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i3, $sub.i32(0, 1));
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p6, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, $i3);
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p6, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, 0);
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p6);
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_43 := $M.0;
    cmdloc_dummy_var_44 := $M.0;
    call {:si_unique_call 267} cmdloc_dummy_var_45 := $memcpy.i8(cmdloc_dummy_var_43, cmdloc_dummy_var_44, $p23, $p24, 8, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_45;
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p7, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p25, 0);
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p7, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, 0);
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p7);
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_46 := $M.0;
    cmdloc_dummy_var_47 := $M.0;
    call {:si_unique_call 268} cmdloc_dummy_var_48 := $memcpy.i8(cmdloc_dummy_var_46, cmdloc_dummy_var_47, $p30, $p31, 8, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_48;
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p34, 24);
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i8.i1($i9);
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    $i36 := (if $i35 == 1 then 3 else 4);
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, $i36);
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p4);
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_49 := $M.0;
    cmdloc_dummy_var_50 := $M.0;
    call {:si_unique_call 269} cmdloc_dummy_var_51 := $memcpy.i8(cmdloc_dummy_var_49, cmdloc_dummy_var_50, $p42, $p43, 8, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_51;
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(32, 1)), $mul.ref(8, 1));
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p45, $i2);
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 270} $i48 := vmci_datagram_dispatch(0, $p47, 0);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    call {:si_unique_call 271} {:cexpr "rv"} boogie_si_record_i32($i48);
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    $i49 := $slt.i32($i48, 0);
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i17 := $i48;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb10:
    assume $i49 == 1;
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i8.i1($i9);
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    $p51 := (if $i50 == 1 then .str.175 else .str.176);
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 272} vslice_dummy_var_192 := printk.ref.ref.i32(.str.174, $p51, $i3);
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_55:
    assume !assertsPassed;
    return;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 2);
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb2;
}



const ldv_mutex_unlock_229: ref;

axiom ldv_mutex_unlock_229 == $sub.ref(0, 428601);

procedure ldv_mutex_unlock_229($p0: ref);
  free requires assertsPassed;
  modifies $M.28, assertsPassed;



implementation ldv_mutex_unlock_229($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 273} ldv_mutex_unlock_mutex_of_qp_list($p0);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 274} mutex_unlock($p0);
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_58:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_mutex_of_qp_list: ref;

axiom ldv_mutex_unlock_mutex_of_qp_list == $sub.ref(0, 429633);

procedure ldv_mutex_unlock_mutex_of_qp_list($p0: ref);
  free requires assertsPassed;
  modifies $M.28, assertsPassed;



implementation ldv_mutex_unlock_mutex_of_qp_list($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    $i1 := $M.28;
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 2);
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.28 := 1;
    call {:si_unique_call 276} {:cexpr "ldv_mutex_mutex_of_qp_list"} boogie_si_record_i32(1);
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} ldv_error();
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_61:
    assume !assertsPassed;
    return;
}



const mutex_unlock: ref;

axiom mutex_unlock == $sub.ref(0, 430665);

procedure mutex_unlock($p0: ref);
  free requires assertsPassed;



implementation mutex_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 431697);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 277} __VERIFIER_error();
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_64:
    assume !assertsPassed;
    return;
}



const vmci_datagram_dispatch: ref;

axiom vmci_datagram_dispatch == $sub.ref(0, 432729);

procedure vmci_datagram_dispatch($i0: i32, $p1: ref, $i2: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.29, $M.0, $CurrAddr, $M.34, $M.30, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.31, $M.87, $M.69, $M.35, $M.20, $M.21, $M.44, $M.32, $M.108, $M.110, $M.112, $M.114, $M.70, $M.33, $M.2, $M.3, $M.109, $M.111, $M.113, $M.115, assertsPassed, $M.6, $M.13, $M.18, $M.19, $M.36, $M.38, $M.40, $M.42, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.45, $M.48, $M.47, $M.89, $M.46, $M.90, $M.86, $M.91;



implementation vmci_datagram_dispatch($i0: i32, $p1: ref, $i2: i1) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i8;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $i13: i64;
  var $p16: ref;
  var $p17: ref;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $p22: ref;
  var $i23: i32;
  var $p25: ref;
  var $i26: i32;
  var $i28: i32;
  var $i29: i1;
  var $i30: i1;
  var $i31: i32;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i32;
  var $i15: i32;
  var vslice_dummy_var_193: i32;
  var vslice_dummy_var_194: i32;
  var vslice_dummy_var_195: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 278} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 279} {:cexpr "vmci_datagram_dispatch:arg:context_id"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i2);
    call {:si_unique_call 280} {:cexpr "vmci_datagram_dispatch:arg:from_guest"} boogie_si_record_i1($i2);
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.0, $p5);
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    $i7 := $ugt.i64($i6, 69632);
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i7 == 1);
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.0, $p8);
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    $i10 := $add.i64($i9, 24);
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    $i11 := $ugt.i64($i10, 69632);
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i8.i1($i4);
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} $i19 := vmci_route($p16, $p17, $i18, $p3);
    call {:si_unique_call 283} {:cexpr "retval"} boogie_si_record_i32($i19);
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i19, 0);
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.29, $p3);
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 1);
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.29, $p3);
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 2);
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.29, $p3);
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} vslice_dummy_var_195 := printk.ref.i32(.str.20, $i36);
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 10);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb17:
    assume $i34 == 1;
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 287} $i35 := dg_dispatch_as_guest($p1);
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    call {:si_unique_call 288} {:cexpr "tmp___0"} boogie_si_record_i32($i35);
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    $i15 := $i35;
    goto $bb6;

  SeqInstr_70:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i29 == 1;
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i0, $sub.i32(0, 1));
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    $i31 := $i0;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} $i32 := dg_dispatch_as_host($i31, $p1);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    call {:si_unique_call 286} {:cexpr "tmp"} boogie_si_record_i32($i32);
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    $i15 := $i32;
    goto $bb6;

  SeqInstr_67:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i30 == 1;
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    $i31 := 2;
    goto $bb15;

  $bb8:
    assume $i20 == 1;
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 284} vslice_dummy_var_194 := no_printk.ref.i32.i32.i32(.str.19, $i23, $i26, $i19);
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    $i15 := $i19;
    goto $bb6;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.0, $p12);
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 281} vslice_dummy_var_193 := no_printk.ref.i64(.str.18, $i13);
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 2);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb2;
}



const vmci_route: ref;

axiom vmci_route == $sub.ref(0, 433761);

procedure vmci_route($p0: ref, $p1: ref, $i2: i1, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.29, $M.0, $M.44, $CurrAddr;



implementation vmci_route($p0: ref, $p1: ref, $i2: i1, $p3: ref) returns ($r: i32)
{
  var $i4: i8;
  var $i5: i1;
  var $i6: i8;
  var $i7: i1;
  var $i8: i8;
  var $i9: i1;
  var $i10: i8;
  var $i11: i1;
  var $i12: i8;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $p42: ref;
  var $i43: i32;
  var $i44: i1;
  var $i45: i32;
  var $p46: ref;
  var $i47: i1;
  var $p48: ref;
  var $i49: i32;
  var $i50: i1;
  var $i51: i1;
  var $p52: ref;
  var $i53: i1;
  var $p54: ref;
  var $i55: i32;
  var $i56: i1;
  var $i57: i8;
  var $i58: i1;
  var $p59: ref;
  var $i60: i32;
  var $i61: i1;
  var $i62: i1;
  var $p63: ref;
  var $p64: ref;
  var $i65: i32;
  var $i66: i1;
  var $p67: ref;
  var $i68: i32;
  var $i69: i1;
  var $p70: ref;
  var $i71: i32;
  var $p72: ref;
  var $i73: i32;
  var $i74: i1;
  var $i75: i1;
  var $i76: i1;
  var $p77: ref;
  var $i78: i32;
  var $i79: i1;
  var $i80: i32;
  var $p81: ref;
  var $i16: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i2);
    call {:si_unique_call 290} {:cexpr "vmci_route:arg:from_guest"} boogie_si_record_i1($i2);
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 291} $i5 := vmci_host_code_active();
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i5);
    call {:si_unique_call 292} {:cexpr "tmp"} boogie_si_record_i8($i6);
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i6);
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i8($i7);
    call {:si_unique_call 293} {:cexpr "has_host_device"} boogie_si_record_i8($i8);
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 294} $i9 := vmci_guest_code_active();
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i8($i9);
    call {:si_unique_call 295} {:cexpr "tmp___0"} boogie_si_record_i8($i10);
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i10);
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i8($i11);
    call {:si_unique_call 296} {:cexpr "has_guest_device"} boogie_si_record_i8($i12);
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    $M.29 := $store.i32($M.29, $p3, 0);
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, $sub.i32(0, 1));
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 0);
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 2);
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i8.i1($i8);
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $i76 := $trunc.i8.i1($i12);
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    assume {:branchcond $i76} true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i76 == 1);
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 39);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb72:
    assume $i76 == 1;
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.0, $p77);
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    $i79 := $eq.i32($i78, $sub.i32(0, 1));
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    assume {:branchcond $i79} true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $M.29 := $store.i32($M.29, $p3, 2);
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb3;

  $bb75:
    assume $i79 == 1;
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 301} $i80 := vmci_get_context_id();
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p81, $i80);
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb49:
    assume $i53 == 1;
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 299} $i56 := vmci_ctx_exists($i55);
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    $i57 := $zext.i1.i8($i56);
    call {:si_unique_call 300} {:cexpr "tmp___1"} boogie_si_record_i8($i57);
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    $i58 := $trunc.i8.i1($i57);
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i58 == 1);
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    $i75 := $trunc.i8.i1($i12);
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    assume {:branchcond $i75} true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i75 == 1);
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 10);
    goto $bb3;

  $bb67:
    assume $i75 == 1;
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb51:
    assume $i58 == 1;
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.0, $p59);
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    $i61 := $eq.i32($i60, $sub.i32(0, 1));
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i61 == 1);
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.0, $p64);
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    $i66 := $ne.i32($i65, $sub.i32(0, 1));
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    assume !($i66 == 1);
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $M.29 := $store.i32($M.29, $p3, 1);
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb3;

  $bb59:
    assume $i66 == 1;
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.0, $p67);
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    $i69 := $ugt.i32($i68, 2);
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    assume !($i69 == 1);
    goto $bb61;

  $bb62:
    assume $i69 == 1;
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.0, $p70);
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.0, $p72);
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    $i74 := $ne.i32($i71, $i73);
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    assume !($i74 == 1);
    goto $bb61;

  $bb64:
    assume $i74 == 1;
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 10);
    goto $bb3;

  $bb53:
    assume $i61 == 1;
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    $i62 := $trunc.i8.i1($i4);
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p63, 2);
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb55:
    assume $i62 == 1;
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 2);
    goto $bb3;

  $bb23:
    assume $i35 == 1;
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 0);
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i8.i1($i4);
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb32;

  $bb32:
    assume !($i40 == 1);
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i8.i1($i12);
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i8.i1($i8);
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i47 == 1);
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 39);
    goto $bb3;

  $bb39:
    assume $i47 == 1;
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p48);
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i49, $sub.i32(0, 1));
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $M.29 := $store.i32($M.29, $p3, 1);
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb3;

  $bb42:
    assume $i50 == 1;
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i8.i1($i4);
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p52, 2);
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb44:
    assume $i51 == 1;
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 2);
    goto $bb3;

  $bb33:
    assume $i41 == 1;
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i43, $sub.i32(0, 1));
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $M.29 := $store.i32($M.29, $p3, 2);
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb3;

  $bb35:
    assume $i44 == 1;
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 298} $i45 := vmci_get_context_id();
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p46, $i45);
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb30:
    assume {:verifier.code 0} true;
    assume $i40 == 1;
    goto $bb31;

  $bb25:
    assume $i38 == 1;
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i8.i1($i8);
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i39 == 1);
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 39);
    goto $bb3;

  $bb27:
    assume $i39 == 1;
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    $M.29 := $store.i32($M.29, $p3, 1);
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb3;

  $bb5:
    assume $i19 == 1;
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i8.i1($i4);
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i8.i1($i12);
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i21 == 1);
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 39);
    goto $bb3;

  $bb10:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 2);
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, $sub.i32(0, 1));
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $M.29 := $store.i32($M.29, $p3, 2);
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb3;

  $bb16:
    assume $i27 == 1;
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, $sub.i32(0, 1));
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb18;

  $bb19:
    assume $i30 == 1;
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 297} $i31 := vmci_get_context_id();
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, $i31);
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb13:
    assume $i24 == 1;
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 2);
    goto $bb3;

  $bb7:
    assume $i20 == 1;
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 10);
    goto $bb3;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 2);
    goto $bb3;
}



const dg_dispatch_as_host: ref;

axiom dg_dispatch_as_host == $sub.ref(0, 434793);

procedure dg_dispatch_as_host($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.34, $M.30, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.31, $M.87, $M.69, $M.35, $M.20, $M.21, $CurrAddr, $M.32, $M.108, $M.110, $M.112, $M.114, $M.70, $M.33, $M.2, $M.3, $M.44, $M.109, $M.111, $M.113, $M.115, assertsPassed, $M.6, $M.13, $M.18, $M.19, $M.36, $M.38, $M.40, $M.42, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.45, $M.48, $M.47, $M.89, $M.46, $M.90, $M.86, $M.91;



implementation dg_dispatch_as_host($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p18: ref;
  var $i19: i32;
  var $p21: ref;
  var $i22: i32;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i32;
  var $i28: i1;
  var $p30: ref;
  var $i31: i32;
  var $p33: ref;
  var $i34: i32;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $p45: ref;
  var $i46: i32;
  var $i47: i1;
  var $i48: i32;
  var $p49: ref;
  var $p50: ref;
  var $i51: i64;
  var $p52: ref;
  var $i53: i64;
  var $i54: i1;
  var $p56: ref;
  var $i57: i32;
  var $p59: ref;
  var $i60: i32;
  var $p62: ref;
  var $i63: i32;
  var $p64: ref;
  var $i65: i32;
  var $i66: i1;
  var $i67: i8;
  var $i68: i1;
  var $p70: ref;
  var $i71: i8;
  var $i72: i1;
  var $p74: ref;
  var $i75: i32;
  var $i76: i1;
  var $i77: i32;
  var $i78: i1;
  var $p80: ref;
  var $i81: i64;
  var $i82: i64;
  var $p83: ref;
  var $p84: ref;
  var $i85: i64;
  var $i86: i1;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p100: ref;
  var $p102: ref;
  var $p104: ref;
  var $p105: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $i111: i32;
  var $i113: i1;
  var $p115: ref;
  var $i116: i32;
  var $i117: i1;
  var $p119: ref;
  var $i120: i32;
  var $i121: i32;
  var $i122: i32;
  var $i123: i1;
  var $i124: i8;
  var $i125: i1;
  var $i126: i1;
  var $i127: i1;
  var $p129: ref;
  var $i130: i32;
  var $p132: ref;
  var $p133: ref;
  var $i134: i64;
  var $i135: i1;
  var $p136: ref;
  var $p137: ref;
  var $p139: ref;
  var $i140: i32;
  var $i141: i32;
  var $i142: i1;
  var $p143: ref;
  var $i144: i32;
  var $i12: i32;
  var cmdloc_dummy_var_52: [ref]i8;
  var cmdloc_dummy_var_53: [ref]i8;
  var cmdloc_dummy_var_54: [ref]i8;
  var cmdloc_dummy_var_55: [ref]i8;
  var cmdloc_dummy_var_56: [ref]i8;
  var cmdloc_dummy_var_57: [ref]i8;
  var cmdloc_dummy_var_58: [ref]i8;
  var cmdloc_dummy_var_59: [ref]i8;
  var cmdloc_dummy_var_60: [ref]i8;
  var vslice_dummy_var_196: i32;
  var vslice_dummy_var_197: i32;
  var vslice_dummy_var_198: i32;
  var vslice_dummy_var_199: i32;
  var vslice_dummy_var_200: i32;
  var vslice_dummy_var_201: i32;
  var vslice_dummy_var_202: i32;
  var vslice_dummy_var_203: i1;
  var vslice_dummy_var_204: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 302} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 303} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 304} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 305} {:cexpr "dg_dispatch_as_host:arg:context_id"} boogie_si_record_i32($i0);
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.0, $p5);
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    $i7 := $add.i64($i6, 24);
    call {:si_unique_call 306} {:cexpr "dg_size"} boogie_si_record_i64($i7);
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, $i0);
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    $i26 := $load.i64($M.0, $p25);
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} $i27 := vmci_datagram_get_priv_flags($i0, $i26, $p2);
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    call {:si_unique_call 309} {:cexpr "retval"} boogie_si_record_i32($i27);
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 2);
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i39 == 1);
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    $i116 := $load.i32($M.0, $p115);
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    $i117 := $ne.i32($i116, $i0);
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    assume {:branchcond $i117} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i117 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} $p132 := kmalloc($i7, 208);
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    $p133 := $bitcast.ref.ref($p132);
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    $i134 := $p2i.ref.i64($p133);
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    $i135 := $eq.i64($i134, 0);
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    assume {:branchcond $i135} true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p136 := $bitcast.ref.ref($p133);
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    $p137 := $bitcast.ref.ref($p1);
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_58 := $M.0;
    cmdloc_dummy_var_59 := $M.0;
    call {:si_unique_call 340} cmdloc_dummy_var_60 := $memcpy.i8(cmdloc_dummy_var_58, cmdloc_dummy_var_59, $p136, $p137, $i7, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_60;
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    $i140 := $load.i32($M.0, $p139);
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 341} $i141 := vmci_ctx_enqueue_datagram($i140, $p133);
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    call {:si_unique_call 342} {:cexpr "retval"} boogie_si_record_i32($i141);
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    $i142 := $slt.i32($i141, 0);
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i142 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i144 := $trunc.i64.i32($i7);
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    $i12 := $i144;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb56:
    assume $i142 == 1;
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    $p143 := $bitcast.ref.ref($p133);
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 343} kfree($p143);
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    $i12 := $i141;
    goto $bb3;

  SeqInstr_94:
    assume !assertsPassed;
    return;

  $bb53:
    assume $i135 == 1;
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 3);
    goto $bb3;

  $bb41:
    assume $i117 == 1;
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    $i120 := $load.i32($M.0, $p119);
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} $i121 := vmci_context_get_priv_flags($i120);
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    call {:si_unique_call 335} {:cexpr "tmp___3"} boogie_si_record_i32($i121);
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    $i122 := $load.i32($M.0, $p2);
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} $i123 := vmci_deny_interaction($i122, $i121);
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    $i124 := $zext.i1.i8($i123);
    call {:si_unique_call 337} {:cexpr "tmp___4"} boogie_si_record_i8($i124);
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    $i125 := $trunc.i8.i1($i124);
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    assume {:branchcond $i125} true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i125 == 1);
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    $i126 := $ne.i32($i0, $sub.i32(0, 1));
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    assume {:branchcond $i126} true;
    goto $bb45, $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    assume !($i126 == 1);
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb45:
    assume $i126 == 1;
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    $i127 := $ugt.i32($i0, 2);
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    assume {:branchcond $i127} true;
    goto $bb48, $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    assume !($i127 == 1);
    goto $bb47;

  $bb48:
    assume $i127 == 1;
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    $i130 := $load.i32($M.0, $p129);
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 338} vslice_dummy_var_204 := no_printk.ref.i32.i32(.str.68, $i0, $i130);
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 10);
    goto $bb3;

  $bb43:
    assume $i125 == 1;
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 7);
    goto $bb3;

  SeqInstr_91:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i39 == 1;
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, 0);
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i43 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    $i51 := $load.i64($M.0, $p50);
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} $p52 := vmci_resource_by_handle($i51, 3);
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    $i53 := $p2i.ref.i64($p52);
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    $i54 := $eq.i64($i53, 0);
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p52);
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.0, $p2);
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p62, $mul.ref(0, 168)), $mul.ref(160, 1));
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.0, $p64);
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 315} $i66 := vmci_deny_interaction($i63, $i65);
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    $i67 := $zext.i1.i8($i66);
    call {:si_unique_call 316} {:cexpr "tmp___0"} boogie_si_record_i8($i67);
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    $i68 := $trunc.i8.i1($i67);
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    assume {:branchcond $i68} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p62, $mul.ref(0, 168)), $mul.ref(140, 1));
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    $i71 := $load.i8($M.0, $p70);
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $i72 := $trunc.i8.i1($i71);
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    assume {:branchcond $i72} true;
    goto $bb25, $bb27;

  $bb27:
    assume !($i72 == 1);
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.0, $p74);
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    $i76 := $eq.i32($i75, 2);
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    assume {:branchcond $i76} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i76 == 1);
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p62, $mul.ref(0, 168)), $mul.ref(144, 1));
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $p108 := $load.ref($M.0, $p107);
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p62, $mul.ref(0, 168)), $mul.ref(152, 1));
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    $p110 := $load.ref($M.0, $p109);
    call {:si_unique_call 320} $i111 := devirtbounce.4($p108, $p110, $p1);
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    call {:si_unique_call 321} {:cexpr "retval"} boogie_si_record_i32($i111);
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} vslice_dummy_var_200 := vmci_resource_put($p52);
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    $i113 := $slt.i32($i111, 0);
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    assume {:branchcond $i113} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb37:
    assume $i113 == 1;
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    $i12 := $i111;
    goto $bb3;

  SeqInstr_82:
    assume !assertsPassed;
    return;

  SeqInstr_79:
    assume !assertsPassed;
    return;

  $bb28:
    assume {:verifier.code 0} true;
    assume $i76 == 1;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 318} $i77 := atomic_add_return(1, delayed_dg_host_queue_size);
    call {:si_unique_call 319} {:cexpr "tmp___1"} boogie_si_record_i32($i77);
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    $i78 := $eq.i32($i77, 256);
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    assume {:branchcond $i78} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    $i81 := $load.i64($M.0, $p80);
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    $i82 := $add.i64($i81, 120);
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} $p83 := kmalloc($i82, 32);
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    $p84 := $bitcast.ref.ref($p83);
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    $i85 := $p2i.ref.i64($p84);
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    $i86 := $eq.i64($i85, 0);
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p84, $mul.ref(0, 120)), $mul.ref(88, 1));
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p88, 1);
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p84, $mul.ref(0, 120)), $mul.ref(0, 1));
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p89, $p52);
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p84, $mul.ref(0, 120)), $mul.ref(96, 1));
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    $p91 := $bitcast.ref.ref($p90);
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    $p92 := $bitcast.ref.ref($p1);
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_52 := $M.0;
    cmdloc_dummy_var_53 := $M.0;
    call {:si_unique_call 328} cmdloc_dummy_var_54 := $memcpy.i8(cmdloc_dummy_var_52, cmdloc_dummy_var_53, $p91, $p92, $i7, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_54;
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p84, $mul.ref(0, 120)), $mul.ref(8, 1));
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} __init_work($p93, 0);
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p94, 137438953408);
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($add.ref($p84, $mul.ref(0, 120)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    $p97 := $bitcast.ref.ref($p96);
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    $p98 := $bitcast.ref.ref($p4);
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_55 := $M.0;
    cmdloc_dummy_var_56 := $M.0;
    call {:si_unique_call 330} cmdloc_dummy_var_57 := $memcpy.i8(cmdloc_dummy_var_55, cmdloc_dummy_var_56, $p97, $p98, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_57;
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($add.ref($p84, $mul.ref(0, 120)), $mul.ref(8, 1)), $mul.ref(32, 1));
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 331} lockdep_init_map($p100, .str.22, $p3, 0);
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($add.ref($p84, $mul.ref(0, 120)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} INIT_LIST_HEAD($p102);
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($add.ref($p84, $mul.ref(0, 120)), $mul.ref(8, 1)), $mul.ref(24, 1));
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p104, dg_delayed_dispatch);
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p84, $mul.ref(0, 120)), $mul.ref(8, 1));
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 333} vslice_dummy_var_203 := schedule_work($p105);
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb33:
    assume $i86 == 1;
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} atomic_dec(delayed_dg_host_queue_size);
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 327} vslice_dummy_var_202 := vmci_resource_put($p52);
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 3);
    goto $bb3;

  SeqInstr_88:
    assume !assertsPassed;
    return;

  $bb30:
    assume $i78 == 1;
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 323} atomic_dec(delayed_dg_host_queue_size);
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} vslice_dummy_var_201 := vmci_resource_put($p52);
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 3);
    goto $bb3;

  SeqInstr_85:
    assume !assertsPassed;
    return;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i72 == 1;
    goto $bb26;

  $bb22:
    assume $i68 == 1;
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 317} vslice_dummy_var_199 := vmci_resource_put($p52);
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 7);
    goto $bb3;

  SeqInstr_76:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i54 == 1;
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.0, $p56);
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.0, $p59);
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 314} vslice_dummy_var_198 := no_printk.ref.i32.i32(.str.67, $i57, $i60);
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 1);
    goto $bb3;

  $bb13:
    assume $i43 == 1;
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i46, 0);
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i47 == 1);
    goto $bb15;

  $bb16:
    assume $i47 == 1;
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 311} $i48 := vmci_event_dispatch($p1);
    call {:si_unique_call 312} {:cexpr "tmp"} boogie_si_record_i32($i48);
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    $i12 := $i48;
    goto $bb3;

  $bb8:
    assume $i28 == 1;
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1)), $mul.ref(4, 1));
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} vslice_dummy_var_197 := printk.ref.i32.i32(.str.66, $i31, $i34);
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    $i12 := $i27;
    goto $bb3;

  SeqInstr_73:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1)), $mul.ref(4, 1));
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} vslice_dummy_var_196 := no_printk.ref.i32.i32.i32(.str.65, $i0, $i19, $i22);
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 7);
    goto $bb3;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 10);
    goto $bb3;
}



const dg_dispatch_as_guest: ref;

axiom dg_dispatch_as_guest == $sub.ref(0, 435825);

procedure dg_dispatch_as_guest($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.30, $M.32, $CurrAddr, $M.33, $M.0, $M.2, $M.3, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.31, $M.87, $M.6, $M.13, $M.20, $M.21, $M.18, $M.19, $M.69, $M.70, $M.23, $M.24, $M.25, $M.26, $M.27, $M.108, $M.110, $M.112, $M.114, $M.28, assertsPassed, $M.29, $M.45, $M.48, $M.47, $M.89, $M.109, $M.111, $M.113, $M.115, $M.34, $M.35, $M.46, $M.90, $M.86, $M.91, $M.44, $M.36, $M.38, $M.40, $M.42;



implementation dg_dispatch_as_guest($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i8: i32;
  var $i7: i32;
  var vslice_dummy_var_205: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.0, $p2);
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} $p4 := vmci_resource_by_handle($i3, 3);
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 345} $i8 := vmci_send_datagram($p0);
    call {:si_unique_call 346} {:cexpr "retval"} boogie_si_record_i32($i8);
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 347} vslice_dummy_var_205 := vmci_resource_put($p4);
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    $i7 := $i8;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  SeqInstr_97:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 8);
    goto $bb3;
}



const vmci_resource_by_handle: ref;

axiom vmci_resource_by_handle == $sub.ref(0, 436857);

procedure vmci_resource_by_handle($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.30, $M.32, $CurrAddr, $M.33, $M.0;



implementation vmci_resource_by_handle($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    assume {:verifier.code 0} true;
    $M.30 := $store.i64($M.30, $p3, $i0);
    call {:si_unique_call 349} {:cexpr "vmci_resource_by_handle:arg:resource_type___0"} boogie_si_record_i32($i1);
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 350} rcu_read_lock___1();
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p2);
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    $i5 := $load.i64($M.30, $p4);
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 351} $p6 := vmci_resource_lookup($i5, $i1);
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p14 := $0.ref;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 353} rcu_read_unlock___1();
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    $r := $p14;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p6, $mul.ref(0, 136)), $mul.ref(8, 1));
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, $i1);
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb6;

  $bb6:
    assume !($i11 == 1);
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i1, 0);
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb3;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} $p13 := vmci_resource_get($p6);
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    $p14 := $p13;
    goto $bb9;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb5;
}



const vmci_send_datagram: ref;

axiom vmci_send_datagram == $sub.ref(0, 437889);

procedure vmci_send_datagram($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vmci_send_datagram($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i64;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 354} $p4 := spinlock_check(vmci_dev_spinlock);
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 355} $i5 := _raw_spin_lock_irqsave($p4);
    call {:si_unique_call 356} {:cexpr "flags"} boogie_si_record_i64($i5);
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    $p6 := $M.31;
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i22 := $sub.i32(0, 20);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 360} spin_unlock_irqrestore(vmci_dev_spinlock, $i5);
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    $i3 := $i22;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    $p9 := $M.31;
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p11, $mul.ref(16, 1));
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p0);
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    $i15 := $load.i64($M.0, $p14);
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    $i16 := $add.i64($i15, 24);
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} iowrite8_rep($p12, $p13, $i16);
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    $p17 := $M.31;
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($p19, $mul.ref(28, 1));
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 358} $i21 := ioread32($p20);
    call {:si_unique_call 359} {:cexpr "tmp___0"} boogie_si_record_i32($i21);
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    $i22 := $i21;
    goto $bb7;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32(0, 2);
    goto $bb3;
}



const vmci_resource_put: ref;

axiom vmci_resource_put == $sub.ref(0, 438921);

procedure vmci_resource_put($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.31, $M.87, $M.6, $M.0, $M.13, $M.20, $M.21, $M.18, $M.19, $M.69, $M.70, $CurrAddr, $M.23, $M.24, $M.25, $M.26, $M.27, $M.108, $M.110, $M.112, $M.114, $M.28, $M.33, assertsPassed, $M.29, $M.45, $M.48, $M.47, $M.89, $M.109, $M.111, $M.113, $M.115, $M.34, $M.30, $M.35, $M.46, $M.90, $M.86, $M.91, $M.44, $M.32, $M.36, $M.38, $M.40, $M.42;



implementation vmci_resource_put($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(32, 1));
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} $i2 := kref_put($p1, vmci_release_resource);
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    call {:si_unique_call 362} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_100:
    assume !assertsPassed;
    return;
}



const vmci_release_resource: ref;

axiom vmci_release_resource == $sub.ref(0, 439953);

procedure vmci_release_resource($p0: ref);
  free requires assertsPassed;



implementation vmci_release_resource($p0: ref)
{
  var $p1: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $i12: i1;
  var $i13: i32;
  var $i14: i64;
  var $p16: ref;
  var vslice_dummy_var_206: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 32), 136)), $mul.ref(16, 1));
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 363} $i4 := hlist_unhashed($p3);
    call {:si_unique_call 364} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    call {:si_unique_call 365} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i6);
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 366} $i10 := ldv__builtin_expect($i9, 0);
    call {:si_unique_call 367} {:cexpr "tmp___0"} boogie_si_record_i64($i10);
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i6, 0);
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i12);
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 369} vslice_dummy_var_206 := ldv__builtin_expect($i14, 0);
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 32), 136)), $mul.ref(40, 1));
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 370} complete_($p16);
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 368} warn_slowpath_null(.str.181, 202);
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const hlist_unhashed: ref;

axiom hlist_unhashed == $sub.ref(0, 440985);

procedure hlist_unhashed($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation hlist_unhashed($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const complete_: ref;

axiom complete_ == $sub.ref(0, 442017);

procedure complete_($p0: ref);
  free requires assertsPassed;



implementation complete_($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    return;
}



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 443049);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const _raw_spin_lock_irqsave: ref;

axiom _raw_spin_lock_irqsave == $sub.ref(0, 444081);

procedure _raw_spin_lock_irqsave($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation _raw_spin_lock_irqsave($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 1} true;
    call {:si_unique_call 371} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 372} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const iowrite8_rep: ref;

axiom iowrite8_rep == $sub.ref(0, 445113);

procedure iowrite8_rep($p0: ref, $p1: ref, $i2: i64);
  free requires assertsPassed;



implementation iowrite8_rep($p0: ref, $p1: ref, $i2: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 373} {:cexpr "iowrite8_rep:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    return;
}



const ioread32: ref;

axiom ioread32 == $sub.ref(0, 446145);

procedure ioread32($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ioread32($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 1} true;
    call {:si_unique_call 374} $i1 := __VERIFIER_nondet_uint();
    call {:si_unique_call 375} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i1);
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const spin_unlock_irqrestore: ref;

axiom spin_unlock_irqrestore == $sub.ref(0, 447177);

procedure spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation spin_unlock_irqrestore($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} {:cexpr "spin_unlock_irqrestore:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 377} _raw_spin_unlock_irqrestore($p3, $i1);
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irqrestore: ref;

axiom _raw_spin_unlock_irqrestore == $sub.ref(0, 448209);

procedure _raw_spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation _raw_spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} {:cexpr "_raw_spin_unlock_irqrestore:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    return;
}



const rcu_read_lock___1: ref;

axiom rcu_read_lock___1 == $sub.ref(0, 449241);

procedure rcu_read_lock___1();
  free requires assertsPassed;



implementation rcu_read_lock___1()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 379} __rcu_read_lock___1();
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} rcu_lock_acquire(rcu_lock_map);
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 381} $i0 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 382} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i8.i1(1);
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} $i3 := rcu_is_watching();
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 384} {:cexpr "tmp___0"} boogie_si_record_i8($i4);
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i7 == 1;
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 385} lockdep_rcu_suspicious(.str.59, 849, .str.60);
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb6:
    assume $i5 == 1;
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb3;
}



const vmci_resource_lookup: ref;

axiom vmci_resource_lookup == $sub.ref(0, 450273);

procedure vmci_resource_lookup($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.32, $M.33, $M.0, $CurrAddr;



implementation vmci_resource_lookup($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i32;
  var $i9: i64;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p27: ref;
  var $i28: i32;
  var $p30: ref;
  var $i31: i32;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $i42: i1;
  var $p41: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $i52: i64;
  var $i53: i1;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i64;
  var $i58: i1;
  var $p25: ref;
  var $p43: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 388} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p2);
    assume {:verifier.code 0} true;
    $M.32 := $store.i64($M.32, $p5, $i0);
    call {:si_unique_call 389} {:cexpr "vmci_resource_lookup:arg:type"} boogie_si_record_i32($i1);
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p2);
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.32, $p6);
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} $i8 := vmci_resource_hash($i7);
    call {:si_unique_call 391} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} rcu_read_lock___1();
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    $i9 := $zext.i32.i64($i8);
    $p11 := $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref($i9, 8)), $mul.ref(0, 1));
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p3);
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 393} __read_once_size($p12, $p14, 8);
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p3);
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 394} $i17 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 395} {:cexpr "tmp___0"} boogie_si_record_i32($i17);
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p16);
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $p22 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p43 := $0.ref;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 398} rcu_read_unlock___1();
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    $r := $p43;
    return;

  $bb4:
    assume $i24 == 1;
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    $p25 := $p22;
    goto $bb7;

  $bb7:
    call $p27, $i28, $p30, $i31, $p32, $i33, $i34, $p35, $i36, $i37, $p38, $i39, $i40, $i42, $p41, $p45, $p46, $p47, $p48, $p49, $p50, $i51, $i52, $i53, $p54, $p55, $p56, $i57, $i58, $p25 := vmci_resource_lookup_loop_$bb7($i1, $p2, $p4, $p27, $i28, $p30, $i31, $p32, $i33, $i34, $p35, $i36, $i37, $p38, $i39, $i40, $i42, $p41, $p45, $p46, $p47, $p48, $p49, $p50, $i51, $i52, $i53, $p54, $p55, $p56, $i57, $i58, $p25);
    goto $bb7_last;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p25, $mul.ref(0, 136)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    call {:si_unique_call 396} {:cexpr "cid"} boogie_si_record_i32($i28);
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p25, $mul.ref(0, 136)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    call {:si_unique_call 397} {:cexpr "rid"} boogie_si_record_i32($i31);
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p25, $mul.ref(0, 136)), $mul.ref(8, 1));
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, $i1);
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p25, $mul.ref(0, 136)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p4);
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} __read_once_size($p46, $p48, 8);
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p4);
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} $i51 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 401} {:cexpr "tmp___2"} boogie_si_record_i32($i51);
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    $i52 := $p2i.ref.i64($p50);
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    $i53 := $ne.i64($i52, 0);
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    $p56 := $0.ref;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    $i57 := $p2i.ref.i64($p56);
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    $i58 := $ne.i64($i57, 0);
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i58 == 1);
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb24:
    assume $i58 == 1;
    assume {:verifier.code 0} true;
    $p25 := $p56;
    goto $bb24_dummy;

  $bb21:
    assume $i53 == 1;
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p50);
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($p54, $mul.ref($sub.ref(0, 16), 136));
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    $p56 := $p55;
    goto $bb23;

  $bb9:
    assume $i34 == 1;
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.32, $p35);
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, $i31);
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb11;

  $bb12:
    assume $i37 == 1;
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.32, $p38);
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, $i28);
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    $p41 := $p25;
    assume true;
    goto $bb14, $bb16;

  $bb16:
    assume !($i40 == 1);
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i28, $sub.i32(0, 1));
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    $p41 := $p25;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb11;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i42 == 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    $p43 := $p41;
    goto $bb19;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i40 == 1;
    goto $bb15;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p16);
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p20, $mul.ref($sub.ref(0, 16), 136));
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    $p22 := $p21;
    goto $bb3;

  $bb24_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1905;
}



const vmci_resource_get: ref;

axiom vmci_resource_get == $sub.ref(0, 451305);

procedure vmci_resource_get($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation vmci_resource_get($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(32, 1));
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 402} kref_get($p1);
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const rcu_read_unlock___1: ref;

axiom rcu_read_unlock___1 == $sub.ref(0, 452337);

procedure rcu_read_unlock___1();
  free requires assertsPassed;



implementation rcu_read_unlock___1()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} $i0 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 404} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} __rcu_read_unlock___1();
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 409} rcu_lock_release(rcu_lock_map);
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i8.i1(1);
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 405} $i3 := rcu_is_watching();
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 406} {:cexpr "tmp___0"} boogie_si_record_i8($i4);
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i7 == 1;
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 407} lockdep_rcu_suspicious(.str.59, 900, .str.61);
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb6:
    assume $i5 == 1;
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb3;
}



const debug_lockdep_rcu_enabled: ref;

axiom debug_lockdep_rcu_enabled == $sub.ref(0, 453369);

procedure debug_lockdep_rcu_enabled() returns ($r: i32);
  free requires assertsPassed;



implementation debug_lockdep_rcu_enabled() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 1} true;
    call {:si_unique_call 410} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 411} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const rcu_is_watching: ref;

axiom rcu_is_watching == $sub.ref(0, 454401);

procedure rcu_is_watching() returns ($r: i1);
  free requires assertsPassed;



implementation rcu_is_watching() returns ($r: i1)
{
  var $i0: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 1} true;
    call {:si_unique_call 412} $i0 := __VERIFIER_nondet_bool();
    call {:si_unique_call 413} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i0);
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const lockdep_rcu_suspicious: ref;

axiom lockdep_rcu_suspicious == $sub.ref(0, 455433);

procedure lockdep_rcu_suspicious($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;



implementation lockdep_rcu_suspicious($p0: ref, $i1: i32, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} {:cexpr "lockdep_rcu_suspicious:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    return;
}



const __rcu_read_unlock___1: ref;

axiom __rcu_read_unlock___1 == $sub.ref(0, 456465);

procedure __rcu_read_unlock___1();
  free requires assertsPassed;



implementation __rcu_read_unlock___1()
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 415} devirtbounce.5(0);
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} __preempt_count_sub___1(1);
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    return;
}



const rcu_lock_release: ref;

axiom rcu_lock_release == $sub.ref(0, 457497);

procedure rcu_lock_release($p0: ref);
  free requires assertsPassed;



implementation rcu_lock_release($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 417} lock_release($p0, 1, 0);
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    return;
}



const lock_release: ref;

axiom lock_release == $sub.ref(0, 458529);

procedure lock_release($p0: ref, $i1: i32, $i2: i64);
  free requires assertsPassed;



implementation lock_release($p0: ref, $i1: i32, $i2: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 418} {:cexpr "lock_release:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 419} {:cexpr "lock_release:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    return;
}



const __preempt_count_sub___1: ref;

axiom __preempt_count_sub___1 == $sub.ref(0, 459561);

procedure __preempt_count_sub___1($i0: i32);
  free requires assertsPassed;



implementation __preempt_count_sub___1($i0: i32)
{
  var $i1: i1;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} {:cexpr "__preempt_count_sub___1:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32(0, 1);
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32(0, $sub.i32(0, 1));
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32(0, $i0);
    call {:si_unique_call 423} devirtbounce.7(0, __preempt_count, $i3, __preempt_count);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i2 == 1;
    call {:si_unique_call 422} devirtbounce.6(0, __preempt_count, __preempt_count);
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i1 == 1;
    call {:si_unique_call 421} devirtbounce.6(0, __preempt_count, __preempt_count);
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const kref_get: ref;

axiom kref_get == $sub.ref(0, 460593);

procedure kref_get($p0: ref);
  free requires assertsPassed;



implementation kref_get($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $i18: i1;
  var $i19: i32;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $i23: i1;
  var $i24: i32;
  var $i25: i64;
  var vslice_dummy_var_207: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} $i2 := atomic_add_return(1, $p1);
    call {:si_unique_call 425} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    $i3 := $sle.i32($i2, 1);
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    call {:si_unique_call 426} {:cexpr "__ret_warn_once"} boogie_si_record_i32($i4);
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} $i8 := ldv__builtin_expect($i7, 0);
    call {:si_unique_call 428} {:cexpr "tmp___2"} boogie_si_record_i64($i8);
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i4, 0);
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i32($i23);
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 435} vslice_dummy_var_207 := ldv__builtin_expect($i25, 0);
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1(1);
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    $i11 := $xor.i1($i10, 1);
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    call {:si_unique_call 429} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i12);
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 431} {:cexpr "tmp___0"} boogie_si_record_i64($i16);
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i12, 0);
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i32($i18);
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} $i21 := ldv__builtin_expect($i20, 0);
    call {:si_unique_call 434} {:cexpr "tmp___1"} boogie_si_record_i64($i21);
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i22 == 1;
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume $i17 == 1;
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 432} warn_slowpath_null(.str.62, 47);
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const atomic_add_return: ref;

axiom atomic_add_return == $sub.ref(0, 461625);

procedure atomic_add_return($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_add_return($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 436} {:cexpr "atomic_add_return:arg:i"} boogie_si_record_i32($i0);
    call {:si_unique_call 437} {:cexpr "atomic_add_return:arg:__ret"} boogie_si_record_i32($i0);
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 438} $i3 := devirtbounce.8(0, $p2, $i0, $p2);
    call {:si_unique_call 439} {:cexpr "__ret"} boogie_si_record_i32($i3);
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, $i0);
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const vmci_resource_hash: ref;

axiom vmci_resource_hash == $sub.ref(0, 462657);

procedure vmci_resource_hash($i0: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.33, $CurrAddr;



implementation vmci_resource_hash($i0: i64) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    assume {:verifier.code 0} true;
    $M.33 := $store.i64($M.33, $p2, $i0);
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.33, $p3);
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 441} $i5 := hash_32($i4, 7);
    call {:si_unique_call 442} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const __read_once_size: ref;

axiom __read_once_size == $sub.ref(0, 463689);

procedure __read_once_size($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation __read_once_size($p0: ref, $p1: ref, $i2: i32)
{
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i8;
  var $p11: ref;
  var $i12: i16;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $p19: ref;
  var $i20: i64;
  var cmdloc_dummy_var_61: [ref]i8;
  var cmdloc_dummy_var_62: [ref]i8;
  var cmdloc_dummy_var_63: [ref]i8;

  $bb0:
    call {:si_unique_call 443} {:cexpr "__read_once_size:arg:size"} boogie_si_record_i32($i2);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i2, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i2, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i2, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    call {:si_unique_call 444} devirtbounce.5(0);
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i2);
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_61 := $M.0;
    cmdloc_dummy_var_62 := $M.0;
    call {:si_unique_call 445} cmdloc_dummy_var_63 := $memcpy.i8(cmdloc_dummy_var_61, cmdloc_dummy_var_62, $p1, $p0, $i20, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_63;
    call {:si_unique_call 446} devirtbounce.5(0);
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i5 == 1;
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p0);
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.0, $p17);
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p1);
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p19, $i18);
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb4:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i2, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb8;

  $bb9:
    assume $i6 == 1;
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p0);
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p1);
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, $i15);
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb2:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i2, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i2, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb13:
    assume $i8 == 1;
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p0);
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    $i12 := $load.i16($M.0, $p11);
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p1);
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p13, $i12);
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb11:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i2, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb8;

  $bb15:
    assume $i9 == 1;
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p0);
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1, $i10);
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const hash_32: ref;

axiom hash_32 == $sub.ref(0, 464721);

procedure hash_32($i0: i32, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation hash_32($i0: i32, $i1: i32) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} {:cexpr "hash_32:arg:val"} boogie_si_record_i32($i0);
    call {:si_unique_call 448} {:cexpr "hash_32:arg:bits"} boogie_si_record_i32($i1);
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    $i2 := $mul.i32($i0, $sub.i32(0, 1640562687));
    call {:si_unique_call 449} {:cexpr "hash"} boogie_si_record_i32($i2);
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32(32, $i1);
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    $i4 := $lshr.i32($i2, $i3);
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const __rcu_read_lock___1: ref;

axiom __rcu_read_lock___1 == $sub.ref(0, 465753);

procedure __rcu_read_lock___1();
  free requires assertsPassed;



implementation __rcu_read_lock___1()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} __preempt_count_add___1(1);
    call {:si_unique_call 451} devirtbounce.5(0);
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    return;
}



const rcu_lock_acquire: ref;

axiom rcu_lock_acquire == $sub.ref(0, 466785);

procedure rcu_lock_acquire($p0: ref);
  free requires assertsPassed;



implementation rcu_lock_acquire($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} lock_acquire($p0, 0, 0, 2, 0, $0.ref, 0);
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    return;
}



const lock_acquire: ref;

axiom lock_acquire == $sub.ref(0, 467817);

procedure lock_acquire($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $p5: ref, $i6: i64);
  free requires assertsPassed;



implementation lock_acquire($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $p5: ref, $i6: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 453} {:cexpr "lock_acquire:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 454} {:cexpr "lock_acquire:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 455} {:cexpr "lock_acquire:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 456} {:cexpr "lock_acquire:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 457} {:cexpr "lock_acquire:arg:arg6"} boogie_si_record_i64($i6);
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    return;
}



const __preempt_count_add___1: ref;

axiom __preempt_count_add___1 == $sub.ref(0, 468849);

procedure __preempt_count_add___1($i0: i32);
  free requires assertsPassed;



implementation __preempt_count_add___1($i0: i32)
{
  var $i1: i1;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 458} {:cexpr "__preempt_count_add___1:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32(0, 1);
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32(0, $sub.i32(0, 1));
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    call {:si_unique_call 461} devirtbounce.7(0, __preempt_count, $i0, __preempt_count);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i2 == 1;
    call {:si_unique_call 460} devirtbounce.6(0, __preempt_count, __preempt_count);
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i1 == 1;
    call {:si_unique_call 459} devirtbounce.6(0, __preempt_count, __preempt_count);
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vmci_datagram_get_priv_flags: ref;

axiom vmci_datagram_get_priv_flags == $sub.ref(0, 469881);

procedure vmci_datagram_get_priv_flags($i0: i32, $i1: i64, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.34, $M.30, $M.0, $M.32, $CurrAddr, $M.33, $M.2, $M.3, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.31, $M.87, $M.6, $M.13, $M.20, $M.21, $M.18, $M.19, $M.69, $M.70, $M.23, $M.24, $M.25, $M.26, $M.27, $M.108, $M.110, $M.112, $M.114, $M.28, assertsPassed, $M.29, $M.45, $M.48, $M.47, $M.89, $M.109, $M.111, $M.113, $M.115, $M.35, $M.46, $M.90, $M.86, $M.91, $M.44, $M.36, $M.38, $M.40, $M.42;



implementation vmci_datagram_get_priv_flags($i0: i32, $i1: i64, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i1;
  var $i7: i1;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i17: i1;
  var $i18: i32;
  var $i6: i32;
  var vslice_dummy_var_208: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 462} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    assume {:verifier.code 0} true;
    $M.34 := $store.i64($M.34, $p4, $i1);
    call {:si_unique_call 463} {:cexpr "vmci_datagram_get_priv_flags:arg:context_id"} boogie_si_record_i32($i0);
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, $sub.i32(0, 1));
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i0, 2);
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i7 == 1);
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i0, 0);
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i17 == 1);
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 466} $i18 := vmci_context_get_priv_flags($i0);
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i18);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  SeqInstr_106:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 2);
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p3);
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.34, $p8);
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 464} $p10 := vmci_resource_by_handle($i9, 3);
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p10);
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 168)), $mul.ref(160, 1));
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i15);
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} vslice_dummy_var_208 := vmci_resource_put($p10);
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_103:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i12 == 1;
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 2);
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 2);
    goto $bb3;
}



const vmci_event_dispatch: ref;

axiom vmci_event_dispatch == $sub.ref(0, 470913);

procedure vmci_event_dispatch($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.44, $CurrAddr;



implementation vmci_event_dispatch($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.0, $p2);
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    $i4 := $ule.i64($i3, 3);
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i4 == 1);
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.0, $p5);
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    $i7 := $ugt.i64($i6, 24);
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    $i12 := $ugt.i32($i11, 6);
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i12 == 1);
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 5);
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i16 == 1);
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 6);
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 467} event_deliver($p1);
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 29);
    goto $bb6;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb9;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb9;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 2);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb2;
}



const vmci_deny_interaction: ref;

axiom vmci_deny_interaction == $sub.ref(0, 471945);

procedure vmci_deny_interaction($i0: i32, $i1: i32) returns ($r: i1);
  free requires assertsPassed;



implementation vmci_deny_interaction($i0: i32, $i1: i32) returns ($r: i1)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i32;
  var $i11: i1;
  var $i9: i1;
  var $i6: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} {:cexpr "vmci_deny_interaction:arg:part_one"} boogie_si_record_i32($i0);
    call {:si_unique_call 469} {:cexpr "vmci_deny_interaction:arg:part_two"} boogie_si_record_i32($i1);
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i0, 1);
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i1, 1);
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i0, 2);
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    assume {:verifier.code 0} true;
    $i9 := $i11;
    goto $bb9;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i1, 2);
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume true;
    goto $bb4, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb5;
}



const atomic_dec: ref;

axiom atomic_dec == $sub.ref(0, 472977);

procedure atomic_dec($p0: ref);
  free requires assertsPassed;



implementation atomic_dec($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 470} devirtbounce.6(0, $p1, $p1);
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    return;
}



const kmalloc: ref;

axiom kmalloc == $sub.ref(0, 474009);

procedure kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} {:cexpr "kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 472} {:cexpr "kmalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 473} $p2 := __kmalloc($i0, $i1);
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __init_work: ref;

axiom __init_work == $sub.ref(0, 475041);

procedure __init_work($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __init_work($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 474} {:cexpr "__init_work:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    return;
}



const lockdep_init_map: ref;

axiom lockdep_init_map == $sub.ref(0, 476073);

procedure lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;



implementation lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 475} {:cexpr "lockdep_init_map:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    return;
}



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0, 477105);

procedure INIT_LIST_HEAD($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $p0);
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p0);
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    return;
}



const dg_delayed_dispatch: ref;

axiom dg_delayed_dispatch == $sub.ref(0, 478137);

procedure dg_delayed_dispatch($p0: ref);
  free requires assertsPassed;
  modifies $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.0, $M.31, $M.87, $M.69, $M.108, $M.110, $M.112, $M.114, $M.70, $M.2, $M.3, $CurrAddr, $M.109, $M.111, $M.113, $M.115, assertsPassed, $M.6, $M.13, $M.20, $M.21, $M.18, $M.19, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.33, $M.29, $M.45, $M.48, $M.47, $M.89, $M.34, $M.30, $M.35, $M.46, $M.90, $M.86, $M.91, $M.44, $M.32, $M.36, $M.38, $M.40, $M.42;



implementation dg_delayed_dispatch($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p17: ref;
  var $i18: i8;
  var $i19: i1;
  var $p20: ref;
  var vslice_dummy_var_209: i32;
  var vslice_dummy_var_210: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 8), 120));
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 8), 120)), $mul.ref(0, 1));
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 168)), $mul.ref(144, 1));
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 8), 120)), $mul.ref(0, 1));
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 168)), $mul.ref(152, 1));
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 8), 120)), $mul.ref(96, 1));
    call {:si_unique_call 476} vslice_dummy_var_209 := devirtbounce.4($p6, $p10, $p11);
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 8), 120)), $mul.ref(0, 1));
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 168)), $mul.ref(0, 1));
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 477} vslice_dummy_var_210 := vmci_resource_put($p15);
    goto SeqInstr_112, SeqInstr_113;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  SeqInstr_114:
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 8), 120)), $mul.ref(88, 1));
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.0, $p17);
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i8.i1($i18);
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p2);
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 479} kfree($p20);
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 478} atomic_dec(delayed_dg_host_queue_size);
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_112:
    assume !assertsPassed;
    return;

  SeqInstr_109:
    assume !assertsPassed;
    return;
}



const schedule_work: ref;

axiom schedule_work == $sub.ref(0, 479169);

procedure schedule_work($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.36, $M.38, $M.40, $M.42;



implementation schedule_work($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.0, system_wq);
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} $i2 := queue_work($p1, $p0);
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 481} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const vmci_ctx_enqueue_datagram: ref;

axiom vmci_ctx_enqueue_datagram == $sub.ref(0, 480201);

procedure vmci_ctx_enqueue_datagram($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.35, $M.20, $M.21, $CurrAddr, $M.2, $M.3, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.31, $M.87, $M.6, $M.13, $M.18, $M.19, $M.69, $M.70, $M.23, $M.24, $M.25, $M.26, $M.27, $M.108, $M.110, $M.112, $M.114, $M.28, $M.33, assertsPassed, $M.29, $M.45, $M.48, $M.47, $M.89, $M.109, $M.111, $M.113, $M.115, $M.34, $M.30, $M.46, $M.90, $M.86, $M.91, $M.44, $M.32, $M.36, $M.38, $M.40, $M.42;



implementation vmci_ctx_enqueue_datagram($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i64;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var $i37: i8;
  var $i38: i1;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $i42: i64;
  var $i43: i64;
  var $i44: i1;
  var $p45: ref;
  var $p46: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $i52: i32;
  var $p53: ref;
  var $p54: ref;
  var $i55: i64;
  var $i56: i64;
  var $p57: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i32;
  var $i9: i32;
  var cmdloc_dummy_var_64: [ref]i8;
  var cmdloc_dummy_var_65: [ref]i8;
  var cmdloc_dummy_var_66: [ref]i8;
  var vslice_dummy_var_211: i32;
  var vslice_dummy_var_212: i32;
  var vslice_dummy_var_213: i32;
  var vslice_dummy_var_214: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 484} {:cexpr "vmci_ctx_enqueue_datagram:arg:cid"} boogie_si_record_i32($i0);
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    $i5 := $load.i64($M.0, $p4);
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i5, 24);
    call {:si_unique_call 485} {:cexpr "vmci_dg_size"} boogie_si_record_i64($i6);
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    $i7 := $ugt.i64($i6, 69632);
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} $p10 := vmci_ctx_get($i0);
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} $p14 := kmalloc(32, 208);
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i16, 0);
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p15, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p19, $p1);
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p15, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p20, $i6);
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p2);
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p21);
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_64 := $M.0;
    cmdloc_dummy_var_65 := $M.0;
    call {:si_unique_call 492} cmdloc_dummy_var_66 := $memcpy.i8(cmdloc_dummy_var_64, cmdloc_dummy_var_65, $p22, $p23, 8, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_66;
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p15, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} INIT_LIST_HEAD($p24);
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p10, $mul.ref(0, 304)), $mul.ref(64, 1));
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} spin_lock($p25);
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p10, $mul.ref(0, 304)), $mul.ref(48, 1));
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    $i27 := $load.i64($M.0, $p26);
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    $i28 := $add.i64($i27, $i6);
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    $i29 := $ugt.i64($i28, 139263);
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p15, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p10, $mul.ref(0, 304)), $mul.ref(24, 1));
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} list_add($p48, $p49);
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p10, $mul.ref(0, 304)), $mul.ref(40, 1));
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    $i52 := $add.i32($i51, 1);
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p10, $mul.ref(0, 304)), $mul.ref(40, 1));
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p53, $i52);
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p10, $mul.ref(0, 304)), $mul.ref(48, 1));
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    $i55 := $load.i64($M.0, $p54);
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    $i56 := $add.i64($i55, $i6);
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p10, $mul.ref(0, 304)), $mul.ref(48, 1));
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p57, $i56);
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} ctx_signal_notify($p10);
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 304)), $mul.ref(184, 1)), $mul.ref(0, 1));
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} __wake_up($p59, 3, 1, $0.ref);
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p10, $mul.ref(0, 304)), $mul.ref(64, 1));
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} spin_unlock($p60);
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 505} vmci_ctx_put($p10);
    goto SeqInstr_121, SeqInstr_122;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  SeqInstr_123:
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    $i61 := $trunc.i64.i32($i6);
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    $i9 := $i61;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  SeqInstr_121:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i29 == 1;
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $M.35 := $store.i32($M.35, $p30, 0);
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    $M.35 := $store.i32($M.35, $p31, 0);
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p2);
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    $i33 := $load.i64($M.0, $p32);
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p3);
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.35, $p34);
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 495} $i36 := vmci_handle_is_equal($i33, $i35);
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    $i37 := $zext.i1.i8($i36);
    call {:si_unique_call 496} {:cexpr "tmp___0"} boogie_si_record_i8($i37);
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i8.i1($i37);
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    $i39 := 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb18;

  $bb18:
    assume !($i40 == 1);
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p10, $mul.ref(0, 304)), $mul.ref(48, 1));
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    $i42 := $load.i64($M.0, $p41);
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    $i43 := $add.i64($i42, $i6);
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    $i44 := $ugt.i64($i43, 188415);
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i44 == 1;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p10, $mul.ref(0, 304)), $mul.ref(64, 1));
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} spin_unlock($p45);
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 498} vmci_ctx_put($p10);
    goto SeqInstr_118, SeqInstr_119;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  SeqInstr_120:
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p15);
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} kfree($p46);
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} vslice_dummy_var_214 := no_printk.ref.i32(.str.9, $i0);
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 19);
    goto $bb3;

  SeqInstr_118:
    assume !assertsPassed;
    return;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i40 == 1;
    goto $bb17;

  $bb13:
    assume $i38 == 1;
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    $i39 := 0;
    goto $bb15;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 490} vslice_dummy_var_213 := printk.ref(.str.8);
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} vmci_ctx_put($p10);
    goto SeqInstr_115, SeqInstr_116;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  SeqInstr_117:
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 3);
    goto $bb3;

  SeqInstr_115:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} vslice_dummy_var_212 := no_printk.ref.i32(.str.7, $i0);
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 2);
    goto $bb3;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 486} vslice_dummy_var_211 := no_printk.ref.i64(.str.6, $i6);
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 2);
    goto $bb3;
}



const list_add: ref;

axiom list_add == $sub.ref(0, 481233);

procedure list_add($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} __list_add($p0, $p1, $p3);
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    return;
}



const ctx_signal_notify: ref;

axiom ctx_signal_notify == $sub.ref(0, 482265);

procedure ctx_signal_notify($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation ctx_signal_notify($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(288, 1));
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p2, 1);
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    return;
}



const __wake_up: ref;

axiom __wake_up == $sub.ref(0, 483297);

procedure __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref);
  free requires assertsPassed;



implementation __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} {:cexpr "__wake_up:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 508} {:cexpr "__wake_up:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    return;
}



const __list_add: ref;

axiom __list_add == $sub.ref(0, 484329);

procedure __list_add($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __list_add($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    return;
}



const queue_work: ref;

axiom queue_work == $sub.ref(0, 485361);

procedure queue_work($p0: ref, $p1: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.36, $M.38, $M.40, $M.42;



implementation queue_work($p0: ref, $p1: ref) returns ($r: i1)
{
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 509} $i2 := ldv_queue_work_on_27(8192, $p0, $p1);
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 510} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ldv_queue_work_on_27: ref;

axiom ldv_queue_work_on_27 == $sub.ref(0, 486393);

procedure ldv_queue_work_on_27($i0: i32, $p1: ref, $p2: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.36, $M.38, $M.40, $M.42;



implementation ldv_queue_work_on_27($i0: i32, $p1: ref, $p2: ref) returns ($r: i1)
{
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $i6: i8;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} {:cexpr "ldv_queue_work_on_27:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} $i3 := queue_work_on($i0, $p1, $p2);
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 513} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i5);
    call {:si_unique_call 514} {:cexpr "ldv_func_res"} boogie_si_record_i8($i6);
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} activate_work_3($p2, 2);
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i6);
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const queue_work_on: ref;

axiom queue_work_on == $sub.ref(0, 487425);

procedure queue_work_on($i0: i32, $p1: ref, $p2: ref) returns ($r: i1);
  free requires assertsPassed;



implementation queue_work_on($i0: i32, $p1: ref, $p2: ref) returns ($r: i1)
{
  var $i3: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 516} {:cexpr "queue_work_on:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 1} true;
    call {:si_unique_call 517} $i3 := __VERIFIER_nondet_bool();
    call {:si_unique_call 518} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i3);
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const activate_work_3: ref;

axiom activate_work_3 == $sub.ref(0, 488457);

procedure activate_work_3($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.36, $M.38, $M.40, $M.42;



implementation activate_work_3($p0: ref, $i1: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} {:cexpr "activate_work_3:arg:state"} boogie_si_record_i32($i1);
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    $i2 := $M.36;
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i4 := $M.38;
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i6 := $M.40;
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i8 := $M.42;
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    $M.42 := $i1;
    call {:si_unique_call 523} {:cexpr "ldv_work_3_3"} boogie_si_record_i32($i1);
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume $i7 == 1;
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    $M.40 := $i1;
    call {:si_unique_call 522} {:cexpr "ldv_work_3_2"} boogie_si_record_i32($i1);
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    $M.38 := $i1;
    call {:si_unique_call 521} {:cexpr "ldv_work_3_1"} boogie_si_record_i32($i1);
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    $M.36 := $i1;
    call {:si_unique_call 520} {:cexpr "ldv_work_3_0"} boogie_si_record_i32($i1);
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __kmalloc: ref;

axiom __kmalloc == $sub.ref(0, 489489);

procedure __kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} {:cexpr "__kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 525} {:cexpr "__kmalloc:arg:t"} boogie_si_record_i32($i1);
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 526} $p2 := ldv_malloc($i0);
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_malloc: ref;

axiom ldv_malloc == $sub.ref(0, 490521);

procedure ldv_malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_malloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 527} {:cexpr "ldv_malloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 1} true;
    call {:si_unique_call 528} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 529} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 530} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 531} $p4 := malloc($i0);
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 1} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 1} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 1} true;
    call {:si_unique_call 532} __VERIFIER_assume($i7);
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    $p3 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb3;
}



const malloc: ref;

axiom malloc == $sub.ref(0, 491553);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 533} $r := $malloc($i0);
    return;
}



const event_deliver: ref;

axiom event_deliver == $sub.ref(0, 492585);

procedure event_deliver($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.44, $CurrAddr;



implementation event_deliver($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i64;
  var $i23: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $i45: i1;
  var $p24: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 534} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 537} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} rcu_read_lock___0();
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    $i8 := $zext.i32.i64($i7);
    $p9 := $add.ref($add.ref(subscriber_array, $mul.ref(0, 112)), $mul.ref($i8, 16));
    $p10 := $add.ref($add.ref($add.ref(subscriber_array, $mul.ref(0, 112)), $mul.ref($i8, 16)), $mul.ref(0, 1));
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $p11);
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p1);
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p2);
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} __read_once_size($p12, $p14, 8);
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p2);
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} $i17 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 541} {:cexpr "tmp"} boogie_si_record_i32($i17);
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p16);
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p18, $mul.ref($sub.ref(0, 24), 40));
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p18, $mul.ref($sub.ref(0, 24), 40)), $mul.ref(24, 1));
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p9);
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i21, $i22);
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 546} rcu_read_unlock___0();
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i23 == 1;
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    $p24 := $p19;
    goto $bb4;

  $bb4:
    call $p25, $p26, $p27, $i28, $p29, $p30, $p31, $p33, $p34, $p35, $p36, $p37, $p38, $p39, $i40, $p41, $p42, $p43, $i44, $i45, $p24 := event_deliver_loop_$bb4($p0, $p3, $p4, $i22, $p25, $p26, $p27, $i28, $p29, $p30, $p31, $p33, $p34, $p35, $p36, $p37, $p38, $p39, $i40, $p41, $p42, $p43, $i44, $i45, $p24);
    goto $bb4_last;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p24, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p24, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    call {:si_unique_call 542} devirtbounce.9($p26, $i28, $p29, $p31);
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p24, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, $p34);
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p3);
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p4);
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 543} __read_once_size($p35, $p37, 8);
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p4);
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} $i40 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 545} {:cexpr "tmp___0"} boogie_si_record_i32($i40);
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p39);
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($p41, $mul.ref($sub.ref(0, 24), 40));
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p41, $mul.ref($sub.ref(0, 24), 40)), $mul.ref(24, 1));
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p43);
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    $i45 := $ne.i64($i44, $i22);
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i45 == 1);
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i45 == 1;
    assume {:verifier.code 0} true;
    $p24 := $p42;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2429;
}



const rcu_read_lock___0: ref;

axiom rcu_read_lock___0 == $sub.ref(0, 493617);

procedure rcu_read_lock___0();
  free requires assertsPassed;



implementation rcu_read_lock___0()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 547} __rcu_read_lock___0();
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} rcu_lock_acquire(rcu_lock_map);
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 549} $i0 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 550} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i8.i1(1);
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 551} $i3 := rcu_is_watching();
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 552} {:cexpr "tmp___0"} boogie_si_record_i8($i4);
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i7 == 1;
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} lockdep_rcu_suspicious(.str.59, 849, .str.60);
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb6:
    assume $i5 == 1;
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb3;
}



const rcu_read_unlock___0: ref;

axiom rcu_read_unlock___0 == $sub.ref(0, 494649);

procedure rcu_read_unlock___0();
  free requires assertsPassed;



implementation rcu_read_unlock___0()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} $i0 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 555} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 559} __rcu_read_unlock___0();
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} rcu_lock_release(rcu_lock_map);
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i8.i1(1);
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} $i3 := rcu_is_watching();
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 557} {:cexpr "tmp___0"} boogie_si_record_i8($i4);
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i7 == 1;
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} lockdep_rcu_suspicious(.str.59, 900, .str.61);
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb6:
    assume $i5 == 1;
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb3;
}



const __rcu_read_unlock___0: ref;

axiom __rcu_read_unlock___0 == $sub.ref(0, 495681);

procedure __rcu_read_unlock___0();
  free requires assertsPassed;



implementation __rcu_read_unlock___0()
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 561} devirtbounce.5(0);
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} __preempt_count_sub___0(1);
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    return;
}



const __preempt_count_sub___0: ref;

axiom __preempt_count_sub___0 == $sub.ref(0, 496713);

procedure __preempt_count_sub___0($i0: i32);
  free requires assertsPassed;



implementation __preempt_count_sub___0($i0: i32)
{
  var $i1: i1;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} {:cexpr "__preempt_count_sub___0:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32(0, 1);
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32(0, $sub.i32(0, 1));
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32(0, $i0);
    call {:si_unique_call 566} devirtbounce.7(0, __preempt_count, $i3, __preempt_count);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i2 == 1;
    call {:si_unique_call 565} devirtbounce.6(0, __preempt_count, __preempt_count);
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i1 == 1;
    call {:si_unique_call 564} devirtbounce.6(0, __preempt_count, __preempt_count);
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __rcu_read_lock___0: ref;

axiom __rcu_read_lock___0 == $sub.ref(0, 497745);

procedure __rcu_read_lock___0();
  free requires assertsPassed;



implementation __rcu_read_lock___0()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 567} __preempt_count_add___0(1);
    call {:si_unique_call 568} devirtbounce.5(0);
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    return;
}



const __preempt_count_add___0: ref;

axiom __preempt_count_add___0 == $sub.ref(0, 498777);

procedure __preempt_count_add___0($i0: i32);
  free requires assertsPassed;



implementation __preempt_count_add___0($i0: i32)
{
  var $i1: i1;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 569} {:cexpr "__preempt_count_add___0:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32(0, 1);
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32(0, $sub.i32(0, 1));
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    call {:si_unique_call 572} devirtbounce.7(0, __preempt_count, $i0, __preempt_count);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i2 == 1;
    call {:si_unique_call 571} devirtbounce.6(0, __preempt_count, __preempt_count);
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i1 == 1;
    call {:si_unique_call 570} devirtbounce.6(0, __preempt_count, __preempt_count);
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vmci_guest_code_active: ref;

axiom vmci_guest_code_active == $sub.ref(0, 499809);

procedure vmci_guest_code_active() returns ($r: i1);
  free requires assertsPassed;



implementation vmci_guest_code_active() returns ($r: i1)
{
  var $i0: i32;
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} $i0 := atomic_read(vmci_num_guest_devices);
    call {:si_unique_call 574} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const vmci_get_context_id: ref;

axiom vmci_get_context_id == $sub.ref(0, 500841);

procedure vmci_get_context_id() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.44, $CurrAddr;



implementation vmci_get_context_id() returns ($r: i32)
{
  var $i0: i1;
  var $i1: i8;
  var $i2: i1;
  var $i3: i32;
  var $i5: i1;
  var $i6: i8;
  var $i7: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} $i0 := vmci_guest_code_active();
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    $i1 := $zext.i1.i8($i0);
    call {:si_unique_call 576} {:cexpr "tmp___1"} boogie_si_record_i8($i1);
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i8.i1($i1);
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 579} $i5 := vmci_host_code_active();
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i5);
    call {:si_unique_call 580} {:cexpr "tmp___0"} boogie_si_record_i8($i6);
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i6);
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    $i4 := 2;
    goto $bb3;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 577} $i3 := vmci_get_vm_context_id();
    call {:si_unique_call 578} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    $i4 := $i3;
    goto $bb3;
}



const vmci_ctx_exists: ref;

axiom vmci_ctx_exists == $sub.ref(0, 501873);

procedure vmci_ctx_exists($i0: i32) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation vmci_ctx_exists($i0: i32) returns ($r: i1)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $p15: ref;
  var $i19: i8;
  var $i32: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 582} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 584} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 585} {:cexpr "vmci_ctx_exists:arg:cid"} boogie_si_record_i32($i0);
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 586} rcu_read_lock();
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, ctx_list);
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $p5);
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p1);
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p2);
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} __read_once_size($p6, $p8, 8);
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p2);
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 588} $i11 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 589} {:cexpr "tmp"} boogie_si_record_i32($i11);
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p10);
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, $p2i.ref.i64(ctx_list));
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 590} rcu_read_unlock();
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i8.i1($i19);
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    $r := $i32;
    return;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    $p15 := $p10;
    goto $bb4;

  $bb4:
    call $p16, $i17, $i18, $p21, $p22, $p23, $p24, $p25, $p26, $p27, $i28, $p29, $i30, $i31, $p15 := vmci_ctx_exists_loop_$bb4($i0, $p3, $p4, $p16, $i17, $i18, $p21, $p22, $p23, $p24, $p25, $p26, $p27, $i28, $p29, $i30, $i31, $p15);
    goto $bb4_last;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 304)), $mul.ref(16, 1));
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, $i0);
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p15, $mul.ref(0, 304)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, $p22);
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p3);
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p4);
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} __read_once_size($p23, $p25, 8);
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p4);
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} $i28 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 593} {:cexpr "tmp___0"} boogie_si_record_i32($i28);
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p27);
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, $p2i.ref.i64(ctx_list));
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i31 == 1);
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    $p15 := $p27;
    goto $bb10_dummy;

  $bb6:
    assume $i18 == 1;
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    $i19 := 1;
    goto $bb8;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2569;
}



const rcu_read_lock: ref;

axiom rcu_read_lock == $sub.ref(0, 502905);

procedure rcu_read_lock();
  free requires assertsPassed;



implementation rcu_read_lock()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 594} __rcu_read_lock();
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 595} rcu_lock_acquire(rcu_lock_map);
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 596} $i0 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 597} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i8.i1(1);
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 598} $i3 := rcu_is_watching();
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 599} {:cexpr "tmp___0"} boogie_si_record_i8($i4);
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i7 == 1;
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 600} lockdep_rcu_suspicious(.str.59, 849, .str.60);
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb6:
    assume $i5 == 1;
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb3;
}



const rcu_read_unlock: ref;

axiom rcu_read_unlock == $sub.ref(0, 503937);

procedure rcu_read_unlock();
  free requires assertsPassed;



implementation rcu_read_unlock()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 601} $i0 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 602} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 606} __rcu_read_unlock();
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 607} rcu_lock_release(rcu_lock_map);
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i8.i1(1);
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} $i3 := rcu_is_watching();
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 604} {:cexpr "tmp___0"} boogie_si_record_i8($i4);
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i7 == 1;
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 605} lockdep_rcu_suspicious(.str.59, 900, .str.61);
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb6:
    assume $i5 == 1;
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb3;
}



const __rcu_read_unlock: ref;

axiom __rcu_read_unlock == $sub.ref(0, 504969);

procedure __rcu_read_unlock();
  free requires assertsPassed;



implementation __rcu_read_unlock()
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} devirtbounce.5(0);
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 609} __preempt_count_sub(1);
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    return;
}



const __preempt_count_sub: ref;

axiom __preempt_count_sub == $sub.ref(0, 506001);

procedure __preempt_count_sub($i0: i32);
  free requires assertsPassed;



implementation __preempt_count_sub($i0: i32)
{
  var $i1: i1;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} {:cexpr "__preempt_count_sub:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32(0, 1);
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32(0, $sub.i32(0, 1));
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32(0, $i0);
    call {:si_unique_call 613} devirtbounce.7(0, __preempt_count, $i3, __preempt_count);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i2 == 1;
    call {:si_unique_call 612} devirtbounce.6(0, __preempt_count, __preempt_count);
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i1 == 1;
    call {:si_unique_call 611} devirtbounce.6(0, __preempt_count, __preempt_count);
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __rcu_read_lock: ref;

axiom __rcu_read_lock == $sub.ref(0, 507033);

procedure __rcu_read_lock();
  free requires assertsPassed;



implementation __rcu_read_lock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 614} __preempt_count_add(1);
    call {:si_unique_call 615} devirtbounce.5(0);
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    return;
}



const __preempt_count_add: ref;

axiom __preempt_count_add == $sub.ref(0, 508065);

procedure __preempt_count_add($i0: i32);
  free requires assertsPassed;



implementation __preempt_count_add($i0: i32)
{
  var $i1: i1;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} {:cexpr "__preempt_count_add:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32(0, 1);
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32(0, $sub.i32(0, 1));
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    call {:si_unique_call 619} devirtbounce.7(0, __preempt_count, $i0, __preempt_count);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i2 == 1;
    call {:si_unique_call 618} devirtbounce.6(0, __preempt_count, __preempt_count);
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i1 == 1;
    call {:si_unique_call 617} devirtbounce.6(0, __preempt_count, __preempt_count);
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vmci_get_vm_context_id: ref;

axiom vmci_get_vm_context_id == $sub.ref(0, 509097);

procedure vmci_get_vm_context_id() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.44, $CurrAddr;



implementation vmci_get_vm_context_id() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var cmdloc_dummy_var_67: [ref]i8;
  var cmdloc_dummy_var_68: [ref]i8;
  var cmdloc_dummy_var_69: [ref]i8;
  var cmdloc_dummy_var_70: [ref]i8;
  var cmdloc_dummy_var_71: [ref]i8;
  var cmdloc_dummy_var_72: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 620} $p0 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 621} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    $i2 := $M.44;
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, $sub.i32(0, 1));
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i13 := $M.44;
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, 0);
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, 1);
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_67 := $M.0;
    cmdloc_dummy_var_68 := $M.0;
    call {:si_unique_call 622} cmdloc_dummy_var_69 := $memcpy.i8(cmdloc_dummy_var_67, cmdloc_dummy_var_68, $p7, $p8, 8, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_69;
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_70 := $M.0;
    cmdloc_dummy_var_71 := $M.0;
    call {:si_unique_call 623} cmdloc_dummy_var_72 := $memcpy.i8(cmdloc_dummy_var_70, cmdloc_dummy_var_71, $p10, VMCI_ANON_SRC_HANDLE___0, 8, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_72;
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p11, 0);
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 624} $i12 := vmci_send_datagram($p0);
    call {:si_unique_call 625} {:cexpr "tmp"} boogie_si_record_i32($i12);
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    $M.44 := $i12;
    call {:si_unique_call 626} {:cexpr "vm_context_id"} boogie_si_record_i32($i12);
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const atomic_read: ref;

axiom atomic_read == $sub.ref(0, 510129);

procedure atomic_read($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_read($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const vmci_handle_is_invalid: ref;

axiom vmci_handle_is_invalid == $sub.ref(0, 511161);

procedure vmci_handle_is_invalid($i0: i64) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.45, $M.20, $M.21, $CurrAddr;



implementation vmci_handle_is_invalid($i0: i64) returns ($r: i1)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i8;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 627} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    assume {:verifier.code 0} true;
    $M.45 := $store.i64($M.45, $p2, $i0);
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.45, $p3);
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    $i5 := $load.i64($M.4, VMCI_INVALID_HANDLE);
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 628} $i6 := vmci_handle_is_equal($i4, $i5);
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i6);
    call {:si_unique_call 629} {:cexpr "tmp"} boogie_si_record_i8($i7);
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i7);
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const hlist_del_init_rcu: ref;

axiom hlist_del_init_rcu == $sub.ref(0, 512193);

procedure hlist_del_init_rcu($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation hlist_del_init_rcu($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 630} $i1 := hlist_unhashed($p0);
    call {:si_unique_call 631} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 0);
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} __hlist_del($p0);
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, $0.ref);
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const synchronize_rcu: ref;

axiom synchronize_rcu == $sub.ref(0, 513225);

procedure synchronize_rcu();
  free requires assertsPassed;



implementation synchronize_rcu()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 633} synchronize_sched();
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    return;
}



const wait_for_completion: ref;

axiom wait_for_completion == $sub.ref(0, 514257);

procedure wait_for_completion($p0: ref);
  free requires assertsPassed;



implementation wait_for_completion($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    return;
}



const synchronize_sched: ref;

axiom synchronize_sched == $sub.ref(0, 515289);

procedure synchronize_sched();
  free requires assertsPassed;



implementation synchronize_sched()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    return;
}



const __hlist_del: ref;

axiom __hlist_del == $sub.ref(0, 516321);

procedure __hlist_del($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation __hlist_del($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, $p2);
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p2);
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $p4);
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_mutex_unlock_212: ref;

axiom ldv_mutex_unlock_212 == $sub.ref(0, 517353);

procedure ldv_mutex_unlock_212($p0: ref);
  free requires assertsPassed;
  modifies $M.46, assertsPassed;



implementation ldv_mutex_unlock_212($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 634} ldv_mutex_unlock_mutex_of_vmci_queue_kern_if($p0);
    goto SeqInstr_124, SeqInstr_125;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  SeqInstr_126:
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 635} mutex_unlock($p0);
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_124:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_mutex_of_vmci_queue_kern_if: ref;

axiom ldv_mutex_unlock_mutex_of_vmci_queue_kern_if == $sub.ref(0, 518385);

procedure ldv_mutex_unlock_mutex_of_vmci_queue_kern_if($p0: ref);
  free requires assertsPassed;
  modifies $M.46, assertsPassed;



implementation ldv_mutex_unlock_mutex_of_vmci_queue_kern_if($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    $i1 := $M.46;
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 2);
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 637} {:cexpr "ldv_mutex_mutex_of_vmci_queue_kern_if"} boogie_si_record_i32(1);
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 636} ldv_error();
    goto SeqInstr_127, SeqInstr_128;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  SeqInstr_129:
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_127:
    assume !assertsPassed;
    return;
}



const qp_release_pages: ref;

axiom qp_release_pages == $sub.ref(0, 519417);

procedure qp_release_pages($p0: ref, $i1: i64, $i2: i1);
  free requires assertsPassed;
  modifies $M.0;



implementation qp_release_pages($p0: ref, $i1: i64, $i2: i1)
{
  var $i3: i8;
  var $i4: i1;
  var $i6: i1;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $i11: i64;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $p15: ref;
  var $i16: i32;
  var $i17: i64;
  var $i18: i1;
  var $i5: i32;
  var vslice_dummy_var_215: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} {:cexpr "qp_release_pages:arg:num_pages"} boogie_si_record_i64($i1);
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 639} {:cexpr "qp_release_pages:arg:dirty"} boogie_si_record_i1($i2);
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    $i4 := $ult.i64(0, $i1);
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb4;

  $bb4:
    call $i6, $i7, $p8, $p9, $i11, $p12, $p13, $i14, $p15, $i16, $i17, $i18, $i5, vslice_dummy_var_215 := qp_release_pages_loop_$bb4($p0, $i1, $i3, $i6, $i7, $p8, $p9, $i11, $p12, $p13, $i14, $p15, $i16, $i17, $i18, $i5, vslice_dummy_var_215);
    goto $bb4_last;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i3);
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i5);
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p0, $mul.ref($i11, 8));
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 641} put_page($p13);
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i5);
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p0, $mul.ref($i14, 8));
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p15, $0.ref);
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    $i16 := $add.i32($i5, 1);
    call {:si_unique_call 642} {:cexpr "i"} boogie_si_record_i32($i16);
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    $i18 := $ult.i64($i17, $i1);
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i18 == 1);
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb9:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    $i5 := $i16;
    goto $bb9_dummy;

  $bb6:
    assume $i6 == 1;
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i5);
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p0, $mul.ref($i7, 8));
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 640} vslice_dummy_var_215 := set_page_dirty($p9);
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb9_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2752;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 520449);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const set_page_dirty: ref;

axiom set_page_dirty == $sub.ref(0, 521481);

procedure set_page_dirty($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation set_page_dirty($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 1} true;
    call {:si_unique_call 643} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 644} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const vunmap: ref;

axiom vunmap == $sub.ref(0, 522513);

procedure vunmap($p0: ref);
  free requires assertsPassed;



implementation vunmap($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_lock_211: ref;

axiom ldv_mutex_lock_211 == $sub.ref(0, 523545);

procedure ldv_mutex_lock_211($p0: ref);
  free requires assertsPassed;
  modifies $M.46, assertsPassed;



implementation ldv_mutex_lock_211($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} ldv_mutex_lock_mutex_of_vmci_queue_kern_if($p0);
    goto SeqInstr_130, SeqInstr_131;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  SeqInstr_132:
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} mutex_lock($p0);
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_130:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_mutex_of_vmci_queue_kern_if: ref;

axiom ldv_mutex_lock_mutex_of_vmci_queue_kern_if == $sub.ref(0, 524577);

procedure ldv_mutex_lock_mutex_of_vmci_queue_kern_if($p0: ref);
  free requires assertsPassed;
  modifies $M.46, assertsPassed;



implementation ldv_mutex_lock_mutex_of_vmci_queue_kern_if($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    $i1 := $M.46;
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 1);
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 648} {:cexpr "ldv_mutex_mutex_of_vmci_queue_kern_if"} boogie_si_record_i32(2);
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 647} ldv_error();
    goto SeqInstr_133, SeqInstr_134;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  SeqInstr_135:
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_133:
    assume !assertsPassed;
    return;
}



const mutex_lock: ref;

axiom mutex_lock == $sub.ref(0, 525609);

procedure mutex_lock($p0: ref);
  free requires assertsPassed;



implementation mutex_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    return;
}



const qp_list_find: ref;

axiom qp_list_find == $sub.ref(0, 526641);

procedure qp_list_find($p0: ref, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.47, $M.23, $M.20, $M.21, $CurrAddr;



implementation qp_list_find($p0: ref, $i1: i64) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i8;
  var $i8: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $i24: i8;
  var $i25: i1;
  var $p26: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $p17: ref;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 649} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    assume {:verifier.code 0} true;
    $M.47 := $store.i64($M.47, $p3, $i1);
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p2);
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    $i5 := $load.i64($M.47, $p4);
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 650} $i6 := vmci_handle_is_invalid___1($i5);
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i6);
    call {:si_unique_call 651} {:cexpr "tmp"} boogie_si_record_i8($i7);
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i7);
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p0);
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i14, $i15);
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p9 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    $r := $p9;
    return;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    $p17 := $p12;
    goto $bb8;

  $bb8:
    call $p18, $p19, $i20, $p21, $i22, $i23, $i24, $i25, $p26, $p28, $p29, $p30, $i31, $i32, $p17 := qp_list_find_loop_$bb8($p2, $i15, $p18, $p19, $i20, $p21, $i22, $i23, $i24, $i25, $p26, $p28, $p29, $p30, $i31, $i32, $p17);
    goto $bb8_last;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    $i20 := $load.i64($M.0, $p19);
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p2);
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    $i22 := $load.i64($M.47, $p21);
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} $i23 := vmci_handle_is_equal($i20, $i22);
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i8($i23);
    call {:si_unique_call 653} {:cexpr "tmp___0"} boogie_si_record_i8($i24);
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i8.i1($i24);
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    $p26 := $p17;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, $i15);
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i32 == 1);
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb13:
    assume $i32 == 1;
    assume {:verifier.code 0} true;
    $p17 := $p29;
    goto $bb13_dummy;

  $bb10:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    $p9 := $p26;
    goto $bb3;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    $p9 := $0.ref;
    goto $bb3;

  $bb13_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2815;
}



const vmci_handle_arr_has_entry: ref;

axiom vmci_handle_arr_has_entry == $sub.ref(0, 527673);

procedure vmci_handle_arr_has_entry($p0: ref, $i1: i64) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.48, $M.20, $M.21, $CurrAddr;



implementation vmci_handle_arr_has_entry($p0: ref, $i1: i64) returns ($r: i1)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $i15: i8;
  var $i16: i1;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $i7: i64;
  var $i17: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 654} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    assume {:verifier.code 0} true;
    $M.48 := $store.i64($M.48, $p3, $i1);
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    $i5 := $load.i64($M.0, $p4);
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    $i6 := $ugt.i64($i5, 0);
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb4;

  $bb4:
    call $p9, $p10, $i11, $p12, $i13, $i14, $i15, $i16, $i18, $i19, $i20, $i7 := vmci_handle_arr_has_entry_loop_$bb4($p0, $p2, $p4, $p9, $p10, $i11, $p12, $i13, $i14, $i15, $i16, $i18, $i19, $i20, $i7);
    goto $bb4_last;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(16, 1)), $mul.ref($i7, 8));
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.0, $p10);
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p2);
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.48, $p12);
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 655} $i14 := vmci_handle_is_equal($i11, $i13);
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i8($i14);
    call {:si_unique_call 656} {:cexpr "tmp"} boogie_si_record_i8($i15);
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i8.i1($i15);
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i18 := $add.i64($i7, 1);
    call {:si_unique_call 657} {:cexpr "i"} boogie_si_record_i64($i18);
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    $i19 := $load.i64($M.0, $p4);
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    $i20 := $ugt.i64($i19, $i18);
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i20 == 1);
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $i7 := $i18;
    goto $bb10_dummy;

  $bb6:
    assume $i16 == 1;
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    $i17 := 1;
    goto $bb8;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2843;
}



const ldv_mutex_lock_mutex_of_qp_list: ref;

axiom ldv_mutex_lock_mutex_of_qp_list == $sub.ref(0, 528705);

procedure ldv_mutex_lock_mutex_of_qp_list($p0: ref);
  free requires assertsPassed;
  modifies $M.28, assertsPassed;



implementation ldv_mutex_lock_mutex_of_qp_list($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    $i1 := $M.28;
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 1);
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.28 := 2;
    call {:si_unique_call 659} {:cexpr "ldv_mutex_mutex_of_qp_list"} boogie_si_record_i32(2);
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 658} ldv_error();
    goto SeqInstr_136, SeqInstr_137;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  SeqInstr_138:
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_136:
    assume !assertsPassed;
    return;
}



const vmci_handle_arr_create: ref;

axiom vmci_handle_arr_create == $sub.ref(0, 529737);

procedure vmci_handle_arr_create($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation vmci_handle_arr_create($i0: i64) returns ($r: ref)
{
  var $i1: i1;
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 660} {:cexpr "vmci_handle_arr_create:arg:capacity"} boogie_si_record_i64($i0);
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    $i1 := $eq.i64($i0, 0);
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $i0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 661} $i3 := handle_arr_calc_size($i2);
    call {:si_unique_call 662} {:cexpr "tmp"} boogie_si_record_i64($i3);
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 663} $p4 := kmalloc($i3, 32);
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p9, $i2);
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p10, 0);
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    $p8 := $p4;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    $p8 := $0.ref;
    goto $bb6;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    $i2 := 4;
    goto $bb3;
}



const vmci_handle_arr_append_entry: ref;

axiom vmci_handle_arr_append_entry == $sub.ref(0, 530769);

procedure vmci_handle_arr_append_entry($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation vmci_handle_arr_append_entry($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $i15: i64;
  var $i16: i64;
  var $i17: i64;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i64;
  var $p34: ref;
  var cmdloc_dummy_var_73: [ref]i8;
  var cmdloc_dummy_var_74: [ref]i8;
  var cmdloc_dummy_var_75: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 664} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p3, $i1);
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p0);
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.0, $p5);
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.0, $p7);
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $i9 := $uge.i64($i6, $i8);
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 665} $i12 := ldv__builtin_expect($i11, 0);
    call {:si_unique_call 666} {:cexpr "tmp___1"} boogie_si_record_i64($i12);
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $p24 := $p4;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    $i26 := $load.i64($M.0, $p25);
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p24, $mul.ref(0, 16)), $mul.ref(16, 1)), $mul.ref($i26, 8));
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p2);
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_73 := $M.0;
    cmdloc_dummy_var_74 := $M.0;
    call {:si_unique_call 671} cmdloc_dummy_var_75 := $memcpy.i8(cmdloc_dummy_var_73, cmdloc_dummy_var_74, $p29, $p30, 8, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_75;
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p24, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    $i32 := $load.i64($M.0, $p31);
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    $i33 := $add.i64($i32, 1);
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p24, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p34, $i33);
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    $i15 := $load.i64($M.0, $p14);
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    $i16 := $mul.i64($i15, 2);
    call {:si_unique_call 667} {:cexpr "new_capacity"} boogie_si_record_i64($i16);
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 668} $i17 := handle_arr_calc_size($i16);
    call {:si_unique_call 669} {:cexpr "tmp"} boogie_si_record_i64($i17);
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p4);
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} $p19 := krealloc($p18, $i17, 32);
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    $i22 := $eq.i64($i21, 0);
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p20, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p23, $i16);
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p0, $p19);
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    $p24 := $p19;
    goto $bb7;

  $bb3:
    assume $i22 == 1;
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const vmci_handle_arr_get_size: ref;

axiom vmci_handle_arr_get_size == $sub.ref(0, 531801);

procedure vmci_handle_arr_get_size($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation vmci_handle_arr_get_size($p0: ref) returns ($r: i64)
{
  var $p1: ref;
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.0, $p1);
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const handle_arr_calc_size: ref;

axiom handle_arr_calc_size == $sub.ref(0, 532833);

procedure handle_arr_calc_size($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation handle_arr_calc_size($i0: i64) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 672} {:cexpr "handle_arr_calc_size:arg:capacity"} boogie_si_record_i64($i0);
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    $i1 := $add.i64($i0, 2);
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    $i2 := $mul.i64($i1, 8);
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const krealloc: ref;

axiom krealloc == $sub.ref(0, 533865);

procedure krealloc($p0: ref, $i1: i64, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation krealloc($p0: ref, $i1: i64, $i2: i32) returns ($r: ref)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 673} {:cexpr "krealloc:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 674} {:cexpr "krealloc:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 675} $p3 := external_alloc();
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 534897);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 1} true;
    call {:si_unique_call 676} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 677} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const vmci_is_context_owner: ref;

axiom vmci_is_context_owner == $sub.ref(0, 535929);

procedure vmci_is_context_owner($i0: i32, $i1: i32) returns ($r: i1);



const uid_eq: ref;

axiom uid_eq == $sub.ref(0, 536961);

procedure uid_eq($i0: i32, $i1: i32) returns ($r: i1);



const __kuid_val: ref;

axiom __kuid_val == $sub.ref(0, 537993);

procedure __kuid_val($i0: i32) returns ($r: i32);



const vmci_datagram_create_handle_priv: ref;

axiom vmci_datagram_create_handle_priv == $sub.ref(0, 539025);

procedure vmci_datagram_create_handle_priv($i0: i32, $i1: i32, $i2: i32, $p3: ref, $p4: ref, $p5: ref) returns ($r: i32);



const dg_create_handle: ref;

axiom dg_create_handle == $sub.ref(0, 540057);

procedure dg_create_handle($i0: i32, $i1: i32, $i2: i32, $p3: ref, $p4: ref, $p5: ref) returns ($r: i32);



const vmci_resource_add: ref;

axiom vmci_resource_add == $sub.ref(0, 541089);

procedure vmci_resource_add($p0: ref, $i1: i32, $i2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.32, $M.33, $M.55, $CurrAddr;



implementation vmci_resource_add($p0: ref, $i1: i32, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i32;
  var $p32: ref;
  var $i33: i64;
  var $p34: ref;
  var $i15: i32;
  var cmdloc_dummy_var_76: [ref]i8;
  var cmdloc_dummy_var_77: [ref]i8;
  var cmdloc_dummy_var_78: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 678} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p4, $i2);
    call {:si_unique_call 679} {:cexpr "vmci_resource_add:arg:resource_type___0"} boogie_si_record_i32($i1);
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 680} spin_lock(vmci_resource_table);
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, $sub.i32(0, 1));
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p3);
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    $i17 := $load.i64($M.0, $p16);
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 682} $p18 := vmci_resource_lookup($i17, $i1);
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(0, 1));
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p3);
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_76 := $M.0;
    cmdloc_dummy_var_77 := $M.0;
    call {:si_unique_call 684} cmdloc_dummy_var_78 := $memcpy.i8(cmdloc_dummy_var_76, cmdloc_dummy_var_77, $p22, $p23, 8, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_78;
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(8, 1));
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, $i1);
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(16, 1));
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 685} INIT_HLIST_NODE($p25);
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(32, 1));
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 686} kref_init($p26);
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(40, 1));
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 687} init_completion($p27);
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(0, 1));
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.0, $p29);
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} $i31 := vmci_resource_hash($i30);
    call {:si_unique_call 689} {:cexpr "idx"} boogie_si_record_i32($i31);
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(16, 1));
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    $i33 := $zext.i32.i64($i31);
    $p34 := $add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref($i33, 8));
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 690} hlist_add_head_rcu($p32, $p34);
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} spin_unlock(vmci_resource_table);
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb8:
    assume $i20 == 1;
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 22);
    goto $bb5;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} $i10 := vmci_resource_find_id($i9, $i1);
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, $i10);
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, $sub.i32(0, 1));
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb3:
    assume $i14 == 1;
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 8);
    goto $bb5;
}



const vmci_resource_handle: ref;

axiom vmci_resource_handle == $sub.ref(0, 542121);

procedure vmci_resource_handle($p0: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation vmci_resource_handle($p0: ref) returns ($r: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var cmdloc_dummy_var_79: [ref]i8;
  var cmdloc_dummy_var_80: [ref]i8;
  var cmdloc_dummy_var_81: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(0, 1));
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p2);
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_79 := $M.0;
    cmdloc_dummy_var_80 := $M.0;
    call {:si_unique_call 692} cmdloc_dummy_var_81 := $memcpy.i8(cmdloc_dummy_var_79, cmdloc_dummy_var_80, $p3, $p4, 8, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_81;
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p1);
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.0, $p5);
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const vmci_resource_find_id: ref;

axiom vmci_resource_find_id == $sub.ref(0, 543153);

procedure vmci_resource_find_id($i0: i32, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.55, $M.32, $M.33, $M.0, $CurrAddr;



implementation vmci_resource_find_id($i0: i32, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $i21: i32;
  var $i23: i1;
  var $i22: i32;
  var cmdloc_dummy_var_82: [ref]i8;
  var cmdloc_dummy_var_83: [ref]i8;
  var cmdloc_dummy_var_84: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 695} {:cexpr "vmci_resource_find_id:arg:context_id"} boogie_si_record_i32($i0);
    call {:si_unique_call 696} {:cexpr "vmci_resource_find_id:arg:resource_type___0"} boogie_si_record_i32($i1);
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    $i4 := 1024;
    goto $bb1;

  $bb1:
    call $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $p12, $p13, $p14, $p15, $p16, $i17, $p18, $i19, $i20, $i21, $i23, cmdloc_dummy_var_82, cmdloc_dummy_var_83, cmdloc_dummy_var_84 := vmci_resource_find_id_loop_$bb1($i0, $i1, $p2, $p3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $p12, $p13, $p14, $p15, $p16, $i17, $p18, $i19, $i20, $i21, $i23, cmdloc_dummy_var_82, cmdloc_dummy_var_83, cmdloc_dummy_var_84);
    goto $bb1_last;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    $i5 := $add.i32($i4, 1);
    call {:si_unique_call 697} {:cexpr "resource_id"} boogie_si_record_i32($i5);
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, $sub.i32(0, 1));
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 699} {:cexpr "tmp"} boogie_si_record_i64($i9);
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := $i5;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    $M.55 := $store.i32($M.55, $p12, $i0);
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    $M.55 := $store.i32($M.55, $p13, $i4);
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p2);
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p3);
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_82 := $M.55;
    cmdloc_dummy_var_83 := $M.55;
    call {:si_unique_call 700} cmdloc_dummy_var_84 := $memcpy.i8(cmdloc_dummy_var_82, cmdloc_dummy_var_83, $p14, $p15, 8, $zext.i32.i64(4), 0 == 1);
    $M.55 := cmdloc_dummy_var_84;
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p2);
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    $i17 := $load.i64($M.55, $p16);
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 701} $p18 := vmci_resource_lookup($i17, $i1);
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    $i20 := $eq.i64($i19, 0);
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    $i21 := $i4;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i11, 1024);
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32(0, 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    $r := $i22;
    return;

  $bb9:
    assume $i23 == 1;
    assume {:verifier.code 0} true;
    $i4 := $i11;
    goto $bb9_dummy;

  $bb5:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    $i22 := $i21;
    goto $bb7;

  $bb2:
    assume $i10 == 1;
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    $i11 := 1024;
    goto $bb4;

  $bb9_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3010;
}



const INIT_HLIST_NODE: ref;

axiom INIT_HLIST_NODE == $sub.ref(0, 544185);

procedure INIT_HLIST_NODE($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation INIT_HLIST_NODE($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $0.ref);
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $0.ref);
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    return;
}



const kref_init: ref;

axiom kref_init == $sub.ref(0, 545217);

procedure kref_init($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation kref_init($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 702} atomic_set($p1, 1);
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    return;
}



const init_completion: ref;

axiom init_completion == $sub.ref(0, 546249);

procedure init_completion($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation init_completion($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 703} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 0);
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(8, 1));
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 704} __init_waitqueue_head($p3, .str.180, $p1);
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    return;
}



const hlist_add_head_rcu: ref;

axiom hlist_add_head_rcu == $sub.ref(0, 547281);

procedure hlist_add_head_rcu($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation hlist_add_head_rcu($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $i7: i1;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, $p3);
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, $p1);
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1(0);
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call {:si_unique_call 706} devirtbounce.5(0);
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, $p0);
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p3);
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, $p0);
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 705} __compiletime_assert_402();
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __compiletime_assert_402: ref;

axiom __compiletime_assert_402 == $sub.ref(0, 548313);

procedure __compiletime_assert_402();
  free requires assertsPassed;



implementation __compiletime_assert_402()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    return;
}



const __init_waitqueue_head: ref;

axiom __init_waitqueue_head == $sub.ref(0, 549345);

procedure __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    return;
}



const atomic_set: ref;

axiom atomic_set == $sub.ref(0, 550377);

procedure atomic_set($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation atomic_set($p0: ref, $i1: i32)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 707} {:cexpr "atomic_set:arg:i"} boogie_si_record_i32($i1);
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i1);
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    return;
}



const vmci_datagram_create_handle: ref;

axiom vmci_datagram_create_handle == $sub.ref(0, 551409);

procedure vmci_datagram_create_handle($i0: i32, $i1: i32, $p2: ref, $p3: ref, $p4: ref) returns ($r: i32);



const vmci_datagram_destroy_handle: ref;

axiom vmci_datagram_destroy_handle == $sub.ref(0, 552441);

procedure vmci_datagram_destroy_handle($i0: i64) returns ($r: i32);



const vmci_datagram_send: ref;

axiom vmci_datagram_send == $sub.ref(0, 553473);

procedure vmci_datagram_send($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.29, $M.0, $CurrAddr, $M.34, $M.30, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.31, $M.87, $M.69, $M.35, $M.20, $M.21, $M.44, $M.32, $M.108, $M.110, $M.112, $M.114, $M.70, $M.33, $M.2, $M.3, $M.109, $M.111, $M.113, $M.115, assertsPassed, $M.6, $M.13, $M.18, $M.19, $M.36, $M.38, $M.40, $M.42, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.45, $M.48, $M.47, $M.89, $M.46, $M.90, $M.86, $M.91;



implementation vmci_datagram_send($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $i4: i32;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 708} $i4 := vmci_datagram_dispatch($sub.i32(0, 1), $p0, 0);
    goto SeqInstr_139, SeqInstr_140;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  SeqInstr_141:
    call {:si_unique_call 709} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $i3 := $i4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  SeqInstr_139:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32(0, 2);
    goto $bb3;
}



const vmci_doorbell_create: ref;

axiom vmci_doorbell_create == $sub.ref(0, 554505);

procedure vmci_doorbell_create($p0: ref, $i1: i32, $i2: i32, $p3: ref, $p4: ref) returns ($r: i32);



const vmci_handle_is_invalid___0: ref;

axiom vmci_handle_is_invalid___0 == $sub.ref(0, 555537);

procedure vmci_handle_is_invalid___0($i0: i64) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.58, $M.20, $M.21, $CurrAddr;



implementation vmci_handle_is_invalid___0($i0: i64) returns ($r: i1)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i8;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 710} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    assume {:verifier.code 0} true;
    $M.58 := $store.i64($M.58, $p2, $i0);
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.58, $p3);
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    $i5 := $load.i64($M.0, VMCI_INVALID_HANDLE___0);
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 711} $i6 := vmci_handle_is_equal($i4, $i5);
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i6);
    call {:si_unique_call 712} {:cexpr "tmp"} boogie_si_record_i8($i7);
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i7);
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const dbell_delayed_dispatch: ref;

axiom dbell_delayed_dispatch == $sub.ref(0, 556569);

procedure dbell_delayed_dispatch($p0: ref);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.31, $M.87, $M.6, $M.0, $M.13, $M.20, $M.21, $M.18, $M.19, $M.69, $M.70, $CurrAddr, $M.23, $M.24, $M.25, $M.26, $M.27, $M.108, $M.110, $M.112, $M.114, $M.28, $M.33, assertsPassed, $M.29, $M.45, $M.48, $M.47, $M.89, $M.109, $M.111, $M.113, $M.115, $M.34, $M.30, $M.35, $M.46, $M.90, $M.86, $M.91, $M.44, $M.32, $M.36, $M.38, $M.40, $M.42;



implementation dbell_delayed_dispatch($p0: ref)
{
  var $p1: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var vslice_dummy_var_216: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 152), 264)), $mul.ref(232, 1));
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 152), 264)), $mul.ref(240, 1));
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    call {:si_unique_call 713} devirtbounce.10($p4, $p6);
    goto SeqInstr_142, SeqInstr_143;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  SeqInstr_144:
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 152), 264)), $mul.ref(0, 1));
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 714} vslice_dummy_var_216 := vmci_resource_put($p7);
    goto SeqInstr_145, SeqInstr_146;

  SeqInstr_146:
    assume assertsPassed;
    goto SeqInstr_147;

  SeqInstr_147:
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_145:
    assume !assertsPassed;
    return;

  SeqInstr_142:
    assume !assertsPassed;
    return;
}



const dbell_index_table_add: ref;

axiom dbell_index_table_add == $sub.ref(0, 557601);

procedure dbell_index_table_add($p0: ref);



const dbell_link: ref;

axiom dbell_link == $sub.ref(0, 558633);

procedure dbell_link($i0: i64, $i1: i32) returns ($r: i32);



const dbell_index_table_remove: ref;

axiom dbell_index_table_remove == $sub.ref(0, 559665);

procedure dbell_index_table_remove($p0: ref);



const spin_lock_bh: ref;

axiom spin_lock_bh == $sub.ref(0, 560697);

procedure spin_lock_bh($p0: ref);



const hlist_del_init: ref;

axiom hlist_del_init == $sub.ref(0, 561729);

procedure hlist_del_init($p0: ref);



const dbell_index_table_find: ref;

axiom dbell_index_table_find == $sub.ref(0, 562761);

procedure dbell_index_table_find($i0: i32) returns ($r: ref);



const spin_unlock_bh: ref;

axiom spin_unlock_bh == $sub.ref(0, 563793);

procedure spin_unlock_bh($p0: ref);



const _raw_spin_unlock_bh: ref;

axiom _raw_spin_unlock_bh == $sub.ref(0, 564825);

procedure _raw_spin_unlock_bh($p0: ref);



const _raw_spin_lock_bh: ref;

axiom _raw_spin_lock_bh == $sub.ref(0, 565857);

procedure _raw_spin_lock_bh($p0: ref);



const hlist_add_head: ref;

axiom hlist_add_head == $sub.ref(0, 566889);

procedure hlist_add_head($p0: ref, $p1: ref);



const vmci_doorbell_destroy: ref;

axiom vmci_doorbell_destroy == $sub.ref(0, 567921);

procedure vmci_doorbell_destroy($i0: i64) returns ($r: i32);



const dbell_unlink: ref;

axiom dbell_unlink == $sub.ref(0, 568953);

procedure dbell_unlink($i0: i64) returns ($r: i32);



const vmci_doorbell_notify: ref;

axiom vmci_doorbell_notify == $sub.ref(0, 569985);

procedure vmci_doorbell_notify($i0: i64, $i1: i32) returns ($r: i32);



const vmci_ctx_notify_dbell: ref;

axiom vmci_ctx_notify_dbell == $sub.ref(0, 571017);

procedure vmci_ctx_notify_dbell($i0: i32, $i1: i64, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.65, $M.45, $M.20, $M.21, $M.0, $M.48, $M.67, $M.30, $M.66, $M.68, $M.58, $CurrAddr, $M.32, $M.2, $M.3, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.31, $M.87, $M.33, $M.6, $M.13, $M.18, $M.19, $M.69, $M.70, $M.36, $M.38, $M.40, $M.42, $M.23, $M.24, $M.25, $M.26, $M.27, $M.108, $M.110, $M.112, $M.114, $M.28, assertsPassed, $M.29, $M.47, $M.89, $M.109, $M.111, $M.113, $M.115, $M.34, $M.35, $M.46, $M.90, $M.86, $M.91, $M.44;



implementation vmci_ctx_notify_dbell($i0: i32, $i1: i64, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i9: i8;
  var $i10: i1;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $i18: i32;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $i32: i32;
  var $p35: ref;
  var $i36: i64;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $i40: i32;
  var $p41: ref;
  var $i42: i32;
  var $i44: i1;
  var $i45: i1;
  var $i46: i32;
  var $i47: i32;
  var $i48: i32;
  var $i49: i1;
  var $i50: i8;
  var $i51: i1;
  var $p52: ref;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $i56: i64;
  var $i57: i32;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i64;
  var $i64: i1;
  var $i65: i8;
  var $i66: i1;
  var $i67: i32;
  var $i68: i1;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i64;
  var $i74: i1;
  var $i75: i8;
  var $i76: i1;
  var $i77: i32;
  var $i78: i1;
  var $p79: ref;
  var $p80: ref;
  var $i81: i64;
  var $p83: ref;
  var $i69: i32;
  var $p84: ref;
  var $i58: i32;
  var $i34: i32;
  var $i11: i32;
  var vslice_dummy_var_217: i32;
  var vslice_dummy_var_218: i32;
  var vslice_dummy_var_219: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 715} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 716} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p3);
    assume {:verifier.code 0} true;
    $M.65 := $store.i64($M.65, $p5, $i1);
    call {:si_unique_call 717} {:cexpr "vmci_ctx_notify_dbell:arg:src_cid"} boogie_si_record_i32($i0);
    call {:si_unique_call 718} {:cexpr "vmci_ctx_notify_dbell:arg:src_priv_flags"} boogie_si_record_i32($i2);
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p3);
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.65, $p6);
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 719} $i8 := vmci_handle_is_invalid($i7);
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i8($i8);
    call {:si_unique_call 720} {:cexpr "tmp"} boogie_si_record_i8($i9);
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1($i9);
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.65, $p12);
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} $p14 := vmci_ctx_get($i13);
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.65, $p20);
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, $i0);
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.65, $p52);
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i53, 2);
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i54 == 1);
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p14, $mul.ref(0, 304)), $mul.ref(64, 1));
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 734} spin_lock($p59);
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p14, $mul.ref(0, 304)), $mul.ref(144, 1));
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p3);
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    $i63 := $load.i64($M.65, $p62);
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 735} $i64 := vmci_handle_arr_has_entry($p61, $i63);
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    $i65 := $zext.i1.i8($i64);
    call {:si_unique_call 736} {:cexpr "tmp___3"} boogie_si_record_i8($i65);
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    $i66 := $trunc.i8.i1($i65);
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    $i67 := 1;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    $i68 := $ne.i32($i67, 0);
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    assume {:branchcond $i68} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i68 == 1);
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p14, $mul.ref(0, 304)), $mul.ref(152, 1));
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.0, $p70);
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p3);
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    $i73 := $load.i64($M.65, $p72);
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 737} $i74 := vmci_handle_arr_has_entry($p71, $i73);
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    $i75 := $zext.i1.i8($i74);
    call {:si_unique_call 738} {:cexpr "tmp___1"} boogie_si_record_i8($i75);
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    $i76 := $trunc.i8.i1($i75);
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    assume {:branchcond $i76} true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    $i77 := 1;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    $i78 := $ne.i32($i77, 0);
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    assume {:branchcond $i78} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $i69 := 0;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p14, $mul.ref(0, 304)), $mul.ref(64, 1));
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} spin_unlock($p84);
    assume {:verifier.code 0} true;
    $i58 := $i69;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    $i34 := $i58;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 724} vmci_ctx_put($p14);
    goto SeqInstr_148, SeqInstr_149;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  SeqInstr_150:
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $i11 := $i34;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  SeqInstr_148:
    assume !assertsPassed;
    return;

  $bb46:
    assume $i78 == 1;
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p14, $mul.ref(0, 304)), $mul.ref(152, 1));
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    $p80 := $bitcast.ref.ref($p3);
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    $i81 := $load.i64($M.65, $p80);
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 740} vmci_handle_arr_append_entry($p79, $i81);
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} ctx_signal_notify($p14);
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($add.ref($p14, $mul.ref(0, 304)), $mul.ref(184, 1)), $mul.ref(0, 1));
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 742} __wake_up($p83, 3, 1, $0.ref);
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb43:
    assume $i76 == 1;
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    $i77 := 0;
    goto $bb45;

  $bb40:
    assume $i68 == 1;
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    $i69 := $sub.i32(0, 21);
    goto $bb42;

  $bb37:
    assume $i66 == 1;
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    $i67 := 0;
    goto $bb39;

  $bb34:
    assume $i54 == 1;
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p3);
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    $i56 := $load.i64($M.65, $p55);
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 732} $i57 := vmci_dbell_host_context_notify($i0, $i56);
    goto SeqInstr_157, SeqInstr_158;

  SeqInstr_158:
    assume assertsPassed;
    goto SeqInstr_159;

  SeqInstr_159:
    call {:si_unique_call 733} {:cexpr "result"} boogie_si_record_i32($i57);
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    $i58 := $i57;
    goto $bb36;

  SeqInstr_157:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i22 == 1;
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i0, $sub.i32(0, 1));
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p3);
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    $i36 := $load.i64($M.65, $p35);
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 725} $i37 := vmci_dbell_get_priv_flags($i36, $p4);
    goto SeqInstr_151, SeqInstr_152;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  SeqInstr_153:
    call {:si_unique_call 726} {:cexpr "result"} boogie_si_record_i32($i37);
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    $i38 := $slt.i32($i37, 0);
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i0, 2);
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb26;

  $bb26:
    assume !($i44 == 1);
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i2, 0);
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    $i47 := $i2;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.66, $p4);
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} $i49 := vmci_deny_interaction($i47, $i48);
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $i50 := $zext.i1.i8($i49);
    call {:si_unique_call 731} {:cexpr "tmp___0"} boogie_si_record_i8($i50);
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i8.i1($i50);
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb30:
    assume $i51 == 1;
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    $i34 := $sub.i32(0, 7);
    goto $bb19;

  $bb27:
    assume {:verifier.code 0} true;
    assume $i45 == 1;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 728} $i46 := vmci_context_get_priv_flags($i0);
    goto SeqInstr_154, SeqInstr_155;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  SeqInstr_156:
    call {:si_unique_call 729} {:cexpr "src_priv_flags"} boogie_si_record_i32($i46);
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    $i47 := $i46;
    goto $bb29;

  SeqInstr_154:
    assume !assertsPassed;
    return;

  $bb24:
    assume {:verifier.code 0} true;
    assume $i44 == 1;
    goto $bb25;

  $bb21:
    assume $i38 == 1;
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.65, $p39);
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.65, $p41);
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 727} vslice_dummy_var_219 := printk.ref.i32.i32(.str.17, $i40, $i42);
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    $i34 := $i37;
    goto $bb19;

  SeqInstr_151:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i23 == 1;
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    $i24 := $ugt.i32($i0, 2);
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb12;

  $bb13:
    assume $i24 == 1;
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.65, $p25);
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, $sub.i32(0, 1));
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb12;

  $bb15:
    assume $i27 == 1;
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.65, $p28);
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    $i30 := $ugt.i32($i29, 2);
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb12;

  $bb17:
    assume $i30 == 1;
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.65, $p31);
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 723} vslice_dummy_var_218 := no_printk.ref.i32.i32(.str.16, $i0, $i32);
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    $i34 := $sub.i32(0, 10);
    goto $bb19;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.65, $p17);
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 722} vslice_dummy_var_217 := no_printk.ref.i32(.str.7, $i18);
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 21);
    goto $bb3;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 2);
    goto $bb3;
}



const dbell_notify_as_guest: ref;

axiom dbell_notify_as_guest == $sub.ref(0, 572049);

procedure dbell_notify_as_guest($i0: i64, $i1: i32) returns ($r: i32);



const vmci_dbell_get_priv_flags: ref;

axiom vmci_dbell_get_priv_flags == $sub.ref(0, 573081);

procedure vmci_dbell_get_priv_flags($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.67, $M.30, $M.66, $M.32, $M.0, $CurrAddr, $M.33, $M.2, $M.3, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.31, $M.87, $M.6, $M.13, $M.20, $M.21, $M.18, $M.19, $M.69, $M.70, $M.23, $M.24, $M.25, $M.26, $M.27, $M.108, $M.110, $M.112, $M.114, $M.28, assertsPassed, $M.29, $M.45, $M.48, $M.47, $M.89, $M.109, $M.111, $M.113, $M.115, $M.34, $M.35, $M.46, $M.90, $M.86, $M.91, $M.44, $M.36, $M.38, $M.40, $M.42;



implementation vmci_dbell_get_priv_flags($i0: i64, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i64;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $i9: i32;
  var vslice_dummy_var_220: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 743} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    assume {:verifier.code 0} true;
    $M.67 := $store.i64($M.67, $p3, $i0);
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p1);
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.67, $p6);
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, $sub.i32(0, 1));
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.67, $p10);
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 2);
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i12 == 1);
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.67, $p22);
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i24 == 1);
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.67, $p25);
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} $i27 := vmci_context_get_priv_flags($i26);
    goto SeqInstr_163, SeqInstr_164;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  SeqInstr_165:
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    $M.66 := $store.i32($M.66, $p1, $i27);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  SeqInstr_163:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i24 == 1;
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 2);
    goto $bb6;

  $bb8:
    assume $i12 == 1;
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p2);
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.67, $p13);
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} $p15 := vmci_resource_by_handle($i14, 4);
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i16, 0);
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p15);
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 264)), $mul.ref(252, 1));
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    $M.66 := $store.i32($M.66, $p1, $i20);
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} vslice_dummy_var_220 := vmci_resource_put($p15);
    goto SeqInstr_160, SeqInstr_161;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  SeqInstr_162:
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_160:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i17 == 1;
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 21);
    goto $bb6;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 2);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const vmci_dbell_host_context_notify: ref;

axiom vmci_dbell_host_context_notify == $sub.ref(0, 574113);

procedure vmci_dbell_host_context_notify($i0: i32, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.68, $M.58, $M.20, $M.21, $M.30, $M.32, $M.2, $M.3, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.31, $M.87, $CurrAddr, $M.33, $M.0, $M.6, $M.13, $M.18, $M.19, $M.69, $M.70, $M.36, $M.38, $M.40, $M.42, $M.23, $M.24, $M.25, $M.26, $M.27, $M.108, $M.110, $M.112, $M.114, $M.28, assertsPassed, $M.29, $M.45, $M.48, $M.47, $M.89, $M.109, $M.111, $M.113, $M.115, $M.34, $M.35, $M.46, $M.90, $M.86, $M.91, $M.44;



implementation vmci_dbell_host_context_notify($i0: i32, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i8;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $p15: ref;
  var $i16: i64;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $i23: i32;
  var $p25: ref;
  var $p26: ref;
  var $i27: i8;
  var $i28: i1;
  var $p29: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i14: i32;
  var vslice_dummy_var_221: i32;
  var vslice_dummy_var_222: i32;
  var vslice_dummy_var_223: i1;
  var vslice_dummy_var_224: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 747} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    assume {:verifier.code 0} true;
    $M.68 := $store.i64($M.68, $p3, $i1);
    call {:si_unique_call 748} {:cexpr "vmci_dbell_host_context_notify:arg:src_cid"} boogie_si_record_i32($i0);
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p2);
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    $i5 := $load.i64($M.68, $p4);
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 749} $i6 := vmci_handle_is_invalid___0($i5);
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i6);
    call {:si_unique_call 750} {:cexpr "tmp"} boogie_si_record_i8($i7);
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i7);
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p2);
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.68, $p15);
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 752} $p17 := vmci_resource_by_handle($i16, 4);
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    $i19 := $eq.i64($i18, 0);
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p17);
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 264)), $mul.ref(256, 1));
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.0, $p26);
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i8.i1($i27);
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i28 == 1);
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p25, $mul.ref(0, 264)), $mul.ref(232, 1));
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p25, $mul.ref(0, 264)), $mul.ref(240, 1));
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    call {:si_unique_call 755} devirtbounce.10($p32, $p34);
    goto SeqInstr_166, SeqInstr_167;

  SeqInstr_167:
    assume assertsPassed;
    goto SeqInstr_168;

  SeqInstr_168:
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} vslice_dummy_var_224 := vmci_resource_put($p17);
    goto SeqInstr_169, SeqInstr_170;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  SeqInstr_171:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  SeqInstr_169:
    assume !assertsPassed;
    return;

  SeqInstr_166:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i28 == 1;
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p25, $mul.ref(0, 264)), $mul.ref(152, 1));
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 754} vslice_dummy_var_223 := schedule_work___0($p29);
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i19 == 1;
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.68, $p20);
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.68, $p22);
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 753} vslice_dummy_var_222 := no_printk.ref.i32.i32(.str.26, $i21, $i23);
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 21);
    goto $bb3;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.68, $p9);
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.68, $p11);
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 751} vslice_dummy_var_221 := no_printk.ref.i32.i32(.str.25, $i10, $i12);
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 2);
    goto $bb3;
}



const schedule_work___0: ref;

axiom schedule_work___0 == $sub.ref(0, 575145);

procedure schedule_work___0($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.36, $M.38, $M.40, $M.42;



implementation schedule_work___0($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.0, system_wq);
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 757} $i2 := queue_work___0($p1, $p0);
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 758} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const queue_work___0: ref;

axiom queue_work___0 == $sub.ref(0, 576177);

procedure queue_work___0($p0: ref, $p1: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.36, $M.38, $M.40, $M.42;



implementation queue_work___0($p0: ref, $p1: ref) returns ($r: i1)
{
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 759} $i2 := ldv_queue_work_on_45(8192, $p0, $p1);
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 760} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ldv_queue_work_on_45: ref;

axiom ldv_queue_work_on_45 == $sub.ref(0, 577209);

procedure ldv_queue_work_on_45($i0: i32, $p1: ref, $p2: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.36, $M.38, $M.40, $M.42;



implementation ldv_queue_work_on_45($i0: i32, $p1: ref, $p2: ref) returns ($r: i1)
{
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $i6: i8;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 761} {:cexpr "ldv_queue_work_on_45:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} $i3 := queue_work_on($i0, $p1, $p2);
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 763} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i5);
    call {:si_unique_call 764} {:cexpr "ldv_func_res"} boogie_si_record_i8($i6);
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 765} activate_work_3($p2, 2);
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i6);
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const vmci_event_subscribe: ref;

axiom vmci_event_subscribe == $sub.ref(0, 578241);

procedure vmci_event_subscribe($i0: i32, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.69, $M.70, assertsPassed, $CurrAddr;



implementation vmci_event_subscribe($i0: i32, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $i4: i64;
  var $i5: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i64;
  var $i12: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $i26: i32;
  var $p27: ref;
  var $i28: i8;
  var $i29: i1;
  var $p30: ref;
  var $i31: i64;
  var $p32: ref;
  var $i33: i32;
  var $p34: ref;
  var $i35: i32;
  var $i7: i32;
  var $p36: ref;
  var $i37: i64;
  var $i38: i1;
  var $p39: ref;
  var $i40: i64;
  var $i41: i1;
  var $p42: ref;
  var $i43: i64;
  var $i44: i1;
  var $p45: ref;
  var $i46: i64;
  var $i47: i1;
  var $p48: ref;
  var $i49: i64;
  var $i50: i1;
  var $p51: ref;
  var $i52: i64;
  var $i53: i1;
  var $p54: ref;
  var $i55: i64;
  var $i56: i1;
  var $p57: ref;
  var $i58: i64;
  var $i59: i1;
  var $p60: ref;
  var $i61: i64;
  var $i62: i1;
  var vslice_dummy_var_225: i32;
  var vslice_dummy_var_226: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} {:cexpr "vmci_event_subscribe:arg:event"} boogie_si_record_i32($i0);
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i8 := $ugt.i32($i0, 6);
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i8 == 1);
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i0, 5);
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i9 == 1);
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i0, 6);
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i10 == 1);
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p1);
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 769} $p14 := kzalloc(40, 208);
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i16, 0);
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, 7);
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, $i0);
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p20, $p1);
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p21, $p2);
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 770} INIT_LIST_HEAD($p22);
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} ldv_mutex_lock_88(subscriber_mutex);
    goto SeqInstr_172, SeqInstr_173;

  SeqInstr_173:
    assume assertsPassed;
    goto SeqInstr_174;

  SeqInstr_174:
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 772} $p23 := event_find($u0);
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    $i25 := $eq.i64($i24, 0);
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    $i26 := $u0;
    assume true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 773} $p36 := event_find($u0);
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p36);
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    $i38 := $eq.i64($i37, 0);
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    $i26 := $u0;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 776} $p39 := event_find($u0);
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p39);
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    $i41 := $eq.i64($i40, 0);
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    $i26 := $u0;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} $p42 := event_find($u0);
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p42);
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    $i44 := $eq.i64($i43, 0);
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    $i26 := $u0;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 778} $p45 := event_find($u0);
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p45);
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    $i47 := $eq.i64($i46, 0);
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    $i26 := $u0;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} $p48 := event_find($u0);
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    $i49 := $p2i.ref.i64($p48);
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    $i50 := $eq.i64($i49, 0);
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    $i26 := $u0;
    assume {:branchcond $i50} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} $p51 := event_find($u0);
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    $i52 := $p2i.ref.i64($p51);
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    $i53 := $eq.i64($i52, 0);
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    $i26 := $u0;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    call {:si_unique_call 781} $p54 := event_find($u0);
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    $i55 := $p2i.ref.i64($p54);
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    $i56 := $eq.i64($i55, 0);
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    $i26 := $u0;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} $p57 := event_find($u0);
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    $i58 := $p2i.ref.i64($p57);
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    $i59 := $eq.i64($i58, 0);
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    $i26 := $u0;
    assume {:branchcond $i59} true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} $p60 := event_find($u0);
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    $i61 := $p2i.ref.i64($p60);
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    $i62 := $eq.i64($i61, 0);
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    $i26 := $u0;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i28 := 0;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i8.i1($i28);
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    $i33 := $sub.i32(0, 19);
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 775} ldv_mutex_unlock_89(subscriber_mutex);
    goto SeqInstr_175, SeqInstr_176;

  SeqInstr_176:
    assume assertsPassed;
    goto SeqInstr_177;

  SeqInstr_177:
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    $M.69 := $i35;
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    $i7 := $i33;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  SeqInstr_175:
    assume !assertsPassed;
    return;

  $bb27:
    assume $i29 == 1;
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    $i31 := $zext.i32.i64($i0);
    $p32 := $add.ref($add.ref(subscriber_array, $mul.ref(0, 112)), $mul.ref($i31, 16));
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} list_add_rcu($p30, $p32);
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    $i33 := 0;
    goto $bb29;

  $bb62:
    assume {:verifier.code 0} true;
    assume $i62 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, $i26);
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    $i28 := 1;
    goto $bb23;

  $bb58:
    assume {:verifier.code 0} true;
    assume $i59 == 1;
    goto $bb21;

  $bb54:
    assume {:verifier.code 0} true;
    assume $i56 == 1;
    goto $bb21;

  $bb50:
    assume {:verifier.code 0} true;
    assume $i53 == 1;
    goto $bb21;

  $bb46:
    assume {:verifier.code 0} true;
    assume $i50 == 1;
    goto $bb21;

  $bb42:
    assume {:verifier.code 0} true;
    assume $i47 == 1;
    goto $bb21;

  $bb38:
    assume {:verifier.code 0} true;
    assume $i44 == 1;
    goto $bb21;

  $bb34:
    assume {:verifier.code 0} true;
    assume $i41 == 1;
    goto $bb21;

  $bb30:
    assume {:verifier.code 0} true;
    assume $i38 == 1;
    goto $bb21;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i25 == 1;
    goto $bb21;

  SeqInstr_172:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i17 == 1;
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 3);
    goto $bb3;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} vslice_dummy_var_226 := no_printk.ref.ref.i32.ref.ref(.str.38, .str.37, $i0, $p1, $p2);
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 2);
    goto $bb3;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb6;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb6;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 767} vslice_dummy_var_225 := no_printk.ref.ref(.str.36, .str.37);
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 2);
    goto $bb3;
}



const kzalloc: ref;

axiom kzalloc == $sub.ref(0, 579273);

procedure kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $i2: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} {:cexpr "kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 785} {:cexpr "kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    $i2 := $or.i32($i1, 32768);
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 786} $p3 := kmalloc($i0, $i2);
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const ldv_mutex_lock_88: ref;

axiom ldv_mutex_lock_88 == $sub.ref(0, 580305);

procedure ldv_mutex_lock_88($p0: ref);
  free requires assertsPassed;
  modifies $M.70, assertsPassed;



implementation ldv_mutex_lock_88($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 787} ldv_mutex_lock_subscriber_mutex($p0);
    goto SeqInstr_178, SeqInstr_179;

  SeqInstr_179:
    assume assertsPassed;
    goto SeqInstr_180;

  SeqInstr_180:
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 788} mutex_lock($p0);
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_178:
    assume !assertsPassed;
    return;
}



const event_find: ref;

axiom event_find == $sub.ref(0, 581337);

procedure event_find($i0: i32) returns ($r: ref);
  free requires assertsPassed;



implementation event_find($i0: i32) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p7: ref;
  var $p12: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i64;
  var $i44: i1;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i64;
  var $i56: i1;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i64;
  var $i62: i1;
  var $p63: ref;
  var $p64: ref;
  var $i65: i32;
  var $i66: i1;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i64;
  var $i74: i1;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $i79: i64;
  var $i80: i1;
  var $p81: ref;
  var $p82: ref;
  var $i83: i32;
  var $i84: i1;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $i91: i64;
  var $i92: i1;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $i97: i64;
  var $i98: i1;
  var $p99: ref;
  var $p100: ref;
  var $i101: i32;
  var $i102: i1;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $i109: i64;
  var $i110: i1;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $i115: i64;
  var $i116: i1;
  var $p117: ref;
  var $p118: ref;
  var $i119: i32;
  var $i120: i1;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $i127: i64;
  var $i128: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 789} {:cexpr "event_find:arg:sub_id"} boogie_si_record_i32($i0);
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.0, subscriber_array);
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref($sub.ref(0, 24), 40));
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 40)), $mul.ref(24, 1));
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, $p2i.ref.i64(subscriber_array));
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $add.ref($add.ref($add.ref(subscriber_array, $mul.ref(0, 112)), $mul.ref(1, 16)), $mul.ref(0, 1)));
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p22, $mul.ref($sub.ref(0, 24), 40));
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p22, $mul.ref($sub.ref(0, 24), 40)), $mul.ref(24, 1));
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, $p2i.ref.i64($add.ref($add.ref(subscriber_array, $mul.ref(0, 112)), $mul.ref(1, 16))));
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $add.ref($add.ref($add.ref(subscriber_array, $mul.ref(0, 112)), $mul.ref(2, 16)), $mul.ref(0, 1)));
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($p40, $mul.ref($sub.ref(0, 24), 40));
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p40, $mul.ref($sub.ref(0, 24), 40)), $mul.ref(24, 1));
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p42);
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    $i44 := $ne.i64($i43, $p2i.ref.i64($add.ref($add.ref(subscriber_array, $mul.ref(0, 112)), $mul.ref(2, 16))));
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $add.ref($add.ref($add.ref(subscriber_array, $mul.ref(0, 112)), $mul.ref(3, 16)), $mul.ref(0, 1)));
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p57);
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($p58, $mul.ref($sub.ref(0, 24), 40));
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p58, $mul.ref($sub.ref(0, 24), 40)), $mul.ref(24, 1));
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    $i61 := $p2i.ref.i64($p60);
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    $i62 := $ne.i64($i61, $p2i.ref.i64($add.ref($add.ref(subscriber_array, $mul.ref(0, 112)), $mul.ref(3, 16))));
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    assume !($i62 == 1);
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.0, $add.ref($add.ref($add.ref(subscriber_array, $mul.ref(0, 112)), $mul.ref(4, 16)), $mul.ref(0, 1)));
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p75);
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($p76, $mul.ref($sub.ref(0, 24), 40));
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p76, $mul.ref($sub.ref(0, 24), 40)), $mul.ref(24, 1));
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    $i79 := $p2i.ref.i64($p78);
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $i80 := $ne.i64($i79, $p2i.ref.i64($add.ref($add.ref(subscriber_array, $mul.ref(0, 112)), $mul.ref(4, 16))));
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    assume {:branchcond $i80} true;
    goto $bb54, $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    assume !($i80 == 1);
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.0, $add.ref($add.ref($add.ref(subscriber_array, $mul.ref(0, 112)), $mul.ref(5, 16)), $mul.ref(0, 1)));
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    $p94 := $bitcast.ref.ref($p93);
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($p94, $mul.ref($sub.ref(0, 24), 40));
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p94, $mul.ref($sub.ref(0, 24), 40)), $mul.ref(24, 1));
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    $i97 := $p2i.ref.i64($p96);
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    $i98 := $ne.i64($i97, $p2i.ref.i64($add.ref($add.ref(subscriber_array, $mul.ref(0, 112)), $mul.ref(5, 16))));
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    assume {:branchcond $i98} true;
    goto $bb66, $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    assume !($i98 == 1);
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $p111 := $load.ref($M.0, $add.ref($add.ref($add.ref(subscriber_array, $mul.ref(0, 112)), $mul.ref(6, 16)), $mul.ref(0, 1)));
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    $p112 := $bitcast.ref.ref($p111);
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($p112, $mul.ref($sub.ref(0, 24), 40));
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p112, $mul.ref($sub.ref(0, 24), 40)), $mul.ref(24, 1));
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    $i115 := $p2i.ref.i64($p114);
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    $i116 := $ne.i64($i115, $p2i.ref.i64($add.ref($add.ref(subscriber_array, $mul.ref(0, 112)), $mul.ref(6, 16))));
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    assume {:branchcond $i116} true;
    goto $bb78, $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    assume !($i116 == 1);
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p12 := $0.ref;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    $r := $p12;
    return;

  $bb78:
    assume $i116 == 1;
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    $p117 := $p113;
    goto $bb81;

  $bb81:
    call $p11, $p117, $p118, $i119, $i120, $p122, $p123, $p124, $p125, $p126, $i127, $i128 := event_find_loop_$bb81($i0, $p11, $p117, $p118, $i119, $i120, $p122, $p123, $p124, $p125, $p126, $i127, $i128);
    goto $bb81_last;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p117, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    $i119 := $load.i32($M.0, $p118);
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    $i120 := $eq.i32($i119, $i0);
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    $p11 := $p117;
    assume true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($add.ref($p117, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    $p123 := $load.ref($M.0, $p122);
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    $p124 := $bitcast.ref.ref($p123);
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($p124, $mul.ref($sub.ref(0, 24), 40));
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p124, $mul.ref($sub.ref(0, 24), 40)), $mul.ref(24, 1));
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    $i127 := $p2i.ref.i64($p126);
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    $i128 := $ne.i64($i127, $p2i.ref.i64($add.ref($add.ref(subscriber_array, $mul.ref(0, 112)), $mul.ref(6, 16))));
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i128 == 1);
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb86:
    assume $i128 == 1;
    assume {:verifier.code 0} true;
    $p117 := $p125;
    goto $bb86_dummy;

  $bb83:
    assume {:verifier.code 0} true;
    assume $i120 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    $p12 := $p11;
    goto $bb11;

  $bb66:
    assume $i98 == 1;
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    $p99 := $p95;
    goto $bb69;

  $bb69:
    call $p11, $p99, $p100, $i101, $i102, $p104, $p105, $p106, $p107, $p108, $i109, $i110 := event_find_loop_$bb69($i0, $p11, $p99, $p100, $i101, $i102, $p104, $p105, $p106, $p107, $p108, $i109, $i110);
    goto $bb69_last;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p99, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    $i101 := $load.i32($M.0, $p100);
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    $i102 := $eq.i32($i101, $i0);
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    $p11 := $p99;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($add.ref($p99, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    $p105 := $load.ref($M.0, $p104);
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    $p106 := $bitcast.ref.ref($p105);
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($p106, $mul.ref($sub.ref(0, 24), 40));
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p106, $mul.ref($sub.ref(0, 24), 40)), $mul.ref(24, 1));
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    $i109 := $p2i.ref.i64($p108);
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    $i110 := $ne.i64($i109, $p2i.ref.i64($add.ref($add.ref(subscriber_array, $mul.ref(0, 112)), $mul.ref(5, 16))));
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i110 == 1);
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb74:
    assume $i110 == 1;
    assume {:verifier.code 0} true;
    $p99 := $p107;
    goto $bb74_dummy;

  $bb71:
    assume {:verifier.code 0} true;
    assume $i102 == 1;
    goto $bb9;

  $bb54:
    assume $i80 == 1;
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    $p81 := $p77;
    goto $bb57;

  $bb57:
    call $p11, $p81, $p82, $i83, $i84, $p86, $p87, $p88, $p89, $p90, $i91, $i92 := event_find_loop_$bb57($i0, $p11, $p81, $p82, $i83, $i84, $p86, $p87, $p88, $p89, $p90, $i91, $i92);
    goto $bb57_last;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p81, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    $i83 := $load.i32($M.0, $p82);
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    $i84 := $eq.i32($i83, $i0);
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    $p11 := $p81;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($add.ref($p81, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    $p87 := $load.ref($M.0, $p86);
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    $p88 := $bitcast.ref.ref($p87);
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($p88, $mul.ref($sub.ref(0, 24), 40));
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p88, $mul.ref($sub.ref(0, 24), 40)), $mul.ref(24, 1));
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    $i91 := $p2i.ref.i64($p90);
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    $i92 := $ne.i64($i91, $p2i.ref.i64($add.ref($add.ref(subscriber_array, $mul.ref(0, 112)), $mul.ref(4, 16))));
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i92 == 1);
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb62:
    assume $i92 == 1;
    assume {:verifier.code 0} true;
    $p81 := $p89;
    goto $bb62_dummy;

  $bb59:
    assume {:verifier.code 0} true;
    assume $i84 == 1;
    goto $bb9;

  $bb42:
    assume $i62 == 1;
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    $p63 := $p59;
    goto $bb45;

  $bb45:
    call $p11, $p63, $p64, $i65, $i66, $p68, $p69, $p70, $p71, $p72, $i73, $i74 := event_find_loop_$bb45($i0, $p11, $p63, $p64, $i65, $i66, $p68, $p69, $p70, $p71, $p72, $i73, $i74);
    goto $bb45_last;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p63, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.0, $p64);
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    $i66 := $eq.i32($i65, $i0);
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    $p11 := $p63;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($add.ref($p63, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.0, $p68);
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p69);
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($p70, $mul.ref($sub.ref(0, 24), 40));
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p70, $mul.ref($sub.ref(0, 24), 40)), $mul.ref(24, 1));
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    $i73 := $p2i.ref.i64($p72);
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    $i74 := $ne.i64($i73, $p2i.ref.i64($add.ref($add.ref(subscriber_array, $mul.ref(0, 112)), $mul.ref(3, 16))));
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i74 == 1);
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb50:
    assume $i74 == 1;
    assume {:verifier.code 0} true;
    $p63 := $p71;
    goto $bb50_dummy;

  $bb47:
    assume {:verifier.code 0} true;
    assume $i66 == 1;
    goto $bb9;

  $bb30:
    assume $i44 == 1;
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    $p45 := $p41;
    goto $bb33;

  $bb33:
    call $p11, $p45, $p46, $i47, $i48, $p50, $p51, $p52, $p53, $p54, $i55, $i56 := event_find_loop_$bb33($i0, $p11, $p45, $p46, $i47, $i48, $p50, $p51, $p52, $p53, $p54, $i55, $i56);
    goto $bb33_last;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p45, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i47, $i0);
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    $p11 := $p45;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p45, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($p52, $mul.ref($sub.ref(0, 24), 40));
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p52, $mul.ref($sub.ref(0, 24), 40)), $mul.ref(24, 1));
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    $i55 := $p2i.ref.i64($p54);
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    $i56 := $ne.i64($i55, $p2i.ref.i64($add.ref($add.ref(subscriber_array, $mul.ref(0, 112)), $mul.ref(2, 16))));
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i56 == 1);
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb38:
    assume $i56 == 1;
    assume {:verifier.code 0} true;
    $p45 := $p53;
    goto $bb38_dummy;

  $bb35:
    assume {:verifier.code 0} true;
    assume $i48 == 1;
    goto $bb9;

  $bb18:
    assume $i26 == 1;
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    $p27 := $p23;
    goto $bb21;

  $bb21:
    call $p11, $p27, $p28, $i29, $i30, $p32, $p33, $p34, $p35, $p36, $i37, $i38 := event_find_loop_$bb21($i0, $p11, $p27, $p28, $i29, $i30, $p32, $p33, $p34, $p35, $p36, $i37, $i38);
    goto $bb21_last;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, $i0);
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    $p11 := $p27;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p27, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($p34, $mul.ref($sub.ref(0, 24), 40));
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p34, $mul.ref($sub.ref(0, 24), 40)), $mul.ref(24, 1));
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p36);
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i37, $p2i.ref.i64($add.ref($add.ref(subscriber_array, $mul.ref(0, 112)), $mul.ref(1, 16))));
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i38 == 1);
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb26:
    assume $i38 == 1;
    assume {:verifier.code 0} true;
    $p27 := $p35;
    goto $bb26_dummy;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i30 == 1;
    goto $bb9;

  $bb3:
    assume $i6 == 1;
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    $p7 := $p3;
    goto $bb6;

  $bb6:
    call $p8, $i9, $i10, $p11, $p14, $p15, $p16, $p17, $p18, $i19, $i20, $p7 := event_find_loop_$bb6($i0, $p8, $i9, $i10, $p11, $p14, $p15, $p16, $p17, $p18, $i19, $i20, $p7);
    goto $bb6_last;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, $i0);
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    $p11 := $p7;
    assume true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p16, $mul.ref($sub.ref(0, 24), 40));
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p16, $mul.ref($sub.ref(0, 24), 40)), $mul.ref(24, 1));
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, $p2i.ref.i64(subscriber_array));
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i20 == 1);
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb13:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $p7 := $p17;
    goto $bb13_dummy;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb9;

  $bb86_dummy:
    assume false;
    return;

  $bb81_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3626;

  $bb74_dummy:
    assume false;
    return;

  $bb69_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3601;

  $bb62_dummy:
    assume false;
    return;

  $bb57_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3576;

  $bb50_dummy:
    assume false;
    return;

  $bb45_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3551;

  $bb38_dummy:
    assume false;
    return;

  $bb33_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3526;

  $bb26_dummy:
    assume false;
    return;

  $bb21_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3501;

  $bb13_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3472;
}



const list_add_rcu: ref;

axiom list_add_rcu == $sub.ref(0, 582369);

procedure list_add_rcu($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add_rcu($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 790} __list_add_rcu($p0, $p1, $p3);
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_unlock_89: ref;

axiom ldv_mutex_unlock_89 == $sub.ref(0, 583401);

procedure ldv_mutex_unlock_89($p0: ref);
  free requires assertsPassed;
  modifies $M.70, assertsPassed;



implementation ldv_mutex_unlock_89($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} ldv_mutex_unlock_subscriber_mutex($p0);
    goto SeqInstr_181, SeqInstr_182;

  SeqInstr_182:
    assume assertsPassed;
    goto SeqInstr_183;

  SeqInstr_183:
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 792} mutex_unlock($p0);
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_181:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_subscriber_mutex: ref;

axiom ldv_mutex_unlock_subscriber_mutex == $sub.ref(0, 584433);

procedure ldv_mutex_unlock_subscriber_mutex($p0: ref);
  free requires assertsPassed;
  modifies $M.70, assertsPassed;



implementation ldv_mutex_unlock_subscriber_mutex($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    $i1 := $M.70;
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 2);
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.70 := 1;
    call {:si_unique_call 794} {:cexpr "ldv_mutex_subscriber_mutex"} boogie_si_record_i32(1);
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} ldv_error();
    goto SeqInstr_184, SeqInstr_185;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  SeqInstr_186:
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_184:
    assume !assertsPassed;
    return;
}



const __list_add_rcu: ref;

axiom __list_add_rcu == $sub.ref(0, 585465);

procedure __list_add_rcu($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __list_add_rcu($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_lock_subscriber_mutex: ref;

axiom ldv_mutex_lock_subscriber_mutex == $sub.ref(0, 586497);

procedure ldv_mutex_lock_subscriber_mutex($p0: ref);
  free requires assertsPassed;
  modifies $M.70, assertsPassed;



implementation ldv_mutex_lock_subscriber_mutex($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    $i1 := $M.70;
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 1);
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.70 := 2;
    call {:si_unique_call 796} {:cexpr "ldv_mutex_subscriber_mutex"} boogie_si_record_i32(2);
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 795} ldv_error();
    goto SeqInstr_187, SeqInstr_188;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  SeqInstr_189:
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_187:
    assume !assertsPassed;
    return;
}



const vmci_event_unsubscribe: ref;

axiom vmci_event_unsubscribe == $sub.ref(0, 587529);

procedure vmci_event_unsubscribe($i0: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.70, $M.0, assertsPassed;



implementation vmci_event_unsubscribe($i0: i32) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 797} {:cexpr "vmci_event_unsubscribe:arg:sub_id"} boogie_si_record_i32($i0);
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} ldv_mutex_lock_90(subscriber_mutex);
    goto SeqInstr_190, SeqInstr_191;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  SeqInstr_192:
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 799} $p1 := event_find($i0);
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 801} ldv_mutex_unlock_91(subscriber_mutex);
    goto SeqInstr_193, SeqInstr_194;

  SeqInstr_194:
    assume assertsPassed;
    goto SeqInstr_195;

  SeqInstr_195:
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p1);
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} synchronize_rcu();
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 803} kfree($p8);
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 21);
    goto $bb6;

  SeqInstr_193:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} list_del_rcu($p4);
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_190:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_90: ref;

axiom ldv_mutex_lock_90 == $sub.ref(0, 588561);

procedure ldv_mutex_lock_90($p0: ref);
  free requires assertsPassed;
  modifies $M.70, assertsPassed;



implementation ldv_mutex_lock_90($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 804} ldv_mutex_lock_subscriber_mutex($p0);
    goto SeqInstr_196, SeqInstr_197;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  SeqInstr_198:
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 805} mutex_lock($p0);
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_196:
    assume !assertsPassed;
    return;
}



const list_del_rcu: ref;

axiom list_del_rcu == $sub.ref(0, 589593);

procedure list_del_rcu($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation list_del_rcu($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 806} __list_del_entry($p0);
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3699;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $i2p.i64.ref($sub.i64(0, 2401263026316508672)));
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_unlock_91: ref;

axiom ldv_mutex_unlock_91 == $sub.ref(0, 590625);

procedure ldv_mutex_unlock_91($p0: ref);
  free requires assertsPassed;
  modifies $M.70, assertsPassed;



implementation ldv_mutex_unlock_91($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 807} ldv_mutex_unlock_subscriber_mutex($p0);
    goto SeqInstr_199, SeqInstr_200;

  SeqInstr_200:
    assume assertsPassed;
    goto SeqInstr_201;

  SeqInstr_201:
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 808} mutex_unlock($p0);
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_199:
    assume !assertsPassed;
    return;
}



const __list_del_entry: ref;

axiom __list_del_entry == $sub.ref(0, 591657);

procedure __list_del_entry($p0: ref);
  free requires assertsPassed;



implementation __list_del_entry($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    return;
}



const vmci_qpair_alloc: ref;

axiom vmci_qpair_alloc == $sub.ref(0, 592689);

procedure vmci_qpair_alloc($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i32, $i5: i32, $i6: i32) returns ($r: i32);



const qp_wakeup_cb: ref;

axiom qp_wakeup_cb == $sub.ref(0, 593721);

procedure qp_wakeup_cb($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.46, assertsPassed;



implementation qp_wakeup_cb($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 809} qp_lock($p1);
    goto SeqInstr_202, SeqInstr_203;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  SeqInstr_204:
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(56, 1));
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 811} qp_unlock($p1);
    goto SeqInstr_205, SeqInstr_206;

  SeqInstr_206:
    assume assertsPassed;
    goto SeqInstr_207;

  SeqInstr_207:
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_205:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p5, $i6, $i7, $p8, $p9, $i10, $i11, $p12, $p13, $i14, $i15 := qp_wakeup_cb_loop_$bb4($p1, $p2, $p5, $i6, $i7, $p8, $p9, $i10, $i11, $p12, $p13, $i14, $i15);
    goto $bb4_last;

  $bb5:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(56, 1));
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32($i6, 1);
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(56, 1));
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, $i7);
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(60, 1));
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    $i11 := $add.i32($i10, 1);
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(60, 1));
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, $i11);
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(64, 1));
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} __wake_up($p13, 3, 1, $0.ref);
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p2);
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i15 == 1);
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb6_dummy;

  SeqInstr_202:
    assume !assertsPassed;
    return;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const vmci_qp_alloc: ref;

axiom vmci_qp_alloc == $sub.ref(0, 594753);

procedure vmci_qp_alloc($p0: ref, $p1: ref, $i2: i64, $p3: ref, $i4: i64, $i5: i32, $i6: i32, $i7: i32, $i8: i1, $p9: ref, $p10: ref) returns ($r: i32);



const qp_alloc_guest_work: ref;

axiom qp_alloc_guest_work == $sub.ref(0, 595785);

procedure qp_alloc_guest_work($p0: ref, $p1: ref, $i2: i64, $p3: ref, $i4: i64, $i5: i32, $i6: i32, $i7: i32) returns ($r: i32);



const qp_alloc_host_work: ref;

axiom qp_alloc_host_work == $sub.ref(0, 596817);

procedure qp_alloc_host_work($p0: ref, $p1: ref, $i2: i64, $p3: ref, $i4: i64, $i5: i32, $i6: i32, $i7: i32, $p8: ref, $p9: ref) returns ($r: i32);



const qp_broker_alloc: ref;

axiom qp_broker_alloc == $sub.ref(0, 597849);

procedure qp_broker_alloc($i0: i64, $i1: i32, $i2: i32, $i3: i32, $i4: i64, $i5: i64, $p6: ref, $p7: ref, $p8: ref, $p9: ref, $p10: ref, $p11: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.76, $M.23, $M.20, $M.21, $M.24, $M.25, $M.75, $M.28, $M.45, $M.48, $M.47, $M.0, $M.74, $M.32, $M.33, $CurrAddr, assertsPassed, $M.55, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.29, $M.2, $M.3, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.31, $M.87, $M.34, $M.30, $M.69, $M.35, $M.6, $M.13, $M.18, $M.19, $M.70, $M.44, $M.108, $M.110, $M.112, $M.114, $M.26, $M.27, $M.109, $M.111, $M.113, $M.115, $M.89, $M.36, $M.38, $M.40, $M.42, $M.46, $M.90, $M.86, $M.91;



implementation qp_broker_alloc($i0: i64, $i1: i32, $i2: i32, $i3: i32, $i4: i64, $i5: i64, $p6: ref, $p7: ref, $p8: ref, $p9: ref, $p10: ref, $p11: ref) returns ($r: i32)
{
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $i17: i8;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $i21: i8;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i64;
  var $i29: i1;
  var $i30: i1;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $i35: i64;
  var $i36: i1;
  var $i37: i1;
  var $i38: i8;
  var $i39: i1;
  var $i40: i32;
  var $i41: i1;
  var $i42: i1;
  var $p43: ref;
  var $i44: i64;
  var $i45: i1;
  var $i46: i8;
  var $i47: i1;
  var $p48: ref;
  var $i49: i32;
  var $p50: ref;
  var $i51: i32;
  var $p53: ref;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $i57: i64;
  var $p58: ref;
  var $p59: ref;
  var $i60: i64;
  var $i61: i1;
  var $p62: ref;
  var $i63: i64;
  var $i64: i32;
  var $i67: i32;
  var $i65: i8;
  var $i66: i32;
  var $i68: i64;
  var $i69: i1;
  var $i70: i1;
  var $i72: i1;
  var $i74: i1;
  var $i75: i1;
  var $i73: i1;
  var $i71: i1;
  var $i76: i8;
  var $i34: i32;
  var vslice_dummy_var_227: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 812} $p12 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    assume {:verifier.code 0} true;
    $M.76 := $store.i64($M.76, $p13, $i0);
    call {:si_unique_call 813} {:cexpr "qp_broker_alloc:arg:peer"} boogie_si_record_i32($i1);
    call {:si_unique_call 814} {:cexpr "qp_broker_alloc:arg:flags"} boogie_si_record_i32($i2);
    call {:si_unique_call 815} {:cexpr "qp_broker_alloc:arg:priv_flags"} boogie_si_record_i32($i3);
    call {:si_unique_call 816} {:cexpr "qp_broker_alloc:arg:produce_size"} boogie_si_record_i64($i4);
    call {:si_unique_call 817} {:cexpr "qp_broker_alloc:arg:consume_size"} boogie_si_record_i64($i5);
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 818} $i14 := vmci_ctx_get_id($p7);
    call {:si_unique_call 819} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i2, 2);
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i8($i16);
    call {:si_unique_call 820} {:cexpr "is_local"} boogie_si_record_i8($i17);
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p12);
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    $i19 := $load.i64($M.76, $p18);
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 821} $i20 := vmci_handle_is_invalid___1($i19);
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    $i21 := $zext.i1.i8($i20);
    call {:si_unique_call 822} {:cexpr "tmp___0"} boogie_si_record_i8($i21);
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i8.i1($i21);
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i22 == 1);
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    $i23 := $and.i32($i2, $sub.i32(0, 16));
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i24 == 1);
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i8.i1($i17);
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i25 == 1);
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    $i26 := $eq.i64($i4, 0);
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p7);
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    $i29 := $eq.i64($i28, 0);
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i29 == 1);
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i14, $sub.i32(0, 1));
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i30 == 1);
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p12, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.76, $p31);
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, $sub.i32(0, 1));
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p6);
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i35, 0);
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 825} ldv_mutex_lock_221($add.ref($add.ref(qp_broker_list, $mul.ref(0, 176)), $mul.ref(16, 1)));
    goto SeqInstr_208, SeqInstr_209;

  SeqInstr_209:
    assume assertsPassed;
    goto SeqInstr_210;

  SeqInstr_210:
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i8.i1($i17);
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i42 == 1);
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p12);
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    $i44 := $load.i64($M.76, $p43);
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 826} $i45 := vmci_ctx_qp_exists($p7, $i44);
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    $i46 := $zext.i1.i8($i45);
    call {:si_unique_call 827} {:cexpr "tmp___3"} boogie_si_record_i8($i46);
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i8.i1($i46);
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p12, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.76, $p53);
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i54, $sub.i32(0, 1));
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    assume {:branchcond $i55} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    $p59 := $0.ref;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    $i60 := $p2i.ref.i64($p59);
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    $i61 := $eq.i64($i60, 0);
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i61 == 1);
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} $i67 := qp_broker_attach($p59, $i1, $i2, $i3, $i4, $i5, $p6, $p7, $p8, $p9, $p10);
    goto SeqInstr_214, SeqInstr_215;

  SeqInstr_215:
    assume assertsPassed;
    goto SeqInstr_216;

  SeqInstr_216:
    call {:si_unique_call 834} {:cexpr "result"} boogie_si_record_i32($i67);
    assume {:verifier.code 0} true;
    $i65, $i66 := 0, $i67;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} ldv_mutex_unlock_223($add.ref($add.ref(qp_broker_list, $mul.ref(0, 176)), $mul.ref(16, 1)));
    goto SeqInstr_217, SeqInstr_218;

  SeqInstr_218:
    assume assertsPassed;
    goto SeqInstr_219;

  SeqInstr_219:
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    $i68 := $p2i.ref.i64($p11);
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    $i69 := $ne.i64($i68, 0);
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i34 := $i66;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    $r := $i34;
    return;

  $bb42:
    assume $i69 == 1;
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    $i70 := $eq.i32($i14, 2);
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    $i71 := 0;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    assume !($i70 == 1);
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    $i76 := $zext.i1.i8($i71);
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    $M.75 := $store.i8($M.75, $p11, $i76);
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb44:
    assume $i70 == 1;
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    $i72 := $trunc.i8.i1($i65);
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    $i73 := 1;
    assume {:branchcond $i72} true;
    goto $bb47, $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    assume !($i72 == 1);
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i71 := $i73;
    goto $bb46;

  $bb47:
    assume $i72 == 1;
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    $i74 := $trunc.i8.i1($i17);
    goto corral_source_split_3842;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    $i75 := $xor.i1($i74, 1);
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    $i73 := $i75;
    goto $bb49;

  SeqInstr_217:
    assume !assertsPassed;
    return;

  SeqInstr_214:
    assume !assertsPassed;
    return;

  $bb39:
    assume $i61 == 1;
    goto corral_source_split_3819;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p12);
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    $i63 := $load.i64($M.76, $p62);
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 831} $i64 := qp_broker_create($i63, $i1, $i2, $i3, $i4, $i5, $p6, $p7, $p8, $p9, $p10);
    call {:si_unique_call 832} {:cexpr "result"} boogie_si_record_i32($i64);
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    $i65, $i66 := 1, $i64;
    goto $bb41;

  $bb36:
    assume $i55 == 1;
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p12);
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    $i57 := $load.i64($M.76, $p56);
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 830} $p58 := qp_broker_handle_to_entry($i57);
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    $p59 := $p58;
    goto $bb38;

  $bb32:
    assume $i47 == 1;
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p12, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.76, $p48);
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p12, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.76, $p50);
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 828} vslice_dummy_var_227 := no_printk.ref.i32.i32.i32(.str.168, $i14, $i49, $i51);
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} ldv_mutex_unlock_222($add.ref($add.ref(qp_broker_list, $mul.ref(0, 176)), $mul.ref(16, 1)));
    goto SeqInstr_211, SeqInstr_212;

  SeqInstr_212:
    assume assertsPassed;
    goto SeqInstr_213;

  SeqInstr_213:
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    $i34 := $sub.i32(0, 22);
    goto $bb19;

  SeqInstr_211:
    assume !assertsPassed;
    return;

  $bb30:
    assume $i42 == 1;
    assume {:verifier.code 0} true;
    goto $bb35;

  SeqInstr_208:
    assume !assertsPassed;
    return;

  $bb21:
    assume $i36 == 1;
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 823} $i37 := VMCI_QP_PAGESTORE_IS_WELLFORMED($p6);
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    $i38 := $zext.i1.i8($i37);
    call {:si_unique_call 824} {:cexpr "tmp___1"} boogie_si_record_i8($i38);
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i8.i1($i38);
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    $i40 := 1;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb26:
    assume $i41 == 1;
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    $i34 := $sub.i32(0, 2);
    goto $bb19;

  $bb23:
    assume $i39 == 1;
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    $i40 := 0;
    goto $bb25;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i33 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i34 := $sub.i32(0, 2);
    goto $bb19;

  $bb15:
    assume {:verifier.code 0} true;
    assume $i30 == 1;
    goto $bb2;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i29 == 1;
    goto $bb2;

  $bb8:
    assume $i26 == 1;
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    $i27 := $eq.i64($i5, 0);
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb10;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i27 == 1;
    goto $bb2;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i25 == 1;
    goto $bb2;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb2;
}



const VMCI_QP_PAGESTORE_IS_WELLFORMED: ref;

axiom VMCI_QP_PAGESTORE_IS_WELLFORMED == $sub.ref(0, 598881);

procedure VMCI_QP_PAGESTORE_IS_WELLFORMED($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation VMCI_QP_PAGESTORE_IS_WELLFORMED($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.77, $p1);
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    $i3 := $ugt.i32($i2, 1);
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_mutex_lock_221: ref;

axiom ldv_mutex_lock_221 == $sub.ref(0, 599913);

procedure ldv_mutex_lock_221($p0: ref);
  free requires assertsPassed;
  modifies $M.28, assertsPassed;



implementation ldv_mutex_lock_221($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 836} ldv_mutex_lock_mutex_of_qp_list($p0);
    goto SeqInstr_220, SeqInstr_221;

  SeqInstr_221:
    assume assertsPassed;
    goto SeqInstr_222;

  SeqInstr_222:
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 837} mutex_lock($p0);
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_220:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_222: ref;

axiom ldv_mutex_unlock_222 == $sub.ref(0, 600945);

procedure ldv_mutex_unlock_222($p0: ref);
  free requires assertsPassed;
  modifies $M.28, assertsPassed;



implementation ldv_mutex_unlock_222($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 838} ldv_mutex_unlock_mutex_of_qp_list($p0);
    goto SeqInstr_223, SeqInstr_224;

  SeqInstr_224:
    assume assertsPassed;
    goto SeqInstr_225;

  SeqInstr_225:
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 839} mutex_unlock($p0);
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_223:
    assume !assertsPassed;
    return;
}



const qp_broker_create: ref;

axiom qp_broker_create == $sub.ref(0, 601977);

procedure qp_broker_create($i0: i64, $i1: i32, $i2: i32, $i3: i32, $i4: i64, $i5: i64, $p6: ref, $p7: ref, $p8: ref, $p9: ref, $p10: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.74, $M.32, $M.33, $M.55, $M.79, $M.45, $M.20, $M.21, $M.48, $CurrAddr, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85;



implementation qp_broker_create($i0: i64, $i1: i32, $i2: i32, $i3: i32, $i4: i64, $i5: i64, $p6: ref, $p7: ref, $p8: ref, $p9: ref, $p10: ref) returns ($r: i32)
{
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $i17: i8;
  var $i18: i32;
  var $i19: i1;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $i37: i1;
  var $i38: i32;
  var $i39: i1;
  var $i40: i1;
  var $i41: i64;
  var $i42: i64;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p48: ref;
  var $p50: ref;
  var $p52: ref;
  var $p54: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i32;
  var $i62: i32;
  var $i63: i1;
  var $p64: ref;
  var $i65: i8;
  var $i66: i32;
  var $i67: i1;
  var $p68: ref;
  var $i69: i8;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $i77: i64;
  var $i78: i1;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $i84: i64;
  var $i85: i1;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p91: ref;
  var $i92: i1;
  var $p94: ref;
  var $i95: i64;
  var $i96: i64;
  var $i97: i64;
  var $i98: i32;
  var $p100: ref;
  var $i101: i64;
  var $i102: i64;
  var $i103: i64;
  var $i104: i32;
  var $i105: i32;
  var $i106: i32;
  var $i107: i64;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $i112: i64;
  var $i113: i1;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p124: ref;
  var $i125: i64;
  var $i126: i64;
  var $i127: i64;
  var $i128: i64;
  var $i129: i64;
  var $p130: ref;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $i135: i64;
  var $i136: i1;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $i141: i32;
  var $i142: i1;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $i146: i64;
  var $i147: i1;
  var $p148: ref;
  var $p149: ref;
  var $i150: i64;
  var $i151: i32;
  var $i152: i1;
  var $p153: ref;
  var $i154: i32;
  var $p155: ref;
  var $i156: i32;
  var $p159: ref;
  var $p160: ref;
  var $i161: i64;
  var $p162: ref;
  var $p163: ref;
  var $p164: ref;
  var $i165: i1;
  var $p166: ref;
  var $p167: ref;
  var $p168: ref;
  var $p169: ref;
  var $p171: ref;
  var $p172: ref;
  var $i173: i64;
  var $p174: ref;
  var $p175: ref;
  var $p176: ref;
  var $p177: ref;
  var $p179: ref;
  var $p180: ref;
  var $i181: i64;
  var $p183: ref;
  var $p184: ref;
  var $i185: i64;
  var $i79: i32;
  var $i187: i64;
  var $i188: i1;
  var $p189: ref;
  var $p190: ref;
  var $p191: ref;
  var $p192: ref;
  var $p193: ref;
  var $i20: i32;
  var cmdloc_dummy_var_85: [ref]i8;
  var cmdloc_dummy_var_86: [ref]i8;
  var cmdloc_dummy_var_87: [ref]i8;
  var cmdloc_dummy_var_88: [ref]i8;
  var cmdloc_dummy_var_89: [ref]i8;
  var cmdloc_dummy_var_90: [ref]i8;
  var vslice_dummy_var_228: i32;
  var vslice_dummy_var_229: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 840} $p11 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 841} $p12 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p11);
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p13, $i0);
    call {:si_unique_call 842} {:cexpr "qp_broker_create:arg:peer"} boogie_si_record_i32($i1);
    call {:si_unique_call 843} {:cexpr "qp_broker_create:arg:flags"} boogie_si_record_i32($i2);
    call {:si_unique_call 844} {:cexpr "qp_broker_create:arg:priv_flags"} boogie_si_record_i32($i3);
    call {:si_unique_call 845} {:cexpr "qp_broker_create:arg:produce_size"} boogie_si_record_i64($i4);
    call {:si_unique_call 846} {:cexpr "qp_broker_create:arg:consume_size"} boogie_si_record_i64($i5);
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 847} $i14 := vmci_ctx_get_id($p7);
    call {:si_unique_call 848} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i2, 2);
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i8($i16);
    call {:si_unique_call 849} {:cexpr "is_local"} boogie_si_record_i8($i17);
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    $i18 := $and.i32($i2, 1);
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p11, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, $i14);
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i14, $sub.i32(0, 1));
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i8.i1($i17);
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 850} $p34 := kzalloc(296, 32);
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p35);
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    $i37 := $eq.i64($i36, 0);
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 851} $i38 := vmci_ctx_get_id($p7);
    call {:si_unique_call 852} {:cexpr "tmp___1"} boogie_si_record_i32($i38);
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 2);
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i39 == 1);
    goto $bb34;

  $bb34:
    call {:si_unique_call 853} {:cexpr "qp_broker_create:arg:guest_produce_size"} boogie_si_record_i64($i4);
    call {:si_unique_call 854} {:cexpr "qp_broker_create:arg:guest_consume_size"} boogie_si_record_i64($i5);
    assume {:verifier.code 0} true;
    $i41, $i42 := $i4, $i5;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p35, $mul.ref(0, 296)), $mul.ref(136, 1)), $mul.ref(16, 1));
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p11);
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_85 := $M.0;
    cmdloc_dummy_var_86 := $M.0;
    call {:si_unique_call 857} cmdloc_dummy_var_87 := $memcpy.i8(cmdloc_dummy_var_85, cmdloc_dummy_var_86, $p45, $p46, 8, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_87;
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p35, $mul.ref(0, 296)), $mul.ref(136, 1)), $mul.ref(24, 1));
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p48, $i1);
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p35, $mul.ref(0, 296)), $mul.ref(136, 1)), $mul.ref(28, 1));
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p50, $i2);
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p35, $mul.ref(0, 296)), $mul.ref(136, 1)), $mul.ref(32, 1));
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p52, $i41);
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($p35, $mul.ref(0, 296)), $mul.ref(136, 1)), $mul.ref(40, 1));
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p54, $i42);
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p35, $mul.ref(0, 296)), $mul.ref(136, 1)), $mul.ref(48, 1));
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p56, 1);
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p35, $mul.ref(0, 296)), $mul.ref(192, 1));
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p57, $i14);
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p35, $mul.ref(0, 296)), $mul.ref(196, 1));
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p58, $sub.i32(0, 1));
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p35, $mul.ref(0, 296)), $mul.ref(200, 1));
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p59, 0);
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p7, $mul.ref(0, 304)), $mul.ref(272, 1));
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.0, $p60);
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    $i62 := $and.i32($i61, 1);
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    $i63 := $ne.i32($i62, 0);
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p35, $mul.ref(0, 296)), $mul.ref(204, 1));
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    $i65 := $zext.i1.i8($i63);
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p64, $i65);
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    $i66 := $and.i32($i3, 2);
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    $i67 := $ne.i32($i66, 0);
    goto corral_source_split_3948;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p35, $mul.ref(0, 296)), $mul.ref(205, 1));
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    $i69 := $zext.i1.i8($i67);
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p68, $i69);
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p35, $mul.ref(0, 296)), $mul.ref(206, 1));
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p70, 0);
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p35, $mul.ref(0, 296)), $mul.ref(272, 1));
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p71, $p8);
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p35, $mul.ref(0, 296)), $mul.ref(280, 1));
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p72, $p9);
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 858} $p73 := qp_host_alloc_queue($i41);
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p35, $mul.ref(0, 296)), $mul.ref(208, 1));
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p74, $p73);
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p35, $mul.ref(0, 296)), $mul.ref(208, 1));
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.0, $p75);
    goto corral_source_split_3962;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    $i77 := $p2i.ref.i64($p76);
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    $i78 := $eq.i64($i77, 0);
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    assume {:branchcond $i78} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 859} $p80 := qp_host_alloc_queue($i42);
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p35, $mul.ref(0, 296)), $mul.ref(216, 1));
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p81, $p80);
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p35, $mul.ref(0, 296)), $mul.ref(216, 1));
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.0, $p82);
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    $i84 := $p2i.ref.i64($p83);
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    $i85 := $eq.i64($i84, 0);
    goto corral_source_split_3978;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p35, $mul.ref(0, 296)), $mul.ref(208, 1));
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    $p87 := $load.ref($M.0, $p86);
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p35, $mul.ref(0, 296)), $mul.ref(216, 1));
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    $p89 := $load.ref($M.0, $p88);
    goto corral_source_split_3985;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 860} qp_init_queue_mutex($p87, $p89);
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($add.ref($p35, $mul.ref(0, 296)), $mul.ref(136, 1)), $mul.ref(0, 1));
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 861} INIT_LIST_HEAD($p91);
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    $i92 := $trunc.i8.i1($i17);
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i92 == 1);
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    $i135 := $p2i.ref.i64($p6);
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    $i136 := $ne.i64($i135, 0);
    goto corral_source_split_4015;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    assume {:branchcond $i136} true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i136 == 1);
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p35, $mul.ref(0, 296)), $mul.ref(200, 1));
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p144, 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p35, $mul.ref(0, 296)), $mul.ref(136, 1));
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 863} qp_list_add_entry(qp_broker_list, $p145);
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    $i146 := $p2i.ref.i64($p10);
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    $i147 := $ne.i64($i146, 0);
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    assume {:branchcond $i147} true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i147 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p35, $mul.ref(0, 296)), $mul.ref(0, 1));
    goto corral_source_split_4067;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    $p149 := $bitcast.ref.ref($p11);
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    $i150 := $load.i64($M.0, $p149);
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 866} $i151 := vmci_resource_add($p148, 6, $i150);
    call {:si_unique_call 867} {:cexpr "result"} boogie_si_record_i32($i151);
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    $i152 := $ne.i32($i151, 0);
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    assume {:branchcond $i152} true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i152 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($add.ref($p35, $mul.ref(0, 296)), $mul.ref(136, 1)), $mul.ref(16, 1));
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p35, $mul.ref(0, 296)), $mul.ref(0, 1));
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 869} $i161 := vmci_resource_handle($p160);
    goto corral_source_split_4082;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    $p162 := $bitcast.ref.ref($p12);
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p162, $i161);
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    $p163 := $bitcast.ref.ref($p159);
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    $p164 := $bitcast.ref.ref($p12);
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_88 := $M.0;
    cmdloc_dummy_var_89 := $M.0;
    call {:si_unique_call 870} cmdloc_dummy_var_90 := $memcpy.i8(cmdloc_dummy_var_88, cmdloc_dummy_var_89, $p163, $p164, 8, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_90;
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    $i165 := $trunc.i8.i1($i17);
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    assume {:branchcond $i165} true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i165 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($add.ref($p35, $mul.ref(0, 296)), $mul.ref(136, 1)), $mul.ref(16, 1));
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    $p184 := $bitcast.ref.ref($p183);
    goto corral_source_split_4109;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    $i185 := $load.i64($M.0, $p184);
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 873} vslice_dummy_var_229 := vmci_ctx_qp_create($p7, $i185);
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    $i20 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  $bb63:
    assume $i165 == 1;
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p35, $mul.ref(0, 296)), $mul.ref(208, 1));
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    $p167 := $load.ref($M.0, $p166);
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p167, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_4093;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    $p169 := $load.ref($M.0, $p168);
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($add.ref($p35, $mul.ref(0, 296)), $mul.ref(136, 1)), $mul.ref(16, 1));
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    $p172 := $bitcast.ref.ref($p171);
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    $i173 := $load.i64($M.0, $p172);
    goto corral_source_split_4097;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 871} vmci_q_header_init($p169, $i173);
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p35, $mul.ref(0, 296)), $mul.ref(216, 1));
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    $p175 := $load.ref($M.0, $p174);
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p175, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    $p177 := $load.ref($M.0, $p176);
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($add.ref($p35, $mul.ref(0, 296)), $mul.ref(136, 1)), $mul.ref(16, 1));
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    $p180 := $bitcast.ref.ref($p179);
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    $i181 := $load.i64($M.0, $p180);
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 872} vmci_q_header_init($p177, $i181);
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb60:
    assume $i152 == 1;
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p11, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    $i154 := $load.i32($M.0, $p153);
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p11, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    $i156 := $load.i32($M.0, $p155);
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} vslice_dummy_var_228 := printk.ref.i32.i32.i32(.str.163, $i154, $i156, $i151);
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    $i79 := $i151;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    $i187 := $p2i.ref.i64($p35);
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    $i188 := $ne.i64($i187, 0);
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    assume {:branchcond $i188} true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i188 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $i20 := $i79;
    goto $bb3;

  $bb66:
    assume $i188 == 1;
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p35, $mul.ref(0, 296)), $mul.ref(208, 1));
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    $p190 := $load.ref($M.0, $p189);
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 874} qp_host_free_queue($p190, $i41);
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($p35, $mul.ref(0, 296)), $mul.ref(216, 1));
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    $p192 := $load.ref($M.0, $p191);
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 875} qp_host_free_queue($p192, $i42);
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    $p193 := $bitcast.ref.ref($p35);
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} kfree($p193);
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb57:
    assume $i147 == 1;
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    $M.74 := $store.ref($M.74, $p10, $p34);
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb51:
    assume $i136 == 1;
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p35, $mul.ref(0, 296)), $mul.ref(208, 1));
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    $p138 := $load.ref($M.0, $p137);
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p35, $mul.ref(0, 296)), $mul.ref(216, 1));
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    $p140 := $load.ref($M.0, $p139);
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 864} $i141 := qp_host_register_user_memory($p6, $p138, $p140);
    call {:si_unique_call 865} {:cexpr "result"} boogie_si_record_i32($i141);
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    $i142 := $slt.i32($i141, 0);
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i142 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p35, $mul.ref(0, 296)), $mul.ref(200, 1));
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p143, 2);
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb53:
    assume $i142 == 1;
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    $i79 := $i141;
    goto $bb40;

  $bb45:
    assume $i92 == 1;
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($add.ref($p35, $mul.ref(0, 296)), $mul.ref(136, 1)), $mul.ref(32, 1));
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    $i95 := $load.i64($M.0, $p94);
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    $i96 := $add.i64($i95, 4095);
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    $i97 := $udiv.i64($i96, 4096);
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    $i98 := $trunc.i64.i32($i97);
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($add.ref($p35, $mul.ref(0, 296)), $mul.ref(136, 1)), $mul.ref(40, 1));
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    $i101 := $load.i64($M.0, $p100);
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    $i102 := $add.i64($i101, 4095);
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    $i103 := $udiv.i64($i102, 4096);
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    $i104 := $trunc.i64.i32($i103);
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    $i105 := $add.i32($i98, $i104);
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    $i106 := $add.i32($i105, 2);
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    $i107 := $zext.i32.i64($i106);
    goto corral_source_split_4004;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 862} $p108 := kcalloc($i107, 4096, 208);
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p35, $mul.ref(0, 296)), $mul.ref(288, 1));
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p109, $p108);
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p35, $mul.ref(0, 296)), $mul.ref(288, 1));
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    $p111 := $load.ref($M.0, $p110);
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    $i112 := $p2i.ref.i64($p111);
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    $i113 := $eq.i64($i112, 0);
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    assume {:branchcond $i113} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p35, $mul.ref(0, 296)), $mul.ref(200, 1));
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p114, 2);
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p35, $mul.ref(0, 296)), $mul.ref(288, 1));
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    $p116 := $load.ref($M.0, $p115);
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p35, $mul.ref(0, 296)), $mul.ref(208, 1));
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    $p119 := $load.ref($M.0, $p118);
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p119, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p120, $p116);
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p35, $mul.ref(0, 296)), $mul.ref(288, 1));
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    $p122 := $load.ref($M.0, $p121);
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($add.ref($p35, $mul.ref(0, 296)), $mul.ref(136, 1)), $mul.ref(32, 1));
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    $i125 := $load.i64($M.0, $p124);
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    $i126 := $add.i64($i125, 4095);
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    $i127 := $udiv.i64($i126, 4096);
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    $i128 := $add.i64($i127, 1);
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    $i129 := $mul.i64($i128, 4096);
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($p122, $mul.ref($i129, 1));
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p35, $mul.ref(0, 296)), $mul.ref(216, 1));
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    $p133 := $load.ref($M.0, $p132);
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p133, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p134, $p130);
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb47:
    assume $i113 == 1;
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    $i79 := $sub.i32(0, 3);
    goto $bb40;

  $bb42:
    assume $i85 == 1;
    goto corral_source_split_3980;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    $i79 := $sub.i32(0, 3);
    goto $bb40;

  $bb38:
    assume $i78 == 1;
    goto corral_source_split_3966;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    $i79 := $sub.i32(0, 3);
    goto $bb40;

  $bb32:
    assume $i39 == 1;
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i8.i1($i17);
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i40 == 1);
    call {:si_unique_call 855} {:cexpr "qp_broker_create:arg:guest_produce_size"} boogie_si_record_i64($i5);
    call {:si_unique_call 856} {:cexpr "qp_broker_create:arg:guest_consume_size"} boogie_si_record_i64($i4);
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    $i41, $i42 := $i5, $i4;
    goto $bb37;

  $bb35:
    assume {:verifier.code 0} true;
    assume $i40 == 1;
    goto $bb34;

  $bb29:
    assume $i37 == 1;
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, 3);
    goto $bb3;

  $bb21:
    assume $i31 == 1;
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i1, $sub.i32(0, 1));
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb23;

  $bb24:
    assume $i32 == 1;
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i14, $i1);
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb23;

  $bb26:
    assume $i33 == 1;
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, 7);
    goto $bb3;

  $bb11:
    assume $i27 == 1;
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    $i28 := $ugt.i32($i14, 2);
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb13;

  $bb14:
    assume $i28 == 1;
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i1, $sub.i32(0, 1));
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb13;

  $bb16:
    assume $i29 == 1;
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    $i30 := $ugt.i32($i1, 2);
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb13;

  $bb18:
    assume $i30 == 1;
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, 10);
    goto $bb3;

  $bb5:
    assume $i23 == 1;
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p11, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, $i1);
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb7;

  $bb8:
    assume $i26 == 1;
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, 7);
    goto $bb3;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, 21);
    goto $bb3;
}



const qp_broker_attach: ref;

axiom qp_broker_attach == $sub.ref(0, 603009);

procedure qp_broker_attach($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i64, $i5: i64, $p6: ref, $p7: ref, $p8: ref, $p9: ref, $p10: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.23, $M.20, $M.21, $M.74, $M.79, $M.45, $M.48, $CurrAddr, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.29, $M.2, $M.3, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.31, $M.87, $M.34, $M.30, $M.69, $M.35, $M.6, $M.13, $M.18, $M.19, $M.70, $M.44, $M.32, $M.108, $M.110, $M.112, $M.114, $M.24, $M.25, $M.26, $M.27, $M.28, $M.33, assertsPassed, $M.109, $M.111, $M.113, $M.115, $M.47, $M.89, $M.36, $M.38, $M.40, $M.42, $M.46, $M.90, $M.86, $M.91;



implementation qp_broker_attach($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i64, $i5: i64, $p6: ref, $p7: ref, $p8: ref, $p9: ref, $p10: ref) returns ($r: i32)
{
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $i14: i8;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $i22: i1;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $p42: ref;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $i46: i32;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $i50: i8;
  var $i51: i1;
  var $p52: ref;
  var $i53: i8;
  var $i54: i1;
  var $i55: i32;
  var $i56: i1;
  var $p58: ref;
  var $i59: i32;
  var $i60: i1;
  var $p62: ref;
  var $i63: i32;
  var $i64: i1;
  var $p65: ref;
  var $i66: i32;
  var $i67: i1;
  var $i68: i1;
  var $i69: i8;
  var $i70: i1;
  var $i71: i32;
  var $i72: i1;
  var $i73: i1;
  var $p74: ref;
  var $i75: i32;
  var $p76: ref;
  var $i77: i1;
  var $i78: i8;
  var $i79: i1;
  var $p81: ref;
  var $i82: i32;
  var $i83: i32;
  var $i84: i32;
  var $i85: i1;
  var $i86: i1;
  var $p88: ref;
  var $i89: i64;
  var $i90: i1;
  var $p92: ref;
  var $i93: i64;
  var $i94: i1;
  var $p96: ref;
  var $i97: i64;
  var $i98: i1;
  var $p100: ref;
  var $i101: i64;
  var $i102: i1;
  var $i103: i1;
  var $p104: ref;
  var $i105: i32;
  var $i106: i1;
  var $i107: i64;
  var $i108: i1;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $i113: i32;
  var $i114: i1;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $i118: i32;
  var $i119: i1;
  var $p120: ref;
  var $p121: ref;
  var $i122: i32;
  var $i123: i1;
  var $p125: ref;
  var $p126: ref;
  var $i127: i32;
  var $p128: ref;
  var $i129: i64;
  var $i130: i32;
  var $i131: i1;
  var $p132: ref;
  var $i133: i32;
  var $p136: ref;
  var $i137: i32;
  var $p140: ref;
  var $i141: i32;
  var $p143: ref;
  var $p145: ref;
  var $i146: i32;
  var $i147: i32;
  var $p149: ref;
  var $i150: i64;
  var $i151: i1;
  var $p152: ref;
  var $p153: ref;
  var $i154: i1;
  var $p156: ref;
  var $p157: ref;
  var $i158: i64;
  var $i160: i64;
  var $i161: i1;
  var $i21: i32;
  var vslice_dummy_var_230: i32;
  var vslice_dummy_var_231: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 877} {:cexpr "qp_broker_attach:arg:peer"} boogie_si_record_i32($i1);
    call {:si_unique_call 878} {:cexpr "qp_broker_attach:arg:flags"} boogie_si_record_i32($i2);
    call {:si_unique_call 879} {:cexpr "qp_broker_attach:arg:priv_flags"} boogie_si_record_i32($i3);
    call {:si_unique_call 880} {:cexpr "qp_broker_attach:arg:produce_size"} boogie_si_record_i64($i4);
    call {:si_unique_call 881} {:cexpr "qp_broker_attach:arg:consume_size"} boogie_si_record_i64($i5);
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} $i11 := vmci_ctx_get_id($p7);
    call {:si_unique_call 883} {:cexpr "tmp"} boogie_si_record_i32($i11);
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i2, 2);
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i8($i13);
    call {:si_unique_call 884} {:cexpr "is_local"} boogie_si_record_i8($i14);
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(200, 1));
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 1);
    goto corral_source_split_4130;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i8.i1($i14);
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i22 == 1);
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(192, 1));
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_4151;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, $i11);
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb17, $bb19;

  $bb19:
    assume !($i33 == 1);
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(196, 1));
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, $i11);
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i11, $sub.i32(0, 1));
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p7, $mul.ref(0, 304)), $mul.ref(272, 1));
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    $i47 := $and.i32($i46, 1);
    goto corral_source_split_4183;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i48 == 1);
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(204, 1));
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.0, $p52);
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    $i54 := $trunc.i8.i1($i53);
    goto corral_source_split_4195;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume !($i54 == 1);
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(136, 1)), $mul.ref(24, 1));
    goto corral_source_split_4203;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p58);
    goto corral_source_split_4204;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i59, $sub.i32(0, 1));
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb45, $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    assume !($i60 == 1);
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(192, 1));
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.0, $p65);
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    $i67 := $eq.i32($i66, 2);
    goto corral_source_split_4216;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    assume {:branchcond $i67} true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i67 == 1);
    goto corral_source_split_4223;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    $i73 := $eq.i32($i11, 2);
    goto corral_source_split_4224;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    assume {:branchcond $i73} true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(136, 1)), $mul.ref(28, 1));
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.0, $p81);
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    $i83 := $and.i32($i82, $sub.i32(0, 13));
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    $i84 := $and.i32($i2, $sub.i32(0, 14));
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    $i85 := $ne.i32($i83, $i84);
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $i86 := $ne.i32($i11, 2);
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i86 == 1);
    goto corral_source_split_4259;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(136, 1)), $mul.ref(32, 1));
    goto corral_source_split_4260;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    $i97 := $load.i64($M.0, $p96);
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    $i98 := $ne.i64($i97, $i5);
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    assume {:branchcond $i98} true;
    goto $bb78, $bb80;

  $bb80:
    assume !($i98 == 1);
    goto corral_source_split_4271;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(136, 1)), $mul.ref(40, 1));
    goto corral_source_split_4272;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    $i101 := $load.i64($M.0, $p100);
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    $i102 := $ne.i64($i101, $i4);
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $i103 := $ne.i32($i11, 2);
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    assume {:branchcond $i103} true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i103 == 1);
    goto corral_source_split_4281;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(200, 1));
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    $i118 := $load.i32($M.0, $p117);
    goto corral_source_split_4283;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    $i119 := $eq.i32($i118, 1);
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  $bb97:
    assume !($i119 == 1);
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(200, 1));
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p120, 4);
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(200, 1));
    goto corral_source_split_4307;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    $i122 := $load.i32($M.0, $p121);
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    $i123 := $eq.i32($i122, 4);
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    assume {:branchcond $i123} true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i123 == 1);
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(196, 1));
    goto corral_source_split_4334;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p143, $i11);
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(136, 1)), $mul.ref(48, 1));
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    $i146 := $load.i32($M.0, $p145);
    goto corral_source_split_4337;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    $i147 := $add.i32($i146, 1);
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(136, 1)), $mul.ref(48, 1));
    goto corral_source_split_4339;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p149, $i147);
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    $i150 := $p2i.ref.i64($p8);
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    $i151 := $ne.i64($i150, 0);
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    assume {:branchcond $i151} true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i151 == 1);
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    $i154 := $trunc.i8.i1($i14);
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    assume {:branchcond $i154} true;
    goto $bb108, $bb109;

  $bb109:
    assume !($i154 == 1);
    goto corral_source_split_4352;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(136, 1)), $mul.ref(16, 1));
    goto corral_source_split_4353;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    $p157 := $bitcast.ref.ref($p156);
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    $i158 := $load.i64($M.0, $p157);
    goto corral_source_split_4355;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 896} vslice_dummy_var_231 := vmci_ctx_qp_create($p7, $i158);
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    $i160 := $p2i.ref.i64($p10);
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    $i161 := $ne.i64($i160, 0);
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    assume {:branchcond $i161} true;
    goto $bb111, $bb112;

  $bb112:
    assume !($i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    $i21 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    $r := $i21;
    return;

  $bb111:
    assume $i161 == 1;
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    $M.74 := $store.ref($M.74, $p10, $p0);
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb108:
    assume $i154 == 1;
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb105:
    assume $i151 == 1;
    goto corral_source_split_4344;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(272, 1));
    goto corral_source_split_4345;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p152, $p8);
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(280, 1));
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p153, $p9);
    goto corral_source_split_4348;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb99:
    assume $i123 == 1;
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(136, 1)), $mul.ref(16, 1));
    goto corral_source_split_4317;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(192, 1));
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    $i127 := $load.i32($M.0, $p126);
    goto corral_source_split_4319;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    $p128 := $bitcast.ref.ref($p125);
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    $i129 := $load.i64($M.0, $p128);
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 893} $i130 := qp_notify_peer(1, $i129, $i11, $i127);
    goto SeqInstr_229, SeqInstr_230;

  SeqInstr_230:
    assume assertsPassed;
    goto SeqInstr_231;

  SeqInstr_231:
    call {:si_unique_call 894} {:cexpr "result"} boogie_si_record_i32($i130);
    goto corral_source_split_4322;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    $i131 := $slt.i32($i130, 0);
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    assume {:branchcond $i131} true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i131 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb101:
    assume $i131 == 1;
    goto corral_source_split_4325;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(192, 1));
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    $i133 := $load.i32($M.0, $p132);
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    $i137 := $load.i32($M.0, $p136);
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(4, 1));
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    $i141 := $load.i32($M.0, $p140);
    goto corral_source_split_4331;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 895} vslice_dummy_var_230 := printk.ref.i32.i32.i32(.str.49, $i133, $i137, $i141);
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    goto $bb103;

  SeqInstr_229:
    assume !assertsPassed;
    return;

  $bb96:
    assume $i119 == 1;
    goto corral_source_split_4311;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    $i21 := $sub.i32(0, 20);
    goto $bb6;

  $bb84:
    assume $i103 == 1;
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(200, 1));
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    $i105 := $load.i32($M.0, $p104);
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    $i106 := $ne.i32($i105, 1);
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    assume {:branchcond $i106} true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    $i107 := $p2i.ref.i64($p6);
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    $i108 := $ne.i64($i107, 0);
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    assume {:branchcond $i108} true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i108 == 1);
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(200, 1));
    goto corral_source_split_4300;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p116, 3);
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb89:
    assume $i108 == 1;
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(208, 1));
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    $p110 := $load.ref($M.0, $p109);
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(216, 1));
    goto corral_source_split_4294;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    $p112 := $load.ref($M.0, $p111);
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 891} $i113 := qp_host_register_user_memory($p6, $p110, $p112);
    call {:si_unique_call 892} {:cexpr "result"} boogie_si_record_i32($i113);
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    $i114 := $slt.i32($i113, 0);
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    assume {:branchcond $i114} true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(200, 1));
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p115, 4);
    goto corral_source_split_4305;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb91:
    assume $i114 == 1;
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    $i21 := $i113;
    goto $bb6;

  $bb86:
    assume $i106 == 1;
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    $i21 := $sub.i32(0, 2);
    goto $bb6;

  $bb81:
    assume {:verifier.code 0} true;
    assume $i102 == 1;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $i21 := $sub.i32(0, 31);
    goto $bb6;

  $bb78:
    assume {:verifier.code 0} true;
    assume $i98 == 1;
    goto $bb79;

  $bb69:
    assume $i86 == 1;
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(136, 1)), $mul.ref(32, 1));
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    $i89 := $load.i64($M.0, $p88);
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    $i90 := $ne.i64($i89, $i4);
    goto corral_source_split_4257;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    assume {:branchcond $i90} true;
    goto $bb71, $bb73;

  $bb73:
    assume !($i90 == 1);
    goto corral_source_split_4264;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(136, 1)), $mul.ref(40, 1));
    goto corral_source_split_4265;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    $i93 := $load.i64($M.0, $p92);
    goto corral_source_split_4266;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    $i94 := $ne.i64($i93, $i5);
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    assume {:branchcond $i94} true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb74:
    assume {:verifier.code 0} true;
    assume $i94 == 1;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $i21 := $sub.i32(0, 31);
    goto $bb6;

  $bb71:
    assume {:verifier.code 0} true;
    assume $i90 == 1;
    goto $bb72;

  $bb66:
    assume $i85 == 1;
    goto corral_source_split_4250;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    $i21 := $sub.i32(0, 31);
    goto $bb6;

  $bb60:
    assume $i73 == 1;
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(192, 1));
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.0, $p74);
    goto corral_source_split_4241;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 887} $p76 := vmci_ctx_get($i75);
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 888} $i77 := vmci_ctx_supports_host_qp($p76);
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    $i78 := $zext.i1.i8($i77);
    call {:si_unique_call 889} {:cexpr "supports_host_qp"} boogie_si_record_i8($i78);
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} vmci_ctx_put($p76);
    goto SeqInstr_226, SeqInstr_227;

  SeqInstr_227:
    assume assertsPassed;
    goto SeqInstr_228;

  SeqInstr_228:
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    $i79 := $trunc.i8.i1($i78);
    goto corral_source_split_4246;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    assume {:branchcond $i79} true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i79 == 1);
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    $i21 := $sub.i32(0, 1);
    goto $bb6;

  $bb62:
    assume $i79 == 1;
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb65;

  SeqInstr_226:
    assume !assertsPassed;
    return;

  $bb51:
    assume $i67 == 1;
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} $i68 := vmci_ctx_supports_host_qp($p7);
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    $i69 := $zext.i1.i8($i68);
    call {:si_unique_call 886} {:cexpr "tmp___0"} boogie_si_record_i8($i69);
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    $i70 := $trunc.i8.i1($i69);
    goto corral_source_split_4221;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    $i71 := 1;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    $i72 := $ne.i32($i71, 0);
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    assume {:branchcond $i72} true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb56:
    assume $i72 == 1;
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    $i21 := $sub.i32(0, 1);
    goto $bb6;

  $bb53:
    assume $i70 == 1;
    goto corral_source_split_4226;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    $i71 := 0;
    goto $bb55;

  $bb45:
    assume $i60 == 1;
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(136, 1)), $mul.ref(24, 1));
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.0, $p62);
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i63, $i11);
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    assume !($i64 == 1);
    goto $bb47;

  $bb48:
    assume $i64 == 1;
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    $i21 := $sub.i32(0, 7);
    goto $bb6;

  $bb39:
    assume $i54 == 1;
    goto corral_source_split_4197;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    $i55 := $and.i32($i3, 2);
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    $i56 := $eq.i32($i55, 0);
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    assume !($i56 == 1);
    goto $bb41;

  $bb42:
    assume $i56 == 1;
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    $i21 := $sub.i32(0, 7);
    goto $bb6;

  $bb33:
    assume $i48 == 1;
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(205, 1));
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    $i50 := $load.i8($M.0, $p49);
    goto corral_source_split_4188;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i8.i1($i50);
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i51 == 1);
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    $i21 := $sub.i32(0, 7);
    goto $bb6;

  $bb36:
    assume {:verifier.code 0} true;
    assume $i51 == 1;
    goto $bb35;

  $bb23:
    assume $i37 == 1;
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    $i38 := $ugt.i32($i11, 2);
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb25;

  $bb26:
    assume $i38 == 1;
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(192, 1));
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, $sub.i32(0, 1));
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb25;

  $bb28:
    assume $i41 == 1;
    goto corral_source_split_4174;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(192, 1));
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    $i44 := $ugt.i32($i43, 2);
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb25;

  $bb30:
    assume $i44 == 1;
    goto corral_source_split_4179;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    $i21 := $sub.i32(0, 10);
    goto $bb6;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i36 == 1;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i21 := $sub.i32(0, 22);
    goto $bb6;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i33 == 1;
    goto $bb18;

  $bb8:
    assume $i22 == 1;
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(136, 1)), $mul.ref(28, 1));
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i25, 2);
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 0);
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb10, $bb12;

  $bb12:
    assume !($i27 == 1);
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(192, 1));
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, $i11);
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i30 == 1;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i21 := $sub.i32(0, 2);
    goto $bb6;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i27 == 1;
    goto $bb11;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(200, 1));
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 2);
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb3;

  $bb4:
    assume $i20 == 1;
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    $i21 := $sub.i32(0, 20);
    goto $bb6;
}



const ldv_mutex_unlock_223: ref;

axiom ldv_mutex_unlock_223 == $sub.ref(0, 604041);

procedure ldv_mutex_unlock_223($p0: ref);
  free requires assertsPassed;
  modifies $M.28, assertsPassed;



implementation ldv_mutex_unlock_223($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 897} ldv_mutex_unlock_mutex_of_qp_list($p0);
    goto SeqInstr_232, SeqInstr_233;

  SeqInstr_233:
    assume assertsPassed;
    goto SeqInstr_234;

  SeqInstr_234:
    goto corral_source_split_4365;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 898} mutex_unlock($p0);
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_232:
    assume !assertsPassed;
    return;
}



const vmci_ctx_supports_host_qp: ref;

axiom vmci_ctx_supports_host_qp == $sub.ref(0, 605073);

procedure vmci_ctx_supports_host_qp($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation vmci_ctx_supports_host_qp($p0: ref) returns ($r: i1)
{
  var $i1: i64;
  var $i2: i1;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    $i3 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4376;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_4372;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(56, 1));
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    $i6 := $sgt.i32($i5, 589823);
    assume {:verifier.code 0} true;
    $i3 := $i6;
    goto $bb3;
}



const qp_host_register_user_memory: ref;

axiom qp_host_register_user_memory == $sub.ref(0, 606105);

procedure qp_host_register_user_memory($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.0, $CurrAddr;



implementation qp_host_register_user_memory($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i64;
  var $i12: i64;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.78, $p3);
    call {:si_unique_call 899} {:cexpr "produce_uva"} boogie_si_record_i64($i4);
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.78, $p5);
    goto corral_source_split_4382;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 200)), $mul.ref(168, 1));
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    $i10 := $load.i64($M.0, $p9);
    goto corral_source_split_4386;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    $i11 := $mul.i64($i10, 4096);
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    $i12 := $add.i64($i6, $i11);
    call {:si_unique_call 900} {:cexpr "consume_uva"} boogie_si_record_i64($i12);
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 901} $i13 := qp_host_get_user_memory($i4, $i12, $p1, $p2);
    call {:si_unique_call 902} {:cexpr "tmp"} boogie_si_record_i32($i13);
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;
}



const vmci_ctx_qp_create: ref;

axiom vmci_ctx_qp_create == $sub.ref(0, 607137);

procedure vmci_ctx_qp_create($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.79, $M.45, $M.20, $M.21, $M.48, $M.0, $CurrAddr;



implementation vmci_ctx_qp_create($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $i10: i8;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $i17: i8;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 903} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    assume {:verifier.code 0} true;
    $M.79 := $store.i64($M.79, $p3, $i1);
    goto corral_source_split_4391;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_4392;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_4397;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p2);
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.79, $p7);
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 904} $i9 := vmci_handle_is_invalid($i8);
    goto corral_source_split_4400;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i8($i9);
    call {:si_unique_call 905} {:cexpr "tmp"} boogie_si_record_i8($i10);
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i10);
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(136, 1));
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p2);
    goto corral_source_split_4410;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    $i15 := $load.i64($M.79, $p14);
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 906} $i16 := vmci_handle_arr_has_entry($p13, $i15);
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i8($i16);
    call {:si_unique_call 907} {:cexpr "tmp___0"} boogie_si_record_i8($i17);
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i8.i1($i17);
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i19 := 1;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_4418;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_4419;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i24 := $sub.i32(0, 9);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    $i6 := $i24;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb11:
    assume $i20 == 1;
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(136, 1));
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p2);
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    $i23 := $load.i64($M.79, $p22);
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 908} vmci_handle_arr_append_entry($p21, $i23);
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    $i24 := 0;
    goto $bb13;

  $bb8:
    assume $i18 == 1;
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb10;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 2);
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 2);
    goto $bb3;
}



const qp_host_get_user_memory: ref;

axiom qp_host_get_user_memory == $sub.ref(0, 608169);

procedure qp_host_get_user_memory($i0: i64, $i1: i64, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.0, $CurrAddr;



implementation qp_host_get_user_memory($i0: i64, $i1: i64, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i64;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i24;
  var $i31: i24;
  var $i32: i24;
  var $p33: ref;
  var $p34: ref;
  var $i35: i8;
  var $i36: i64;
  var $i37: i64;
  var $i38: i64;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i64;
  var $i52: i32;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $i60: i64;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i64;
  var $i65: i1;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i24;
  var $i73: i24;
  var $i74: i24;
  var $p75: ref;
  var $p76: ref;
  var $i77: i8;
  var $i78: i64;
  var $i79: i64;
  var $i80: i64;
  var $i81: i1;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $i88: i64;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $i98: i64;
  var $i99: i32;
  var $i47: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 909} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 910} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 911} {:cexpr "qp_host_get_user_memory:arg:produce_uva"} boogie_si_record_i64($i0);
    call {:si_unique_call 912} {:cexpr "qp_host_get_user_memory:arg:consume_uva"} boogie_si_record_i64($i1);
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_4430;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 200)), $mul.ref(168, 1));
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.0, $p8);
    goto corral_source_split_4433;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i64.i32($i9);
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 200)), $mul.ref(184, 1));
    goto corral_source_split_4437;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_4438;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 913} $i17 := get_user_pages_fast($i0, $i10, 1, $p16);
    call {:si_unique_call 914} {:cexpr "retval"} boogie_si_record_i32($i17);
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i17);
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 200)), $mul.ref(168, 1));
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    $i22 := $load.i64($M.0, $p21);
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    $i23 := $ult.i64($i18, $i22);
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p49, $mul.ref(0, 200)), $mul.ref(168, 1));
    goto corral_source_split_4489;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    $i51 := $load.i64($M.0, $p50);
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i64.i32($i51);
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_4492;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p54, $mul.ref(0, 200)), $mul.ref(184, 1));
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p55);
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p56, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_4497;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 919} $i59 := get_user_pages_fast($i1, $i52, 1, $p58);
    call {:si_unique_call 920} {:cexpr "retval"} boogie_si_record_i32($i59);
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    $i60 := $sext.i32.i64($i59);
    goto corral_source_split_4499;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_4501;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p62, $mul.ref(0, 200)), $mul.ref(168, 1));
    goto corral_source_split_4502;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    $i64 := $load.i64($M.0, $p63);
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    $i65 := $ult.i64($i60, $i64);
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    $i99 := 0;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_4553;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    $i47 := $i99;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4485;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    $r := $i47;
    return;

  $bb8:
    assume $i65 == 1;
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4507;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    $M.80 := $store.ref($M.80, $p66, .str.39);
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4509;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    $M.81 := $store.ref($M.81, $p67, .str.169);
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    $M.82 := $store.ref($M.82, $p68, .str.170);
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    $M.83 := $store.ref($M.83, $p69, .str.172);
    goto corral_source_split_4514;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p70);
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    $i72 := $load.i24($M.84, $p71);
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    $i73 := $and.i24($i72, $sub.i24(0, 262144));
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    $i74 := $or.i24($i73, 766);
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    $M.84 := $store.i24($M.84, $p71, $i74);
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    $M.85 := $store.i8($M.85, $p75, 0);
    goto corral_source_split_4522;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    $i77 := $load.i8($M.85, $p76);
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    $i78 := $zext.i8.i64($i77);
    goto corral_source_split_4525;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    $i79 := $and.i64($i78, 1);
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 921} $i80 := ldv__builtin_expect($i79, 0);
    call {:si_unique_call 922} {:cexpr "tmp___0"} boogie_si_record_i64($i80);
    goto corral_source_split_4527;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    $i81 := $ne.i64($i80, 0);
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    assume {:branchcond $i81} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.0, $p82);
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p83, $mul.ref(0, 200)), $mul.ref(184, 1));
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    $p85 := $bitcast.ref.ref($p84);
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p85, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4537;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    $p87 := $load.ref($M.0, $p86);
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    $i88 := $sext.i32.i64($i59);
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 924} qp_release_pages($p87, $i88, 0);
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    $p90 := $load.ref($M.0, $p89);
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p90, $mul.ref(0, 200)), $mul.ref(184, 1));
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    $p92 := $bitcast.ref.ref($p91);
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p92, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4545;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    $p94 := $load.ref($M.0, $p93);
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    $p96 := $load.ref($M.0, $p95);
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p96, $mul.ref(0, 200)), $mul.ref(168, 1));
    goto corral_source_split_4549;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    $i98 := $load.i64($M.0, $p97);
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 925} qp_release_pages($p94, $i98, 0);
    goto corral_source_split_4551;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    $i99 := $sub.i32(0, 3);
    goto $bb13;

  $bb10:
    assume $i81 == 1;
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 923} __dynamic_pr_debug.ref.ref.i32($p5, .str.172, $i59);
    goto corral_source_split_4531;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i23 == 1;
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    $M.80 := $store.ref($M.80, $p24, .str.39);
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    $M.81 := $store.ref($M.81, $p25, .str.169);
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    $M.82 := $store.ref($M.82, $p26, .str.170);
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    $M.83 := $store.ref($M.83, $p27, .str.171);
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    $i30 := $load.i24($M.84, $p29);
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    $i31 := $and.i24($i30, $sub.i24(0, 262144));
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    $i32 := $or.i24($i31, 754);
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    $M.84 := $store.i24($M.84, $p29, $i32);
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    $M.85 := $store.i8($M.85, $p33, 0);
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4466;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.85, $p34);
    goto corral_source_split_4467;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i64($i35);
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    $i37 := $and.i64($i36, 1);
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 915} $i38 := ldv__builtin_expect($i37, 0);
    call {:si_unique_call 916} {:cexpr "tmp"} boogie_si_record_i64($i38);
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    $i39 := $ne.i64($i38, 0);
    goto corral_source_split_4471;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_4477;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 200)), $mul.ref(184, 1));
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p43, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4480;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_4481;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    $i46 := $sext.i32.i64($i17);
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 918} qp_release_pages($p45, $i46, 0);
    goto corral_source_split_4483;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    $i47 := $sub.i32(0, 3);
    goto $bb6;

  $bb3:
    assume $i39 == 1;
    goto corral_source_split_4473;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 917} __dynamic_pr_debug.ref.ref.i32($p4, .str.171, $i17);
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const get_user_pages_fast: ref;

axiom get_user_pages_fast == $sub.ref(0, 609201);

procedure get_user_pages_fast($i0: i64, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation get_user_pages_fast($i0: i64, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 926} {:cexpr "get_user_pages_fast:arg:arg0"} boogie_si_record_i64($i0);
    call {:si_unique_call 927} {:cexpr "get_user_pages_fast:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 928} {:cexpr "get_user_pages_fast:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_4555;

  corral_source_split_4555:
    assume {:verifier.code 1} true;
    call {:si_unique_call 929} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 930} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_4556;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const __dynamic_pr_debug: ref;

axiom __dynamic_pr_debug == $sub.ref(0, 610233);

procedure __dynamic_pr_debug.ref.ref($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4558;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_pr_debug.ref.ref.i32($p0: ref, $p1: ref, p.2: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.i32($p0: ref, $p1: ref, p.2: i32)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    return;
}



const qp_host_alloc_queue: ref;

axiom qp_host_alloc_queue == $sub.ref(0, 611265);

procedure qp_host_alloc_queue($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation qp_host_alloc_queue($i0: i64) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $i3: i64;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i8: i64;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 931} {:cexpr "qp_host_alloc_queue:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    $i1 := $add.i64($i0, 4095);
    goto corral_source_split_4563;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    $i2 := $udiv.i64($i1, 4096);
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, 1);
    call {:si_unique_call 932} {:cexpr "num_pages"} boogie_si_record_i64($i3);
    goto corral_source_split_4565;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    $i4 := $xor.i64(224, $sub.i64(0, 1));
    goto corral_source_split_4566;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    $i5 := $udiv.i64($i4, 8);
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    $i6 := $ult.i64($i5, $i3);
    goto corral_source_split_4568;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i8 := $mul.i64($i3, 8);
    call {:si_unique_call 933} {:cexpr "queue_page_size"} boogie_si_record_i64($i8);
    goto corral_source_split_4574;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    $i9 := $add.i64(224, $i8);
    goto corral_source_split_4575;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 934} $p10 := kzalloc($i9, 208);
    goto corral_source_split_4576;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_4579;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p7 := $p10;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_4581;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p11, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_4582;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p14, $0.ref);
    goto corral_source_split_4583;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p11, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_4584;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p15, $0.ref);
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p11);
    goto corral_source_split_4586;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p16, $mul.ref(1, 200));
    goto corral_source_split_4587;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p11, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_4588;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p18, $p17);
    goto corral_source_split_4589;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p11, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_4590;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_4591;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 200)), $mul.ref(176, 1));
    goto corral_source_split_4592;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p21, 1);
    goto corral_source_split_4593;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p11, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_4595;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 200)), $mul.ref(160, 1));
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p24, $0.ref);
    goto corral_source_split_4597;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p11, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_4598;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 200)), $mul.ref(168, 1));
    goto corral_source_split_4600;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p27, $i3);
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p11);
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($p28, $mul.ref(224, 8));
    goto corral_source_split_4603;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p11, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_4604;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_4605;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 200)), $mul.ref(184, 1));
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_4607;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p34, $p29);
    goto corral_source_split_4609;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p11, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_4610;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_4611;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 200)), $mul.ref(184, 1));
    goto corral_source_split_4612;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_4615;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($p40, $mul.ref(1, 8));
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p11, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_4618;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p43, $mul.ref(0, 200)), $mul.ref(184, 1));
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_4620;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p45, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4621;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p46, $p41);
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_4570;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    $p7 := $0.ref;
    goto $bb3;
}



const qp_init_queue_mutex: ref;

axiom qp_init_queue_mutex == $sub.ref(0, 612297);

procedure qp_init_queue_mutex($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation qp_init_queue_mutex($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 935} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_4624;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_4626;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 200)), $mul.ref(176, 1));
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_4628;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i6);
    goto corral_source_split_4629;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_4633;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    goto corral_source_split_4634;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_4636;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 200)), $mul.ref(160, 1));
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, $p9);
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_4639;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    goto corral_source_split_4641;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_4643;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 200)), $mul.ref(160, 1));
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p19, $p15);
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_4647;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 200)), $mul.ref(160, 1));
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_4649;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 936} __mutex_init($p23, .str.164, $p2);
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const kcalloc: ref;

axiom kcalloc == $sub.ref(0, 613329);

procedure kcalloc($i0: i64, $i1: i64, $i2: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kcalloc($i0: i64, $i1: i64, $i2: i32) returns ($r: ref)
{
  var $i3: i32;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 937} {:cexpr "kcalloc:arg:n"} boogie_si_record_i64($i0);
    call {:si_unique_call 938} {:cexpr "kcalloc:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 939} {:cexpr "kcalloc:arg:flags"} boogie_si_record_i32($i2);
    goto corral_source_split_4652;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    $i3 := $or.i32($i2, 32768);
    goto corral_source_split_4653;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 940} $p4 := kmalloc_array($i0, $i1, $i3);
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const qp_list_add_entry: ref;

axiom qp_list_add_entry == $sub.ref(0, 614361);

procedure qp_list_add_entry($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation qp_list_add_entry($p0: ref, $p1: ref)
{
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4656;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_4657;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_4661;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(0, 1));
    goto corral_source_split_4662;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 941} list_add($p4, $p5);
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vmci_q_header_init: ref;

axiom vmci_q_header_init == $sub.ref(0, 615393);

procedure vmci_q_header_init($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation vmci_q_header_init($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var cmdloc_dummy_var_91: [ref]i8;
  var cmdloc_dummy_var_92: [ref]i8;
  var cmdloc_dummy_var_93: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 942} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p3, $i1);
    goto corral_source_split_4665;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_4667;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p2);
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_91 := $M.0;
    cmdloc_dummy_var_92 := $M.0;
    call {:si_unique_call 943} cmdloc_dummy_var_93 := $memcpy.i8(cmdloc_dummy_var_91, cmdloc_dummy_var_92, $p5, $p6, 8, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_93;
    goto corral_source_split_4669;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_4670;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 944} atomic64_set($p7, 0);
    goto corral_source_split_4671;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 945} atomic64_set($p8, 0);
    goto corral_source_split_4673;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    return;
}



const atomic64_set: ref;

axiom atomic64_set == $sub.ref(0, 616425);

procedure atomic64_set($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation atomic64_set($p0: ref, $i1: i64)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 946} {:cexpr "atomic64_set:arg:i"} boogie_si_record_i64($i1);
    goto corral_source_split_4675;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p2, $i1);
    goto corral_source_split_4677;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    return;
}



const kmalloc_array: ref;

axiom kmalloc_array == $sub.ref(0, 617457);

procedure kmalloc_array($i0: i64, $i1: i64, $i2: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kmalloc_array($i0: i64, $i1: i64, $i2: i32) returns ($r: ref)
{
  var $i3: i1;
  var $i4: i64;
  var $i5: i1;
  var $i7: i64;
  var $p8: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 947} {:cexpr "kmalloc_array:arg:n"} boogie_si_record_i64($i0);
    call {:si_unique_call 948} {:cexpr "kmalloc_array:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 949} {:cexpr "kmalloc_array:arg:flags"} boogie_si_record_i32($i2);
    goto corral_source_split_4679;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i1, 0);
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 950} $p8 := __kmalloc($i7, $i2);
    goto corral_source_split_4691;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    $p6 := $p8;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    $i4 := $udiv.i64($sub.i64(0, 1), $i1);
    goto corral_source_split_4683;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    $i5 := $ult.i64($i4, $i0);
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    $p6 := $0.ref;
    goto $bb6;
}



const __mutex_init: ref;

axiom __mutex_init == $sub.ref(0, 618489);

procedure __mutex_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __mutex_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_lock_217: ref;

axiom ldv_mutex_lock_217 == $sub.ref(0, 619521);

procedure ldv_mutex_lock_217($p0: ref);



const qp_guest_handle_to_entry: ref;

axiom qp_guest_handle_to_entry == $sub.ref(0, 620553);

procedure qp_guest_handle_to_entry($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.86, $M.47, $M.23, $M.20, $M.21, $CurrAddr;



implementation qp_guest_handle_to_entry($i0: i64) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 951} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    assume {:verifier.code 0} true;
    $M.86 := $store.i64($M.86, $p2, $i0);
    goto corral_source_split_4695;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.86, $p3);
    goto corral_source_split_4697;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 952} $p5 := qp_list_find(qp_guest_endpoints, $i4);
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_4699;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_4700;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $p10 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4706;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    $r := $p10;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_4702;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p5);
    goto corral_source_split_4703;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p8, $mul.ref($sub.ref(0, 136), 256));
    goto corral_source_split_4704;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    $p10 := $p9;
    goto $bb3;
}



const qp_notify_peer_local: ref;

axiom qp_notify_peer_local == $sub.ref(0, 621585);

procedure qp_notify_peer_local($i0: i1, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.44, $CurrAddr;



implementation qp_notify_peer_local($i0: i1, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p25: ref;
  var $i26: i1;
  var $i27: i32;
  var $p30: ref;
  var $p32: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p38: ref;
  var $i39: i32;
  var cmdloc_dummy_var_94: [ref]i8;
  var cmdloc_dummy_var_95: [ref]i8;
  var cmdloc_dummy_var_96: [ref]i8;
  var cmdloc_dummy_var_97: [ref]i8;
  var cmdloc_dummy_var_98: [ref]i8;
  var cmdloc_dummy_var_99: [ref]i8;
  var cmdloc_dummy_var_100: [ref]i8;
  var cmdloc_dummy_var_101: [ref]i8;
  var cmdloc_dummy_var_102: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 953} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 954} $p3 := $alloc($mul.ref(48, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 955} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 956} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p2);
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p6, $i1);
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i0);
    call {:si_unique_call 957} {:cexpr "qp_notify_peer_local:arg:attach"} boogie_si_record_i1($i0);
    goto corral_source_split_4708;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 958} $i8 := vmci_get_context_id();
    call {:si_unique_call 959} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_4709;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_4710;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, $i8);
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_4712;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, 0);
    goto corral_source_split_4713;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_4715;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p4);
    goto corral_source_split_4716;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_94 := $M.0;
    cmdloc_dummy_var_95 := $M.0;
    call {:si_unique_call 960} cmdloc_dummy_var_96 := $memcpy.i8(cmdloc_dummy_var_94, cmdloc_dummy_var_95, $p14, $p15, 8, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_96;
    goto corral_source_split_4717;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_4718;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, 0);
    goto corral_source_split_4719;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, 0);
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p5);
    goto corral_source_split_4724;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_97 := $M.0;
    cmdloc_dummy_var_98 := $M.0;
    call {:si_unique_call 961} cmdloc_dummy_var_99 := $memcpy.i8(cmdloc_dummy_var_97, cmdloc_dummy_var_98, $p21, $p22, 8, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_99;
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p25, 24);
    goto corral_source_split_4727;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i8.i1($i7);
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    $i27 := (if $i26 == 1 then 3 else 4);
    goto corral_source_split_4729;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_4730;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, $i27);
    goto corral_source_split_4731;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(32, 1)), $mul.ref(8, 1));
    goto corral_source_split_4732;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, $i8);
    goto corral_source_split_4733;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p2);
    goto corral_source_split_4736;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_100 := $M.0;
    cmdloc_dummy_var_101 := $M.0;
    call {:si_unique_call 962} cmdloc_dummy_var_102 := $memcpy.i8(cmdloc_dummy_var_100, cmdloc_dummy_var_101, $p35, $p36, 8, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_102;
    goto corral_source_split_4737;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 963} $i39 := vmci_event_dispatch($p38);
    call {:si_unique_call 964} {:cexpr "tmp___0"} boogie_si_record_i32($i39);
    goto corral_source_split_4739;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    $r := $i39;
    return;
}



const qp_alloc_queue: ref;

axiom qp_alloc_queue == $sub.ref(0, 622617);

procedure qp_alloc_queue($i0: i64, $i1: i32) returns ($r: ref);



const qp_guest_endpoint_create: ref;

axiom qp_guest_endpoint_create == $sub.ref(0, 623649);

procedure qp_guest_endpoint_create($i0: i64, $i1: i32, $i2: i32, $i3: i64, $i4: i64, $p5: ref, $p6: ref) returns ($r: ref);



const qp_alloc_ppn_set: ref;

axiom qp_alloc_ppn_set == $sub.ref(0, 624681);

procedure qp_alloc_ppn_set($p0: ref, $i1: i64, $p2: ref, $i3: i64, $p4: ref) returns ($r: i32);



const qp_alloc_hypercall: ref;

axiom qp_alloc_hypercall == $sub.ref(0, 625713);

procedure qp_alloc_hypercall($p0: ref) returns ($r: i32);



const ldv_mutex_unlock_218: ref;

axiom ldv_mutex_unlock_218 == $sub.ref(0, 626745);

procedure ldv_mutex_unlock_218($p0: ref);



const ldv_mutex_unlock_219: ref;

axiom ldv_mutex_unlock_219 == $sub.ref(0, 627777);

procedure ldv_mutex_unlock_219($p0: ref);



const qp_guest_endpoint_destroy: ref;

axiom qp_guest_endpoint_destroy == $sub.ref(0, 628809);

procedure qp_guest_endpoint_destroy($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.20, $M.21, $M.33, $CurrAddr, $M.2, $M.3, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.31, $M.87, $M.6, $M.13, $M.18, $M.19, $M.69, $M.70, $M.23, $M.24, $M.25, $M.26, $M.27, $M.108, $M.110, $M.112, $M.114, $M.28, assertsPassed, $M.29, $M.45, $M.48, $M.47, $M.89, $M.109, $M.111, $M.113, $M.115, $M.34, $M.30, $M.35, $M.46, $M.90, $M.86, $M.91, $M.44, $M.32, $M.36, $M.38, $M.40, $M.42;



implementation qp_guest_endpoint_destroy($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $i12: i64;
  var $p13: ref;
  var $p14: ref;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;
  var $p19: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4741;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 256)), $mul.ref(216, 1));
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 965} qp_free_ppn_set($p1);
    goto corral_source_split_4743;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 256)), $mul.ref(200, 1));
    goto corral_source_split_4744;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_4745;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4746;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 256)), $mul.ref(208, 1));
    goto corral_source_split_4747;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_4748;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_4749;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 966} qp_cleanup_queue_mutex($p4, $p7);
    goto corral_source_split_4750;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 256)), $mul.ref(200, 1));
    goto corral_source_split_4751;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_4752;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 256)), $mul.ref(136, 1)), $mul.ref(32, 1));
    goto corral_source_split_4753;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    $i12 := $load.i64($M.0, $p11);
    goto corral_source_split_4754;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 967} qp_free_queue($p9, $i12);
    goto corral_source_split_4755;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 256)), $mul.ref(208, 1));
    goto corral_source_split_4756;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_4757;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 256)), $mul.ref(136, 1)), $mul.ref(40, 1));
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    $i17 := $load.i64($M.0, $p16);
    goto corral_source_split_4759;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 968} qp_free_queue($p14, $i17);
    goto corral_source_split_4760;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 256)), $mul.ref(0, 1));
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 969} vmci_resource_remove($p18);
    goto SeqInstr_235, SeqInstr_236;

  SeqInstr_236:
    assume assertsPassed;
    goto SeqInstr_237;

  SeqInstr_237:
    goto corral_source_split_4762;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p0);
    goto corral_source_split_4763;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 970} kfree($p19);
    goto corral_source_split_4764;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_235:
    assume !assertsPassed;
    return;
}



const qp_free_queue: ref;

axiom qp_free_queue == $sub.ref(0, 629841);

procedure qp_free_queue($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation qp_free_queue($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $i5: i64;
  var $i6: i64;
  var $i7: i64;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i64;
  var $i28: i1;
  var $i8: i64;
  var $p29: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 971} {:cexpr "qp_free_queue:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_4766;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_4768;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_4771;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i1, 4095);
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    $i6 := $udiv.i64($i5, 4096);
    goto corral_source_split_4773;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    $i7 := $add.i64($i6, 1);
    goto corral_source_split_4774;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    call $p9, $p10, $p11, $p12, $p13, $p14, $p15, $p16, $p17, $p18, $p19, $p20, $p21, $p22, $p23, $p24, $p25, $i26, $i27, $i28, $i8 := qp_free_queue_loop_$bb3($p2, $i7, $p9, $p10, $p11, $p12, $p13, $p14, $p15, $p16, $p17, $p18, $p19, $p20, $p21, $p22, $p23, $p24, $p25, $i26, $i27, $i28, $i8);
    goto $bb3_last;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $M.87;
    goto corral_source_split_4778;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_4779;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_4781;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 200)), $mul.ref(184, 1));
    goto corral_source_split_4782;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_4783;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4784;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p16, $mul.ref($i8, 8));
    goto corral_source_split_4786;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_4787;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_4788;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 200)), $mul.ref(184, 1));
    goto corral_source_split_4790;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_4791;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4792;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_4793;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p24, $mul.ref($i8, 8));
    goto corral_source_split_4794;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    $i26 := $load.i64($M.0, $p25);
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 972} dma_free_attrs($p10, 4096, $p18, $i26, $0.ref);
    goto corral_source_split_4796;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    $i27 := $add.i64($i8, 1);
    call {:si_unique_call 973} {:cexpr "i"} boogie_si_record_i64($i27);
    goto corral_source_split_4797;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    $i28 := $ugt.i64($i7, $i27);
    goto corral_source_split_4798;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p2);
    goto corral_source_split_4800;

  corral_source_split_4800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 974} vfree($p29);
    goto corral_source_split_4801;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb5:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    $i8 := $i27;
    goto $bb5_dummy;

  $bb5_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4776;
}



const ldv_mutex_unlock_220: ref;

axiom ldv_mutex_unlock_220 == $sub.ref(0, 630873);

procedure ldv_mutex_unlock_220($p0: ref);



const dma_free_attrs: ref;

axiom dma_free_attrs == $sub.ref(0, 631905);

procedure dma_free_attrs($p0: ref, $i1: i64, $p2: ref, $i3: i64, $p4: ref);
  free requires assertsPassed;



implementation dma_free_attrs($p0: ref, $i1: i64, $p2: ref, $i3: i64, $p4: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 975} {:cexpr "dma_free_attrs:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 976} {:cexpr "dma_free_attrs:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_4803;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    return;
}



const vfree: ref;

axiom vfree == $sub.ref(0, 632937);

procedure vfree($p0: ref);
  free requires assertsPassed;



implementation vfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4805;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    return;
}



const qp_free_ppn_set: ref;

axiom qp_free_ppn_set == $sub.ref(0, 633969);

procedure qp_free_ppn_set($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation qp_free_ppn_set($p0: ref)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var cmdloc_dummy_var_103: [ref]i8;
  var cmdloc_dummy_var_104: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_4809;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p0);
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_103 := $M.0;
    call {:si_unique_call 979} cmdloc_dummy_var_104 := $memset.i8(cmdloc_dummy_var_103, $p10, 0, 40, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_104;
    goto corral_source_split_4823;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4812;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4813;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_4815;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 977} kfree($p6);
    goto corral_source_split_4816;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4817;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_4818;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_4819;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 978} kfree($p9);
    goto corral_source_split_4820;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const qp_populate_ppn_set: ref;

axiom qp_populate_ppn_set == $sub.ref(0, 635001);

procedure qp_populate_ppn_set($p0: ref, $p1: ref) returns ($r: i32);



const vmalloc: ref;

axiom vmalloc == $sub.ref(0, 636033);

procedure vmalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;



implementation vmalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 980} {:cexpr "vmalloc:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_4825;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 981} $p1 := external_alloc();
    goto corral_source_split_4826;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const dma_alloc_attrs: ref;

axiom dma_alloc_attrs == $sub.ref(0, 637065);

procedure dma_alloc_attrs($p0: ref, $i1: i64, $p2: ref, $i3: i32, $p4: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dma_alloc_attrs($p0: ref, $i1: i64, $p2: ref, $i3: i32, $p4: ref) returns ($r: ref)
{
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 982} {:cexpr "dma_alloc_attrs:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 983} {:cexpr "dma_alloc_attrs:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_4828;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 984} $p5 := external_alloc();
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const qp_lock: ref;

axiom qp_lock == $sub.ref(0, 638097);

procedure qp_lock($p0: ref);
  free requires assertsPassed;
  modifies $M.46, assertsPassed;



implementation qp_lock($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4831;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_4832;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 985} qp_acquire_queue_mutex($p2);
    goto SeqInstr_238, SeqInstr_239;

  SeqInstr_239:
    assume assertsPassed;
    goto SeqInstr_240;

  SeqInstr_240:
    goto corral_source_split_4834;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_238:
    assume !assertsPassed;
    return;
}



const qp_unlock: ref;

axiom qp_unlock == $sub.ref(0, 639129);

procedure qp_unlock($p0: ref);
  free requires assertsPassed;
  modifies $M.46, assertsPassed;



implementation qp_unlock($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_4837;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4838;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 986} qp_release_queue_mutex($p2);
    goto SeqInstr_241, SeqInstr_242;

  SeqInstr_242:
    assume assertsPassed;
    goto SeqInstr_243;

  SeqInstr_243:
    goto corral_source_split_4839;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_241:
    assume !assertsPassed;
    return;
}



const vmci_qpair_detach: ref;

axiom vmci_qpair_detach == $sub.ref(0, 640161);

procedure vmci_qpair_detach($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.89, $M.23, $M.20, $M.21, $M.90, $M.86, $M.47, $M.91, $M.18, $CurrAddr, $M.28, $M.44, $M.33, $M.24, $M.25, $M.26, $M.19, $M.27, assertsPassed, $M.45, $M.48, $M.29, $M.2, $M.3, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.31, $M.87, $M.46, $M.34, $M.30, $M.69, $M.35, $M.6, $M.13, $M.70, $M.32, $M.108, $M.110, $M.112, $M.114, $M.109, $M.111, $M.113, $M.115, $M.36, $M.38, $M.40, $M.42;



implementation vmci_qpair_detach($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i8;
  var $i11: i1;
  var $p12: ref;
  var $i13: i64;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i6: i32;
  var cmdloc_dummy_var_105: [ref]i8;
  var cmdloc_dummy_var_106: [ref]i8;
  var cmdloc_dummy_var_107: [ref]i8;
  var cmdloc_dummy_var_108: [ref]i8;
  var cmdloc_dummy_var_109: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_4843;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i2 == 1);
    goto corral_source_split_4845;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p0);
    goto corral_source_split_4846;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p0);
    goto corral_source_split_4852;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 152)), $mul.ref(0, 1));
    goto corral_source_split_4853;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p7, $mul.ref(0, 152)), $mul.ref(52, 1));
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p9);
    goto corral_source_split_4855;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i10);
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p8);
    goto corral_source_split_4857;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.0, $p12);
    goto corral_source_split_4858;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 987} $i14 := qp_detatch($i13, $i11);
    goto SeqInstr_244, SeqInstr_245;

  SeqInstr_245:
    assume assertsPassed;
    goto SeqInstr_246;

  SeqInstr_246:
    call {:si_unique_call 988} {:cexpr "result"} boogie_si_record_i32($i14);
    goto corral_source_split_4859;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p7);
    goto corral_source_split_4860;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_105 := $M.0;
    call {:si_unique_call 989} cmdloc_dummy_var_106 := $memset.i8(cmdloc_dummy_var_105, $p15, 0, 152, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_106;
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p7, $mul.ref(0, 152)), $mul.ref(0, 1));
    goto corral_source_split_4862;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_4863;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_107 := $M.0;
    cmdloc_dummy_var_108 := $M.0;
    call {:si_unique_call 990} cmdloc_dummy_var_109 := $memcpy.i8(cmdloc_dummy_var_107, cmdloc_dummy_var_108, $p17, VMCI_INVALID_HANDLE___2, 8, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_109;
    goto corral_source_split_4864;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p7, $mul.ref(0, 152)), $mul.ref(40, 1));
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, $sub.i32(0, 1));
    goto corral_source_split_4866;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p7);
    goto corral_source_split_4867;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 991} kfree($p19);
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p0, $0.ref);
    goto corral_source_split_4869;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    $i6 := $i14;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  SeqInstr_244:
    assume !assertsPassed;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 2);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb2;
}



const qp_detatch: ref;

axiom qp_detatch == $sub.ref(0, 641193);

procedure qp_detatch($i0: i64, $i1: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.89, $M.23, $M.20, $M.21, $M.90, $M.86, $M.47, $M.0, $M.91, $M.18, $CurrAddr, $M.28, $M.44, $M.33, $M.24, $M.25, $M.26, $M.19, $M.27, assertsPassed, $M.45, $M.48, $M.29, $M.2, $M.3, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.31, $M.87, $M.46, $M.34, $M.30, $M.69, $M.35, $M.6, $M.13, $M.70, $M.32, $M.108, $M.110, $M.112, $M.114, $M.109, $M.111, $M.113, $M.115, $M.36, $M.38, $M.40, $M.42;



implementation qp_detatch($i0: i64, $i1: i1) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $i8: i8;
  var $i9: i1;
  var $i11: i1;
  var $p12: ref;
  var $i13: i64;
  var $i14: i32;
  var $p15: ref;
  var $i16: i64;
  var $i17: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 992} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    assume {:verifier.code 0} true;
    $M.89 := $store.i64($M.89, $p3, $i0);
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i1);
    call {:si_unique_call 993} {:cexpr "qp_detatch:arg:guest_endpoint"} boogie_si_record_i1($i1);
    goto corral_source_split_4871;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p2);
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.89, $p5);
    goto corral_source_split_4873;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 994} $i7 := vmci_handle_is_invalid___1($i6);
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i8($i7);
    call {:si_unique_call 995} {:cexpr "tmp"} boogie_si_record_i8($i8);
    goto corral_source_split_4875;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i8);
    goto corral_source_split_4876;

  corral_source_split_4876:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i4);
    goto corral_source_split_4882;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p2);
    goto corral_source_split_4890;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.89, $p15);
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 998} $i17 := qp_detatch_host_work($i16);
    goto SeqInstr_250, SeqInstr_251;

  SeqInstr_251:
    assume assertsPassed;
    goto SeqInstr_252;

  SeqInstr_252:
    call {:si_unique_call 999} {:cexpr "tmp___1"} boogie_si_record_i32($i17);
    goto corral_source_split_4892;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    $i10 := $i17;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  SeqInstr_250:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_4884;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p2);
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.89, $p12);
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 996} $i14 := qp_detatch_guest_work($i13);
    goto SeqInstr_247, SeqInstr_248;

  SeqInstr_248:
    assume assertsPassed;
    goto SeqInstr_249;

  SeqInstr_249:
    call {:si_unique_call 997} {:cexpr "tmp___0"} boogie_si_record_i32($i14);
    goto corral_source_split_4887;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    $i10 := $i14;
    goto $bb3;

  SeqInstr_247:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 2);
    goto $bb3;
}



const qp_detatch_guest_work: ref;

axiom qp_detatch_guest_work == $sub.ref(0, 642225);

procedure qp_detatch_guest_work($i0: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.90, $M.86, $M.47, $M.23, $M.20, $M.21, $M.0, $M.28, $M.44, $M.33, $CurrAddr, assertsPassed, $M.2, $M.3, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.31, $M.87, $M.6, $M.13, $M.18, $M.19, $M.69, $M.70, $M.24, $M.25, $M.26, $M.27, $M.108, $M.110, $M.112, $M.114, $M.29, $M.45, $M.48, $M.89, $M.109, $M.111, $M.113, $M.115, $M.34, $M.30, $M.35, $M.46, $M.91, $M.32, $M.36, $M.38, $M.40, $M.42;



implementation qp_detatch_guest_work($i0: i64) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i64;
  var $i20: i32;
  var $i21: i32;
  var $p23: ref;
  var $i24: i64;
  var $i25: i32;
  var $i26: i1;
  var $i22: i32;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $p32: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $i38: i64;
  var $i39: i1;
  var $p41: ref;
  var $i42: i32;
  var $i43: i32;
  var $i44: i1;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1000} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    assume {:verifier.code 0} true;
    $M.90 := $store.i64($M.90, $p2, $i0);
    goto corral_source_split_4894;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1001} ldv_mutex_lock_213($add.ref($add.ref(qp_guest_endpoints, $mul.ref(0, 176)), $mul.ref(16, 1)));
    goto SeqInstr_253, SeqInstr_254;

  SeqInstr_254:
    assume assertsPassed;
    goto SeqInstr_255;

  SeqInstr_255:
    goto corral_source_split_4895;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_4896;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.90, $p3);
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1002} $p5 := qp_guest_handle_to_entry($i4);
    goto corral_source_split_4898;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_4899;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_4900;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 256)), $mul.ref(136, 1)), $mul.ref(28, 1));
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_4908;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 2);
    goto corral_source_split_4909;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    goto corral_source_split_4917;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p1);
    goto corral_source_split_4918;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    $i24 := $load.i64($M.90, $p23);
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1004} $i25 := qp_detatch_hypercall($i24);
    call {:si_unique_call 1005} {:cexpr "result"} boogie_si_record_i32($i25);
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i25, 0);
    goto corral_source_split_4921;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i22 := $i25;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_4930;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 256)), $mul.ref(136, 1)), $mul.ref(48, 1));
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32($i29, 1);
    goto corral_source_split_4933;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 256)), $mul.ref(136, 1)), $mul.ref(48, 1));
    goto corral_source_split_4934;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, $i30);
    goto corral_source_split_4935;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 256)), $mul.ref(136, 1)), $mul.ref(48, 1));
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, 0);
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p5);
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    $i39 := $ne.i64($i38, 0);
    goto corral_source_split_4948;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    $i43 := $sub.i32(0, 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_4954;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1011} ldv_mutex_unlock_216($add.ref($add.ref(qp_guest_endpoints, $mul.ref(0, 176)), $mul.ref(16, 1)));
    goto SeqInstr_262, SeqInstr_263;

  SeqInstr_263:
    assume assertsPassed;
    goto SeqInstr_264;

  SeqInstr_264:
    goto corral_source_split_4955;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i43, 0);
    goto corral_source_split_4956;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i8 := $i22;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4905;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb20:
    assume $i44 == 1;
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1012} qp_guest_endpoint_destroy($p5);
    goto SeqInstr_265, SeqInstr_266;

  SeqInstr_266:
    assume assertsPassed;
    goto SeqInstr_267;

  SeqInstr_267:
    goto corral_source_split_4959;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    goto $bb22;

  SeqInstr_265:
    assume !assertsPassed;
    return;

  SeqInstr_262:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i39 == 1;
    goto corral_source_split_4950;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 256)), $mul.ref(136, 1)), $mul.ref(48, 1));
    goto corral_source_split_4951;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    call {:si_unique_call 1010} {:cexpr "ref_count"} boogie_si_record_i32($i42);
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    $i43 := $i42;
    goto $bb19;

  $bb14:
    assume $i36 == 1;
    goto corral_source_split_4943;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p5, $mul.ref(0, 256)), $mul.ref(136, 1));
    goto corral_source_split_4944;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1009} qp_list_remove_entry(qp_guest_endpoints, $p37);
    goto corral_source_split_4945;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume $i26 == 1;
    goto corral_source_split_4940;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1008} ldv_mutex_unlock_215($add.ref($add.ref(qp_guest_endpoints, $mul.ref(0, 176)), $mul.ref(16, 1)));
    goto SeqInstr_259, SeqInstr_260;

  SeqInstr_260:
    assume assertsPassed;
    goto SeqInstr_261;

  SeqInstr_261:
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    $i8 := $i25;
    goto $bb3;

  SeqInstr_259:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_4912;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 256)), $mul.ref(136, 1)), $mul.ref(48, 1));
    goto corral_source_split_4913;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    $i17 := $ugt.i32($i16, 1);
    goto corral_source_split_4915;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i21 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_4928;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    $i22 := $i21;
    goto $bb10;

  $bb7:
    assume $i17 == 1;
    goto corral_source_split_4923;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p1);
    goto corral_source_split_4924;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    $i19 := $load.i64($M.90, $p18);
    goto corral_source_split_4925;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1006} $i20 := qp_notify_peer_local(0, $i19);
    call {:si_unique_call 1007} {:cexpr "result"} boogie_si_record_i32($i20);
    goto corral_source_split_4926;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    $i21 := $i20;
    goto $bb9;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_4902;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1003} ldv_mutex_unlock_214($add.ref($add.ref(qp_guest_endpoints, $mul.ref(0, 176)), $mul.ref(16, 1)));
    goto SeqInstr_256, SeqInstr_257;

  SeqInstr_257:
    assume assertsPassed;
    goto SeqInstr_258;

  SeqInstr_258:
    goto corral_source_split_4903;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 21);
    goto $bb3;

  SeqInstr_256:
    assume !assertsPassed;
    return;

  SeqInstr_253:
    assume !assertsPassed;
    return;
}



const qp_detatch_host_work: ref;

axiom qp_detatch_host_work == $sub.ref(0, 643257);

procedure qp_detatch_host_work($i0: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.91, $M.0, $M.18, $M.23, $M.20, $M.21, $M.24, $M.25, $M.26, $M.19, $M.27, $CurrAddr, $M.28, $M.45, $M.48, $M.47, $M.89, $M.29, $M.33, assertsPassed, $M.46, $M.90, $M.86, $M.34, $M.30, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.31, $M.87, $M.69, $M.35, $M.2, $M.3, $M.44, $M.32, $M.108, $M.110, $M.112, $M.114, $M.70, $M.6, $M.13, $M.109, $M.111, $M.113, $M.115, $M.36, $M.38, $M.40, $M.42;



implementation qp_detatch_host_work($i0: i64) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1013} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    assume {:verifier.code 0} true;
    $M.91 := $store.i64($M.91, $p2, $i0);
    goto corral_source_split_4961;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1014} $p3 := vmci_ctx_get(2);
    goto corral_source_split_4962;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_4963;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    $i5 := $load.i64($M.91, $p4);
    goto corral_source_split_4964;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1015} $i6 := vmci_qp_broker_detach($i5, $p3);
    goto SeqInstr_268, SeqInstr_269;

  SeqInstr_269:
    assume assertsPassed;
    goto SeqInstr_270;

  SeqInstr_270:
    call {:si_unique_call 1016} {:cexpr "result"} boogie_si_record_i32($i6);
    goto corral_source_split_4965;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1017} vmci_ctx_put($p3);
    goto SeqInstr_271, SeqInstr_272;

  SeqInstr_272:
    assume assertsPassed;
    goto SeqInstr_273;

  SeqInstr_273:
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  SeqInstr_271:
    assume !assertsPassed;
    return;

  SeqInstr_268:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_213: ref;

axiom ldv_mutex_lock_213 == $sub.ref(0, 644289);

procedure ldv_mutex_lock_213($p0: ref);
  free requires assertsPassed;
  modifies $M.28, assertsPassed;



implementation ldv_mutex_lock_213($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4968;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1018} ldv_mutex_lock_mutex_of_qp_list($p0);
    goto SeqInstr_274, SeqInstr_275;

  SeqInstr_275:
    assume assertsPassed;
    goto SeqInstr_276;

  SeqInstr_276:
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1019} mutex_lock($p0);
    goto corral_source_split_4970;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_274:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_214: ref;

axiom ldv_mutex_unlock_214 == $sub.ref(0, 645321);

procedure ldv_mutex_unlock_214($p0: ref);
  free requires assertsPassed;
  modifies $M.28, assertsPassed;



implementation ldv_mutex_unlock_214($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4972;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1020} ldv_mutex_unlock_mutex_of_qp_list($p0);
    goto SeqInstr_277, SeqInstr_278;

  SeqInstr_278:
    assume assertsPassed;
    goto SeqInstr_279;

  SeqInstr_279:
    goto corral_source_split_4973;

  corral_source_split_4973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1021} mutex_unlock($p0);
    goto corral_source_split_4974;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_277:
    assume !assertsPassed;
    return;
}



const qp_detatch_hypercall: ref;

axiom qp_detatch_hypercall == $sub.ref(0, 646353);

procedure qp_detatch_hypercall($i0: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation qp_detatch_hypercall($i0: i64) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var cmdloc_dummy_var_110: [ref]i8;
  var cmdloc_dummy_var_111: [ref]i8;
  var cmdloc_dummy_var_112: [ref]i8;
  var cmdloc_dummy_var_113: [ref]i8;
  var cmdloc_dummy_var_114: [ref]i8;
  var cmdloc_dummy_var_115: [ref]i8;
  var cmdloc_dummy_var_116: [ref]i8;
  var cmdloc_dummy_var_117: [ref]i8;
  var cmdloc_dummy_var_118: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1022} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1023} $p2 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1024} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p4, $i0);
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_4977;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, 0);
    goto corral_source_split_4978;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, 11);
    goto corral_source_split_4980;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4981;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_4982;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p3);
    goto corral_source_split_4983;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_110 := $M.0;
    cmdloc_dummy_var_111 := $M.0;
    call {:si_unique_call 1025} cmdloc_dummy_var_112 := $memcpy.i8(cmdloc_dummy_var_110, cmdloc_dummy_var_111, $p9, $p10, 8, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_112;
    goto corral_source_split_4984;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_4985;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_4986;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_113 := $M.0;
    cmdloc_dummy_var_114 := $M.0;
    call {:si_unique_call 1026} cmdloc_dummy_var_115 := $memcpy.i8(cmdloc_dummy_var_113, cmdloc_dummy_var_114, $p13, VMCI_ANON_SRC_HANDLE___1, 8, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_115;
    goto corral_source_split_4987;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_4988;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p15, 8);
    goto corral_source_split_4989;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_4990;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_4991;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p1);
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_116 := $M.0;
    cmdloc_dummy_var_117 := $M.0;
    call {:si_unique_call 1027} cmdloc_dummy_var_118 := $memcpy.i8(cmdloc_dummy_var_116, cmdloc_dummy_var_117, $p17, $p18, 8, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_118;
    goto corral_source_split_4993;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_4994;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1028} $i20 := vmci_send_datagram($p19);
    call {:si_unique_call 1029} {:cexpr "tmp"} boogie_si_record_i32($i20);
    goto corral_source_split_4995;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;
}



const ldv_mutex_unlock_215: ref;

axiom ldv_mutex_unlock_215 == $sub.ref(0, 647385);

procedure ldv_mutex_unlock_215($p0: ref);
  free requires assertsPassed;
  modifies $M.28, assertsPassed;



implementation ldv_mutex_unlock_215($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4997;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1030} ldv_mutex_unlock_mutex_of_qp_list($p0);
    goto SeqInstr_280, SeqInstr_281;

  SeqInstr_281:
    assume assertsPassed;
    goto SeqInstr_282;

  SeqInstr_282:
    goto corral_source_split_4998;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1031} mutex_unlock($p0);
    goto corral_source_split_4999;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_280:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_216: ref;

axiom ldv_mutex_unlock_216 == $sub.ref(0, 648417);

procedure ldv_mutex_unlock_216($p0: ref);
  free requires assertsPassed;
  modifies $M.28, assertsPassed;



implementation ldv_mutex_unlock_216($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1032} ldv_mutex_unlock_mutex_of_qp_list($p0);
    goto SeqInstr_283, SeqInstr_284;

  SeqInstr_284:
    assume assertsPassed;
    goto SeqInstr_285;

  SeqInstr_285:
    goto corral_source_split_5002;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1033} mutex_unlock($p0);
    goto corral_source_split_5003;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_283:
    assume !assertsPassed;
    return;
}



const vmci_qpair_get_produce_indexes: ref;

axiom vmci_qpair_get_produce_indexes == $sub.ref(0, 649449);

procedure vmci_qpair_get_produce_indexes($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const qp_get_queue_headers: ref;

axiom qp_get_queue_headers == $sub.ref(0, 650481);

procedure qp_get_queue_headers($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.92, $M.93, $M.96, $M.97, $M.0, $M.98, $CurrAddr;



implementation qp_get_queue_headers($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i17: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5005;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_5006;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_5007;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(16, 1));
    goto corral_source_split_5008;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_5009;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1034} $i7 := qp_map_queue_headers($p4, $p6);
    call {:si_unique_call 1035} {:cexpr "result"} boogie_si_record_i32($i7);
    goto corral_source_split_5010;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_5011;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    goto corral_source_split_5025;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_5026;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_5027;

  corral_source_split_5027:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_5029;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_5030;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_5031;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i38 := $i7;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i17 := $i38;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5033;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb4:
    assume $i23 == 1;
    goto corral_source_split_5035;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(16, 1));
    goto corral_source_split_5036;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_5037;

  corral_source_split_5037:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_5038;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_5039;

  corral_source_split_5039:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i28, 0);
    goto corral_source_split_5041;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb6;

  $bb7:
    assume $i29 == 1;
    goto corral_source_split_5043;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_5044;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_5045;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_5046;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_5047;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    $M.92 := $store.ref($M.92, $p1, $p33);
    goto corral_source_split_5048;

  corral_source_split_5048:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(16, 1));
    goto corral_source_split_5049;

  corral_source_split_5049:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_5050;

  corral_source_split_5050:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_5052;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    $M.93 := $store.ref($M.93, $p2, $p37);
    goto corral_source_split_5053;

  corral_source_split_5053:
    assume {:verifier.code 0} true;
    $i38 := 0;
    goto $bb9;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_5014;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_5015;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_5016;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_5017;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    $M.92 := $store.ref($M.92, $p1, $p12);
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(16, 1));
    goto corral_source_split_5019;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_5020;

  corral_source_split_5020:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_5021;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_5022;

  corral_source_split_5022:
    assume {:verifier.code 0} true;
    $M.93 := $store.ref($M.93, $p2, $p16);
    goto corral_source_split_5023;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    $i17 := $i7;
    goto $bb3;
}



const vmci_q_header_get_pointers: ref;

axiom vmci_q_header_get_pointers == $sub.ref(0, 651513);

procedure vmci_q_header_get_pointers($p0: ref, $p1: ref, $p2: ref, $p3: ref);



const vmci_q_header_producer_tail: ref;

axiom vmci_q_header_producer_tail == $sub.ref(0, 652545);

procedure vmci_q_header_producer_tail($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation vmci_q_header_producer_tail($p0: ref) returns ($r: i64)
{
  var $p1: ref;
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5055;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_5056;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1036} $i2 := atomic64_read($p1);
    call {:si_unique_call 1037} {:cexpr "tmp"} boogie_si_record_i64($i2);
    goto corral_source_split_5057;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const vmci_q_header_consumer_head: ref;

axiom vmci_q_header_consumer_head == $sub.ref(0, 653577);

procedure vmci_q_header_consumer_head($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation vmci_q_header_consumer_head($p0: ref) returns ($r: i64)
{
  var $p1: ref;
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5059;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_5060;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1038} $i2 := atomic64_read($p1);
    call {:si_unique_call 1039} {:cexpr "tmp"} boogie_si_record_i64($i2);
    goto corral_source_split_5061;

  corral_source_split_5061:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const atomic64_read: ref;

axiom atomic64_read == $sub.ref(0, 654609);

procedure atomic64_read($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation atomic64_read($p0: ref) returns ($r: i64)
{
  var $p1: ref;
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5063;

  corral_source_split_5063:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.0, $p1);
    goto corral_source_split_5065;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const qp_map_queue_headers: ref;

axiom qp_map_queue_headers == $sub.ref(0, 655641);

procedure qp_map_queue_headers($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.96, $M.97, $M.0, $M.98, $CurrAddr;



implementation qp_map_queue_headers($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $i16: i1;
  var $i21: i32;
  var $i22: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_5068;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_5069;

  corral_source_split_5069:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_5071;

  corral_source_split_5071:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_5076;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_5077;

  corral_source_split_5077:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_5078;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_5079;

  corral_source_split_5079:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_5080;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i22 := 0;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_5096;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    $r := $i22;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1040} $i10 := qp_host_map_queues($p0, $p1);
    call {:si_unique_call 1041} {:cexpr "result"} boogie_si_record_i32($i10);
    goto corral_source_split_5073;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i10, 0);
    goto corral_source_split_5074;

  corral_source_split_5074:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb6:
    assume $i11 == 1;
    goto corral_source_split_5082;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_5083;

  corral_source_split_5083:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_5084;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_5085;

  corral_source_split_5085:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_5086;

  corral_source_split_5086:
    assume {:verifier.code 0} true;
    $i16 := 0;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_5093;

  corral_source_split_5093:
    assume {:verifier.code 0} true;
    $i21 := (if $i16 == 1 then $sub.i32(0, 40) else $sub.i32(0, 34));
    goto corral_source_split_5094;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    $i22 := $i21;
    goto $bb11;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_5088;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_5089;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_5090;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_5091;

  corral_source_split_5091:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    assume {:verifier.code 0} true;
    $i16 := $i20;
    goto $bb10;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const qp_host_map_queues: ref;

axiom qp_host_map_queues == $sub.ref(0, 656673);

procedure qp_host_map_queues($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.96, $M.97, $M.0, $M.98, $CurrAddr;



implementation qp_host_map_queues($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i64;
  var $p57: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i64;
  var $i63: i1;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i32;
  var $i70: i32;
  var $i19: i32;
  var vslice_dummy_var_232: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1042} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1043} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_5098;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_5099;

  corral_source_split_5099:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_5100;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_5101;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_5102;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i7 == 1);
    goto corral_source_split_5112;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_5113;

  corral_source_split_5113:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_5114;

  corral_source_split_5114:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_5115;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_5116;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i70 := 0;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_5185;

  corral_source_split_5185:
    assume {:verifier.code 0} true;
    $i19 := $i70;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_5120;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_5104;

  corral_source_split_5104:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_5105;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_5106;

  corral_source_split_5106:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_5107;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_5108;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_5109;

  corral_source_split_5109:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i14, $i17);
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_5122;

  corral_source_split_5122:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_5123;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 200)), $mul.ref(184, 1));
    goto corral_source_split_5124;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5126;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_5127;

  corral_source_split_5127:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    goto corral_source_split_5128;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    $i27 := $eq.i64($i26, 0);
    goto corral_source_split_5129;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb10, $bb12;

  $bb12:
    assume !($i27 == 1);
    goto corral_source_split_5131;

  corral_source_split_5131:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_5133;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 200)), $mul.ref(184, 1));
    goto corral_source_split_5134;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_5135;

  corral_source_split_5135:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5136;

  corral_source_split_5136:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_5137;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_5138;

  corral_source_split_5138:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    goto corral_source_split_5139;

  corral_source_split_5139:
    assume {:verifier.code 0} true;
    $i36 := $eq.i64($i35, 0);
    goto corral_source_split_5140;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_5142;

  corral_source_split_5142:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_5143;

  corral_source_split_5143:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 200)), $mul.ref(184, 1));
    goto corral_source_split_5144;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_5145;

  corral_source_split_5145:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p40, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5146;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_5147;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_5148;

  corral_source_split_5148:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 8));
    goto corral_source_split_5149;

  corral_source_split_5149:
    assume {:verifier.code 0} true;
    $M.96 := $store.ref($M.96, $p44, $p43);
    goto corral_source_split_5150;

  corral_source_split_5150:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_5151;

  corral_source_split_5151:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_5152;

  corral_source_split_5152:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p46, $mul.ref(0, 200)), $mul.ref(184, 1));
    goto corral_source_split_5153;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_5154;

  corral_source_split_5154:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p48, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5155;

  corral_source_split_5155:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_5156;

  corral_source_split_5156:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_5157;

  corral_source_split_5157:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(1, 8));
    goto corral_source_split_5158;

  corral_source_split_5158:
    assume {:verifier.code 0} true;
    $M.96 := $store.ref($M.96, $p52, $p51);
    goto corral_source_split_5159;

  corral_source_split_5159:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_5160;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    $M.97 := $store.i64($M.97, $p53, $sub.i64(0, 9223372036854775453));
    goto corral_source_split_5161;

  corral_source_split_5161:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p2);
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_5163;

  corral_source_split_5163:
    assume {:verifier.code 0} true;
    $i56 := $load.i64($M.97, $p55);
    goto corral_source_split_5164;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1044} $p57 := vmap($p54, 2, 4, $i56);
    goto corral_source_split_5165;

  corral_source_split_5165:
    assume {:verifier.code 0} true;
    goto corral_source_split_5166;

  corral_source_split_5166:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_5167;

  corral_source_split_5167:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p59, $p57);
    goto corral_source_split_5168;

  corral_source_split_5168:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_5169;

  corral_source_split_5169:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_5170;

  corral_source_split_5170:
    assume {:verifier.code 0} true;
    $i62 := $p2i.ref.i64($p61);
    goto corral_source_split_5171;

  corral_source_split_5171:
    assume {:verifier.code 0} true;
    $i63 := $ne.i64($i62, 0);
    goto corral_source_split_5172;

  corral_source_split_5172:
    assume {:verifier.code 0} true;
    assume {:branchcond $i63} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i63 == 1);
    goto corral_source_split_5181;

  corral_source_split_5181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1045} vslice_dummy_var_232 := printk.ref(.str.173);
    assume {:verifier.code 0} true;
    $i68 := $sub.i32(0, 3);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_5183;

  corral_source_split_5183:
    assume {:verifier.code 0} true;
    $i70 := $i68;
    goto $bb19;

  $bb16:
    assume $i63 == 1;
    goto corral_source_split_5174;

  corral_source_split_5174:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_5175;

  corral_source_split_5175:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $p64);
    goto corral_source_split_5176;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($p65, $mul.ref(4096, 24));
    goto corral_source_split_5177;

  corral_source_split_5177:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_5178;

  corral_source_split_5178:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p67, $p66);
    goto corral_source_split_5179;

  corral_source_split_5179:
    assume {:verifier.code 0} true;
    $i68 := 0;
    goto $bb18;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i36 == 1;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 20);
    goto $bb8;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i27 == 1;
    goto $bb11;

  $bb6:
    assume $i18 == 1;
    goto corral_source_split_5118;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 31);
    goto $bb8;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb2;
}



const vmap: ref;

axiom vmap == $sub.ref(0, 657705);

procedure vmap($p0: ref, $i1: i32, $i2: i64, $i3: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.98, $CurrAddr;



implementation vmap($p0: ref, $i1: i32, $i2: i64, $i3: i64) returns ($r: ref)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1046} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.98 := $store.i64($M.98, $p5, $i3);
    call {:si_unique_call 1047} {:cexpr "vmap:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1048} {:cexpr "vmap:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_5187;

  corral_source_split_5187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1049} $p6 := external_alloc();
    goto corral_source_split_5188;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const vmci_qpair_get_consume_indexes: ref;

axiom vmci_qpair_get_consume_indexes == $sub.ref(0, 658737);

procedure vmci_qpair_get_consume_indexes($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const vmci_qpair_produce_free_space: ref;

axiom vmci_qpair_produce_free_space == $sub.ref(0, 659769);

procedure vmci_qpair_produce_free_space($p0: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.92, $M.93, $CurrAddr, $M.46, $M.96, $M.97, $M.0, assertsPassed, $M.98;



implementation vmci_qpair_produce_free_space($p0: ref) returns ($r: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i64;
  var $i14: i64;
  var $i5: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1050} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1051} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_5190;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    goto corral_source_split_5191;

  corral_source_split_5191:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_5192;

  corral_source_split_5192:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1052} qp_lock($p0);
    goto SeqInstr_286, SeqInstr_287;

  SeqInstr_287:
    assume assertsPassed;
    goto SeqInstr_288;

  SeqInstr_288:
    goto corral_source_split_5198;

  corral_source_split_5198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1053} $i6 := qp_get_queue_headers($p0, $p1, $p2);
    call {:si_unique_call 1054} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_5199;

  corral_source_split_5199:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    call {:si_unique_call 1055} {:cexpr "result"} boogie_si_record_i64($i7);
    goto corral_source_split_5200;

  corral_source_split_5200:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_5201;

  corral_source_split_5201:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_5210;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1058} qp_unlock($p0);
    goto SeqInstr_289, SeqInstr_290;

  SeqInstr_290:
    assume assertsPassed;
    goto SeqInstr_291;

  SeqInstr_291:
    goto corral_source_split_5211;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    $i5 := $i14;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5196;

  corral_source_split_5196:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  SeqInstr_289:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_5203;

  corral_source_split_5203:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.92, $p1);
    goto corral_source_split_5204;

  corral_source_split_5204:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.93, $p2);
    goto corral_source_split_5205;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(24, 1));
    goto corral_source_split_5206;

  corral_source_split_5206:
    assume {:verifier.code 0} true;
    $i12 := $load.i64($M.0, $p11);
    goto corral_source_split_5207;

  corral_source_split_5207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1056} $i13 := vmci_q_header_free_space($p9, $p10, $i12);
    call {:si_unique_call 1057} {:cexpr "result"} boogie_si_record_i64($i13);
    goto corral_source_split_5208;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    $i14 := $i13;
    goto $bb7;

  SeqInstr_286:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5194;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    $i5 := $sub.i64(0, 2);
    goto $bb3;
}



const vmci_q_header_free_space: ref;

axiom vmci_q_header_free_space == $sub.ref(0, 660801);

procedure vmci_q_header_free_space($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation vmci_q_header_free_space($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $i6: i1;
  var $i8: i1;
  var $i9: i64;
  var $i10: i64;
  var $i11: i64;
  var $i13: i64;
  var $i14: i64;
  var $i12: i64;
  var $i7: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1059} {:cexpr "vmci_q_header_free_space:arg:produce_q_size"} boogie_si_record_i64($i2);
    goto corral_source_split_5213;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1060} $i3 := vmci_q_header_producer_tail($p0);
    call {:si_unique_call 1061} {:cexpr "tail"} boogie_si_record_i64($i3);
    goto corral_source_split_5214;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1062} $i4 := vmci_q_header_consumer_head($p1);
    call {:si_unique_call 1063} {:cexpr "head"} boogie_si_record_i64($i4);
    goto corral_source_split_5215;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i3, $i2);
    goto corral_source_split_5216;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_5218;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    $i6 := $uge.i64($i4, $i2);
    goto corral_source_split_5219;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i3, $i4);
    goto corral_source_split_5223;

  corral_source_split_5223:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i8 == 1);
    goto corral_source_split_5230;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    $i13 := $sub.i64($i4, $i3);
    goto corral_source_split_5231;

  corral_source_split_5231:
    assume {:verifier.code 0} true;
    $i14 := $sub.i64($i13, 1);
    call {:si_unique_call 1065} {:cexpr "free_space"} boogie_si_record_i64($i14);
    assume {:verifier.code 0} true;
    $i12 := $i14;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_5233;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    $i7 := $i12;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5221;

  corral_source_split_5221:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb8:
    assume $i8 == 1;
    goto corral_source_split_5225;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    $i9 := $sub.i64($i4, $i3);
    goto corral_source_split_5226;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    $i10 := $add.i64($i9, $i2);
    goto corral_source_split_5227;

  corral_source_split_5227:
    assume {:verifier.code 0} true;
    $i11 := $sub.i64($i10, 1);
    call {:si_unique_call 1064} {:cexpr "free_space"} boogie_si_record_i64($i11);
    goto corral_source_split_5228;

  corral_source_split_5228:
    assume {:verifier.code 0} true;
    $i12 := $i11;
    goto $bb10;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i7 := $sub.i64(0, 24);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const vmci_qpair_consume_free_space: ref;

axiom vmci_qpair_consume_free_space == $sub.ref(0, 661833);

procedure vmci_qpair_consume_free_space($p0: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.92, $M.93, $CurrAddr, $M.46, $M.96, $M.97, $M.0, assertsPassed, $M.98;



implementation vmci_qpair_consume_free_space($p0: ref) returns ($r: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i64;
  var $i14: i64;
  var $i5: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1066} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1067} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_5235;

  corral_source_split_5235:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    goto corral_source_split_5236;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_5237;

  corral_source_split_5237:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1068} qp_lock($p0);
    goto SeqInstr_292, SeqInstr_293;

  SeqInstr_293:
    assume assertsPassed;
    goto SeqInstr_294;

  SeqInstr_294:
    goto corral_source_split_5243;

  corral_source_split_5243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1069} $i6 := qp_get_queue_headers($p0, $p1, $p2);
    call {:si_unique_call 1070} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_5244;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    call {:si_unique_call 1071} {:cexpr "result"} boogie_si_record_i64($i7);
    goto corral_source_split_5245;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_5246;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_5255;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1074} qp_unlock($p0);
    goto SeqInstr_295, SeqInstr_296;

  SeqInstr_296:
    assume assertsPassed;
    goto SeqInstr_297;

  SeqInstr_297:
    goto corral_source_split_5256;

  corral_source_split_5256:
    assume {:verifier.code 0} true;
    $i5 := $i14;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5241;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  SeqInstr_295:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_5248;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.93, $p2);
    goto corral_source_split_5249;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.92, $p1);
    goto corral_source_split_5250;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(32, 1));
    goto corral_source_split_5251;

  corral_source_split_5251:
    assume {:verifier.code 0} true;
    $i12 := $load.i64($M.0, $p11);
    goto corral_source_split_5252;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1072} $i13 := vmci_q_header_free_space($p9, $p10, $i12);
    call {:si_unique_call 1073} {:cexpr "result"} boogie_si_record_i64($i13);
    goto corral_source_split_5253;

  corral_source_split_5253:
    assume {:verifier.code 0} true;
    $i14 := $i13;
    goto $bb7;

  SeqInstr_292:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5239;

  corral_source_split_5239:
    assume {:verifier.code 0} true;
    $i5 := $sub.i64(0, 2);
    goto $bb3;
}



const vmci_qpair_produce_buf_ready: ref;

axiom vmci_qpair_produce_buf_ready == $sub.ref(0, 662865);

procedure vmci_qpair_produce_buf_ready($p0: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.92, $M.93, $CurrAddr, $M.46, $M.96, $M.97, $M.0, assertsPassed, $M.98;



implementation vmci_qpair_produce_buf_ready($p0: ref) returns ($r: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i64;
  var $i14: i64;
  var $i5: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1075} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1076} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_5258;

  corral_source_split_5258:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    goto corral_source_split_5259;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_5260;

  corral_source_split_5260:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1077} qp_lock($p0);
    goto SeqInstr_298, SeqInstr_299;

  SeqInstr_299:
    assume assertsPassed;
    goto SeqInstr_300;

  SeqInstr_300:
    goto corral_source_split_5266;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1078} $i6 := qp_get_queue_headers($p0, $p1, $p2);
    call {:si_unique_call 1079} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_5267;

  corral_source_split_5267:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    call {:si_unique_call 1080} {:cexpr "result"} boogie_si_record_i64($i7);
    goto corral_source_split_5268;

  corral_source_split_5268:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_5269;

  corral_source_split_5269:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_5278;

  corral_source_split_5278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1083} qp_unlock($p0);
    goto SeqInstr_301, SeqInstr_302;

  SeqInstr_302:
    assume assertsPassed;
    goto SeqInstr_303;

  SeqInstr_303:
    goto corral_source_split_5279;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    $i5 := $i14;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5264;

  corral_source_split_5264:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  SeqInstr_301:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_5271;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.92, $p1);
    goto corral_source_split_5272;

  corral_source_split_5272:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.93, $p2);
    goto corral_source_split_5273;

  corral_source_split_5273:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(24, 1));
    goto corral_source_split_5274;

  corral_source_split_5274:
    assume {:verifier.code 0} true;
    $i12 := $load.i64($M.0, $p11);
    goto corral_source_split_5275;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1081} $i13 := vmci_q_header_buf_ready($p9, $p10, $i12);
    call {:si_unique_call 1082} {:cexpr "result"} boogie_si_record_i64($i13);
    goto corral_source_split_5276;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    $i14 := $i13;
    goto $bb7;

  SeqInstr_298:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5262;

  corral_source_split_5262:
    assume {:verifier.code 0} true;
    $i5 := $sub.i64(0, 2);
    goto $bb3;
}



const vmci_q_header_buf_ready: ref;

axiom vmci_q_header_buf_ready == $sub.ref(0, 663897);

procedure vmci_q_header_buf_ready($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation vmci_q_header_buf_ready($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i64;
  var $i4: i1;
  var $i6: i64;
  var $i7: i64;
  var $i5: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1084} {:cexpr "vmci_q_header_buf_ready:arg:consume_q_size"} boogie_si_record_i64($i2);
    goto corral_source_split_5281;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1085} $i3 := vmci_q_header_free_space($p0, $p1, $i2);
    call {:si_unique_call 1086} {:cexpr "free_space"} boogie_si_record_i64($i3);
    goto corral_source_split_5282;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    $i4 := $slt.i64($i3, 0);
    goto corral_source_split_5283;

  corral_source_split_5283:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i6 := $sub.i64($i2, $i3);
    goto corral_source_split_5289;

  corral_source_split_5289:
    assume {:verifier.code 0} true;
    $i7 := $sub.i64($i6, 1);
    goto corral_source_split_5290;

  corral_source_split_5290:
    assume {:verifier.code 0} true;
    $i5 := $i7;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5287;

  corral_source_split_5287:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5285;

  corral_source_split_5285:
    assume {:verifier.code 0} true;
    $i5 := $i3;
    goto $bb3;
}



const vmci_qpair_consume_buf_ready: ref;

axiom vmci_qpair_consume_buf_ready == $sub.ref(0, 664929);

procedure vmci_qpair_consume_buf_ready($p0: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.92, $M.93, $CurrAddr, $M.46, $M.96, $M.97, $M.0, assertsPassed, $M.98;



implementation vmci_qpair_consume_buf_ready($p0: ref) returns ($r: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i64;
  var $i14: i64;
  var $i5: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1087} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1088} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_5292;

  corral_source_split_5292:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    goto corral_source_split_5293;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_5294;

  corral_source_split_5294:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1089} qp_lock($p0);
    goto SeqInstr_304, SeqInstr_305;

  SeqInstr_305:
    assume assertsPassed;
    goto SeqInstr_306;

  SeqInstr_306:
    goto corral_source_split_5300;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1090} $i6 := qp_get_queue_headers($p0, $p1, $p2);
    call {:si_unique_call 1091} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_5301;

  corral_source_split_5301:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    call {:si_unique_call 1092} {:cexpr "result"} boogie_si_record_i64($i7);
    goto corral_source_split_5302;

  corral_source_split_5302:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_5303;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_5312;

  corral_source_split_5312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1095} qp_unlock($p0);
    goto SeqInstr_307, SeqInstr_308;

  SeqInstr_308:
    assume assertsPassed;
    goto SeqInstr_309;

  SeqInstr_309:
    goto corral_source_split_5313;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    $i5 := $i14;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5298;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  SeqInstr_307:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_5305;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.93, $p2);
    goto corral_source_split_5306;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.92, $p1);
    goto corral_source_split_5307;

  corral_source_split_5307:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(32, 1));
    goto corral_source_split_5308;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    $i12 := $load.i64($M.0, $p11);
    goto corral_source_split_5309;

  corral_source_split_5309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1093} $i13 := vmci_q_header_buf_ready($p9, $p10, $i12);
    call {:si_unique_call 1094} {:cexpr "result"} boogie_si_record_i64($i13);
    goto corral_source_split_5310;

  corral_source_split_5310:
    assume {:verifier.code 0} true;
    $i14 := $i13;
    goto $bb7;

  SeqInstr_304:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5296;

  corral_source_split_5296:
    assume {:verifier.code 0} true;
    $i5 := $sub.i64(0, 2);
    goto $bb3;
}



const vmci_qpair_enqueue: ref;

axiom vmci_qpair_enqueue == $sub.ref(0, 665961);

procedure vmci_qpair_enqueue($p0: ref, $p1: ref, $i2: i64, $i3: i32) returns ($r: i64);



const qp_memcpy_to_queue: ref;

axiom qp_memcpy_to_queue == $sub.ref(0, 666993);

procedure qp_memcpy_to_queue($p0: ref, $i1: i64, $p2: ref, $i3: i64, $i4: i64) returns ($r: i32);



const qp_enqueue_locked: ref;

axiom qp_enqueue_locked == $sub.ref(0, 668025);

procedure qp_enqueue_locked($p0: ref, $p1: ref, $i2: i64, $p3: ref, $i4: i64, $p5: ref) returns ($r: i64);



const qp_wait_for_ready_queue: ref;

axiom qp_wait_for_ready_queue == $sub.ref(0, 669057);

procedure qp_wait_for_ready_queue($p0: ref) returns ($r: i1);



const __might_sleep: ref;

axiom __might_sleep == $sub.ref(0, 670089);

procedure __might_sleep($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;



implementation __might_sleep($p0: ref, $i1: i32, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1096} {:cexpr "__might_sleep:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1097} {:cexpr "__might_sleep:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_5315;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    return;
}



const prepare_to_wait_event: ref;

axiom prepare_to_wait_event == $sub.ref(0, 671121);

procedure prepare_to_wait_event($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);



const schedule: ref;

axiom schedule == $sub.ref(0, 672153);

procedure schedule();



const finish_wait: ref;

axiom finish_wait == $sub.ref(0, 673185);

procedure finish_wait($p0: ref, $p1: ref);



const vmci_q_header_add_producer_tail: ref;

axiom vmci_q_header_add_producer_tail == $sub.ref(0, 674217);

procedure vmci_q_header_add_producer_tail($p0: ref, $i1: i64, $i2: i64);



const vmci_qp_add_pointer: ref;

axiom vmci_qp_add_pointer == $sub.ref(0, 675249);

procedure vmci_qp_add_pointer($p0: ref, $i1: i64, $i2: i64);



const __qp_memcpy_to_queue: ref;

axiom __qp_memcpy_to_queue == $sub.ref(0, 676281);

procedure __qp_memcpy_to_queue($p0: ref, $i1: i64, $p2: ref, $i3: i64, $i4: i1) returns ($r: i32);



const kmap: ref;

axiom kmap == $sub.ref(0, 677313);

procedure kmap($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation kmap($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5317;

  corral_source_split_5317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1098} __might_sleep(.str.150, 58, 0);
    goto corral_source_split_5318;

  corral_source_split_5318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1099} $p1 := lowmem_page_address($p0);
    goto corral_source_split_5319;

  corral_source_split_5319:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const memcpy_from_msg: ref;

axiom memcpy_from_msg == $sub.ref(0, 678345);

procedure memcpy_from_msg($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);



const copy_from_iter: ref;

axiom copy_from_iter == $sub.ref(0, 679377);

procedure copy_from_iter($p0: ref, $i1: i64, $p2: ref) returns ($r: i64);



const lowmem_page_address: ref;

axiom lowmem_page_address == $sub.ref(0, 680409);

procedure lowmem_page_address($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation lowmem_page_address($p0: ref) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $i3: i64;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5321;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_5322;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 24189255811072);
    goto corral_source_split_5323;

  corral_source_split_5323:
    assume {:verifier.code 0} true;
    $i3 := $sdiv.i64($i2, 64);
    goto corral_source_split_5324;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    $i4 := $shl.i64($i3, 12);
    goto corral_source_split_5325;

  corral_source_split_5325:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i4, $sub.i64(0, 131941395333120));
    goto corral_source_split_5326;

  corral_source_split_5326:
    assume {:verifier.code 0} true;
    $p6 := $i2p.i64.ref($i5);
    goto corral_source_split_5327;

  corral_source_split_5327:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const vmci_qpair_dequeue: ref;

axiom vmci_qpair_dequeue == $sub.ref(0, 681441);

procedure vmci_qpair_dequeue($p0: ref, $p1: ref, $i2: i64, $i3: i32) returns ($r: i64);



const qp_memcpy_from_queue: ref;

axiom qp_memcpy_from_queue == $sub.ref(0, 682473);

procedure qp_memcpy_from_queue($p0: ref, $i1: i64, $p2: ref, $i3: i64, $i4: i64) returns ($r: i32);



const qp_dequeue_locked: ref;

axiom qp_dequeue_locked == $sub.ref(0, 683505);

procedure qp_dequeue_locked($p0: ref, $p1: ref, $i2: i64, $p3: ref, $i4: i64, $p5: ref, $i6: i1) returns ($r: i64);



const vmci_q_header_add_consumer_head: ref;

axiom vmci_q_header_add_consumer_head == $sub.ref(0, 684537);

procedure vmci_q_header_add_consumer_head($p0: ref, $i1: i64, $i2: i64);



const __qp_memcpy_from_queue: ref;

axiom __qp_memcpy_from_queue == $sub.ref(0, 685569);

procedure __qp_memcpy_from_queue($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i1) returns ($r: i32);



const memcpy_to_msg: ref;

axiom memcpy_to_msg == $sub.ref(0, 686601);

procedure memcpy_to_msg($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);



const copy_to_iter: ref;

axiom copy_to_iter == $sub.ref(0, 687633);

procedure copy_to_iter($p0: ref, $i1: i64, $p2: ref) returns ($r: i64);



const vmci_qpair_peek: ref;

axiom vmci_qpair_peek == $sub.ref(0, 688665);

procedure vmci_qpair_peek($p0: ref, $p1: ref, $i2: i64, $i3: i32) returns ($r: i64);



const vmci_qpair_enquev: ref;

axiom vmci_qpair_enquev == $sub.ref(0, 689697);

procedure vmci_qpair_enquev($p0: ref, $p1: ref, $i2: i64, $i3: i32) returns ($r: i64);



const qp_memcpy_to_queue_iov: ref;

axiom qp_memcpy_to_queue_iov == $sub.ref(0, 690729);

procedure qp_memcpy_to_queue_iov($p0: ref, $i1: i64, $p2: ref, $i3: i64, $i4: i64) returns ($r: i32);



const vmci_qpair_dequev: ref;

axiom vmci_qpair_dequev == $sub.ref(0, 691761);

procedure vmci_qpair_dequev($p0: ref, $p1: ref, $i2: i64, $i3: i32) returns ($r: i64);



const qp_memcpy_from_queue_iov: ref;

axiom qp_memcpy_from_queue_iov == $sub.ref(0, 692793);

procedure qp_memcpy_from_queue_iov($p0: ref, $i1: i64, $p2: ref, $i3: i64, $i4: i64) returns ($r: i32);



const vmci_qpair_peekv: ref;

axiom vmci_qpair_peekv == $sub.ref(0, 693825);

procedure vmci_qpair_peekv($p0: ref, $p1: ref, $i2: i64, $i3: i32) returns ($r: i64);



const vmci_guest_probe_device: ref;

axiom vmci_guest_probe_device == $sub.ref(0, 694857);

procedure vmci_guest_probe_device($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.0, $M.31, $M.87, $M.69, $M.108, $M.110, $M.112, $M.114, $M.70, $CurrAddr, $M.109, $M.111, $M.113, $M.115, assertsPassed;



implementation vmci_guest_probe_device($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i24;
  var $i11: i24;
  var $i12: i24;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $p32: ref;
  var $i33: i32;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $p47: ref;
  var $i48: i64;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i64;
  var $i54: i1;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $i60: i32;
  var $i61: i1;
  var $p62: ref;
  var $i64: i32;
  var $i65: i1;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i64;
  var $i73: i1;
  var $p74: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i32;
  var $i75: i32;
  var $i79: i32;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $i84: i32;
  var $i85: i1;
  var $p86: ref;
  var $i87: i64;
  var $i88: i64;
  var $i89: i32;
  var $i90: i1;
  var $i91: i8;
  var $i92: i1;
  var $i93: i32;
  var $i94: i1;
  var $p95: ref;
  var $i96: i32;
  var $i98: i32;
  var $i99: i1;
  var $i101: i32;
  var $i102: i1;
  var $p103: ref;
  var $i104: i8;
  var $i105: i1;
  var $i106: i32;
  var $i107: i1;
  var $p108: ref;
  var $p111: ref;
  var $i112: i32;
  var $p113: ref;
  var $i114: i8;
  var $i115: i1;
  var $i116: i32;
  var $i117: i1;
  var $p118: ref;
  var $p119: ref;
  var $i120: i32;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $i124: i32;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $i128: i32;
  var $p129: ref;
  var $p130: ref;
  var $i131: i32;
  var $p132: ref;
  var $i133: i32;
  var $i134: i1;
  var $p135: ref;
  var $p136: ref;
  var $i137: i32;
  var $p139: ref;
  var $i140: i8;
  var $i141: i1;
  var $p144: ref;
  var $i145: i32;
  var $p146: ref;
  var $i147: i32;
  var $i148: i1;
  var $p149: ref;
  var $p152: ref;
  var $i153: i32;
  var $p154: ref;
  var $p155: ref;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $p159: ref;
  var $i160: i24;
  var $i161: i24;
  var $i162: i24;
  var $p163: ref;
  var $p164: ref;
  var $i165: i8;
  var $i166: i64;
  var $i167: i64;
  var $i168: i64;
  var $i169: i1;
  var $p170: ref;
  var $i171: i32;
  var $i172: i1;
  var $i173: i64;
  var $i174: i64;
  var $i175: i32;
  var $p176: ref;
  var $p177: ref;
  var $p178: ref;
  var $p179: ref;
  var $p180: ref;
  var $p181: ref;
  var $p182: ref;
  var $p183: ref;
  var $i184: i32;
  var $p185: ref;
  var $p186: ref;
  var $p187: ref;
  var $i138: i32;
  var $p188: ref;
  var $i189: i32;
  var $i190: i1;
  var $p191: ref;
  var $i192: i32;
  var $i193: i1;
  var $i194: i32;
  var $i195: i32;
  var $i196: i1;
  var $p197: ref;
  var $i198: i32;
  var $i100: i32;
  var $p199: ref;
  var $p200: ref;
  var $i201: i64;
  var $i202: i1;
  var $p203: ref;
  var $p204: ref;
  var $p205: ref;
  var $p206: ref;
  var $p207: ref;
  var $p208: ref;
  var $p209: ref;
  var $i210: i64;
  var $i97: i32;
  var $i63: i32;
  var $p211: ref;
  var $p212: ref;
  var $i24: i32;
  var cmdloc_dummy_var_119: [ref]i8;
  var cmdloc_dummy_var_120: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1100} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1101} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_5329;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5330;

  corral_source_split_5330:
    assume {:verifier.code 0} true;
    $M.100 := $store.ref($M.100, $p4, .str.39);
    goto corral_source_split_5331;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5332;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    $M.101 := $store.ref($M.101, $p5, .str.81);
    goto corral_source_split_5333;

  corral_source_split_5333:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5334;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    $M.102 := $store.ref($M.102, $p6, .str.82);
    goto corral_source_split_5335;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5336;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    $M.103 := $store.ref($M.103, $p7, .str.83);
    goto corral_source_split_5337;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5338;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_5339;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    $i10 := $load.i24($M.104, $p9);
    goto corral_source_split_5340;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    $i11 := $and.i24($i10, $sub.i24(0, 262144));
    goto corral_source_split_5341;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    $i12 := $or.i24($i11, 466);
    goto corral_source_split_5342;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    $M.104 := $store.i24($M.104, $p9, $i12);
    goto corral_source_split_5343;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5344;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    $M.105 := $store.i8($M.105, $p13, 0);
    goto corral_source_split_5345;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5346;

  corral_source_split_5346:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.105, $p14);
    goto corral_source_split_5347;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i64($i15);
    goto corral_source_split_5348;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    $i17 := $and.i64($i16, 1);
    goto corral_source_split_5349;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1102} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 1103} {:cexpr "tmp"} boogie_si_record_i64($i18);
    goto corral_source_split_5350;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_5351;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1105} $i21 := pcim_enable_device($p0);
    call {:si_unique_call 1106} {:cexpr "error"} boogie_si_record_i32($i21);
    goto corral_source_split_5357;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_5358;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1108} $i25 := pcim_iomap_regions($p0, 1, .str.39);
    call {:si_unique_call 1109} {:cexpr "error"} boogie_si_record_i32($i25);
    goto corral_source_split_5366;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_5367;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1111} $p28 := pcim_iomap_table($p0);
    goto corral_source_split_5373;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_5374;

  corral_source_split_5374:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_5375;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p29);
    goto corral_source_split_5376;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1580, 1));
    goto corral_source_split_5377;

  corral_source_split_5377:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_5378;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1112} _dev_info.ref.ref.i64.i32($p30, .str.86, $i31, $i33);
    goto corral_source_split_5379;

  corral_source_split_5379:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_5380;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1113} $p35 := devm_kzalloc($p34, 152, 208);
    goto corral_source_split_5381;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_5382;

  corral_source_split_5382:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p36);
    goto corral_source_split_5383;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    $i38 := $eq.i64($i37, 0);
    goto corral_source_split_5384;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_5390;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p36, $mul.ref(0, 152)), $mul.ref(0, 1));
    goto corral_source_split_5391;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p41, $p40);
    goto corral_source_split_5392;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p36, $mul.ref(0, 152)), $mul.ref(20, 1));
    goto corral_source_split_5393;

  corral_source_split_5393:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p42, 0);
    goto corral_source_split_5394;

  corral_source_split_5394:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p36, $mul.ref(0, 152)), $mul.ref(24, 1));
    goto corral_source_split_5395;

  corral_source_split_5395:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p43, 0);
    goto corral_source_split_5396;

  corral_source_split_5396:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p36, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_5397;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p44, $p29);
    goto corral_source_split_5398;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p36, $mul.ref(0, 152)), $mul.ref(48, 1));
    goto corral_source_split_5399;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p36);
    goto corral_source_split_5400;

  corral_source_split_5400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1115} tasklet_init($p45, vmci_dispatch_dgs, $i46);
    goto corral_source_split_5401;

  corral_source_split_5401:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p36, $mul.ref(0, 152)), $mul.ref(88, 1));
    goto corral_source_split_5402;

  corral_source_split_5402:
    assume {:verifier.code 0} true;
    $i48 := $p2i.ref.i64($p36);
    goto corral_source_split_5403;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1116} tasklet_init($p47, vmci_process_bitmap, $i48);
    goto corral_source_split_5404;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1117} $p49 := vmalloc(69632);
    goto corral_source_split_5405;

  corral_source_split_5405:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p36, $mul.ref(0, 152)), $mul.ref(128, 1));
    goto corral_source_split_5406;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p50, $p49);
    goto corral_source_split_5407;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p36, $mul.ref(0, 152)), $mul.ref(128, 1));
    goto corral_source_split_5408;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_5409;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    $i53 := $p2i.ref.i64($p52);
    goto corral_source_split_5410;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    $i54 := $eq.i64($i53, 0);
    goto corral_source_split_5411;

  corral_source_split_5411:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1119} pci_set_master($p0);
    goto corral_source_split_5417;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p36, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_5418;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_5419;

  corral_source_split_5419:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($p57, $mul.ref(24, 1));
    goto corral_source_split_5420;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1120} $i59 := ioread32($p58);
    call {:si_unique_call 1121} {:cexpr "capabilities"} boogie_si_record_i32($i59);
    goto corral_source_split_5421;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    $i60 := $and.i32($i59, 4);
    goto corral_source_split_5422;

  corral_source_split_5422:
    assume {:verifier.code 0} true;
    $i61 := $eq.i32($i60, 0);
    goto corral_source_split_5423;

  corral_source_split_5423:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i64 := $and.i32($i59, 8);
    goto corral_source_split_5434;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    $i65 := $ne.i32($i64, 0);
    goto corral_source_split_5435;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    $i79 := $i59;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_5459;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_5460;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1128} _dev_info.ref.ref.i32($p80, .str.91, $i79);
    goto corral_source_split_5461;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p36, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_5462;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.0, $p81);
    goto corral_source_split_5463;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($p82, $mul.ref(24, 1));
    goto corral_source_split_5464;

  corral_source_split_5464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1129} iowrite32($i79, $p83);
    goto corral_source_split_5465;

  corral_source_split_5465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1130} spin_lock_irq(vmci_dev_spinlock);
    goto corral_source_split_5466;

  corral_source_split_5466:
    assume {:verifier.code 0} true;
    $M.31 := $p35;
    goto corral_source_split_5467;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    $M.87 := $p0;
    goto corral_source_split_5468;

  corral_source_split_5468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1131} spin_unlock_irq(vmci_dev_spinlock);
    goto corral_source_split_5469;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    $i84 := $and.i32($i79, 8);
    goto corral_source_split_5470;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    $i85 := $ne.i32($i84, 0);
    goto corral_source_split_5471;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1138} $i98 := vmci_check_host_caps($p0);
    call {:si_unique_call 1139} {:cexpr "error"} boogie_si_record_i32($i98);
    goto corral_source_split_5498;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    $i99 := $ne.i32($i98, 0);
    goto corral_source_split_5499;

  corral_source_split_5499:
    assume {:verifier.code 0} true;
    assume {:branchcond $i99} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1140} $i101 := vmci_event_subscribe(0, vmci_guest_cid_update, $0.ref, ctx_update_sub_id);
    goto SeqInstr_310, SeqInstr_311;

  SeqInstr_311:
    assume assertsPassed;
    goto SeqInstr_312;

  SeqInstr_312:
    call {:si_unique_call 1141} {:cexpr "vmci_err"} boogie_si_record_i32($i101);
    goto corral_source_split_5509;

  corral_source_split_5509:
    assume {:verifier.code 0} true;
    $i102 := $slt.i32($i101, 0);
    goto corral_source_split_5510;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i104 := $M.106;
    goto corral_source_split_5516;

  corral_source_split_5516:
    assume {:verifier.code 0} true;
    $i105 := $trunc.i8.i1($i104);
    goto corral_source_split_5517;

  corral_source_split_5517:
    assume {:verifier.code 0} true;
    assume {:branchcond $i105} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i105 == 1);
    goto corral_source_split_5521;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1143} $i106 := vmci_enable_msix($p0, $p36);
    call {:si_unique_call 1144} {:cexpr "tmp___5"} boogie_si_record_i32($i106);
    goto corral_source_split_5522;

  corral_source_split_5522:
    assume {:verifier.code 0} true;
    $i107 := $eq.i32($i106, 0);
    goto corral_source_split_5523;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    assume {:branchcond $i107} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i107 == 1);
    goto corral_source_split_5533;

  corral_source_split_5533:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $i114 := $M.107;
    goto corral_source_split_5535;

  corral_source_split_5535:
    assume {:verifier.code 0} true;
    $i115 := $trunc.i8.i1($i114);
    goto corral_source_split_5536;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    assume {:branchcond $i115} true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i115 == 1);
    goto corral_source_split_5551;

  corral_source_split_5551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1147} $i116 := pci_enable_msi_exact($p0, 1);
    call {:si_unique_call 1148} {:cexpr "tmp___4"} boogie_si_record_i32($i116);
    goto corral_source_split_5552;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    $i117 := $eq.i32($i116, 0);
    goto corral_source_split_5553;

  corral_source_split_5553:
    assume {:verifier.code 0} true;
    assume {:branchcond $i117} true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i117 == 1);
    goto corral_source_split_5563;

  corral_source_split_5563:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p36, $mul.ref(0, 152)), $mul.ref(20, 1));
    goto corral_source_split_5564;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p122, 0);
    goto corral_source_split_5565;

  corral_source_split_5565:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1580, 1));
    goto corral_source_split_5566;

  corral_source_split_5566:
    assume {:verifier.code 0} true;
    $i124 := $load.i32($M.0, $p123);
    goto corral_source_split_5567;

  corral_source_split_5567:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p36, $mul.ref(0, 152)), $mul.ref(16, 1));
    goto corral_source_split_5568;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p125, $i124);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p36, $mul.ref(0, 152)), $mul.ref(16, 1));
    goto corral_source_split_5538;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    $i131 := $load.i32($M.0, $p130);
    goto corral_source_split_5539;

  corral_source_split_5539:
    assume {:verifier.code 0} true;
    $p132 := $bitcast.ref.ref($p36);
    goto corral_source_split_5540;

  corral_source_split_5540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1145} $i133 := ldv_request_irq_119($i131, vmci_interrupt, 128, .str.39, $p132);
    call {:si_unique_call 1146} {:cexpr "error"} boogie_si_record_i32($i133);
    goto corral_source_split_5541;

  corral_source_split_5541:
    assume {:verifier.code 0} true;
    $i134 := $ne.i32($i133, 0);
    goto corral_source_split_5542;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    assume {:branchcond $i134} true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i134 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p36, $mul.ref(0, 152)), $mul.ref(24, 1));
    goto corral_source_split_5581;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    $i140 := $load.i8($M.0, $p139);
    goto corral_source_split_5582;

  corral_source_split_5582:
    assume {:verifier.code 0} true;
    $i141 := $trunc.i8.i1($i140);
    goto corral_source_split_5583;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    assume {:branchcond $i141} true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i141 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5607;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    $M.100 := $store.ref($M.100, $p154, .str.39);
    goto corral_source_split_5608;

  corral_source_split_5608:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5609;

  corral_source_split_5609:
    assume {:verifier.code 0} true;
    $M.101 := $store.ref($M.101, $p155, .str.81);
    goto corral_source_split_5610;

  corral_source_split_5610:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5611;

  corral_source_split_5611:
    assume {:verifier.code 0} true;
    $M.102 := $store.ref($M.102, $p156, .str.82);
    goto corral_source_split_5612;

  corral_source_split_5612:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5613;

  corral_source_split_5613:
    assume {:verifier.code 0} true;
    $M.103 := $store.ref($M.103, $p157, .str.96);
    goto corral_source_split_5614;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5615;

  corral_source_split_5615:
    assume {:verifier.code 0} true;
    $p159 := $bitcast.ref.ref($p158);
    goto corral_source_split_5616;

  corral_source_split_5616:
    assume {:verifier.code 0} true;
    $i160 := $load.i24($M.104, $p159);
    goto corral_source_split_5617;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    $i161 := $and.i24($i160, $sub.i24(0, 262144));
    goto corral_source_split_5618;

  corral_source_split_5618:
    assume {:verifier.code 0} true;
    $i162 := $or.i24($i161, 636);
    goto corral_source_split_5619;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    $M.104 := $store.i24($M.104, $p159, $i162);
    goto corral_source_split_5620;

  corral_source_split_5620:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5621;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    $M.105 := $store.i8($M.105, $p163, 0);
    goto corral_source_split_5622;

  corral_source_split_5622:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5623;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    $i165 := $load.i8($M.105, $p164);
    goto corral_source_split_5624;

  corral_source_split_5624:
    assume {:verifier.code 0} true;
    $i166 := $zext.i8.i64($i165);
    goto corral_source_split_5625;

  corral_source_split_5625:
    assume {:verifier.code 0} true;
    $i167 := $and.i64($i166, 1);
    goto corral_source_split_5626;

  corral_source_split_5626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1156} $i168 := ldv__builtin_expect($i167, 0);
    call {:si_unique_call 1157} {:cexpr "tmp___6"} boogie_si_record_i64($i168);
    goto corral_source_split_5627;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    $i169 := $ne.i64($i168, 0);
    goto corral_source_split_5628;

  corral_source_split_5628:
    assume {:verifier.code 0} true;
    assume {:branchcond $i169} true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i169 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1159} atomic_inc(vmci_num_guest_devices);
    goto corral_source_split_5634;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    $i171 := $and.i32($i79, 8);
    goto corral_source_split_5635;

  corral_source_split_5635:
    assume {:verifier.code 0} true;
    $i172 := $ne.i32($i171, 0);
    goto corral_source_split_5636;

  corral_source_split_5636:
    assume {:verifier.code 0} true;
    assume {:branchcond $i172} true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i172 == 1);
    assume {:verifier.code 0} true;
    $i174 := 1;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto corral_source_split_5641;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    $i175 := $trunc.i64.i32($i174);
    goto corral_source_split_5642;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p36, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_5643;

  corral_source_split_5643:
    assume {:verifier.code 0} true;
    $p177 := $load.ref($M.0, $p176);
    goto corral_source_split_5644;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($p177, $mul.ref(12, 1));
    goto corral_source_split_5645;

  corral_source_split_5645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1161} iowrite32($i175, $p178);
    goto corral_source_split_5646;

  corral_source_split_5646:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($p36, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_5647;

  corral_source_split_5647:
    assume {:verifier.code 0} true;
    $p180 := $load.ref($M.0, $p179);
    goto corral_source_split_5648;

  corral_source_split_5648:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($p180, $mul.ref(4, 1));
    goto corral_source_split_5649;

  corral_source_split_5649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1162} iowrite32(2, $p181);
    goto corral_source_split_5650;

  corral_source_split_5650:
    assume {:verifier.code 0} true;
    $p182 := $bitcast.ref.ref($p36);
    goto corral_source_split_5651;

  corral_source_split_5651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1163} pci_set_drvdata($p0, $p182);
    goto corral_source_split_5652;

  corral_source_split_5652:
    assume {:verifier.code 0} true;
    $i24 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5364;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    $r := $i24;
    return;

  $bb71:
    assume $i172 == 1;
    goto corral_source_split_5638;

  corral_source_split_5638:
    assume {:verifier.code 0} true;
    $i173 := $or.i64(1, 2);
    call {:si_unique_call 1160} {:cexpr "cmd"} boogie_si_record_i64($i173);
    goto corral_source_split_5639;

  corral_source_split_5639:
    assume {:verifier.code 0} true;
    $i174 := $i173;
    goto $bb73;

  $bb68:
    assume $i169 == 1;
    goto corral_source_split_5630;

  corral_source_split_5630:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_5631;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1158} __dynamic_dev_dbg.ref.ref.ref($p3, $p170, .str.96);
    goto corral_source_split_5632;

  corral_source_split_5632:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb61:
    assume $i141 == 1;
    goto corral_source_split_5585;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($add.ref($add.ref($p36, $mul.ref(0, 152)), $mul.ref(28, 1)), $mul.ref(1, 8)), $mul.ref(0, 1));
    goto corral_source_split_5586;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    $i145 := $load.i32($M.0, $p144);
    goto corral_source_split_5587;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    $p146 := $bitcast.ref.ref($p36);
    goto corral_source_split_5588;

  corral_source_split_5588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1150} $i147 := ldv_request_irq_120($i145, vmci_interrupt_bm, 0, .str.39, $p146);
    call {:si_unique_call 1151} {:cexpr "error"} boogie_si_record_i32($i147);
    goto corral_source_split_5589;

  corral_source_split_5589:
    assume {:verifier.code 0} true;
    $i148 := $ne.i32($i147, 0);
    goto corral_source_split_5590;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    assume {:branchcond $i148} true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i148 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb63:
    assume $i148 == 1;
    goto corral_source_split_5592;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_5593;

  corral_source_split_5593:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($add.ref($add.ref($p36, $mul.ref(0, 152)), $mul.ref(28, 1)), $mul.ref(1, 8)), $mul.ref(0, 1));
    goto corral_source_split_5594;

  corral_source_split_5594:
    assume {:verifier.code 0} true;
    $i153 := $load.i32($M.0, $p152);
    goto corral_source_split_5595;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1152} dev_err.ref.ref.i32.i32($p149, .str.95, $i153, $i147);
    goto corral_source_split_5596;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p36, $mul.ref(0, 152)), $mul.ref(16, 1));
    goto corral_source_split_5598;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    $i184 := $load.i32($M.0, $p183);
    goto corral_source_split_5599;

  corral_source_split_5599:
    assume {:verifier.code 0} true;
    $p185 := $bitcast.ref.ref($p36);
    goto corral_source_split_5600;

  corral_source_split_5600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1153} ldv_free_irq_121($i184, $p185);
    goto corral_source_split_5601;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($p36, $mul.ref(0, 152)), $mul.ref(48, 1));
    goto corral_source_split_5602;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1154} tasklet_kill($p186);
    goto corral_source_split_5603;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($p36, $mul.ref(0, 152)), $mul.ref(88, 1));
    goto corral_source_split_5604;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1155} tasklet_kill($p187);
    goto corral_source_split_5605;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    $i138 := $i147;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto corral_source_split_5576;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($p36, $mul.ref(0, 152)), $mul.ref(20, 1));
    goto corral_source_split_5577;

  corral_source_split_5577:
    assume {:verifier.code 0} true;
    $i189 := $load.i32($M.0, $p188);
    goto corral_source_split_5578;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    $i190 := $eq.i32($i189, 2);
    goto corral_source_split_5579;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    assume {:branchcond $i190} true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i190 == 1);
    goto corral_source_split_5657;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($p36, $mul.ref(0, 152)), $mul.ref(20, 1));
    goto corral_source_split_5658;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    $i192 := $load.i32($M.0, $p191);
    goto corral_source_split_5659;

  corral_source_split_5659:
    assume {:verifier.code 0} true;
    $i193 := $eq.i32($i192, 1);
    goto corral_source_split_5660;

  corral_source_split_5660:
    assume {:verifier.code 0} true;
    assume {:branchcond $i193} true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i193 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $i194 := $M.69;
    goto corral_source_split_5662;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1165} $i195 := vmci_event_unsubscribe($i194);
    goto SeqInstr_313, SeqInstr_314;

  SeqInstr_314:
    assume assertsPassed;
    goto SeqInstr_315;

  SeqInstr_315:
    call {:si_unique_call 1166} {:cexpr "vmci_err"} boogie_si_record_i32($i195);
    goto corral_source_split_5663;

  corral_source_split_5663:
    assume {:verifier.code 0} true;
    $i196 := $slt.i32($i195, 0);
    goto corral_source_split_5664;

  corral_source_split_5664:
    assume {:verifier.code 0} true;
    assume {:branchcond $i196} true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i196 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $i100 := $i138;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_5503;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($p36, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_5504;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    $p200 := $load.ref($M.0, $p199);
    goto corral_source_split_5505;

  corral_source_split_5505:
    assume {:verifier.code 0} true;
    $i201 := $p2i.ref.i64($p200);
    goto corral_source_split_5506;

  corral_source_split_5506:
    assume {:verifier.code 0} true;
    $i202 := $ne.i64($i201, 0);
    goto corral_source_split_5507;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    assume {:branchcond $i202} true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i202 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    $i97 := $i100;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_5492;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1136} spin_lock_irq(vmci_dev_spinlock);
    goto corral_source_split_5493;

  corral_source_split_5493:
    assume {:verifier.code 0} true;
    $M.87 := $0.ref;
    goto corral_source_split_5494;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    $M.31 := $0.ref;
    goto corral_source_split_5495;

  corral_source_split_5495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1137} spin_unlock_irq(vmci_dev_spinlock);
    goto corral_source_split_5496;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    $i63 := $i97;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_5429;

  corral_source_split_5429:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p36, $mul.ref(0, 152)), $mul.ref(128, 1));
    goto corral_source_split_5430;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    $p212 := $load.ref($M.0, $p211);
    goto corral_source_split_5431;

  corral_source_split_5431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1123} vfree($p212);
    goto corral_source_split_5432;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    $i24 := $i63;
    goto $bb6;

  $bb83:
    assume $i202 == 1;
    goto corral_source_split_5674;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($p36, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_5675;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    $p204 := $load.ref($M.0, $p203);
    goto corral_source_split_5676;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($p204, $mul.ref(4, 1));
    goto corral_source_split_5677;

  corral_source_split_5677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1169} iowrite32(1, $p205);
    goto corral_source_split_5678;

  corral_source_split_5678:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_5679;

  corral_source_split_5679:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($p36, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_5680;

  corral_source_split_5680:
    assume {:verifier.code 0} true;
    $p208 := $load.ref($M.0, $p207);
    goto corral_source_split_5681;

  corral_source_split_5681:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($p36, $mul.ref(0, 152)), $mul.ref(144, 1));
    goto corral_source_split_5682;

  corral_source_split_5682:
    assume {:verifier.code 0} true;
    $i210 := $load.i64($M.0, $p209);
    goto corral_source_split_5683;

  corral_source_split_5683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1170} dma_free_attrs($p206, 4096, $p208, $i210, $0.ref);
    goto corral_source_split_5684;

  corral_source_split_5684:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb80:
    assume $i196 == 1;
    goto corral_source_split_5669;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_5670;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    $i198 := $M.69;
    goto corral_source_split_5671;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1168} dev_warn.ref.ref.i32.i32.i32($p197, .str.97, 0, $i198, $i195);
    goto corral_source_split_5672;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    goto $bb82;

  SeqInstr_313:
    assume !assertsPassed;
    return;

  $bb77:
    assume $i193 == 1;
    goto corral_source_split_5666;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1167} pci_disable_msi($p0);
    goto corral_source_split_5667;

  corral_source_split_5667:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb74:
    assume $i190 == 1;
    goto corral_source_split_5654;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1164} pci_disable_msix($p0);
    goto corral_source_split_5655;

  corral_source_split_5655:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb57:
    assume $i134 == 1;
    goto corral_source_split_5570;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_5571;

  corral_source_split_5571:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p36, $mul.ref(0, 152)), $mul.ref(16, 1));
    goto corral_source_split_5572;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    $i137 := $load.i32($M.0, $p136);
    goto corral_source_split_5573;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1149} dev_err.ref.ref.i32.i32($p135, .str.94, $i137, $i133);
    goto corral_source_split_5574;

  corral_source_split_5574:
    assume {:verifier.code 0} true;
    $i138 := $i133;
    goto $bb59;

  $bb53:
    assume $i117 == 1;
    goto corral_source_split_5555;

  corral_source_split_5555:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p36, $mul.ref(0, 152)), $mul.ref(20, 1));
    goto corral_source_split_5556;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p118, 1);
    goto corral_source_split_5557;

  corral_source_split_5557:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1580, 1));
    goto corral_source_split_5558;

  corral_source_split_5558:
    assume {:verifier.code 0} true;
    $i120 := $load.i32($M.0, $p119);
    goto corral_source_split_5559;

  corral_source_split_5559:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p36, $mul.ref(0, 152)), $mul.ref(16, 1));
    goto corral_source_split_5560;

  corral_source_split_5560:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p121, $i120);
    goto corral_source_split_5561;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb51:
    assume $i115 == 1;
    goto corral_source_split_5544;

  corral_source_split_5544:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p36, $mul.ref(0, 152)), $mul.ref(20, 1));
    goto corral_source_split_5545;

  corral_source_split_5545:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p126, 0);
    goto corral_source_split_5546;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1580, 1));
    goto corral_source_split_5547;

  corral_source_split_5547:
    assume {:verifier.code 0} true;
    $i128 := $load.i32($M.0, $p127);
    goto corral_source_split_5548;

  corral_source_split_5548:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p36, $mul.ref(0, 152)), $mul.ref(16, 1));
    goto corral_source_split_5549;

  corral_source_split_5549:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p129, $i128);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb46:
    assume $i107 == 1;
    goto corral_source_split_5525;

  corral_source_split_5525:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p36, $mul.ref(0, 152)), $mul.ref(20, 1));
    goto corral_source_split_5526;

  corral_source_split_5526:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p108, 2);
    goto corral_source_split_5527;

  corral_source_split_5527:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($add.ref($add.ref($p36, $mul.ref(0, 152)), $mul.ref(28, 1)), $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_5528;

  corral_source_split_5528:
    assume {:verifier.code 0} true;
    $i112 := $load.i32($M.0, $p111);
    goto corral_source_split_5529;

  corral_source_split_5529:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p36, $mul.ref(0, 152)), $mul.ref(16, 1));
    goto corral_source_split_5530;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p113, $i112);
    goto corral_source_split_5531;

  corral_source_split_5531:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb44:
    assume $i105 == 1;
    goto corral_source_split_5519;

  corral_source_split_5519:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb41:
    assume $i102 == 1;
    goto corral_source_split_5512;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_5513;

  corral_source_split_5513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1142} dev_warn.ref.ref.i32.i32($p103, .str.93, 0, $i101);
    goto corral_source_split_5514;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    goto $bb43;

  SeqInstr_310:
    assume !assertsPassed;
    return;

  $bb37:
    assume $i99 == 1;
    goto corral_source_split_5501;

  corral_source_split_5501:
    assume {:verifier.code 0} true;
    $i100 := $i98;
    goto $bb39;

  $bb27:
    assume $i85 == 1;
    goto corral_source_split_5473;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p36, $mul.ref(0, 152)), $mul.ref(144, 1));
    goto corral_source_split_5474;

  corral_source_split_5474:
    assume {:verifier.code 0} true;
    $i87 := $load.i64($M.0, $p86);
    goto corral_source_split_5475;

  corral_source_split_5475:
    assume {:verifier.code 0} true;
    $i88 := $lshr.i64($i87, 12);
    call {:si_unique_call 1132} {:cexpr "bitmap_ppn"} boogie_si_record_i64($i88);
    goto corral_source_split_5476;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    $i89 := $trunc.i64.i32($i88);
    goto corral_source_split_5477;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1133} $i90 := vmci_dbell_register_notification_bitmap($i89);
    goto corral_source_split_5478;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    $i91 := $zext.i1.i8($i90);
    call {:si_unique_call 1134} {:cexpr "tmp___2"} boogie_si_record_i8($i91);
    goto corral_source_split_5479;

  corral_source_split_5479:
    assume {:verifier.code 0} true;
    $i92 := $trunc.i8.i1($i91);
    goto corral_source_split_5480;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    $i93 := 1;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_5484;

  corral_source_split_5484:
    assume {:verifier.code 0} true;
    $i94 := $ne.i32($i93, 0);
    goto corral_source_split_5485;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    assume {:branchcond $i94} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb32:
    assume $i94 == 1;
    goto corral_source_split_5487;

  corral_source_split_5487:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_5488;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    $i96 := $trunc.i64.i32($i88);
    goto corral_source_split_5489;

  corral_source_split_5489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1135} dev_warn.ref.ref.i32($p95, .str.92, $i96);
    goto corral_source_split_5490;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    $i97 := $sub.i32(0, 6);
    goto $bb34;

  $bb29:
    assume $i92 == 1;
    goto corral_source_split_5482;

  corral_source_split_5482:
    assume {:verifier.code 0} true;
    $i93 := 0;
    goto $bb31;

  $bb21:
    assume $i65 == 1;
    goto corral_source_split_5437;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_5438;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p36, $mul.ref(0, 152)), $mul.ref(144, 1));
    goto corral_source_split_5439;

  corral_source_split_5439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1124} $p68 := dma_alloc_attrs($p66, 4096, $p67, 208, $0.ref);
    goto corral_source_split_5440;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p36, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_5441;

  corral_source_split_5441:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p69, $p68);
    goto corral_source_split_5442;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p36, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_5443;

  corral_source_split_5443:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.0, $p70);
    goto corral_source_split_5444;

  corral_source_split_5444:
    assume {:verifier.code 0} true;
    $i72 := $p2i.ref.i64($p71);
    goto corral_source_split_5445;

  corral_source_split_5445:
    assume {:verifier.code 0} true;
    $i73 := $eq.i64($i72, 0);
    goto corral_source_split_5446;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    assume {:branchcond $i73} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i73 == 1);
    goto corral_source_split_5452;

  corral_source_split_5452:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p36, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_5453;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.0, $p76);
    goto corral_source_split_5454;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_119 := $M.0;
    call {:si_unique_call 1126} cmdloc_dummy_var_120 := $memset.i8(cmdloc_dummy_var_119, $p77, 0, 4096, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_120;
    goto corral_source_split_5455;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    $i78 := $or.i32($i59, 8);
    call {:si_unique_call 1127} {:cexpr "capabilities"} boogie_si_record_i32($i78);
    assume {:verifier.code 0} true;
    $i75 := $i78;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_5457;

  corral_source_split_5457:
    assume {:verifier.code 0} true;
    $i79 := $i75;
    goto $bb26;

  $bb23:
    assume $i73 == 1;
    goto corral_source_split_5448;

  corral_source_split_5448:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_5449;

  corral_source_split_5449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1125} dev_warn.ref.ref($p74, .str.90);
    goto corral_source_split_5450;

  corral_source_split_5450:
    assume {:verifier.code 0} true;
    $i75 := $i59;
    goto $bb25;

  $bb17:
    assume $i61 == 1;
    goto corral_source_split_5425;

  corral_source_split_5425:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_5426;

  corral_source_split_5426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1122} dev_err.ref.ref($p62, .str.89);
    goto corral_source_split_5427;

  corral_source_split_5427:
    assume {:verifier.code 0} true;
    $i63 := $sub.i32(0, 6);
    goto $bb19;

  $bb14:
    assume $i54 == 1;
    goto corral_source_split_5413;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_5414;

  corral_source_split_5414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1118} dev_err.ref.ref($p55, .str.88);
    goto corral_source_split_5415;

  corral_source_split_5415:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32(0, 12);
    goto $bb6;

  $bb11:
    assume $i38 == 1;
    goto corral_source_split_5386;

  corral_source_split_5386:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_5387;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1114} dev_err.ref.ref($p39, .str.87);
    goto corral_source_split_5388;

  corral_source_split_5388:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32(0, 12);
    goto $bb6;

  $bb8:
    assume $i26 == 1;
    goto corral_source_split_5369;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_5370;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1110} dev_err.ref.ref($p27, .str.85);
    goto corral_source_split_5371;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    $i24 := $i25;
    goto $bb6;

  $bb4:
    assume $i22 == 1;
    goto corral_source_split_5360;

  corral_source_split_5360:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_5361;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1107} dev_err.ref.ref.i32($p23, .str.84, $i21);
    goto corral_source_split_5362;

  corral_source_split_5362:
    assume {:verifier.code 0} true;
    $i24 := $i21;
    goto $bb6;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_5353;

  corral_source_split_5353:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_5354;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1104} __dynamic_dev_dbg.ref.ref.ref($p2, $p20, .str.83);
    goto corral_source_split_5355;

  corral_source_split_5355:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vmci_guest_remove_device: ref;

axiom vmci_guest_remove_device == $sub.ref(0, 695889);

procedure vmci_guest_remove_device($p0: ref);
  free requires assertsPassed;
  modifies $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.31, $M.87, $M.0, $M.20, $M.21, $M.70, $CurrAddr, $M.28, $M.33, assertsPassed, $M.108, $M.110, $M.112, $M.114, $M.2, $M.3, $M.6, $M.13, $M.18, $M.19, $M.69, $M.23, $M.24, $M.25, $M.26, $M.27, $M.29, $M.45, $M.48, $M.47, $M.89, $M.109, $M.111, $M.113, $M.115, $M.34, $M.30, $M.35, $M.46, $M.90, $M.86, $M.91, $M.44, $M.32, $M.36, $M.38, $M.40, $M.42;



implementation vmci_guest_remove_device($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i24;
  var $i12: i24;
  var $i13: i24;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i24;
  var $i34: i24;
  var $i35: i24;
  var $p36: ref;
  var $p37: ref;
  var $i38: i8;
  var $i39: i64;
  var $i40: i64;
  var $i41: i64;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i32;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $i52: i1;
  var $p53: ref;
  var $i54: i8;
  var $i55: i1;
  var $p58: ref;
  var $i59: i32;
  var $p60: ref;
  var $p61: ref;
  var $i62: i32;
  var $i63: i1;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i64;
  var $i69: i1;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i64;
  var $p75: ref;
  var $p76: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1171} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1172} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_5686;

  corral_source_split_5686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1173} $p3 := pci_get_drvdata($p0);
    goto corral_source_split_5687;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5688;

  corral_source_split_5688:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5689;

  corral_source_split_5689:
    assume {:verifier.code 0} true;
    $M.100 := $store.ref($M.100, $p5, .str.39);
    goto corral_source_split_5690;

  corral_source_split_5690:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5691;

  corral_source_split_5691:
    assume {:verifier.code 0} true;
    $M.101 := $store.ref($M.101, $p6, .str.111);
    goto corral_source_split_5692;

  corral_source_split_5692:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5693;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    $M.102 := $store.ref($M.102, $p7, .str.82);
    goto corral_source_split_5694;

  corral_source_split_5694:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5695;

  corral_source_split_5695:
    assume {:verifier.code 0} true;
    $M.103 := $store.ref($M.103, $p8, .str.112);
    goto corral_source_split_5696;

  corral_source_split_5696:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5697;

  corral_source_split_5697:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_5698;

  corral_source_split_5698:
    assume {:verifier.code 0} true;
    $i11 := $load.i24($M.104, $p10);
    goto corral_source_split_5699;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    $i12 := $and.i24($i11, $sub.i24(0, 262144));
    goto corral_source_split_5700;

  corral_source_split_5700:
    assume {:verifier.code 0} true;
    $i13 := $or.i24($i12, 697);
    goto corral_source_split_5701;

  corral_source_split_5701:
    assume {:verifier.code 0} true;
    $M.104 := $store.i24($M.104, $p10, $i13);
    goto corral_source_split_5702;

  corral_source_split_5702:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5703;

  corral_source_split_5703:
    assume {:verifier.code 0} true;
    $M.105 := $store.i8($M.105, $p14, 0);
    goto corral_source_split_5704;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5705;

  corral_source_split_5705:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.105, $p15);
    goto corral_source_split_5706;

  corral_source_split_5706:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i64($i16);
    goto corral_source_split_5707;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    $i18 := $and.i64($i17, 1);
    goto corral_source_split_5708;

  corral_source_split_5708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1174} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 1175} {:cexpr "tmp___0"} boogie_si_record_i64($i19);
    goto corral_source_split_5709;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_5710;

  corral_source_split_5710:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1177} atomic_dec(vmci_num_guest_devices);
    goto corral_source_split_5716;

  corral_source_split_5716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1178} vmci_qp_guest_endpoints_exit();
    goto SeqInstr_316, SeqInstr_317;

  SeqInstr_317:
    assume assertsPassed;
    goto SeqInstr_318;

  SeqInstr_318:
    goto corral_source_split_5717;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    $i22 := $M.69;
    goto corral_source_split_5718;

  corral_source_split_5718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1179} $i23 := vmci_event_unsubscribe($i22);
    goto SeqInstr_319, SeqInstr_320;

  SeqInstr_320:
    assume assertsPassed;
    goto SeqInstr_321;

  SeqInstr_321:
    call {:si_unique_call 1180} {:cexpr "vmci_err"} boogie_si_record_i32($i23);
    goto corral_source_split_5719;

  corral_source_split_5719:
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i23, 0);
    goto corral_source_split_5720;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1182} spin_lock_irq(vmci_dev_spinlock);
    goto corral_source_split_5727;

  corral_source_split_5727:
    assume {:verifier.code 0} true;
    $M.31 := $0.ref;
    goto corral_source_split_5728;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    $M.87 := $0.ref;
    goto corral_source_split_5729;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1183} spin_unlock_irq(vmci_dev_spinlock);
    goto corral_source_split_5730;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5731;

  corral_source_split_5731:
    assume {:verifier.code 0} true;
    $M.100 := $store.ref($M.100, $p27, .str.39);
    goto corral_source_split_5732;

  corral_source_split_5732:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5733;

  corral_source_split_5733:
    assume {:verifier.code 0} true;
    $M.101 := $store.ref($M.101, $p28, .str.111);
    goto corral_source_split_5734;

  corral_source_split_5734:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5735;

  corral_source_split_5735:
    assume {:verifier.code 0} true;
    $M.102 := $store.ref($M.102, $p29, .str.82);
    goto corral_source_split_5736;

  corral_source_split_5736:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5737;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    $M.103 := $store.ref($M.103, $p30, .str.113);
    goto corral_source_split_5738;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5739;

  corral_source_split_5739:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_5740;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    $i33 := $load.i24($M.104, $p32);
    goto corral_source_split_5741;

  corral_source_split_5741:
    assume {:verifier.code 0} true;
    $i34 := $and.i24($i33, $sub.i24(0, 262144));
    goto corral_source_split_5742;

  corral_source_split_5742:
    assume {:verifier.code 0} true;
    $i35 := $or.i24($i34, 714);
    goto corral_source_split_5743;

  corral_source_split_5743:
    assume {:verifier.code 0} true;
    $M.104 := $store.i24($M.104, $p32, $i35);
    goto corral_source_split_5744;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5745;

  corral_source_split_5745:
    assume {:verifier.code 0} true;
    $M.105 := $store.i8($M.105, $p36, 0);
    goto corral_source_split_5746;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5747;

  corral_source_split_5747:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.105, $p37);
    goto corral_source_split_5748;

  corral_source_split_5748:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i64($i38);
    goto corral_source_split_5749;

  corral_source_split_5749:
    assume {:verifier.code 0} true;
    $i40 := $and.i64($i39, 1);
    goto corral_source_split_5750;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1184} $i41 := ldv__builtin_expect($i40, 0);
    call {:si_unique_call 1185} {:cexpr "tmp___1"} boogie_si_record_i64($i41);
    goto corral_source_split_5751;

  corral_source_split_5751:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, 0);
    goto corral_source_split_5752;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p4, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_5758;

  corral_source_split_5758:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_5759;

  corral_source_split_5759:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($p45, $mul.ref(4, 1));
    goto corral_source_split_5760;

  corral_source_split_5760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1187} iowrite32(1, $p46);
    goto corral_source_split_5761;

  corral_source_split_5761:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p4, $mul.ref(0, 152)), $mul.ref(16, 1));
    goto corral_source_split_5762;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.0, $p47);
    goto corral_source_split_5763;

  corral_source_split_5763:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p4);
    goto corral_source_split_5764;

  corral_source_split_5764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1188} ldv_free_irq_122($i48, $p49);
    goto corral_source_split_5765;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p4, $mul.ref(0, 152)), $mul.ref(20, 1));
    goto corral_source_split_5766;

  corral_source_split_5766:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    goto corral_source_split_5767;

  corral_source_split_5767:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i51, 2);
    goto corral_source_split_5768;

  corral_source_split_5768:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i52 == 1);
    goto corral_source_split_5775;

  corral_source_split_5775:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p4, $mul.ref(0, 152)), $mul.ref(20, 1));
    goto corral_source_split_5776;

  corral_source_split_5776:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.0, $p61);
    goto corral_source_split_5777;

  corral_source_split_5777:
    assume {:verifier.code 0} true;
    $i63 := $eq.i32($i62, 1);
    goto corral_source_split_5778;

  corral_source_split_5778:
    assume {:verifier.code 0} true;
    assume {:branchcond $i63} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p4, $mul.ref(0, 152)), $mul.ref(48, 1));
    goto corral_source_split_5788;

  corral_source_split_5788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1191} tasklet_kill($p64);
    goto corral_source_split_5789;

  corral_source_split_5789:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p4, $mul.ref(0, 152)), $mul.ref(88, 1));
    goto corral_source_split_5790;

  corral_source_split_5790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1192} tasklet_kill($p65);
    goto corral_source_split_5791;

  corral_source_split_5791:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p4, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_5792;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_5793;

  corral_source_split_5793:
    assume {:verifier.code 0} true;
    $i68 := $p2i.ref.i64($p67);
    goto corral_source_split_5794;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    $i69 := $ne.i64($i68, 0);
    goto corral_source_split_5795;

  corral_source_split_5795:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p4, $mul.ref(0, 152)), $mul.ref(128, 1));
    goto corral_source_split_5808;

  corral_source_split_5808:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.0, $p75);
    goto corral_source_split_5809;

  corral_source_split_5809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1195} vfree($p76);
    goto corral_source_split_5810;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    return;

  $bb19:
    assume $i69 == 1;
    goto corral_source_split_5800;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_5801;

  corral_source_split_5801:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p4, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_5802;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_5803;

  corral_source_split_5803:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p4, $mul.ref(0, 152)), $mul.ref(144, 1));
    goto corral_source_split_5804;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    $i74 := $load.i64($M.0, $p73);
    goto corral_source_split_5805;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1194} dma_free_attrs($p70, 4096, $p72, $i74, $0.ref);
    goto corral_source_split_5806;

  corral_source_split_5806:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb16:
    assume $i63 == 1;
    goto corral_source_split_5797;

  corral_source_split_5797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1193} pci_disable_msi($p0);
    goto corral_source_split_5798;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb10:
    assume $i52 == 1;
    goto corral_source_split_5770;

  corral_source_split_5770:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p4, $mul.ref(0, 152)), $mul.ref(24, 1));
    goto corral_source_split_5771;

  corral_source_split_5771:
    assume {:verifier.code 0} true;
    $i54 := $load.i8($M.0, $p53);
    goto corral_source_split_5772;

  corral_source_split_5772:
    assume {:verifier.code 0} true;
    $i55 := $trunc.i8.i1($i54);
    goto corral_source_split_5773;

  corral_source_split_5773:
    assume {:verifier.code 0} true;
    assume {:branchcond $i55} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1190} pci_disable_msix($p0);
    goto corral_source_split_5786;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb12:
    assume $i55 == 1;
    goto corral_source_split_5780;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 152)), $mul.ref(28, 1)), $mul.ref(1, 8)), $mul.ref(0, 1));
    goto corral_source_split_5781;

  corral_source_split_5781:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p58);
    goto corral_source_split_5782;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p4);
    goto corral_source_split_5783;

  corral_source_split_5783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1189} ldv_free_irq_123($i59, $p60);
    goto corral_source_split_5784;

  corral_source_split_5784:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb7:
    assume $i42 == 1;
    goto corral_source_split_5754;

  corral_source_split_5754:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_5755;

  corral_source_split_5755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1186} __dynamic_dev_dbg.ref.ref.ref($p2, $p43, .str.113);
    goto corral_source_split_5756;

  corral_source_split_5756:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i24 == 1;
    goto corral_source_split_5722;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_5723;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    $i26 := $M.69;
    goto corral_source_split_5724;

  corral_source_split_5724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1181} dev_warn.ref.ref.i32.i32.i32($p25, .str.97, 0, $i26, $i23);
    goto corral_source_split_5725;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_319:
    assume !assertsPassed;
    return;

  SeqInstr_316:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_5712;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_5713;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1176} __dynamic_dev_dbg.ref.ref.ref($p1, $p21, .str.112);
    goto corral_source_split_5714;

  corral_source_split_5714:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pci_get_drvdata: ref;

axiom pci_get_drvdata == $sub.ref(0, 696921);

procedure pci_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation pci_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5812;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_5813;

  corral_source_split_5813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1196} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_5814;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __dynamic_dev_dbg: ref;

axiom __dynamic_dev_dbg == $sub.ref(0, 697953);

procedure __dynamic_dev_dbg.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32);



procedure __dynamic_dev_dbg.ref.ref.ref.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32);



procedure __dynamic_dev_dbg.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref);



procedure __dynamic_dev_dbg.ref.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: ref);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: ref)
{

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5816;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref($p0: ref, $p1: ref, $p2: ref)
{

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_5818;

  corral_source_split_5818:
    assume {:verifier.code 0} true;
    return;
}



const vmci_qp_guest_endpoints_exit: ref;

axiom vmci_qp_guest_endpoints_exit == $sub.ref(0, 698985);

procedure vmci_qp_guest_endpoints_exit();
  free requires assertsPassed;
  modifies $M.0, $M.20, $M.21, $M.28, $M.33, assertsPassed, $CurrAddr, $M.2, $M.3, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.31, $M.87, $M.6, $M.13, $M.18, $M.19, $M.69, $M.70, $M.23, $M.24, $M.25, $M.26, $M.27, $M.108, $M.110, $M.112, $M.114, $M.29, $M.45, $M.48, $M.47, $M.89, $M.109, $M.111, $M.113, $M.115, $M.34, $M.30, $M.35, $M.46, $M.90, $M.86, $M.91, $M.44, $M.32, $M.36, $M.38, $M.40, $M.42;



implementation vmci_qp_guest_endpoints_exit()
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p3: ref;
  var vslice_dummy_var_233: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5820;

  corral_source_split_5820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1197} ldv_mutex_lock_234($add.ref($add.ref(qp_guest_endpoints, $mul.ref(0, 176)), $mul.ref(16, 1)));
    goto SeqInstr_322, SeqInstr_323;

  SeqInstr_323:
    assume assertsPassed;
    goto SeqInstr_324;

  SeqInstr_324:
    goto corral_source_split_5821;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1198} $p0 := qp_list_get_head(qp_guest_endpoints);
    goto corral_source_split_5822;

  corral_source_split_5822:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_5823;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_5824;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1203} ldv_mutex_unlock_235($add.ref($add.ref(qp_guest_endpoints, $mul.ref(0, 176)), $mul.ref(16, 1)));
    goto SeqInstr_328, SeqInstr_329;

  SeqInstr_329:
    assume assertsPassed;
    goto SeqInstr_330;

  SeqInstr_330:
    goto corral_source_split_5852;

  corral_source_split_5852:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_328:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5826;

  corral_source_split_5826:
    assume {:verifier.code 0} true;
    $p3 := $p0;
    goto $bb4;

  $bb4:
    call $p4, $p5, $i6, $i7, $i8, $p9, $p10, $i11, $p13, $p14, $i15, $i16, $p3, vslice_dummy_var_233 := vmci_qp_guest_endpoints_exit_loop_$bb4($p4, $p5, $i6, $i7, $i8, $p9, $p10, $i11, $p13, $p14, $i15, $i16, $p3, vslice_dummy_var_233);
    goto $bb4_last;

  corral_source_split_5828:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5830;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(28, 1));
    goto corral_source_split_5831;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_5832;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 2);
    goto corral_source_split_5833;

  corral_source_split_5833:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_5834;

  corral_source_split_5834:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_5842;

  corral_source_split_5842:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, 0);
    goto corral_source_split_5843;

  corral_source_split_5843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1200} qp_list_remove_entry(qp_guest_endpoints, $p3);
    goto corral_source_split_5844;

  corral_source_split_5844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1201} qp_guest_endpoint_destroy($p4);
    goto SeqInstr_325, SeqInstr_326;

  SeqInstr_326:
    assume assertsPassed;
    goto SeqInstr_327;

  SeqInstr_327:
    goto corral_source_split_5845;

  corral_source_split_5845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1202} $p14 := qp_list_get_head(qp_guest_endpoints);
    goto corral_source_split_5846;

  corral_source_split_5846:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_5847;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_5848;

  corral_source_split_5848:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    goto corral_source_split_5850;

  corral_source_split_5850:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb9:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $p3 := $p14;
    goto $bb9_dummy;

  SeqInstr_325:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_5836;

  corral_source_split_5836:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_5837;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_5838;

  corral_source_split_5838:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.0, $p10);
    goto corral_source_split_5839;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1199} vslice_dummy_var_233 := qp_detatch_hypercall($i11);
    goto corral_source_split_5840;

  corral_source_split_5840:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_322:
    assume !assertsPassed;
    return;

  $bb9_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5828;
}



const dev_warn: ref;

axiom dev_warn == $sub.ref(0, 700017);

procedure dev_warn.ref.ref.i32($p0: ref, $p1: ref, p.2: i32);
  free requires assertsPassed;



implementation dev_warn.ref.ref.i32($p0: ref, $p1: ref, p.2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5854;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_warn.ref.ref.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32);
  free requires assertsPassed;



implementation dev_warn.ref.ref.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_5856;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_warn.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32);
  free requires assertsPassed;



implementation dev_warn.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32)
{

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_5858;

  corral_source_split_5858:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_warn.ref.ref($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation dev_warn.ref.ref($p0: ref, $p1: ref)
{

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5860;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    return;
}



const spin_lock_irq: ref;

axiom spin_lock_irq == $sub.ref(0, 701049);

procedure spin_lock_irq($p0: ref);
  free requires assertsPassed;



implementation spin_lock_irq($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5862;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_5863;

  corral_source_split_5863:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5864;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1204} _raw_spin_lock_irq($p2);
    goto corral_source_split_5865;

  corral_source_split_5865:
    assume {:verifier.code 0} true;
    return;
}



const spin_unlock_irq: ref;

axiom spin_unlock_irq == $sub.ref(0, 702081);

procedure spin_unlock_irq($p0: ref);
  free requires assertsPassed;



implementation spin_unlock_irq($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5867;

  corral_source_split_5867:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_5868;

  corral_source_split_5868:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5869;

  corral_source_split_5869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1205} _raw_spin_unlock_irq($p2);
    goto corral_source_split_5870;

  corral_source_split_5870:
    assume {:verifier.code 0} true;
    return;
}



const iowrite32: ref;

axiom iowrite32 == $sub.ref(0, 703113);

procedure iowrite32($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation iowrite32($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1206} {:cexpr "iowrite32:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_5872;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    return;
}



const ldv_free_irq_122: ref;

axiom ldv_free_irq_122 == $sub.ref(0, 704145);

procedure ldv_free_irq_122($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.108, $M.110, $M.112, $M.114;



implementation ldv_free_irq_122($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1207} {:cexpr "ldv_free_irq_122:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    goto corral_source_split_5874;

  corral_source_split_5874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1208} free_irq($i0, $p1);
    goto corral_source_split_5875;

  corral_source_split_5875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1209} disable_suitable_irq_2($i0, $p1);
    goto corral_source_split_5876;

  corral_source_split_5876:
    assume {:verifier.code 0} true;
    return;
}



const ldv_free_irq_123: ref;

axiom ldv_free_irq_123 == $sub.ref(0, 705177);

procedure ldv_free_irq_123($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.108, $M.110, $M.112, $M.114;



implementation ldv_free_irq_123($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1210} {:cexpr "ldv_free_irq_123:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    goto corral_source_split_5878;

  corral_source_split_5878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1211} free_irq($i0, $p1);
    goto corral_source_split_5879;

  corral_source_split_5879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1212} disable_suitable_irq_2($i0, $p1);
    goto corral_source_split_5880;

  corral_source_split_5880:
    assume {:verifier.code 0} true;
    return;
}



const pci_disable_msix: ref;

axiom pci_disable_msix == $sub.ref(0, 706209);

procedure pci_disable_msix($p0: ref);
  free requires assertsPassed;



implementation pci_disable_msix($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5882;

  corral_source_split_5882:
    assume {:verifier.code 0} true;
    return;
}



const pci_disable_msi: ref;

axiom pci_disable_msi == $sub.ref(0, 707241);

procedure pci_disable_msi($p0: ref);
  free requires assertsPassed;



implementation pci_disable_msi($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5884;

  corral_source_split_5884:
    assume {:verifier.code 0} true;
    return;
}



const tasklet_kill: ref;

axiom tasklet_kill == $sub.ref(0, 708273);

procedure tasklet_kill($p0: ref);
  free requires assertsPassed;



implementation tasklet_kill($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5886;

  corral_source_split_5886:
    assume {:verifier.code 0} true;
    return;
}



const free_irq: ref;

axiom free_irq == $sub.ref(0, 709305);

procedure free_irq($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation free_irq($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1213} {:cexpr "free_irq:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_5888;

  corral_source_split_5888:
    assume {:verifier.code 0} true;
    return;
}



const disable_suitable_irq_2: ref;

axiom disable_suitable_irq_2 == $sub.ref(0, 710337);

procedure disable_suitable_irq_2($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.108, $M.110, $M.112, $M.114;



implementation disable_suitable_irq_2($i0: i32, $p1: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1214} {:cexpr "disable_suitable_irq_2:arg:line"} boogie_si_record_i32($i0);
    goto corral_source_split_5890;

  corral_source_split_5890:
    assume {:verifier.code 0} true;
    $i2 := $M.108;
    goto corral_source_split_5891;

  corral_source_split_5891:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_5892;

  corral_source_split_5892:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i6 := $M.110;
    goto corral_source_split_5901;

  corral_source_split_5901:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_5902;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i10 := $M.112;
    goto corral_source_split_5911;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_5912;

  corral_source_split_5912:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i14 := $M.114;
    goto corral_source_split_5921;

  corral_source_split_5921:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_5922;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb20:
    assume $i15 == 1;
    goto corral_source_split_5924;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    $i16 := $M.115;
    goto corral_source_split_5925;

  corral_source_split_5925:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i0, $i16);
    goto corral_source_split_5926;

  corral_source_split_5926:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb22;

  $bb23:
    assume $i17 == 1;
    goto corral_source_split_5928;

  corral_source_split_5928:
    assume {:verifier.code 0} true;
    $M.114 := 0;
    call {:si_unique_call 1218} {:cexpr "ldv_irq_2_3"} boogie_si_record_i32(0);
    goto corral_source_split_5929;

  corral_source_split_5929:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb14:
    assume $i11 == 1;
    goto corral_source_split_5914;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    $i12 := $M.113;
    goto corral_source_split_5915;

  corral_source_split_5915:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i0, $i12);
    goto corral_source_split_5916;

  corral_source_split_5916:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb16;

  $bb17:
    assume $i13 == 1;
    goto corral_source_split_5918;

  corral_source_split_5918:
    assume {:verifier.code 0} true;
    $M.112 := 0;
    call {:si_unique_call 1217} {:cexpr "ldv_irq_2_2"} boogie_si_record_i32(0);
    goto corral_source_split_5919;

  corral_source_split_5919:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb8:
    assume $i7 == 1;
    goto corral_source_split_5904;

  corral_source_split_5904:
    assume {:verifier.code 0} true;
    $i8 := $M.111;
    goto corral_source_split_5905;

  corral_source_split_5905:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i0, $i8);
    goto corral_source_split_5906;

  corral_source_split_5906:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb10;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_5908;

  corral_source_split_5908:
    assume {:verifier.code 0} true;
    $M.110 := 0;
    call {:si_unique_call 1216} {:cexpr "ldv_irq_2_1"} boogie_si_record_i32(0);
    goto corral_source_split_5909;

  corral_source_split_5909:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5894;

  corral_source_split_5894:
    assume {:verifier.code 0} true;
    $i4 := $M.109;
    goto corral_source_split_5895;

  corral_source_split_5895:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, $i4);
    goto corral_source_split_5896;

  corral_source_split_5896:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_5898;

  corral_source_split_5898:
    assume {:verifier.code 0} true;
    $M.108 := 0;
    call {:si_unique_call 1215} {:cexpr "ldv_irq_2_0"} boogie_si_record_i32(0);
    goto corral_source_split_5899;

  corral_source_split_5899:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const _raw_spin_unlock_irq: ref;

axiom _raw_spin_unlock_irq == $sub.ref(0, 711369);

procedure _raw_spin_unlock_irq($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5931;

  corral_source_split_5931:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock_irq: ref;

axiom _raw_spin_lock_irq == $sub.ref(0, 712401);

procedure _raw_spin_lock_irq($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5933;

  corral_source_split_5933:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_lock_234: ref;

axiom ldv_mutex_lock_234 == $sub.ref(0, 713433);

procedure ldv_mutex_lock_234($p0: ref);
  free requires assertsPassed;
  modifies $M.28, assertsPassed;



implementation ldv_mutex_lock_234($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5935;

  corral_source_split_5935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1219} ldv_mutex_lock_mutex_of_qp_list($p0);
    goto SeqInstr_331, SeqInstr_332;

  SeqInstr_332:
    assume assertsPassed;
    goto SeqInstr_333;

  SeqInstr_333:
    goto corral_source_split_5936;

  corral_source_split_5936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1220} mutex_lock($p0);
    goto corral_source_split_5937;

  corral_source_split_5937:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_331:
    assume !assertsPassed;
    return;
}



const qp_list_get_head: ref;

axiom qp_list_get_head == $sub.ref(0, 714465);

procedure qp_list_get_head($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation qp_list_get_head($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5939;

  corral_source_split_5939:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(0, 1));
    goto corral_source_split_5940;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1221} $i2 := list_empty($p1);
    call {:si_unique_call 1222} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_5941;

  corral_source_split_5941:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_5942;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5949;

  corral_source_split_5949:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5944;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5945;

  corral_source_split_5945:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_5946;

  corral_source_split_5946:
    assume {:verifier.code 0} true;
    goto corral_source_split_5947;

  corral_source_split_5947:
    assume {:verifier.code 0} true;
    $p8 := $p6;
    goto $bb3;
}



const ldv_mutex_unlock_235: ref;

axiom ldv_mutex_unlock_235 == $sub.ref(0, 715497);

procedure ldv_mutex_unlock_235($p0: ref);
  free requires assertsPassed;
  modifies $M.28, assertsPassed;



implementation ldv_mutex_unlock_235($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5951;

  corral_source_split_5951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1223} ldv_mutex_unlock_mutex_of_qp_list($p0);
    goto SeqInstr_334, SeqInstr_335;

  SeqInstr_335:
    assume assertsPassed;
    goto SeqInstr_336;

  SeqInstr_336:
    goto corral_source_split_5952;

  corral_source_split_5952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1224} mutex_unlock($p0);
    goto corral_source_split_5953;

  corral_source_split_5953:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_334:
    assume !assertsPassed;
    return;
}



const list_empty: ref;

axiom list_empty == $sub.ref(0, 716529);

procedure list_empty($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation list_empty($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5955;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5956;

  corral_source_split_5956:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_5957;

  corral_source_split_5957:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_5958;

  corral_source_split_5958:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_5959;

  corral_source_split_5959:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i3, $i4);
    goto corral_source_split_5960;

  corral_source_split_5960:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_5961;

  corral_source_split_5961:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 717561);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5963;

  corral_source_split_5963:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(512, 1));
    goto corral_source_split_5964;

  corral_source_split_5964:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_5965;

  corral_source_split_5965:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const pcim_enable_device: ref;

axiom pcim_enable_device == $sub.ref(0, 718593);

procedure pcim_enable_device($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pcim_enable_device($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5967;

  corral_source_split_5967:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1225} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1226} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5968;

  corral_source_split_5968:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const dev_err: ref;

axiom dev_err == $sub.ref(0, 719625);

procedure dev_err.ref.ref.ref($p0: ref, $p1: ref, p.2: ref);
  free requires assertsPassed;



implementation dev_err.ref.ref.ref($p0: ref, $p1: ref, p.2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5970;

  corral_source_split_5970:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_5972;

  corral_source_split_5972:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation dev_err.ref.ref($p0: ref, $p1: ref)
{

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_5974;

  corral_source_split_5974:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref.i32($p0: ref, $p1: ref, p.2: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.i32($p0: ref, $p1: ref, p.2: i32)
{

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5976;

  corral_source_split_5976:
    assume {:verifier.code 0} true;
    return;
}



const pcim_iomap_regions: ref;

axiom pcim_iomap_regions == $sub.ref(0, 720657);

procedure pcim_iomap_regions($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pcim_iomap_regions($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1227} {:cexpr "pcim_iomap_regions:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_5978;

  corral_source_split_5978:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1228} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1229} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_5979;

  corral_source_split_5979:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const pcim_iomap_table: ref;

axiom pcim_iomap_table == $sub.ref(0, 721689);

procedure pcim_iomap_table($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation pcim_iomap_table($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5981;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1230} $p1 := external_alloc();
    goto corral_source_split_5982;

  corral_source_split_5982:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5983;

  corral_source_split_5983:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const _dev_info: ref;

axiom _dev_info == $sub.ref(0, 722721);

procedure _dev_info.ref.ref.i32($p0: ref, $p1: ref, p.2: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref.i32($p0: ref, $p1: ref, p.2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5985;

  corral_source_split_5985:
    assume {:verifier.code 0} true;
    return;
}



procedure _dev_info.ref.ref.i64.i32($p0: ref, $p1: ref, p.2: i64, p.3: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref.i64.i32($p0: ref, $p1: ref, p.2: i64, p.3: i32)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_5987;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    return;
}



const devm_kzalloc: ref;

axiom devm_kzalloc == $sub.ref(0, 723753);

procedure devm_kzalloc($p0: ref, $i1: i64, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation devm_kzalloc($p0: ref, $i1: i64, $i2: i32) returns ($r: ref)
{
  var $i3: i32;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1231} {:cexpr "devm_kzalloc:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 1232} {:cexpr "devm_kzalloc:arg:gfp"} boogie_si_record_i32($i2);
    goto corral_source_split_5989;

  corral_source_split_5989:
    assume {:verifier.code 0} true;
    $i3 := $or.i32($i2, 32768);
    goto corral_source_split_5990;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1233} $p4 := devm_kmalloc($p0, $i1, $i3);
    goto corral_source_split_5991;

  corral_source_split_5991:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const vmci_dispatch_dgs: ref;

axiom vmci_dispatch_dgs == $sub.ref(0, 724785);

procedure vmci_dispatch_dgs($i0: i64);



const tasklet_init: ref;

axiom tasklet_init == $sub.ref(0, 725817);

procedure tasklet_init($p0: ref, $p1: ref, $i2: i64);
  free requires assertsPassed;



implementation tasklet_init($p0: ref, $p1: ref, $i2: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1234} {:cexpr "tasklet_init:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_5993;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    return;
}



const vmci_process_bitmap: ref;

axiom vmci_process_bitmap == $sub.ref(0, 726849);

procedure vmci_process_bitmap($i0: i64);



const pci_set_master: ref;

axiom pci_set_master == $sub.ref(0, 727881);

procedure pci_set_master($p0: ref);
  free requires assertsPassed;



implementation pci_set_master($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5995;

  corral_source_split_5995:
    assume {:verifier.code 0} true;
    return;
}



const vmci_dbell_register_notification_bitmap: ref;

axiom vmci_dbell_register_notification_bitmap == $sub.ref(0, 728913);

procedure vmci_dbell_register_notification_bitmap($i0: i32) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation vmci_dbell_register_notification_bitmap($i0: i32) returns ($r: i1)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i19: i1;
  var cmdloc_dummy_var_121: [ref]i8;
  var cmdloc_dummy_var_122: [ref]i8;
  var cmdloc_dummy_var_123: [ref]i8;
  var cmdloc_dummy_var_124: [ref]i8;
  var cmdloc_dummy_var_125: [ref]i8;
  var cmdloc_dummy_var_126: [ref]i8;
  var vslice_dummy_var_234: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1235} $p1 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1236} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 1237} {:cexpr "vmci_dbell_register_notification_bitmap:arg:bitmap_ppn"} boogie_si_record_i32($i0);
    goto corral_source_split_5997;

  corral_source_split_5997:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_5998;

  corral_source_split_5998:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, 0);
    goto corral_source_split_5999;

  corral_source_split_5999:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_6000;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, 2);
    goto corral_source_split_6001;

  corral_source_split_6001:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6002;

  corral_source_split_6002:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_6003;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p2);
    goto corral_source_split_6004;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_121 := $M.0;
    cmdloc_dummy_var_122 := $M.0;
    call {:si_unique_call 1238} cmdloc_dummy_var_123 := $memcpy.i8(cmdloc_dummy_var_121, cmdloc_dummy_var_122, $p7, $p8, 8, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_123;
    goto corral_source_split_6005;

  corral_source_split_6005:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_6006;

  corral_source_split_6006:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_6007;

  corral_source_split_6007:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_124 := $M.0;
    cmdloc_dummy_var_125 := $M.0;
    call {:si_unique_call 1239} cmdloc_dummy_var_126 := $memcpy.i8(cmdloc_dummy_var_124, cmdloc_dummy_var_125, $p11, VMCI_ANON_SRC_HANDLE, 8, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_126;
    goto corral_source_split_6008;

  corral_source_split_6008:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_6009;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p13, 8);
    goto corral_source_split_6010;

  corral_source_split_6010:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_6011;

  corral_source_split_6011:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, $i0);
    goto corral_source_split_6012;

  corral_source_split_6012:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_6013;

  corral_source_split_6013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1240} $i16 := vmci_send_datagram($p15);
    call {:si_unique_call 1241} {:cexpr "result"} boogie_si_record_i32($i16);
    goto corral_source_split_6014;

  corral_source_split_6014:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_6015;

  corral_source_split_6015:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i19 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6020;

  corral_source_split_6020:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_6017;

  corral_source_split_6017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1242} vslice_dummy_var_234 := no_printk.ref.i32.i32(.str.27, $i0, $i16);
    goto corral_source_split_6018;

  corral_source_split_6018:
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb3;
}



const vmci_check_host_caps: ref;

axiom vmci_check_host_caps == $sub.ref(0, 729945);

procedure vmci_check_host_caps($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $CurrAddr;



implementation vmci_check_host_caps($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i64;
  var $p19: ref;
  var $p20: ref;
  var $p22: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $i27: i8;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i24;
  var $i36: i24;
  var $i37: i24;
  var $p38: ref;
  var $p39: ref;
  var $i40: i8;
  var $i41: i64;
  var $i42: i64;
  var $i43: i64;
  var $i44: i1;
  var $p45: ref;
  var $i46: i1;
  var $p47: ref;
  var $i48: i1;
  var $i49: i32;
  var $i9: i32;
  var cmdloc_dummy_var_127: [ref]i8;
  var cmdloc_dummy_var_128: [ref]i8;
  var cmdloc_dummy_var_129: [ref]i8;
  var cmdloc_dummy_var_130: [ref]i8;
  var cmdloc_dummy_var_131: [ref]i8;
  var cmdloc_dummy_var_132: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1243} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1244} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_6022;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    $i3 := $zext.i32.i64(36);
    goto corral_source_split_6023;

  corral_source_split_6023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1245} $p4 := kmalloc($i3, 208);
    goto corral_source_split_6024;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_6025;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_6026;

  corral_source_split_6026:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_6027;

  corral_source_split_6027:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_6035;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, 0);
    goto corral_source_split_6036;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_6037;

  corral_source_split_6037:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, 0);
    goto corral_source_split_6038;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_6039;

  corral_source_split_6039:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_6040;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p1);
    goto corral_source_split_6041;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_127 := $M.0;
    cmdloc_dummy_var_128 := $M.0;
    call {:si_unique_call 1247} cmdloc_dummy_var_129 := $memcpy.i8(cmdloc_dummy_var_127, cmdloc_dummy_var_128, $p13, $p14, 8, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_129;
    goto corral_source_split_6042;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_6043;

  corral_source_split_6043:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_6044;

  corral_source_split_6044:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_130 := $M.0;
    cmdloc_dummy_var_131 := $M.0;
    call {:si_unique_call 1248} cmdloc_dummy_var_132 := $memcpy.i8(cmdloc_dummy_var_130, cmdloc_dummy_var_131, $p16, VMCI_ANON_SRC_HANDLE___0, 8, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_132;
    goto corral_source_split_6045;

  corral_source_split_6045:
    assume {:verifier.code 0} true;
    $i17 := $zext.i32.i64(36);
    goto corral_source_split_6046;

  corral_source_split_6046:
    assume {:verifier.code 0} true;
    $i18 := $sub.i64($i17, 24);
    goto corral_source_split_6047;

  corral_source_split_6047:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_6048;

  corral_source_split_6048:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p19, $i18);
    goto corral_source_split_6049;

  corral_source_split_6049:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p5);
    goto corral_source_split_6050;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    goto corral_source_split_6051;

  corral_source_split_6051:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p20, $mul.ref(24, 12)), $mul.ref(0, 1));
    goto corral_source_split_6052;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p22, 1);
    goto corral_source_split_6053;

  corral_source_split_6053:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p20, $mul.ref(24, 12)), $mul.ref(8, 1)), $mul.ref(0, 4));
    goto corral_source_split_6054;

  corral_source_split_6054:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, 1);
    goto corral_source_split_6055;

  corral_source_split_6055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1249} $i25 := vmci_send_datagram($p5);
    call {:si_unique_call 1250} {:cexpr "tmp___0"} boogie_si_record_i32($i25);
    goto corral_source_split_6056;

  corral_source_split_6056:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 1);
    goto corral_source_split_6057;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    $i27 := $zext.i1.i8($i26);
    call {:si_unique_call 1251} {:cexpr "result"} boogie_si_record_i8($i27);
    goto corral_source_split_6058;

  corral_source_split_6058:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p5);
    goto corral_source_split_6059;

  corral_source_split_6059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1252} kfree($p28);
    goto corral_source_split_6060;

  corral_source_split_6060:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6061;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    $M.100 := $store.ref($M.100, $p29, .str.39);
    goto corral_source_split_6062;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6063;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    $M.101 := $store.ref($M.101, $p30, .str.104);
    goto corral_source_split_6064;

  corral_source_split_6064:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6065;

  corral_source_split_6065:
    assume {:verifier.code 0} true;
    $M.102 := $store.ref($M.102, $p31, .str.82);
    goto corral_source_split_6066;

  corral_source_split_6066:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6067;

  corral_source_split_6067:
    assume {:verifier.code 0} true;
    $M.103 := $store.ref($M.103, $p32, .str.105);
    goto corral_source_split_6068;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6069;

  corral_source_split_6069:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_6070;

  corral_source_split_6070:
    assume {:verifier.code 0} true;
    $i35 := $load.i24($M.104, $p34);
    goto corral_source_split_6071;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    $i36 := $and.i24($i35, $sub.i24(0, 262144));
    goto corral_source_split_6072;

  corral_source_split_6072:
    assume {:verifier.code 0} true;
    $i37 := $or.i24($i36, 195);
    goto corral_source_split_6073;

  corral_source_split_6073:
    assume {:verifier.code 0} true;
    $M.104 := $store.i24($M.104, $p34, $i37);
    goto corral_source_split_6074;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6075;

  corral_source_split_6075:
    assume {:verifier.code 0} true;
    $M.105 := $store.i8($M.105, $p38, 0);
    goto corral_source_split_6076;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6077;

  corral_source_split_6077:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.105, $p39);
    goto corral_source_split_6078;

  corral_source_split_6078:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i64($i40);
    goto corral_source_split_6079;

  corral_source_split_6079:
    assume {:verifier.code 0} true;
    $i42 := $and.i64($i41, 1);
    goto corral_source_split_6080;

  corral_source_split_6080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1253} $i43 := ldv__builtin_expect($i42, 0);
    call {:si_unique_call 1254} {:cexpr "tmp___1"} boogie_si_record_i64($i43);
    goto corral_source_split_6081;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    $i44 := $ne.i64($i43, 0);
    goto corral_source_split_6082;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i8.i1($i27);
    goto corral_source_split_6090;

  corral_source_split_6090:
    assume {:verifier.code 0} true;
    $i49 := (if $i48 == 1 then 0 else $sub.i32(0, 6));
    goto corral_source_split_6091;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    $i9 := $i49;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6033;

  corral_source_split_6033:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb5:
    assume $i44 == 1;
    goto corral_source_split_6084;

  corral_source_split_6084:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_6085;

  corral_source_split_6085:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i8.i1($i27);
    goto corral_source_split_6086;

  corral_source_split_6086:
    assume {:verifier.code 0} true;
    $p47 := (if $i46 == 1 then .str.106 else .str.107);
    goto corral_source_split_6087;

  corral_source_split_6087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1255} __dynamic_dev_dbg.ref.ref.ref.ref.ref($p2, $p45, .str.105, .str.104, $p47);
    goto corral_source_split_6088;

  corral_source_split_6088:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_6029;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_6030;

  corral_source_split_6030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1246} dev_err.ref.ref.ref($p8, .str.103, .str.104);
    goto corral_source_split_6031;

  corral_source_split_6031:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 12);
    goto $bb3;
}



const vmci_guest_cid_update: ref;

axiom vmci_guest_cid_update == $sub.ref(0, 730977);

procedure vmci_guest_cid_update($i0: i32, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.44;



implementation vmci_guest_cid_update($i0: i32, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $p20: ref;
  var $i21: i32;
  var vslice_dummy_var_235: i32;
  var vslice_dummy_var_236: i32;
  var vslice_dummy_var_237: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1256} {:cexpr "vmci_guest_cid_update:arg:sub_id"} boogie_si_record_i32($i0);
    goto corral_source_split_6093;

  corral_source_split_6093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1257} $p3 := vmci_event_data_const_payload($p1);
    goto corral_source_split_6094;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_6095;

  corral_source_split_6095:
    assume {:verifier.code 0} true;
    $i5 := $M.69;
    goto corral_source_split_6096;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i0, $i5);
    goto corral_source_split_6097;

  corral_source_split_6097:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p1);
    goto corral_source_split_6102;

  corral_source_split_6102:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_6103;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i9 == 1);
    goto corral_source_split_6107;

  corral_source_split_6107:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_6108;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_6109;

  corral_source_split_6109:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, $sub.i32(0, 1));
    goto corral_source_split_6110;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i14 := $M.44;
    goto corral_source_split_6112;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_6113;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_6114;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_6115;

  corral_source_split_6115:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_6116;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1260} vslice_dummy_var_237 := no_printk.ref.i32.i32.i32(.str.110, $i14, $i16, $i18);
    goto corral_source_split_6117;

  corral_source_split_6117:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_6118;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_6119;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    $M.44 := $i21;
    call {:si_unique_call 1261} {:cexpr "vm_context_id"} boogie_si_record_i32($i21);
    goto corral_source_split_6120;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1259} vslice_dummy_var_236 := no_printk.ref(.str.109);
    goto corral_source_split_6105;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb6;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_6099;

  corral_source_split_6099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1258} vslice_dummy_var_235 := no_printk.ref.i32(.str.108, $i0);
    goto corral_source_split_6100;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vmci_enable_msix: ref;

axiom vmci_enable_msix == $sub.ref(0, 732009);

procedure vmci_enable_msix($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vmci_enable_msix($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p4: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i13: i32;
  var $p21: ref;
  var $p24: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6122;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(28, 1)), $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_6124;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p4, 0);
    goto corral_source_split_6125;

  corral_source_split_6125:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(28, 1)), $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_6126;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, 0);
    goto corral_source_split_6127;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(28, 1)), $mul.ref(1, 8)), $mul.ref(4, 1));
    goto corral_source_split_6129;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p21, 1);
    goto corral_source_split_6130;

  corral_source_split_6130:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(28, 1)), $mul.ref(1, 8)), $mul.ref(0, 1));
    goto corral_source_split_6131;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(28, 1));
    goto corral_source_split_6133;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_6134;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1262} $i10 := pci_enable_msix_exact($p0, $p9, 2);
    call {:si_unique_call 1263} {:cexpr "result"} boogie_si_record_i32($i10);
    goto corral_source_split_6135;

  corral_source_split_6135:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_6136;

  corral_source_split_6136:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    goto corral_source_split_6142;

  corral_source_split_6142:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i10, $sub.i32(0, 28));
    goto corral_source_split_6143;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i18 := $i10;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i13 := $i18;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_6145;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_6147;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(28, 1));
    goto corral_source_split_6148;

  corral_source_split_6148:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_6149;

  corral_source_split_6149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1264} $i17 := pci_enable_msix_exact($p0, $p16, 1);
    call {:si_unique_call 1265} {:cexpr "result"} boogie_si_record_i32($i17);
    goto corral_source_split_6150;

  corral_source_split_6150:
    assume {:verifier.code 0} true;
    $i18 := $i17;
    goto $bb10;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_6138;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(24, 1));
    goto corral_source_split_6139;

  corral_source_split_6139:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p12, 1);
    goto corral_source_split_6140;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    $i13 := $i10;
    goto $bb7;
}



const pci_enable_msi_exact: ref;

axiom pci_enable_msi_exact == $sub.ref(0, 733041);

procedure pci_enable_msi_exact($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation pci_enable_msi_exact($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1266} {:cexpr "pci_enable_msi_exact:arg:nvec"} boogie_si_record_i32($i1);
    goto corral_source_split_6152;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1267} $i2 := pci_enable_msi_range($p0, $i1, $i1);
    call {:si_unique_call 1268} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_6153;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i2, 0);
    goto corral_source_split_6154;

  corral_source_split_6154:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6158;

  corral_source_split_6158:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6156;

  corral_source_split_6156:
    assume {:verifier.code 0} true;
    $i4 := $i2;
    goto $bb3;
}



const vmci_interrupt: ref;

axiom vmci_interrupt == $sub.ref(0, 734073);

procedure vmci_interrupt($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation vmci_interrupt($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i8;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $i15: i1;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $i16: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1269} {:cexpr "vmci_interrupt:arg:irq"} boogie_si_record_i32($i0);
    goto corral_source_split_6160;

  corral_source_split_6160:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_6161;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 152)), $mul.ref(20, 1));
    goto corral_source_split_6162;

  corral_source_split_6162:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_6163;

  corral_source_split_6163:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 2);
    goto corral_source_split_6164;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6171;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_6172;

  corral_source_split_6172:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p11, $mul.ref(8, 1));
    goto corral_source_split_6173;

  corral_source_split_6173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1270} $i13 := ioread32($p12);
    call {:si_unique_call 1271} {:cexpr "icr"} boogie_si_record_i32($i13);
    goto corral_source_split_6174;

  corral_source_split_6174:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 0);
    goto corral_source_split_6175;

  corral_source_split_6175:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb7, $bb9;

  $bb9:
    assume !($i14 == 1);
    goto corral_source_split_6181;

  corral_source_split_6181:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i13, $sub.i32(0, 1));
    goto corral_source_split_6182;

  corral_source_split_6182:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i13, 1);
    goto corral_source_split_6186;

  corral_source_split_6186:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_6187;

  corral_source_split_6187:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i21 := $i13;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_6194;

  corral_source_split_6194:
    assume {:verifier.code 0} true;
    $i22 := $and.i32($i21, 2);
    goto corral_source_split_6195;

  corral_source_split_6195:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_6196;

  corral_source_split_6196:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i26 := $i21;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_6203;

  corral_source_split_6203:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_6204;

  corral_source_split_6204:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i16 := 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_6184;

  corral_source_split_6184:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb20:
    assume $i27 == 1;
    goto corral_source_split_6206;

  corral_source_split_6206:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 152)), $mul.ref(0, 1));
    goto corral_source_split_6207;

  corral_source_split_6207:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_6208;

  corral_source_split_6208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1277} dev_warn.ref.ref.i32($p29, .str.80, $i26);
    goto corral_source_split_6209;

  corral_source_split_6209:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume $i23 == 1;
    goto corral_source_split_6198;

  corral_source_split_6198:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 152)), $mul.ref(88, 1));
    goto corral_source_split_6199;

  corral_source_split_6199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1275} tasklet_schedule($p24);
    goto corral_source_split_6200;

  corral_source_split_6200:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i21, $sub.i32(0, 3));
    call {:si_unique_call 1276} {:cexpr "icr"} boogie_si_record_i32($i25);
    goto corral_source_split_6201;

  corral_source_split_6201:
    assume {:verifier.code 0} true;
    $i26 := $i25;
    goto $bb19;

  $bb14:
    assume $i18 == 1;
    goto corral_source_split_6189;

  corral_source_split_6189:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 152)), $mul.ref(48, 1));
    goto corral_source_split_6190;

  corral_source_split_6190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1273} tasklet_schedule($p19);
    goto corral_source_split_6191;

  corral_source_split_6191:
    assume {:verifier.code 0} true;
    $i20 := $and.i32($i13, $sub.i32(0, 2));
    call {:si_unique_call 1274} {:cexpr "icr"} boogie_si_record_i32($i20);
    goto corral_source_split_6192;

  corral_source_split_6192:
    assume {:verifier.code 0} true;
    $i21 := $i20;
    goto $bb16;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb12;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb8;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_6166;

  corral_source_split_6166:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 152)), $mul.ref(24, 1));
    goto corral_source_split_6167;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    goto corral_source_split_6168;

  corral_source_split_6168:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i7);
    goto corral_source_split_6169;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_6177;

  corral_source_split_6177:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 152)), $mul.ref(48, 1));
    goto corral_source_split_6178;

  corral_source_split_6178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1272} tasklet_schedule($p9);
    goto corral_source_split_6179;

  corral_source_split_6179:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const ldv_request_irq_119: ref;

axiom ldv_request_irq_119 == $sub.ref(0, 735105);

procedure ldv_request_irq_119($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.109, $M.108, $M.111, $M.110, $M.113, $M.112, $M.115, $M.114;



implementation ldv_request_irq_119($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1278} {:cexpr "ldv_request_irq_119:arg:irq"} boogie_si_record_i32($i0);
    call {:si_unique_call 1279} {:cexpr "ldv_request_irq_119:arg:flags"} boogie_si_record_i64($i2);
    goto corral_source_split_6211;

  corral_source_split_6211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1280} $i5 := request_irq($i0, $p1, $i2, $p3, $p4);
    call {:si_unique_call 1281} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_6212;

  corral_source_split_6212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1282} $i6 := reg_check_2($p1);
    call {:si_unique_call 1283} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_6213;

  corral_source_split_6213:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_6214;

  corral_source_split_6214:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_6216;

  corral_source_split_6216:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i5, 0);
    goto corral_source_split_6217;

  corral_source_split_6217:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_6219;

  corral_source_split_6219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1284} activate_suitable_irq_2($i0, $p4);
    goto corral_source_split_6220;

  corral_source_split_6220:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const vmci_interrupt_bm: ref;

axiom vmci_interrupt_bm == $sub.ref(0, 736137);

procedure vmci_interrupt_bm($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation vmci_interrupt_bm($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1285} {:cexpr "vmci_interrupt_bm:arg:irq"} boogie_si_record_i32($i0);
    goto corral_source_split_6222;

  corral_source_split_6222:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_6223;

  corral_source_split_6223:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 152)), $mul.ref(88, 1));
    goto corral_source_split_6224;

  corral_source_split_6224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1286} tasklet_schedule($p3);
    goto corral_source_split_6225;

  corral_source_split_6225:
    assume {:verifier.code 0} true;
    $r := 1;
    return;
}



const ldv_request_irq_120: ref;

axiom ldv_request_irq_120 == $sub.ref(0, 737169);

procedure ldv_request_irq_120($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.109, $M.108, $M.111, $M.110, $M.113, $M.112, $M.115, $M.114;



implementation ldv_request_irq_120($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1287} {:cexpr "ldv_request_irq_120:arg:irq"} boogie_si_record_i32($i0);
    call {:si_unique_call 1288} {:cexpr "ldv_request_irq_120:arg:flags"} boogie_si_record_i64($i2);
    goto corral_source_split_6227;

  corral_source_split_6227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1289} $i5 := request_irq($i0, $p1, $i2, $p3, $p4);
    call {:si_unique_call 1290} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_6228;

  corral_source_split_6228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1291} $i6 := reg_check_2($p1);
    call {:si_unique_call 1292} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_6229;

  corral_source_split_6229:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_6230;

  corral_source_split_6230:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_6232;

  corral_source_split_6232:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i5, 0);
    goto corral_source_split_6233;

  corral_source_split_6233:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_6235;

  corral_source_split_6235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1293} activate_suitable_irq_2($i0, $p4);
    goto corral_source_split_6236;

  corral_source_split_6236:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const atomic_inc: ref;

axiom atomic_inc == $sub.ref(0, 738201);

procedure atomic_inc($p0: ref);
  free requires assertsPassed;



implementation atomic_inc($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6238;

  corral_source_split_6238:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 1294} devirtbounce.6(0, $p1, $p1);
    goto corral_source_split_6239;

  corral_source_split_6239:
    assume {:verifier.code 0} true;
    return;
}



const pci_set_drvdata: ref;

axiom pci_set_drvdata == $sub.ref(0, 739233);

procedure pci_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation pci_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6241;

  corral_source_split_6241:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_6242;

  corral_source_split_6242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1295} dev_set_drvdata($p2, $p1);
    goto corral_source_split_6243;

  corral_source_split_6243:
    assume {:verifier.code 0} true;
    return;
}



const ldv_free_irq_121: ref;

axiom ldv_free_irq_121 == $sub.ref(0, 740265);

procedure ldv_free_irq_121($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.108, $M.110, $M.112, $M.114;



implementation ldv_free_irq_121($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1296} {:cexpr "ldv_free_irq_121:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    goto corral_source_split_6245;

  corral_source_split_6245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1297} free_irq($i0, $p1);
    goto corral_source_split_6246;

  corral_source_split_6246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1298} disable_suitable_irq_2($i0, $p1);
    goto corral_source_split_6247;

  corral_source_split_6247:
    assume {:verifier.code 0} true;
    return;
}



const dev_set_drvdata: ref;

axiom dev_set_drvdata == $sub.ref(0, 741297);

procedure dev_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation dev_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6249;

  corral_source_split_6249:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(512, 1));
    goto corral_source_split_6250;

  corral_source_split_6250:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p1);
    goto corral_source_split_6251;

  corral_source_split_6251:
    assume {:verifier.code 0} true;
    return;
}



const request_irq: ref;

axiom request_irq == $sub.ref(0, 742329);

procedure request_irq($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation request_irq($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1299} {:cexpr "request_irq:arg:irq"} boogie_si_record_i32($i0);
    call {:si_unique_call 1300} {:cexpr "request_irq:arg:flags"} boogie_si_record_i64($i2);
    goto corral_source_split_6253;

  corral_source_split_6253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1301} $i5 := request_threaded_irq($i0, $p1, $0.ref, $i2, $p3, $p4);
    call {:si_unique_call 1302} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_6254;

  corral_source_split_6254:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const reg_check_2: ref;

axiom reg_check_2 == $sub.ref(0, 743361);

procedure reg_check_2($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation reg_check_2($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6256;

  corral_source_split_6256:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_6257;

  corral_source_split_6257:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, $p2i.ref.i64(vmci_interrupt_bm));
    goto corral_source_split_6258;

  corral_source_split_6258:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6262;

  corral_source_split_6262:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_6260;

  corral_source_split_6260:
    assume {:verifier.code 0} true;
    $i3 := 1;
    goto $bb3;
}



const activate_suitable_irq_2: ref;

axiom activate_suitable_irq_2 == $sub.ref(0, 744393);

procedure activate_suitable_irq_2($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.109, $M.108, $M.111, $M.110, $M.113, $M.112, $M.115, $M.114;



implementation activate_suitable_irq_2($i0: i32, $p1: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1303} {:cexpr "activate_suitable_irq_2:arg:line"} boogie_si_record_i32($i0);
    goto corral_source_split_6264;

  corral_source_split_6264:
    assume {:verifier.code 0} true;
    $i2 := $M.108;
    goto corral_source_split_6265;

  corral_source_split_6265:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_6266;

  corral_source_split_6266:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i4 := $M.110;
    goto corral_source_split_6273;

  corral_source_split_6273:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_6274;

  corral_source_split_6274:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i6 := $M.112;
    goto corral_source_split_6281;

  corral_source_split_6281:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_6282;

  corral_source_split_6282:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i8 := $M.114;
    goto corral_source_split_6289;

  corral_source_split_6289:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_6290;

  corral_source_split_6290:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_6292;

  corral_source_split_6292:
    assume {:verifier.code 0} true;
    $M.115 := $i0;
    call {:si_unique_call 1310} {:cexpr "ldv_irq_line_2_3"} boogie_si_record_i32($i0);
    goto corral_source_split_6293;

  corral_source_split_6293:
    assume {:verifier.code 0} true;
    goto corral_source_split_6294;

  corral_source_split_6294:
    assume {:verifier.code 0} true;
    $M.114 := 1;
    call {:si_unique_call 1311} {:cexpr "ldv_irq_2_3"} boogie_si_record_i32(1);
    goto corral_source_split_6295;

  corral_source_split_6295:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume $i7 == 1;
    goto corral_source_split_6284;

  corral_source_split_6284:
    assume {:verifier.code 0} true;
    $M.113 := $i0;
    call {:si_unique_call 1308} {:cexpr "ldv_irq_line_2_2"} boogie_si_record_i32($i0);
    goto corral_source_split_6285;

  corral_source_split_6285:
    assume {:verifier.code 0} true;
    goto corral_source_split_6286;

  corral_source_split_6286:
    assume {:verifier.code 0} true;
    $M.112 := 1;
    call {:si_unique_call 1309} {:cexpr "ldv_irq_2_2"} boogie_si_record_i32(1);
    goto corral_source_split_6287;

  corral_source_split_6287:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_6276;

  corral_source_split_6276:
    assume {:verifier.code 0} true;
    $M.111 := $i0;
    call {:si_unique_call 1306} {:cexpr "ldv_irq_line_2_1"} boogie_si_record_i32($i0);
    goto corral_source_split_6277;

  corral_source_split_6277:
    assume {:verifier.code 0} true;
    goto corral_source_split_6278;

  corral_source_split_6278:
    assume {:verifier.code 0} true;
    $M.110 := 1;
    call {:si_unique_call 1307} {:cexpr "ldv_irq_2_1"} boogie_si_record_i32(1);
    goto corral_source_split_6279;

  corral_source_split_6279:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6268;

  corral_source_split_6268:
    assume {:verifier.code 0} true;
    $M.109 := $i0;
    call {:si_unique_call 1304} {:cexpr "ldv_irq_line_2_0"} boogie_si_record_i32($i0);
    goto corral_source_split_6269;

  corral_source_split_6269:
    assume {:verifier.code 0} true;
    goto corral_source_split_6270;

  corral_source_split_6270:
    assume {:verifier.code 0} true;
    $M.108 := 1;
    call {:si_unique_call 1305} {:cexpr "ldv_irq_2_0"} boogie_si_record_i32(1);
    goto corral_source_split_6271;

  corral_source_split_6271:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const request_threaded_irq: ref;

axiom request_threaded_irq == $sub.ref(0, 745425);

procedure request_threaded_irq($i0: i32, $p1: ref, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: i32);
  free requires assertsPassed;



implementation request_threaded_irq($i0: i32, $p1: ref, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: i32)
{
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1312} {:cexpr "request_threaded_irq:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 1313} {:cexpr "request_threaded_irq:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_6297;

  corral_source_split_6297:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1314} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 1315} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    goto corral_source_split_6298;

  corral_source_split_6298:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const tasklet_schedule: ref;

axiom tasklet_schedule == $sub.ref(0, 746457);

procedure tasklet_schedule($p0: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation tasklet_schedule($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6300;

  corral_source_split_6300:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6301;

  corral_source_split_6301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1316} $i2 := test_and_set_bit(0, $p1);
    call {:si_unique_call 1317} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_6302;

  corral_source_split_6302:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_6303;

  corral_source_split_6303:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6305;

  corral_source_split_6305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1318} __tasklet_schedule($p0);
    goto corral_source_split_6306;

  corral_source_split_6306:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const test_and_set_bit: ref;

axiom test_and_set_bit == $sub.ref(0, 747489);

procedure test_and_set_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation test_and_set_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1319} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 1320} {:cexpr "test_and_set_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 1321} devirtbounce.13(0, $p1, $p2, $i0, $p1);
    goto corral_source_split_6308;

  corral_source_split_6308:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.120, $p2);
    goto corral_source_split_6309;

  corral_source_split_6309:
    assume {:verifier.code 0} true;
    $i4 := $sext.i8.i32($i3);
    goto corral_source_split_6310;

  corral_source_split_6310:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_6311;

  corral_source_split_6311:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_6312;

  corral_source_split_6312:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const __tasklet_schedule: ref;

axiom __tasklet_schedule == $sub.ref(0, 748521);

procedure __tasklet_schedule($p0: ref);
  free requires assertsPassed;



implementation __tasklet_schedule($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6314;

  corral_source_split_6314:
    assume {:verifier.code 0} true;
    return;
}



const pci_enable_msi_range: ref;

axiom pci_enable_msi_range == $sub.ref(0, 749553);

procedure pci_enable_msi_range($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation pci_enable_msi_range($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1322} {:cexpr "pci_enable_msi_range:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1323} {:cexpr "pci_enable_msi_range:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_6316;

  corral_source_split_6316:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1324} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1325} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_6317;

  corral_source_split_6317:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const pci_enable_msix_exact: ref;

axiom pci_enable_msix_exact == $sub.ref(0, 750585);

procedure pci_enable_msix_exact($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation pci_enable_msix_exact($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1326} {:cexpr "pci_enable_msix_exact:arg:nvec"} boogie_si_record_i32($i2);
    goto corral_source_split_6319;

  corral_source_split_6319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1327} $i3 := pci_enable_msix_range($p0, $p1, $i2, $i2);
    call {:si_unique_call 1328} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_6320;

  corral_source_split_6320:
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i3, 0);
    goto corral_source_split_6321;

  corral_source_split_6321:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6325;

  corral_source_split_6325:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_6323;

  corral_source_split_6323:
    assume {:verifier.code 0} true;
    $i5 := $i3;
    goto $bb3;
}



const pci_enable_msix_range: ref;

axiom pci_enable_msix_range == $sub.ref(0, 751617);

procedure pci_enable_msix_range($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation pci_enable_msix_range($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1329} {:cexpr "pci_enable_msix_range:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 1330} {:cexpr "pci_enable_msix_range:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_6327;

  corral_source_split_6327:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1331} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 1332} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_6328;

  corral_source_split_6328:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const vmci_event_data_const_payload: ref;

axiom vmci_event_data_const_payload == $sub.ref(0, 752649);

procedure vmci_event_data_const_payload($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation vmci_event_data_const_payload($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6330;

  corral_source_split_6330:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_6331;

  corral_source_split_6331:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref(8, 1));
    goto corral_source_split_6332;

  corral_source_split_6332:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const vmci_dbell_scan_notification_entries: ref;

axiom vmci_dbell_scan_notification_entries == $sub.ref(0, 753681);

procedure vmci_dbell_scan_notification_entries($p0: ref);



const dbell_fire_entries: ref;

axiom dbell_fire_entries == $sub.ref(0, 754713);

procedure dbell_fire_entries($i0: i32);



const ioread8_rep: ref;

axiom ioread8_rep == $sub.ref(0, 755745);

procedure ioread8_rep($p0: ref, $p1: ref, $i2: i64);



const llvm.memmove.p0i8.p0i8.i64: ref;

axiom llvm.memmove.p0i8.p0i8.i64 == $sub.ref(0, 756777);

procedure llvm.memmove.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const vmci_datagram_invoke_guest_handler: ref;

axiom vmci_datagram_invoke_guest_handler == $sub.ref(0, 757809);

procedure vmci_datagram_invoke_guest_handler($p0: ref) returns ($r: i32);



const devm_kmalloc: ref;

axiom devm_kmalloc == $sub.ref(0, 758841);

procedure devm_kmalloc($p0: ref, $i1: i64, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation devm_kmalloc($p0: ref, $i1: i64, $i2: i32) returns ($r: ref)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1333} {:cexpr "devm_kmalloc:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 1334} {:cexpr "devm_kmalloc:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_6334;

  corral_source_split_6334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1335} $p3 := external_alloc();
    goto corral_source_split_6335;

  corral_source_split_6335:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const vmci_host_poll: ref;

axiom vmci_host_poll == $sub.ref(0, 759873);

procedure vmci_host_poll($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vmci_host_poll($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i64;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $i23: i32;
  var $i18: i32;
  var $p24: ref;
  var $i25: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6337;

  corral_source_split_6337:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_6338;

  corral_source_split_6338:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_6339;

  corral_source_split_6339:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_6340;

  corral_source_split_6340:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 176)), $mul.ref(0, 1));
    goto corral_source_split_6341;

  corral_source_split_6341:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_6342;

  corral_source_split_6342:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 176)), $mul.ref(12, 1));
    goto corral_source_split_6343;

  corral_source_split_6343:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_6344;

  corral_source_split_6344:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 11);
    goto corral_source_split_6345;

  corral_source_split_6345:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i25 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_6375;

  corral_source_split_6375:
    assume {:verifier.code 0} true;
    $r := $i25;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_6347;

  corral_source_split_6347:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p1);
    goto corral_source_split_6348;

  corral_source_split_6348:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_6349;

  corral_source_split_6349:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p6, $mul.ref(0, 304)), $mul.ref(64, 1));
    goto corral_source_split_6355;

  corral_source_split_6355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1337} spin_lock($p14);
    goto corral_source_split_6356;

  corral_source_split_6356:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p6, $mul.ref(0, 304)), $mul.ref(40, 1));
    goto corral_source_split_6357;

  corral_source_split_6357:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_6358;

  corral_source_split_6358:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_6359;

  corral_source_split_6359:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i17 == 1);
    goto corral_source_split_6363;

  corral_source_split_6363:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p6, $mul.ref(0, 304)), $mul.ref(152, 1));
    goto corral_source_split_6364;

  corral_source_split_6364:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_6365;

  corral_source_split_6365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1338} $i21 := vmci_handle_arr_get_size($p20);
    call {:si_unique_call 1339} {:cexpr "tmp"} boogie_si_record_i64($i21);
    goto corral_source_split_6366;

  corral_source_split_6366:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_6367;

  corral_source_split_6367:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i23 := 0;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i18 := $i23;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_6369;

  corral_source_split_6369:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p6, $mul.ref(0, 304)), $mul.ref(64, 1));
    goto corral_source_split_6370;

  corral_source_split_6370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1340} spin_unlock($p24);
    goto corral_source_split_6371;

  corral_source_split_6371:
    assume {:verifier.code 0} true;
    $i25 := $i18;
    goto $bb12;

  $bb9:
    assume $i22 == 1;
    goto corral_source_split_6373;

  corral_source_split_6373:
    assume {:verifier.code 0} true;
    $i23 := 1;
    goto $bb11;

  $bb6:
    assume $i17 == 1;
    goto corral_source_split_6361;

  corral_source_split_6361:
    assume {:verifier.code 0} true;
    $i18 := 1;
    goto $bb8;

  $bb3:
    assume $i11 == 1;
    goto corral_source_split_6351;

  corral_source_split_6351:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 304)), $mul.ref(184, 1)), $mul.ref(0, 1));
    goto corral_source_split_6352;

  corral_source_split_6352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1336} poll_wait($p0, $p13, $p1);
    goto corral_source_split_6353;

  corral_source_split_6353:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const vmci_host_unlocked_ioctl: ref;

axiom vmci_host_unlocked_ioctl == $sub.ref(0, 760905);

procedure vmci_host_unlocked_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.122, $M.123, $M.18, $M.78, $M.77, $M.125, $M.65, $M.45, $M.20, $M.21, $M.48, $M.133, $M.124, $M.23, $M.24, $M.25, $M.26, $M.19, $M.27, $M.29, $M.137, $M.76, $M.75, $M.134, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.96, $M.97, $M.126, $M.127, $M.128, $M.135, $M.136, $M.129, $M.130, $M.131, $M.132, $M.67, $M.30, $M.66, $M.68, $M.58, $CurrAddr, $M.28, $M.47, $M.89, $M.33, $M.34, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.31, $M.87, $M.69, $M.35, $M.74, $M.32, $M.98, $M.2, $M.3, $M.138, assertsPassed, $M.46, $M.90, $M.86, $M.91, $M.44, $M.108, $M.110, $M.112, $M.114, $M.70, $M.55, $M.79, $M.6, $M.13, $M.92, $M.93, $M.109, $M.111, $M.113, $M.115, $M.36, $M.38, $M.40, $M.42;



implementation vmci_host_unlocked_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i32;
  var $i29: i64;
  var $i31: i32;
  var $i32: i64;
  var $i33: i32;
  var $i34: i64;
  var $i35: i32;
  var $i36: i64;
  var $i37: i32;
  var $i38: i64;
  var $i39: i32;
  var $i40: i64;
  var $i41: i32;
  var $i42: i64;
  var $i43: i32;
  var $i44: i64;
  var $i45: i32;
  var $i46: i64;
  var $i47: i32;
  var $i48: i64;
  var $i49: i32;
  var $i50: i64;
  var $i51: i32;
  var $i52: i64;
  var $i53: i32;
  var $i54: i64;
  var $i55: i32;
  var $i56: i64;
  var $i57: i32;
  var $i58: i64;
  var $i59: i32;
  var $i60: i64;
  var $i30: i64;
  var vslice_dummy_var_238: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1341} {:cexpr "vmci_host_unlocked_ioctl:arg:iocmd"} boogie_si_record_i32($i1);
    call {:si_unique_call 1342} {:cexpr "vmci_host_unlocked_ioctl:arg:ioarg"} boogie_si_record_i64($i2);
    goto corral_source_split_6377;

  corral_source_split_6377:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_6378;

  corral_source_split_6378:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_6379;

  corral_source_split_6379:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_6380;

  corral_source_split_6380:
    assume {:verifier.code 0} true;
    $p6 := $i2p.i64.ref($i2);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i1, 1962);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i1, 1968);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i1, 1970);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i1, 1971);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i1, 1995);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i1, 1995);
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1375} vslice_dummy_var_238 := no_printk.ref.ref.i32(.str.130, .str.131, $i1);
    goto corral_source_split_6449;

  corral_source_split_6449:
    assume {:verifier.code 0} true;
    $i30 := $sub.i64(0, 22);
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto corral_source_split_6447;

  corral_source_split_6447:
    assume {:verifier.code 0} true;
    $r := $i30;
    return;

  $bb12:
    assume $i12 == 1;
    goto corral_source_split_6386;

  corral_source_split_6386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1345} $i53 := vmci_host_do_set_notify($p5, .str.127, $p6);
    goto SeqInstr_340, SeqInstr_341;

  SeqInstr_341:
    assume assertsPassed;
    goto SeqInstr_342;

  SeqInstr_342:
    call {:si_unique_call 1346} {:cexpr "tmp___11"} boogie_si_record_i32($i53);
    goto corral_source_split_6387;

  corral_source_split_6387:
    assume {:verifier.code 0} true;
    $i54 := $sext.i32.i64($i53);
    goto corral_source_split_6388;

  corral_source_split_6388:
    assume {:verifier.code 0} true;
    $i30 := $i54;
    goto $bb46;

  SeqInstr_340:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i1, 1971);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb14;

  $bb15:
    assume $i13 == 1;
    goto corral_source_split_6390;

  corral_source_split_6390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1347} $i51 := vmci_host_do_get_context_id($p5, .str.126, $p6);
    call {:si_unique_call 1348} {:cexpr "tmp___10"} boogie_si_record_i32($i51);
    goto corral_source_split_6391;

  corral_source_split_6391:
    assume {:verifier.code 0} true;
    $i52 := $sext.i32.i64($i51);
    goto corral_source_split_6392;

  corral_source_split_6392:
    assume {:verifier.code 0} true;
    $i30 := $i52;
    goto $bb46;

  $bb8:
    assume $i10 == 1;
    goto corral_source_split_6382;

  corral_source_split_6382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1343} $i49 := vmci_host_do_ctx_set_cpt_state($p5, .str.125, $p6);
    goto SeqInstr_337, SeqInstr_338;

  SeqInstr_338:
    assume assertsPassed;
    goto SeqInstr_339;

  SeqInstr_339:
    call {:si_unique_call 1344} {:cexpr "tmp___9"} boogie_si_record_i32($i49);
    goto corral_source_split_6383;

  corral_source_split_6383:
    assume {:verifier.code 0} true;
    $i50 := $sext.i32.i64($i49);
    goto corral_source_split_6384;

  corral_source_split_6384:
    assume {:verifier.code 0} true;
    $i30 := $i50;
    goto $bb46;

  SeqInstr_337:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i1, 1969);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i14 == 1);
    goto corral_source_split_6398;

  corral_source_split_6398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1351} $i47 := vmci_host_do_ctx_get_cpt_state($p5, .str.124, $p6);
    goto SeqInstr_346, SeqInstr_347;

  SeqInstr_347:
    assume assertsPassed;
    goto SeqInstr_348;

  SeqInstr_348:
    call {:si_unique_call 1352} {:cexpr "tmp___8"} boogie_si_record_i32($i47);
    goto corral_source_split_6399;

  corral_source_split_6399:
    assume {:verifier.code 0} true;
    $i48 := $sext.i32.i64($i47);
    goto corral_source_split_6400;

  corral_source_split_6400:
    assume {:verifier.code 0} true;
    $i30 := $i48;
    goto $bb46;

  SeqInstr_346:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i14 == 1;
    goto corral_source_split_6394;

  corral_source_split_6394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1349} $i45 := vmci_host_do_ctx_remove_notify($p5, .str.123, $p6);
    goto SeqInstr_343, SeqInstr_344;

  SeqInstr_344:
    assume assertsPassed;
    goto SeqInstr_345;

  SeqInstr_345:
    call {:si_unique_call 1350} {:cexpr "tmp___7"} boogie_si_record_i32($i45);
    goto corral_source_split_6395;

  corral_source_split_6395:
    assume {:verifier.code 0} true;
    $i46 := $sext.i32.i64($i45);
    goto corral_source_split_6396;

  corral_source_split_6396:
    assume {:verifier.code 0} true;
    $i30 := $i46;
    goto $bb46;

  SeqInstr_343:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i1, 1964);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i1, 1967);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i16 == 1);
    goto corral_source_split_6402;

  corral_source_split_6402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1353} $i43 := vmci_host_do_ctx_add_notify($p5, .str.122, $p6);
    goto SeqInstr_349, SeqInstr_350;

  SeqInstr_350:
    assume assertsPassed;
    goto SeqInstr_351;

  SeqInstr_351:
    call {:si_unique_call 1354} {:cexpr "tmp___6"} boogie_si_record_i32($i43);
    goto corral_source_split_6403;

  corral_source_split_6403:
    assume {:verifier.code 0} true;
    $i44 := $sext.i32.i64($i43);
    goto corral_source_split_6404;

  corral_source_split_6404:
    assume {:verifier.code 0} true;
    $i30 := $i44;
    goto $bb46;

  SeqInstr_349:
    assume !assertsPassed;
    return;

  $bb21:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i1, 1964);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb14;

  $bb23:
    assume $i17 == 1;
    goto corral_source_split_6406;

  corral_source_split_6406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1355} $i33 := vmci_host_do_receive_datagram($p5, .str.117, $p6);
    call {:si_unique_call 1356} {:cexpr "tmp___1"} boogie_si_record_i32($i33);
    goto corral_source_split_6407;

  corral_source_split_6407:
    assume {:verifier.code 0} true;
    $i34 := $sext.i32.i64($i33);
    goto corral_source_split_6408;

  corral_source_split_6408:
    assume {:verifier.code 0} true;
    $i30 := $i34;
    goto $bb46;

  $bb19:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i1, 1963);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i18 == 1);
    goto corral_source_split_6414;

  corral_source_split_6414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1359} $i31 := vmci_host_do_send_datagram($p5, .str.116, $p6);
    goto SeqInstr_355, SeqInstr_356;

  SeqInstr_356:
    assume assertsPassed;
    goto SeqInstr_357;

  SeqInstr_357:
    call {:si_unique_call 1360} {:cexpr "tmp___0"} boogie_si_record_i32($i31);
    goto corral_source_split_6415;

  corral_source_split_6415:
    assume {:verifier.code 0} true;
    $i32 := $sext.i32.i64($i31);
    goto corral_source_split_6416;

  corral_source_split_6416:
    assume {:verifier.code 0} true;
    $i30 := $i32;
    goto $bb46;

  SeqInstr_355:
    assume !assertsPassed;
    return;

  $bb25:
    assume $i18 == 1;
    goto corral_source_split_6410;

  corral_source_split_6410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1357} $i41 := vmci_host_do_qp_detach($p5, .str.121, $p6);
    goto SeqInstr_352, SeqInstr_353;

  SeqInstr_353:
    assume assertsPassed;
    goto SeqInstr_354;

  SeqInstr_354:
    call {:si_unique_call 1358} {:cexpr "tmp___5"} boogie_si_record_i32($i41);
    goto corral_source_split_6411;

  corral_source_split_6411:
    assume {:verifier.code 0} true;
    $i42 := $sext.i32.i64($i41);
    goto corral_source_split_6412;

  corral_source_split_6412:
    assume {:verifier.code 0} true;
    $i30 := $i42;
    goto $bb46;

  SeqInstr_352:
    assume !assertsPassed;
    return;

  $bb2:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i1, 1958);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i1, 1960);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i1, 1961);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i21 == 1);
    goto corral_source_split_6422;

  corral_source_split_6422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1363} $i39 := vmci_host_do_queuepair_setpf($p5, .str.120, $p6);
    goto SeqInstr_361, SeqInstr_362;

  SeqInstr_362:
    assume assertsPassed;
    goto SeqInstr_363;

  SeqInstr_363:
    call {:si_unique_call 1364} {:cexpr "tmp___4"} boogie_si_record_i32($i39);
    goto corral_source_split_6423;

  corral_source_split_6423:
    assume {:verifier.code 0} true;
    $i40 := $sext.i32.i64($i39);
    goto corral_source_split_6424;

  corral_source_split_6424:
    assume {:verifier.code 0} true;
    $i30 := $i40;
    goto $bb46;

  SeqInstr_361:
    assume !assertsPassed;
    return;

  $bb31:
    assume $i21 == 1;
    goto corral_source_split_6418;

  corral_source_split_6418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1361} $i35 := vmci_host_do_alloc_queuepair($p5, .str.118, $p6);
    goto SeqInstr_358, SeqInstr_359;

  SeqInstr_359:
    assume assertsPassed;
    goto SeqInstr_360;

  SeqInstr_360:
    call {:si_unique_call 1362} {:cexpr "tmp___2"} boogie_si_record_i32($i35);
    goto corral_source_split_6419;

  corral_source_split_6419:
    assume {:verifier.code 0} true;
    $i36 := $sext.i32.i64($i35);
    goto corral_source_split_6420;

  corral_source_split_6420:
    assume {:verifier.code 0} true;
    $i30 := $i36;
    goto $bb46;

  SeqInstr_358:
    assume !assertsPassed;
    return;

  $bb29:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i1, 1959);
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1367} $i59 := vmci_host_get_version($p5, $i1, $p6);
    call {:si_unique_call 1368} {:cexpr "tmp___14"} boogie_si_record_i32($i59);
    goto corral_source_split_6430;

  corral_source_split_6430:
    assume {:verifier.code 0} true;
    $i60 := $sext.i32.i64($i59);
    goto corral_source_split_6431;

  corral_source_split_6431:
    assume {:verifier.code 0} true;
    $i30 := $i60;
    goto $bb46;

  $bb33:
    assume $i22 == 1;
    goto corral_source_split_6426;

  corral_source_split_6426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1365} $i57 := vmci_host_do_recv_notifications($p5, .str.129, $p6);
    goto SeqInstr_364, SeqInstr_365;

  SeqInstr_365:
    assume assertsPassed;
    goto SeqInstr_366;

  SeqInstr_366:
    call {:si_unique_call 1366} {:cexpr "tmp___13"} boogie_si_record_i32($i57);
    goto corral_source_split_6427;

  corral_source_split_6427:
    assume {:verifier.code 0} true;
    $i58 := $sext.i32.i64($i57);
    goto corral_source_split_6428;

  corral_source_split_6428:
    assume {:verifier.code 0} true;
    $i30 := $i58;
    goto $bb46;

  SeqInstr_364:
    assume !assertsPassed;
    return;

  $bb27:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i1, 1956);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i1, 1957);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i24 == 1);
    goto corral_source_split_6437;

  corral_source_split_6437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1371} $i55 := vmci_host_do_notify_resource($p5, .str.128, $p6);
    goto SeqInstr_370, SeqInstr_371;

  SeqInstr_371:
    assume assertsPassed;
    goto SeqInstr_372;

  SeqInstr_372:
    call {:si_unique_call 1372} {:cexpr "tmp___12"} boogie_si_record_i32($i55);
    goto corral_source_split_6438;

  corral_source_split_6438:
    assume {:verifier.code 0} true;
    $i56 := $sext.i32.i64($i55);
    goto corral_source_split_6439;

  corral_source_split_6439:
    assume {:verifier.code 0} true;
    $i30 := $i56;
    goto $bb46;

  SeqInstr_370:
    assume !assertsPassed;
    return;

  $bb38:
    assume $i24 == 1;
    goto corral_source_split_6433;

  corral_source_split_6433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1369} $i37 := vmci_host_do_queuepair_setva($p5, .str.119, $p6);
    goto SeqInstr_367, SeqInstr_368;

  SeqInstr_368:
    assume assertsPassed;
    goto SeqInstr_369;

  SeqInstr_369:
    call {:si_unique_call 1370} {:cexpr "tmp___3"} boogie_si_record_i32($i37);
    goto corral_source_split_6434;

  corral_source_split_6434:
    assume {:verifier.code 0} true;
    $i38 := $sext.i32.i64($i37);
    goto corral_source_split_6435;

  corral_source_split_6435:
    assume {:verifier.code 0} true;
    $i30 := $i38;
    goto $bb46;

  SeqInstr_367:
    assume !assertsPassed;
    return;

  $bb36:
    assume $i23 == 1;
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i1, 1952);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i1, 1952);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb14;

  $bb42:
    assume $i26 == 1;
    goto corral_source_split_6441;

  corral_source_split_6441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1373} $i28 := vmci_host_do_init_context($p5, .str.115, $p6);
    goto SeqInstr_373, SeqInstr_374;

  SeqInstr_374:
    assume assertsPassed;
    goto SeqInstr_375;

  SeqInstr_375:
    call {:si_unique_call 1374} {:cexpr "tmp"} boogie_si_record_i32($i28);
    goto corral_source_split_6442;

  corral_source_split_6442:
    assume {:verifier.code 0} true;
    $i29 := $sext.i32.i64($i28);
    goto corral_source_split_6443;

  corral_source_split_6443:
    assume {:verifier.code 0} true;
    $i30 := $i29;
    goto $bb46;

  SeqInstr_373:
    assume !assertsPassed;
    return;

  $bb40:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i1, 1951);
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb44, $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb14;

  $bb44:
    assume $i27 == 1;
    goto corral_source_split_6445;

  corral_source_split_6445:
    assume {:verifier.code 0} true;
    goto $bb35;
}



const vmci_host_open: ref;

axiom vmci_host_open == $sub.ref(0, 761937);

procedure vmci_host_open($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation vmci_host_open($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1376} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_6451;

  corral_source_split_6451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1377} $p3 := kzalloc(176, 208);
    goto corral_source_split_6452;

  corral_source_split_6452:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_6453;

  corral_source_split_6453:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_6454;

  corral_source_split_6454:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_6455;

  corral_source_split_6455:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 176)), $mul.ref(12, 1));
    goto corral_source_split_6461;

  corral_source_split_6461:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, 13);
    goto corral_source_split_6462;

  corral_source_split_6462:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 176)), $mul.ref(16, 1));
    goto corral_source_split_6463;

  corral_source_split_6463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1378} __mutex_init($p9, .str.154, $p2);
    goto corral_source_split_6464;

  corral_source_split_6464:
    assume {:verifier.code 0} true;
    goto corral_source_split_6465;

  corral_source_split_6465:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_6466;

  corral_source_split_6466:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, $p3);
    goto corral_source_split_6467;

  corral_source_split_6467:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6459;

  corral_source_split_6459:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_6457;

  corral_source_split_6457:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 12);
    goto $bb3;
}



const vmci_host_close: ref;

axiom vmci_host_close == $sub.ref(0, 762969);

procedure vmci_host_close($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.3, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.31, $M.87, $M.6, $M.13, $M.20, $M.21, $M.18, $M.19, $M.69, $M.70, $CurrAddr, $M.23, $M.24, $M.25, $M.26, $M.27, $M.108, $M.110, $M.112, $M.114, $M.28, $M.33, assertsPassed, $M.29, $M.45, $M.48, $M.47, $M.89, $M.109, $M.111, $M.113, $M.115, $M.34, $M.30, $M.35, $M.46, $M.90, $M.86, $M.91, $M.44, $M.32, $M.36, $M.38, $M.40, $M.42;



implementation vmci_host_close($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6469;

  corral_source_split_6469:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_6470;

  corral_source_split_6470:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_6471;

  corral_source_split_6471:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_6472;

  corral_source_split_6472:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 176)), $mul.ref(12, 1));
    goto corral_source_split_6473;

  corral_source_split_6473:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_6474;

  corral_source_split_6474:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 11);
    goto corral_source_split_6475;

  corral_source_split_6475:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 176)), $mul.ref(12, 1));
    goto corral_source_split_6485;

  corral_source_split_6485:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, 13);
    goto corral_source_split_6486;

  corral_source_split_6486:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p4);
    goto corral_source_split_6487;

  corral_source_split_6487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1381} kfree($p12);
    goto corral_source_split_6488;

  corral_source_split_6488:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_6489;

  corral_source_split_6489:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, $0.ref);
    goto corral_source_split_6490;

  corral_source_split_6490:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_6477;

  corral_source_split_6477:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 176)), $mul.ref(0, 1));
    goto corral_source_split_6478;

  corral_source_split_6478:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_6479;

  corral_source_split_6479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1379} vmci_ctx_destroy($p9);
    goto SeqInstr_376, SeqInstr_377;

  SeqInstr_377:
    assume assertsPassed;
    goto SeqInstr_378;

  SeqInstr_378:
    goto corral_source_split_6480;

  corral_source_split_6480:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 176)), $mul.ref(0, 1));
    goto corral_source_split_6481;

  corral_source_split_6481:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, $0.ref);
    goto corral_source_split_6482;

  corral_source_split_6482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1380} atomic_dec(vmci_host_active_users);
    goto corral_source_split_6483;

  corral_source_split_6483:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_376:
    assume !assertsPassed;
    return;
}



const vmci_ctx_destroy: ref;

axiom vmci_ctx_destroy == $sub.ref(0, 764001);

procedure vmci_ctx_destroy($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.3, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.31, $M.87, $M.6, $M.13, $M.20, $M.21, $M.18, $M.19, $M.69, $M.70, $CurrAddr, $M.23, $M.24, $M.25, $M.26, $M.27, $M.108, $M.110, $M.112, $M.114, $M.28, $M.33, assertsPassed, $M.29, $M.45, $M.48, $M.47, $M.89, $M.109, $M.111, $M.113, $M.115, $M.34, $M.30, $M.35, $M.46, $M.90, $M.86, $M.91, $M.44, $M.32, $M.36, $M.38, $M.40, $M.42;



implementation vmci_ctx_destroy($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6492;

  corral_source_split_6492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1382} spin_lock($add.ref($add.ref(ctx_list, $mul.ref(0, 88)), $mul.ref(16, 1)));
    goto corral_source_split_6493;

  corral_source_split_6493:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(0, 1));
    goto corral_source_split_6494;

  corral_source_split_6494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1383} list_del_rcu($p1);
    goto corral_source_split_6495;

  corral_source_split_6495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1384} spin_unlock($add.ref($add.ref(ctx_list, $mul.ref(0, 88)), $mul.ref(16, 1)));
    goto corral_source_split_6496;

  corral_source_split_6496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1385} synchronize_rcu();
    goto corral_source_split_6497;

  corral_source_split_6497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1386} vmci_ctx_put($p0);
    goto SeqInstr_379, SeqInstr_380;

  SeqInstr_380:
    assume assertsPassed;
    goto SeqInstr_381;

  SeqInstr_381:
    goto corral_source_split_6498;

  corral_source_split_6498:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_379:
    assume !assertsPassed;
    return;
}



const vmci_host_do_init_context: ref;

axiom vmci_host_do_init_context == $sub.ref(0, 765033);

procedure vmci_host_do_init_context($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.138, assertsPassed, $M.2, $M.3, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.31, $M.87, $M.6, $M.13, $M.20, $M.21, $M.18, $M.19, $M.69, $M.70, $M.23, $M.24, $M.25, $M.26, $M.27, $M.108, $M.110, $M.112, $M.114, $M.28, $M.33, $M.29, $M.45, $M.48, $M.47, $M.89, $M.109, $M.111, $M.113, $M.115, $M.34, $M.30, $M.35, $M.46, $M.90, $M.86, $M.91, $M.44, $M.32, $M.36, $M.38, $M.40, $M.42;



implementation vmci_host_do_init_context($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $i30: i32;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i1;
  var $i37: i8;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $i43: i32;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $i51: i1;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p56: ref;
  var $i14: i32;
  var $p57: ref;
  var $i8: i32;
  var vslice_dummy_var_239: i32;
  var vslice_dummy_var_240: i32;
  var vslice_dummy_var_241: i32;
  var vslice_dummy_var_242: i32;
  var vslice_dummy_var_243: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1387} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_6500;

  corral_source_split_6500:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_6501;

  corral_source_split_6501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1388} $i5 := copy_from_user($p4, $p2, 8);
    call {:si_unique_call 1389} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_6502;

  corral_source_split_6502:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_6503;

  corral_source_split_6503:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(16, 1));
    goto corral_source_split_6510;

  corral_source_split_6510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1391} ldv_mutex_lock_175($p9);
    goto SeqInstr_382, SeqInstr_383;

  SeqInstr_383:
    assume assertsPassed;
    goto SeqInstr_384;

  SeqInstr_384:
    goto corral_source_split_6511;

  corral_source_split_6511:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(12, 1));
    goto corral_source_split_6512;

  corral_source_split_6512:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_6513;

  corral_source_split_6513:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 13);
    goto corral_source_split_6514;

  corral_source_split_6514:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_6523;

  corral_source_split_6523:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_6524;

  corral_source_split_6524:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i16, $sub.i32(0, 2));
    goto corral_source_split_6525;

  corral_source_split_6525:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_6526;

  corral_source_split_6526:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1395} $i20 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 1396} {:cexpr "tmp___0"} boogie_si_record_i32($i20);
    goto corral_source_split_6531;

  corral_source_split_6531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1397} $p21 := get_current();
    goto corral_source_split_6532;

  corral_source_split_6532:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 11712)), $mul.ref(2536, 1));
    goto corral_source_split_6533;

  corral_source_split_6533:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.121, $p22);
    goto corral_source_split_6534;

  corral_source_split_6534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1398} $p24 := get_cred($p23);
    goto corral_source_split_6535;

  corral_source_split_6535:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_6536;

  corral_source_split_6536:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_6537;

  corral_source_split_6537:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_6538;

  corral_source_split_6538:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_6539;

  corral_source_split_6539:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(8, 1));
    goto corral_source_split_6540;

  corral_source_split_6540:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_6541;

  corral_source_split_6541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1399} $p31 := vmci_ctx_create($i26, $i28, 0, $i30, $p24);
    goto corral_source_split_6542;

  corral_source_split_6542:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(0, 1));
    goto corral_source_split_6543;

  corral_source_split_6543:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p32, $p31);
    goto corral_source_split_6544;

  corral_source_split_6544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1400} put_cred($p24);
    goto corral_source_split_6545;

  corral_source_split_6545:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(0, 1));
    goto corral_source_split_6546;

  corral_source_split_6546:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_6547;

  corral_source_split_6547:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_6548;

  corral_source_split_6548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1401} $i36 := IS_ERR($p35);
    goto corral_source_split_6549;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    $i37 := $zext.i1.i8($i36);
    call {:si_unique_call 1402} {:cexpr "tmp___3"} boogie_si_record_i8($i37);
    goto corral_source_split_6550;

  corral_source_split_6550:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i8.i1($i37);
    goto corral_source_split_6551;

  corral_source_split_6551:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(0, 1));
    goto corral_source_split_6561;

  corral_source_split_6561:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_6562;

  corral_source_split_6562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1407} $i47 := vmci_ctx_get_id($p46);
    goto corral_source_split_6563;

  corral_source_split_6563:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_6564;

  corral_source_split_6564:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p48, $i47);
    goto corral_source_split_6565;

  corral_source_split_6565:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p3);
    goto corral_source_split_6566;

  corral_source_split_6566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1408} $i50 := copy_to_user($p2, $p49, 8);
    call {:si_unique_call 1409} {:cexpr "tmp___4"} boogie_si_record_i64($i50);
    goto corral_source_split_6567;

  corral_source_split_6567:
    assume {:verifier.code 0} true;
    $i51 := $ne.i64($i50, 0);
    goto corral_source_split_6568;

  corral_source_split_6568:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(12, 1));
    goto corral_source_split_6578;

  corral_source_split_6578:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p56, 11);
    goto corral_source_split_6579;

  corral_source_split_6579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1412} atomic_inc(vmci_host_active_users);
    goto corral_source_split_6580;

  corral_source_split_6580:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_6519;

  corral_source_split_6519:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(16, 1));
    goto corral_source_split_6520;

  corral_source_split_6520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1393} ldv_mutex_unlock_176($p57);
    goto SeqInstr_385, SeqInstr_386;

  SeqInstr_386:
    assume assertsPassed;
    goto SeqInstr_387;

  SeqInstr_387:
    goto corral_source_split_6521;

  corral_source_split_6521:
    assume {:verifier.code 0} true;
    $i8 := $i14;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6508;

  corral_source_split_6508:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  SeqInstr_385:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i51 == 1;
    goto corral_source_split_6570;

  corral_source_split_6570:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(0, 1));
    goto corral_source_split_6571;

  corral_source_split_6571:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_6572;

  corral_source_split_6572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1410} vmci_ctx_destroy($p53);
    goto SeqInstr_388, SeqInstr_389;

  SeqInstr_389:
    assume assertsPassed;
    goto SeqInstr_390;

  SeqInstr_390:
    goto corral_source_split_6573;

  corral_source_split_6573:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(0, 1));
    goto corral_source_split_6574;

  corral_source_split_6574:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p54, $0.ref);
    goto corral_source_split_6575;

  corral_source_split_6575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1411} vslice_dummy_var_243 := no_printk.ref.ref(.str.136, $p1);
    goto corral_source_split_6576;

  corral_source_split_6576:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 14);
    goto $bb7;

  SeqInstr_388:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i38 == 1;
    goto corral_source_split_6553;

  corral_source_split_6553:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(0, 1));
    goto corral_source_split_6554;

  corral_source_split_6554:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_6555;

  corral_source_split_6555:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_6556;

  corral_source_split_6556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1403} $i42 := PTR_ERR($p41);
    call {:si_unique_call 1404} {:cexpr "tmp___2"} boogie_si_record_i64($i42);
    goto corral_source_split_6557;

  corral_source_split_6557:
    assume {:verifier.code 0} true;
    $i43 := $trunc.i64.i32($i42);
    call {:si_unique_call 1405} {:cexpr "retval"} boogie_si_record_i32($i43);
    goto corral_source_split_6558;

  corral_source_split_6558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1406} vslice_dummy_var_242 := no_printk.ref.ref(.str.135, $p1);
    goto corral_source_split_6559;

  corral_source_split_6559:
    assume {:verifier.code 0} true;
    $i14 := $i43;
    goto $bb7;

  $bb9:
    assume $i18 == 1;
    goto corral_source_split_6528;

  corral_source_split_6528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1394} vslice_dummy_var_241 := no_printk.ref.ref(.str.134, $p1);
    goto corral_source_split_6529;

  corral_source_split_6529:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 22);
    goto $bb7;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_6516;

  corral_source_split_6516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1392} vslice_dummy_var_240 := no_printk.ref.ref(.str.133, $p1);
    goto corral_source_split_6517;

  corral_source_split_6517:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 22);
    goto $bb7;

  SeqInstr_382:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_6505;

  corral_source_split_6505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1390} vslice_dummy_var_239 := no_printk.ref.ref(.str.132, $p1);
    goto corral_source_split_6506;

  corral_source_split_6506:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 14);
    goto $bb3;
}



const vmci_host_do_send_datagram: ref;

axiom vmci_host_do_send_datagram == $sub.ref(0, 766065);

procedure vmci_host_do_send_datagram($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.29, $CurrAddr, $M.34, $M.30, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.31, $M.87, $M.69, $M.35, $M.20, $M.21, $M.44, $M.32, $M.108, $M.110, $M.112, $M.114, $M.70, $M.33, $M.2, $M.3, $M.109, $M.111, $M.113, $M.115, assertsPassed, $M.6, $M.13, $M.18, $M.19, $M.36, $M.38, $M.40, $M.42, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.45, $M.48, $M.47, $M.89, $M.46, $M.90, $M.86, $M.91;



implementation vmci_host_do_send_datagram($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i32;
  var $p24: ref;
  var $i25: i32;
  var $i26: i64;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i64;
  var $i39: i64;
  var $i40: i1;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $i45: i64;
  var $p46: ref;
  var $i47: i32;
  var $i48: i64;
  var $i49: i1;
  var $p51: ref;
  var $p53: ref;
  var $i54: i32;
  var $p56: ref;
  var $i57: i32;
  var $p59: ref;
  var $i60: i32;
  var $p62: ref;
  var $i63: i32;
  var $p64: ref;
  var $i65: i64;
  var $p67: ref;
  var $p68: ref;
  var $i69: i32;
  var $i70: i32;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i64;
  var $i75: i1;
  var $i76: i32;
  var $i8: i32;
  var vslice_dummy_var_244: i32;
  var vslice_dummy_var_245: i32;
  var vslice_dummy_var_246: i32;
  var vslice_dummy_var_247: i32;
  var vslice_dummy_var_248: i32;
  var vslice_dummy_var_249: i32;
  var vslice_dummy_var_250: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1413} $p3 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_6582;

  corral_source_split_6582:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(12, 1));
    goto corral_source_split_6583;

  corral_source_split_6583:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_6584;

  corral_source_split_6584:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 11);
    goto corral_source_split_6585;

  corral_source_split_6585:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p3);
    goto corral_source_split_6592;

  corral_source_split_6592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1415} $i10 := copy_from_user($p9, $p2, 16);
    call {:si_unique_call 1416} {:cexpr "tmp"} boogie_si_record_i64($i10);
    goto corral_source_split_6593;

  corral_source_split_6593:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_6594;

  corral_source_split_6594:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6598;

  corral_source_split_6598:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_6599;

  corral_source_split_6599:
    assume {:verifier.code 0} true;
    $i14 := $ugt.i32($i13, 69632);
    goto corral_source_split_6600;

  corral_source_split_6600:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6607;

  corral_source_split_6607:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_6608;

  corral_source_split_6608:
    assume {:verifier.code 0} true;
    $i20 := $ule.i32($i19, 23);
    goto corral_source_split_6609;

  corral_source_split_6609:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6616;

  corral_source_split_6616:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_6617;

  corral_source_split_6617:
    assume {:verifier.code 0} true;
    $i26 := $zext.i32.i64($i25);
    goto corral_source_split_6618;

  corral_source_split_6618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1419} $p27 := kmalloc($i26, 208);
    goto corral_source_split_6619;

  corral_source_split_6619:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_6620;

  corral_source_split_6620:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_6621;

  corral_source_split_6621:
    assume {:verifier.code 0} true;
    $i30 := $eq.i64($i29, 0);
    goto corral_source_split_6622;

  corral_source_split_6622:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p28);
    goto corral_source_split_6627;

  corral_source_split_6627:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6628;

  corral_source_split_6628:
    assume {:verifier.code 0} true;
    $i34 := $load.i64($M.0, $p33);
    goto corral_source_split_6629;

  corral_source_split_6629:
    assume {:verifier.code 0} true;
    $p35 := $i2p.i64.ref($i34);
    goto corral_source_split_6630;

  corral_source_split_6630:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6631;

  corral_source_split_6631:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_6632;

  corral_source_split_6632:
    assume {:verifier.code 0} true;
    $i38 := $zext.i32.i64($i37);
    goto corral_source_split_6633;

  corral_source_split_6633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1421} $i39 := copy_from_user($p32, $p35, $i38);
    call {:si_unique_call 1422} {:cexpr "tmp___1"} boogie_si_record_i64($i39);
    goto corral_source_split_6634;

  corral_source_split_6634:
    assume {:verifier.code 0} true;
    $i40 := $ne.i64($i39, 0);
    goto corral_source_split_6635;

  corral_source_split_6635:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p28, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_6642;

  corral_source_split_6642:
    assume {:verifier.code 0} true;
    $i44 := $load.i64($M.0, $p43);
    goto corral_source_split_6643;

  corral_source_split_6643:
    assume {:verifier.code 0} true;
    $i45 := $add.i64($i44, 24);
    goto corral_source_split_6644;

  corral_source_split_6644:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6645;

  corral_source_split_6645:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_6646;

  corral_source_split_6646:
    assume {:verifier.code 0} true;
    $i48 := $zext.i32.i64($i47);
    goto corral_source_split_6647;

  corral_source_split_6647:
    assume {:verifier.code 0} true;
    $i49 := $ne.i64($i45, $i48);
    goto corral_source_split_6648;

  corral_source_split_6648:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p28, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6655;

  corral_source_split_6655:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p53);
    goto corral_source_split_6656;

  corral_source_split_6656:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p28, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_6657;

  corral_source_split_6657:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.0, $p56);
    goto corral_source_split_6658;

  corral_source_split_6658:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p28, $mul.ref(0, 24)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_6659;

  corral_source_split_6659:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.0, $p59);
    goto corral_source_split_6660;

  corral_source_split_6660:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($p28, $mul.ref(0, 24)), $mul.ref(8, 1)), $mul.ref(4, 1));
    goto corral_source_split_6661;

  corral_source_split_6661:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.0, $p62);
    goto corral_source_split_6662;

  corral_source_split_6662:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p28, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_6663;

  corral_source_split_6663:
    assume {:verifier.code 0} true;
    $i65 := $load.i64($M.0, $p64);
    goto corral_source_split_6664;

  corral_source_split_6664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1427} vslice_dummy_var_250 := no_printk.ref.i32.i32.i32.i32.i64(.str.144, $i54, $i57, $i60, $i63, $i65);
    goto corral_source_split_6665;

  corral_source_split_6665:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(0, 1));
    goto corral_source_split_6666;

  corral_source_split_6666:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    goto corral_source_split_6667;

  corral_source_split_6667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1428} $i69 := vmci_ctx_get_id($p68);
    call {:si_unique_call 1429} {:cexpr "cid"} boogie_si_record_i32($i69);
    goto corral_source_split_6668;

  corral_source_split_6668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1430} $i70 := vmci_datagram_dispatch($i69, $p28, 1);
    goto SeqInstr_391, SeqInstr_392;

  SeqInstr_392:
    assume assertsPassed;
    goto SeqInstr_393;

  SeqInstr_393:
    goto corral_source_split_6669;

  corral_source_split_6669:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_6670;

  corral_source_split_6670:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p71, $i70);
    goto corral_source_split_6671;

  corral_source_split_6671:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p28);
    goto corral_source_split_6672;

  corral_source_split_6672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1431} kfree($p72);
    goto corral_source_split_6673;

  corral_source_split_6673:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p3);
    goto corral_source_split_6674;

  corral_source_split_6674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1432} $i74 := copy_to_user($p2, $p73, 16);
    call {:si_unique_call 1433} {:cexpr "tmp___2"} boogie_si_record_i64($i74);
    goto corral_source_split_6675;

  corral_source_split_6675:
    assume {:verifier.code 0} true;
    $i75 := $ne.i64($i74, 0);
    goto corral_source_split_6676;

  corral_source_split_6676:
    assume {:verifier.code 0} true;
    $i76 := (if $i75 == 1 then $sub.i32(0, 14) else 0);
    goto corral_source_split_6677;

  corral_source_split_6677:
    assume {:verifier.code 0} true;
    $i8 := $i76;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6590;

  corral_source_split_6590:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  SeqInstr_391:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i49 == 1;
    goto corral_source_split_6650;

  corral_source_split_6650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1425} vslice_dummy_var_249 := no_printk.ref.ref(.str.143, $p1);
    goto corral_source_split_6651;

  corral_source_split_6651:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p28);
    goto corral_source_split_6652;

  corral_source_split_6652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1426} kfree($p51);
    goto corral_source_split_6653;

  corral_source_split_6653:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 22);
    goto $bb3;

  $bb17:
    assume $i40 == 1;
    goto corral_source_split_6637;

  corral_source_split_6637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1423} vslice_dummy_var_248 := no_printk.ref.ref(.str.142, $p1);
    goto corral_source_split_6638;

  corral_source_split_6638:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p28);
    goto corral_source_split_6639;

  corral_source_split_6639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1424} kfree($p42);
    goto corral_source_split_6640;

  corral_source_split_6640:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 14);
    goto $bb3;

  $bb14:
    assume $i30 == 1;
    goto corral_source_split_6624;

  corral_source_split_6624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1420} vslice_dummy_var_247 := no_printk.ref.ref(.str.141, $p1);
    goto corral_source_split_6625;

  corral_source_split_6625:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 12);
    goto $bb3;

  $bb11:
    assume $i20 == 1;
    goto corral_source_split_6611;

  corral_source_split_6611:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6612;

  corral_source_split_6612:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_6613;

  corral_source_split_6613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1418} vslice_dummy_var_246 := no_printk.ref.ref.i32(.str.140, $p1, $i22);
    goto corral_source_split_6614;

  corral_source_split_6614:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 22);
    goto $bb3;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_6602;

  corral_source_split_6602:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6603;

  corral_source_split_6603:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_6604;

  corral_source_split_6604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1417} vslice_dummy_var_245 := no_printk.ref.ref.i32(.str.139, $p1, $i16);
    goto corral_source_split_6605;

  corral_source_split_6605:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 22);
    goto $bb3;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_6596;

  corral_source_split_6596:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 14);
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_6587;

  corral_source_split_6587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1414} vslice_dummy_var_244 := no_printk.ref.ref(.str.138, $p1);
    goto corral_source_split_6588;

  corral_source_split_6588:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 22);
    goto $bb3;
}



const vmci_host_do_receive_datagram: ref;

axiom vmci_host_do_receive_datagram == $sub.ref(0, 767097);

procedure vmci_host_do_receive_datagram($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.122, $M.123, $M.0, $CurrAddr;



implementation vmci_host_do_receive_datagram($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i64;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $i25: i64;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i64;
  var $i33: i64;
  var $i34: i32;
  var $p35: ref;
  var $p36: ref;
  var $i37: i1;
  var $p38: ref;
  var $i39: i64;
  var $i40: i1;
  var $i41: i32;
  var $i10: i32;
  var vslice_dummy_var_251: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1434} $p3 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1435} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1436} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_6679;

  corral_source_split_6679:
    assume {:verifier.code 0} true;
    $M.122 := $store.ref($M.122, $p4, $0.ref);
    goto corral_source_split_6680;

  corral_source_split_6680:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(12, 1));
    goto corral_source_split_6681;

  corral_source_split_6681:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_6682;

  corral_source_split_6682:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 11);
    goto corral_source_split_6683;

  corral_source_split_6683:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p3);
    goto corral_source_split_6690;

  corral_source_split_6690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1438} $i12 := copy_from_user($p11, $p2, 16);
    call {:si_unique_call 1439} {:cexpr "tmp"} boogie_si_record_i64($i12);
    goto corral_source_split_6691;

  corral_source_split_6691:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_6692;

  corral_source_split_6692:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6696;

  corral_source_split_6696:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_6697;

  corral_source_split_6697:
    assume {:verifier.code 0} true;
    $i16 := $zext.i32.i64($i15);
    goto corral_source_split_6698;

  corral_source_split_6698:
    assume {:verifier.code 0} true;
    $M.123 := $store.i64($M.123, $p5, $i16);
    goto corral_source_split_6699;

  corral_source_split_6699:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(0, 1));
    goto corral_source_split_6700;

  corral_source_split_6700:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_6701;

  corral_source_split_6701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1440} $i19 := vmci_ctx_dequeue_datagram($p18, $p5, $p4);
    goto corral_source_split_6702;

  corral_source_split_6702:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_6703;

  corral_source_split_6703:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, $i19);
    goto corral_source_split_6704;

  corral_source_split_6704:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_6705;

  corral_source_split_6705:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_6706;

  corral_source_split_6706:
    assume {:verifier.code 0} true;
    $i23 := $sge.i32($i22, 0);
    goto corral_source_split_6707;

  corral_source_split_6707:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p3);
    goto corral_source_split_6728;

  corral_source_split_6728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1445} $i39 := copy_to_user($p2, $p38, 16);
    call {:si_unique_call 1446} {:cexpr "tmp___1"} boogie_si_record_i64($i39);
    goto corral_source_split_6729;

  corral_source_split_6729:
    assume {:verifier.code 0} true;
    $i40 := $ne.i64($i39, 0);
    goto corral_source_split_6730;

  corral_source_split_6730:
    assume {:verifier.code 0} true;
    $i41 := (if $i40 == 1 then $sub.i32(0, 14) else 0);
    goto corral_source_split_6731;

  corral_source_split_6731:
    assume {:verifier.code 0} true;
    $i10 := $i41;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6688;

  corral_source_split_6688:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb8:
    assume $i23 == 1;
    goto corral_source_split_6709;

  corral_source_split_6709:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6710;

  corral_source_split_6710:
    assume {:verifier.code 0} true;
    $i25 := $load.i64($M.0, $p24);
    goto corral_source_split_6711;

  corral_source_split_6711:
    assume {:verifier.code 0} true;
    $p26 := $i2p.i64.ref($i25);
    goto corral_source_split_6712;

  corral_source_split_6712:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.122, $p4);
    goto corral_source_split_6713;

  corral_source_split_6713:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_6714;

  corral_source_split_6714:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.122, $p4);
    goto corral_source_split_6715;

  corral_source_split_6715:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_6716;

  corral_source_split_6716:
    assume {:verifier.code 0} true;
    $i31 := $load.i64($M.0, $p30);
    goto corral_source_split_6717;

  corral_source_split_6717:
    assume {:verifier.code 0} true;
    $i32 := $add.i64($i31, 24);
    goto corral_source_split_6718;

  corral_source_split_6718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1441} $i33 := copy_to_user($p26, $p28, $i32);
    call {:si_unique_call 1442} {:cexpr "tmp___0"} boogie_si_record_i64($i33);
    goto corral_source_split_6719;

  corral_source_split_6719:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i64.i32($i33);
    call {:si_unique_call 1443} {:cexpr "retval"} boogie_si_record_i32($i34);
    goto corral_source_split_6720;

  corral_source_split_6720:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.122, $p4);
    goto corral_source_split_6721;

  corral_source_split_6721:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_6722;

  corral_source_split_6722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1444} kfree($p36);
    goto corral_source_split_6723;

  corral_source_split_6723:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i34, 0);
    goto corral_source_split_6724;

  corral_source_split_6724:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i37 == 1;
    goto corral_source_split_6726;

  corral_source_split_6726:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 14);
    goto $bb3;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_6694;

  corral_source_split_6694:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 14);
    goto $bb3;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_6685;

  corral_source_split_6685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1437} vslice_dummy_var_251 := no_printk.ref.ref(.str.138, $p1);
    goto corral_source_split_6686;

  corral_source_split_6686:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 22);
    goto $bb3;
}



const vmci_host_do_alloc_queuepair: ref;

axiom vmci_host_do_alloc_queuepair == $sub.ref(0, 768129);

procedure vmci_host_do_alloc_queuepair($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.78, $M.77, $M.18, $M.137, $M.76, $M.23, $M.20, $M.21, $M.24, $M.25, $M.75, $M.26, $M.19, $M.27, $CurrAddr, $M.28, $M.45, $M.48, $M.47, $M.74, $M.32, $M.33, $M.89, $M.29, assertsPassed, $M.55, $M.79, $M.46, $M.90, $M.86, $M.91, $M.34, $M.30, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.31, $M.87, $M.69, $M.35, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.44, $M.108, $M.110, $M.112, $M.114, $M.70, $M.2, $M.3, $M.109, $M.111, $M.113, $M.115, $M.6, $M.13, $M.36, $M.38, $M.40, $M.42;



implementation vmci_host_do_alloc_queuepair($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $i30: i32;
  var $p31: ref;
  var $i32: i64;
  var $p33: ref;
  var $i34: i64;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $i39: i32;
  var $i40: i1;
  var $i41: i32;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $i47: i1;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i64;
  var $p54: ref;
  var $p55: ref;
  var $i56: i64;
  var $i57: i32;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i32;
  var $p62: ref;
  var $i63: i32;
  var $p64: ref;
  var $i65: i64;
  var $p66: ref;
  var $i67: i64;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i64;
  var $i72: i32;
  var $i42: i32;
  var $p43: ref;
  var $i73: i32;
  var $i74: i1;
  var $i75: i1;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $i79: i64;
  var $i80: i32;
  var $i11: i32;
  var cmdloc_dummy_var_133: [ref]i8;
  var cmdloc_dummy_var_134: [ref]i8;
  var cmdloc_dummy_var_135: [ref]i8;
  var cmdloc_dummy_var_136: [ref]i8;
  var cmdloc_dummy_var_137: [ref]i8;
  var cmdloc_dummy_var_138: [ref]i8;
  var vslice_dummy_var_252: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1447} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1448} $p4 := $alloc($mul.ref(72, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1449} $p5 := $alloc($mul.ref(56, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1450} $p6 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_6733;

  corral_source_split_6733:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(12, 1));
    goto corral_source_split_6734;

  corral_source_split_6734:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_6735;

  corral_source_split_6735:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 11);
    goto corral_source_split_6736;

  corral_source_split_6736:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(0, 1));
    goto corral_source_split_6743;

  corral_source_split_6743:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_6744;

  corral_source_split_6744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1452} $i14 := vmci_ctx_get_id($p13);
    call {:si_unique_call 1453} {:cexpr "cid"} boogie_si_record_i32($i14);
    goto corral_source_split_6745;

  corral_source_split_6745:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(8, 1));
    goto corral_source_split_6746;

  corral_source_split_6746:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_6747;

  corral_source_split_6747:
    assume {:verifier.code 0} true;
    $i17 := $sle.i32($i16, 720895);
    goto corral_source_split_6748;

  corral_source_split_6748:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i17 == 1);
    goto corral_source_split_6756;

  corral_source_split_6756:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p2);
    goto corral_source_split_6757;

  corral_source_split_6757:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p5);
    goto corral_source_split_6758;

  corral_source_split_6758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1456} $i46 := copy_from_user($p45, $p2, 56);
    call {:si_unique_call 1457} {:cexpr "tmp___0"} boogie_si_record_i64($i46);
    goto corral_source_split_6759;

  corral_source_split_6759:
    assume {:verifier.code 0} true;
    $i47 := $ne.i64($i46, 0);
    goto corral_source_split_6760;

  corral_source_split_6760:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p5, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_6794;

  corral_source_split_6794:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p3);
    goto corral_source_split_6795;

  corral_source_split_6795:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p48);
    goto corral_source_split_6796;

  corral_source_split_6796:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_136 := $M.0;
    cmdloc_dummy_var_137 := $M.0;
    call {:si_unique_call 1464} cmdloc_dummy_var_138 := $memcpy.i8(cmdloc_dummy_var_136, cmdloc_dummy_var_137, $p49, $p50, 8, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_138;
    goto corral_source_split_6797;

  corral_source_split_6797:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p44, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_6798;

  corral_source_split_6798:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p5, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_6799;

  corral_source_split_6799:
    assume {:verifier.code 0} true;
    $i53 := $load.i64($M.0, $p52);
    goto corral_source_split_6800;

  corral_source_split_6800:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6801;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    $M.78 := $store.i64($M.78, $p54, $i53);
    goto corral_source_split_6802;

  corral_source_split_6802:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p5, $mul.ref(0, 56)), $mul.ref(40, 1));
    goto corral_source_split_6803;

  corral_source_split_6803:
    assume {:verifier.code 0} true;
    $i56 := $load.i64($M.0, $p55);
    goto corral_source_split_6804;

  corral_source_split_6804:
    assume {:verifier.code 0} true;
    $i57 := $trunc.i64.i32($i56);
    goto corral_source_split_6805;

  corral_source_split_6805:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6806;

  corral_source_split_6806:
    assume {:verifier.code 0} true;
    $M.77 := $store.i32($M.77, $p58, $i57);
    goto corral_source_split_6807;

  corral_source_split_6807:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p5, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_6808;

  corral_source_split_6808:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p5, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_6809;

  corral_source_split_6809:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.0, $p60);
    goto corral_source_split_6810;

  corral_source_split_6810:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p5, $mul.ref(0, 56)), $mul.ref(12, 1));
    goto corral_source_split_6811;

  corral_source_split_6811:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.0, $p62);
    goto corral_source_split_6812;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p5, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_6813;

  corral_source_split_6813:
    assume {:verifier.code 0} true;
    $i65 := $load.i64($M.0, $p64);
    goto corral_source_split_6814;

  corral_source_split_6814:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p5, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_6815;

  corral_source_split_6815:
    assume {:verifier.code 0} true;
    $i67 := $load.i64($M.0, $p66);
    goto corral_source_split_6816;

  corral_source_split_6816:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(0, 1));
    goto corral_source_split_6817;

  corral_source_split_6817:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.0, $p68);
    goto corral_source_split_6818;

  corral_source_split_6818:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p59);
    goto corral_source_split_6819;

  corral_source_split_6819:
    assume {:verifier.code 0} true;
    $i71 := $load.i64($M.0, $p70);
    goto corral_source_split_6820;

  corral_source_split_6820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1465} $i72 := vmci_qp_broker_alloc($i71, $i61, $i63, 0, $i65, $i67, $p6, $p69);
    goto SeqInstr_397, SeqInstr_398;

  SeqInstr_398:
    assume assertsPassed;
    goto SeqInstr_399;

  SeqInstr_399:
    call {:si_unique_call 1466} {:cexpr "vmci_status"} boogie_si_record_i32($i72);
    assume {:verifier.code 0} true;
    $i42, $p43 := $i72, $p51;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6789;

  corral_source_split_6789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1461} __might_fault(.str.46, 510);
    call {:si_unique_call 1462} $i73 := devirtbounce.14(0, $i42, $p43);
    call {:si_unique_call 1463} {:cexpr "__ret_pu"} boogie_si_record_i32($i73);
    goto corral_source_split_6790;

  corral_source_split_6790:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i74 := $ne.i32($i73, 0);
    goto corral_source_split_6822;

  corral_source_split_6822:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6741;

  corral_source_split_6741:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb18:
    assume $i74 == 1;
    goto corral_source_split_6824;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    $i75 := $sge.i32($i42, 0);
    goto corral_source_split_6825;

  corral_source_split_6825:
    assume {:verifier.code 0} true;
    assume {:branchcond $i75} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 14);
    goto $bb3;

  $bb20:
    assume $i75 == 1;
    goto corral_source_split_6827;

  corral_source_split_6827:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(0, 1));
    goto corral_source_split_6828;

  corral_source_split_6828:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.0, $p76);
    goto corral_source_split_6829;

  corral_source_split_6829:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p3);
    goto corral_source_split_6830;

  corral_source_split_6830:
    assume {:verifier.code 0} true;
    $i79 := $load.i64($M.0, $p78);
    goto corral_source_split_6831;

  corral_source_split_6831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1467} $i80 := vmci_qp_broker_detach($i79, $p77);
    goto SeqInstr_400, SeqInstr_401;

  SeqInstr_401:
    assume assertsPassed;
    goto SeqInstr_402;

  SeqInstr_402:
    call {:si_unique_call 1468} {:cexpr "vmci_status"} boogie_si_record_i32($i80);
    goto corral_source_split_6832;

  corral_source_split_6832:
    assume {:verifier.code 0} true;
    goto $bb22;

  SeqInstr_400:
    assume !assertsPassed;
    return;

  SeqInstr_397:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i47 == 1;
    goto corral_source_split_6792;

  corral_source_split_6792:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 14);
    goto $bb3;

  $bb5:
    assume $i17 == 1;
    goto corral_source_split_6750;

  corral_source_split_6750:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p2);
    goto corral_source_split_6751;

  corral_source_split_6751:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p4);
    goto corral_source_split_6752;

  corral_source_split_6752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1454} $i20 := copy_from_user($p19, $p2, 72);
    call {:si_unique_call 1455} {:cexpr "tmp"} boogie_si_record_i64($i20);
    goto corral_source_split_6753;

  corral_source_split_6753:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_6754;

  corral_source_split_6754:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_6764;

  corral_source_split_6764:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p3);
    goto corral_source_split_6765;

  corral_source_split_6765:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p22);
    goto corral_source_split_6766;

  corral_source_split_6766:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_133 := $M.0;
    cmdloc_dummy_var_134 := $M.0;
    call {:si_unique_call 1458} cmdloc_dummy_var_135 := $memcpy.i8(cmdloc_dummy_var_133, cmdloc_dummy_var_134, $p23, $p24, 8, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_135;
    goto corral_source_split_6767;

  corral_source_split_6767:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p18, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_6768;

  corral_source_split_6768:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_6769;

  corral_source_split_6769:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_6770;

  corral_source_split_6770:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_6771;

  corral_source_split_6771:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(12, 1));
    goto corral_source_split_6772;

  corral_source_split_6772:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_6773;

  corral_source_split_6773:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_6774;

  corral_source_split_6774:
    assume {:verifier.code 0} true;
    $i32 := $load.i64($M.0, $p31);
    goto corral_source_split_6775;

  corral_source_split_6775:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_6776;

  corral_source_split_6776:
    assume {:verifier.code 0} true;
    $i34 := $load.i64($M.0, $p33);
    goto corral_source_split_6777;

  corral_source_split_6777:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(0, 1));
    goto corral_source_split_6778;

  corral_source_split_6778:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_6779;

  corral_source_split_6779:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p26);
    goto corral_source_split_6780;

  corral_source_split_6780:
    assume {:verifier.code 0} true;
    $i38 := $load.i64($M.0, $p37);
    goto corral_source_split_6781;

  corral_source_split_6781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1459} $i39 := vmci_qp_broker_alloc($i38, $i28, $i30, 0, $i32, $i34, $0.ref, $p36);
    goto SeqInstr_394, SeqInstr_395;

  SeqInstr_395:
    assume assertsPassed;
    goto SeqInstr_396;

  SeqInstr_396:
    call {:si_unique_call 1460} {:cexpr "vmci_status"} boogie_si_record_i32($i39);
    goto corral_source_split_6782;

  corral_source_split_6782:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, 0);
    goto corral_source_split_6783;

  corral_source_split_6783:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    $i41 := $i39;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_6787;

  corral_source_split_6787:
    assume {:verifier.code 0} true;
    $i42, $p43 := $i41, $p25;
    goto $bb13;

  $bb10:
    assume $i40 == 1;
    goto corral_source_split_6785;

  corral_source_split_6785:
    assume {:verifier.code 0} true;
    $i41 := 4;
    goto $bb12;

  SeqInstr_394:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i21 == 1;
    goto corral_source_split_6762;

  corral_source_split_6762:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 14);
    goto $bb3;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_6738;

  corral_source_split_6738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1451} vslice_dummy_var_252 := no_printk.ref.ref(.str.138, $p1);
    goto corral_source_split_6739;

  corral_source_split_6739:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb3;
}



const vmci_host_do_queuepair_setva: ref;

axiom vmci_host_do_queuepair_setva == $sub.ref(0, 769161);

procedure vmci_host_do_queuepair_setva($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.135, $M.23, $M.20, $M.21, $M.24, $M.25, $M.78, $M.77, $M.0, $M.136, $CurrAddr, $M.28, $M.45, $M.48, $M.47, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.96, $M.97, assertsPassed, $M.46, $M.29, $M.89, $M.98, $M.34, $M.30, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.31, $M.87, $M.69, $M.35, $M.90, $M.86, $M.91, $M.18, $M.44, $M.32, $M.108, $M.110, $M.112, $M.114, $M.70, $M.33, $M.26, $M.19, $M.27, $M.2, $M.3, $M.109, $M.111, $M.113, $M.115, $M.6, $M.13, $M.36, $M.38, $M.40, $M.42;



implementation vmci_host_do_queuepair_setva($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $p25: ref;
  var $i26: i64;
  var $i27: i32;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $i34: i32;
  var $i28: i32;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $i38: i32;
  var $i9: i32;
  var vslice_dummy_var_253: i32;
  var vslice_dummy_var_254: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1469} $p3 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    goto corral_source_split_6834;

  corral_source_split_6834:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p2);
    goto corral_source_split_6835;

  corral_source_split_6835:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(12, 1));
    goto corral_source_split_6836;

  corral_source_split_6836:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_6837;

  corral_source_split_6837:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 11);
    goto corral_source_split_6838;

  corral_source_split_6838:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(8, 1));
    goto corral_source_split_6845;

  corral_source_split_6845:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_6846;

  corral_source_split_6846:
    assume {:verifier.code 0} true;
    $i12 := $sle.i32($i11, 720895);
    goto corral_source_split_6847;

  corral_source_split_6847:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p3);
    goto corral_source_split_6852;

  corral_source_split_6852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1472} $i15 := copy_from_user($p14, $p2, 32);
    call {:si_unique_call 1473} {:cexpr "tmp"} boogie_si_record_i64($i15);
    goto corral_source_split_6853;

  corral_source_split_6853:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_6854;

  corral_source_split_6854:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_6858;

  corral_source_split_6858:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.0, $p17);
    goto corral_source_split_6859;

  corral_source_split_6859:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_6860;

  corral_source_split_6860:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i19 == 1);
    goto corral_source_split_6872;

  corral_source_split_6872:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_6873;

  corral_source_split_6873:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(0, 1));
    goto corral_source_split_6874;

  corral_source_split_6874:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_6875;

  corral_source_split_6875:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p29);
    goto corral_source_split_6876;

  corral_source_split_6876:
    assume {:verifier.code 0} true;
    $i33 := $load.i64($M.0, $p32);
    goto corral_source_split_6877;

  corral_source_split_6877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1476} $i34 := vmci_qp_broker_unmap($i33, $p31, 0);
    goto SeqInstr_406, SeqInstr_407;

  SeqInstr_407:
    assume assertsPassed;
    goto SeqInstr_408;

  SeqInstr_408:
    call {:si_unique_call 1477} {:cexpr "result"} boogie_si_record_i32($i34);
    assume {:verifier.code 0} true;
    $i28 := $i34;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_6879;

  corral_source_split_6879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1478} __might_fault(.str.46, 559);
    goto corral_source_split_6880;

  corral_source_split_6880:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(28, 1));
    call {:si_unique_call 1479} $i36 := devirtbounce.14(0, $i28, $p35);
    call {:si_unique_call 1480} {:cexpr "__ret_pu"} boogie_si_record_i32($i36);
    goto corral_source_split_6881;

  corral_source_split_6881:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_6883;

  corral_source_split_6883:
    assume {:verifier.code 0} true;
    $i38 := (if $i37 == 1 then $sub.i32(0, 14) else 0);
    goto corral_source_split_6884;

  corral_source_split_6884:
    assume {:verifier.code 0} true;
    $i9 := $i38;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6843;

  corral_source_split_6843:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  SeqInstr_406:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i19 == 1;
    goto corral_source_split_6862;

  corral_source_split_6862:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_6863;

  corral_source_split_6863:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(0, 1));
    goto corral_source_split_6864;

  corral_source_split_6864:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_6865;

  corral_source_split_6865:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_6866;

  corral_source_split_6866:
    assume {:verifier.code 0} true;
    $i24 := $load.i64($M.0, $p23);
    goto corral_source_split_6867;

  corral_source_split_6867:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p20);
    goto corral_source_split_6868;

  corral_source_split_6868:
    assume {:verifier.code 0} true;
    $i26 := $load.i64($M.0, $p25);
    goto corral_source_split_6869;

  corral_source_split_6869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1474} $i27 := vmci_qp_broker_map($i26, $p22, $i24);
    goto SeqInstr_403, SeqInstr_404;

  SeqInstr_404:
    assume assertsPassed;
    goto SeqInstr_405;

  SeqInstr_405:
    call {:si_unique_call 1475} {:cexpr "result"} boogie_si_record_i32($i27);
    goto corral_source_split_6870;

  corral_source_split_6870:
    assume {:verifier.code 0} true;
    $i28 := $i27;
    goto $bb13;

  SeqInstr_403:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_6856;

  corral_source_split_6856:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 14);
    goto $bb3;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_6849;

  corral_source_split_6849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1471} vslice_dummy_var_254 := no_printk.ref.ref(.str.145, $p1);
    goto corral_source_split_6850;

  corral_source_split_6850:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_6840;

  corral_source_split_6840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1470} vslice_dummy_var_253 := no_printk.ref.ref(.str.138, $p1);
    goto corral_source_split_6841;

  corral_source_split_6841:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 22);
    goto $bb3;
}



const vmci_host_do_queuepair_setpf: ref;

axiom vmci_host_do_queuepair_setpf == $sub.ref(0, 770193);

procedure vmci_host_do_queuepair_setpf($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.134, $M.23, $M.20, $M.21, $M.24, $M.25, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.0, $M.96, $M.97, $CurrAddr, $M.28, $M.45, $M.48, $M.47, $M.98, assertsPassed, $M.29, $M.34, $M.30, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.31, $M.87, $M.69, $M.35, $M.44, $M.32, $M.108, $M.110, $M.112, $M.114, $M.70, $M.33, $M.2, $M.3, $M.109, $M.111, $M.113, $M.115, $M.6, $M.13, $M.18, $M.19, $M.36, $M.38, $M.40, $M.42, $M.26, $M.27, $M.89, $M.46, $M.90, $M.86, $M.91;



implementation vmci_host_do_queuepair_setpf($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i32;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $p28: ref;
  var $i29: i64;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $i14: i32;
  var vslice_dummy_var_255: i32;
  var vslice_dummy_var_256: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1481} $p3 := $alloc($mul.ref(64, $zext.i32.i64(1)));
    goto corral_source_split_6886;

  corral_source_split_6886:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p2);
    goto corral_source_split_6887;

  corral_source_split_6887:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(8, 1));
    goto corral_source_split_6888;

  corral_source_split_6888:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_6889;

  corral_source_split_6889:
    assume {:verifier.code 0} true;
    $i7 := $sle.i32($i6, 589823);
    goto corral_source_split_6890;

  corral_source_split_6890:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i7 == 1);
    goto corral_source_split_6896;

  corral_source_split_6896:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(8, 1));
    goto corral_source_split_6897;

  corral_source_split_6897:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_6898;

  corral_source_split_6898:
    assume {:verifier.code 0} true;
    $i10 := $sgt.i32($i9, 720895);
    goto corral_source_split_6899;

  corral_source_split_6899:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(12, 1));
    goto corral_source_split_6903;

  corral_source_split_6903:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_6904;

  corral_source_split_6904:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 11);
    goto corral_source_split_6905;

  corral_source_split_6905:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p3);
    goto corral_source_split_6910;

  corral_source_split_6910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1484} $i20 := copy_from_user($p19, $p2, 64);
    call {:si_unique_call 1485} {:cexpr "tmp"} boogie_si_record_i64($i20);
    goto corral_source_split_6911;

  corral_source_split_6911:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_6912;

  corral_source_split_6912:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1486} __might_fault(.str.46, 601);
    goto corral_source_split_6916;

  corral_source_split_6916:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p4, $mul.ref(0, 64)), $mul.ref(40, 1));
    call {:si_unique_call 1487} $i23 := devirtbounce.14(0, 0, $p22);
    call {:si_unique_call 1488} {:cexpr "__ret_pu"} boogie_si_record_i32($i23);
    goto corral_source_split_6917;

  corral_source_split_6917:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_6919;

  corral_source_split_6919:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_6923;

  corral_source_split_6923:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_6924;

  corral_source_split_6924:
    assume {:verifier.code 0} true;
    $i27 := $load.i64($M.0, $p26);
    goto corral_source_split_6925;

  corral_source_split_6925:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_6926;

  corral_source_split_6926:
    assume {:verifier.code 0} true;
    $i29 := $load.i64($M.0, $p28);
    goto corral_source_split_6927;

  corral_source_split_6927:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(0, 1));
    goto corral_source_split_6928;

  corral_source_split_6928:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_6929;

  corral_source_split_6929:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p25);
    goto corral_source_split_6930;

  corral_source_split_6930:
    assume {:verifier.code 0} true;
    $i33 := $load.i64($M.0, $p32);
    goto corral_source_split_6931;

  corral_source_split_6931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1489} $i34 := vmci_qp_broker_set_page_store($i33, $i27, $i29, $p31);
    goto SeqInstr_409, SeqInstr_410;

  SeqInstr_410:
    assume assertsPassed;
    goto SeqInstr_411;

  SeqInstr_411:
    call {:si_unique_call 1490} {:cexpr "result"} boogie_si_record_i32($i34);
    goto corral_source_split_6932;

  corral_source_split_6932:
    assume {:verifier.code 0} true;
    $i35 := $slt.i32($i34, 0);
    goto corral_source_split_6933;

  corral_source_split_6933:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_6901;

  corral_source_split_6901:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb18:
    assume $i35 == 1;
    goto corral_source_split_6935;

  corral_source_split_6935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1491} __might_fault(.str.46, 615);
    goto corral_source_split_6936;

  corral_source_split_6936:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p4, $mul.ref(0, 64)), $mul.ref(40, 1));
    call {:si_unique_call 1492} $i37 := devirtbounce.14(0, $i34, $p36);
    call {:si_unique_call 1493} {:cexpr "__ret_pu___0"} boogie_si_record_i32($i37);
    goto corral_source_split_6937;

  corral_source_split_6937:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_6939;

  corral_source_split_6939:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb21:
    assume $i38 == 1;
    goto corral_source_split_6941;

  corral_source_split_6941:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 14);
    goto $bb6;

  SeqInstr_409:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i24 == 1;
    goto corral_source_split_6921;

  corral_source_split_6921:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 14);
    goto $bb6;

  $bb11:
    assume $i21 == 1;
    goto corral_source_split_6914;

  corral_source_split_6914:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 14);
    goto $bb6;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_6907;

  corral_source_split_6907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1483} vslice_dummy_var_256 := no_printk.ref.ref(.str.138, $p1);
    goto corral_source_split_6908;

  corral_source_split_6908:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 22);
    goto $bb6;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(8, 1));
    goto corral_source_split_6892;

  corral_source_split_6892:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_6893;

  corral_source_split_6893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1482} vslice_dummy_var_255 := no_printk.ref.ref.i32(.str.146, $p1, $i12);
    goto corral_source_split_6894;

  corral_source_split_6894:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb2;
}



const vmci_host_do_qp_detach: ref;

axiom vmci_host_do_qp_detach == $sub.ref(0, 771225);

procedure vmci_host_do_qp_detach($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.18, $M.0, $M.23, $M.20, $M.21, $M.24, $M.25, $M.26, $M.19, $M.27, $CurrAddr, $M.28, $M.45, $M.48, $M.47, $M.89, $M.29, $M.33, assertsPassed, $M.46, $M.90, $M.86, $M.91, $M.34, $M.30, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.31, $M.87, $M.69, $M.35, $M.44, $M.32, $M.108, $M.110, $M.112, $M.114, $M.70, $M.2, $M.3, $M.109, $M.111, $M.113, $M.115, $M.6, $M.13, $M.36, $M.38, $M.40, $M.42;



implementation vmci_host_do_qp_detach($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i9: i32;
  var vslice_dummy_var_257: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1494} $p3 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_6943;

  corral_source_split_6943:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p2);
    goto corral_source_split_6944;

  corral_source_split_6944:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(12, 1));
    goto corral_source_split_6945;

  corral_source_split_6945:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_6946;

  corral_source_split_6946:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 11);
    goto corral_source_split_6947;

  corral_source_split_6947:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p3);
    goto corral_source_split_6954;

  corral_source_split_6954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1496} $i11 := copy_from_user($p10, $p2, 16);
    call {:si_unique_call 1497} {:cexpr "tmp"} boogie_si_record_i64($i11);
    goto corral_source_split_6955;

  corral_source_split_6955:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_6956;

  corral_source_split_6956:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6960;

  corral_source_split_6960:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(0, 1));
    goto corral_source_split_6961;

  corral_source_split_6961:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_6962;

  corral_source_split_6962:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p13);
    goto corral_source_split_6963;

  corral_source_split_6963:
    assume {:verifier.code 0} true;
    $i17 := $load.i64($M.0, $p16);
    goto corral_source_split_6964;

  corral_source_split_6964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1498} $i18 := vmci_qp_broker_detach($i17, $p15);
    goto SeqInstr_412, SeqInstr_413;

  SeqInstr_413:
    assume assertsPassed;
    goto SeqInstr_414;

  SeqInstr_414:
    call {:si_unique_call 1499} {:cexpr "result"} boogie_si_record_i32($i18);
    goto corral_source_split_6965;

  corral_source_split_6965:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 0);
    goto corral_source_split_6966;

  corral_source_split_6966:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i23 := $i18;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_6975;

  corral_source_split_6975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1500} __might_fault(.str.46, 663);
    goto corral_source_split_6976;

  corral_source_split_6976:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(8, 1));
    call {:si_unique_call 1501} $i25 := devirtbounce.14(0, $i23, $p24);
    call {:si_unique_call 1502} {:cexpr "__ret_pu"} boogie_si_record_i32($i25);
    goto corral_source_split_6977;

  corral_source_split_6977:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_6979;

  corral_source_split_6979:
    assume {:verifier.code 0} true;
    $i27 := (if $i26 == 1 then $sub.i32(0, 14) else 0);
    goto corral_source_split_6980;

  corral_source_split_6980:
    assume {:verifier.code 0} true;
    $i9 := $i27;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6952;

  corral_source_split_6952:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb8:
    assume $i19 == 1;
    goto corral_source_split_6968;

  corral_source_split_6968:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(8, 1));
    goto corral_source_split_6969;

  corral_source_split_6969:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_6970;

  corral_source_split_6970:
    assume {:verifier.code 0} true;
    $i22 := $sle.i32($i21, 720895);
    goto corral_source_split_6971;

  corral_source_split_6971:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb10;

  $bb11:
    assume $i22 == 1;
    goto corral_source_split_6973;

  corral_source_split_6973:
    assume {:verifier.code 0} true;
    $i23 := 3;
    goto $bb13;

  SeqInstr_412:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_6958;

  corral_source_split_6958:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 14);
    goto $bb3;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_6949;

  corral_source_split_6949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1495} vslice_dummy_var_257 := no_printk.ref.ref(.str.138, $p1);
    goto corral_source_split_6950;

  corral_source_split_6950:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 22);
    goto $bb3;
}



const vmci_host_do_ctx_add_notify: ref;

axiom vmci_host_do_ctx_add_notify == $sub.ref(0, 772257);

procedure vmci_host_do_ctx_add_notify($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.20, $M.21, $CurrAddr, $M.2, $M.3, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.31, $M.87, $M.6, $M.13, $M.18, $M.19, $M.69, $M.70, $M.23, $M.24, $M.25, $M.26, $M.27, $M.108, $M.110, $M.112, $M.114, $M.28, $M.33, assertsPassed, $M.29, $M.45, $M.48, $M.47, $M.89, $M.109, $M.111, $M.113, $M.115, $M.34, $M.30, $M.35, $M.46, $M.90, $M.86, $M.91, $M.44, $M.32, $M.36, $M.38, $M.40, $M.42;



implementation vmci_host_do_ctx_add_notify($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i9: i32;
  var vslice_dummy_var_258: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1503} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_6982;

  corral_source_split_6982:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p2);
    goto corral_source_split_6983;

  corral_source_split_6983:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(12, 1));
    goto corral_source_split_6984;

  corral_source_split_6984:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_6985;

  corral_source_split_6985:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 11);
    goto corral_source_split_6986;

  corral_source_split_6986:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p3);
    goto corral_source_split_6993;

  corral_source_split_6993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1505} $i11 := copy_from_user($p10, $p2, 8);
    call {:si_unique_call 1506} {:cexpr "tmp"} boogie_si_record_i64($i11);
    goto corral_source_split_6994;

  corral_source_split_6994:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_6995;

  corral_source_split_6995:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(0, 1));
    goto corral_source_split_6999;

  corral_source_split_6999:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_7000;

  corral_source_split_7000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1507} $i15 := vmci_ctx_get_id($p14);
    call {:si_unique_call 1508} {:cexpr "cid"} boogie_si_record_i32($i15);
    goto corral_source_split_7001;

  corral_source_split_7001:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_7002;

  corral_source_split_7002:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_7003;

  corral_source_split_7003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1509} $i18 := vmci_ctx_add_notification($i15, $i17);
    goto SeqInstr_415, SeqInstr_416;

  SeqInstr_416:
    assume assertsPassed;
    goto SeqInstr_417;

  SeqInstr_417:
    call {:si_unique_call 1510} {:cexpr "result"} boogie_si_record_i32($i18);
    goto corral_source_split_7004;

  corral_source_split_7004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1511} __might_fault(.str.46, 686);
    goto corral_source_split_7005;

  corral_source_split_7005:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(4, 1));
    call {:si_unique_call 1512} $i20 := devirtbounce.14(0, $i18, $p19);
    call {:si_unique_call 1513} {:cexpr "__ret_pu"} boogie_si_record_i32($i20);
    goto corral_source_split_7006;

  corral_source_split_7006:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_7008;

  corral_source_split_7008:
    assume {:verifier.code 0} true;
    $i22 := (if $i21 == 1 then $sub.i32(0, 14) else 0);
    goto corral_source_split_7009;

  corral_source_split_7009:
    assume {:verifier.code 0} true;
    $i9 := $i22;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6991;

  corral_source_split_6991:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  SeqInstr_415:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_6997;

  corral_source_split_6997:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 14);
    goto $bb3;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_6988;

  corral_source_split_6988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1504} vslice_dummy_var_258 := no_printk.ref.ref(.str.138, $p1);
    goto corral_source_split_6989;

  corral_source_split_6989:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 22);
    goto $bb3;
}



const vmci_host_do_ctx_remove_notify: ref;

axiom vmci_host_do_ctx_remove_notify == $sub.ref(0, 773289);

procedure vmci_host_do_ctx_remove_notify($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.133, $M.20, $M.21, $CurrAddr, $M.2, $M.3, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.31, $M.87, $M.6, $M.13, $M.18, $M.19, $M.69, $M.70, $M.23, $M.24, $M.25, $M.26, $M.27, $M.108, $M.110, $M.112, $M.114, $M.28, $M.33, assertsPassed, $M.29, $M.45, $M.48, $M.47, $M.89, $M.109, $M.111, $M.113, $M.115, $M.34, $M.30, $M.35, $M.46, $M.90, $M.86, $M.91, $M.44, $M.32, $M.36, $M.38, $M.40, $M.42;



implementation vmci_host_do_ctx_remove_notify($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i9: i32;
  var vslice_dummy_var_259: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1514} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_7011;

  corral_source_split_7011:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p2);
    goto corral_source_split_7012;

  corral_source_split_7012:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(12, 1));
    goto corral_source_split_7013;

  corral_source_split_7013:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_7014;

  corral_source_split_7014:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 11);
    goto corral_source_split_7015;

  corral_source_split_7015:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p3);
    goto corral_source_split_7022;

  corral_source_split_7022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1516} $i11 := copy_from_user($p10, $p2, 8);
    call {:si_unique_call 1517} {:cexpr "tmp"} boogie_si_record_i64($i11);
    goto corral_source_split_7023;

  corral_source_split_7023:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_7024;

  corral_source_split_7024:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(0, 1));
    goto corral_source_split_7028;

  corral_source_split_7028:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_7029;

  corral_source_split_7029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1518} $i15 := vmci_ctx_get_id($p14);
    call {:si_unique_call 1519} {:cexpr "cid"} boogie_si_record_i32($i15);
    goto corral_source_split_7030;

  corral_source_split_7030:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_7031;

  corral_source_split_7031:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_7032;

  corral_source_split_7032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1520} $i18 := vmci_ctx_remove_notification($i15, $i17);
    goto SeqInstr_418, SeqInstr_419;

  SeqInstr_419:
    assume assertsPassed;
    goto SeqInstr_420;

  SeqInstr_420:
    call {:si_unique_call 1521} {:cexpr "result"} boogie_si_record_i32($i18);
    goto corral_source_split_7033;

  corral_source_split_7033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1522} __might_fault(.str.46, 710);
    goto corral_source_split_7034;

  corral_source_split_7034:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(4, 1));
    call {:si_unique_call 1523} $i20 := devirtbounce.14(0, $i18, $p19);
    call {:si_unique_call 1524} {:cexpr "__ret_pu"} boogie_si_record_i32($i20);
    goto corral_source_split_7035;

  corral_source_split_7035:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_7037;

  corral_source_split_7037:
    assume {:verifier.code 0} true;
    $i22 := (if $i21 == 1 then $sub.i32(0, 14) else 0);
    goto corral_source_split_7038;

  corral_source_split_7038:
    assume {:verifier.code 0} true;
    $i9 := $i22;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7020;

  corral_source_split_7020:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  SeqInstr_418:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_7026;

  corral_source_split_7026:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 14);
    goto $bb3;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_7017;

  corral_source_split_7017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1515} vslice_dummy_var_259 := no_printk.ref.ref(.str.138, $p1);
    goto corral_source_split_7018;

  corral_source_split_7018:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 22);
    goto $bb3;
}



const vmci_host_do_ctx_get_cpt_state: ref;

axiom vmci_host_do_ctx_get_cpt_state == $sub.ref(0, 774321);

procedure vmci_host_do_ctx_get_cpt_state($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.124, $CurrAddr, $M.2, $M.3, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.31, $M.87, $M.6, $M.13, $M.20, $M.21, $M.18, $M.19, $M.69, $M.70, $M.23, $M.24, $M.25, $M.26, $M.27, $M.108, $M.110, $M.112, $M.114, $M.28, $M.33, assertsPassed, $M.29, $M.45, $M.48, $M.47, $M.89, $M.109, $M.111, $M.113, $M.115, $M.34, $M.30, $M.35, $M.46, $M.90, $M.86, $M.91, $M.44, $M.32, $M.36, $M.38, $M.40, $M.42;



implementation vmci_host_do_ctx_get_cpt_state($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i28: i64;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i64;
  var $i34: i64;
  var $i35: i32;
  var $p36: ref;
  var $i37: i1;
  var $p38: ref;
  var $i39: i64;
  var $i40: i1;
  var $i41: i32;
  var $i9: i32;
  var vslice_dummy_var_260: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1525} $p3 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1526} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_7040;

  corral_source_split_7040:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(12, 1));
    goto corral_source_split_7041;

  corral_source_split_7041:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_7042;

  corral_source_split_7042:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 11);
    goto corral_source_split_7043;

  corral_source_split_7043:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p3);
    goto corral_source_split_7050;

  corral_source_split_7050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1528} $i11 := copy_from_user($p10, $p2, 24);
    call {:si_unique_call 1529} {:cexpr "tmp"} boogie_si_record_i64($i11);
    goto corral_source_split_7051;

  corral_source_split_7051:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_7052;

  corral_source_split_7052:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(0, 1));
    goto corral_source_split_7056;

  corral_source_split_7056:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_7057;

  corral_source_split_7057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1530} $i15 := vmci_ctx_get_id($p14);
    call {:si_unique_call 1531} {:cexpr "cid"} boogie_si_record_i32($i15);
    goto corral_source_split_7058;

  corral_source_split_7058:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_7059;

  corral_source_split_7059:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_7060;

  corral_source_split_7060:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_7061;

  corral_source_split_7061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1532} $i19 := vmci_ctx_get_chkpt_state($i15, $i17, $p18, $p4);
    goto SeqInstr_421, SeqInstr_422;

  SeqInstr_422:
    assume assertsPassed;
    goto SeqInstr_423;

  SeqInstr_423:
    goto corral_source_split_7062;

  corral_source_split_7062:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_7063;

  corral_source_split_7063:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, $i19);
    goto corral_source_split_7064;

  corral_source_split_7064:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_7065;

  corral_source_split_7065:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_7066;

  corral_source_split_7066:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 0);
    goto corral_source_split_7067;

  corral_source_split_7067:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p3);
    goto corral_source_split_7090;

  corral_source_split_7090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1537} $i39 := copy_to_user($p2, $p38, 24);
    call {:si_unique_call 1538} {:cexpr "tmp___1"} boogie_si_record_i64($i39);
    goto corral_source_split_7091;

  corral_source_split_7091:
    assume {:verifier.code 0} true;
    $i40 := $ne.i64($i39, 0);
    goto corral_source_split_7092;

  corral_source_split_7092:
    assume {:verifier.code 0} true;
    $i41 := (if $i40 == 1 then $sub.i32(0, 14) else 0);
    goto corral_source_split_7093;

  corral_source_split_7093:
    assume {:verifier.code 0} true;
    $i9 := $i41;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7048;

  corral_source_split_7048:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb8:
    assume $i23 == 1;
    goto corral_source_split_7069;

  corral_source_split_7069:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_7070;

  corral_source_split_7070:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_7071;

  corral_source_split_7071:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_7072;

  corral_source_split_7072:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb10;

  $bb11:
    assume $i26 == 1;
    goto corral_source_split_7074;

  corral_source_split_7074:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_7075;

  corral_source_split_7075:
    assume {:verifier.code 0} true;
    $i28 := $load.i64($M.0, $p27);
    goto corral_source_split_7076;

  corral_source_split_7076:
    assume {:verifier.code 0} true;
    $p29 := $i2p.i64.ref($i28);
    goto corral_source_split_7077;

  corral_source_split_7077:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.124, $p4);
    goto corral_source_split_7078;

  corral_source_split_7078:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_7079;

  corral_source_split_7079:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_7080;

  corral_source_split_7080:
    assume {:verifier.code 0} true;
    $i33 := $zext.i32.i64($i32);
    goto corral_source_split_7081;

  corral_source_split_7081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1533} $i34 := copy_to_user($p29, $p30, $i33);
    call {:si_unique_call 1534} {:cexpr "tmp___0"} boogie_si_record_i64($i34);
    goto corral_source_split_7082;

  corral_source_split_7082:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i64.i32($i34);
    call {:si_unique_call 1535} {:cexpr "retval"} boogie_si_record_i32($i35);
    goto corral_source_split_7083;

  corral_source_split_7083:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.124, $p4);
    goto corral_source_split_7084;

  corral_source_split_7084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1536} kfree($p36);
    goto corral_source_split_7085;

  corral_source_split_7085:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i35, 0);
    goto corral_source_split_7086;

  corral_source_split_7086:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i37 == 1;
    goto corral_source_split_7088;

  corral_source_split_7088:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 14);
    goto $bb3;

  SeqInstr_421:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_7054;

  corral_source_split_7054:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 14);
    goto $bb3;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_7045;

  corral_source_split_7045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1527} vslice_dummy_var_260 := no_printk.ref.ref(.str.138, $p1);
    goto corral_source_split_7046;

  corral_source_split_7046:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 22);
    goto $bb3;
}



const vmci_host_do_ctx_set_cpt_state: ref;

axiom vmci_host_do_ctx_set_cpt_state == $sub.ref(0, 775353);

procedure vmci_host_do_ctx_set_cpt_state($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.20, $M.21, $M.2, $M.3, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.31, $M.87, $M.6, $M.13, $M.18, $M.19, $M.69, $M.70, $M.23, $M.24, $M.25, $M.26, $M.27, $M.108, $M.110, $M.112, $M.114, $M.28, $M.33, assertsPassed, $M.29, $M.45, $M.48, $M.47, $M.89, $M.109, $M.111, $M.113, $M.115, $M.34, $M.30, $M.35, $M.46, $M.90, $M.86, $M.91, $M.44, $M.32, $M.36, $M.38, $M.40, $M.42;



implementation vmci_host_do_ctx_set_cpt_state($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $i13: i32;
  var $i14: i64;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $i19: i32;
  var $p21: ref;
  var $i22: i64;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i64;
  var $i27: i64;
  var $i28: i1;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;
  var $i34: i32;
  var $p35: ref;
  var $i36: i32;
  var $i37: i32;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $i41: i1;
  var $i42: i32;
  var $i29: i32;
  var $i8: i32;
  var vslice_dummy_var_261: i32;
  var vslice_dummy_var_262: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1539} $p3 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_7095;

  corral_source_split_7095:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(12, 1));
    goto corral_source_split_7096;

  corral_source_split_7096:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_7097;

  corral_source_split_7097:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 11);
    goto corral_source_split_7098;

  corral_source_split_7098:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p3);
    goto corral_source_split_7105;

  corral_source_split_7105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1541} $i10 := copy_from_user($p9, $p2, 24);
    call {:si_unique_call 1542} {:cexpr "tmp"} boogie_si_record_i64($i10);
    goto corral_source_split_7106;

  corral_source_split_7106:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_7107;

  corral_source_split_7107:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_7111;

  corral_source_split_7111:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_7112;

  corral_source_split_7112:
    assume {:verifier.code 0} true;
    $i14 := $zext.i32.i64($i13);
    goto corral_source_split_7113;

  corral_source_split_7113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1543} $p15 := kmalloc($i14, 208);
    goto corral_source_split_7114;

  corral_source_split_7114:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_7115;

  corral_source_split_7115:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i16, 0);
    goto corral_source_split_7116;

  corral_source_split_7116:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_7123;

  corral_source_split_7123:
    assume {:verifier.code 0} true;
    $i22 := $load.i64($M.0, $p21);
    goto corral_source_split_7124;

  corral_source_split_7124:
    assume {:verifier.code 0} true;
    $p23 := $i2p.i64.ref($i22);
    goto corral_source_split_7125;

  corral_source_split_7125:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_7126;

  corral_source_split_7126:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_7127;

  corral_source_split_7127:
    assume {:verifier.code 0} true;
    $i26 := $zext.i32.i64($i25);
    goto corral_source_split_7128;

  corral_source_split_7128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1545} $i27 := copy_from_user($p15, $p23, $i26);
    call {:si_unique_call 1546} {:cexpr "tmp___0"} boogie_si_record_i64($i27);
    goto corral_source_split_7129;

  corral_source_split_7129:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_7130;

  corral_source_split_7130:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(0, 1));
    goto corral_source_split_7137;

  corral_source_split_7137:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_7138;

  corral_source_split_7138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1548} $i32 := vmci_ctx_get_id($p31);
    call {:si_unique_call 1549} {:cexpr "cid"} boogie_si_record_i32($i32);
    goto corral_source_split_7139;

  corral_source_split_7139:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_7140;

  corral_source_split_7140:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_7141;

  corral_source_split_7141:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_7142;

  corral_source_split_7142:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_7143;

  corral_source_split_7143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1550} $i37 := vmci_ctx_set_chkpt_state($i32, $i34, $i36, $p15);
    goto SeqInstr_424, SeqInstr_425;

  SeqInstr_425:
    assume assertsPassed;
    goto SeqInstr_426;

  SeqInstr_426:
    goto corral_source_split_7144;

  corral_source_split_7144:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_7145;

  corral_source_split_7145:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p38, $i37);
    goto corral_source_split_7146;

  corral_source_split_7146:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p3);
    goto corral_source_split_7147;

  corral_source_split_7147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1551} $i40 := copy_to_user($p2, $p39, 24);
    call {:si_unique_call 1552} {:cexpr "tmp___1"} boogie_si_record_i64($i40);
    goto corral_source_split_7148;

  corral_source_split_7148:
    assume {:verifier.code 0} true;
    $i41 := $ne.i64($i40, 0);
    goto corral_source_split_7149;

  corral_source_split_7149:
    assume {:verifier.code 0} true;
    $i42 := (if $i41 == 1 then $sub.i32(0, 14) else 0);
    call {:si_unique_call 1553} {:cexpr "retval"} boogie_si_record_i32($i42);
    goto corral_source_split_7150;

  corral_source_split_7150:
    assume {:verifier.code 0} true;
    $i29 := $i42;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_7134;

  corral_source_split_7134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1547} kfree($p15);
    goto corral_source_split_7135;

  corral_source_split_7135:
    assume {:verifier.code 0} true;
    $i8 := $i29;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7103;

  corral_source_split_7103:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  SeqInstr_424:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i28 == 1;
    goto corral_source_split_7132;

  corral_source_split_7132:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 14);
    goto $bb13;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_7118;

  corral_source_split_7118:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_7119;

  corral_source_split_7119:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_7120;

  corral_source_split_7120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1544} vslice_dummy_var_262 := no_printk.ref.ref.i32(.str.147, $p1, $i19);
    goto corral_source_split_7121;

  corral_source_split_7121:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 12);
    goto $bb3;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_7109;

  corral_source_split_7109:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 14);
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_7100;

  corral_source_split_7100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1540} vslice_dummy_var_261 := no_printk.ref.ref(.str.138, $p1);
    goto corral_source_split_7101;

  corral_source_split_7101:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 22);
    goto $bb3;
}



const vmci_host_do_get_context_id: ref;

axiom vmci_host_do_get_context_id == $sub.ref(0, 776385);

procedure vmci_host_do_get_context_id($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation vmci_host_do_get_context_id($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7152;

  corral_source_split_7152:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_7153;

  corral_source_split_7153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1554} __might_fault(.str.46, 793);
    call {:si_unique_call 1555} $i4 := devirtbounce.14(0, 2, $p3);
    call {:si_unique_call 1556} {:cexpr "__ret_pu"} boogie_si_record_i32($i4);
    goto corral_source_split_7154;

  corral_source_split_7154:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_7156;

  corral_source_split_7156:
    assume {:verifier.code 0} true;
    $i6 := (if $i5 == 1 then $sub.i32(0, 14) else 0);
    goto corral_source_split_7157;

  corral_source_split_7157:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const vmci_host_do_set_notify: ref;

axiom vmci_host_do_set_notify == $sub.ref(0, 777417);

procedure vmci_host_do_set_notify($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.92, $M.93, $M.46, $M.96, $M.97, assertsPassed, $M.98;



implementation vmci_host_do_set_notify($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i32;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $i27: i32;
  var $i8: i32;
  var vslice_dummy_var_263: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1557} $p3 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_7159;

  corral_source_split_7159:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(12, 1));
    goto corral_source_split_7160;

  corral_source_split_7160:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_7161;

  corral_source_split_7161:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 11);
    goto corral_source_split_7162;

  corral_source_split_7162:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p3);
    goto corral_source_split_7169;

  corral_source_split_7169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1559} $i10 := copy_from_user($p9, $p2, 16);
    call {:si_unique_call 1560} {:cexpr "tmp"} boogie_si_record_i64($i10);
    goto corral_source_split_7170;

  corral_source_split_7170:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_7171;

  corral_source_split_7171:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_7175;

  corral_source_split_7175:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.0, $p12);
    goto corral_source_split_7176;

  corral_source_split_7176:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_7177;

  corral_source_split_7177:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i14 == 1);
    goto corral_source_split_7188;

  corral_source_split_7188:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(0, 1));
    goto corral_source_split_7189;

  corral_source_split_7189:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_7190;

  corral_source_split_7190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1562} vmci_ctx_unset_notify($p22);
    goto corral_source_split_7191;

  corral_source_split_7191:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_7192;

  corral_source_split_7192:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, 0);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p3);
    goto corral_source_split_7194;

  corral_source_split_7194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1563} $i25 := copy_to_user($p2, $p24, 16);
    call {:si_unique_call 1564} {:cexpr "tmp___0"} boogie_si_record_i64($i25);
    goto corral_source_split_7195;

  corral_source_split_7195:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_7196;

  corral_source_split_7196:
    assume {:verifier.code 0} true;
    $i27 := (if $i26 == 1 then $sub.i32(0, 14) else 0);
    goto corral_source_split_7197;

  corral_source_split_7197:
    assume {:verifier.code 0} true;
    $i8 := $i27;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7167;

  corral_source_split_7167:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_7179;

  corral_source_split_7179:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(0, 1));
    goto corral_source_split_7180;

  corral_source_split_7180:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_7181;

  corral_source_split_7181:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_7182;

  corral_source_split_7182:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.0, $p17);
    goto corral_source_split_7183;

  corral_source_split_7183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1561} $i19 := vmci_host_setup_notify($p16, $i18);
    goto SeqInstr_427, SeqInstr_428;

  SeqInstr_428:
    assume assertsPassed;
    goto SeqInstr_429;

  SeqInstr_429:
    goto corral_source_split_7184;

  corral_source_split_7184:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_7185;

  corral_source_split_7185:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, $i19);
    goto corral_source_split_7186;

  corral_source_split_7186:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_427:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_7173;

  corral_source_split_7173:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 14);
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_7164;

  corral_source_split_7164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1558} vslice_dummy_var_263 := no_printk.ref.ref(.str.138, $p1);
    goto corral_source_split_7165;

  corral_source_split_7165:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 22);
    goto $bb3;
}



const vmci_host_do_notify_resource: ref;

axiom vmci_host_do_notify_resource == $sub.ref(0, 778449);

procedure vmci_host_do_notify_resource($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.65, $M.45, $M.20, $M.21, $M.48, $M.129, $M.130, $M.19, $M.131, $M.132, $M.67, $M.30, $M.66, $M.68, $M.58, $CurrAddr, $M.32, $M.2, $M.3, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.31, $M.87, $M.33, $M.6, $M.13, $M.18, $M.69, $M.70, $M.36, $M.38, $M.40, $M.42, $M.23, $M.24, $M.25, $M.26, $M.27, $M.108, $M.110, $M.112, $M.114, $M.28, assertsPassed, $M.29, $M.47, $M.89, $M.109, $M.111, $M.113, $M.115, $M.34, $M.35, $M.46, $M.90, $M.86, $M.91, $M.44;



implementation vmci_host_do_notify_resource($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $i20: i16;
  var $i21: i32;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $p26: ref;
  var $i27: i16;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i32;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $i39: i32;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i64;
  var $i44: i32;
  var $p45: ref;
  var $p46: ref;
  var $i47: i16;
  var $i48: i32;
  var $p50: ref;
  var $p51: ref;
  var $i52: i64;
  var $i53: i1;
  var $i54: i32;
  var $i8: i32;
  var vslice_dummy_var_264: i32;
  var vslice_dummy_var_265: i32;
  var vslice_dummy_var_266: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1565} $p3 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_7199;

  corral_source_split_7199:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(8, 1));
    goto corral_source_split_7200;

  corral_source_split_7200:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_7201;

  corral_source_split_7201:
    assume {:verifier.code 0} true;
    $i6 := $sle.i32($i5, 655359);
    goto corral_source_split_7202;

  corral_source_split_7202:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(12, 1));
    goto corral_source_split_7209;

  corral_source_split_7209:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_7210;

  corral_source_split_7210:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 11);
    goto corral_source_split_7211;

  corral_source_split_7211:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p3);
    goto corral_source_split_7216;

  corral_source_split_7216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1568} $i14 := copy_from_user($p13, $p2, 16);
    call {:si_unique_call 1569} {:cexpr "tmp"} boogie_si_record_i64($i14);
    goto corral_source_split_7217;

  corral_source_split_7217:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_7218;

  corral_source_split_7218:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(0, 1));
    goto corral_source_split_7222;

  corral_source_split_7222:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_7223;

  corral_source_split_7223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1570} $i18 := vmci_ctx_get_id($p17);
    call {:si_unique_call 1571} {:cexpr "cid"} boogie_si_record_i32($i18);
    goto corral_source_split_7224;

  corral_source_split_7224:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(10, 1));
    goto corral_source_split_7225;

  corral_source_split_7225:
    assume {:verifier.code 0} true;
    $i20 := $load.i16($M.0, $p19);
    goto corral_source_split_7226;

  corral_source_split_7226:
    assume {:verifier.code 0} true;
    $i21 := $zext.i16.i32($i20);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i21, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i21, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i21, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(10, 1));
    goto corral_source_split_7266;

  corral_source_split_7266:
    assume {:verifier.code 0} true;
    $i47 := $load.i16($M.0, $p46);
    goto corral_source_split_7267;

  corral_source_split_7267:
    assume {:verifier.code 0} true;
    $i48 := $zext.i16.i32($i47);
    goto corral_source_split_7268;

  corral_source_split_7268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1577} vslice_dummy_var_266 := no_printk.ref.ref.i32(.str.152, $p1, $i48);
    goto corral_source_split_7269;

  corral_source_split_7269:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_7270;

  corral_source_split_7270:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p50, $sub.i32(0, 2));
    goto corral_source_split_7271;

  corral_source_split_7271:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p3);
    goto corral_source_split_7261;

  corral_source_split_7261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1575} $i52 := copy_to_user($p2, $p51, 16);
    call {:si_unique_call 1576} {:cexpr "tmp___0"} boogie_si_record_i64($i52);
    goto corral_source_split_7262;

  corral_source_split_7262:
    assume {:verifier.code 0} true;
    $i53 := $ne.i64($i52, 0);
    goto corral_source_split_7263;

  corral_source_split_7263:
    assume {:verifier.code 0} true;
    $i54 := (if $i53 == 1 then $sub.i32(0, 14) else 0);
    goto corral_source_split_7264;

  corral_source_split_7264:
    assume {:verifier.code 0} true;
    $i8 := $i54;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7207;

  corral_source_split_7207:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb16:
    assume $i24 == 1;
    goto corral_source_split_7236;

  corral_source_split_7236:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_7237;

  corral_source_split_7237:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_7238;

  corral_source_split_7238:
    assume {:verifier.code 0} true;
    $i43 := $load.i64($M.0, $p42);
    goto corral_source_split_7239;

  corral_source_split_7239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1573} $i44 := vmci_ctx_dbell_destroy($i18, $i43);
    goto SeqInstr_433, SeqInstr_434;

  SeqInstr_434:
    assume assertsPassed;
    goto SeqInstr_435;

  SeqInstr_435:
    goto corral_source_split_7240;

  corral_source_split_7240:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_7241;

  corral_source_split_7241:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p45, $i44);
    goto corral_source_split_7242;

  corral_source_split_7242:
    assume {:verifier.code 0} true;
    goto $bb24;

  SeqInstr_433:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i23 == 1;
    goto corral_source_split_7228;

  corral_source_split_7228:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_7229;

  corral_source_split_7229:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_7230;

  corral_source_split_7230:
    assume {:verifier.code 0} true;
    $i38 := $load.i64($M.0, $p37);
    goto corral_source_split_7231;

  corral_source_split_7231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1572} $i39 := vmci_ctx_dbell_create($i18, $i38);
    goto SeqInstr_430, SeqInstr_431;

  SeqInstr_431:
    assume assertsPassed;
    goto SeqInstr_432;

  SeqInstr_432:
    goto corral_source_split_7232;

  corral_source_split_7232:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_7233;

  corral_source_split_7233:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p40, $i39);
    goto corral_source_split_7234;

  corral_source_split_7234:
    assume {:verifier.code 0} true;
    goto $bb24;

  SeqInstr_430:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i21, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb18;

  $bb19:
    assume $i25 == 1;
    goto corral_source_split_7244;

  corral_source_split_7244:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_7245;

  corral_source_split_7245:
    assume {:verifier.code 0} true;
    $i27 := $load.i16($M.0, $p26);
    goto corral_source_split_7246;

  corral_source_split_7246:
    assume {:verifier.code 0} true;
    $i28 := $zext.i16.i32($i27);
    goto corral_source_split_7247;

  corral_source_split_7247:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 1);
    goto corral_source_split_7248;

  corral_source_split_7248:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i29 == 1);
    goto corral_source_split_7258;

  corral_source_split_7258:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_7259;

  corral_source_split_7259:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p35, $sub.i32(0, 20));
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb21:
    assume $i29 == 1;
    goto corral_source_split_7250;

  corral_source_split_7250:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_7251;

  corral_source_split_7251:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_7252;

  corral_source_split_7252:
    assume {:verifier.code 0} true;
    $i32 := $load.i64($M.0, $p31);
    goto corral_source_split_7253;

  corral_source_split_7253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1574} $i33 := vmci_ctx_notify_dbell($i18, $i32, 0);
    goto SeqInstr_436, SeqInstr_437;

  SeqInstr_437:
    assume assertsPassed;
    goto SeqInstr_438;

  SeqInstr_438:
    goto corral_source_split_7254;

  corral_source_split_7254:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_7255;

  corral_source_split_7255:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, $i33);
    goto corral_source_split_7256;

  corral_source_split_7256:
    assume {:verifier.code 0} true;
    goto $bb23;

  SeqInstr_436:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_7220;

  corral_source_split_7220:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 14);
    goto $bb3;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_7213;

  corral_source_split_7213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1567} vslice_dummy_var_265 := no_printk.ref.ref(.str.138, $p1);
    goto corral_source_split_7214;

  corral_source_split_7214:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_7204;

  corral_source_split_7204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1566} vslice_dummy_var_264 := no_printk.ref.ref(.str.151, $p1);
    goto corral_source_split_7205;

  corral_source_split_7205:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 22);
    goto $bb3;
}



const vmci_host_do_recv_notifications: ref;

axiom vmci_host_do_recv_notifications == $sub.ref(0, 779481);

procedure vmci_host_do_recv_notifications($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.125, $M.0, $M.126, $M.127, $M.128, $M.45, $M.20, $M.21, $M.48, $CurrAddr, $M.2, $M.3, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.31, $M.87, $M.6, $M.13, $M.18, $M.19, $M.69, $M.70, $M.23, $M.24, $M.25, $M.26, $M.27, $M.108, $M.110, $M.112, $M.114, $M.28, $M.33, assertsPassed, $M.29, $M.47, $M.89, $M.109, $M.111, $M.113, $M.115, $M.34, $M.30, $M.35, $M.46, $M.90, $M.86, $M.91, $M.44, $M.32, $M.36, $M.38, $M.40, $M.42;



implementation vmci_host_do_recv_notifications($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i32;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $i40: i64;
  var $i41: i1;
  var $i42: i32;
  var $p43: ref;
  var $i44: i64;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i32;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $i52: i1;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $i56: i64;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i32;
  var $p61: ref;
  var $i62: i32;
  var $i63: i1;
  var $p64: ref;
  var $i65: i64;
  var $i66: i1;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $i70: i32;
  var $i71: i1;
  var $i73: i32;
  var $i74: i1;
  var $i72: i1;
  var $i75: i32;
  var $i11: i32;
  var vslice_dummy_var_267: i32;
  var vslice_dummy_var_268: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1578} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1579} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1580} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1581} $p6 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_7273;

  corral_source_split_7273:
    assume {:verifier.code 0} true;
    $M.125 := $store.i32($M.125, $p6, 0);
    goto corral_source_split_7274;

  corral_source_split_7274:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(12, 1));
    goto corral_source_split_7275;

  corral_source_split_7275:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_7276;

  corral_source_split_7276:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 11);
    goto corral_source_split_7277;

  corral_source_split_7277:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(8, 1));
    goto corral_source_split_7284;

  corral_source_split_7284:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_7285;

  corral_source_split_7285:
    assume {:verifier.code 0} true;
    $i14 := $sle.i32($i13, 655359);
    goto corral_source_split_7286;

  corral_source_split_7286:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p3);
    goto corral_source_split_7291;

  corral_source_split_7291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1584} $i17 := copy_from_user($p16, $p2, 40);
    call {:si_unique_call 1585} {:cexpr "tmp"} boogie_si_record_i64($i17);
    goto corral_source_split_7292;

  corral_source_split_7292:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_7293;

  corral_source_split_7293:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7297;

  corral_source_split_7297:
    assume {:verifier.code 0} true;
    $i20 := $load.i64($M.0, $p19);
    goto corral_source_split_7298;

  corral_source_split_7298:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_7299;

  corral_source_split_7299:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7306;

  corral_source_split_7306:
    assume {:verifier.code 0} true;
    $i26 := $load.i64($M.0, $p25);
    goto corral_source_split_7307;

  corral_source_split_7307:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_7308;

  corral_source_split_7308:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(0, 1));
    goto corral_source_split_7315;

  corral_source_split_7315:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_7316;

  corral_source_split_7316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1586} $i33 := vmci_ctx_get_id($p32);
    call {:si_unique_call 1587} {:cexpr "cid"} boogie_si_record_i32($i33);
    goto corral_source_split_7317;

  corral_source_split_7317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1588} $i34 := vmci_ctx_rcv_notifications_get($i33, $p4, $p5);
    goto SeqInstr_439, SeqInstr_440;

  SeqInstr_440:
    assume assertsPassed;
    goto SeqInstr_441;

  SeqInstr_441:
    goto corral_source_split_7318;

  corral_source_split_7318:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7319;

  corral_source_split_7319:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p35, $i34);
    goto corral_source_split_7320;

  corral_source_split_7320:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7321;

  corral_source_split_7321:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_7322;

  corral_source_split_7322:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_7323;

  corral_source_split_7323:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7331;

  corral_source_split_7331:
    assume {:verifier.code 0} true;
    $i44 := $load.i64($M.0, $p43);
    goto corral_source_split_7332;

  corral_source_split_7332:
    assume {:verifier.code 0} true;
    $p45 := $i2p.i64.ref($i44);
    goto corral_source_split_7333;

  corral_source_split_7333:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7334;

  corral_source_split_7334:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.126, $p4);
    goto corral_source_split_7335;

  corral_source_split_7335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1591} $i48 := drv_cp_harray_to_user($p45, $p46, $p47, $p6);
    goto corral_source_split_7336;

  corral_source_split_7336:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7337;

  corral_source_split_7337:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p49, $i48);
    goto corral_source_split_7338;

  corral_source_split_7338:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7339;

  corral_source_split_7339:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    goto corral_source_split_7340;

  corral_source_split_7340:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i51, 0);
    goto corral_source_split_7341;

  corral_source_split_7341:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i52 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.125, $p6);
    goto corral_source_split_7357;

  corral_source_split_7357:
    assume {:verifier.code 0} true;
    $i63 := $eq.i32($i62, 0);
    goto corral_source_split_7358;

  corral_source_split_7358:
    assume {:verifier.code 0} true;
    assume {:branchcond $i63} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.126, $p4);
    goto corral_source_split_7368;

  corral_source_split_7368:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.127, $p5);
    goto corral_source_split_7369;

  corral_source_split_7369:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7370;

  corral_source_split_7370:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.0, $p69);
    goto corral_source_split_7371;

  corral_source_split_7371:
    assume {:verifier.code 0} true;
    $i71 := $eq.i32($i70, 0);
    goto corral_source_split_7372;

  corral_source_split_7372:
    assume {:verifier.code 0} true;
    $i72 := 0;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume !($i71 == 1);
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto corral_source_split_7377;

  corral_source_split_7377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1595} vmci_ctx_rcv_notifications_release($i33, $p67, $p68, $i72);
    goto SeqInstr_442, SeqInstr_443;

  SeqInstr_443:
    assume assertsPassed;
    goto SeqInstr_444;

  SeqInstr_444:
    goto corral_source_split_7378;

  corral_source_split_7378:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.125, $p6);
    goto corral_source_split_7379;

  corral_source_split_7379:
    assume {:verifier.code 0} true;
    $i11 := $i75;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7282;

  corral_source_split_7282:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  SeqInstr_442:
    assume !assertsPassed;
    return;

  $bb38:
    assume $i71 == 1;
    goto corral_source_split_7374;

  corral_source_split_7374:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.125, $p6);
    goto corral_source_split_7375;

  corral_source_split_7375:
    assume {:verifier.code 0} true;
    $i74 := $eq.i32($i73, 0);
    assume {:verifier.code 0} true;
    $i72 := $i74;
    goto $bb40;

  $bb32:
    assume $i63 == 1;
    goto corral_source_split_7360;

  corral_source_split_7360:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p3);
    goto corral_source_split_7361;

  corral_source_split_7361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1593} $i65 := copy_to_user($p2, $p64, 40);
    call {:si_unique_call 1594} {:cexpr "tmp___1"} boogie_si_record_i64($i65);
    goto corral_source_split_7362;

  corral_source_split_7362:
    assume {:verifier.code 0} true;
    $i66 := $ne.i64($i65, 0);
    goto corral_source_split_7363;

  corral_source_split_7363:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb34:
    assume $i66 == 1;
    goto corral_source_split_7365;

  corral_source_split_7365:
    assume {:verifier.code 0} true;
    $M.125 := $store.i32($M.125, $p6, $sub.i32(0, 14));
    goto corral_source_split_7366;

  corral_source_split_7366:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb26:
    assume $i52 == 1;
    goto corral_source_split_7343;

  corral_source_split_7343:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.125, $p6);
    goto corral_source_split_7344;

  corral_source_split_7344:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i53, 0);
    goto corral_source_split_7345;

  corral_source_split_7345:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i54 == 1);
    goto $bb28;

  $bb29:
    assume $i54 == 1;
    goto corral_source_split_7347;

  corral_source_split_7347:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7348;

  corral_source_split_7348:
    assume {:verifier.code 0} true;
    $i56 := $load.i64($M.0, $p55);
    goto corral_source_split_7349;

  corral_source_split_7349:
    assume {:verifier.code 0} true;
    $p57 := $i2p.i64.ref($i56);
    goto corral_source_split_7350;

  corral_source_split_7350:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7351;

  corral_source_split_7351:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.127, $p5);
    goto corral_source_split_7352;

  corral_source_split_7352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1592} $i60 := drv_cp_harray_to_user($p57, $p58, $p59, $p6);
    goto corral_source_split_7353;

  corral_source_split_7353:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7354;

  corral_source_split_7354:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p61, $i60);
    goto corral_source_split_7355;

  corral_source_split_7355:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb23:
    assume $i38 == 1;
    goto corral_source_split_7325;

  corral_source_split_7325:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p3);
    goto corral_source_split_7326;

  corral_source_split_7326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1589} $i40 := copy_to_user($p2, $p39, 40);
    call {:si_unique_call 1590} {:cexpr "tmp___0"} boogie_si_record_i64($i40);
    goto corral_source_split_7327;

  corral_source_split_7327:
    assume {:verifier.code 0} true;
    $i41 := $ne.i64($i40, 0);
    goto corral_source_split_7328;

  corral_source_split_7328:
    assume {:verifier.code 0} true;
    $i42 := (if $i41 == 1 then $sub.i32(0, 14) else 0);
    goto corral_source_split_7329;

  corral_source_split_7329:
    assume {:verifier.code 0} true;
    $i11 := $i42;
    goto $bb3;

  SeqInstr_439:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i27 == 1;
    goto corral_source_split_7310;

  corral_source_split_7310:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7311;

  corral_source_split_7311:
    assume {:verifier.code 0} true;
    $i29 := $load.i64($M.0, $p28);
    goto corral_source_split_7312;

  corral_source_split_7312:
    assume {:verifier.code 0} true;
    $i30 := $eq.i64($i29, 0);
    goto corral_source_split_7313;

  corral_source_split_7313:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb19;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i30 == 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb3;

  $bb11:
    assume $i21 == 1;
    goto corral_source_split_7301;

  corral_source_split_7301:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7302;

  corral_source_split_7302:
    assume {:verifier.code 0} true;
    $i23 := $load.i64($M.0, $p22);
    goto corral_source_split_7303;

  corral_source_split_7303:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i23, 0);
    goto corral_source_split_7304;

  corral_source_split_7304:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb13;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb15;

  $bb8:
    assume $i18 == 1;
    goto corral_source_split_7295;

  corral_source_split_7295:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 14);
    goto $bb3;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_7288;

  corral_source_split_7288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1583} vslice_dummy_var_268 := no_printk.ref.ref(.str.153, $p1);
    goto corral_source_split_7289;

  corral_source_split_7289:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_7279;

  corral_source_split_7279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1582} vslice_dummy_var_267 := no_printk.ref.ref(.str.138, $p1);
    goto corral_source_split_7280;

  corral_source_split_7280:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb3;
}



const vmci_host_get_version: ref;

axiom vmci_host_get_version == $sub.ref(0, 780513);

procedure vmci_host_get_version($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vmci_host_get_version($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i64;
  var $i9: i32;
  var $i10: i32;
  var $p11: ref;
  var $i12: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1596} {:cexpr "vmci_host_get_version:arg:cmd"} boogie_si_record_i32($i1);
    goto corral_source_split_7381;

  corral_source_split_7381:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 1959);
    goto corral_source_split_7382;

  corral_source_split_7382:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(8, 1));
    goto corral_source_split_7400;

  corral_source_split_7400:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_7401;

  corral_source_split_7401:
    assume {:verifier.code 0} true;
    $i16 := $sgt.i32($i15, 0);
    goto corral_source_split_7402;

  corral_source_split_7402:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i13 := 720896;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_7398;

  corral_source_split_7398:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_7404;

  corral_source_split_7404:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(8, 1));
    goto corral_source_split_7405;

  corral_source_split_7405:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_7406;

  corral_source_split_7406:
    assume {:verifier.code 0} true;
    $i19 := $sle.i32($i18, 589823);
    goto corral_source_split_7407;

  corral_source_split_7407:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb10;

  $bb11:
    assume $i19 == 1;
    goto corral_source_split_7409;

  corral_source_split_7409:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(8, 1));
    goto corral_source_split_7410;

  corral_source_split_7410:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_7411;

  corral_source_split_7411:
    assume {:verifier.code 0} true;
    $i13 := $i21;
    goto $bb5;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_7384;

  corral_source_split_7384:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p2);
    goto corral_source_split_7385;

  corral_source_split_7385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1597} __might_fault(.str.46, 265);
    call {:si_unique_call 1598} $p5 := devirtbounce.15(0, $p4, 4);
    goto corral_source_split_7386;

  corral_source_split_7386:
    assume {:verifier.code 0} true;
    $p6 := $extractvalue($p5, 0);
    goto corral_source_split_7387;

  corral_source_split_7387:
    assume {:verifier.code 0} true;
    $i7 := $extractvalue($p5, 1);
    goto corral_source_split_7388;

  corral_source_split_7388:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p6);
    goto corral_source_split_7389;

  corral_source_split_7389:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    call {:si_unique_call 1599} {:cexpr "__ret_gu"} boogie_si_record_i32($i9);
    goto corral_source_split_7390;

  corral_source_split_7390:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i64.i32($i7);
    goto corral_source_split_7391;

  corral_source_split_7391:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(8, 1));
    goto corral_source_split_7392;

  corral_source_split_7392:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, $i10);
    goto corral_source_split_7393;

  corral_source_split_7393:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i9, 0);
    goto corral_source_split_7394;

  corral_source_split_7394:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb3:
    assume $i12 == 1;
    goto corral_source_split_7396;

  corral_source_split_7396:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 14);
    goto $bb5;
}



const __might_fault: ref;

axiom __might_fault == $sub.ref(0, 781545);

procedure __might_fault($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __might_fault($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1600} {:cexpr "__might_fault:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_7413;

  corral_source_split_7413:
    assume {:verifier.code 0} true;
    return;
}



const copy_from_user: ref;

axiom copy_from_user == $sub.ref(0, 782577);

procedure copy_from_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation copy_from_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i32;
  var $i4: i64;
  var $i5: i32;
  var $i6: i1;
  var $i8: i64;
  var $i9: i1;
  var $i7: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1601} {:cexpr "copy_from_user:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_7415;

  corral_source_split_7415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1602} $i3 := __builtinx_object_size.ref.i32($p0, 0);
    goto corral_source_split_7416;

  corral_source_split_7416:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    call {:si_unique_call 1603} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_7417;

  corral_source_split_7417:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i4);
    call {:si_unique_call 1604} {:cexpr "sz"} boogie_si_record_i32($i5);
    goto corral_source_split_7418;

  corral_source_split_7418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1605} __might_fault(.str.137, 697);
    goto corral_source_split_7419;

  corral_source_split_7419:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 0);
    goto corral_source_split_7420;

  corral_source_split_7420:
    assume {:verifier.code 0} true;
    $i7 := 1;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_7428;

  corral_source_split_7428:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i5);
    goto corral_source_split_7429;

  corral_source_split_7429:
    assume {:verifier.code 0} true;
    $i9 := $uge.i64($i8, $i2);
    goto corral_source_split_7430;

  corral_source_split_7430:
    assume {:verifier.code 0} true;
    $i7 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_7422;

  corral_source_split_7422:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i7);
    goto corral_source_split_7423;

  corral_source_split_7423:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_7424;

  corral_source_split_7424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1606} $i12 := ldv__builtin_expect($i11, 1);
    call {:si_unique_call 1607} {:cexpr "tmp___0"} boogie_si_record_i64($i12);
    goto corral_source_split_7425;

  corral_source_split_7425:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_7426;

  corral_source_split_7426:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    goto corral_source_split_7436;

  corral_source_split_7436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1610} __copy_from_user_overflow();
    assume {:verifier.code 0} true;
    $i16 := $i2;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_7438;

  corral_source_split_7438:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_7432;

  corral_source_split_7432:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i64.i32($i2);
    goto corral_source_split_7433;

  corral_source_split_7433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1608} $i15 := _copy_from_user($p0, $p1, $i14);
    call {:si_unique_call 1609} {:cexpr "n"} boogie_si_record_i64($i15);
    goto corral_source_split_7434;

  corral_source_split_7434:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const vmci_ctx_rcv_notifications_get: ref;

axiom vmci_ctx_rcv_notifications_get == $sub.ref(0, 783609);

procedure vmci_ctx_rcv_notifications_get($i0: i32, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.126, $M.127, $CurrAddr, $M.2, $M.3, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.31, $M.87, $M.6, $M.13, $M.20, $M.21, $M.18, $M.19, $M.69, $M.70, $M.23, $M.24, $M.25, $M.26, $M.27, $M.108, $M.110, $M.112, $M.114, $M.28, $M.33, assertsPassed, $M.29, $M.45, $M.48, $M.47, $M.89, $M.109, $M.111, $M.113, $M.115, $M.34, $M.30, $M.35, $M.46, $M.90, $M.86, $M.91, $M.44, $M.32, $M.36, $M.38, $M.40, $M.42;



implementation vmci_ctx_rcv_notifications_get($i0: i32, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1611} {:cexpr "vmci_ctx_rcv_notifications_get:arg:context_id"} boogie_si_record_i32($i0);
    goto corral_source_split_7440;

  corral_source_split_7440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1612} $p3 := vmci_ctx_get($i0);
    goto corral_source_split_7441;

  corral_source_split_7441:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_7442;

  corral_source_split_7442:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_7443;

  corral_source_split_7443:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 304)), $mul.ref(64, 1));
    goto corral_source_split_7449;

  corral_source_split_7449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1613} spin_lock($p7);
    goto corral_source_split_7450;

  corral_source_split_7450:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 304)), $mul.ref(152, 1));
    goto corral_source_split_7451;

  corral_source_split_7451:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_7452;

  corral_source_split_7452:
    assume {:verifier.code 0} true;
    $M.126 := $store.ref($M.126, $p1, $p9);
    goto corral_source_split_7453;

  corral_source_split_7453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1614} $p10 := vmci_handle_arr_create(0);
    goto corral_source_split_7454;

  corral_source_split_7454:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 304)), $mul.ref(152, 1));
    goto corral_source_split_7455;

  corral_source_split_7455:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, $p10);
    goto corral_source_split_7456;

  corral_source_split_7456:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 304)), $mul.ref(152, 1));
    goto corral_source_split_7457;

  corral_source_split_7457:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_7458;

  corral_source_split_7458:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_7459;

  corral_source_split_7459:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, 0);
    goto corral_source_split_7460;

  corral_source_split_7460:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_7468;

  corral_source_split_7468:
    assume {:verifier.code 0} true;
    $M.127 := $store.ref($M.127, $p2, $0.ref);
    goto corral_source_split_7469;

  corral_source_split_7469:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 304)), $mul.ref(64, 1));
    goto corral_source_split_7470;

  corral_source_split_7470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1615} spin_unlock($p19);
    goto corral_source_split_7471;

  corral_source_split_7471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1616} vmci_ctx_put($p3);
    goto SeqInstr_445, SeqInstr_446;

  SeqInstr_446:
    assume assertsPassed;
    goto SeqInstr_447;

  SeqInstr_447:
    goto corral_source_split_7472;

  corral_source_split_7472:
    assume {:verifier.code 0} true;
    $i6 := $i18;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7447;

  corral_source_split_7447:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  SeqInstr_445:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_7462;

  corral_source_split_7462:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.126, $p1);
    goto corral_source_split_7463;

  corral_source_split_7463:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 304)), $mul.ref(152, 1));
    goto corral_source_split_7464;

  corral_source_split_7464:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p17, $p16);
    goto corral_source_split_7465;

  corral_source_split_7465:
    assume {:verifier.code 0} true;
    $M.126 := $store.ref($M.126, $p1, $0.ref);
    goto corral_source_split_7466;

  corral_source_split_7466:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 3);
    goto $bb7;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_7445;

  corral_source_split_7445:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 21);
    goto $bb3;
}



const copy_to_user: ref;

axiom copy_to_user == $sub.ref(0, 784641);

procedure copy_to_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation copy_to_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i32;
  var $i4: i64;
  var $i5: i32;
  var $i6: i1;
  var $i8: i64;
  var $i9: i1;
  var $i7: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1617} {:cexpr "copy_to_user:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_7474;

  corral_source_split_7474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1618} $i3 := __builtinx_object_size.ref.i32($p1, 0);
    goto corral_source_split_7475;

  corral_source_split_7475:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    call {:si_unique_call 1619} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_7476;

  corral_source_split_7476:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i4);
    call {:si_unique_call 1620} {:cexpr "sz"} boogie_si_record_i32($i5);
    goto corral_source_split_7477;

  corral_source_split_7477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1621} __might_fault(.str.137, 732);
    goto corral_source_split_7478;

  corral_source_split_7478:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 0);
    goto corral_source_split_7479;

  corral_source_split_7479:
    assume {:verifier.code 0} true;
    $i7 := 1;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_7487;

  corral_source_split_7487:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i5);
    goto corral_source_split_7488;

  corral_source_split_7488:
    assume {:verifier.code 0} true;
    $i9 := $uge.i64($i8, $i2);
    goto corral_source_split_7489;

  corral_source_split_7489:
    assume {:verifier.code 0} true;
    $i7 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_7481;

  corral_source_split_7481:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i7);
    goto corral_source_split_7482;

  corral_source_split_7482:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_7483;

  corral_source_split_7483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1622} $i12 := ldv__builtin_expect($i11, 1);
    call {:si_unique_call 1623} {:cexpr "tmp___0"} boogie_si_record_i64($i12);
    goto corral_source_split_7484;

  corral_source_split_7484:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_7485;

  corral_source_split_7485:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    goto corral_source_split_7495;

  corral_source_split_7495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1626} __copy_to_user_overflow();
    assume {:verifier.code 0} true;
    $i16 := $i2;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_7497;

  corral_source_split_7497:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_7491;

  corral_source_split_7491:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i64.i32($i2);
    goto corral_source_split_7492;

  corral_source_split_7492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1624} $i15 := _copy_to_user($p0, $p1, $i14);
    call {:si_unique_call 1625} {:cexpr "n"} boogie_si_record_i64($i15);
    goto corral_source_split_7493;

  corral_source_split_7493:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const drv_cp_harray_to_user: ref;

axiom drv_cp_harray_to_user == $sub.ref(0, 785673);

procedure drv_cp_harray_to_user($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.125;



implementation drv_cp_harray_to_user($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $i4: i64;
  var $i5: i1;
  var $i6: i64;
  var $i7: i32;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $i14: i64;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i64;
  var $i22: i32;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7499;

  corral_source_split_7499:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p2);
    goto corral_source_split_7500;

  corral_source_split_7500:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_7501;

  corral_source_split_7501:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7507;

  corral_source_split_7507:
    assume {:verifier.code 0} true;
    $i9 := $zext.i32.i64($i8);
    goto corral_source_split_7508;

  corral_source_split_7508:
    assume {:verifier.code 0} true;
    $i10 := $mul.i64($i9, 8);
    goto corral_source_split_7509;

  corral_source_split_7509:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.0, $p1);
    goto corral_source_split_7510;

  corral_source_split_7510:
    assume {:verifier.code 0} true;
    $i12 := $ugt.i64($i10, $i11);
    goto corral_source_split_7511;

  corral_source_split_7511:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i14 := $zext.i32.i64($i8);
    goto corral_source_split_7517;

  corral_source_split_7517:
    assume {:verifier.code 0} true;
    $i15 := $mul.i64($i14, 8);
    goto corral_source_split_7518;

  corral_source_split_7518:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1, $i15);
    goto corral_source_split_7519;

  corral_source_split_7519:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.0, $p1);
    goto corral_source_split_7520;

  corral_source_split_7520:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_7521;

  corral_source_split_7521:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_7515;

  corral_source_split_7515:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_7523;

  corral_source_split_7523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1630} $p18 := vmci_handle_arr_get_handles($p2);
    goto corral_source_split_7524;

  corral_source_split_7524:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_7525;

  corral_source_split_7525:
    assume {:verifier.code 0} true;
    $i20 := $load.i64($M.0, $p1);
    goto corral_source_split_7526;

  corral_source_split_7526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1631} $i21 := copy_to_user($p0, $p19, $i20);
    call {:si_unique_call 1632} {:cexpr "tmp___1"} boogie_si_record_i64($i21);
    goto corral_source_split_7527;

  corral_source_split_7527:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i64.i32($i21);
    goto corral_source_split_7528;

  corral_source_split_7528:
    assume {:verifier.code 0} true;
    $M.125 := $store.i32($M.125, $p3, $i22);
    goto corral_source_split_7529;

  corral_source_split_7529:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_7513;

  corral_source_split_7513:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 5);
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_7503;

  corral_source_split_7503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1627} $i6 := vmci_handle_arr_get_size($p2);
    call {:si_unique_call 1628} {:cexpr "tmp"} boogie_si_record_i64($i6);
    goto corral_source_split_7504;

  corral_source_split_7504:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i64.i32($i6);
    call {:si_unique_call 1629} {:cexpr "array_size"} boogie_si_record_i32($i7);
    goto corral_source_split_7505;

  corral_source_split_7505:
    assume {:verifier.code 0} true;
    $i8 := $i7;
    goto $bb3;
}



const vmci_ctx_rcv_notifications_release: ref;

axiom vmci_ctx_rcv_notifications_release == $sub.ref(0, 786705);

procedure vmci_ctx_rcv_notifications_release($i0: i32, $p1: ref, $p2: ref, $i3: i1);
  free requires assertsPassed;
  modifies $M.0, $M.128, $M.45, $M.20, $M.21, $M.48, $CurrAddr, $M.2, $M.3, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.31, $M.87, $M.6, $M.13, $M.18, $M.19, $M.69, $M.70, $M.23, $M.24, $M.25, $M.26, $M.27, $M.108, $M.110, $M.112, $M.114, $M.28, $M.33, assertsPassed, $M.29, $M.47, $M.89, $M.109, $M.111, $M.113, $M.115, $M.34, $M.30, $M.35, $M.46, $M.90, $M.86, $M.91, $M.44, $M.32, $M.36, $M.38, $M.40, $M.42;



implementation vmci_ctx_rcv_notifications_release($i0: i32, $p1: ref, $p2: ref, $i3: i1)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i8;
  var $p9: ref;
  var $p10: ref;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $i22: i8;
  var $i23: i1;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $i27: i64;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var $i37: i8;
  var $i38: i1;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $i48: i1;
  var $p49: ref;
  var $i50: i64;
  var $i51: i1;
  var cmdloc_dummy_var_139: [ref]i8;
  var cmdloc_dummy_var_140: [ref]i8;
  var cmdloc_dummy_var_141: [ref]i8;
  var cmdloc_dummy_var_142: [ref]i8;
  var cmdloc_dummy_var_143: [ref]i8;
  var cmdloc_dummy_var_144: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1633} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1634} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1635} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1636} $p7 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 1637} {:cexpr "vmci_ctx_rcv_notifications_release:arg:context_id"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, $p1);
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i8($i3);
    call {:si_unique_call 1638} {:cexpr "vmci_ctx_rcv_notifications_release:arg:success"} boogie_si_record_i1($i3);
    goto corral_source_split_7531;

  corral_source_split_7531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1639} $p9 := vmci_ctx_get($i0);
    goto corral_source_split_7532;

  corral_source_split_7532:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 304)), $mul.ref(64, 1));
    goto corral_source_split_7533;

  corral_source_split_7533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1640} spin_lock($p10);
    goto corral_source_split_7534;

  corral_source_split_7534:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i8);
    goto corral_source_split_7535;

  corral_source_split_7535:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    goto corral_source_split_7539;

  corral_source_split_7539:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p9, $mul.ref(0, 304)), $mul.ref(152, 1));
    goto corral_source_split_7540;

  corral_source_split_7540:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_7541;

  corral_source_split_7541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1642} $i14 := vmci_handle_arr_remove_tail($p13);
    goto corral_source_split_7542;

  corral_source_split_7542:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p6);
    goto corral_source_split_7543;

  corral_source_split_7543:
    assume {:verifier.code 0} true;
    $M.128 := $store.i64($M.128, $p15, $i14);
    goto corral_source_split_7544;

  corral_source_split_7544:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p5);
    goto corral_source_split_7545;

  corral_source_split_7545:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p6);
    goto corral_source_split_7546;

  corral_source_split_7546:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_139 := $M.128;
    cmdloc_dummy_var_140 := $M.128;
    call {:si_unique_call 1643} cmdloc_dummy_var_141 := $memcpy.i8(cmdloc_dummy_var_139, cmdloc_dummy_var_140, $p16, $p17, 8, $zext.i32.i64(4), 0 == 1);
    $M.128 := cmdloc_dummy_var_141;
    goto corral_source_split_7547;

  corral_source_split_7547:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call $p18, $p19, $i20, $i21, $i22, $i23, $i24, $i25, $p26, $i27, $p28, $p29, $i30, $p31, $p32, $p33, $p34, $i35, $i36, $i37, $i38, $i39, $i40, cmdloc_dummy_var_142, cmdloc_dummy_var_143, cmdloc_dummy_var_144 := vmci_ctx_rcv_notifications_release_loop_$bb3($p4, $p5, $p7, $p9, $p18, $p19, $i20, $i21, $i22, $i23, $i24, $i25, $p26, $i27, $p28, $p29, $i30, $p31, $p32, $p33, $p34, $i35, $i36, $i37, $i38, $i39, $i40, cmdloc_dummy_var_142, cmdloc_dummy_var_143, cmdloc_dummy_var_144);
    goto $bb3_last;

  corral_source_split_7549:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.128, $p34);
    goto corral_source_split_7550;

  corral_source_split_7550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1644} $i36 := vmci_handle_is_invalid($i35);
    goto corral_source_split_7551;

  corral_source_split_7551:
    assume {:verifier.code 0} true;
    $i37 := $zext.i1.i8($i36);
    call {:si_unique_call 1645} {:cexpr "tmp___2"} boogie_si_record_i8($i37);
    goto corral_source_split_7552;

  corral_source_split_7552:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i8.i1($i37);
    goto corral_source_split_7553;

  corral_source_split_7553:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    $i39 := 1;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_7583;

  corral_source_split_7583:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_7584;

  corral_source_split_7584:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p9, $mul.ref(0, 304)), $mul.ref(152, 1));
    goto corral_source_split_7588;

  corral_source_split_7588:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_7589;

  corral_source_split_7589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1651} vmci_handle_arr_destroy($p42);
    goto corral_source_split_7590;

  corral_source_split_7590:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p4);
    goto corral_source_split_7591;

  corral_source_split_7591:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p9, $mul.ref(0, 304)), $mul.ref(152, 1));
    goto corral_source_split_7592;

  corral_source_split_7592:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p44, $p43);
    goto corral_source_split_7593;

  corral_source_split_7593:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, $0.ref);
    goto corral_source_split_7594;

  corral_source_split_7594:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p9, $mul.ref(0, 304)), $mul.ref(64, 1));
    goto corral_source_split_7596;

  corral_source_split_7596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1652} spin_unlock($p45);
    goto corral_source_split_7597;

  corral_source_split_7597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1653} vmci_ctx_put($p9);
    goto SeqInstr_448, SeqInstr_449;

  SeqInstr_449:
    assume assertsPassed;
    goto SeqInstr_450;

  SeqInstr_450:
    goto corral_source_split_7598;

  corral_source_split_7598:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p4);
    goto corral_source_split_7599;

  corral_source_split_7599:
    assume {:verifier.code 0} true;
    $i47 := $p2i.ref.i64($p46);
    goto corral_source_split_7600;

  corral_source_split_7600:
    assume {:verifier.code 0} true;
    $i48 := $ne.i64($i47, 0);
    goto corral_source_split_7601;

  corral_source_split_7601:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p2);
    goto corral_source_split_7607;

  corral_source_split_7607:
    assume {:verifier.code 0} true;
    $i51 := $ne.i64($i50, 0);
    goto corral_source_split_7608;

  corral_source_split_7608:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    return;

  $bb21:
    assume $i51 == 1;
    goto corral_source_split_7610;

  corral_source_split_7610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1655} vmci_handle_arr_destroy($p2);
    goto corral_source_split_7611;

  corral_source_split_7611:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb18:
    assume $i48 == 1;
    goto corral_source_split_7603;

  corral_source_split_7603:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p4);
    goto corral_source_split_7604;

  corral_source_split_7604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1654} vmci_handle_arr_destroy($p49);
    goto corral_source_split_7605;

  corral_source_split_7605:
    assume {:verifier.code 0} true;
    goto $bb20;

  SeqInstr_448:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i40 == 1;
    goto corral_source_split_7586;

  corral_source_split_7586:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p4);
    goto corral_source_split_7555;

  corral_source_split_7555:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p5);
    goto corral_source_split_7556;

  corral_source_split_7556:
    assume {:verifier.code 0} true;
    $i20 := $load.i64($M.128, $p19);
    goto corral_source_split_7557;

  corral_source_split_7557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1646} $i21 := vmci_handle_arr_has_entry($p18, $i20);
    goto corral_source_split_7558;

  corral_source_split_7558:
    assume {:verifier.code 0} true;
    $i22 := $zext.i1.i8($i21);
    call {:si_unique_call 1647} {:cexpr "tmp___0"} boogie_si_record_i8($i22);
    goto corral_source_split_7559;

  corral_source_split_7559:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i8.i1($i22);
    goto corral_source_split_7560;

  corral_source_split_7560:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i24 := 1;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_7564;

  corral_source_split_7564:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_7565;

  corral_source_split_7565:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p9, $mul.ref(0, 304)), $mul.ref(152, 1));
    goto corral_source_split_7572;

  corral_source_split_7572:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_7573;

  corral_source_split_7573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1649} $i30 := vmci_handle_arr_remove_tail($p29);
    goto corral_source_split_7574;

  corral_source_split_7574:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p7);
    goto corral_source_split_7575;

  corral_source_split_7575:
    assume {:verifier.code 0} true;
    $M.128 := $store.i64($M.128, $p31, $i30);
    goto corral_source_split_7576;

  corral_source_split_7576:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p5);
    goto corral_source_split_7577;

  corral_source_split_7577:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p7);
    goto corral_source_split_7578;

  corral_source_split_7578:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_142 := $M.128;
    cmdloc_dummy_var_143 := $M.128;
    call {:si_unique_call 1650} cmdloc_dummy_var_144 := $memcpy.i8(cmdloc_dummy_var_142, cmdloc_dummy_var_143, $p32, $p33, 8, $zext.i32.i64(4), 0 == 1);
    $M.128 := cmdloc_dummy_var_144;
    goto corral_source_split_7579;

  corral_source_split_7579:
    assume {:verifier.code 0} true;
    goto corral_source_split_7579_dummy;

  $bb8:
    assume $i25 == 1;
    goto corral_source_split_7567;

  corral_source_split_7567:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p5);
    goto corral_source_split_7568;

  corral_source_split_7568:
    assume {:verifier.code 0} true;
    $i27 := $load.i64($M.128, $p26);
    goto corral_source_split_7569;

  corral_source_split_7569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1648} vmci_handle_arr_append_entry($p4, $i27);
    goto corral_source_split_7570;

  corral_source_split_7570:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i23 == 1;
    goto corral_source_split_7562;

  corral_source_split_7562:
    assume {:verifier.code 0} true;
    $i24 := 0;
    goto $bb7;

  $bb11:
    assume $i38 == 1;
    goto corral_source_split_7581;

  corral_source_split_7581:
    assume {:verifier.code 0} true;
    $i39 := 0;
    goto $bb13;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_7537;

  corral_source_split_7537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1641} ctx_clear_notify_call($p9);
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_7579_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p5);
    goto corral_source_split_7549;
}



const vmci_handle_arr_remove_tail: ref;

axiom vmci_handle_arr_remove_tail == $sub.ref(0, 787737);

procedure vmci_handle_arr_remove_tail($p0: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation vmci_handle_arr_remove_tail($p0: ref) returns ($r: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $i8: i64;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var cmdloc_dummy_var_145: [ref]i8;
  var cmdloc_dummy_var_146: [ref]i8;
  var cmdloc_dummy_var_147: [ref]i8;
  var cmdloc_dummy_var_148: [ref]i8;
  var cmdloc_dummy_var_149: [ref]i8;
  var cmdloc_dummy_var_150: [ref]i8;
  var cmdloc_dummy_var_151: [ref]i8;
  var cmdloc_dummy_var_152: [ref]i8;
  var cmdloc_dummy_var_153: [ref]i8;
  var cmdloc_dummy_var_154: [ref]i8;
  var cmdloc_dummy_var_155: [ref]i8;
  var cmdloc_dummy_var_156: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1656} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1657} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_7613;

  corral_source_split_7613:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_7614;

  corral_source_split_7614:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_145 := $M.0;
    cmdloc_dummy_var_146 := $M.0;
    call {:si_unique_call 1658} cmdloc_dummy_var_147 := $memcpy.i8(cmdloc_dummy_var_145, cmdloc_dummy_var_146, $p3, VMCI_INVALID_HANDLE___1, 8, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_147;
    goto corral_source_split_7615;

  corral_source_split_7615:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_7616;

  corral_source_split_7616:
    assume {:verifier.code 0} true;
    $i5 := $load.i64($M.0, $p4);
    goto corral_source_split_7617;

  corral_source_split_7617:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_7618;

  corral_source_split_7618:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p1);
    goto corral_source_split_7638;

  corral_source_split_7638:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p2);
    goto corral_source_split_7639;

  corral_source_split_7639:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_154 := $M.0;
    cmdloc_dummy_var_155 := $M.0;
    call {:si_unique_call 1661} cmdloc_dummy_var_156 := $memcpy.i8(cmdloc_dummy_var_154, cmdloc_dummy_var_155, $p22, $p23, 8, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_156;
    goto corral_source_split_7640;

  corral_source_split_7640:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p1);
    goto corral_source_split_7641;

  corral_source_split_7641:
    assume {:verifier.code 0} true;
    $i25 := $load.i64($M.0, $p24);
    goto corral_source_split_7642;

  corral_source_split_7642:
    assume {:verifier.code 0} true;
    $r := $i25;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_7620;

  corral_source_split_7620:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_7621;

  corral_source_split_7621:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.0, $p7);
    goto corral_source_split_7622;

  corral_source_split_7622:
    assume {:verifier.code 0} true;
    $i9 := $sub.i64($i8, 1);
    goto corral_source_split_7623;

  corral_source_split_7623:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_7624;

  corral_source_split_7624:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p10, $i9);
    goto corral_source_split_7625;

  corral_source_split_7625:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_7626;

  corral_source_split_7626:
    assume {:verifier.code 0} true;
    $i12 := $load.i64($M.0, $p11);
    goto corral_source_split_7627;

  corral_source_split_7627:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(16, 1)), $mul.ref($i12, 8));
    goto corral_source_split_7628;

  corral_source_split_7628:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p2);
    goto corral_source_split_7629;

  corral_source_split_7629:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p14);
    goto corral_source_split_7630;

  corral_source_split_7630:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_148 := $M.0;
    cmdloc_dummy_var_149 := $M.0;
    call {:si_unique_call 1659} cmdloc_dummy_var_150 := $memcpy.i8(cmdloc_dummy_var_148, cmdloc_dummy_var_149, $p15, $p16, 8, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_150;
    goto corral_source_split_7631;

  corral_source_split_7631:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_7632;

  corral_source_split_7632:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.0, $p17);
    goto corral_source_split_7633;

  corral_source_split_7633:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(16, 1)), $mul.ref($i18, 8));
    goto corral_source_split_7634;

  corral_source_split_7634:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_7635;

  corral_source_split_7635:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_151 := $M.0;
    cmdloc_dummy_var_152 := $M.0;
    call {:si_unique_call 1660} cmdloc_dummy_var_153 := $memcpy.i8(cmdloc_dummy_var_151, cmdloc_dummy_var_152, $p21, VMCI_INVALID_HANDLE___1, 8, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_153;
    goto corral_source_split_7636;

  corral_source_split_7636:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ctx_clear_notify_call: ref;

axiom ctx_clear_notify_call == $sub.ref(0, 788769);

procedure ctx_clear_notify_call($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation ctx_clear_notify_call($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7644;

  corral_source_split_7644:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(40, 1));
    goto corral_source_split_7645;

  corral_source_split_7645:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_7646;

  corral_source_split_7646:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_7647;

  corral_source_split_7647:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_7649;

  corral_source_split_7649:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(152, 1));
    goto corral_source_split_7650;

  corral_source_split_7650:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_7651;

  corral_source_split_7651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1662} $i6 := vmci_handle_arr_get_size($p5);
    call {:si_unique_call 1663} {:cexpr "tmp"} boogie_si_record_i64($i6);
    goto corral_source_split_7652;

  corral_source_split_7652:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_7653;

  corral_source_split_7653:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i7 == 1;
    goto corral_source_split_7655;

  corral_source_split_7655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1664} ctx_clear_notify($p0);
    goto corral_source_split_7656;

  corral_source_split_7656:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const ctx_clear_notify: ref;

axiom ctx_clear_notify == $sub.ref(0, 789801);

procedure ctx_clear_notify($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation ctx_clear_notify($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7658;

  corral_source_split_7658:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(288, 1));
    goto corral_source_split_7659;

  corral_source_split_7659:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_7660;

  corral_source_split_7660:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p2, 0);
    goto corral_source_split_7661;

  corral_source_split_7661:
    assume {:verifier.code 0} true;
    return;
}



const vmci_handle_arr_get_handles: ref;

axiom vmci_handle_arr_get_handles == $sub.ref(0, 790833);

procedure vmci_handle_arr_get_handles($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation vmci_handle_arr_get_handles($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7663;

  corral_source_split_7663:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_7664;

  corral_source_split_7664:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.0, $p1);
    goto corral_source_split_7665;

  corral_source_split_7665:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_7666;

  corral_source_split_7666:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7672;

  corral_source_split_7672:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_7668;

  corral_source_split_7668:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(16, 1));
    goto corral_source_split_7669;

  corral_source_split_7669:
    assume {:verifier.code 0} true;
    goto corral_source_split_7670;

  corral_source_split_7670:
    assume {:verifier.code 0} true;
    $p6 := $p4;
    goto $bb3;
}



const __builtinx_object_size: ref;

axiom __builtinx_object_size == $sub.ref(0, 791865);

procedure __builtinx_object_size() returns ($r: i32);



procedure __builtinx_object_size.ref.i32(p.0: ref, p.1: i32) returns ($r: i32);



const _copy_to_user: ref;

axiom _copy_to_user == $sub.ref(0, 792897);

procedure _copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation _copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1665} {:cexpr "_copy_to_user:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_7674;

  corral_source_split_7674:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1666} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1667} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_7675;

  corral_source_split_7675:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __copy_to_user_overflow: ref;

axiom __copy_to_user_overflow == $sub.ref(0, 793929);

procedure __copy_to_user_overflow();
  free requires assertsPassed;



implementation __copy_to_user_overflow()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7677;

  corral_source_split_7677:
    assume {:verifier.code 0} true;
    return;
}



const _copy_from_user: ref;

axiom _copy_from_user == $sub.ref(0, 794961);

procedure _copy_from_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation _copy_from_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1668} {:cexpr "_copy_from_user:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_7679;

  corral_source_split_7679:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1669} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1670} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_7680;

  corral_source_split_7680:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __copy_from_user_overflow: ref;

axiom __copy_from_user_overflow == $sub.ref(0, 795993);

procedure __copy_from_user_overflow();
  free requires assertsPassed;



implementation __copy_from_user_overflow()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7682;

  corral_source_split_7682:
    assume {:verifier.code 0} true;
    return;
}



const vmci_ctx_dbell_create: ref;

axiom vmci_ctx_dbell_create == $sub.ref(0, 797025);

procedure vmci_ctx_dbell_create($i0: i32, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.129, $M.45, $M.20, $M.21, $M.0, $M.48, $CurrAddr, $M.2, $M.3, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.31, $M.87, $M.6, $M.13, $M.18, $M.19, $M.69, $M.70, $M.23, $M.24, $M.25, $M.26, $M.27, $M.108, $M.110, $M.112, $M.114, $M.28, $M.33, assertsPassed, $M.29, $M.47, $M.89, $M.109, $M.111, $M.113, $M.115, $M.34, $M.30, $M.35, $M.46, $M.90, $M.86, $M.91, $M.44, $M.32, $M.36, $M.38, $M.40, $M.42;



implementation vmci_ctx_dbell_create($i0: i32, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i1;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i9: i8;
  var $i10: i1;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $i20: i8;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i32;
  var $p28: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1671} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    assume {:verifier.code 0} true;
    $M.129 := $store.i64($M.129, $p3, $i1);
    call {:si_unique_call 1672} {:cexpr "vmci_ctx_dbell_create:arg:context_id"} boogie_si_record_i32($i0);
    goto corral_source_split_7684;

  corral_source_split_7684:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i0, $sub.i32(0, 1));
    goto corral_source_split_7685;

  corral_source_split_7685:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_7689;

  corral_source_split_7689:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p2);
    goto corral_source_split_7690;

  corral_source_split_7690:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.129, $p6);
    goto corral_source_split_7691;

  corral_source_split_7691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1673} $i8 := vmci_handle_is_invalid($i7);
    goto corral_source_split_7692;

  corral_source_split_7692:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i8($i8);
    call {:si_unique_call 1674} {:cexpr "tmp"} boogie_si_record_i8($i9);
    goto corral_source_split_7693;

  corral_source_split_7693:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1($i9);
    goto corral_source_split_7694;

  corral_source_split_7694:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1675} $p11 := vmci_ctx_get($i0);
    goto corral_source_split_7700;

  corral_source_split_7700:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_7701;

  corral_source_split_7701:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_7702;

  corral_source_split_7702:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p11, $mul.ref(0, 304)), $mul.ref(64, 1));
    goto corral_source_split_7706;

  corral_source_split_7706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1676} spin_lock($p14);
    goto corral_source_split_7707;

  corral_source_split_7707:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p11, $mul.ref(0, 304)), $mul.ref(144, 1));
    goto corral_source_split_7708;

  corral_source_split_7708:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_7709;

  corral_source_split_7709:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p2);
    goto corral_source_split_7710;

  corral_source_split_7710:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.129, $p17);
    goto corral_source_split_7711;

  corral_source_split_7711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1677} $i19 := vmci_handle_arr_has_entry($p16, $i18);
    goto corral_source_split_7712;

  corral_source_split_7712:
    assume {:verifier.code 0} true;
    $i20 := $zext.i1.i8($i19);
    call {:si_unique_call 1678} {:cexpr "tmp___0"} boogie_si_record_i8($i20);
    goto corral_source_split_7713;

  corral_source_split_7713:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i8.i1($i20);
    goto corral_source_split_7714;

  corral_source_split_7714:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i22 := 1;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_7718;

  corral_source_split_7718:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_7719;

  corral_source_split_7719:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i27 := $sub.i32(0, 9);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_7727;

  corral_source_split_7727:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p11, $mul.ref(0, 304)), $mul.ref(64, 1));
    goto corral_source_split_7728;

  corral_source_split_7728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1680} spin_unlock($p28);
    goto corral_source_split_7729;

  corral_source_split_7729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1681} vmci_ctx_put($p11);
    goto SeqInstr_451, SeqInstr_452;

  SeqInstr_452:
    assume assertsPassed;
    goto SeqInstr_453;

  SeqInstr_453:
    goto corral_source_split_7730;

  corral_source_split_7730:
    assume {:verifier.code 0} true;
    $i5 := $i27;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7696;

  corral_source_split_7696:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  SeqInstr_451:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i23 == 1;
    goto corral_source_split_7721;

  corral_source_split_7721:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p11, $mul.ref(0, 304)), $mul.ref(144, 1));
    goto corral_source_split_7722;

  corral_source_split_7722:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p2);
    goto corral_source_split_7723;

  corral_source_split_7723:
    assume {:verifier.code 0} true;
    $i26 := $load.i64($M.129, $p25);
    goto corral_source_split_7724;

  corral_source_split_7724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1679} vmci_handle_arr_append_entry($p24, $i26);
    goto corral_source_split_7725;

  corral_source_split_7725:
    assume {:verifier.code 0} true;
    $i27 := 0;
    goto $bb16;

  $bb11:
    assume $i21 == 1;
    goto corral_source_split_7716;

  corral_source_split_7716:
    assume {:verifier.code 0} true;
    $i22 := 0;
    goto $bb13;

  $bb8:
    assume $i13 == 1;
    goto corral_source_split_7704;

  corral_source_split_7704:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 21);
    goto $bb3;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_7698;

  corral_source_split_7698:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 2);
    goto $bb3;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_7687;

  corral_source_split_7687:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 2);
    goto $bb3;
}



const vmci_ctx_dbell_destroy: ref;

axiom vmci_ctx_dbell_destroy == $sub.ref(0, 798057);

procedure vmci_ctx_dbell_destroy($i0: i32, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.130, $M.45, $M.20, $M.21, $M.0, $M.19, $M.131, $M.132, $CurrAddr, $M.2, $M.3, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.31, $M.87, $M.6, $M.13, $M.18, $M.69, $M.70, $M.23, $M.24, $M.25, $M.26, $M.27, $M.108, $M.110, $M.112, $M.114, $M.28, $M.33, assertsPassed, $M.29, $M.48, $M.47, $M.89, $M.109, $M.111, $M.113, $M.115, $M.34, $M.30, $M.35, $M.46, $M.90, $M.86, $M.91, $M.44, $M.32, $M.36, $M.38, $M.40, $M.42;



implementation vmci_ctx_dbell_destroy($i0: i32, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $i12: i8;
  var $i13: i1;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i64;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i64;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $i36: i8;
  var $i37: i1;
  var $i38: i32;
  var $i8: i32;
  var cmdloc_dummy_var_157: [ref]i8;
  var cmdloc_dummy_var_158: [ref]i8;
  var cmdloc_dummy_var_159: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1682} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1683} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1684} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1685} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p2);
    assume {:verifier.code 0} true;
    $M.130 := $store.i64($M.130, $p6, $i1);
    call {:si_unique_call 1686} {:cexpr "vmci_ctx_dbell_destroy:arg:context_id"} boogie_si_record_i32($i0);
    goto corral_source_split_7732;

  corral_source_split_7732:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i0, $sub.i32(0, 1));
    goto corral_source_split_7733;

  corral_source_split_7733:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    goto corral_source_split_7737;

  corral_source_split_7737:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p2);
    goto corral_source_split_7738;

  corral_source_split_7738:
    assume {:verifier.code 0} true;
    $i10 := $load.i64($M.130, $p9);
    goto corral_source_split_7739;

  corral_source_split_7739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1687} $i11 := vmci_handle_is_invalid($i10);
    goto corral_source_split_7740;

  corral_source_split_7740:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i8($i11);
    call {:si_unique_call 1688} {:cexpr "tmp"} boogie_si_record_i8($i12);
    goto corral_source_split_7741;

  corral_source_split_7741:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i8.i1($i12);
    goto corral_source_split_7742;

  corral_source_split_7742:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1689} $p14 := vmci_ctx_get($i0);
    goto corral_source_split_7748;

  corral_source_split_7748:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_7749;

  corral_source_split_7749:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_7750;

  corral_source_split_7750:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p14, $mul.ref(0, 304)), $mul.ref(64, 1));
    goto corral_source_split_7754;

  corral_source_split_7754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1690} spin_lock($p17);
    goto corral_source_split_7755;

  corral_source_split_7755:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p14, $mul.ref(0, 304)), $mul.ref(144, 1));
    goto corral_source_split_7756;

  corral_source_split_7756:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_7757;

  corral_source_split_7757:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p2);
    goto corral_source_split_7758;

  corral_source_split_7758:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.130, $p20);
    goto corral_source_split_7759;

  corral_source_split_7759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1691} $i22 := vmci_handle_arr_remove_entry($p19, $i21);
    goto corral_source_split_7760;

  corral_source_split_7760:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p4);
    goto corral_source_split_7761;

  corral_source_split_7761:
    assume {:verifier.code 0} true;
    $M.131 := $store.i64($M.131, $p23, $i22);
    goto corral_source_split_7762;

  corral_source_split_7762:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p3);
    goto corral_source_split_7763;

  corral_source_split_7763:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p4);
    goto corral_source_split_7764;

  corral_source_split_7764:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_157 := $M.131;
    cmdloc_dummy_var_158 := $M.131;
    call {:si_unique_call 1692} cmdloc_dummy_var_159 := $memcpy.i8(cmdloc_dummy_var_157, cmdloc_dummy_var_158, $p24, $p25, 8, $zext.i32.i64(4), 0 == 1);
    $M.131 := cmdloc_dummy_var_159;
    goto corral_source_split_7765;

  corral_source_split_7765:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p14, $mul.ref(0, 304)), $mul.ref(152, 1));
    goto corral_source_split_7766;

  corral_source_split_7766:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_7767;

  corral_source_split_7767:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p2);
    goto corral_source_split_7768;

  corral_source_split_7768:
    assume {:verifier.code 0} true;
    $i29 := $load.i64($M.130, $p28);
    goto corral_source_split_7769;

  corral_source_split_7769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1693} $i30 := vmci_handle_arr_remove_entry($p27, $i29);
    goto corral_source_split_7770;

  corral_source_split_7770:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p5);
    goto corral_source_split_7771;

  corral_source_split_7771:
    assume {:verifier.code 0} true;
    $M.132 := $store.i64($M.132, $p31, $i30);
    goto corral_source_split_7772;

  corral_source_split_7772:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p14, $mul.ref(0, 304)), $mul.ref(64, 1));
    goto corral_source_split_7773;

  corral_source_split_7773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1694} spin_unlock($p32);
    goto corral_source_split_7774;

  corral_source_split_7774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1695} vmci_ctx_put($p14);
    goto SeqInstr_454, SeqInstr_455;

  SeqInstr_455:
    assume assertsPassed;
    goto SeqInstr_456;

  SeqInstr_456:
    goto corral_source_split_7775;

  corral_source_split_7775:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p3);
    goto corral_source_split_7776;

  corral_source_split_7776:
    assume {:verifier.code 0} true;
    $i34 := $load.i64($M.131, $p33);
    goto corral_source_split_7777;

  corral_source_split_7777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1696} $i35 := vmci_handle_is_invalid($i34);
    goto corral_source_split_7778;

  corral_source_split_7778:
    assume {:verifier.code 0} true;
    $i36 := $zext.i1.i8($i35);
    call {:si_unique_call 1697} {:cexpr "tmp___0"} boogie_si_record_i8($i36);
    goto corral_source_split_7779;

  corral_source_split_7779:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i8.i1($i36);
    goto corral_source_split_7780;

  corral_source_split_7780:
    assume {:verifier.code 0} true;
    $i38 := (if $i37 == 1 then $sub.i32(0, 21) else 0);
    goto corral_source_split_7781;

  corral_source_split_7781:
    assume {:verifier.code 0} true;
    $i8 := $i38;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7744;

  corral_source_split_7744:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  SeqInstr_454:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_7752;

  corral_source_split_7752:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 21);
    goto $bb3;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_7746;

  corral_source_split_7746:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 2);
    goto $bb3;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_7735;

  corral_source_split_7735:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 2);
    goto $bb3;
}



const vmci_host_setup_notify: ref;

axiom vmci_host_setup_notify == $sub.ref(0, 799089);

procedure vmci_host_setup_notify($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.92, $M.93, $CurrAddr, $M.46, $M.96, $M.97, assertsPassed, $M.98;



implementation vmci_host_setup_notify($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p8: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $i13: i8;
  var $i14: i1;
  var $i15: i32;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $p27: ref;
  var $p28: ref;
  var $i7: i32;
  var vslice_dummy_var_269: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1698} {:cexpr "vmci_host_setup_notify:arg:uva"} boogie_si_record_i64($i1);
    goto corral_source_split_7783;

  corral_source_split_7783:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(296, 1));
    goto corral_source_split_7784;

  corral_source_split_7784:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_7785;

  corral_source_split_7785:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_7786;

  corral_source_split_7786:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_7787;

  corral_source_split_7787:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1700} $p8 := current_thread_info();
    goto SeqInstr_457, SeqInstr_458;

  SeqInstr_458:
    assume assertsPassed;
    goto SeqInstr_459;

  SeqInstr_459:
    goto corral_source_split_7794;

  corral_source_split_7794:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 48)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_7795;

  corral_source_split_7795:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.0, $p10);
    goto corral_source_split_7796;

  corral_source_split_7796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1701} $i12 := __chk_range_not_ok($i1, 1, $i11);
    goto corral_source_split_7797;

  corral_source_split_7797:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i8($i12);
    call {:si_unique_call 1702} {:cexpr "tmp___0"} boogie_si_record_i8($i13);
    goto corral_source_split_7798;

  corral_source_split_7798:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i8.i1($i13);
    goto corral_source_split_7799;

  corral_source_split_7799:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := 1;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_7803;

  corral_source_split_7803:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    goto corral_source_split_7804;

  corral_source_split_7804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1703} $i17 := ldv__builtin_expect($i16, 1);
    call {:si_unique_call 1704} {:cexpr "tmp___2"} boogie_si_record_i64($i17);
    goto corral_source_split_7805;

  corral_source_split_7805:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i17, 0);
    goto corral_source_split_7806;

  corral_source_split_7806:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(296, 1));
    goto corral_source_split_7810;

  corral_source_split_7810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1705} $i20 := get_user_pages_fast($i1, 1, 1, $p19);
    call {:si_unique_call 1706} {:cexpr "retval"} boogie_si_record_i32($i20);
    goto corral_source_split_7811;

  corral_source_split_7811:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 1);
    goto corral_source_split_7812;

  corral_source_split_7812:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(296, 1));
    goto corral_source_split_7818;

  corral_source_split_7818:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_7819;

  corral_source_split_7819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1707} $p25 := kmap($p24);
    goto corral_source_split_7820;

  corral_source_split_7820:
    assume {:verifier.code 0} true;
    $i26 := $and.i64($i1, 4095);
    goto corral_source_split_7821;

  corral_source_split_7821:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p25, $mul.ref($i26, 1));
    goto corral_source_split_7822;

  corral_source_split_7822:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(288, 1));
    goto corral_source_split_7823;

  corral_source_split_7823:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p28, $p27);
    goto corral_source_split_7824;

  corral_source_split_7824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1708} vmci_ctx_check_signal_notify($p0);
    goto corral_source_split_7825;

  corral_source_split_7825:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7792;

  corral_source_split_7792:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb11:
    assume $i21 == 1;
    goto corral_source_split_7814;

  corral_source_split_7814:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(296, 1));
    goto corral_source_split_7815;

  corral_source_split_7815:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p22, $0.ref);
    goto corral_source_split_7816;

  corral_source_split_7816:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 13);
    goto $bb3;

  $bb8:
    assume $i18 == 1;
    goto corral_source_split_7808;

  corral_source_split_7808:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 13);
    goto $bb3;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_7801;

  corral_source_split_7801:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb7;

  SeqInstr_457:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_7789;

  corral_source_split_7789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1699} vslice_dummy_var_269 := no_printk.ref.ref(.str.148, .str.149);
    goto corral_source_split_7790;

  corral_source_split_7790:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 9);
    goto $bb3;
}



const current_thread_info: ref;

axiom current_thread_info == $sub.ref(0, 800121);

procedure current_thread_info() returns ($r: ref);
  free requires assertsPassed;
  modifies $M.92, $M.93, $CurrAddr, $M.46, $M.96, $M.97, $M.0, assertsPassed, $M.98;



implementation current_thread_info() returns ($r: ref)
{
  var $i0: i64;
  var $i1: i64;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7827;

  corral_source_split_7827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1709} $i0 := current_top_of_stack();
    goto SeqInstr_460, SeqInstr_461;

  SeqInstr_461:
    assume assertsPassed;
    goto SeqInstr_462;

  SeqInstr_462:
    call {:si_unique_call 1710} {:cexpr "tmp"} boogie_si_record_i64($i0);
    goto corral_source_split_7828;

  corral_source_split_7828:
    assume {:verifier.code 0} true;
    $i1 := $sub.i64($i0, 32768);
    goto corral_source_split_7829;

  corral_source_split_7829:
    assume {:verifier.code 0} true;
    $p2 := $i2p.i64.ref($i1);
    goto corral_source_split_7830;

  corral_source_split_7830:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  SeqInstr_460:
    assume !assertsPassed;
    return;
}



const __chk_range_not_ok: ref;

axiom __chk_range_not_ok == $sub.ref(0, 801153);

procedure __chk_range_not_ok($i0: i64, $i1: i64, $i2: i64) returns ($r: i1);
  free requires assertsPassed;



implementation __chk_range_not_ok($i0: i64, $i1: i64, $i2: i64) returns ($r: i1)
{
  var $i3: i64;
  var $i4: i1;
  var $i6: i1;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1711} {:cexpr "__chk_range_not_ok:arg:addr"} boogie_si_record_i64($i0);
    call {:si_unique_call 1712} {:cexpr "__chk_range_not_ok:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 1713} {:cexpr "__chk_range_not_ok:arg:limit"} boogie_si_record_i64($i2);
    goto corral_source_split_7832;

  corral_source_split_7832:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i0, $i1);
    call {:si_unique_call 1714} {:cexpr "addr"} boogie_si_record_i64($i3);
    goto corral_source_split_7833;

  corral_source_split_7833:
    assume {:verifier.code 0} true;
    $i4 := $ult.i64($i3, $i1);
    goto corral_source_split_7834;

  corral_source_split_7834:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i6 := $ugt.i64($i3, $i2);
    goto corral_source_split_7840;

  corral_source_split_7840:
    assume {:verifier.code 0} true;
    $i5 := $i6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7838;

  corral_source_split_7838:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_7836;

  corral_source_split_7836:
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb3;
}



const vmci_ctx_check_signal_notify: ref;

axiom vmci_ctx_check_signal_notify == $sub.ref(0, 802185);

procedure vmci_ctx_check_signal_notify($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation vmci_ctx_check_signal_notify($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7842;

  corral_source_split_7842:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(64, 1));
    goto corral_source_split_7843;

  corral_source_split_7843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1715} spin_lock($p1);
    goto corral_source_split_7844;

  corral_source_split_7844:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(40, 1));
    goto corral_source_split_7845;

  corral_source_split_7845:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_7846;

  corral_source_split_7846:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_7847;

  corral_source_split_7847:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(64, 1));
    goto corral_source_split_7852;

  corral_source_split_7852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1717} spin_unlock($p5);
    goto corral_source_split_7853;

  corral_source_split_7853:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_7849;

  corral_source_split_7849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1716} ctx_signal_notify($p0);
    goto corral_source_split_7850;

  corral_source_split_7850:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const current_top_of_stack: ref;

axiom current_top_of_stack == $sub.ref(0, 803217);

procedure current_top_of_stack() returns ($r: i64);
  free requires assertsPassed;
  modifies $M.92, $M.93, $CurrAddr, $M.46, $M.96, $M.97, $M.0, assertsPassed, $M.98;



implementation current_top_of_stack() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1718} $i0 := devirtbounce.16(0, $add.ref($add.ref($add.ref(cpu_tss, $mul.ref(0, 8824)), $mul.ref(0, 1)), $mul.ref(8, 1)));
    goto SeqInstr_463, SeqInstr_464;

  SeqInstr_464:
    assume assertsPassed;
    goto SeqInstr_465;

  SeqInstr_465:
    call {:si_unique_call 1719} {:cexpr "pfo_ret__"} boogie_si_record_i64($i0);
    goto corral_source_split_7855;

  corral_source_split_7855:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  SeqInstr_463:
    assume !assertsPassed;
    return;
}



const vmci_ctx_set_chkpt_state: ref;

axiom vmci_ctx_set_chkpt_state == $sub.ref(0, 804249);

procedure vmci_ctx_set_chkpt_state($i0: i32, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.20, $M.21, $CurrAddr, $M.2, $M.3, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.31, $M.87, $M.6, $M.13, $M.18, $M.19, $M.69, $M.70, $M.23, $M.24, $M.25, $M.26, $M.27, $M.108, $M.110, $M.112, $M.114, $M.28, $M.33, assertsPassed, $M.29, $M.45, $M.48, $M.47, $M.89, $M.109, $M.111, $M.113, $M.115, $M.34, $M.30, $M.35, $M.46, $M.90, $M.86, $M.91, $M.44, $M.32, $M.36, $M.38, $M.40, $M.42;



implementation vmci_ctx_set_chkpt_state($i0: i32, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32)
{
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i9: i1;
  var $i11: i1;
  var $p15: ref;
  var $i16: i64;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i23: i32;
  var $i24: i1;
  var $i13: i32;
  var $i14: i32;
  var $i26: i1;
  var $i27: i32;
  var $i25: i32;
  var $i12: i32;
  var $i22: i32;
  var $i28: i1;
  var $i8: i32;
  var vslice_dummy_var_270: i32;
  var vslice_dummy_var_271: i32;
  var vslice_dummy_var_272: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1720} {:cexpr "vmci_ctx_set_chkpt_state:arg:context_id"} boogie_si_record_i32($i0);
    call {:si_unique_call 1721} {:cexpr "vmci_ctx_set_chkpt_state:arg:cpt_type"} boogie_si_record_i32($i1);
    call {:si_unique_call 1722} {:cexpr "vmci_ctx_set_chkpt_state:arg:buf_size"} boogie_si_record_i32($i2);
    goto corral_source_split_7857;

  corral_source_split_7857:
    assume {:verifier.code 0} true;
    $i4 := $udiv.i32($i2, 4);
    call {:si_unique_call 1723} {:cexpr "num_ids"} boogie_si_record_i32($i4);
    goto corral_source_split_7858;

  corral_source_split_7858:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i1, 2);
    goto corral_source_split_7859;

  corral_source_split_7859:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i1, 1);
    goto corral_source_split_7869;

  corral_source_split_7869:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i11 := $ult.i32(0, $i4);
    goto corral_source_split_7874;

  corral_source_split_7874:
    assume {:verifier.code 0} true;
    $i12 := 0;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i22 := $i12;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_7890;

  corral_source_split_7890:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i22, 0);
    goto corral_source_split_7891;

  corral_source_split_7891:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i8 := $i22;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_7867;

  corral_source_split_7867:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb25:
    assume $i28 == 1;
    goto corral_source_split_7902;

  corral_source_split_7902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1730} vslice_dummy_var_272 := no_printk.ref.i32.i32(.str.15, $i1, $i22);
    goto corral_source_split_7903;

  corral_source_split_7903:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb11:
    assume $i11 == 1;
    goto corral_source_split_7876;

  corral_source_split_7876:
    assume {:verifier.code 0} true;
    $i13, $i14 := 0, 0;
    goto $bb14;

  $bb14:
    call $p15, $i16, $p17, $i18, $i19, $i20, $i21, $i23, $i24, $i13, $i14, $i26, $i27, $i25 := vmci_ctx_set_chkpt_state_loop_$bb14($i0, $p3, $i4, $p15, $i16, $p17, $i18, $i19, $i20, $i21, $i23, $i24, $i13, $i14, $i26, $i27, $i25);
    goto $bb14_last;

  corral_source_split_7878:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i13, 0);
    goto corral_source_split_7879;

  corral_source_split_7879:
    assume {:verifier.code 0} true;
    $i27 := $i13;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_7900;

  corral_source_split_7900:
    assume {:verifier.code 0} true;
    $i12 := $i27;
    goto $bb13;

  $bb22:
    assume $i26 == 1;
    goto corral_source_split_7898;

  corral_source_split_7898:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p3);
    goto corral_source_split_7881;

  corral_source_split_7881:
    assume {:verifier.code 0} true;
    $i16 := $zext.i32.i64($i14);
    goto corral_source_split_7882;

  corral_source_split_7882:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p15, $mul.ref($i16, 4));
    goto corral_source_split_7883;

  corral_source_split_7883:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    call {:si_unique_call 1726} {:cexpr "current_id"} boogie_si_record_i32($i18);
    goto corral_source_split_7884;

  corral_source_split_7884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1727} $i19 := vmci_ctx_add_notification($i0, $i18);
    goto SeqInstr_466, SeqInstr_467;

  SeqInstr_467:
    assume assertsPassed;
    goto SeqInstr_468;

  SeqInstr_468:
    call {:si_unique_call 1728} {:cexpr "result"} boogie_si_record_i32($i19);
    goto corral_source_split_7885;

  corral_source_split_7885:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_7886;

  corral_source_split_7886:
    assume {:verifier.code 0} true;
    $i21 := $i19;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i23 := $add.i32($i14, 1);
    call {:si_unique_call 1729} {:cexpr "i"} boogie_si_record_i32($i23);
    goto corral_source_split_7893;

  corral_source_split_7893:
    assume {:verifier.code 0} true;
    $i24 := $ult.i32($i23, $i4);
    goto corral_source_split_7894;

  corral_source_split_7894:
    assume {:verifier.code 0} true;
    $i25 := $i19;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_7896;

  corral_source_split_7896:
    assume {:verifier.code 0} true;
    $i12 := $i25;
    goto $bb13;

  $bb20:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    $i13, $i14 := $i19, $i23;
    goto $bb20_dummy;

  $bb16:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_7888;

  corral_source_split_7888:
    assume {:verifier.code 0} true;
    $i22 := $i21;
    goto $bb18;

  SeqInstr_466:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i9 == 1;
    goto corral_source_split_7871;

  corral_source_split_7871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1725} vslice_dummy_var_271 := no_printk.ref.i32(.str.13, $i1);
    goto corral_source_split_7872;

  corral_source_split_7872:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 2);
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_7861;

  corral_source_split_7861:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i4, 0);
    goto corral_source_split_7862;

  corral_source_split_7862:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_7864;

  corral_source_split_7864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1724} vslice_dummy_var_270 := printk.ref(.str.14);
    goto corral_source_split_7865;

  corral_source_split_7865:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 30);
    goto $bb6;

  $bb20_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7878;
}



const vmci_ctx_add_notification: ref;

axiom vmci_ctx_add_notification == $sub.ref(0, 805281);

procedure vmci_ctx_add_notification($i0: i32, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.20, $M.21, $CurrAddr, $M.2, $M.3, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.31, $M.87, $M.6, $M.13, $M.18, $M.19, $M.69, $M.70, $M.23, $M.24, $M.25, $M.26, $M.27, $M.108, $M.110, $M.112, $M.114, $M.28, $M.33, assertsPassed, $M.29, $M.45, $M.48, $M.47, $M.89, $M.109, $M.111, $M.113, $M.115, $M.34, $M.30, $M.35, $M.46, $M.90, $M.86, $M.91, $M.44, $M.32, $M.36, $M.38, $M.40, $M.42;



implementation vmci_ctx_add_notification($i0: i32, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $p42: ref;
  var $i43: i64;
  var $i44: i1;
  var $i45: i8;
  var $i46: i1;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i64;
  var $i54: i1;
  var $p37: ref;
  var $i47: i8;
  var $i55: i1;
  var $p56: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i32;
  var $i62: i32;
  var $p63: ref;
  var $i57: i32;
  var $p64: ref;
  var $i12: i32;
  var $i6: i32;
  var cmdloc_dummy_var_160: [ref]i8;
  var cmdloc_dummy_var_161: [ref]i8;
  var cmdloc_dummy_var_162: [ref]i8;
  var vslice_dummy_var_273: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1731} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 1732} {:cexpr "vmci_ctx_add_notification:arg:context_id"} boogie_si_record_i32($i0);
    call {:si_unique_call 1733} {:cexpr "vmci_ctx_add_notification:arg:remote_cid"} boogie_si_record_i32($i1);
    goto corral_source_split_7905;

  corral_source_split_7905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1734} $p3 := vmci_ctx_get($i0);
    goto corral_source_split_7906;

  corral_source_split_7906:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_7907;

  corral_source_split_7907:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_7908;

  corral_source_split_7908:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i0, $sub.i32(0, 1));
    goto corral_source_split_7914;

  corral_source_split_7914:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 304)), $mul.ref(272, 1));
    goto corral_source_split_7931;

  corral_source_split_7931:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_7932;

  corral_source_split_7932:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i14, 1);
    goto corral_source_split_7933;

  corral_source_split_7933:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_7934;

  corral_source_split_7934:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1737} $p17 := kmalloc(24, 208);
    goto corral_source_split_7938;

  corral_source_split_7938:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_7939;

  corral_source_split_7939:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_7940;

  corral_source_split_7940:
    assume {:verifier.code 0} true;
    $i20 := $eq.i64($i19, 0);
    goto corral_source_split_7941;

  corral_source_split_7941:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p18, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_7945;

  corral_source_split_7945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1738} INIT_LIST_HEAD($p21);
    goto corral_source_split_7946;

  corral_source_split_7946:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_7947;

  corral_source_split_7947:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p22, $i1);
    goto corral_source_split_7948;

  corral_source_split_7948:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_7949;

  corral_source_split_7949:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, 0);
    goto corral_source_split_7950;

  corral_source_split_7950:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p18, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_7951;

  corral_source_split_7951:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_7952;

  corral_source_split_7952:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p2);
    goto corral_source_split_7953;

  corral_source_split_7953:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_160 := $M.0;
    cmdloc_dummy_var_161 := $M.0;
    call {:si_unique_call 1739} cmdloc_dummy_var_162 := $memcpy.i8(cmdloc_dummy_var_160, cmdloc_dummy_var_161, $p25, $p26, 8, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_162;
    goto corral_source_split_7954;

  corral_source_split_7954:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p3, $mul.ref(0, 304)), $mul.ref(64, 1));
    goto corral_source_split_7955;

  corral_source_split_7955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1740} spin_lock($p27);
    goto corral_source_split_7956;

  corral_source_split_7956:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 304)), $mul.ref(160, 1)), $mul.ref(0, 1));
    goto corral_source_split_7957;

  corral_source_split_7957:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_7958;

  corral_source_split_7958:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_7959;

  corral_source_split_7959:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_7960;

  corral_source_split_7960:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p32);
    goto corral_source_split_7961;

  corral_source_split_7961:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p3, $mul.ref(0, 304)), $mul.ref(160, 1));
    goto corral_source_split_7962;

  corral_source_split_7962:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    goto corral_source_split_7963;

  corral_source_split_7963:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i33, $i35);
    goto corral_source_split_7964;

  corral_source_split_7964:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i47 := 0;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_7982;

  corral_source_split_7982:
    assume {:verifier.code 0} true;
    $i55 := $trunc.i8.i1($i47);
    goto corral_source_split_7983;

  corral_source_split_7983:
    assume {:verifier.code 0} true;
    assume {:branchcond $i55} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i55 == 1);
    goto corral_source_split_7998;

  corral_source_split_7998:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p18, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_7999;

  corral_source_split_7999:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p3, $mul.ref(0, 304)), $mul.ref(160, 1));
    goto corral_source_split_8000;

  corral_source_split_8000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1744} list_add_tail_rcu($p58, $p59);
    goto corral_source_split_8001;

  corral_source_split_8001:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p3, $mul.ref(0, 304)), $mul.ref(176, 1));
    goto corral_source_split_8002;

  corral_source_split_8002:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.0, $p60);
    goto corral_source_split_8003;

  corral_source_split_8003:
    assume {:verifier.code 0} true;
    $i62 := $add.i32($i61, 1);
    goto corral_source_split_8004;

  corral_source_split_8004:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p3, $mul.ref(0, 304)), $mul.ref(176, 1));
    goto corral_source_split_8005;

  corral_source_split_8005:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p63, $i62);
    assume {:verifier.code 0} true;
    $i57 := 0;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_8007;

  corral_source_split_8007:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p3, $mul.ref(0, 304)), $mul.ref(64, 1));
    goto corral_source_split_8008;

  corral_source_split_8008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1745} spin_unlock($p64);
    goto corral_source_split_8009;

  corral_source_split_8009:
    assume {:verifier.code 0} true;
    $i12 := $i57;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_7928;

  corral_source_split_7928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1736} vmci_ctx_put($p3);
    goto SeqInstr_469, SeqInstr_470;

  SeqInstr_470:
    assume assertsPassed;
    goto SeqInstr_471;

  SeqInstr_471:
    goto corral_source_split_7929;

  corral_source_split_7929:
    assume {:verifier.code 0} true;
    $i6 := $i12;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7912;

  corral_source_split_7912:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  SeqInstr_469:
    assume !assertsPassed;
    return;

  $bb34:
    assume $i55 == 1;
    goto corral_source_split_7994;

  corral_source_split_7994:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p18);
    goto corral_source_split_7995;

  corral_source_split_7995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1743} kfree($p56);
    goto corral_source_split_7996;

  corral_source_split_7996:
    assume {:verifier.code 0} true;
    $i57 := $sub.i32(0, 22);
    goto $bb36;

  $bb22:
    assume $i36 == 1;
    goto corral_source_split_7966;

  corral_source_split_7966:
    assume {:verifier.code 0} true;
    $p37 := $p30;
    goto $bb25;

  $bb25:
    call $p38, $p39, $p40, $i41, $p42, $i43, $i44, $i45, $i46, $p49, $p50, $p51, $p52, $i53, $i54, $p37 := vmci_ctx_add_notification_loop_$bb25($p18, $i35, $p38, $p39, $p40, $i41, $p42, $i43, $i44, $i45, $i46, $p49, $p50, $p51, $p52, $i53, $i54, $p37);
    goto $bb25_last;

  corral_source_split_7968:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_7970;

  corral_source_split_7970:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p18, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_7971;

  corral_source_split_7971:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p38);
    goto corral_source_split_7972;

  corral_source_split_7972:
    assume {:verifier.code 0} true;
    $i41 := $load.i64($M.0, $p40);
    goto corral_source_split_7973;

  corral_source_split_7973:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p39);
    goto corral_source_split_7974;

  corral_source_split_7974:
    assume {:verifier.code 0} true;
    $i43 := $load.i64($M.0, $p42);
    goto corral_source_split_7975;

  corral_source_split_7975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1741} $i44 := vmci_handle_is_equal($i41, $i43);
    goto corral_source_split_7976;

  corral_source_split_7976:
    assume {:verifier.code 0} true;
    $i45 := $zext.i1.i8($i44);
    call {:si_unique_call 1742} {:cexpr "tmp___0"} boogie_si_record_i8($i45);
    goto corral_source_split_7977;

  corral_source_split_7977:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i8.i1($i45);
    goto corral_source_split_7978;

  corral_source_split_7978:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p37, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_7985;

  corral_source_split_7985:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_7986;

  corral_source_split_7986:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p50);
    goto corral_source_split_7987;

  corral_source_split_7987:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p51, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_7988;

  corral_source_split_7988:
    assume {:verifier.code 0} true;
    $i53 := $p2i.ref.i64($p52);
    goto corral_source_split_7989;

  corral_source_split_7989:
    assume {:verifier.code 0} true;
    $i54 := $ne.i64($i53, $i35);
    goto corral_source_split_7990;

  corral_source_split_7990:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i54 == 1);
    goto corral_source_split_7992;

  corral_source_split_7992:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb31:
    assume $i54 == 1;
    assume {:verifier.code 0} true;
    $p37 := $p50;
    goto $bb31_dummy;

  $bb27:
    assume $i46 == 1;
    goto corral_source_split_7980;

  corral_source_split_7980:
    assume {:verifier.code 0} true;
    $i47 := 1;
    goto $bb29;

  $bb19:
    assume $i20 == 1;
    goto corral_source_split_7943;

  corral_source_split_7943:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 3);
    goto $bb14;

  $bb16:
    assume $i16 == 1;
    goto corral_source_split_7936;

  corral_source_split_7936:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 7);
    goto $bb14;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_7916;

  corral_source_split_7916:
    assume {:verifier.code 0} true;
    $i8 := $ugt.i32($i0, 2);
    goto corral_source_split_7917;

  corral_source_split_7917:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb7;

  $bb8:
    assume $i8 == 1;
    goto corral_source_split_7919;

  corral_source_split_7919:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i1, $sub.i32(0, 1));
    goto corral_source_split_7920;

  corral_source_split_7920:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb7;

  $bb10:
    assume $i9 == 1;
    goto corral_source_split_7922;

  corral_source_split_7922:
    assume {:verifier.code 0} true;
    $i10 := $ugt.i32($i1, 2);
    goto corral_source_split_7923;

  corral_source_split_7923:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb7;

  $bb12:
    assume $i10 == 1;
    goto corral_source_split_7925;

  corral_source_split_7925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1735} vslice_dummy_var_273 := no_printk.ref.i32.i32(.str.12, $i0, $i1);
    goto corral_source_split_7926;

  corral_source_split_7926:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 10);
    goto $bb14;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_7910;

  corral_source_split_7910:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 21);
    goto $bb3;

  $bb31_dummy:
    assume false;
    return;

  $bb25_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_7968;
}



const list_add_tail_rcu: ref;

axiom list_add_tail_rcu == $sub.ref(0, 806313);

procedure list_add_tail_rcu($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add_tail_rcu($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8011;

  corral_source_split_8011:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_8012;

  corral_source_split_8012:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_8013;

  corral_source_split_8013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1746} __list_add_rcu($p0, $p3, $p1);
    goto corral_source_split_8014;

  corral_source_split_8014:
    assume {:verifier.code 0} true;
    return;
}



const vmci_ctx_get_chkpt_state: ref;

axiom vmci_ctx_get_chkpt_state == $sub.ref(0, 807345);

procedure vmci_ctx_get_chkpt_state($i0: i32, $i1: i32, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.124, $CurrAddr, $M.2, $M.3, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.31, $M.87, $M.6, $M.13, $M.20, $M.21, $M.18, $M.19, $M.69, $M.70, $M.23, $M.24, $M.25, $M.26, $M.27, $M.108, $M.110, $M.112, $M.114, $M.28, $M.33, assertsPassed, $M.29, $M.45, $M.48, $M.47, $M.89, $M.109, $M.111, $M.113, $M.115, $M.34, $M.30, $M.35, $M.46, $M.90, $M.86, $M.91, $M.44, $M.32, $M.36, $M.38, $M.40, $M.42;



implementation vmci_ctx_get_chkpt_state($i0: i32, $i1: i32, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i32;
  var $i16: i32;
  var $i15: i32;
  var $p18: ref;
  var $i7: i32;
  var vslice_dummy_var_274: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1747} {:cexpr "vmci_ctx_get_chkpt_state:arg:context_id"} boogie_si_record_i32($i0);
    call {:si_unique_call 1748} {:cexpr "vmci_ctx_get_chkpt_state:arg:cpt_type"} boogie_si_record_i32($i1);
    goto corral_source_split_8016;

  corral_source_split_8016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1749} $p4 := vmci_ctx_get($i0);
    goto corral_source_split_8017;

  corral_source_split_8017:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_8018;

  corral_source_split_8018:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_8019;

  corral_source_split_8019:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 304)), $mul.ref(64, 1));
    goto corral_source_split_8025;

  corral_source_split_8025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1750} spin_lock($p8);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i1, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i1, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i1, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1757} vslice_dummy_var_274 := no_printk.ref.i32(.str.13, $i1);
    goto corral_source_split_8042;

  corral_source_split_8042:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 2);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_8037;

  corral_source_split_8037:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p4, $mul.ref(0, 304)), $mul.ref(64, 1));
    goto corral_source_split_8038;

  corral_source_split_8038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1755} spin_unlock($p18);
    goto corral_source_split_8039;

  corral_source_split_8039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1756} vmci_ctx_put($p4);
    goto SeqInstr_472, SeqInstr_473;

  SeqInstr_473:
    assume assertsPassed;
    goto SeqInstr_474;

  SeqInstr_474:
    goto corral_source_split_8040;

  corral_source_split_8040:
    assume {:verifier.code 0} true;
    $i7 := $i15;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8023;

  corral_source_split_8023:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  SeqInstr_472:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i11 == 1;
    goto corral_source_split_8027;

  corral_source_split_8027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1751} $i16 := vmci_ctx_get_chkpt_doorbells($p4, $p2, $p3);
    call {:si_unique_call 1752} {:cexpr "result"} boogie_si_record_i32($i16);
    goto corral_source_split_8028;

  corral_source_split_8028:
    assume {:verifier.code 0} true;
    $i15 := $i16;
    goto $bb17;

  $bb8:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i1, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb12;

  $bb13:
    assume $i12 == 1;
    goto corral_source_split_8030;

  corral_source_split_8030:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 0);
    goto corral_source_split_8031;

  corral_source_split_8031:
    assume {:verifier.code 0} true;
    $M.124 := $store.ref($M.124, $p3, $0.ref);
    goto corral_source_split_8032;

  corral_source_split_8032:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb17;

  $bb6:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i1, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb12;

  $bb15:
    assume $i13 == 1;
    goto corral_source_split_8034;

  corral_source_split_8034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1753} $i14 := vmci_ctx_get_chkpt_notifiers($p4, $p2, $p3);
    call {:si_unique_call 1754} {:cexpr "result"} boogie_si_record_i32($i14);
    goto corral_source_split_8035;

  corral_source_split_8035:
    assume {:verifier.code 0} true;
    $i15 := $i14;
    goto $bb17;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_8021;

  corral_source_split_8021:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 21);
    goto $bb3;
}



const vmci_ctx_get_chkpt_notifiers: ref;

axiom vmci_ctx_get_chkpt_notifiers == $sub.ref(0, 808377);

procedure vmci_ctx_get_chkpt_notifiers($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.124, $CurrAddr;



implementation vmci_ctx_get_chkpt_notifiers($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i32;
  var $i12: i64;
  var $i13: i1;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $i30: i32;
  var $p32: ref;
  var $i33: i32;
  var $i34: i64;
  var $p35: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i1;
  var $i28: i32;
  var $p29: ref;
  var $i43: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8044;

  corral_source_split_8044:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(176, 1));
    goto corral_source_split_8045;

  corral_source_split_8045:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_8046;

  corral_source_split_8046:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_8047;

  corral_source_split_8047:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(176, 1));
    goto corral_source_split_8055;

  corral_source_split_8055:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_8056;

  corral_source_split_8056:
    assume {:verifier.code 0} true;
    $i9 := $zext.i32.i64($i8);
    goto corral_source_split_8057;

  corral_source_split_8057:
    assume {:verifier.code 0} true;
    $i10 := $mul.i64($i9, 4);
    call {:si_unique_call 1758} {:cexpr "data_size"} boogie_si_record_i64($i10);
    goto corral_source_split_8058;

  corral_source_split_8058:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p1);
    goto corral_source_split_8059;

  corral_source_split_8059:
    assume {:verifier.code 0} true;
    $i12 := $zext.i32.i64($i11);
    goto corral_source_split_8060;

  corral_source_split_8060:
    assume {:verifier.code 0} true;
    $i13 := $ult.i64($i12, $i10);
    goto corral_source_split_8061;

  corral_source_split_8061:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1759} $p15 := kmalloc($i10, 32);
    goto corral_source_split_8067;

  corral_source_split_8067:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_8068;

  corral_source_split_8068:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_8069;

  corral_source_split_8069:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i17, 0);
    goto corral_source_split_8070;

  corral_source_split_8070:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(160, 1)), $mul.ref(0, 1));
    goto corral_source_split_8074;

  corral_source_split_8074:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_8075;

  corral_source_split_8075:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_8076;

  corral_source_split_8076:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_8077;

  corral_source_split_8077:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_8078;

  corral_source_split_8078:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(160, 1));
    goto corral_source_split_8079;

  corral_source_split_8079:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    goto corral_source_split_8080;

  corral_source_split_8080:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i24, $i26);
    goto corral_source_split_8081;

  corral_source_split_8081:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i43 := $trunc.i64.i32($i10);
    goto corral_source_split_8102;

  corral_source_split_8102:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1, $i43);
    goto corral_source_split_8103;

  corral_source_split_8103:
    assume {:verifier.code 0} true;
    goto corral_source_split_8104;

  corral_source_split_8104:
    assume {:verifier.code 0} true;
    $M.124 := $store.ref($M.124, $p2, $p15);
    goto corral_source_split_8105;

  corral_source_split_8105:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8053;

  corral_source_split_8053:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb11:
    assume $i27 == 1;
    goto corral_source_split_8083;

  corral_source_split_8083:
    assume {:verifier.code 0} true;
    $i28, $p29 := 0, $p21;
    goto $bb14;

  $bb14:
    call $i30, $p32, $i33, $i34, $p35, $p37, $p38, $p39, $p40, $i41, $i42, $i28, $p29 := vmci_ctx_get_chkpt_notifiers_loop_$bb14($p16, $i26, $i30, $p32, $i33, $i34, $p35, $p37, $p38, $p39, $p40, $i41, $i42, $i28, $p29);
    goto $bb14_last;

  corral_source_split_8085:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i30 := $add.i32($i28, 1);
    call {:si_unique_call 1760} {:cexpr "i"} boogie_si_record_i32($i30);
    goto corral_source_split_8087;

  corral_source_split_8087:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p29, $mul.ref(0, 24)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_8088;

  corral_source_split_8088:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_8089;

  corral_source_split_8089:
    assume {:verifier.code 0} true;
    $i34 := $sext.i32.i64($i28);
    goto corral_source_split_8090;

  corral_source_split_8090:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($p16, $mul.ref($i34, 4));
    goto corral_source_split_8091;

  corral_source_split_8091:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p35, $i33);
    goto corral_source_split_8092;

  corral_source_split_8092:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p29, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_8093;

  corral_source_split_8093:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_8094;

  corral_source_split_8094:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_8095;

  corral_source_split_8095:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_8096;

  corral_source_split_8096:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p40);
    goto corral_source_split_8097;

  corral_source_split_8097:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, $i26);
    goto corral_source_split_8098;

  corral_source_split_8098:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i42 == 1);
    goto corral_source_split_8100;

  corral_source_split_8100:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb16:
    assume $i42 == 1;
    assume {:verifier.code 0} true;
    $i28, $p29 := $i30, $p38;
    goto $bb16_dummy;

  $bb8:
    assume $i18 == 1;
    goto corral_source_split_8072;

  corral_source_split_8072:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 3);
    goto $bb3;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_8063;

  corral_source_split_8063:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i64.i32($i10);
    goto corral_source_split_8064;

  corral_source_split_8064:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1, $i14);
    goto corral_source_split_8065;

  corral_source_split_8065:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 5);
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_8049;

  corral_source_split_8049:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1, 0);
    goto corral_source_split_8050;

  corral_source_split_8050:
    assume {:verifier.code 0} true;
    $M.124 := $store.ref($M.124, $p2, $0.ref);
    goto corral_source_split_8051;

  corral_source_split_8051:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb16_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8085;
}



const vmci_ctx_get_chkpt_doorbells: ref;

axiom vmci_ctx_get_chkpt_doorbells == $sub.ref(0, 809409);

procedure vmci_ctx_get_chkpt_doorbells($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.124, $CurrAddr;



implementation vmci_ctx_get_chkpt_doorbells($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $i8: i64;
  var $i9: i32;
  var $i10: i64;
  var $i11: i1;
  var $i12: i32;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $i18: i1;
  var $i20: i64;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i64;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i64;
  var $i32: i1;
  var $i19: i32;
  var $i33: i32;
  var $i13: i32;
  var cmdloc_dummy_var_163: [ref]i8;
  var cmdloc_dummy_var_164: [ref]i8;
  var cmdloc_dummy_var_165: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1761} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_8107;

  corral_source_split_8107:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(144, 1));
    goto corral_source_split_8108;

  corral_source_split_8108:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_8109;

  corral_source_split_8109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1762} $i6 := vmci_handle_arr_get_size($p5);
    call {:si_unique_call 1763} {:cexpr "n_doorbells"} boogie_si_record_i64($i6);
    goto corral_source_split_8110;

  corral_source_split_8110:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_8111;

  corral_source_split_8111:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    goto corral_source_split_8119;

  corral_source_split_8119:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1, 0);
    goto corral_source_split_8120;

  corral_source_split_8120:
    assume {:verifier.code 0} true;
    $M.124 := $store.ref($M.124, $p2, $0.ref);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_8126;

  corral_source_split_8126:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_8113;

  corral_source_split_8113:
    assume {:verifier.code 0} true;
    $i8 := $mul.i64($i6, 16);
    call {:si_unique_call 1764} {:cexpr "data_size"} boogie_si_record_i64($i8);
    goto corral_source_split_8114;

  corral_source_split_8114:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p1);
    goto corral_source_split_8115;

  corral_source_split_8115:
    assume {:verifier.code 0} true;
    $i10 := $zext.i32.i64($i9);
    goto corral_source_split_8116;

  corral_source_split_8116:
    assume {:verifier.code 0} true;
    $i11 := $ult.i64($i10, $i8);
    goto corral_source_split_8117;

  corral_source_split_8117:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1765} $p14 := kmalloc($i8, 32);
    goto corral_source_split_8128;

  corral_source_split_8128:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_8129;

  corral_source_split_8129:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_8130;

  corral_source_split_8130:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i16, 0);
    goto corral_source_split_8131;

  corral_source_split_8131:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i18 := $ult.i64(0, $i6);
    goto corral_source_split_8135;

  corral_source_split_8135:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i64.i32($i8);
    goto corral_source_split_8159;

  corral_source_split_8159:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1, $i33);
    goto corral_source_split_8160;

  corral_source_split_8160:
    assume {:verifier.code 0} true;
    goto corral_source_split_8161;

  corral_source_split_8161:
    assume {:verifier.code 0} true;
    $M.124 := $store.ref($M.124, $p2, $p14);
    goto corral_source_split_8162;

  corral_source_split_8162:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb10:
    assume $i18 == 1;
    goto corral_source_split_8137;

  corral_source_split_8137:
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb13;

  $bb13:
    call $i20, $p22, $p23, $p24, $i25, $i26, $p27, $p28, $p29, $i30, $i31, $i32, $i19, cmdloc_dummy_var_163, cmdloc_dummy_var_164, cmdloc_dummy_var_165 := vmci_ctx_get_chkpt_doorbells_loop_$bb13($p0, $p3, $i6, $p15, $i20, $p22, $p23, $p24, $i25, $i26, $p27, $p28, $p29, $i30, $i31, $i32, $i19, cmdloc_dummy_var_163, cmdloc_dummy_var_164, cmdloc_dummy_var_165);
    goto $bb13_last;

  corral_source_split_8139:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_8141;

  corral_source_split_8141:
    assume {:verifier.code 0} true;
    goto corral_source_split_8142;

  corral_source_split_8142:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p15, $mul.ref($i20, 16)), $mul.ref(0, 1));
    goto corral_source_split_8143;

  corral_source_split_8143:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(144, 1));
    goto corral_source_split_8144;

  corral_source_split_8144:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_8145;

  corral_source_split_8145:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i19);
    goto corral_source_split_8146;

  corral_source_split_8146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1766} $i26 := vmci_handle_arr_get_entry($p24, $i25);
    goto corral_source_split_8147;

  corral_source_split_8147:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p3);
    goto corral_source_split_8148;

  corral_source_split_8148:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p27, $i26);
    goto corral_source_split_8149;

  corral_source_split_8149:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p22);
    goto corral_source_split_8150;

  corral_source_split_8150:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p3);
    goto corral_source_split_8151;

  corral_source_split_8151:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_163 := $M.0;
    cmdloc_dummy_var_164 := $M.0;
    call {:si_unique_call 1767} cmdloc_dummy_var_165 := $memcpy.i8(cmdloc_dummy_var_163, cmdloc_dummy_var_164, $p28, $p29, 8, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_165;
    goto corral_source_split_8152;

  corral_source_split_8152:
    assume {:verifier.code 0} true;
    $i30 := $add.i32($i19, 1);
    call {:si_unique_call 1768} {:cexpr "i"} boogie_si_record_i32($i30);
    goto corral_source_split_8153;

  corral_source_split_8153:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i30);
    goto corral_source_split_8154;

  corral_source_split_8154:
    assume {:verifier.code 0} true;
    $i32 := $ult.i64($i31, $i6);
    goto corral_source_split_8155;

  corral_source_split_8155:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i32 == 1);
    goto corral_source_split_8157;

  corral_source_split_8157:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb15:
    assume $i32 == 1;
    assume {:verifier.code 0} true;
    $i19 := $i30;
    goto $bb15_dummy;

  $bb7:
    assume $i17 == 1;
    goto corral_source_split_8133;

  corral_source_split_8133:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 3);
    goto $bb5;

  $bb3:
    assume $i11 == 1;
    goto corral_source_split_8122;

  corral_source_split_8122:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i64.i32($i8);
    goto corral_source_split_8123;

  corral_source_split_8123:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1, $i12);
    goto corral_source_split_8124;

  corral_source_split_8124:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 5);
    goto $bb5;

  $bb15_dummy:
    assume false;
    return;

  $bb13_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_8139;
}



const vmci_ctx_remove_notification: ref;

axiom vmci_ctx_remove_notification == $sub.ref(0, 810441);

procedure vmci_ctx_remove_notification($i0: i32, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.133, $M.20, $M.21, $CurrAddr, $M.2, $M.3, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.31, $M.87, $M.6, $M.13, $M.18, $M.19, $M.69, $M.70, $M.23, $M.24, $M.25, $M.26, $M.27, $M.108, $M.110, $M.112, $M.114, $M.28, $M.33, assertsPassed, $M.29, $M.45, $M.48, $M.47, $M.89, $M.109, $M.111, $M.113, $M.115, $M.34, $M.30, $M.35, $M.46, $M.90, $M.86, $M.91, $M.44, $M.32, $M.36, $M.38, $M.40, $M.42;



implementation vmci_ctx_remove_notification($i0: i32, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p18: ref;
  var $p19: ref;
  var $p21: ref;
  var $i22: i64;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;
  var $i35: i8;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i32;
  var $p42: ref;
  var $p46: ref;
  var $p47: ref;
  var $p49: ref;
  var $i50: i64;
  var $i51: i1;
  var $p27: ref;
  var $p28: ref;
  var $p52: ref;
  var $p26: ref;
  var $p43: ref;
  var $i44: i8;
  var $p53: ref;
  var $i54: i1;
  var $p55: ref;
  var $i56: i1;
  var $i57: i32;
  var $i7: i32;
  var cmdloc_dummy_var_166: [ref]i8;
  var cmdloc_dummy_var_167: [ref]i8;
  var cmdloc_dummy_var_168: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1769} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1770} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 1771} {:cexpr "vmci_ctx_remove_notification:arg:context_id"} boogie_si_record_i32($i0);
    call {:si_unique_call 1772} {:cexpr "vmci_ctx_remove_notification:arg:remote_cid"} boogie_si_record_i32($i1);
    goto corral_source_split_8164;

  corral_source_split_8164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1773} $p4 := vmci_ctx_get($i0);
    goto corral_source_split_8165;

  corral_source_split_8165:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_8166;

  corral_source_split_8166:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_8167;

  corral_source_split_8167:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_8173;

  corral_source_split_8173:
    assume {:verifier.code 0} true;
    $M.133 := $store.i32($M.133, $p8, $i1);
    goto corral_source_split_8174;

  corral_source_split_8174:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_8175;

  corral_source_split_8175:
    assume {:verifier.code 0} true;
    $M.133 := $store.i32($M.133, $p9, 0);
    goto corral_source_split_8176;

  corral_source_split_8176:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_8177;

  corral_source_split_8177:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p3);
    goto corral_source_split_8178;

  corral_source_split_8178:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_166 := $M.133;
    cmdloc_dummy_var_167 := $M.133;
    call {:si_unique_call 1774} cmdloc_dummy_var_168 := $memcpy.i8(cmdloc_dummy_var_166, cmdloc_dummy_var_167, $p10, $p11, 8, $zext.i32.i64(4), 0 == 1);
    $M.133 := cmdloc_dummy_var_168;
    goto corral_source_split_8179;

  corral_source_split_8179:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 304)), $mul.ref(64, 1));
    goto corral_source_split_8180;

  corral_source_split_8180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1775} spin_lock($p12);
    goto corral_source_split_8181;

  corral_source_split_8181:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 304)), $mul.ref(160, 1)), $mul.ref(0, 1));
    goto corral_source_split_8182;

  corral_source_split_8182:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_8183;

  corral_source_split_8183:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_8184;

  corral_source_split_8184:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p16, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_8185;

  corral_source_split_8185:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_8186;

  corral_source_split_8186:
    assume {:verifier.code 0} true;
    goto corral_source_split_8187;

  corral_source_split_8187:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p16, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_8188;

  corral_source_split_8188:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_8189;

  corral_source_split_8189:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p4, $mul.ref(0, 304)), $mul.ref(160, 1));
    goto corral_source_split_8190;

  corral_source_split_8190:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_8191;

  corral_source_split_8191:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i22, $i24);
    goto corral_source_split_8192;

  corral_source_split_8192:
    assume {:verifier.code 0} true;
    $p26 := $p15;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p43, $i44 := $p26, 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8216;

  corral_source_split_8216:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p4, $mul.ref(0, 304)), $mul.ref(64, 1));
    goto corral_source_split_8217;

  corral_source_split_8217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1779} spin_unlock($p53);
    goto corral_source_split_8218;

  corral_source_split_8218:
    assume {:verifier.code 0} true;
    $i54 := $trunc.i8.i1($i44);
    goto corral_source_split_8219;

  corral_source_split_8219:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1782} vmci_ctx_put($p4);
    goto SeqInstr_475, SeqInstr_476;

  SeqInstr_476:
    assume assertsPassed;
    goto SeqInstr_477;

  SeqInstr_477:
    goto corral_source_split_8235;

  corral_source_split_8235:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i8.i1($i44);
    goto corral_source_split_8236;

  corral_source_split_8236:
    assume {:verifier.code 0} true;
    $i57 := (if $i56 == 1 then 0 else $sub.i32(0, 21));
    goto corral_source_split_8237;

  corral_source_split_8237:
    assume {:verifier.code 0} true;
    $i7 := $i57;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8171;

  corral_source_split_8171:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  SeqInstr_475:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i54 == 1;
    goto corral_source_split_8230;

  corral_source_split_8230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1780} synchronize_rcu();
    goto corral_source_split_8231;

  corral_source_split_8231:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p43);
    goto corral_source_split_8232;

  corral_source_split_8232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1781} kfree($p55);
    goto corral_source_split_8233;

  corral_source_split_8233:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb5:
    assume $i25 == 1;
    goto corral_source_split_8194;

  corral_source_split_8194:
    assume {:verifier.code 0} true;
    $p27, $p28 := $p19, $p15;
    goto $bb8;

  $bb8:
    call $p29, $p30, $i31, $p32, $i33, $i34, $i35, $i36, $p37, $p46, $p47, $p49, $i50, $i51, $p27, $p28, $p52 := vmci_ctx_remove_notification_loop_$bb8($p2, $i24, $p29, $p30, $i31, $p32, $i33, $i34, $i35, $i36, $p37, $p46, $p47, $p49, $i50, $i51, $p27, $p28, $p52);
    goto $bb8_last;

  corral_source_split_8196:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_8198;

  corral_source_split_8198:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_8199;

  corral_source_split_8199:
    assume {:verifier.code 0} true;
    $i31 := $load.i64($M.0, $p30);
    goto corral_source_split_8200;

  corral_source_split_8200:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p2);
    goto corral_source_split_8201;

  corral_source_split_8201:
    assume {:verifier.code 0} true;
    $i33 := $load.i64($M.133, $p32);
    goto corral_source_split_8202;

  corral_source_split_8202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1776} $i34 := vmci_handle_is_equal($i31, $i33);
    goto corral_source_split_8203;

  corral_source_split_8203:
    assume {:verifier.code 0} true;
    $i35 := $zext.i1.i8($i34);
    call {:si_unique_call 1777} {:cexpr "tmp___0"} boogie_si_record_i8($i35);
    goto corral_source_split_8204;

  corral_source_split_8204:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i8.i1($i35);
    goto corral_source_split_8205;

  corral_source_split_8205:
    assume {:verifier.code 0} true;
    $p37 := $p28;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p27, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_8221;

  corral_source_split_8221:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_8222;

  corral_source_split_8222:
    assume {:verifier.code 0} true;
    goto corral_source_split_8223;

  corral_source_split_8223:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p27, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_8224;

  corral_source_split_8224:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p49);
    goto corral_source_split_8225;

  corral_source_split_8225:
    assume {:verifier.code 0} true;
    $i51 := $ne.i64($i50, $i24);
    goto corral_source_split_8226;

  corral_source_split_8226:
    assume {:verifier.code 0} true;
    $p52 := $p27;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_8228;

  corral_source_split_8228:
    assume {:verifier.code 0} true;
    $p26 := $p52;
    goto $bb7;

  $bb14:
    assume $i51 == 1;
    assume {:verifier.code 0} true;
    $p27, $p28 := $p47, $p27;
    goto $bb14_dummy;

  $bb10:
    assume $i36 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_8207;

  corral_source_split_8207:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_8208;

  corral_source_split_8208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1778} list_del_rcu($p38);
    goto corral_source_split_8209;

  corral_source_split_8209:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p4, $mul.ref(0, 304)), $mul.ref(176, 1));
    goto corral_source_split_8210;

  corral_source_split_8210:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_8211;

  corral_source_split_8211:
    assume {:verifier.code 0} true;
    $i41 := $sub.i32($i40, 1);
    goto corral_source_split_8212;

  corral_source_split_8212:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p4, $mul.ref(0, 304)), $mul.ref(176, 1));
    goto corral_source_split_8213;

  corral_source_split_8213:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p42, $i41);
    goto corral_source_split_8214;

  corral_source_split_8214:
    assume {:verifier.code 0} true;
    $p43, $i44 := $p37, 1;
    goto $bb12;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_8169;

  corral_source_split_8169:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 21);
    goto $bb3;

  $bb14_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8196;
}



const vmci_qp_broker_set_page_store: ref;

axiom vmci_qp_broker_set_page_store == $sub.ref(0, 811473);

procedure vmci_qp_broker_set_page_store($i0: i64, $i1: i64, $i2: i64, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.134, $M.23, $M.20, $M.21, $M.24, $M.25, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.0, $M.96, $M.97, $M.28, $M.45, $M.48, $M.47, $M.98, $CurrAddr, assertsPassed, $M.29, $M.34, $M.30, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.31, $M.87, $M.69, $M.35, $M.44, $M.32, $M.108, $M.110, $M.112, $M.114, $M.70, $M.33, $M.2, $M.3, $M.109, $M.111, $M.113, $M.115, $M.6, $M.13, $M.18, $M.19, $M.36, $M.38, $M.40, $M.42, $M.26, $M.27, $M.89, $M.46, $M.90, $M.86, $M.91;



implementation vmci_qp_broker_set_page_store($i0: i64, $i1: i64, $i2: i64, $p3: ref) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $i10: i8;
  var $i11: i1;
  var $i12: i64;
  var $i13: i1;
  var $i14: i1;
  var $i16: i1;
  var $i17: i1;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $i21: i8;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $i28: i32;
  var $p31: ref;
  var $i32: i64;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $p42: ref;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $i49: i32;
  var $i50: i1;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var $i56: i1;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i32;
  var $i62: i1;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i32;
  var $i69: i1;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i32;
  var $i75: i1;
  var $p76: ref;
  var $i77: i32;
  var $p78: ref;
  var $i79: i64;
  var $i80: i32;
  var $i81: i1;
  var $p82: ref;
  var $i83: i32;
  var $p86: ref;
  var $i87: i32;
  var $p90: ref;
  var $i91: i32;
  var $i30: i32;
  var $i15: i32;
  var vslice_dummy_var_275: i32;
  var vslice_dummy_var_276: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1783} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    assume {:verifier.code 0} true;
    $M.134 := $store.i64($M.134, $p5, $i0);
    call {:si_unique_call 1784} {:cexpr "vmci_qp_broker_set_page_store:arg:produce_uva"} boogie_si_record_i64($i1);
    call {:si_unique_call 1785} {:cexpr "vmci_qp_broker_set_page_store:arg:consume_uva"} boogie_si_record_i64($i2);
    goto corral_source_split_8239;

  corral_source_split_8239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1786} $i6 := vmci_ctx_get_id($p3);
    call {:si_unique_call 1787} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_8240;

  corral_source_split_8240:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p4);
    goto corral_source_split_8241;

  corral_source_split_8241:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.134, $p7);
    goto corral_source_split_8242;

  corral_source_split_8242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1788} $i9 := vmci_handle_is_invalid___1($i8);
    goto corral_source_split_8243;

  corral_source_split_8243:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i8($i9);
    call {:si_unique_call 1789} {:cexpr "tmp___0"} boogie_si_record_i8($i10);
    goto corral_source_split_8244;

  corral_source_split_8244:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i10);
    goto corral_source_split_8245;

  corral_source_split_8245:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i11 == 1);
    goto corral_source_split_8247;

  corral_source_split_8247:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p3);
    goto corral_source_split_8248;

  corral_source_split_8248:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_8249;

  corral_source_split_8249:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    goto corral_source_split_8251;

  corral_source_split_8251:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i6, $sub.i32(0, 1));
    goto corral_source_split_8252;

  corral_source_split_8252:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i1, 0);
    goto corral_source_split_8256;

  corral_source_split_8256:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb12;

  $bb12:
    assume !($i16 == 1);
    goto corral_source_split_8258;

  corral_source_split_8258:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i2, 0);
    goto corral_source_split_8259;

  corral_source_split_8259:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1790} ldv_mutex_lock_226($add.ref($add.ref(qp_broker_list, $mul.ref(0, 176)), $mul.ref(16, 1)));
    goto SeqInstr_478, SeqInstr_479;

  SeqInstr_479:
    assume assertsPassed;
    goto SeqInstr_480;

  SeqInstr_480:
    goto corral_source_split_8261;

  corral_source_split_8261:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p4);
    goto corral_source_split_8262;

  corral_source_split_8262:
    assume {:verifier.code 0} true;
    $i19 := $load.i64($M.134, $p18);
    goto corral_source_split_8263;

  corral_source_split_8263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1791} $i20 := vmci_ctx_qp_exists($p3, $i19);
    goto corral_source_split_8264;

  corral_source_split_8264:
    assume {:verifier.code 0} true;
    $i21 := $zext.i1.i8($i20);
    call {:si_unique_call 1792} {:cexpr "tmp___1"} boogie_si_record_i8($i21);
    goto corral_source_split_8265;

  corral_source_split_8265:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i8.i1($i21);
    goto corral_source_split_8266;

  corral_source_split_8266:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i23 := 1;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_8270;

  corral_source_split_8270:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_8271;

  corral_source_split_8271:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p4);
    goto corral_source_split_8283;

  corral_source_split_8283:
    assume {:verifier.code 0} true;
    $i32 := $load.i64($M.134, $p31);
    goto corral_source_split_8284;

  corral_source_split_8284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1795} $p33 := qp_broker_handle_to_entry($i32);
    goto corral_source_split_8285;

  corral_source_split_8285:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p33);
    goto corral_source_split_8286;

  corral_source_split_8286:
    assume {:verifier.code 0} true;
    $i35 := $eq.i64($i34, 0);
    goto corral_source_split_8287;

  corral_source_split_8287:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p33, $mul.ref(0, 296)), $mul.ref(192, 1));
    goto corral_source_split_8291;

  corral_source_split_8291:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_8292;

  corral_source_split_8292:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, $i6);
    goto corral_source_split_8293;

  corral_source_split_8293:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p33, $mul.ref(0, 296)), $mul.ref(200, 1));
    goto corral_source_split_8305;

  corral_source_split_8305:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_8306;

  corral_source_split_8306:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i46, 1);
    goto corral_source_split_8307;

  corral_source_split_8307:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i47 == 1);
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p33, $mul.ref(0, 296)), $mul.ref(208, 1));
    goto corral_source_split_8316;

  corral_source_split_8316:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_8317;

  corral_source_split_8317:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p33, $mul.ref(0, 296)), $mul.ref(216, 1));
    goto corral_source_split_8318;

  corral_source_split_8318:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_8319;

  corral_source_split_8319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1796} $i55 := qp_host_get_user_memory($i1, $i2, $p52, $p54);
    call {:si_unique_call 1797} {:cexpr "result"} boogie_si_record_i32($i55);
    goto corral_source_split_8320;

  corral_source_split_8320:
    assume {:verifier.code 0} true;
    $i56 := $slt.i32($i55, 0);
    goto corral_source_split_8321;

  corral_source_split_8321:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p33, $mul.ref(0, 296)), $mul.ref(208, 1));
    goto corral_source_split_8325;

  corral_source_split_8325:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_8326;

  corral_source_split_8326:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p33, $mul.ref(0, 296)), $mul.ref(216, 1));
    goto corral_source_split_8327;

  corral_source_split_8327:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_8328;

  corral_source_split_8328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1798} $i61 := qp_host_map_queues($p58, $p60);
    call {:si_unique_call 1799} {:cexpr "result"} boogie_si_record_i32($i61);
    goto corral_source_split_8329;

  corral_source_split_8329:
    assume {:verifier.code 0} true;
    $i62 := $slt.i32($i61, 0);
    goto corral_source_split_8330;

  corral_source_split_8330:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p33, $mul.ref(0, 296)), $mul.ref(200, 1));
    goto corral_source_split_8339;

  corral_source_split_8339:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.0, $p67);
    goto corral_source_split_8340;

  corral_source_split_8340:
    assume {:verifier.code 0} true;
    $i69 := $eq.i32($i68, 1);
    goto corral_source_split_8341;

  corral_source_split_8341:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i69 == 1);
    goto corral_source_split_8347;

  corral_source_split_8347:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p33, $mul.ref(0, 296)), $mul.ref(200, 1));
    goto corral_source_split_8348;

  corral_source_split_8348:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p71, 4);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p33, $mul.ref(0, 296)), $mul.ref(206, 1));
    goto corral_source_split_8350;

  corral_source_split_8350:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p72, 1);
    goto corral_source_split_8351;

  corral_source_split_8351:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p33, $mul.ref(0, 296)), $mul.ref(200, 1));
    goto corral_source_split_8352;

  corral_source_split_8352:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.0, $p73);
    goto corral_source_split_8353;

  corral_source_split_8353:
    assume {:verifier.code 0} true;
    $i75 := $eq.i32($i74, 4);
    goto corral_source_split_8354;

  corral_source_split_8354:
    assume {:verifier.code 0} true;
    assume {:branchcond $i75} true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $i30 := 0;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_8280;

  corral_source_split_8280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1794} ldv_mutex_unlock_227($add.ref($add.ref(qp_broker_list, $mul.ref(0, 176)), $mul.ref(16, 1)));
    goto SeqInstr_481, SeqInstr_482;

  SeqInstr_482:
    assume assertsPassed;
    goto SeqInstr_483;

  SeqInstr_483:
    goto corral_source_split_8281;

  corral_source_split_8281:
    assume {:verifier.code 0} true;
    $i15 := $i30;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_8254;

  corral_source_split_8254:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  SeqInstr_481:
    assume !assertsPassed;
    return;

  $bb50:
    assume $i75 == 1;
    goto corral_source_split_8356;

  corral_source_split_8356:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p33, $mul.ref(0, 296)), $mul.ref(192, 1));
    goto corral_source_split_8357;

  corral_source_split_8357:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.0, $p76);
    goto corral_source_split_8358;

  corral_source_split_8358:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p4);
    goto corral_source_split_8359;

  corral_source_split_8359:
    assume {:verifier.code 0} true;
    $i79 := $load.i64($M.134, $p78);
    goto corral_source_split_8360;

  corral_source_split_8360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1801} $i80 := qp_notify_peer(1, $i79, $i6, $i77);
    goto SeqInstr_484, SeqInstr_485;

  SeqInstr_485:
    assume assertsPassed;
    goto SeqInstr_486;

  SeqInstr_486:
    call {:si_unique_call 1802} {:cexpr "result"} boogie_si_record_i32($i80);
    goto corral_source_split_8361;

  corral_source_split_8361:
    assume {:verifier.code 0} true;
    $i81 := $slt.i32($i80, 0);
    goto corral_source_split_8362;

  corral_source_split_8362:
    assume {:verifier.code 0} true;
    assume {:branchcond $i81} true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb52:
    assume $i81 == 1;
    goto corral_source_split_8364;

  corral_source_split_8364:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p33, $mul.ref(0, 296)), $mul.ref(192, 1));
    goto corral_source_split_8365;

  corral_source_split_8365:
    assume {:verifier.code 0} true;
    $i83 := $load.i32($M.0, $p82);
    goto corral_source_split_8366;

  corral_source_split_8366:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($add.ref($add.ref($p33, $mul.ref(0, 296)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_8367;

  corral_source_split_8367:
    assume {:verifier.code 0} true;
    $i87 := $load.i32($M.0, $p86);
    goto corral_source_split_8368;

  corral_source_split_8368:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($add.ref($add.ref($p33, $mul.ref(0, 296)), $mul.ref(136, 1)), $mul.ref(16, 1)), $mul.ref(4, 1));
    goto corral_source_split_8369;

  corral_source_split_8369:
    assume {:verifier.code 0} true;
    $i91 := $load.i32($M.0, $p90);
    goto corral_source_split_8370;

  corral_source_split_8370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1803} vslice_dummy_var_276 := printk.ref.i32.i32.i32(.str.49, $i83, $i87, $i91);
    goto corral_source_split_8371;

  corral_source_split_8371:
    assume {:verifier.code 0} true;
    goto $bb54;

  SeqInstr_484:
    assume !assertsPassed;
    return;

  $bb47:
    assume $i69 == 1;
    goto corral_source_split_8343;

  corral_source_split_8343:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p33, $mul.ref(0, 296)), $mul.ref(200, 1));
    goto corral_source_split_8344;

  corral_source_split_8344:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p70, 2);
    goto corral_source_split_8345;

  corral_source_split_8345:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb44:
    assume $i62 == 1;
    goto corral_source_split_8332;

  corral_source_split_8332:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p33, $mul.ref(0, 296)), $mul.ref(208, 1));
    goto corral_source_split_8333;

  corral_source_split_8333:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_8334;

  corral_source_split_8334:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p33, $mul.ref(0, 296)), $mul.ref(216, 1));
    goto corral_source_split_8335;

  corral_source_split_8335:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_8336;

  corral_source_split_8336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1800} qp_host_unregister_user_memory($p64, $p66);
    goto corral_source_split_8337;

  corral_source_split_8337:
    assume {:verifier.code 0} true;
    $i30 := $i61;
    goto $bb21;

  $bb41:
    assume $i56 == 1;
    goto corral_source_split_8323;

  corral_source_split_8323:
    assume {:verifier.code 0} true;
    $i30 := $i55;
    goto $bb21;

  $bb35:
    assume $i47 == 1;
    goto corral_source_split_8309;

  corral_source_split_8309:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p33, $mul.ref(0, 296)), $mul.ref(200, 1));
    goto corral_source_split_8310;

  corral_source_split_8310:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p48);
    goto corral_source_split_8311;

  corral_source_split_8311:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i49, 3);
    goto corral_source_split_8312;

  corral_source_split_8312:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb38, $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume !($i50 == 1);
    goto $bb37;

  $bb38:
    assume $i50 == 1;
    goto corral_source_split_8314;

  corral_source_split_8314:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32(0, 20);
    goto $bb21;

  $bb26:
    assume $i38 == 1;
    goto corral_source_split_8295;

  corral_source_split_8295:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p33, $mul.ref(0, 296)), $mul.ref(192, 1));
    goto corral_source_split_8296;

  corral_source_split_8296:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_8297;

  corral_source_split_8297:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 2);
    goto corral_source_split_8298;

  corral_source_split_8298:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb31;

  $bb31:
    assume !($i41 == 1);
    goto corral_source_split_8300;

  corral_source_split_8300:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p33, $mul.ref(0, 296)), $mul.ref(196, 1));
    goto corral_source_split_8301;

  corral_source_split_8301:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    goto corral_source_split_8302;

  corral_source_split_8302:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, $i6);
    goto corral_source_split_8303;

  corral_source_split_8303:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb28;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i44 == 1;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32(0, 33);
    goto $bb21;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i41 == 1;
    goto $bb30;

  $bb23:
    assume $i35 == 1;
    goto corral_source_split_8289;

  corral_source_split_8289:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32(0, 21);
    goto $bb21;

  $bb19:
    assume $i24 == 1;
    goto corral_source_split_8273;

  corral_source_split_8273:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_8274;

  corral_source_split_8274:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.134, $p25);
    goto corral_source_split_8275;

  corral_source_split_8275:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_8276;

  corral_source_split_8276:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.134, $p27);
    goto corral_source_split_8277;

  corral_source_split_8277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1793} vslice_dummy_var_275 := printk.ref.i32.i32.i32(.str.48, $i6, $i26, $i28);
    goto corral_source_split_8278;

  corral_source_split_8278:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32(0, 21);
    goto $bb21;

  $bb16:
    assume $i22 == 1;
    goto corral_source_split_8268;

  corral_source_split_8268:
    assume {:verifier.code 0} true;
    $i23 := 0;
    goto $bb18;

  SeqInstr_478:
    assume !assertsPassed;
    return;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 2);
    goto $bb8;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb11;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 2);
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb2;
}



const ldv_mutex_lock_226: ref;

axiom ldv_mutex_lock_226 == $sub.ref(0, 812505);

procedure ldv_mutex_lock_226($p0: ref);
  free requires assertsPassed;
  modifies $M.28, assertsPassed;



implementation ldv_mutex_lock_226($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8373;

  corral_source_split_8373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1804} ldv_mutex_lock_mutex_of_qp_list($p0);
    goto SeqInstr_487, SeqInstr_488;

  SeqInstr_488:
    assume assertsPassed;
    goto SeqInstr_489;

  SeqInstr_489:
    goto corral_source_split_8374;

  corral_source_split_8374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1805} mutex_lock($p0);
    goto corral_source_split_8375;

  corral_source_split_8375:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_487:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_227: ref;

axiom ldv_mutex_unlock_227 == $sub.ref(0, 813537);

procedure ldv_mutex_unlock_227($p0: ref);
  free requires assertsPassed;
  modifies $M.28, assertsPassed;



implementation ldv_mutex_unlock_227($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8377;

  corral_source_split_8377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1806} ldv_mutex_unlock_mutex_of_qp_list($p0);
    goto SeqInstr_490, SeqInstr_491;

  SeqInstr_491:
    assume assertsPassed;
    goto SeqInstr_492;

  SeqInstr_492:
    goto corral_source_split_8378;

  corral_source_split_8378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1807} mutex_unlock($p0);
    goto corral_source_split_8379;

  corral_source_split_8379:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_490:
    assume !assertsPassed;
    return;
}



const vmci_qp_broker_map: ref;

axiom vmci_qp_broker_map == $sub.ref(0, 814569);

procedure vmci_qp_broker_map($i0: i64, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.135, $M.23, $M.20, $M.21, $M.24, $M.25, $M.78, $M.77, $M.0, $M.28, $M.45, $M.48, $M.47, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $CurrAddr, assertsPassed, $M.46, $M.29, $M.89, $M.34, $M.30, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.31, $M.87, $M.69, $M.35, $M.90, $M.86, $M.91, $M.18, $M.44, $M.32, $M.108, $M.110, $M.112, $M.114, $M.70, $M.33, $M.26, $M.19, $M.27, $M.2, $M.3, $M.109, $M.111, $M.113, $M.115, $M.6, $M.13, $M.36, $M.38, $M.40, $M.42;



implementation vmci_qp_broker_map($i0: i64, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $i10: i8;
  var $i11: i1;
  var $i12: i64;
  var $i13: i1;
  var $i14: i1;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $i19: i8;
  var $i20: i1;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $i26: i32;
  var $p29: ref;
  var $i30: i64;
  var $p31: ref;
  var $i32: i64;
  var $i33: i1;
  var $p34: ref;
  var $i35: i32;
  var $p36: ref;
  var $i37: i32;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $p42: ref;
  var $i43: i32;
  var $i44: i1;
  var $i45: i1;
  var $p46: ref;
  var $p48: ref;
  var $i49: i64;
  var $i50: i64;
  var $i51: i64;
  var $i52: i32;
  var $p54: ref;
  var $i55: i64;
  var $i56: i64;
  var $i57: i64;
  var $i58: i32;
  var $i59: i32;
  var $i60: i32;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i32;
  var $p69: ref;
  var $p70: ref;
  var $i71: i1;
  var $p72: ref;
  var $i73: i32;
  var $i74: i32;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i64;
  var $i79: i1;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $i85: i32;
  var $i28: i32;
  var $i15: i32;
  var vslice_dummy_var_277: i32;
  var vslice_dummy_var_278: i32;
  var vslice_dummy_var_279: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1808} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1809} $p4 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p3);
    assume {:verifier.code 0} true;
    $M.135 := $store.i64($M.135, $p5, $i0);
    call {:si_unique_call 1810} {:cexpr "vmci_qp_broker_map:arg:guest_mem"} boogie_si_record_i64($i2);
    goto corral_source_split_8381;

  corral_source_split_8381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1811} $i6 := vmci_ctx_get_id($p1);
    call {:si_unique_call 1812} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_8382;

  corral_source_split_8382:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p3);
    goto corral_source_split_8383;

  corral_source_split_8383:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.135, $p7);
    goto corral_source_split_8384;

  corral_source_split_8384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1813} $i9 := vmci_handle_is_invalid___1($i8);
    goto corral_source_split_8385;

  corral_source_split_8385:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i8($i9);
    call {:si_unique_call 1814} {:cexpr "tmp___0"} boogie_si_record_i8($i10);
    goto corral_source_split_8386;

  corral_source_split_8386:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i10);
    goto corral_source_split_8387;

  corral_source_split_8387:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i11 == 1);
    goto corral_source_split_8389;

  corral_source_split_8389:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p1);
    goto corral_source_split_8390;

  corral_source_split_8390:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_8391;

  corral_source_split_8391:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    goto corral_source_split_8393;

  corral_source_split_8393:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i6, $sub.i32(0, 1));
    goto corral_source_split_8394;

  corral_source_split_8394:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1815} ldv_mutex_lock_230($add.ref($add.ref(qp_broker_list, $mul.ref(0, 176)), $mul.ref(16, 1)));
    goto SeqInstr_493, SeqInstr_494;

  SeqInstr_494:
    assume assertsPassed;
    goto SeqInstr_495;

  SeqInstr_495:
    goto corral_source_split_8398;

  corral_source_split_8398:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p3);
    goto corral_source_split_8399;

  corral_source_split_8399:
    assume {:verifier.code 0} true;
    $i17 := $load.i64($M.135, $p16);
    goto corral_source_split_8400;

  corral_source_split_8400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1816} $i18 := vmci_ctx_qp_exists($p1, $i17);
    goto corral_source_split_8401;

  corral_source_split_8401:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i8($i18);
    call {:si_unique_call 1817} {:cexpr "tmp___1"} boogie_si_record_i8($i19);
    goto corral_source_split_8402;

  corral_source_split_8402:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i8.i1($i19);
    goto corral_source_split_8403;

  corral_source_split_8403:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i21 := 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_8407;

  corral_source_split_8407:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_8408;

  corral_source_split_8408:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p3);
    goto corral_source_split_8420;

  corral_source_split_8420:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.135, $p29);
    goto corral_source_split_8421;

  corral_source_split_8421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1820} $p31 := qp_broker_handle_to_entry($i30);
    goto corral_source_split_8422;

  corral_source_split_8422:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p31);
    goto corral_source_split_8423;

  corral_source_split_8423:
    assume {:verifier.code 0} true;
    $i33 := $eq.i64($i32, 0);
    goto corral_source_split_8424;

  corral_source_split_8424:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p31, $mul.ref(0, 296)), $mul.ref(192, 1));
    goto corral_source_split_8433;

  corral_source_split_8433:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_8434;

  corral_source_split_8434:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, $i6);
    goto corral_source_split_8435;

  corral_source_split_8435:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i6, 2);
    goto corral_source_split_8444;

  corral_source_split_8444:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    $i85 := 0;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_8494;

  corral_source_split_8494:
    assume {:verifier.code 0} true;
    $i28 := $i85;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_8417;

  corral_source_split_8417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1819} ldv_mutex_unlock_231($add.ref($add.ref(qp_broker_list, $mul.ref(0, 176)), $mul.ref(16, 1)));
    goto SeqInstr_496, SeqInstr_497;

  SeqInstr_497:
    assume assertsPassed;
    goto SeqInstr_498;

  SeqInstr_498:
    goto corral_source_split_8418;

  corral_source_split_8418:
    assume {:verifier.code 0} true;
    $i15 := $i28;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_8396;

  corral_source_split_8396:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  SeqInstr_496:
    assume !assertsPassed;
    return;

  $bb26:
    assume $i45 == 1;
    goto corral_source_split_8446;

  corral_source_split_8446:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_8447;

  corral_source_split_8447:
    assume {:verifier.code 0} true;
    $M.78 := $store.i64($M.78, $p46, $i2);
    goto corral_source_split_8448;

  corral_source_split_8448:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p31, $mul.ref(0, 296)), $mul.ref(136, 1)), $mul.ref(32, 1));
    goto corral_source_split_8449;

  corral_source_split_8449:
    assume {:verifier.code 0} true;
    $i49 := $load.i64($M.0, $p48);
    goto corral_source_split_8450;

  corral_source_split_8450:
    assume {:verifier.code 0} true;
    $i50 := $add.i64($i49, 4095);
    goto corral_source_split_8451;

  corral_source_split_8451:
    assume {:verifier.code 0} true;
    $i51 := $udiv.i64($i50, 4096);
    goto corral_source_split_8452;

  corral_source_split_8452:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i64.i32($i51);
    goto corral_source_split_8453;

  corral_source_split_8453:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($p31, $mul.ref(0, 296)), $mul.ref(136, 1)), $mul.ref(40, 1));
    goto corral_source_split_8454;

  corral_source_split_8454:
    assume {:verifier.code 0} true;
    $i55 := $load.i64($M.0, $p54);
    goto corral_source_split_8455;

  corral_source_split_8455:
    assume {:verifier.code 0} true;
    $i56 := $add.i64($i55, 4095);
    goto corral_source_split_8456;

  corral_source_split_8456:
    assume {:verifier.code 0} true;
    $i57 := $udiv.i64($i56, 4096);
    goto corral_source_split_8457;

  corral_source_split_8457:
    assume {:verifier.code 0} true;
    $i58 := $trunc.i64.i32($i57);
    goto corral_source_split_8458;

  corral_source_split_8458:
    assume {:verifier.code 0} true;
    $i59 := $add.i32($i52, $i58);
    goto corral_source_split_8459;

  corral_source_split_8459:
    assume {:verifier.code 0} true;
    $i60 := $add.i32($i59, 2);
    goto corral_source_split_8460;

  corral_source_split_8460:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_8461;

  corral_source_split_8461:
    assume {:verifier.code 0} true;
    $M.77 := $store.i32($M.77, $p61, $i60);
    goto corral_source_split_8462;

  corral_source_split_8462:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p31, $mul.ref(0, 296)), $mul.ref(208, 1));
    goto corral_source_split_8463;

  corral_source_split_8463:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_8464;

  corral_source_split_8464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1822} qp_acquire_queue_mutex($p63);
    goto SeqInstr_499, SeqInstr_500;

  SeqInstr_500:
    assume assertsPassed;
    goto SeqInstr_501;

  SeqInstr_501:
    goto corral_source_split_8465;

  corral_source_split_8465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1823} qp_reset_saved_headers($p31);
    goto corral_source_split_8466;

  corral_source_split_8466:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p31, $mul.ref(0, 296)), $mul.ref(208, 1));
    goto corral_source_split_8467;

  corral_source_split_8467:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $p64);
    goto corral_source_split_8468;

  corral_source_split_8468:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p31, $mul.ref(0, 296)), $mul.ref(216, 1));
    goto corral_source_split_8469;

  corral_source_split_8469:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_8470;

  corral_source_split_8470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1824} $i68 := qp_host_register_user_memory($p4, $p65, $p67);
    call {:si_unique_call 1825} {:cexpr "result"} boogie_si_record_i32($i68);
    goto corral_source_split_8471;

  corral_source_split_8471:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p31, $mul.ref(0, 296)), $mul.ref(208, 1));
    goto corral_source_split_8472;

  corral_source_split_8472:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.0, $p69);
    goto corral_source_split_8473;

  corral_source_split_8473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1826} qp_release_queue_mutex($p70);
    goto SeqInstr_502, SeqInstr_503;

  SeqInstr_503:
    assume assertsPassed;
    goto SeqInstr_504;

  SeqInstr_504:
    goto corral_source_split_8474;

  corral_source_split_8474:
    assume {:verifier.code 0} true;
    $i71 := $eq.i32($i68, 0);
    goto corral_source_split_8475;

  corral_source_split_8475:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i85 := $i68;
    goto $bb34;

  $bb28:
    assume $i71 == 1;
    goto corral_source_split_8477;

  corral_source_split_8477:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p31, $mul.ref(0, 296)), $mul.ref(200, 1));
    goto corral_source_split_8478;

  corral_source_split_8478:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.0, $p72);
    goto corral_source_split_8479;

  corral_source_split_8479:
    assume {:verifier.code 0} true;
    $i74 := $add.i32($i73, 1);
    goto corral_source_split_8480;

  corral_source_split_8480:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p31, $mul.ref(0, 296)), $mul.ref(200, 1));
    goto corral_source_split_8481;

  corral_source_split_8481:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p75, $i74);
    goto corral_source_split_8482;

  corral_source_split_8482:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p31, $mul.ref(0, 296)), $mul.ref(272, 1));
    goto corral_source_split_8483;

  corral_source_split_8483:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.0, $p76);
    goto corral_source_split_8484;

  corral_source_split_8484:
    assume {:verifier.code 0} true;
    $i78 := $p2i.ref.i64($p77);
    goto corral_source_split_8485;

  corral_source_split_8485:
    assume {:verifier.code 0} true;
    $i79 := $ne.i64($i78, 0);
    goto corral_source_split_8486;

  corral_source_split_8486:
    assume {:verifier.code 0} true;
    assume {:branchcond $i79} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb30:
    assume $i79 == 1;
    goto corral_source_split_8488;

  corral_source_split_8488:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p31, $mul.ref(0, 296)), $mul.ref(272, 1));
    goto corral_source_split_8489;

  corral_source_split_8489:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.0, $p80);
    goto corral_source_split_8490;

  corral_source_split_8490:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p31, $mul.ref(0, 296)), $mul.ref(280, 1));
    goto corral_source_split_8491;

  corral_source_split_8491:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.0, $p82);
    call {:si_unique_call 1827} vslice_dummy_var_279 := devirtbounce.17($p81, $p83);
    goto SeqInstr_505, SeqInstr_506;

  SeqInstr_506:
    assume assertsPassed;
    goto SeqInstr_507;

  SeqInstr_507:
    goto corral_source_split_8492;

  corral_source_split_8492:
    assume {:verifier.code 0} true;
    goto $bb32;

  SeqInstr_505:
    assume !assertsPassed;
    return;

  SeqInstr_502:
    assume !assertsPassed;
    return;

  SeqInstr_499:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i41 == 1;
    goto corral_source_split_8437;

  corral_source_split_8437:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p31, $mul.ref(0, 296)), $mul.ref(196, 1));
    goto corral_source_split_8438;

  corral_source_split_8438:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    goto corral_source_split_8439;

  corral_source_split_8439:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, $i6);
    goto corral_source_split_8440;

  corral_source_split_8440:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb22;

  $bb23:
    assume $i44 == 1;
    goto corral_source_split_8442;

  corral_source_split_8442:
    assume {:verifier.code 0} true;
    $i28 := $sub.i32(0, 34);
    goto $bb15;

  $bb17:
    assume $i33 == 1;
    goto corral_source_split_8426;

  corral_source_split_8426:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_8427;

  corral_source_split_8427:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.135, $p34);
    goto corral_source_split_8428;

  corral_source_split_8428:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_8429;

  corral_source_split_8429:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.135, $p36);
    goto corral_source_split_8430;

  corral_source_split_8430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1821} vslice_dummy_var_278 := no_printk.ref.i32.i32.i32(.str.53, $i6, $i35, $i37);
    goto corral_source_split_8431;

  corral_source_split_8431:
    assume {:verifier.code 0} true;
    $i28 := $sub.i32(0, 21);
    goto $bb15;

  $bb13:
    assume $i22 == 1;
    goto corral_source_split_8410;

  corral_source_split_8410:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_8411;

  corral_source_split_8411:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.135, $p23);
    goto corral_source_split_8412;

  corral_source_split_8412:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_8413;

  corral_source_split_8413:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.135, $p25);
    goto corral_source_split_8414;

  corral_source_split_8414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1818} vslice_dummy_var_277 := no_printk.ref.i32.i32.i32(.str.50, $i6, $i24, $i26);
    goto corral_source_split_8415;

  corral_source_split_8415:
    assume {:verifier.code 0} true;
    $i28 := $sub.i32(0, 21);
    goto $bb15;

  $bb10:
    assume $i20 == 1;
    goto corral_source_split_8405;

  corral_source_split_8405:
    assume {:verifier.code 0} true;
    $i21 := 0;
    goto $bb12;

  SeqInstr_493:
    assume !assertsPassed;
    return;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 2);
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb2;
}



const vmci_qp_broker_unmap: ref;

axiom vmci_qp_broker_unmap == $sub.ref(0, 815601);

procedure vmci_qp_broker_unmap($i0: i64, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.136, $M.23, $M.20, $M.21, $M.24, $M.25, $M.0, $M.28, $M.45, $M.48, $M.47, $M.96, $M.97, $CurrAddr, assertsPassed, $M.46, $M.98;



implementation vmci_qp_broker_unmap($i0: i64, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i9: i8;
  var $i10: i1;
  var $i11: i64;
  var $i12: i1;
  var $i13: i1;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $i18: i8;
  var $i19: i1;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $i23: i32;
  var $p24: ref;
  var $i25: i32;
  var $p28: ref;
  var $i29: i64;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $p33: ref;
  var $i34: i32;
  var $p35: ref;
  var $i36: i32;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $i44: i1;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $i50: i32;
  var $p51: ref;
  var $i52: i32;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i32;
  var $i65: i32;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i27: i32;
  var $i14: i32;
  var vslice_dummy_var_280: i32;
  var vslice_dummy_var_281: i32;
  var vslice_dummy_var_282: i32;
  var vslice_dummy_var_283: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1828} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    assume {:verifier.code 0} true;
    $M.136 := $store.i64($M.136, $p4, $i0);
    call {:si_unique_call 1829} {:cexpr "vmci_qp_broker_unmap:arg:gid"} boogie_si_record_i32($i2);
    goto corral_source_split_8496;

  corral_source_split_8496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1830} $i5 := vmci_ctx_get_id($p1);
    call {:si_unique_call 1831} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_8497;

  corral_source_split_8497:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p3);
    goto corral_source_split_8498;

  corral_source_split_8498:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.136, $p6);
    goto corral_source_split_8499;

  corral_source_split_8499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1832} $i8 := vmci_handle_is_invalid___1($i7);
    goto corral_source_split_8500;

  corral_source_split_8500:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i8($i8);
    call {:si_unique_call 1833} {:cexpr "tmp___0"} boogie_si_record_i8($i9);
    goto corral_source_split_8501;

  corral_source_split_8501:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1($i9);
    goto corral_source_split_8502;

  corral_source_split_8502:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i10 == 1);
    goto corral_source_split_8504;

  corral_source_split_8504:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p1);
    goto corral_source_split_8505;

  corral_source_split_8505:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_8506;

  corral_source_split_8506:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    goto corral_source_split_8508;

  corral_source_split_8508:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i5, $sub.i32(0, 1));
    goto corral_source_split_8509;

  corral_source_split_8509:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1834} ldv_mutex_lock_232($add.ref($add.ref(qp_broker_list, $mul.ref(0, 176)), $mul.ref(16, 1)));
    goto SeqInstr_508, SeqInstr_509;

  SeqInstr_509:
    assume assertsPassed;
    goto SeqInstr_510;

  SeqInstr_510:
    goto corral_source_split_8513;

  corral_source_split_8513:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p3);
    goto corral_source_split_8514;

  corral_source_split_8514:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.136, $p15);
    goto corral_source_split_8515;

  corral_source_split_8515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1835} $i17 := vmci_ctx_qp_exists($p1, $i16);
    goto corral_source_split_8516;

  corral_source_split_8516:
    assume {:verifier.code 0} true;
    $i18 := $zext.i1.i8($i17);
    call {:si_unique_call 1836} {:cexpr "tmp___1"} boogie_si_record_i8($i18);
    goto corral_source_split_8517;

  corral_source_split_8517:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i8.i1($i18);
    goto corral_source_split_8518;

  corral_source_split_8518:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i20 := 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_8522;

  corral_source_split_8522:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_8523;

  corral_source_split_8523:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p3);
    goto corral_source_split_8535;

  corral_source_split_8535:
    assume {:verifier.code 0} true;
    $i29 := $load.i64($M.136, $p28);
    goto corral_source_split_8536;

  corral_source_split_8536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1839} $p30 := qp_broker_handle_to_entry($i29);
    goto corral_source_split_8537;

  corral_source_split_8537:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_8538;

  corral_source_split_8538:
    assume {:verifier.code 0} true;
    $i32 := $eq.i64($i31, 0);
    goto corral_source_split_8539;

  corral_source_split_8539:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p30, $mul.ref(0, 296)), $mul.ref(192, 1));
    goto corral_source_split_8548;

  corral_source_split_8548:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_8549;

  corral_source_split_8549:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, $i5);
    goto corral_source_split_8550;

  corral_source_split_8550:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i5, 2);
    goto corral_source_split_8559;

  corral_source_split_8559:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i27 := 0;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_8532;

  corral_source_split_8532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1838} ldv_mutex_unlock_233($add.ref($add.ref(qp_broker_list, $mul.ref(0, 176)), $mul.ref(16, 1)));
    goto SeqInstr_511, SeqInstr_512;

  SeqInstr_512:
    assume assertsPassed;
    goto SeqInstr_513;

  SeqInstr_513:
    goto corral_source_split_8533;

  corral_source_split_8533:
    assume {:verifier.code 0} true;
    $i14 := $i27;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_8511;

  corral_source_split_8511:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  SeqInstr_511:
    assume !assertsPassed;
    return;

  $bb26:
    assume $i44 == 1;
    goto corral_source_split_8561;

  corral_source_split_8561:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p30, $mul.ref(0, 296)), $mul.ref(208, 1));
    goto corral_source_split_8562;

  corral_source_split_8562:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_8563;

  corral_source_split_8563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1841} qp_acquire_queue_mutex($p46);
    goto SeqInstr_514, SeqInstr_515;

  SeqInstr_515:
    assume assertsPassed;
    goto SeqInstr_516;

  SeqInstr_516:
    goto corral_source_split_8564;

  corral_source_split_8564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1842} $i47 := qp_save_headers($p30);
    call {:si_unique_call 1843} {:cexpr "result"} boogie_si_record_i32($i47);
    goto corral_source_split_8565;

  corral_source_split_8565:
    assume {:verifier.code 0} true;
    $i48 := $slt.i32($i47, 0);
    goto corral_source_split_8566;

  corral_source_split_8566:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p30, $mul.ref(0, 296)), $mul.ref(208, 1));
    goto corral_source_split_8575;

  corral_source_split_8575:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_8576;

  corral_source_split_8576:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p30, $mul.ref(0, 296)), $mul.ref(216, 1));
    goto corral_source_split_8577;

  corral_source_split_8577:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_8578;

  corral_source_split_8578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1845} vslice_dummy_var_283 := qp_host_unmap_queues($i2, $p55, $p57);
    goto corral_source_split_8579;

  corral_source_split_8579:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p30, $mul.ref(0, 296)), $mul.ref(208, 1));
    goto corral_source_split_8580;

  corral_source_split_8580:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_8581;

  corral_source_split_8581:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p30, $mul.ref(0, 296)), $mul.ref(216, 1));
    goto corral_source_split_8582;

  corral_source_split_8582:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_8583;

  corral_source_split_8583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1846} qp_host_unregister_user_memory($p60, $p62);
    goto corral_source_split_8584;

  corral_source_split_8584:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p30, $mul.ref(0, 296)), $mul.ref(200, 1));
    goto corral_source_split_8585;

  corral_source_split_8585:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.0, $p63);
    goto corral_source_split_8586;

  corral_source_split_8586:
    assume {:verifier.code 0} true;
    $i65 := $sub.i32($i64, 1);
    goto corral_source_split_8587;

  corral_source_split_8587:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p30, $mul.ref(0, 296)), $mul.ref(200, 1));
    goto corral_source_split_8588;

  corral_source_split_8588:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p66, $i65);
    goto corral_source_split_8589;

  corral_source_split_8589:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p30, $mul.ref(0, 296)), $mul.ref(208, 1));
    goto corral_source_split_8590;

  corral_source_split_8590:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    goto corral_source_split_8591;

  corral_source_split_8591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1847} qp_release_queue_mutex($p68);
    goto SeqInstr_517, SeqInstr_518;

  SeqInstr_518:
    assume assertsPassed;
    goto SeqInstr_519;

  SeqInstr_519:
    goto corral_source_split_8592;

  corral_source_split_8592:
    assume {:verifier.code 0} true;
    goto $bb31;

  SeqInstr_517:
    assume !assertsPassed;
    return;

  $bb28:
    assume $i48 == 1;
    goto corral_source_split_8568;

  corral_source_split_8568:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_8569;

  corral_source_split_8569:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.136, $p49);
    goto corral_source_split_8570;

  corral_source_split_8570:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_8571;

  corral_source_split_8571:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.136, $p51);
    goto corral_source_split_8572;

  corral_source_split_8572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1844} vslice_dummy_var_282 := printk.ref.i32.i32.i32(.str.54, $i50, $i52, $i47);
    goto corral_source_split_8573;

  corral_source_split_8573:
    assume {:verifier.code 0} true;
    goto $bb30;

  SeqInstr_514:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i40 == 1;
    goto corral_source_split_8552;

  corral_source_split_8552:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p30, $mul.ref(0, 296)), $mul.ref(196, 1));
    goto corral_source_split_8553;

  corral_source_split_8553:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_8554;

  corral_source_split_8554:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, $i5);
    goto corral_source_split_8555;

  corral_source_split_8555:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i43 == 1);
    goto $bb22;

  $bb23:
    assume $i43 == 1;
    goto corral_source_split_8557;

  corral_source_split_8557:
    assume {:verifier.code 0} true;
    $i27 := $sub.i32(0, 34);
    goto $bb15;

  $bb17:
    assume $i32 == 1;
    goto corral_source_split_8541;

  corral_source_split_8541:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_8542;

  corral_source_split_8542:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.136, $p33);
    goto corral_source_split_8543;

  corral_source_split_8543:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_8544;

  corral_source_split_8544:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.136, $p35);
    goto corral_source_split_8545;

  corral_source_split_8545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1840} vslice_dummy_var_281 := no_printk.ref.i32.i32.i32(.str.53, $i5, $i34, $i36);
    goto corral_source_split_8546;

  corral_source_split_8546:
    assume {:verifier.code 0} true;
    $i27 := $sub.i32(0, 21);
    goto $bb15;

  $bb13:
    assume $i21 == 1;
    goto corral_source_split_8525;

  corral_source_split_8525:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_8526;

  corral_source_split_8526:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.136, $p22);
    goto corral_source_split_8527;

  corral_source_split_8527:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_8528;

  corral_source_split_8528:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.136, $p24);
    goto corral_source_split_8529;

  corral_source_split_8529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1837} vslice_dummy_var_280 := no_printk.ref.i32.i32.i32(.str.50, $i5, $i23, $i25);
    goto corral_source_split_8530;

  corral_source_split_8530:
    assume {:verifier.code 0} true;
    $i27 := $sub.i32(0, 21);
    goto $bb15;

  $bb10:
    assume $i19 == 1;
    goto corral_source_split_8520;

  corral_source_split_8520:
    assume {:verifier.code 0} true;
    $i20 := 0;
    goto $bb12;

  SeqInstr_508:
    assume !assertsPassed;
    return;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 2);
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb2;
}



const ldv_mutex_lock_232: ref;

axiom ldv_mutex_lock_232 == $sub.ref(0, 816633);

procedure ldv_mutex_lock_232($p0: ref);
  free requires assertsPassed;
  modifies $M.28, assertsPassed;



implementation ldv_mutex_lock_232($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8594;

  corral_source_split_8594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1848} ldv_mutex_lock_mutex_of_qp_list($p0);
    goto SeqInstr_520, SeqInstr_521;

  SeqInstr_521:
    assume assertsPassed;
    goto SeqInstr_522;

  SeqInstr_522:
    goto corral_source_split_8595;

  corral_source_split_8595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1849} mutex_lock($p0);
    goto corral_source_split_8596;

  corral_source_split_8596:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_520:
    assume !assertsPassed;
    return;
}



const qp_save_headers: ref;

axiom qp_save_headers == $sub.ref(0, 817665);

procedure qp_save_headers($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.96, $M.97, $M.0, $M.98, $CurrAddr;



implementation qp_save_headers($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i13: i32;
  var cmdloc_dummy_var_169: [ref]i8;
  var cmdloc_dummy_var_170: [ref]i8;
  var cmdloc_dummy_var_171: [ref]i8;
  var cmdloc_dummy_var_172: [ref]i8;
  var cmdloc_dummy_var_173: [ref]i8;
  var cmdloc_dummy_var_174: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8598;

  corral_source_split_8598:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(208, 1));
    goto corral_source_split_8599;

  corral_source_split_8599:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_8600;

  corral_source_split_8600:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_8601;

  corral_source_split_8601:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_8602;

  corral_source_split_8602:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_8603;

  corral_source_split_8603:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_8604;

  corral_source_split_8604:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(208, 1));
    goto corral_source_split_8618;

  corral_source_split_8618:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_8619;

  corral_source_split_8619:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_8620;

  corral_source_split_8620:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_8621;

  corral_source_split_8621:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_8622;

  corral_source_split_8622:
    assume {:verifier.code 0} true;
    $i19 := $eq.i64($i18, 0);
    goto corral_source_split_8623;

  corral_source_split_8623:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i19 == 1);
    goto corral_source_split_8632;

  corral_source_split_8632:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(216, 1));
    goto corral_source_split_8633;

  corral_source_split_8633:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_8634;

  corral_source_split_8634:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_8635;

  corral_source_split_8635:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_8636;

  corral_source_split_8636:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_8637;

  corral_source_split_8637:
    assume {:verifier.code 0} true;
    $i25 := $eq.i64($i24, 0);
    goto corral_source_split_8638;

  corral_source_split_8638:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(224, 1));
    goto corral_source_split_8642;

  corral_source_split_8642:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_8643;

  corral_source_split_8643:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(208, 1));
    goto corral_source_split_8644;

  corral_source_split_8644:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_8645;

  corral_source_split_8645:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_8646;

  corral_source_split_8646:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_8647;

  corral_source_split_8647:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_8648;

  corral_source_split_8648:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_169 := $M.0;
    cmdloc_dummy_var_170 := $M.0;
    call {:si_unique_call 1852} cmdloc_dummy_var_171 := $memcpy.i8(cmdloc_dummy_var_169, cmdloc_dummy_var_170, $p33, $p38, 24, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_171;
    goto corral_source_split_8649;

  corral_source_split_8649:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(224, 1));
    goto corral_source_split_8650;

  corral_source_split_8650:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(208, 1));
    goto corral_source_split_8651;

  corral_source_split_8651:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_8652;

  corral_source_split_8652:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_8653;

  corral_source_split_8653:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p42, $p39);
    goto corral_source_split_8654;

  corral_source_split_8654:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(248, 1));
    goto corral_source_split_8655;

  corral_source_split_8655:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_8656;

  corral_source_split_8656:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(216, 1));
    goto corral_source_split_8657;

  corral_source_split_8657:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_8658;

  corral_source_split_8658:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p46, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_8659;

  corral_source_split_8659:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_8660;

  corral_source_split_8660:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_8661;

  corral_source_split_8661:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_172 := $M.0;
    cmdloc_dummy_var_173 := $M.0;
    call {:si_unique_call 1853} cmdloc_dummy_var_174 := $memcpy.i8(cmdloc_dummy_var_172, cmdloc_dummy_var_173, $p44, $p49, 24, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_174;
    goto corral_source_split_8662;

  corral_source_split_8662:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(248, 1));
    goto corral_source_split_8663;

  corral_source_split_8663:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(216, 1));
    goto corral_source_split_8664;

  corral_source_split_8664:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_8665;

  corral_source_split_8665:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p52, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_8666;

  corral_source_split_8666:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p53, $p50);
    goto corral_source_split_8667;

  corral_source_split_8667:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_8616;

  corral_source_split_8616:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i25 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(208, 1));
    goto corral_source_split_8625;

  corral_source_split_8625:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_8626;

  corral_source_split_8626:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(216, 1));
    goto corral_source_split_8627;

  corral_source_split_8627:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_8628;

  corral_source_split_8628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1850} $i30 := qp_host_map_queues($p27, $p29);
    call {:si_unique_call 1851} {:cexpr "result"} boogie_si_record_i32($i30);
    goto corral_source_split_8629;

  corral_source_split_8629:
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i30, 0);
    goto corral_source_split_8630;

  corral_source_split_8630:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i31 == 1;
    goto corral_source_split_8640;

  corral_source_split_8640:
    assume {:verifier.code 0} true;
    $i13 := $i30;
    goto $bb6;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb9;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_8606;

  corral_source_split_8606:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(216, 1));
    goto corral_source_split_8607;

  corral_source_split_8607:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_8608;

  corral_source_split_8608:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_8609;

  corral_source_split_8609:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_8610;

  corral_source_split_8610:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_8611;

  corral_source_split_8611:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_8612;

  corral_source_split_8612:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb3;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_8614;

  corral_source_split_8614:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb6;
}



const ldv_mutex_unlock_233: ref;

axiom ldv_mutex_unlock_233 == $sub.ref(0, 818697);

procedure ldv_mutex_unlock_233($p0: ref);
  free requires assertsPassed;
  modifies $M.28, assertsPassed;



implementation ldv_mutex_unlock_233($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8669;

  corral_source_split_8669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1854} ldv_mutex_unlock_mutex_of_qp_list($p0);
    goto SeqInstr_523, SeqInstr_524;

  SeqInstr_524:
    assume assertsPassed;
    goto SeqInstr_525;

  SeqInstr_525:
    goto corral_source_split_8670;

  corral_source_split_8670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1855} mutex_unlock($p0);
    goto corral_source_split_8671;

  corral_source_split_8671:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_523:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_230: ref;

axiom ldv_mutex_lock_230 == $sub.ref(0, 819729);

procedure ldv_mutex_lock_230($p0: ref);
  free requires assertsPassed;
  modifies $M.28, assertsPassed;



implementation ldv_mutex_lock_230($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8673;

  corral_source_split_8673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1856} ldv_mutex_lock_mutex_of_qp_list($p0);
    goto SeqInstr_526, SeqInstr_527;

  SeqInstr_527:
    assume assertsPassed;
    goto SeqInstr_528;

  SeqInstr_528:
    goto corral_source_split_8674;

  corral_source_split_8674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1857} mutex_lock($p0);
    goto corral_source_split_8675;

  corral_source_split_8675:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_526:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_231: ref;

axiom ldv_mutex_unlock_231 == $sub.ref(0, 820761);

procedure ldv_mutex_unlock_231($p0: ref);
  free requires assertsPassed;
  modifies $M.28, assertsPassed;



implementation ldv_mutex_unlock_231($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8677;

  corral_source_split_8677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1858} ldv_mutex_unlock_mutex_of_qp_list($p0);
    goto SeqInstr_529, SeqInstr_530;

  SeqInstr_530:
    assume assertsPassed;
    goto SeqInstr_531;

  SeqInstr_531:
    goto corral_source_split_8678;

  corral_source_split_8678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1859} mutex_unlock($p0);
    goto corral_source_split_8679;

  corral_source_split_8679:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_529:
    assume !assertsPassed;
    return;
}



const vmci_qp_broker_alloc: ref;

axiom vmci_qp_broker_alloc == $sub.ref(0, 821793);

procedure vmci_qp_broker_alloc($i0: i64, $i1: i32, $i2: i32, $i3: i32, $i4: i64, $i5: i64, $p6: ref, $p7: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.137, $M.76, $M.23, $M.20, $M.21, $M.24, $M.25, $M.75, $M.28, $M.45, $M.48, $M.47, $M.0, $M.74, $M.32, $M.33, $CurrAddr, assertsPassed, $M.55, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.29, $M.2, $M.3, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.31, $M.87, $M.34, $M.30, $M.69, $M.35, $M.6, $M.13, $M.18, $M.19, $M.70, $M.44, $M.108, $M.110, $M.112, $M.114, $M.26, $M.27, $M.109, $M.111, $M.113, $M.115, $M.89, $M.36, $M.38, $M.40, $M.42, $M.46, $M.90, $M.86, $M.91;



implementation vmci_qp_broker_alloc($i0: i64, $i1: i32, $i2: i32, $i3: i32, $i4: i64, $i5: i64, $p6: ref, $p7: ref) returns ($r: i32)
{
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1860} $p8 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    assume {:verifier.code 0} true;
    $M.137 := $store.i64($M.137, $p9, $i0);
    call {:si_unique_call 1861} {:cexpr "vmci_qp_broker_alloc:arg:peer"} boogie_si_record_i32($i1);
    call {:si_unique_call 1862} {:cexpr "vmci_qp_broker_alloc:arg:flags"} boogie_si_record_i32($i2);
    call {:si_unique_call 1863} {:cexpr "vmci_qp_broker_alloc:arg:priv_flags"} boogie_si_record_i32($i3);
    call {:si_unique_call 1864} {:cexpr "vmci_qp_broker_alloc:arg:produce_size"} boogie_si_record_i64($i4);
    call {:si_unique_call 1865} {:cexpr "vmci_qp_broker_alloc:arg:consume_size"} boogie_si_record_i64($i5);
    goto corral_source_split_8681;

  corral_source_split_8681:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p8);
    goto corral_source_split_8682;

  corral_source_split_8682:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.137, $p10);
    goto corral_source_split_8683;

  corral_source_split_8683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1866} $i12 := qp_broker_alloc($i11, $i1, $i2, $i3, $i4, $i5, $p6, $p7, $0.ref, $0.ref, $0.ref, $0.ref);
    goto SeqInstr_532, SeqInstr_533;

  SeqInstr_533:
    assume assertsPassed;
    goto SeqInstr_534;

  SeqInstr_534:
    call {:si_unique_call 1867} {:cexpr "tmp"} boogie_si_record_i32($i12);
    goto corral_source_split_8684;

  corral_source_split_8684:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  SeqInstr_532:
    assume !assertsPassed;
    return;
}



const vmci_ctx_dequeue_datagram: ref;

axiom vmci_ctx_dequeue_datagram == $sub.ref(0, 822825);

procedure vmci_ctx_dequeue_datagram($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.123, $M.0, $M.122;



implementation vmci_ctx_dequeue_datagram($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $i19: i64;
  var $p20: ref;
  var $i21: i64;
  var $i22: i32;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $p30: ref;
  var $i31: i64;
  var $i32: i64;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i64;
  var $i44: i32;
  var $i37: i32;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i9: i32;
  var vslice_dummy_var_284: i32;
  var vslice_dummy_var_285: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8686;

  corral_source_split_8686:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(64, 1));
    goto corral_source_split_8687;

  corral_source_split_8687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1868} spin_lock($p3);
    goto corral_source_split_8688;

  corral_source_split_8688:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(40, 1));
    goto corral_source_split_8689;

  corral_source_split_8689:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_8690;

  corral_source_split_8690:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_8691;

  corral_source_split_8691:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_8701;

  corral_source_split_8701:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_8702;

  corral_source_split_8702:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_8703;

  corral_source_split_8703:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.123, $p1);
    goto corral_source_split_8704;

  corral_source_split_8704:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p13, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_8705;

  corral_source_split_8705:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.0, $p15);
    goto corral_source_split_8706;

  corral_source_split_8706:
    assume {:verifier.code 0} true;
    $i17 := $ult.i64($i14, $i16);
    goto corral_source_split_8707;

  corral_source_split_8707:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1874} list_del($p12);
    goto corral_source_split_8719;

  corral_source_split_8719:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(40, 1));
    goto corral_source_split_8720;

  corral_source_split_8720:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_8721;

  corral_source_split_8721:
    assume {:verifier.code 0} true;
    $i26 := $sub.i32($i25, 1);
    goto corral_source_split_8722;

  corral_source_split_8722:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(40, 1));
    goto corral_source_split_8723;

  corral_source_split_8723:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, $i26);
    goto corral_source_split_8724;

  corral_source_split_8724:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(48, 1));
    goto corral_source_split_8725;

  corral_source_split_8725:
    assume {:verifier.code 0} true;
    $i29 := $load.i64($M.0, $p28);
    goto corral_source_split_8726;

  corral_source_split_8726:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p13, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_8727;

  corral_source_split_8727:
    assume {:verifier.code 0} true;
    $i31 := $load.i64($M.0, $p30);
    goto corral_source_split_8728;

  corral_source_split_8728:
    assume {:verifier.code 0} true;
    $i32 := $sub.i64($i29, $i31);
    goto corral_source_split_8729;

  corral_source_split_8729:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(48, 1));
    goto corral_source_split_8730;

  corral_source_split_8730:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p33, $i32);
    goto corral_source_split_8731;

  corral_source_split_8731:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(40, 1));
    goto corral_source_split_8732;

  corral_source_split_8732:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_8733;

  corral_source_split_8733:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, 0);
    goto corral_source_split_8734;

  corral_source_split_8734:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i36 == 1);
    goto corral_source_split_8739;

  corral_source_split_8739:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_8740;

  corral_source_split_8740:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_8741;

  corral_source_split_8741:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_8742;

  corral_source_split_8742:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_8743;

  corral_source_split_8743:
    assume {:verifier.code 0} true;
    $i43 := $load.i64($M.0, $p42);
    goto corral_source_split_8744;

  corral_source_split_8744:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i64.i32($i43);
    call {:si_unique_call 1876} {:cexpr "rv"} boogie_si_record_i32($i44);
    assume {:verifier.code 0} true;
    $i37 := $i44;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_8746;

  corral_source_split_8746:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(64, 1));
    goto corral_source_split_8747;

  corral_source_split_8747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1877} spin_unlock($p45);
    goto corral_source_split_8748;

  corral_source_split_8748:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p13, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_8749;

  corral_source_split_8749:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_8750;

  corral_source_split_8750:
    assume {:verifier.code 0} true;
    $M.122 := $store.ref($M.122, $p2, $p47);
    goto corral_source_split_8751;

  corral_source_split_8751:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p13, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_8752;

  corral_source_split_8752:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p48, $0.ref);
    goto corral_source_split_8753;

  corral_source_split_8753:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p13);
    goto corral_source_split_8754;

  corral_source_split_8754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1878} kfree($p49);
    goto corral_source_split_8755;

  corral_source_split_8755:
    assume {:verifier.code 0} true;
    $i9 := $i37;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8699;

  corral_source_split_8699:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb8:
    assume $i36 == 1;
    goto corral_source_split_8736;

  corral_source_split_8736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1875} ctx_clear_notify_call($p0);
    goto corral_source_split_8737;

  corral_source_split_8737:
    assume {:verifier.code 0} true;
    $i37 := 0;
    goto $bb10;

  $bb5:
    assume $i17 == 1;
    goto corral_source_split_8709;

  corral_source_split_8709:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p13, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_8710;

  corral_source_split_8710:
    assume {:verifier.code 0} true;
    $i19 := $load.i64($M.0, $p18);
    goto corral_source_split_8711;

  corral_source_split_8711:
    assume {:verifier.code 0} true;
    $M.123 := $store.i64($M.123, $p1, $i19);
    goto corral_source_split_8712;

  corral_source_split_8712:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(64, 1));
    goto corral_source_split_8713;

  corral_source_split_8713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1872} spin_unlock($p20);
    goto corral_source_split_8714;

  corral_source_split_8714:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.123, $p1);
    goto corral_source_split_8715;

  corral_source_split_8715:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i64.i32($i21);
    goto corral_source_split_8716;

  corral_source_split_8716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1873} vslice_dummy_var_285 := no_printk.ref.i32(.str.11, $i22);
    goto corral_source_split_8717;

  corral_source_split_8717:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 3);
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_8693;

  corral_source_split_8693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1869} ctx_clear_notify_call($p0);
    goto corral_source_split_8694;

  corral_source_split_8694:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(64, 1));
    goto corral_source_split_8695;

  corral_source_split_8695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1870} spin_unlock($p7);
    goto corral_source_split_8696;

  corral_source_split_8696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1871} vslice_dummy_var_284 := no_printk.ref(.str.10);
    goto corral_source_split_8697;

  corral_source_split_8697:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 6);
    goto $bb3;
}



const ldv_mutex_lock_175: ref;

axiom ldv_mutex_lock_175 == $sub.ref(0, 823857);

procedure ldv_mutex_lock_175($p0: ref);
  free requires assertsPassed;
  modifies $M.138, assertsPassed;



implementation ldv_mutex_lock_175($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8757;

  corral_source_split_8757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1879} ldv_mutex_lock_lock_of_vmci_host_dev($p0);
    goto SeqInstr_535, SeqInstr_536;

  SeqInstr_536:
    assume assertsPassed;
    goto SeqInstr_537;

  SeqInstr_537:
    goto corral_source_split_8758;

  corral_source_split_8758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1880} mutex_lock($p0);
    goto corral_source_split_8759;

  corral_source_split_8759:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_535:
    assume !assertsPassed;
    return;
}



const get_current: ref;

axiom get_current == $sub.ref(0, 824889);

procedure get_current() returns ($r: ref);
  free requires assertsPassed;



implementation get_current() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1881} $p0 := devirtbounce.18(0, current_task);
    goto corral_source_split_8761;

  corral_source_split_8761:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const get_cred: ref;

axiom get_cred == $sub.ref(0, 825921);

procedure get_cred($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation get_cred($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8763;

  corral_source_split_8763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1882} __validate_creds($p0, .str.57, 244);
    goto corral_source_split_8764;

  corral_source_split_8764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1883} $p1 := get_new_cred($p0);
    goto corral_source_split_8765;

  corral_source_split_8765:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const vmci_ctx_create: ref;

axiom vmci_ctx_create == $sub.ref(0, 826953);

procedure vmci_ctx_create($i0: i32, $i1: i32, $i2: i64, $i3: i32, $p4: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation vmci_ctx_create($i0: i32, $i1: i32, $i2: i64, $i3: i32, $p4: ref) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $i10: i32;
  var $i11: i1;
  var $i13: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p20: ref;
  var $p21: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $i48: i1;
  var $p49: ref;
  var $p50: ref;
  var $i51: i64;
  var $i52: i1;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i1;
  var $i58: i8;
  var $i59: i1;
  var $i62: i1;
  var $i63: i32;
  var $i64: i32;
  var $i65: i1;
  var $i66: i32;
  var $i67: i1;
  var $i68: i8;
  var $i69: i1;
  var $i61: i32;
  var $i70: i32;
  var $i60: i32;
  var $p71: ref;
  var $p72: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $i9: i32;
  var $i79: i64;
  var $p80: ref;
  var $p73: ref;
  var vslice_dummy_var_286: i32;
  var vslice_dummy_var_287: i32;
  var vslice_dummy_var_288: i32;
  var vslice_dummy_var_289: i32;
  var vslice_dummy_var_290: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1884} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1885} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 1886} {:cexpr "vmci_ctx_create:arg:cid"} boogie_si_record_i32($i0);
    call {:si_unique_call 1887} {:cexpr "vmci_ctx_create:arg:priv_flags"} boogie_si_record_i32($i1);
    call {:si_unique_call 1888} {:cexpr "vmci_ctx_create:arg:event_hnd"} boogie_si_record_i64($i2);
    call {:si_unique_call 1889} {:cexpr "vmci_ctx_create:arg:user_version"} boogie_si_record_i32($i3);
    goto corral_source_split_8767;

  corral_source_split_8767:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i0, $sub.i32(0, 1));
    goto corral_source_split_8768;

  corral_source_split_8768:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i1, $sub.i32(0, 4));
    goto corral_source_split_8778;

  corral_source_split_8778:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_8779;

  corral_source_split_8779:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i3, 0);
    goto corral_source_split_8784;

  corral_source_split_8784:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1894} $p15 := kzalloc(304, 208);
    goto corral_source_split_8789;

  corral_source_split_8789:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_8790;

  corral_source_split_8790:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_8791;

  corral_source_split_8791:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i17, 0);
    goto corral_source_split_8792;

  corral_source_split_8792:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p16, $mul.ref(0, 304)), $mul.ref(20, 1));
    goto corral_source_split_8797;

  corral_source_split_8797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1896} kref_init($p20);
    goto corral_source_split_8798;

  corral_source_split_8798:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p16, $mul.ref(0, 304)), $mul.ref(64, 1));
    goto corral_source_split_8799;

  corral_source_split_8799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1897} vslice_dummy_var_290 := spinlock_check($p21);
    goto corral_source_split_8800;

  corral_source_split_8800:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p16, $mul.ref(0, 304)), $mul.ref(64, 1)), $mul.ref(0, 1));
    goto corral_source_split_8801;

  corral_source_split_8801:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_8802;

  corral_source_split_8802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1898} __raw_spin_lock_init($p25, .str.4, $p5);
    goto corral_source_split_8803;

  corral_source_split_8803:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p16, $mul.ref(0, 304)), $mul.ref(0, 1));
    goto corral_source_split_8804;

  corral_source_split_8804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1899} INIT_LIST_HEAD($p26);
    goto corral_source_split_8805;

  corral_source_split_8805:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p16, $mul.ref(0, 304)), $mul.ref(24, 1));
    goto corral_source_split_8806;

  corral_source_split_8806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1900} INIT_LIST_HEAD($p27);
    goto corral_source_split_8807;

  corral_source_split_8807:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p16, $mul.ref(0, 304)), $mul.ref(160, 1));
    goto corral_source_split_8808;

  corral_source_split_8808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1901} INIT_LIST_HEAD($p28);
    goto corral_source_split_8809;

  corral_source_split_8809:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p16, $mul.ref(0, 304)), $mul.ref(184, 1)), $mul.ref(0, 1));
    goto corral_source_split_8810;

  corral_source_split_8810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1902} __init_waitqueue_head($p30, .str.5, $p6);
    goto corral_source_split_8811;

  corral_source_split_8811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1903} $p31 := vmci_handle_arr_create(0);
    goto corral_source_split_8812;

  corral_source_split_8812:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p16, $mul.ref(0, 304)), $mul.ref(136, 1));
    goto corral_source_split_8813;

  corral_source_split_8813:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p32, $p31);
    goto corral_source_split_8814;

  corral_source_split_8814:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p16, $mul.ref(0, 304)), $mul.ref(136, 1));
    goto corral_source_split_8815;

  corral_source_split_8815:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_8816;

  corral_source_split_8816:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    goto corral_source_split_8817;

  corral_source_split_8817:
    assume {:verifier.code 0} true;
    $i36 := $eq.i64($i35, 0);
    goto corral_source_split_8818;

  corral_source_split_8818:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1905} $p37 := vmci_handle_arr_create(0);
    goto corral_source_split_8825;

  corral_source_split_8825:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p16, $mul.ref(0, 304)), $mul.ref(144, 1));
    goto corral_source_split_8826;

  corral_source_split_8826:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p38, $p37);
    goto corral_source_split_8827;

  corral_source_split_8827:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p16, $mul.ref(0, 304)), $mul.ref(144, 1));
    goto corral_source_split_8828;

  corral_source_split_8828:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_8829;

  corral_source_split_8829:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p40);
    goto corral_source_split_8830;

  corral_source_split_8830:
    assume {:verifier.code 0} true;
    $i42 := $eq.i64($i41, 0);
    goto corral_source_split_8831;

  corral_source_split_8831:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1907} $p43 := vmci_handle_arr_create(0);
    goto corral_source_split_8839;

  corral_source_split_8839:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p16, $mul.ref(0, 304)), $mul.ref(152, 1));
    goto corral_source_split_8840;

  corral_source_split_8840:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p44, $p43);
    goto corral_source_split_8841;

  corral_source_split_8841:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p16, $mul.ref(0, 304)), $mul.ref(152, 1));
    goto corral_source_split_8842;

  corral_source_split_8842:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_8843;

  corral_source_split_8843:
    assume {:verifier.code 0} true;
    $i47 := $p2i.ref.i64($p46);
    goto corral_source_split_8844;

  corral_source_split_8844:
    assume {:verifier.code 0} true;
    $i48 := $eq.i64($i47, 0);
    goto corral_source_split_8845;

  corral_source_split_8845:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p16, $mul.ref(0, 304)), $mul.ref(56, 1));
    goto corral_source_split_8853;

  corral_source_split_8853:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p49, $i3);
    goto corral_source_split_8854;

  corral_source_split_8854:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p16, $mul.ref(0, 304)), $mul.ref(272, 1));
    goto corral_source_split_8855;

  corral_source_split_8855:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p50, $i1);
    goto corral_source_split_8856;

  corral_source_split_8856:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p4);
    goto corral_source_split_8857;

  corral_source_split_8857:
    assume {:verifier.code 0} true;
    $i52 := $ne.i64($i51, 0);
    goto corral_source_split_8858;

  corral_source_split_8858:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p16, $mul.ref(0, 304)), $mul.ref(288, 1));
    goto corral_source_split_8865;

  corral_source_split_8865:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p55, ctx_dummy_notify);
    goto corral_source_split_8866;

  corral_source_split_8866:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p16, $mul.ref(0, 304)), $mul.ref(296, 1));
    goto corral_source_split_8867;

  corral_source_split_8867:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p56, $0.ref);
    goto corral_source_split_8868;

  corral_source_split_8868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1910} spin_lock($add.ref($add.ref(ctx_list, $mul.ref(0, 88)), $mul.ref(16, 1)));
    goto corral_source_split_8869;

  corral_source_split_8869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1911} $i57 := vmci_ctx_exists($i0);
    goto corral_source_split_8870;

  corral_source_split_8870:
    assume {:verifier.code 0} true;
    $i58 := $zext.i1.i8($i57);
    call {:si_unique_call 1912} {:cexpr "tmp___0"} boogie_si_record_i8($i58);
    goto corral_source_split_8871;

  corral_source_split_8871:
    assume {:verifier.code 0} true;
    $i59 := $trunc.i8.i1($i58);
    goto corral_source_split_8872;

  corral_source_split_8872:
    assume {:verifier.code 0} true;
    $i60 := $i0;
    assume {:branchcond $i59} true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i59 == 1);
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p16, $mul.ref(0, 304)), $mul.ref(16, 1));
    goto corral_source_split_8897;

  corral_source_split_8897:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p71, $i60);
    goto corral_source_split_8898;

  corral_source_split_8898:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p16, $mul.ref(0, 304)), $mul.ref(0, 1));
    goto corral_source_split_8899;

  corral_source_split_8899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1916} list_add_tail_rcu($p72, ctx_list);
    goto corral_source_split_8900;

  corral_source_split_8900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1917} spin_unlock($add.ref($add.ref(ctx_list, $mul.ref(0, 88)), $mul.ref(16, 1)));
    goto corral_source_split_8901;

  corral_source_split_8901:
    assume {:verifier.code 0} true;
    $p73 := $p15;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto corral_source_split_8903;

  corral_source_split_8903:
    assume {:verifier.code 0} true;
    $r := $p73;
    return;

  $bb29:
    assume $i59 == 1;
    goto corral_source_split_8874;

  corral_source_split_8874:
    assume {:verifier.code 0} true;
    $i61 := $i0;
    goto $bb32;

  $bb32:
    call $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i61, $i70 := vmci_ctx_create_loop_$bb32($i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i61, $i70);
    goto $bb32_last;

  corral_source_split_8876:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i62 := $ugt.i32($i61, 15);
    goto corral_source_split_8878;

  corral_source_split_8878:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i62 == 1);
    goto corral_source_split_8882;

  corral_source_split_8882:
    assume {:verifier.code 0} true;
    $i63 := 15;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_8884;

  corral_source_split_8884:
    assume {:verifier.code 0} true;
    $i64 := $add.i32($i63, 1);
    call {:si_unique_call 1913} {:cexpr "cid"} boogie_si_record_i32($i64);
    goto corral_source_split_8885;

  corral_source_split_8885:
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i64, $sub.i32(0, 1));
    goto corral_source_split_8886;

  corral_source_split_8886:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    $i66 := $i64;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_8890;

  corral_source_split_8890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1914} $i67 := vmci_ctx_exists($i66);
    goto corral_source_split_8891;

  corral_source_split_8891:
    assume {:verifier.code 0} true;
    $i68 := $zext.i1.i8($i67);
    call {:si_unique_call 1915} {:cexpr "tmp___0"} boogie_si_record_i8($i68);
    goto corral_source_split_8892;

  corral_source_split_8892:
    assume {:verifier.code 0} true;
    $i69 := $trunc.i8.i1($i68);
    goto corral_source_split_8893;

  corral_source_split_8893:
    assume {:verifier.code 0} true;
    $i70 := $i66;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_8895;

  corral_source_split_8895:
    assume {:verifier.code 0} true;
    $i60 := $i70;
    goto $bb31;

  $bb40:
    assume $i69 == 1;
    assume {:verifier.code 0} true;
    $i61 := $i66;
    goto $bb40_dummy;

  $bb37:
    assume $i65 == 1;
    goto corral_source_split_8888;

  corral_source_split_8888:
    assume {:verifier.code 0} true;
    $i66 := 16;
    goto $bb39;

  $bb34:
    assume $i62 == 1;
    goto corral_source_split_8880;

  corral_source_split_8880:
    assume {:verifier.code 0} true;
    $i63 := $i61;
    goto $bb36;

  $bb26:
    assume $i52 == 1;
    goto corral_source_split_8860;

  corral_source_split_8860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1909} $p53 := get_cred($p4);
    goto corral_source_split_8861;

  corral_source_split_8861:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p16, $mul.ref(0, 304)), $mul.ref(280, 1));
    goto corral_source_split_8862;

  corral_source_split_8862:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p54, $p53);
    goto corral_source_split_8863;

  corral_source_split_8863:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb22:
    assume $i48 == 1;
    goto corral_source_split_8847;

  corral_source_split_8847:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p16, $mul.ref(0, 304)), $mul.ref(144, 1));
    goto corral_source_split_8849;

  corral_source_split_8849:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.0, $p74);
    goto corral_source_split_8850;

  corral_source_split_8850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1908} vmci_handle_arr_destroy($p75);
    goto corral_source_split_8851;

  corral_source_split_8851:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p16, $mul.ref(0, 304)), $mul.ref(136, 1));
    goto corral_source_split_8835;

  corral_source_split_8835:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.0, $p76);
    goto corral_source_split_8836;

  corral_source_split_8836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1906} vmci_handle_arr_destroy($p77);
    goto corral_source_split_8837;

  corral_source_split_8837:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p16);
    goto corral_source_split_8822;

  corral_source_split_8822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1904} kfree($p78);
    goto corral_source_split_8823;

  corral_source_split_8823:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 12);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8773;

  corral_source_split_8773:
    assume {:verifier.code 0} true;
    $i79 := $sext.i32.i64($i9);
    goto corral_source_split_8774;

  corral_source_split_8774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1891} $p80 := ERR_PTR($i79);
    goto corral_source_split_8775;

  corral_source_split_8775:
    assume {:verifier.code 0} true;
    goto corral_source_split_8776;

  corral_source_split_8776:
    assume {:verifier.code 0} true;
    $p73 := $p80;
    goto $bb43;

  $bb18:
    assume $i42 == 1;
    goto corral_source_split_8833;

  corral_source_split_8833:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb14:
    assume $i36 == 1;
    goto corral_source_split_8820;

  corral_source_split_8820:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume $i18 == 1;
    goto corral_source_split_8794;

  corral_source_split_8794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1895} vslice_dummy_var_289 := printk.ref(.str.3);
    goto corral_source_split_8795;

  corral_source_split_8795:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 22);
    goto $bb3;

  $bb8:
    assume $i13 == 1;
    goto corral_source_split_8786;

  corral_source_split_8786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1893} vslice_dummy_var_288 := no_printk.ref.i32(.str.2, $i3);
    goto corral_source_split_8787;

  corral_source_split_8787:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 22);
    goto $bb3;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_8781;

  corral_source_split_8781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1892} vslice_dummy_var_287 := no_printk.ref.i32(.str.1, $i1);
    goto corral_source_split_8782;

  corral_source_split_8782:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_8770;

  corral_source_split_8770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1890} vslice_dummy_var_286 := no_printk.ref(.str);
    goto corral_source_split_8771;

  corral_source_split_8771:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 22);
    goto $bb3;

  $bb40_dummy:
    assume false;
    return;

  $bb32_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_8876;
}



const IS_ERR: ref;

axiom IS_ERR == $sub.ref(0, 827985);

procedure IS_ERR($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation IS_ERR($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8905;

  corral_source_split_8905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1918} $i1 := ldv_is_err($p0);
    goto corral_source_split_8906;

  corral_source_split_8906:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1919} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_8907;

  corral_source_split_8907:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_8908;

  corral_source_split_8908:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const PTR_ERR: ref;

axiom PTR_ERR == $sub.ref(0, 829017);

procedure PTR_ERR($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation PTR_ERR($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8910;

  corral_source_split_8910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1920} $i1 := ldv_ptr_err($p0);
    call {:si_unique_call 1921} {:cexpr "tmp"} boogie_si_record_i64($i1);
    goto corral_source_split_8911;

  corral_source_split_8911:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_mutex_unlock_176: ref;

axiom ldv_mutex_unlock_176 == $sub.ref(0, 830049);

procedure ldv_mutex_unlock_176($p0: ref);
  free requires assertsPassed;
  modifies $M.138, assertsPassed;



implementation ldv_mutex_unlock_176($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8913;

  corral_source_split_8913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1922} ldv_mutex_unlock_lock_of_vmci_host_dev($p0);
    goto SeqInstr_538, SeqInstr_539;

  SeqInstr_539:
    assume assertsPassed;
    goto SeqInstr_540;

  SeqInstr_540:
    goto corral_source_split_8914;

  corral_source_split_8914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1923} mutex_unlock($p0);
    goto corral_source_split_8915;

  corral_source_split_8915:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_538:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_lock_of_vmci_host_dev: ref;

axiom ldv_mutex_unlock_lock_of_vmci_host_dev == $sub.ref(0, 831081);

procedure ldv_mutex_unlock_lock_of_vmci_host_dev($p0: ref);
  free requires assertsPassed;
  modifies $M.138, assertsPassed;



implementation ldv_mutex_unlock_lock_of_vmci_host_dev($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8917;

  corral_source_split_8917:
    assume {:verifier.code 0} true;
    $i1 := $M.138;
    goto corral_source_split_8918;

  corral_source_split_8918:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 2);
    goto corral_source_split_8919;

  corral_source_split_8919:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.138 := 1;
    call {:si_unique_call 1925} {:cexpr "ldv_mutex_lock_of_vmci_host_dev"} boogie_si_record_i32(1);
    goto corral_source_split_8924;

  corral_source_split_8924:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_8921;

  corral_source_split_8921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1924} ldv_error();
    goto SeqInstr_541, SeqInstr_542;

  SeqInstr_542:
    assume assertsPassed;
    goto SeqInstr_543;

  SeqInstr_543:
    goto corral_source_split_8922;

  corral_source_split_8922:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_541:
    assume !assertsPassed;
    return;
}



const ldv_ptr_err: ref;

axiom ldv_ptr_err == $sub.ref(0, 832113);

procedure ldv_ptr_err($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation ldv_ptr_err($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8926;

  corral_source_split_8926:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_8927;

  corral_source_split_8927:
    assume {:verifier.code 0} true;
    $i2 := $sub.i64(2012, $i1);
    goto corral_source_split_8928;

  corral_source_split_8928:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_is_err: ref;

axiom ldv_is_err == $sub.ref(0, 833145);

procedure ldv_is_err($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation ldv_is_err($p0: ref) returns ($r: i1)
{
  var $i1: i64;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8930;

  corral_source_split_8930:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_8931;

  corral_source_split_8931:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 2012);
    goto corral_source_split_8932;

  corral_source_split_8932:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 834177);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8934;

  corral_source_split_8934:
    assume {:verifier.code 0} true;
    return;
}



const ERR_PTR: ref;

axiom ERR_PTR == $sub.ref(0, 835209);

procedure ERR_PTR($i0: i64) returns ($r: ref);
  free requires assertsPassed;



implementation ERR_PTR($i0: i64) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1926} {:cexpr "ERR_PTR:arg:error"} boogie_si_record_i64($i0);
    goto corral_source_split_8936;

  corral_source_split_8936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1927} $p1 := ldv_err_ptr($i0);
    goto corral_source_split_8937;

  corral_source_split_8937:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const ldv_err_ptr: ref;

axiom ldv_err_ptr == $sub.ref(0, 836241);

procedure ldv_err_ptr($i0: i64) returns ($r: ref);
  free requires assertsPassed;



implementation ldv_err_ptr($i0: i64) returns ($r: ref)
{
  var $i1: i64;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1928} {:cexpr "ldv_err_ptr:arg:error"} boogie_si_record_i64($i0);
    goto corral_source_split_8939;

  corral_source_split_8939:
    assume {:verifier.code 0} true;
    $i1 := $sub.i64(2012, $i0);
    goto corral_source_split_8940;

  corral_source_split_8940:
    assume {:verifier.code 0} true;
    $p2 := $i2p.i64.ref($i1);
    goto corral_source_split_8941;

  corral_source_split_8941:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const get_new_cred: ref;

axiom get_new_cred == $sub.ref(0, 837273);

procedure get_new_cred($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation get_new_cred($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8943;

  corral_source_split_8943:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(0, 1));
    goto corral_source_split_8944;

  corral_source_split_8944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1929} atomic_inc($p1);
    goto corral_source_split_8945;

  corral_source_split_8945:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_mutex_lock_lock_of_vmci_host_dev: ref;

axiom ldv_mutex_lock_lock_of_vmci_host_dev == $sub.ref(0, 838305);

procedure ldv_mutex_lock_lock_of_vmci_host_dev($p0: ref);
  free requires assertsPassed;
  modifies $M.138, assertsPassed;



implementation ldv_mutex_lock_lock_of_vmci_host_dev($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8947;

  corral_source_split_8947:
    assume {:verifier.code 0} true;
    $i1 := $M.138;
    goto corral_source_split_8948;

  corral_source_split_8948:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 1);
    goto corral_source_split_8949;

  corral_source_split_8949:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.138 := 2;
    call {:si_unique_call 1931} {:cexpr "ldv_mutex_lock_of_vmci_host_dev"} boogie_si_record_i32(2);
    goto corral_source_split_8954;

  corral_source_split_8954:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_8951;

  corral_source_split_8951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1930} ldv_error();
    goto SeqInstr_544, SeqInstr_545;

  SeqInstr_545:
    assume assertsPassed;
    goto SeqInstr_546;

  SeqInstr_546:
    goto corral_source_split_8952;

  corral_source_split_8952:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_544:
    assume !assertsPassed;
    return;
}



const poll_wait: ref;

axiom poll_wait == $sub.ref(0, 839337);

procedure poll_wait($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation poll_wait($p0: ref, $p1: ref, $p2: ref)
{
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8956;

  corral_source_split_8956:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_8957;

  corral_source_split_8957:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_8958;

  corral_source_split_8958:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_8960;

  corral_source_split_8960:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_8961;

  corral_source_split_8961:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_8962;

  corral_source_split_8962:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_8963;

  corral_source_split_8963:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_8964;

  corral_source_split_8964:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_8966;

  corral_source_split_8966:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p1);
    goto corral_source_split_8967;

  corral_source_split_8967:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_8968;

  corral_source_split_8968:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb6:
    assume $i10 == 1;
    goto corral_source_split_8970;

  corral_source_split_8970:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_8971;

  corral_source_split_8971:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    call {:si_unique_call 1932} devirtbounce.19($p12, $p0, $p1, $p2);
    goto corral_source_split_8972;

  corral_source_split_8972:
    assume {:verifier.code 0} true;
    goto $bb8;
}



const ldv_init_zalloc: ref;

axiom ldv_init_zalloc == $sub.ref(0, 840369);

procedure ldv_init_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_init_zalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1933} {:cexpr "ldv_init_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_8974;

  corral_source_split_8974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1934} $p1 := calloc(1, $i0);
    goto corral_source_split_8975;

  corral_source_split_8975:
    assume {:verifier.code 1} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_8976;

  corral_source_split_8976:
    assume {:verifier.code 1} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_8977;

  corral_source_split_8977:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_8978;

  corral_source_split_8978:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1935} __VERIFIER_assume($i4);
    goto corral_source_split_8979;

  corral_source_split_8979:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const ldv_memset: ref;

axiom ldv_memset == $sub.ref(0, 841401);

procedure ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.139;



implementation ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref)
{
  var $i3: i8;
  var cmdloc_dummy_var_175: [ref]i8;
  var cmdloc_dummy_var_176: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1936} {:cexpr "ldv_memset:arg:c"} boogie_si_record_i32($i1);
    call {:si_unique_call 1937} {:cexpr "ldv_memset:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_8981;

  corral_source_split_8981:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i8($i1);
    goto corral_source_split_8982;

  corral_source_split_8982:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_175 := $M.139;
    call {:si_unique_call 1938} cmdloc_dummy_var_176 := $memset.i8(cmdloc_dummy_var_175, $p0, $i3, $i2, $zext.i32.i64(1), 0 == 1);
    $M.139 := cmdloc_dummy_var_176;
    goto corral_source_split_8983;

  corral_source_split_8983:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const work_init_3: ref;

axiom work_init_3 == $sub.ref(0, 842433);

procedure work_init_3();
  free requires assertsPassed;
  modifies $M.36, $M.38, $M.40, $M.42;



implementation work_init_3()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8985;

  corral_source_split_8985:
    assume {:verifier.code 0} true;
    $M.36 := 0;
    call {:si_unique_call 1939} {:cexpr "ldv_work_3_0"} boogie_si_record_i32(0);
    goto corral_source_split_8986;

  corral_source_split_8986:
    assume {:verifier.code 0} true;
    $M.38 := 0;
    call {:si_unique_call 1940} {:cexpr "ldv_work_3_1"} boogie_si_record_i32(0);
    goto corral_source_split_8987;

  corral_source_split_8987:
    assume {:verifier.code 0} true;
    $M.40 := 0;
    call {:si_unique_call 1941} {:cexpr "ldv_work_3_2"} boogie_si_record_i32(0);
    goto corral_source_split_8988;

  corral_source_split_8988:
    assume {:verifier.code 0} true;
    $M.42 := 0;
    call {:si_unique_call 1942} {:cexpr "ldv_work_3_3"} boogie_si_record_i32(0);
    goto corral_source_split_8989;

  corral_source_split_8989:
    assume {:verifier.code 0} true;
    return;
}



const work_init_4: ref;

axiom work_init_4 == $sub.ref(0, 843465);

procedure work_init_4();
  free requires assertsPassed;



implementation work_init_4()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8991;

  corral_source_split_8991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1943} {:cexpr "ldv_work_4_0"} boogie_si_record_i32(0);
    goto corral_source_split_8992;

  corral_source_split_8992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1944} {:cexpr "ldv_work_4_1"} boogie_si_record_i32(0);
    goto corral_source_split_8993;

  corral_source_split_8993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1945} {:cexpr "ldv_work_4_2"} boogie_si_record_i32(0);
    goto corral_source_split_8994;

  corral_source_split_8994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1946} {:cexpr "ldv_work_4_3"} boogie_si_record_i32(0);
    goto corral_source_split_8995;

  corral_source_split_8995:
    assume {:verifier.code 0} true;
    return;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 844497);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8997;

  corral_source_split_8997:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const work_init_5: ref;

axiom work_init_5 == $sub.ref(0, 845529);

procedure work_init_5();
  free requires assertsPassed;



implementation work_init_5()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8999;

  corral_source_split_8999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1947} {:cexpr "ldv_work_5_0"} boogie_si_record_i32(0);
    goto corral_source_split_9000;

  corral_source_split_9000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1948} {:cexpr "ldv_work_5_1"} boogie_si_record_i32(0);
    goto corral_source_split_9001;

  corral_source_split_9001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1949} {:cexpr "ldv_work_5_2"} boogie_si_record_i32(0);
    goto corral_source_split_9002;

  corral_source_split_9002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1950} {:cexpr "ldv_work_5_3"} boogie_si_record_i32(0);
    goto corral_source_split_9003;

  corral_source_split_9003:
    assume {:verifier.code 0} true;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 846561);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.148, $M.36, $M.38, $M.40, $M.42, $M.150, $M.154, $M.155, $M.157, $M.108, $M.112, $M.110, $M.114, $M.180, $M.70, $M.46, $M.28, $M.169, $M.138, $M.168, $M.167, $M.0, $M.181, $M.182, $M.183, $M.184, $M.185, $M.186, $M.187, $M.188, $M.189, $M.190, $M.191, $M.192, $M.193, $M.194, $M.172, $M.171, $M.107, $M.106, $M.69, $M.231, $M.232, $M.233, $M.44, $M.234, $M.235, $M.166, $M.165, $M.164, $M.163, $M.236, $M.237, $M.238, $M.239, $M.240, $M.241, $M.242, $M.243, $M.244, $M.4, $M.160, $M.1, $M.170, $M.162, $M.245, $M.246, $M.247, $M.248, $M.249, $M.250, $M.251, $M.31, $M.87, $M.161, $M.111, $M.113, $M.115, $M.158, $M.109, $M.159, $M.321, $M.322, $M.323, $M.324, $M.325, $M.326, $M.327, $M.328, $M.329, $M.330, $M.331, $M.332, $CurrAddr, $M.139, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.122, $M.123, $M.18, $M.78, $M.77, $M.125, $M.65, $M.45, $M.20, $M.21, $M.48, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, assertsPassed, $M.133, $M.124, $M.23, $M.24, $M.25, $M.26, $M.19, $M.27, $M.29, $M.137, $M.76, $M.75, $M.134, $M.96, $M.97, $M.126, $M.127, $M.128, $M.135, $M.136, $M.129, $M.130, $M.131, $M.132, $M.67, $M.30, $M.66, $M.68, $M.58, $M.33, $M.47, $M.89, $M.34, $M.35, $M.74, $M.32, $M.98, $M.2, $M.3, $M.90, $M.86, $M.91, $M.55, $M.79, $M.6, $M.13, $M.92, $M.93;



implementation main() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $i30: i1;

  $bb0:
    call {:si_unique_call 1951} $initialize();
    goto corral_source_split_9005;

  corral_source_split_9005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1952} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    goto corral_source_split_9006;

  corral_source_split_9006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1953} ldv_initialize();
    goto corral_source_split_9007;

  corral_source_split_9007:
    assume {:verifier.code 0} true;
    $M.148 := 0;
    call {:si_unique_call 1954} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    goto corral_source_split_9008;

  corral_source_split_9008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1955} work_init_3();
    goto corral_source_split_9009;

  corral_source_split_9009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1956} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_9010;

  corral_source_split_9010:
    assume {:verifier.code 0} true;
    $M.150 := 0;
    call {:si_unique_call 1957} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    goto corral_source_split_9011;

  corral_source_split_9011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1958} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_9012;

  corral_source_split_9012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1959} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_9013;

  corral_source_split_9013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1960} work_init_4();
    goto corral_source_split_9014;

  corral_source_split_9014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1961} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_9015;

  corral_source_split_9015:
    assume {:verifier.code 0} true;
    $M.154 := 0;
    call {:si_unique_call 1962} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_9016;

  corral_source_split_9016:
    assume {:verifier.code 0} true;
    $M.155 := 1;
    call {:si_unique_call 1963} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_9017;

  corral_source_split_9017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1964} work_init_5();
    goto corral_source_split_9018;

  corral_source_split_9018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1965} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_9019;

  corral_source_split_9019:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30 := main_loop_$bb1($i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i0, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i0, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1982} ldv_stop();
    goto corral_source_split_9086;

  corral_source_split_9086:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb25_dummy;

  $bb9:
    assume $i4 == 1;
    goto corral_source_split_9025;

  corral_source_split_9025:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb7:
    assume $i3 == 1;
    goto corral_source_split_9021;

  corral_source_split_9021:
    assume {:verifier.code 0} true;
    $i14 := $M.155;
    goto corral_source_split_9022;

  corral_source_split_9022:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_9023;

  corral_source_split_9023:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb29:
    assume $i15 == 1;
    goto corral_source_split_9049;

  corral_source_split_9049:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1971} $i16 := __VERIFIER_nondet_int();
    call {:si_unique_call 1972} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i16);
    call {:si_unique_call 1973} {:cexpr "tmp___0"} boogie_si_record_i32($i16);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i16, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i16, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1981} ldv_stop();
    goto corral_source_split_9084;

  corral_source_split_9084:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb34:
    assume $i18 == 1;
    goto corral_source_split_9051;

  corral_source_split_9051:
    assume {:verifier.code 0} true;
    $i24 := $M.155;
    goto corral_source_split_9052;

  corral_source_split_9052:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 1);
    goto corral_source_split_9053;

  corral_source_split_9053:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb47:
    assume $i25 == 1;
    goto corral_source_split_9069;

  corral_source_split_9069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1977} $i26 := vmci_drv_init();
    goto SeqInstr_559, SeqInstr_560;

  SeqInstr_560:
    assume assertsPassed;
    goto SeqInstr_561;

  SeqInstr_561:
    goto corral_source_split_9070;

  corral_source_split_9070:
    assume {:verifier.code 0} true;
    $M.157 := $i26;
    call {:si_unique_call 1978} {:cexpr "ldv_retval_2"} boogie_si_record_i32($i26);
    goto corral_source_split_9071;

  corral_source_split_9071:
    assume {:verifier.code 0} true;
    $i27 := $M.157;
    goto corral_source_split_9072;

  corral_source_split_9072:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_9073;

  corral_source_split_9073:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $i29 := $M.157;
    goto corral_source_split_9078;

  corral_source_split_9078:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 0);
    goto corral_source_split_9079;

  corral_source_split_9079:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb52:
    assume $i30 == 1;
    goto corral_source_split_9081;

  corral_source_split_9081:
    assume {:verifier.code 0} true;
    $M.155 := 2;
    call {:si_unique_call 1980} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_9082;

  corral_source_split_9082:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb49:
    assume $i28 == 1;
    goto corral_source_split_9075;

  corral_source_split_9075:
    assume {:verifier.code 0} true;
    $M.155 := 3;
    call {:si_unique_call 1979} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_9076;

  corral_source_split_9076:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1976} ldv_check_final_state();
    goto SeqInstr_556, SeqInstr_557;

  SeqInstr_557:
    assume assertsPassed;
    goto SeqInstr_558;

  SeqInstr_558:
    goto corral_source_split_9067;

  corral_source_split_9067:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_556:
    assume !assertsPassed;
    return;

  SeqInstr_559:
    assume !assertsPassed;
    return;

  $bb32:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i16, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb36;

  $bb37:
    assume $i19 == 1;
    goto corral_source_split_9055;

  corral_source_split_9055:
    assume {:verifier.code 0} true;
    $i20 := $M.155;
    goto corral_source_split_9056;

  corral_source_split_9056:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 2);
    goto corral_source_split_9057;

  corral_source_split_9057:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb39:
    assume $i21 == 1;
    goto corral_source_split_9059;

  corral_source_split_9059:
    assume {:verifier.code 0} true;
    $i22 := $M.154;
    goto corral_source_split_9060;

  corral_source_split_9060:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 0);
    goto corral_source_split_9061;

  corral_source_split_9061:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb41;

  $bb42:
    assume $i23 == 1;
    goto corral_source_split_9063;

  corral_source_split_9063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1974} vmci_drv_exit();
    goto SeqInstr_553, SeqInstr_554;

  SeqInstr_554:
    assume assertsPassed;
    goto SeqInstr_555;

  SeqInstr_555:
    goto corral_source_split_9064;

  corral_source_split_9064:
    assume {:verifier.code 0} true;
    $M.155 := 3;
    call {:si_unique_call 1975} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_9065;

  corral_source_split_9065:
    assume {:verifier.code 0} true;
    goto $bb44;

  SeqInstr_553:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i2 == 1;
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i0, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i5 == 1);
    goto corral_source_split_9029;

  corral_source_split_9029:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb12:
    assume $i5 == 1;
    goto corral_source_split_9027;

  corral_source_split_9027:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb3:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i7 == 1);
    goto corral_source_split_9035;

  corral_source_split_9035:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb16:
    assume $i7 == 1;
    goto corral_source_split_9031;

  corral_source_split_9031:
    assume {:verifier.code 0} true;
    $i12 := $M.150;
    goto corral_source_split_9032;

  corral_source_split_9032:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_9033;

  corral_source_split_9033:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb26:
    assume $i13 == 1;
    goto corral_source_split_9046;

  corral_source_split_9046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1970} ldv_main_exported_7();
    goto SeqInstr_550, SeqInstr_551;

  SeqInstr_551:
    assume assertsPassed;
    goto SeqInstr_552;

  SeqInstr_552:
    goto corral_source_split_9047;

  corral_source_split_9047:
    assume {:verifier.code 0} true;
    goto $bb28;

  SeqInstr_550:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i6 == 1;
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i8 == 1);
    goto corral_source_split_9037;

  corral_source_split_9037:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb18:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb11;

  $bb20:
    assume $i9 == 1;
    goto corral_source_split_9039;

  corral_source_split_9039:
    assume {:verifier.code 0} true;
    $i10 := $M.148;
    goto corral_source_split_9040;

  corral_source_split_9040:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_9041;

  corral_source_split_9041:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb22:
    assume $i11 == 1;
    goto corral_source_split_9043;

  corral_source_split_9043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1969} ldv_main_exported_6();
    goto SeqInstr_547, SeqInstr_548;

  SeqInstr_548:
    assume assertsPassed;
    goto SeqInstr_549;

  SeqInstr_549:
    goto corral_source_split_9044;

  corral_source_split_9044:
    assume {:verifier.code 0} true;
    goto $bb24;

  SeqInstr_547:
    assume !assertsPassed;
    return;

  $bb25_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1966} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1967} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1968} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 847593);

procedure ldv_initialize();
  free requires assertsPassed;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9088;

  corral_source_split_9088:
    assume {:verifier.code 0} true;
    return;
}



const ldv_main_exported_6: ref;

axiom ldv_main_exported_6 == $sub.ref(0, 848625);

procedure ldv_main_exported_6();
  free requires assertsPassed;
  modifies $M.139, $M.0, $M.148, $M.154, $M.160, $M.122, $M.123, $M.18, $M.78, $M.77, $M.125, $M.65, $M.45, $M.20, $M.21, $M.48, $CurrAddr, $M.133, $M.124, $M.23, $M.24, $M.25, $M.26, $M.19, $M.27, $M.29, $M.137, $M.76, $M.75, $M.134, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.96, $M.97, $M.126, $M.127, $M.128, $M.135, $M.136, $M.129, $M.130, $M.131, $M.132, $M.67, $M.30, $M.66, $M.68, $M.58, $M.28, $M.47, $M.89, $M.33, $M.34, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.31, $M.87, $M.69, $M.35, $M.74, $M.32, $M.98, $M.2, $M.3, $M.138, assertsPassed, $M.46, $M.90, $M.86, $M.91, $M.44, $M.108, $M.110, $M.112, $M.114, $M.70, $M.55, $M.79, $M.6, $M.13, $M.92, $M.93, $M.109, $M.111, $M.113, $M.115, $M.36, $M.38, $M.40, $M.42;



implementation ldv_main_exported_6()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $p12: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $i26: i32;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $i31: i32;
  var $i32: i64;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $i47: i32;
  var $i48: i1;
  var $i49: i32;
  var $i50: i32;
  var $i51: i32;
  var $i52: i1;
  var $p53: ref;
  var $i54: i32;
  var $i55: i64;
  var vslice_dummy_var_291: ref;
  var vslice_dummy_var_292: ref;
  var vslice_dummy_var_293: ref;
  var vslice_dummy_var_294: ref;
  var vslice_dummy_var_295: i32;
  var vslice_dummy_var_296: i64;
  var vslice_dummy_var_297: i32;
  var vslice_dummy_var_298: i32;
  var vslice_dummy_var_299: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1983} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1984} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1985} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1986} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_9090;

  corral_source_split_9090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1987} $p4 := ldv_init_zalloc(16);
    goto corral_source_split_9091;

  corral_source_split_9091:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_9092;

  corral_source_split_9092:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_9093;

  corral_source_split_9093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1988} vslice_dummy_var_291 := ldv_memset($p6, 0, 8);
    goto corral_source_split_9094;

  corral_source_split_9094:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_9095;

  corral_source_split_9095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1989} vslice_dummy_var_292 := ldv_memset($p8, 0, 8);
    goto corral_source_split_9096;

  corral_source_split_9096:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_9097;

  corral_source_split_9097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1990} vslice_dummy_var_293 := ldv_memset($p10, 0, 4);
    goto corral_source_split_9098;

  corral_source_split_9098:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p3);
    goto corral_source_split_9099;

  corral_source_split_9099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1991} vslice_dummy_var_294 := ldv_memset($p12, 0, 4);
    goto corral_source_split_9100;

  corral_source_split_9100:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1992} $i14 := __VERIFIER_nondet_int();
    call {:si_unique_call 1993} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i14);
    call {:si_unique_call 1994} {:cexpr "tmp___0"} boogie_si_record_i32($i14);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i14, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i14, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i14, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i14, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2010} ldv_stop();
    goto corral_source_split_9172;

  corral_source_split_9172:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i18 == 1;
    goto corral_source_split_9110;

  corral_source_split_9110:
    assume {:verifier.code 0} true;
    $i51 := $M.148;
    goto corral_source_split_9111;

  corral_source_split_9111:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i51, 2);
    goto corral_source_split_9112;

  corral_source_split_9112:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb34:
    assume $i52 == 1;
    goto corral_source_split_9165;

  corral_source_split_9165:
    assume {:verifier.code 0} true;
    $p53 := $M.159;
    goto corral_source_split_9166;

  corral_source_split_9166:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.139, $p3);
    goto corral_source_split_9167;

  corral_source_split_9167:
    assume {:verifier.code 0} true;
    $i55 := $load.i64($M.139, $p0);
    goto corral_source_split_9168;

  corral_source_split_9168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2008} vslice_dummy_var_299 := vmci_host_unlocked_ioctl($p53, $i54, $i55);
    goto SeqInstr_568, SeqInstr_569;

  SeqInstr_569:
    assume assertsPassed;
    goto SeqInstr_570;

  SeqInstr_570:
    goto corral_source_split_9169;

  corral_source_split_9169:
    assume {:verifier.code 0} true;
    $M.148 := 2;
    call {:si_unique_call 2009} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_9170;

  corral_source_split_9170:
    assume {:verifier.code 0} true;
    goto $bb36;

  SeqInstr_568:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i17 == 1;
    goto corral_source_split_9106;

  corral_source_split_9106:
    assume {:verifier.code 0} true;
    $i42 := $M.148;
    goto corral_source_split_9107;

  corral_source_split_9107:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, 1);
    goto corral_source_split_9108;

  corral_source_split_9108:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb28:
    assume $i43 == 1;
    goto corral_source_split_9151;

  corral_source_split_9151:
    assume {:verifier.code 0} true;
    $p44 := $M.158;
    goto corral_source_split_9152;

  corral_source_split_9152:
    assume {:verifier.code 0} true;
    $p45 := $M.159;
    goto corral_source_split_9153;

  corral_source_split_9153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2004} $i46 := vmci_host_open($p44, $p45);
    goto corral_source_split_9154;

  corral_source_split_9154:
    assume {:verifier.code 0} true;
    $M.160 := $i46;
    call {:si_unique_call 2005} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i46);
    goto corral_source_split_9155;

  corral_source_split_9155:
    assume {:verifier.code 0} true;
    $i47 := $M.160;
    goto corral_source_split_9156;

  corral_source_split_9156:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i47, 0);
    goto corral_source_split_9157;

  corral_source_split_9157:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb30:
    assume $i48 == 1;
    goto corral_source_split_9159;

  corral_source_split_9159:
    assume {:verifier.code 0} true;
    $M.148 := 2;
    call {:si_unique_call 2006} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_9160;

  corral_source_split_9160:
    assume {:verifier.code 0} true;
    $i49 := $M.154;
    goto corral_source_split_9161;

  corral_source_split_9161:
    assume {:verifier.code 0} true;
    $i50 := $add.i32($i49, 1);
    goto corral_source_split_9162;

  corral_source_split_9162:
    assume {:verifier.code 0} true;
    $M.154 := $i50;
    call {:si_unique_call 2007} {:cexpr "ref_cnt"} boogie_si_record_i32($i50);
    goto corral_source_split_9163;

  corral_source_split_9163:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb4:
    assume $i16 == 1;
    goto corral_source_split_9102;

  corral_source_split_9102:
    assume {:verifier.code 0} true;
    $i34 := $M.148;
    goto corral_source_split_9103;

  corral_source_split_9103:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 1);
    goto corral_source_split_9104;

  corral_source_split_9104:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i38 := $M.148;
    goto corral_source_split_9143;

  corral_source_split_9143:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 2);
    goto corral_source_split_9144;

  corral_source_split_9144:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb25:
    assume $i39 == 1;
    goto corral_source_split_9146;

  corral_source_split_9146:
    assume {:verifier.code 0} true;
    $p40 := $M.159;
    goto corral_source_split_9147;

  corral_source_split_9147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2002} vslice_dummy_var_298 := vmci_host_poll($p40, $p5);
    goto corral_source_split_9148;

  corral_source_split_9148:
    assume {:verifier.code 0} true;
    $M.148 := 2;
    call {:si_unique_call 2003} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_9149;

  corral_source_split_9149:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb22:
    assume $i35 == 1;
    goto corral_source_split_9138;

  corral_source_split_9138:
    assume {:verifier.code 0} true;
    $p36 := $M.159;
    goto corral_source_split_9139;

  corral_source_split_9139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2000} vslice_dummy_var_297 := vmci_host_poll($p36, $p5);
    goto corral_source_split_9140;

  corral_source_split_9140:
    assume {:verifier.code 0} true;
    $M.148 := 1;
    call {:si_unique_call 2001} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_9141;

  corral_source_split_9141:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb2:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i14, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i19 == 1);
    goto corral_source_split_9114;

  corral_source_split_9114:
    assume {:verifier.code 0} true;
    $i28 := $M.148;
    goto corral_source_split_9115;

  corral_source_split_9115:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 2);
    goto corral_source_split_9116;

  corral_source_split_9116:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb19:
    assume $i29 == 1;
    goto corral_source_split_9131;

  corral_source_split_9131:
    assume {:verifier.code 0} true;
    $p30 := $M.159;
    goto corral_source_split_9132;

  corral_source_split_9132:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.139, $p2);
    goto corral_source_split_9133;

  corral_source_split_9133:
    assume {:verifier.code 0} true;
    $i32 := $load.i64($M.139, $p1);
    goto corral_source_split_9134;

  corral_source_split_9134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1998} vslice_dummy_var_296 := vmci_host_unlocked_ioctl($p30, $i31, $i32);
    goto SeqInstr_565, SeqInstr_566;

  SeqInstr_566:
    assume assertsPassed;
    goto SeqInstr_567;

  SeqInstr_567:
    goto corral_source_split_9135;

  corral_source_split_9135:
    assume {:verifier.code 0} true;
    $M.148 := 2;
    call {:si_unique_call 1999} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_9136;

  corral_source_split_9136:
    assume {:verifier.code 0} true;
    goto $bb21;

  SeqInstr_565:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i14, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb10;

  $bb13:
    assume $i20 == 1;
    goto corral_source_split_9118;

  corral_source_split_9118:
    assume {:verifier.code 0} true;
    $i21 := $M.148;
    goto corral_source_split_9119;

  corral_source_split_9119:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 2);
    goto corral_source_split_9120;

  corral_source_split_9120:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i22 == 1;
    goto corral_source_split_9122;

  corral_source_split_9122:
    assume {:verifier.code 0} true;
    $p23 := $M.158;
    goto corral_source_split_9123;

  corral_source_split_9123:
    assume {:verifier.code 0} true;
    $p24 := $M.159;
    goto corral_source_split_9124;

  corral_source_split_9124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1995} vslice_dummy_var_295 := vmci_host_close($p23, $p24);
    goto SeqInstr_562, SeqInstr_563;

  SeqInstr_563:
    assume assertsPassed;
    goto SeqInstr_564;

  SeqInstr_564:
    goto corral_source_split_9125;

  corral_source_split_9125:
    assume {:verifier.code 0} true;
    $M.148 := 1;
    call {:si_unique_call 1996} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_9126;

  corral_source_split_9126:
    assume {:verifier.code 0} true;
    $i26 := $M.154;
    goto corral_source_split_9127;

  corral_source_split_9127:
    assume {:verifier.code 0} true;
    $i27 := $sub.i32($i26, 1);
    goto corral_source_split_9128;

  corral_source_split_9128:
    assume {:verifier.code 0} true;
    $M.154 := $i27;
    call {:si_unique_call 1997} {:cexpr "ref_cnt"} boogie_si_record_i32($i27);
    goto corral_source_split_9129;

  corral_source_split_9129:
    assume {:verifier.code 0} true;
    goto $bb17;

  SeqInstr_562:
    assume !assertsPassed;
    return;
}



const ldv_main_exported_7: ref;

axiom ldv_main_exported_7 == $sub.ref(0, 849657);

procedure ldv_main_exported_7();
  free requires assertsPassed;
  modifies $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.0, $M.31, $M.87, $M.69, $M.162, $M.150, $M.154, $M.108, $M.110, $M.112, $M.114, $M.70, $M.20, $M.21, $CurrAddr, $M.109, $M.111, $M.113, $M.115, assertsPassed, $M.28, $M.33, $M.2, $M.3, $M.6, $M.13, $M.18, $M.19, $M.23, $M.24, $M.25, $M.26, $M.27, $M.29, $M.45, $M.48, $M.47, $M.89, $M.34, $M.30, $M.35, $M.46, $M.90, $M.86, $M.91, $M.44, $M.32, $M.36, $M.38, $M.40, $M.42;



implementation ldv_main_exported_7()
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var vslice_dummy_var_300: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9174;

  corral_source_split_9174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2011} $p0 := ldv_init_zalloc(32);
    goto corral_source_split_9175;

  corral_source_split_9175:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_9176;

  corral_source_split_9176:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2012} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2013} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 2014} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i2, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i2, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i2, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2023} ldv_stop();
    goto corral_source_split_9212;

  corral_source_split_9212:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i5 == 1;
    goto corral_source_split_9182;

  corral_source_split_9182:
    assume {:verifier.code 0} true;
    $i18 := $M.150;
    goto corral_source_split_9183;

  corral_source_split_9183:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 2);
    goto corral_source_split_9184;

  corral_source_split_9184:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb21:
    assume $i19 == 1;
    goto corral_source_split_9208;

  corral_source_split_9208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2021} vslice_dummy_var_300 := ldv_shutdown_7();
    goto corral_source_split_9209;

  corral_source_split_9209:
    assume {:verifier.code 0} true;
    $M.150 := 2;
    call {:si_unique_call 2022} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_9210;

  corral_source_split_9210:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_9178;

  corral_source_split_9178:
    assume {:verifier.code 0} true;
    $i15 := $M.150;
    goto corral_source_split_9179;

  corral_source_split_9179:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 2);
    goto corral_source_split_9180;

  corral_source_split_9180:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb18:
    assume $i16 == 1;
    goto corral_source_split_9203;

  corral_source_split_9203:
    assume {:verifier.code 0} true;
    $p17 := $M.161;
    goto corral_source_split_9204;

  corral_source_split_9204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2019} vmci_guest_remove_device($p17);
    goto SeqInstr_574, SeqInstr_575;

  SeqInstr_575:
    assume assertsPassed;
    goto SeqInstr_576;

  SeqInstr_576:
    goto corral_source_split_9205;

  corral_source_split_9205:
    assume {:verifier.code 0} true;
    $M.150 := 1;
    call {:si_unique_call 2020} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_9206;

  corral_source_split_9206:
    assume {:verifier.code 0} true;
    goto $bb20;

  SeqInstr_574:
    assume !assertsPassed;
    return;

  $bb2:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i2, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb8;

  $bb9:
    assume $i6 == 1;
    goto corral_source_split_9186;

  corral_source_split_9186:
    assume {:verifier.code 0} true;
    $i7 := $M.150;
    goto corral_source_split_9187;

  corral_source_split_9187:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 1);
    goto corral_source_split_9188;

  corral_source_split_9188:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb11:
    assume $i8 == 1;
    goto corral_source_split_9190;

  corral_source_split_9190:
    assume {:verifier.code 0} true;
    $p9 := $M.161;
    goto corral_source_split_9191;

  corral_source_split_9191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2015} $i10 := vmci_guest_probe_device($p9, $p1);
    goto SeqInstr_571, SeqInstr_572;

  SeqInstr_572:
    assume assertsPassed;
    goto SeqInstr_573;

  SeqInstr_573:
    goto corral_source_split_9192;

  corral_source_split_9192:
    assume {:verifier.code 0} true;
    $M.162 := $i10;
    call {:si_unique_call 2016} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i10);
    goto corral_source_split_9193;

  corral_source_split_9193:
    assume {:verifier.code 0} true;
    $i11 := $M.162;
    goto corral_source_split_9194;

  corral_source_split_9194:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_9195;

  corral_source_split_9195:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i12 == 1;
    goto corral_source_split_9197;

  corral_source_split_9197:
    assume {:verifier.code 0} true;
    $M.150 := 2;
    call {:si_unique_call 2017} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_9198;

  corral_source_split_9198:
    assume {:verifier.code 0} true;
    $i13 := $M.154;
    goto corral_source_split_9199;

  corral_source_split_9199:
    assume {:verifier.code 0} true;
    $i14 := $add.i32($i13, 1);
    goto corral_source_split_9200;

  corral_source_split_9200:
    assume {:verifier.code 0} true;
    $M.154 := $i14;
    call {:si_unique_call 2018} {:cexpr "ref_cnt"} boogie_si_record_i32($i14);
    goto corral_source_split_9201;

  corral_source_split_9201:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_571:
    assume !assertsPassed;
    return;
}



const vmci_drv_exit: ref;

axiom vmci_drv_exit == $sub.ref(0, 850689);

procedure vmci_drv_exit();
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.150, $M.148, $CurrAddr, $M.28, $M.2, $M.3, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.31, $M.87, assertsPassed, $M.6, $M.13, $M.20, $M.21, $M.18, $M.19, $M.69, $M.70, $M.23, $M.24, $M.25, $M.26, $M.27, $M.108, $M.110, $M.112, $M.114, $M.33, $M.29, $M.45, $M.48, $M.47, $M.89, $M.109, $M.111, $M.113, $M.115, $M.34, $M.30, $M.35, $M.46, $M.90, $M.86, $M.91, $M.44, $M.32, $M.36, $M.38, $M.40, $M.42;



implementation vmci_drv_exit()
{
  var $i0: i8;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9214;

  corral_source_split_9214:
    assume {:verifier.code 0} true;
    $i0 := $M.163;
    goto corral_source_split_9215;

  corral_source_split_9215:
    assume {:verifier.code 0} true;
    $i1 := $trunc.i8.i1($i0);
    goto corral_source_split_9216;

  corral_source_split_9216:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i2 := $M.164;
    goto corral_source_split_9221;

  corral_source_split_9221:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_9222;

  corral_source_split_9222:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2026} vmci_event_exit();
    goto corral_source_split_9227;

  corral_source_split_9227:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i3 == 1;
    goto corral_source_split_9224;

  corral_source_split_9224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2025} vmci_host_exit();
    goto SeqInstr_577, SeqInstr_578;

  SeqInstr_578:
    assume assertsPassed;
    goto SeqInstr_579;

  SeqInstr_579:
    goto corral_source_split_9225;

  corral_source_split_9225:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_577:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_9218;

  corral_source_split_9218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2024} vmci_guest_exit();
    goto corral_source_split_9219;

  corral_source_split_9219:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vmci_drv_init: ref;

axiom vmci_drv_init == $sub.ref(0, 851721);

procedure vmci_drv_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.163, $M.164, $M.0, $M.170, $M.1, $M.150, $M.148, $M.161, $CurrAddr, $M.158, $M.159, $M.2, $M.3, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.31, $M.87, $M.6, $M.13, $M.20, $M.21, $M.18, $M.19, $M.69, $M.70, $M.23, $M.24, $M.25, $M.26, $M.27, $M.108, $M.110, $M.112, $M.114, $M.28, $M.33, assertsPassed, $M.29, $M.45, $M.48, $M.47, $M.89, $M.109, $M.111, $M.113, $M.115, $M.34, $M.30, $M.35, $M.46, $M.90, $M.86, $M.91, $M.44, $M.32, $M.36, $M.38, $M.40, $M.42;



implementation vmci_drv_init() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i4: i8;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i9: i1;
  var $i10: i8;
  var $i11: i1;
  var $p12: ref;
  var $i14: i8;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $i20: i8;
  var $i21: i1;
  var $i22: i8;
  var $i23: i1;
  var $i3: i32;
  var vslice_dummy_var_301: i32;
  var vslice_dummy_var_302: i32;
  var vslice_dummy_var_303: i32;
  var vslice_dummy_var_304: i32;
  var vslice_dummy_var_305: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9229;

  corral_source_split_9229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2027} $i0 := vmci_event_init();
    call {:si_unique_call 2028} {:cexpr "vmci_err"} boogie_si_record_i32($i0);
    goto corral_source_split_9230;

  corral_source_split_9230:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 0);
    goto corral_source_split_9231;

  corral_source_split_9231:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i4 := $M.165;
    goto corral_source_split_9238;

  corral_source_split_9238:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_9239;

  corral_source_split_9239:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    goto corral_source_split_9241;

  corral_source_split_9241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2030} $i6 := vmci_guest_init();
    call {:si_unique_call 2031} {:cexpr "error"} boogie_si_record_i32($i6);
    goto corral_source_split_9242;

  corral_source_split_9242:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_9243;

  corral_source_split_9243:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i7 == 1);
    goto corral_source_split_9248;

  corral_source_split_9248:
    assume {:verifier.code 0} true;
    $M.163 := 1;
    call {:si_unique_call 2033} {:cexpr "vmci_guest_personality_initialized"} boogie_si_record_i8(1);
    goto corral_source_split_9249;

  corral_source_split_9249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2034} $i9 := vmci_guest_code_active();
    goto corral_source_split_9250;

  corral_source_split_9250:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i8($i9);
    call {:si_unique_call 2035} {:cexpr "tmp"} boogie_si_record_i8($i10);
    goto corral_source_split_9251;

  corral_source_split_9251:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i10);
    goto corral_source_split_9252;

  corral_source_split_9252:
    assume {:verifier.code 0} true;
    $p12 := (if $i11 == 1 then .str.73 else .str.74);
    goto corral_source_split_9253;

  corral_source_split_9253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2036} vslice_dummy_var_303 := printk.ref.ref(.str.72, $p12);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i14 := $M.166;
    goto corral_source_split_9255;

  corral_source_split_9255:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i8.i1($i14);
    goto corral_source_split_9256;

  corral_source_split_9256:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i15 == 1);
    goto corral_source_split_9258;

  corral_source_split_9258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2037} $i16 := vmci_host_init();
    goto SeqInstr_580, SeqInstr_581;

  SeqInstr_581:
    assume assertsPassed;
    goto SeqInstr_582;

  SeqInstr_582:
    call {:si_unique_call 2038} {:cexpr "error"} boogie_si_record_i32($i16);
    goto corral_source_split_9259;

  corral_source_split_9259:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_9260;

  corral_source_split_9260:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i17 == 1);
    goto corral_source_split_9265;

  corral_source_split_9265:
    assume {:verifier.code 0} true;
    $M.164 := 1;
    call {:si_unique_call 2040} {:cexpr "vmci_host_personality_initialized"} boogie_si_record_i8(1);
    goto corral_source_split_9266;

  corral_source_split_9266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2041} vslice_dummy_var_305 := printk.ref(.str.76);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i20 := $M.163;
    goto corral_source_split_9268;

  corral_source_split_9268:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i8.i1($i20);
    goto corral_source_split_9269;

  corral_source_split_9269:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb19;

  $bb19:
    assume !($i21 == 1);
    goto corral_source_split_9271;

  corral_source_split_9271:
    assume {:verifier.code 0} true;
    $i22 := $M.164;
    goto corral_source_split_9272;

  corral_source_split_9272:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i8.i1($i22);
    goto corral_source_split_9273;

  corral_source_split_9273:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i23 == 1);
    goto corral_source_split_9275;

  corral_source_split_9275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2042} vmci_event_exit();
    goto corral_source_split_9276;

  corral_source_split_9276:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32(0, 19);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9236;

  corral_source_split_9236:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb3;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb18;

  $bb13:
    assume $i17 == 1;
    goto corral_source_split_9262;

  corral_source_split_9262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2039} vslice_dummy_var_304 := printk.ref.i32(.str.75, $i16);
    goto corral_source_split_9263;

  corral_source_split_9263:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_580:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb7:
    assume $i7 == 1;
    goto corral_source_split_9245;

  corral_source_split_9245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2032} vslice_dummy_var_302 := printk.ref.i32(.str.71, $i6);
    goto corral_source_split_9246;

  corral_source_split_9246:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb5:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_9233;

  corral_source_split_9233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2029} vslice_dummy_var_301 := printk.ref.i32(.str.70, $i0);
    goto corral_source_split_9234;

  corral_source_split_9234:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32(0, 22);
    goto $bb3;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 852753);

procedure ldv_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9278;

  corral_source_split_9278:
    assume {:verifier.code 0} true;
    $i0 := $M.167;
    goto corral_source_split_9279;

  corral_source_split_9279:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 1);
    goto corral_source_split_9280;

  corral_source_split_9280:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i2 := $M.168;
    goto corral_source_split_9285;

  corral_source_split_9285:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 1);
    goto corral_source_split_9286;

  corral_source_split_9286:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i4 := $M.138;
    goto corral_source_split_9291;

  corral_source_split_9291:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 1);
    goto corral_source_split_9292;

  corral_source_split_9292:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i6 := $M.169;
    goto corral_source_split_9297;

  corral_source_split_9297:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 1);
    goto corral_source_split_9298;

  corral_source_split_9298:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i8 := $M.28;
    goto corral_source_split_9303;

  corral_source_split_9303:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 1);
    goto corral_source_split_9304;

  corral_source_split_9304:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i10 := $M.46;
    goto corral_source_split_9309;

  corral_source_split_9309:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 1);
    goto corral_source_split_9310;

  corral_source_split_9310:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i12 := $M.70;
    goto corral_source_split_9315;

  corral_source_split_9315:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 1);
    goto corral_source_split_9316;

  corral_source_split_9316:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    return;

  $bb19:
    assume $i13 == 1;
    goto corral_source_split_9318;

  corral_source_split_9318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2049} ldv_error();
    goto SeqInstr_601, SeqInstr_602;

  SeqInstr_602:
    assume assertsPassed;
    goto SeqInstr_603;

  SeqInstr_603:
    goto corral_source_split_9319;

  corral_source_split_9319:
    assume {:verifier.code 0} true;
    goto $bb21;

  SeqInstr_601:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i11 == 1;
    goto corral_source_split_9312;

  corral_source_split_9312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2048} ldv_error();
    goto SeqInstr_598, SeqInstr_599;

  SeqInstr_599:
    assume assertsPassed;
    goto SeqInstr_600;

  SeqInstr_600:
    goto corral_source_split_9313;

  corral_source_split_9313:
    assume {:verifier.code 0} true;
    goto $bb18;

  SeqInstr_598:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i9 == 1;
    goto corral_source_split_9306;

  corral_source_split_9306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2047} ldv_error();
    goto SeqInstr_595, SeqInstr_596;

  SeqInstr_596:
    assume assertsPassed;
    goto SeqInstr_597;

  SeqInstr_597:
    goto corral_source_split_9307;

  corral_source_split_9307:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_595:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i7 == 1;
    goto corral_source_split_9300;

  corral_source_split_9300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2046} ldv_error();
    goto SeqInstr_592, SeqInstr_593;

  SeqInstr_593:
    assume assertsPassed;
    goto SeqInstr_594;

  SeqInstr_594:
    goto corral_source_split_9301;

  corral_source_split_9301:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_592:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i5 == 1;
    goto corral_source_split_9294;

  corral_source_split_9294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2045} ldv_error();
    goto SeqInstr_589, SeqInstr_590;

  SeqInstr_590:
    assume assertsPassed;
    goto SeqInstr_591;

  SeqInstr_591:
    goto corral_source_split_9295;

  corral_source_split_9295:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_589:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i3 == 1;
    goto corral_source_split_9288;

  corral_source_split_9288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2044} ldv_error();
    goto SeqInstr_586, SeqInstr_587;

  SeqInstr_587:
    assume assertsPassed;
    goto SeqInstr_588;

  SeqInstr_588:
    goto corral_source_split_9289;

  corral_source_split_9289:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_586:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_9282;

  corral_source_split_9282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2043} ldv_error();
    goto SeqInstr_583, SeqInstr_584;

  SeqInstr_584:
    assume assertsPassed;
    goto SeqInstr_585;

  SeqInstr_585:
    goto corral_source_split_9283;

  corral_source_split_9283:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_583:
    assume !assertsPassed;
    return;
}



const vmci_event_init: ref;

axiom vmci_event_init == $sub.ref(0, 853785);

procedure vmci_event_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vmci_event_init() returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9321;

  corral_source_split_9321:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2050} INIT_LIST_HEAD(subscriber_array);
    goto corral_source_split_9323;

  corral_source_split_9323:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2051} INIT_LIST_HEAD($add.ref($add.ref(subscriber_array, $mul.ref(0, 112)), $mul.ref(1, 16)));
    goto corral_source_split_9325;

  corral_source_split_9325:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2052} INIT_LIST_HEAD($add.ref($add.ref(subscriber_array, $mul.ref(0, 112)), $mul.ref(2, 16)));
    goto corral_source_split_9327;

  corral_source_split_9327:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2053} INIT_LIST_HEAD($add.ref($add.ref(subscriber_array, $mul.ref(0, 112)), $mul.ref(3, 16)));
    goto corral_source_split_9329;

  corral_source_split_9329:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2054} INIT_LIST_HEAD($add.ref($add.ref(subscriber_array, $mul.ref(0, 112)), $mul.ref(4, 16)));
    goto corral_source_split_9331;

  corral_source_split_9331:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2055} INIT_LIST_HEAD($add.ref($add.ref(subscriber_array, $mul.ref(0, 112)), $mul.ref(5, 16)));
    goto corral_source_split_9333;

  corral_source_split_9333:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2056} INIT_LIST_HEAD($add.ref($add.ref(subscriber_array, $mul.ref(0, 112)), $mul.ref(6, 16)));
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const vmci_guest_init: ref;

axiom vmci_guest_init == $sub.ref(0, 854817);

procedure vmci_guest_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.150, $M.161, $M.0, $CurrAddr;



implementation vmci_guest_init() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9335;

  corral_source_split_9335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2057} $i0 := ldv___pci_register_driver_124(vmci_guest_driver, __this_module, .str.39);
    call {:si_unique_call 2058} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_9336;

  corral_source_split_9336:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const vmci_host_init: ref;

axiom vmci_host_init == $sub.ref(0, 855849);

procedure vmci_host_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.170, $M.1, $M.148, $CurrAddr, $M.158, $M.159, $M.2, $M.3, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.31, $M.87, $M.6, $M.13, $M.20, $M.21, $M.18, $M.19, $M.69, $M.70, $M.23, $M.24, $M.25, $M.26, $M.27, $M.108, $M.110, $M.112, $M.114, $M.28, $M.33, assertsPassed, $M.29, $M.45, $M.48, $M.47, $M.89, $M.109, $M.111, $M.113, $M.115, $M.34, $M.30, $M.35, $M.46, $M.90, $M.86, $M.91, $M.44, $M.32, $M.36, $M.38, $M.40, $M.42;



implementation vmci_host_init() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i32;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i11: i32;
  var vslice_dummy_var_306: i32;
  var vslice_dummy_var_307: i32;
  var vslice_dummy_var_308: i32;
  var vslice_dummy_var_309: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9338;

  corral_source_split_9338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2059} $p0 := vmci_ctx_create(2, 0, $sub.i64(0, 1), 720896, $0.ref);
    goto corral_source_split_9339;

  corral_source_split_9339:
    assume {:verifier.code 0} true;
    $M.170 := $p0;
    goto corral_source_split_9340;

  corral_source_split_9340:
    assume {:verifier.code 0} true;
    $p1 := $M.170;
    goto corral_source_split_9341;

  corral_source_split_9341:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_9342;

  corral_source_split_9342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2060} $i3 := IS_ERR($p2);
    goto corral_source_split_9343;

  corral_source_split_9343:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 2061} {:cexpr "tmp___0"} boogie_si_record_i8($i4);
    goto corral_source_split_9344;

  corral_source_split_9344:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_9345;

  corral_source_split_9345:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2066} $i12 := ldv_misc_register_177(vmci_host_miscdev);
    call {:si_unique_call 2067} {:cexpr "error"} boogie_si_record_i32($i12);
    goto corral_source_split_9356;

  corral_source_split_9356:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_9357;

  corral_source_split_9357:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p19 := $M.171;
    goto corral_source_split_9367;

  corral_source_split_9367:
    assume {:verifier.code 0} true;
    $i20 := $M.172;
    goto corral_source_split_9368;

  corral_source_split_9368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2071} vslice_dummy_var_309 := printk.ref.ref.i32.i32(.str.43, $p19, 10, $i20);
    goto corral_source_split_9369;

  corral_source_split_9369:
    assume {:verifier.code 0} true;
    $M.1 := 1;
    call {:si_unique_call 2072} {:cexpr "vmci_host_device_initialized"} boogie_si_record_i8(1);
    goto corral_source_split_9370;

  corral_source_split_9370:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9354;

  corral_source_split_9354:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_9359;

  corral_source_split_9359:
    assume {:verifier.code 0} true;
    $p14 := $M.171;
    goto corral_source_split_9360;

  corral_source_split_9360:
    assume {:verifier.code 0} true;
    $i15 := $M.172;
    goto corral_source_split_9361;

  corral_source_split_9361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2068} vslice_dummy_var_307 := printk.ref.ref.i32.i32.i32(.str.41, $p14, 10, $i15, $i12);
    goto corral_source_split_9362;

  corral_source_split_9362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2069} vslice_dummy_var_308 := printk.ref(.str.42);
    goto corral_source_split_9363;

  corral_source_split_9363:
    assume {:verifier.code 0} true;
    $p18 := $M.170;
    goto corral_source_split_9364;

  corral_source_split_9364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2070} vmci_ctx_destroy($p18);
    goto SeqInstr_604, SeqInstr_605;

  SeqInstr_605:
    assume assertsPassed;
    goto SeqInstr_606;

  SeqInstr_606:
    goto corral_source_split_9365;

  corral_source_split_9365:
    assume {:verifier.code 0} true;
    $i11 := $i12;
    goto $bb3;

  SeqInstr_604:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_9347;

  corral_source_split_9347:
    assume {:verifier.code 0} true;
    $p6 := $M.170;
    goto corral_source_split_9348;

  corral_source_split_9348:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_9349;

  corral_source_split_9349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2062} $i8 := PTR_ERR($p7);
    call {:si_unique_call 2063} {:cexpr "tmp"} boogie_si_record_i64($i8);
    goto corral_source_split_9350;

  corral_source_split_9350:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    call {:si_unique_call 2064} {:cexpr "error"} boogie_si_record_i32($i9);
    goto corral_source_split_9351;

  corral_source_split_9351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2065} vslice_dummy_var_306 := printk.ref.i32(.str.40, $i9);
    goto corral_source_split_9352;

  corral_source_split_9352:
    assume {:verifier.code 0} true;
    $i11 := $i9;
    goto $bb3;
}



const vmci_event_exit: ref;

axiom vmci_event_exit == $sub.ref(0, 856881);

procedure vmci_event_exit();
  free requires assertsPassed;



implementation vmci_event_exit()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p14: ref;
  var $p15: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $p11: ref;
  var $p12: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p38: ref;
  var $p39: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $i47: i1;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i64;
  var $i58: i1;
  var $p59: ref;
  var $p60: ref;
  var $p62: ref;
  var $p63: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $i70: i64;
  var $i71: i1;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $i81: i64;
  var $i82: i1;
  var $p83: ref;
  var $p84: ref;
  var $p86: ref;
  var $p87: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $i94: i64;
  var $i95: i1;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $i105: i64;
  var $i106: i1;
  var $p107: ref;
  var $p108: ref;
  var $p110: ref;
  var $p111: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $i118: i64;
  var $i119: i1;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $i129: i64;
  var $i130: i1;
  var $p131: ref;
  var $p132: ref;
  var $p134: ref;
  var $p135: ref;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $i142: i64;
  var $i143: i1;
  var $p144: ref;
  var $p145: ref;
  var $p146: ref;
  var $p148: ref;
  var $p149: ref;
  var $p150: ref;
  var $p151: ref;
  var $p152: ref;
  var $i153: i64;
  var $i154: i1;
  var $p155: ref;
  var $p156: ref;
  var $p158: ref;
  var $p159: ref;
  var $p161: ref;
  var $p162: ref;
  var $p163: ref;
  var $p164: ref;
  var $p165: ref;
  var $i166: i64;
  var $i167: i1;
  var vslice_dummy_var_310: i32;
  var vslice_dummy_var_311: i32;
  var vslice_dummy_var_312: i32;
  var vslice_dummy_var_313: i32;
  var vslice_dummy_var_314: i32;
  var vslice_dummy_var_315: i32;
  var vslice_dummy_var_316: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9372;

  corral_source_split_9372:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p0 := $load.ref($M.0, subscriber_array);
    goto corral_source_split_9374;

  corral_source_split_9374:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_9375;

  corral_source_split_9375:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 24), 40));
    goto corral_source_split_9376;

  corral_source_split_9376:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 24), 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_9377;

  corral_source_split_9377:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_9378;

  corral_source_split_9378:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_9379;

  corral_source_split_9379:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p6, $mul.ref($sub.ref(0, 24), 40));
    goto corral_source_split_9380;

  corral_source_split_9380:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 24), 40)), $mul.ref(24, 1));
    goto corral_source_split_9381;

  corral_source_split_9381:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_9382;

  corral_source_split_9382:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, $p2i.ref.i64(subscriber_array));
    goto corral_source_split_9383;

  corral_source_split_9383:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $add.ref($add.ref($add.ref(subscriber_array, $mul.ref(0, 112)), $mul.ref(1, 16)), $mul.ref(0, 1)));
    goto corral_source_split_9404;

  corral_source_split_9404:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_9405;

  corral_source_split_9405:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p25, $mul.ref($sub.ref(0, 24), 40));
    goto corral_source_split_9406;

  corral_source_split_9406:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p25, $mul.ref($sub.ref(0, 24), 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_9407;

  corral_source_split_9407:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_9408;

  corral_source_split_9408:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_9409;

  corral_source_split_9409:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($p30, $mul.ref($sub.ref(0, 24), 40));
    goto corral_source_split_9410;

  corral_source_split_9410:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p25, $mul.ref($sub.ref(0, 24), 40)), $mul.ref(24, 1));
    goto corral_source_split_9411;

  corral_source_split_9411:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p32);
    goto corral_source_split_9412;

  corral_source_split_9412:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, $p2i.ref.i64($add.ref($add.ref(subscriber_array, $mul.ref(0, 112)), $mul.ref(1, 16))));
    goto corral_source_split_9413;

  corral_source_split_9413:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $add.ref($add.ref($add.ref(subscriber_array, $mul.ref(0, 112)), $mul.ref(2, 16)), $mul.ref(0, 1)));
    goto corral_source_split_9434;

  corral_source_split_9434:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_9435;

  corral_source_split_9435:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($p49, $mul.ref($sub.ref(0, 24), 40));
    goto corral_source_split_9436;

  corral_source_split_9436:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p49, $mul.ref($sub.ref(0, 24), 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_9437;

  corral_source_split_9437:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_9438;

  corral_source_split_9438:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p53);
    goto corral_source_split_9439;

  corral_source_split_9439:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($p54, $mul.ref($sub.ref(0, 24), 40));
    goto corral_source_split_9440;

  corral_source_split_9440:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p49, $mul.ref($sub.ref(0, 24), 40)), $mul.ref(24, 1));
    goto corral_source_split_9441;

  corral_source_split_9441:
    assume {:verifier.code 0} true;
    $i57 := $p2i.ref.i64($p56);
    goto corral_source_split_9442;

  corral_source_split_9442:
    assume {:verifier.code 0} true;
    $i58 := $ne.i64($i57, $p2i.ref.i64($add.ref($add.ref(subscriber_array, $mul.ref(0, 112)), $mul.ref(2, 16))));
    goto corral_source_split_9443;

  corral_source_split_9443:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i58 == 1);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $add.ref($add.ref($add.ref(subscriber_array, $mul.ref(0, 112)), $mul.ref(3, 16)), $mul.ref(0, 1)));
    goto corral_source_split_9464;

  corral_source_split_9464:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p72);
    goto corral_source_split_9465;

  corral_source_split_9465:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($p73, $mul.ref($sub.ref(0, 24), 40));
    goto corral_source_split_9466;

  corral_source_split_9466:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($p73, $mul.ref($sub.ref(0, 24), 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_9467;

  corral_source_split_9467:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.0, $p76);
    goto corral_source_split_9468;

  corral_source_split_9468:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p77);
    goto corral_source_split_9469;

  corral_source_split_9469:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($p78, $mul.ref($sub.ref(0, 24), 40));
    goto corral_source_split_9470;

  corral_source_split_9470:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p73, $mul.ref($sub.ref(0, 24), 40)), $mul.ref(24, 1));
    goto corral_source_split_9471;

  corral_source_split_9471:
    assume {:verifier.code 0} true;
    $i81 := $p2i.ref.i64($p80);
    goto corral_source_split_9472;

  corral_source_split_9472:
    assume {:verifier.code 0} true;
    $i82 := $ne.i64($i81, $p2i.ref.i64($add.ref($add.ref(subscriber_array, $mul.ref(0, 112)), $mul.ref(3, 16))));
    goto corral_source_split_9473;

  corral_source_split_9473:
    assume {:verifier.code 0} true;
    assume {:branchcond $i82} true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i82 == 1);
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p96 := $load.ref($M.0, $add.ref($add.ref($add.ref(subscriber_array, $mul.ref(0, 112)), $mul.ref(4, 16)), $mul.ref(0, 1)));
    goto corral_source_split_9494;

  corral_source_split_9494:
    assume {:verifier.code 0} true;
    $p97 := $bitcast.ref.ref($p96);
    goto corral_source_split_9495;

  corral_source_split_9495:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($p97, $mul.ref($sub.ref(0, 24), 40));
    goto corral_source_split_9496;

  corral_source_split_9496:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($add.ref($p97, $mul.ref($sub.ref(0, 24), 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_9497;

  corral_source_split_9497:
    assume {:verifier.code 0} true;
    $p101 := $load.ref($M.0, $p100);
    goto corral_source_split_9498;

  corral_source_split_9498:
    assume {:verifier.code 0} true;
    $p102 := $bitcast.ref.ref($p101);
    goto corral_source_split_9499;

  corral_source_split_9499:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($p102, $mul.ref($sub.ref(0, 24), 40));
    goto corral_source_split_9500;

  corral_source_split_9500:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p97, $mul.ref($sub.ref(0, 24), 40)), $mul.ref(24, 1));
    goto corral_source_split_9501;

  corral_source_split_9501:
    assume {:verifier.code 0} true;
    $i105 := $p2i.ref.i64($p104);
    goto corral_source_split_9502;

  corral_source_split_9502:
    assume {:verifier.code 0} true;
    $i106 := $ne.i64($i105, $p2i.ref.i64($add.ref($add.ref(subscriber_array, $mul.ref(0, 112)), $mul.ref(4, 16))));
    goto corral_source_split_9503;

  corral_source_split_9503:
    assume {:verifier.code 0} true;
    assume {:branchcond $i106} true;
    goto $bb40, $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume !($i106 == 1);
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p120 := $load.ref($M.0, $add.ref($add.ref($add.ref(subscriber_array, $mul.ref(0, 112)), $mul.ref(5, 16)), $mul.ref(0, 1)));
    goto corral_source_split_9524;

  corral_source_split_9524:
    assume {:verifier.code 0} true;
    $p121 := $bitcast.ref.ref($p120);
    goto corral_source_split_9525;

  corral_source_split_9525:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($p121, $mul.ref($sub.ref(0, 24), 40));
    goto corral_source_split_9526;

  corral_source_split_9526:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($add.ref($p121, $mul.ref($sub.ref(0, 24), 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_9527;

  corral_source_split_9527:
    assume {:verifier.code 0} true;
    $p125 := $load.ref($M.0, $p124);
    goto corral_source_split_9528;

  corral_source_split_9528:
    assume {:verifier.code 0} true;
    $p126 := $bitcast.ref.ref($p125);
    goto corral_source_split_9529;

  corral_source_split_9529:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($p126, $mul.ref($sub.ref(0, 24), 40));
    goto corral_source_split_9530;

  corral_source_split_9530:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p121, $mul.ref($sub.ref(0, 24), 40)), $mul.ref(24, 1));
    goto corral_source_split_9531;

  corral_source_split_9531:
    assume {:verifier.code 0} true;
    $i129 := $p2i.ref.i64($p128);
    goto corral_source_split_9532;

  corral_source_split_9532:
    assume {:verifier.code 0} true;
    $i130 := $ne.i64($i129, $p2i.ref.i64($add.ref($add.ref(subscriber_array, $mul.ref(0, 112)), $mul.ref(5, 16))));
    goto corral_source_split_9533;

  corral_source_split_9533:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    assume !($i130 == 1);
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $p144 := $load.ref($M.0, $add.ref($add.ref($add.ref(subscriber_array, $mul.ref(0, 112)), $mul.ref(6, 16)), $mul.ref(0, 1)));
    goto corral_source_split_9554;

  corral_source_split_9554:
    assume {:verifier.code 0} true;
    $p145 := $bitcast.ref.ref($p144);
    goto corral_source_split_9555;

  corral_source_split_9555:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($p145, $mul.ref($sub.ref(0, 24), 40));
    goto corral_source_split_9556;

  corral_source_split_9556:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($add.ref($p145, $mul.ref($sub.ref(0, 24), 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_9557;

  corral_source_split_9557:
    assume {:verifier.code 0} true;
    $p149 := $load.ref($M.0, $p148);
    goto corral_source_split_9558;

  corral_source_split_9558:
    assume {:verifier.code 0} true;
    $p150 := $bitcast.ref.ref($p149);
    goto corral_source_split_9559;

  corral_source_split_9559:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($p150, $mul.ref($sub.ref(0, 24), 40));
    goto corral_source_split_9560;

  corral_source_split_9560:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p145, $mul.ref($sub.ref(0, 24), 40)), $mul.ref(24, 1));
    goto corral_source_split_9561;

  corral_source_split_9561:
    assume {:verifier.code 0} true;
    $i153 := $p2i.ref.i64($p152);
    goto corral_source_split_9562;

  corral_source_split_9562:
    assume {:verifier.code 0} true;
    $i154 := $ne.i64($i153, $p2i.ref.i64($add.ref($add.ref(subscriber_array, $mul.ref(0, 112)), $mul.ref(6, 16))));
    goto corral_source_split_9563;

  corral_source_split_9563:
    assume {:verifier.code 0} true;
    assume {:branchcond $i154} true;
    goto $bb58, $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    assume !($i154 == 1);
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb58:
    assume $i154 == 1;
    goto corral_source_split_9565;

  corral_source_split_9565:
    assume {:verifier.code 0} true;
    $p155, $p156 := $p146, $p151;
    goto $bb61;

  $bb61:
    call $p155, $p156, $p158, $p159, $p161, $p162, $p163, $p164, $p165, $i166, $i167, vslice_dummy_var_316 := vmci_event_exit_loop_$bb61($p155, $p156, $p158, $p159, $p161, $p162, $p163, $p164, $p165, $i166, $i167, vslice_dummy_var_316);
    goto $bb61_last;

  corral_source_split_9567:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2091} vslice_dummy_var_316 := printk.ref(.str.35);
    goto corral_source_split_9569;

  corral_source_split_9569:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p155, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9570;

  corral_source_split_9570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2092} list_del($p158);
    goto corral_source_split_9571;

  corral_source_split_9571:
    assume {:verifier.code 0} true;
    $p159 := $bitcast.ref.ref($p155);
    goto corral_source_split_9572;

  corral_source_split_9572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2093} kfree($p159);
    goto corral_source_split_9573;

  corral_source_split_9573:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($add.ref($p156, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_9574;

  corral_source_split_9574:
    assume {:verifier.code 0} true;
    $p162 := $load.ref($M.0, $p161);
    goto corral_source_split_9575;

  corral_source_split_9575:
    assume {:verifier.code 0} true;
    $p163 := $bitcast.ref.ref($p162);
    goto corral_source_split_9576;

  corral_source_split_9576:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($p163, $mul.ref($sub.ref(0, 24), 40));
    goto corral_source_split_9577;

  corral_source_split_9577:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p156, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9578;

  corral_source_split_9578:
    assume {:verifier.code 0} true;
    $i166 := $p2i.ref.i64($p165);
    goto corral_source_split_9579;

  corral_source_split_9579:
    assume {:verifier.code 0} true;
    $i167 := $ne.i64($i166, $p2i.ref.i64($add.ref($add.ref(subscriber_array, $mul.ref(0, 112)), $mul.ref(6, 16))));
    goto corral_source_split_9580;

  corral_source_split_9580:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i167 == 1);
    goto corral_source_split_9582;

  corral_source_split_9582:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb63:
    assume $i167 == 1;
    assume {:verifier.code 0} true;
    $p155, $p156 := $p156, $p164;
    goto $bb63_dummy;

  $bb49:
    assume $i130 == 1;
    goto corral_source_split_9535;

  corral_source_split_9535:
    assume {:verifier.code 0} true;
    $p131, $p132 := $p122, $p127;
    goto $bb52;

  $bb52:
    call $p131, $p132, $p134, $p135, $p137, $p138, $p139, $p140, $p141, $i142, $i143, vslice_dummy_var_315 := vmci_event_exit_loop_$bb52($p131, $p132, $p134, $p135, $p137, $p138, $p139, $p140, $p141, $i142, $i143, vslice_dummy_var_315);
    goto $bb52_last;

  corral_source_split_9537:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2088} vslice_dummy_var_315 := printk.ref(.str.35);
    goto corral_source_split_9539;

  corral_source_split_9539:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p131, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9540;

  corral_source_split_9540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2089} list_del($p134);
    goto corral_source_split_9541;

  corral_source_split_9541:
    assume {:verifier.code 0} true;
    $p135 := $bitcast.ref.ref($p131);
    goto corral_source_split_9542;

  corral_source_split_9542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2090} kfree($p135);
    goto corral_source_split_9543;

  corral_source_split_9543:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($add.ref($p132, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_9544;

  corral_source_split_9544:
    assume {:verifier.code 0} true;
    $p138 := $load.ref($M.0, $p137);
    goto corral_source_split_9545;

  corral_source_split_9545:
    assume {:verifier.code 0} true;
    $p139 := $bitcast.ref.ref($p138);
    goto corral_source_split_9546;

  corral_source_split_9546:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($p139, $mul.ref($sub.ref(0, 24), 40));
    goto corral_source_split_9547;

  corral_source_split_9547:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p132, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9548;

  corral_source_split_9548:
    assume {:verifier.code 0} true;
    $i142 := $p2i.ref.i64($p141);
    goto corral_source_split_9549;

  corral_source_split_9549:
    assume {:verifier.code 0} true;
    $i143 := $ne.i64($i142, $p2i.ref.i64($add.ref($add.ref(subscriber_array, $mul.ref(0, 112)), $mul.ref(5, 16))));
    goto corral_source_split_9550;

  corral_source_split_9550:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i143 == 1);
    goto corral_source_split_9552;

  corral_source_split_9552:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb54:
    assume $i143 == 1;
    assume {:verifier.code 0} true;
    $p131, $p132 := $p132, $p140;
    goto $bb54_dummy;

  $bb40:
    assume $i106 == 1;
    goto corral_source_split_9505;

  corral_source_split_9505:
    assume {:verifier.code 0} true;
    $p107, $p108 := $p98, $p103;
    goto $bb43;

  $bb43:
    call $p107, $p108, $p110, $p111, $p113, $p114, $p115, $p116, $p117, $i118, $i119, vslice_dummy_var_314 := vmci_event_exit_loop_$bb43($p107, $p108, $p110, $p111, $p113, $p114, $p115, $p116, $p117, $i118, $i119, vslice_dummy_var_314);
    goto $bb43_last;

  corral_source_split_9507:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2085} vslice_dummy_var_314 := printk.ref(.str.35);
    goto corral_source_split_9509;

  corral_source_split_9509:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p107, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9510;

  corral_source_split_9510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2086} list_del($p110);
    goto corral_source_split_9511;

  corral_source_split_9511:
    assume {:verifier.code 0} true;
    $p111 := $bitcast.ref.ref($p107);
    goto corral_source_split_9512;

  corral_source_split_9512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2087} kfree($p111);
    goto corral_source_split_9513;

  corral_source_split_9513:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($add.ref($p108, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_9514;

  corral_source_split_9514:
    assume {:verifier.code 0} true;
    $p114 := $load.ref($M.0, $p113);
    goto corral_source_split_9515;

  corral_source_split_9515:
    assume {:verifier.code 0} true;
    $p115 := $bitcast.ref.ref($p114);
    goto corral_source_split_9516;

  corral_source_split_9516:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($p115, $mul.ref($sub.ref(0, 24), 40));
    goto corral_source_split_9517;

  corral_source_split_9517:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p108, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9518;

  corral_source_split_9518:
    assume {:verifier.code 0} true;
    $i118 := $p2i.ref.i64($p117);
    goto corral_source_split_9519;

  corral_source_split_9519:
    assume {:verifier.code 0} true;
    $i119 := $ne.i64($i118, $p2i.ref.i64($add.ref($add.ref(subscriber_array, $mul.ref(0, 112)), $mul.ref(4, 16))));
    goto corral_source_split_9520;

  corral_source_split_9520:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i119 == 1);
    goto corral_source_split_9522;

  corral_source_split_9522:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb45:
    assume $i119 == 1;
    assume {:verifier.code 0} true;
    $p107, $p108 := $p108, $p116;
    goto $bb45_dummy;

  $bb31:
    assume $i82 == 1;
    goto corral_source_split_9475;

  corral_source_split_9475:
    assume {:verifier.code 0} true;
    $p83, $p84 := $p74, $p79;
    goto $bb34;

  $bb34:
    call $p83, $p84, $p86, $p87, $p89, $p90, $p91, $p92, $p93, $i94, $i95, vslice_dummy_var_313 := vmci_event_exit_loop_$bb34($p83, $p84, $p86, $p87, $p89, $p90, $p91, $p92, $p93, $i94, $i95, vslice_dummy_var_313);
    goto $bb34_last;

  corral_source_split_9477:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2082} vslice_dummy_var_313 := printk.ref(.str.35);
    goto corral_source_split_9479;

  corral_source_split_9479:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p83, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9480;

  corral_source_split_9480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2083} list_del($p86);
    goto corral_source_split_9481;

  corral_source_split_9481:
    assume {:verifier.code 0} true;
    $p87 := $bitcast.ref.ref($p83);
    goto corral_source_split_9482;

  corral_source_split_9482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2084} kfree($p87);
    goto corral_source_split_9483;

  corral_source_split_9483:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($add.ref($p84, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_9484;

  corral_source_split_9484:
    assume {:verifier.code 0} true;
    $p90 := $load.ref($M.0, $p89);
    goto corral_source_split_9485;

  corral_source_split_9485:
    assume {:verifier.code 0} true;
    $p91 := $bitcast.ref.ref($p90);
    goto corral_source_split_9486;

  corral_source_split_9486:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($p91, $mul.ref($sub.ref(0, 24), 40));
    goto corral_source_split_9487;

  corral_source_split_9487:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p84, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9488;

  corral_source_split_9488:
    assume {:verifier.code 0} true;
    $i94 := $p2i.ref.i64($p93);
    goto corral_source_split_9489;

  corral_source_split_9489:
    assume {:verifier.code 0} true;
    $i95 := $ne.i64($i94, $p2i.ref.i64($add.ref($add.ref(subscriber_array, $mul.ref(0, 112)), $mul.ref(3, 16))));
    goto corral_source_split_9490;

  corral_source_split_9490:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i95 == 1);
    goto corral_source_split_9492;

  corral_source_split_9492:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb36:
    assume $i95 == 1;
    assume {:verifier.code 0} true;
    $p83, $p84 := $p84, $p92;
    goto $bb36_dummy;

  $bb22:
    assume $i58 == 1;
    goto corral_source_split_9445;

  corral_source_split_9445:
    assume {:verifier.code 0} true;
    $p59, $p60 := $p50, $p55;
    goto $bb25;

  $bb25:
    call $p59, $p60, $p62, $p63, $p65, $p66, $p67, $p68, $p69, $i70, $i71, vslice_dummy_var_312 := vmci_event_exit_loop_$bb25($p59, $p60, $p62, $p63, $p65, $p66, $p67, $p68, $p69, $i70, $i71, vslice_dummy_var_312);
    goto $bb25_last;

  corral_source_split_9447:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2079} vslice_dummy_var_312 := printk.ref(.str.35);
    goto corral_source_split_9449;

  corral_source_split_9449:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p59, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9450;

  corral_source_split_9450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2080} list_del($p62);
    goto corral_source_split_9451;

  corral_source_split_9451:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p59);
    goto corral_source_split_9452;

  corral_source_split_9452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2081} kfree($p63);
    goto corral_source_split_9453;

  corral_source_split_9453:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($p60, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_9454;

  corral_source_split_9454:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_9455;

  corral_source_split_9455:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p66);
    goto corral_source_split_9456;

  corral_source_split_9456:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($p67, $mul.ref($sub.ref(0, 24), 40));
    goto corral_source_split_9457;

  corral_source_split_9457:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p60, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9458;

  corral_source_split_9458:
    assume {:verifier.code 0} true;
    $i70 := $p2i.ref.i64($p69);
    goto corral_source_split_9459;

  corral_source_split_9459:
    assume {:verifier.code 0} true;
    $i71 := $ne.i64($i70, $p2i.ref.i64($add.ref($add.ref(subscriber_array, $mul.ref(0, 112)), $mul.ref(2, 16))));
    goto corral_source_split_9460;

  corral_source_split_9460:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i71 == 1);
    goto corral_source_split_9462;

  corral_source_split_9462:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb27:
    assume $i71 == 1;
    assume {:verifier.code 0} true;
    $p59, $p60 := $p60, $p68;
    goto $bb27_dummy;

  $bb13:
    assume $i34 == 1;
    goto corral_source_split_9415;

  corral_source_split_9415:
    assume {:verifier.code 0} true;
    $p35, $p36 := $p26, $p31;
    goto $bb16;

  $bb16:
    call $p35, $p36, $p38, $p39, $p41, $p42, $p43, $p44, $p45, $i46, $i47, vslice_dummy_var_311 := vmci_event_exit_loop_$bb16($p35, $p36, $p38, $p39, $p41, $p42, $p43, $p44, $p45, $i46, $i47, vslice_dummy_var_311);
    goto $bb16_last;

  corral_source_split_9417:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2076} vslice_dummy_var_311 := printk.ref(.str.35);
    goto corral_source_split_9419;

  corral_source_split_9419:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p35, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9420;

  corral_source_split_9420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2077} list_del($p38);
    goto corral_source_split_9421;

  corral_source_split_9421:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p35);
    goto corral_source_split_9422;

  corral_source_split_9422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2078} kfree($p39);
    goto corral_source_split_9423;

  corral_source_split_9423:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p36, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_9424;

  corral_source_split_9424:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_9425;

  corral_source_split_9425:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_9426;

  corral_source_split_9426:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($p43, $mul.ref($sub.ref(0, 24), 40));
    goto corral_source_split_9427;

  corral_source_split_9427:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p36, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9428;

  corral_source_split_9428:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p45);
    goto corral_source_split_9429;

  corral_source_split_9429:
    assume {:verifier.code 0} true;
    $i47 := $ne.i64($i46, $p2i.ref.i64($add.ref($add.ref(subscriber_array, $mul.ref(0, 112)), $mul.ref(1, 16))));
    goto corral_source_split_9430;

  corral_source_split_9430:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i47 == 1);
    goto corral_source_split_9432;

  corral_source_split_9432:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb18:
    assume $i47 == 1;
    assume {:verifier.code 0} true;
    $p35, $p36 := $p36, $p44;
    goto $bb18_dummy;

  $bb3:
    assume $i10 == 1;
    goto corral_source_split_9385;

  corral_source_split_9385:
    assume {:verifier.code 0} true;
    $p11, $p12 := $p2, $p7;
    goto $bb6;

  $bb6:
    call $p14, $p15, $p17, $p18, $p19, $p20, $p21, $i22, $i23, $p11, $p12, vslice_dummy_var_310 := vmci_event_exit_loop_$bb6($p14, $p15, $p17, $p18, $p19, $p20, $p21, $i22, $i23, $p11, $p12, vslice_dummy_var_310);
    goto $bb6_last;

  corral_source_split_9387:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2073} vslice_dummy_var_310 := printk.ref(.str.35);
    goto corral_source_split_9389;

  corral_source_split_9389:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9390;

  corral_source_split_9390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2074} list_del($p14);
    goto corral_source_split_9391;

  corral_source_split_9391:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p11);
    goto corral_source_split_9392;

  corral_source_split_9392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2075} kfree($p15);
    goto corral_source_split_9393;

  corral_source_split_9393:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_9394;

  corral_source_split_9394:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_9395;

  corral_source_split_9395:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_9396;

  corral_source_split_9396:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($p19, $mul.ref($sub.ref(0, 24), 40));
    goto corral_source_split_9397;

  corral_source_split_9397:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9398;

  corral_source_split_9398:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_9399;

  corral_source_split_9399:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, $p2i.ref.i64(subscriber_array));
    goto corral_source_split_9400;

  corral_source_split_9400:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i23 == 1);
    goto corral_source_split_9402;

  corral_source_split_9402:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb8:
    assume $i23 == 1;
    assume {:verifier.code 0} true;
    $p11, $p12 := $p12, $p20;
    goto $bb8_dummy;

  $bb63_dummy:
    assume false;
    return;

  $bb61_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9567;

  $bb54_dummy:
    assume false;
    return;

  $bb52_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9537;

  $bb45_dummy:
    assume false;
    return;

  $bb43_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9507;

  $bb36_dummy:
    assume false;
    return;

  $bb34_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9477;

  $bb27_dummy:
    assume false;
    return;

  $bb25_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9447;

  $bb18_dummy:
    assume false;
    return;

  $bb16_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9417;

  $bb8_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9387;
}



const ldv_misc_register_177: ref;

axiom ldv_misc_register_177 == $sub.ref(0, 857913);

procedure ldv_misc_register_177($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.148, $M.158, $M.159, $M.0, $CurrAddr;



implementation ldv_misc_register_177($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9584;

  corral_source_split_9584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2094} $i1 := misc_register($p0);
    call {:si_unique_call 2095} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_9585;

  corral_source_split_9585:
    assume {:verifier.code 0} true;
    $M.148 := 1;
    call {:si_unique_call 2096} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_9586;

  corral_source_split_9586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2097} ldv_file_operations_6();
    goto corral_source_split_9587;

  corral_source_split_9587:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const misc_register: ref;

axiom misc_register == $sub.ref(0, 858945);

procedure misc_register($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation misc_register($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9589;

  corral_source_split_9589:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2098} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 2099} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_9590;

  corral_source_split_9590:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_file_operations_6: ref;

axiom ldv_file_operations_6 == $sub.ref(0, 859977);

procedure ldv_file_operations_6();
  free requires assertsPassed;
  modifies $M.158, $M.159, $M.0, $CurrAddr;



implementation ldv_file_operations_6()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9592;

  corral_source_split_9592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2100} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_9593;

  corral_source_split_9593:
    assume {:verifier.code 0} true;
    goto corral_source_split_9594;

  corral_source_split_9594:
    assume {:verifier.code 0} true;
    $M.158 := $p0;
    goto corral_source_split_9595;

  corral_source_split_9595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2101} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_9596;

  corral_source_split_9596:
    assume {:verifier.code 0} true;
    goto corral_source_split_9597;

  corral_source_split_9597:
    assume {:verifier.code 0} true;
    $M.159 := $p2;
    goto corral_source_split_9598;

  corral_source_split_9598:
    assume {:verifier.code 0} true;
    return;
}



const ldv___pci_register_driver_124: ref;

axiom ldv___pci_register_driver_124 == $sub.ref(0, 861009);

procedure ldv___pci_register_driver_124($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.150, $M.161, $M.0, $CurrAddr;



implementation ldv___pci_register_driver_124($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9600;

  corral_source_split_9600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2102} $i3 := __pci_register_driver($p0, $p1, $p2);
    call {:si_unique_call 2103} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_9601;

  corral_source_split_9601:
    assume {:verifier.code 0} true;
    $M.150 := 1;
    call {:si_unique_call 2104} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_9602;

  corral_source_split_9602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2105} ldv_pci_driver_7();
    goto corral_source_split_9603;

  corral_source_split_9603:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __pci_register_driver: ref;

axiom __pci_register_driver == $sub.ref(0, 862041);

procedure __pci_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __pci_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9605;

  corral_source_split_9605:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2106} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 2107} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_9606;

  corral_source_split_9606:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_pci_driver_7: ref;

axiom ldv_pci_driver_7 == $sub.ref(0, 863073);

procedure ldv_pci_driver_7();
  free requires assertsPassed;
  modifies $M.161, $M.0, $CurrAddr;



implementation ldv_pci_driver_7()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9608;

  corral_source_split_9608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2108} $p0 := ldv_init_zalloc(2976);
    goto corral_source_split_9609;

  corral_source_split_9609:
    assume {:verifier.code 0} true;
    goto corral_source_split_9610;

  corral_source_split_9610:
    assume {:verifier.code 0} true;
    $M.161 := $p0;
    goto corral_source_split_9611;

  corral_source_split_9611:
    assume {:verifier.code 0} true;
    return;
}



const vmci_guest_exit: ref;

axiom vmci_guest_exit == $sub.ref(0, 864105);

procedure vmci_guest_exit();
  free requires assertsPassed;
  modifies $M.150;



implementation vmci_guest_exit()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9613;

  corral_source_split_9613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2109} ldv_pci_unregister_driver_125(vmci_guest_driver);
    goto corral_source_split_9614;

  corral_source_split_9614:
    assume {:verifier.code 0} true;
    return;
}



const vmci_host_exit: ref;

axiom vmci_host_exit == $sub.ref(0, 865137);

procedure vmci_host_exit();
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.148, $CurrAddr, $M.28, $M.2, $M.3, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.31, $M.87, assertsPassed, $M.6, $M.13, $M.20, $M.21, $M.18, $M.19, $M.69, $M.70, $M.23, $M.24, $M.25, $M.26, $M.27, $M.108, $M.110, $M.112, $M.114, $M.33, $M.29, $M.45, $M.48, $M.47, $M.89, $M.109, $M.111, $M.113, $M.115, $M.34, $M.30, $M.35, $M.46, $M.90, $M.86, $M.91, $M.44, $M.32, $M.36, $M.38, $M.40, $M.42;



implementation vmci_host_exit()
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i24;
  var $i12: i24;
  var $i13: i24;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var vslice_dummy_var_317: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2110} $p0 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_9616;

  corral_source_split_9616:
    assume {:verifier.code 0} true;
    $M.1 := 0;
    call {:si_unique_call 2111} {:cexpr "vmci_host_device_initialized"} boogie_si_record_i8(0);
    goto corral_source_split_9617;

  corral_source_split_9617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2112} $i1 := ldv_misc_deregister_178(vmci_host_miscdev);
    call {:si_unique_call 2113} {:cexpr "error"} boogie_si_record_i32($i1);
    goto corral_source_split_9618;

  corral_source_split_9618:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_9619;

  corral_source_split_9619:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p4 := $M.170;
    goto corral_source_split_9624;

  corral_source_split_9624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2115} vmci_ctx_destroy($p4);
    goto SeqInstr_607, SeqInstr_608;

  SeqInstr_608:
    assume assertsPassed;
    goto SeqInstr_609;

  SeqInstr_609:
    goto corral_source_split_9625;

  corral_source_split_9625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2116} vmci_qp_broker_exit();
    goto SeqInstr_610, SeqInstr_611;

  SeqInstr_611:
    assume assertsPassed;
    goto SeqInstr_612;

  SeqInstr_612:
    goto corral_source_split_9626;

  corral_source_split_9626:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9627;

  corral_source_split_9627:
    assume {:verifier.code 0} true;
    $M.80 := $store.ref($M.80, $p5, .str.39);
    goto corral_source_split_9628;

  corral_source_split_9628:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_9629;

  corral_source_split_9629:
    assume {:verifier.code 0} true;
    $M.81 := $store.ref($M.81, $p6, .str.45);
    goto corral_source_split_9630;

  corral_source_split_9630:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9631;

  corral_source_split_9631:
    assume {:verifier.code 0} true;
    $M.82 := $store.ref($M.82, $p7, .str.46);
    goto corral_source_split_9632;

  corral_source_split_9632:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9633;

  corral_source_split_9633:
    assume {:verifier.code 0} true;
    $M.83 := $store.ref($M.83, $p8, .str.47);
    goto corral_source_split_9634;

  corral_source_split_9634:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_9635;

  corral_source_split_9635:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_9636;

  corral_source_split_9636:
    assume {:verifier.code 0} true;
    $i11 := $load.i24($M.84, $p10);
    goto corral_source_split_9637;

  corral_source_split_9637:
    assume {:verifier.code 0} true;
    $i12 := $and.i24($i11, $sub.i24(0, 262144));
    goto corral_source_split_9638;

  corral_source_split_9638:
    assume {:verifier.code 0} true;
    $i13 := $or.i24($i12, 1045);
    goto corral_source_split_9639;

  corral_source_split_9639:
    assume {:verifier.code 0} true;
    $M.84 := $store.i24($M.84, $p10, $i13);
    goto corral_source_split_9640;

  corral_source_split_9640:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9641;

  corral_source_split_9641:
    assume {:verifier.code 0} true;
    $M.85 := $store.i8($M.85, $p14, 0);
    goto corral_source_split_9642;

  corral_source_split_9642:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9643;

  corral_source_split_9643:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.85, $p15);
    goto corral_source_split_9644;

  corral_source_split_9644:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i64($i16);
    goto corral_source_split_9645;

  corral_source_split_9645:
    assume {:verifier.code 0} true;
    $i18 := $and.i64($i17, 1);
    goto corral_source_split_9646;

  corral_source_split_9646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2117} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 2118} {:cexpr "tmp"} boogie_si_record_i64($i19);
    goto corral_source_split_9647;

  corral_source_split_9647:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_9648;

  corral_source_split_9648:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i20 == 1;
    goto corral_source_split_9650;

  corral_source_split_9650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2119} __dynamic_pr_debug.ref.ref($p0, .str.47);
    goto corral_source_split_9651;

  corral_source_split_9651:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_610:
    assume !assertsPassed;
    return;

  SeqInstr_607:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_9621;

  corral_source_split_9621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2114} vslice_dummy_var_317 := printk.ref.i32(.str.44, $i1);
    goto corral_source_split_9622;

  corral_source_split_9622:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_misc_deregister_178: ref;

axiom ldv_misc_deregister_178 == $sub.ref(0, 866169);

procedure ldv_misc_deregister_178($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.148;



implementation ldv_misc_deregister_178($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9653;

  corral_source_split_9653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2120} $i1 := misc_deregister($p0);
    call {:si_unique_call 2121} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_9654;

  corral_source_split_9654:
    assume {:verifier.code 0} true;
    $M.148 := 0;
    call {:si_unique_call 2122} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    goto corral_source_split_9655;

  corral_source_split_9655:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const vmci_qp_broker_exit: ref;

axiom vmci_qp_broker_exit == $sub.ref(0, 867201);

procedure vmci_qp_broker_exit();
  free requires assertsPassed;
  modifies $M.28, assertsPassed;



implementation vmci_qp_broker_exit()
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9657;

  corral_source_split_9657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2123} ldv_mutex_lock_224($add.ref($add.ref(qp_broker_list, $mul.ref(0, 176)), $mul.ref(16, 1)));
    goto SeqInstr_613, SeqInstr_614;

  SeqInstr_614:
    assume assertsPassed;
    goto SeqInstr_615;

  SeqInstr_615:
    goto corral_source_split_9658;

  corral_source_split_9658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2124} $p0 := qp_list_get_head(qp_broker_list);
    goto corral_source_split_9659;

  corral_source_split_9659:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_9660;

  corral_source_split_9660:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_9661;

  corral_source_split_9661:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2128} ldv_mutex_unlock_225($add.ref($add.ref(qp_broker_list, $mul.ref(0, 176)), $mul.ref(16, 1)));
    goto SeqInstr_616, SeqInstr_617;

  SeqInstr_617:
    assume assertsPassed;
    goto SeqInstr_618;

  SeqInstr_618:
    goto corral_source_split_9677;

  corral_source_split_9677:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_616:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_9663;

  corral_source_split_9663:
    assume {:verifier.code 0} true;
    $p3 := $p0;
    goto $bb4;

  $bb4:
    call $p4, $p5, $p6, $i7, $i8, $p3 := vmci_qp_broker_exit_loop_$bb4($p4, $p5, $p6, $i7, $i8, $p3);
    goto $bb4_last;

  corral_source_split_9665:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_9667;

  corral_source_split_9667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2125} qp_list_remove_entry(qp_broker_list, $p3);
    goto corral_source_split_9668;

  corral_source_split_9668:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_9669;

  corral_source_split_9669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2126} kfree($p5);
    goto corral_source_split_9670;

  corral_source_split_9670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2127} $p6 := qp_list_get_head(qp_broker_list);
    goto corral_source_split_9671;

  corral_source_split_9671:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_9672;

  corral_source_split_9672:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_9673;

  corral_source_split_9673:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i8 == 1);
    goto corral_source_split_9675;

  corral_source_split_9675:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $p3 := $p6;
    goto $bb6_dummy;

  SeqInstr_613:
    assume !assertsPassed;
    return;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_9665;
}



const ldv_mutex_lock_224: ref;

axiom ldv_mutex_lock_224 == $sub.ref(0, 868233);

procedure ldv_mutex_lock_224($p0: ref);
  free requires assertsPassed;
  modifies $M.28, assertsPassed;



implementation ldv_mutex_lock_224($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9679;

  corral_source_split_9679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2129} ldv_mutex_lock_mutex_of_qp_list($p0);
    goto SeqInstr_619, SeqInstr_620;

  SeqInstr_620:
    assume assertsPassed;
    goto SeqInstr_621;

  SeqInstr_621:
    goto corral_source_split_9680;

  corral_source_split_9680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2130} mutex_lock($p0);
    goto corral_source_split_9681;

  corral_source_split_9681:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_619:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_225: ref;

axiom ldv_mutex_unlock_225 == $sub.ref(0, 869265);

procedure ldv_mutex_unlock_225($p0: ref);
  free requires assertsPassed;
  modifies $M.28, assertsPassed;



implementation ldv_mutex_unlock_225($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9683;

  corral_source_split_9683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2131} ldv_mutex_unlock_mutex_of_qp_list($p0);
    goto SeqInstr_622, SeqInstr_623;

  SeqInstr_623:
    assume assertsPassed;
    goto SeqInstr_624;

  SeqInstr_624:
    goto corral_source_split_9684;

  corral_source_split_9684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2132} mutex_unlock($p0);
    goto corral_source_split_9685;

  corral_source_split_9685:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_622:
    assume !assertsPassed;
    return;
}



const misc_deregister: ref;

axiom misc_deregister == $sub.ref(0, 870297);

procedure misc_deregister($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation misc_deregister($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9687;

  corral_source_split_9687:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2133} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 2134} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_9688;

  corral_source_split_9688:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_pci_unregister_driver_125: ref;

axiom ldv_pci_unregister_driver_125 == $sub.ref(0, 871329);

procedure ldv_pci_unregister_driver_125($p0: ref);
  free requires assertsPassed;
  modifies $M.150;



implementation ldv_pci_unregister_driver_125($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9690;

  corral_source_split_9690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2135} pci_unregister_driver($p0);
    goto corral_source_split_9691;

  corral_source_split_9691:
    assume {:verifier.code 0} true;
    $M.150 := 0;
    call {:si_unique_call 2136} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    goto corral_source_split_9692;

  corral_source_split_9692:
    assume {:verifier.code 0} true;
    return;
}



const pci_unregister_driver: ref;

axiom pci_unregister_driver == $sub.ref(0, 872361);

procedure pci_unregister_driver($p0: ref);
  free requires assertsPassed;



implementation pci_unregister_driver($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9694;

  corral_source_split_9694:
    assume {:verifier.code 0} true;
    return;
}



const ldv_shutdown_7: ref;

axiom ldv_shutdown_7 == $sub.ref(0, 873393);

procedure ldv_shutdown_7() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_shutdown_7() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9696;

  corral_source_split_9696:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2137} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2138} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_9697;

  corral_source_split_9697:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 874425);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2139} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_9699;

  corral_source_split_9699:
    assume {:verifier.code 1} true;
    goto corral_source_split_9700;

  corral_source_split_9700:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_9701;

  corral_source_split_9701:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 875457);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 876489);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 877521);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9703;

  corral_source_split_9703:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_625, SeqInstr_626;

  SeqInstr_626:
    assume assertsPassed;
    goto SeqInstr_627;

  SeqInstr_627:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_9704;

  corral_source_split_9704:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_625:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 878553);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 879585);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 880617);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 881649);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 882681);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 883713);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 884745);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 885777);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 886809);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 887841);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9706;

  corral_source_split_9706:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2140} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 2141} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 2142} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_9707;

  corral_source_split_9707:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_9708;

  corral_source_split_9708:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_9712;

  corral_source_split_9712:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_9713;

  corral_source_split_9713:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2143} __VERIFIER_assume($i4);
    goto corral_source_split_9714;

  corral_source_split_9714:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_9710;

  corral_source_split_9710:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 888873);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 889905);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 890937);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __VERIFIER_nondet_unsigned_int: ref;

axiom __VERIFIER_nondet_unsigned_int == $sub.ref(0, 891969);

procedure __VERIFIER_nondet_unsigned_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9716;

  corral_source_split_9716:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2144} $i0 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 2145} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 2146} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_9717;

  corral_source_split_9717:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2147} $i1 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 2148} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 2149} {:cexpr "min"} boogie_si_record_i32($i1);
    goto corral_source_split_9718;

  corral_source_split_9718:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2150} $i2 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 2151} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 2152} {:cexpr "max"} boogie_si_record_i32($i2);
    goto corral_source_split_9719;

  corral_source_split_9719:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_9720;

  corral_source_split_9720:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_9725;

  corral_source_split_9725:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_9726;

  corral_source_split_9726:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2153} __VERIFIER_assume($i7);
    goto corral_source_split_9727;

  corral_source_split_9727:
    assume {:verifier.code 0} true;
    $i8 := $uge.i32($i0, $i1);
    goto corral_source_split_9728;

  corral_source_split_9728:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_9734;

  corral_source_split_9734:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_9735;

  corral_source_split_9735:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2154} __VERIFIER_assume($i11);
    goto corral_source_split_9736;

  corral_source_split_9736:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_9732;

  corral_source_split_9732:
    assume {:verifier.code 1} true;
    $i10 := $ule.i32($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_9722;

  corral_source_split_9722:
    assume {:verifier.code 0} true;
    $i5 := $uge.i32($i2, 4294967295);
    goto corral_source_split_9723;

  corral_source_split_9723:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_9730;

  corral_source_split_9730:
    assume {:verifier.code 1} true;
    $i6 := $ule.i32($i2, 4294967295);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 893001);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __VERIFIER_nondet_long: ref;

axiom __VERIFIER_nondet_long == $sub.ref(0, 894033);

procedure __VERIFIER_nondet_long() returns ($r: i64);



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 895065);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 896097);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 897129);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 898161);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 899193);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9738;

  corral_source_split_9738:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2155} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 2156} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 2157} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_9739;

  corral_source_split_9739:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2158} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 2159} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 2160} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_9740;

  corral_source_split_9740:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2161} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 2162} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 2163} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_9741;

  corral_source_split_9741:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_9742;

  corral_source_split_9742:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_9747;

  corral_source_split_9747:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_9748;

  corral_source_split_9748:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2164} __VERIFIER_assume($i7);
    goto corral_source_split_9749;

  corral_source_split_9749:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_9750;

  corral_source_split_9750:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_9756;

  corral_source_split_9756:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_9757;

  corral_source_split_9757:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2165} __VERIFIER_assume($i11);
    goto corral_source_split_9758;

  corral_source_split_9758:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_9754;

  corral_source_split_9754:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_9744;

  corral_source_split_9744:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_9745;

  corral_source_split_9745:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_9752;

  corral_source_split_9752:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 900225);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 901257);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 902289);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 903321);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 904353);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 905385);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 906417);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 907449);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_bool: ref;

axiom __VERIFIER_nondet_bool == $sub.ref(0, 908481);

procedure __VERIFIER_nondet_bool() returns ($r: i1);
  free requires assertsPassed;



implementation __VERIFIER_nondet_bool() returns ($r: i1)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i6: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9760;

  corral_source_split_9760:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2166} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2167} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_9761;

  corral_source_split_9761:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_9762;

  corral_source_split_9762:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 2168} {:cexpr "x"} boogie_si_record_i8($i2);
    goto corral_source_split_9763;

  corral_source_split_9763:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_9764;

  corral_source_split_9764:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_9765;

  corral_source_split_9765:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_9766;

  corral_source_split_9766:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_9773;

  corral_source_split_9773:
    assume {:verifier.code 1} true;
    $i7 := $trunc.i8.i1($i2);
    goto corral_source_split_9774;

  corral_source_split_9774:
    assume {:verifier.code 1} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_9775;

  corral_source_split_9775:
    assume {:verifier.code 1} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_9776;

  corral_source_split_9776:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_9768;

  corral_source_split_9768:
    assume {:verifier.code 1} true;
    $i10 := $zext.i1.i32($i6);
    goto corral_source_split_9769;

  corral_source_split_9769:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2169} __VERIFIER_assume($i10);
    goto corral_source_split_9770;

  corral_source_split_9770:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_9771;

  corral_source_split_9771:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const __VERIFIER_nondet_uint: ref;

axiom __VERIFIER_nondet_uint == $sub.ref(0, 909513);

procedure __VERIFIER_nondet_uint() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_uint() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9778;

  corral_source_split_9778:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2170} $i0 := __VERIFIER_nondet_unsigned_int();
    call {:si_unique_call 2171} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 2172} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_9779;

  corral_source_split_9779:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 910545);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9781;

  corral_source_split_9781:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2173} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 2174} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 2175} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_9782;

  corral_source_split_9782:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 911577);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9784;

  corral_source_split_9784:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2176} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 2177} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_9785;

  corral_source_split_9785:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 912609);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 913641);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 2178} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 2179} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 914673);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 915705);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9787;

  corral_source_split_9787:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_9788;

  corral_source_split_9788:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 916737);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_177: [ref]i8;
  var cmdloc_dummy_var_178: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2180} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 2181} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_9790;

  corral_source_split_9790:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2182} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2183} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_9791;

  corral_source_split_9791:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_9792;

  corral_source_split_9792:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_9796;

  corral_source_split_9796:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_9797;

  corral_source_split_9797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2184} $p6 := malloc($i5);
    goto corral_source_split_9798;

  corral_source_split_9798:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_9799;

  corral_source_split_9799:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_177 := $M.0;
    call {:si_unique_call 2185} cmdloc_dummy_var_178 := $memset.i8(cmdloc_dummy_var_177, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_178;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9801;

  corral_source_split_9801:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_9794;

  corral_source_split_9794:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 917769);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 918801);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.108, $M.112, $M.110, $M.114, $M.180, $M.70, $M.46, $M.28, $M.169, $M.138, $M.168, $M.167, $M.0, $M.181, $M.182, $M.183, $M.184, $M.185, $M.186, $M.187, $M.188, $M.189, $M.190, $M.191, $M.192, $M.193, $M.194, $M.172, $M.171, $M.107, $M.106, $M.69, $M.231, $M.232, $M.233, $M.44, $M.234, $M.235, $M.166, $M.165, $M.164, $M.163, $M.236, $M.237, $M.238, $M.239, $M.240, $M.241, $M.242, $M.243, $M.244, $M.4, $M.160, $M.1, $M.170, $M.162, $M.245, $M.246, $M.247, $M.248, $M.249, $M.250, $M.251, $M.31, $M.87, $M.157, $M.161, $M.111, $M.148, $M.113, $M.115, $M.158, $M.150, $M.154, $M.109, $M.159, $M.155, $M.38, $M.42, $M.36, $M.40, $M.321, $M.322, $M.323, $M.324, $M.325, $M.326, $M.327, $M.328, $M.329, $M.330, $M.331, $M.332;



implementation __SMACK_static_init()
{

  $bb0:
    $M.108 := 0;
    call {:si_unique_call 2186} {:cexpr "ldv_irq_2_0"} boogie_si_record_i32(0);
    $M.112 := 0;
    call {:si_unique_call 2187} {:cexpr "ldv_irq_2_2"} boogie_si_record_i32(0);
    $M.110 := 0;
    call {:si_unique_call 2188} {:cexpr "ldv_irq_2_1"} boogie_si_record_i32(0);
    call {:si_unique_call 2189} {:cexpr "ldv_irq_1_3"} boogie_si_record_i32(0);
    call {:si_unique_call 2190} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32(0);
    call {:si_unique_call 2191} {:cexpr "ldv_irq_1_2"} boogie_si_record_i32(0);
    call {:si_unique_call 2192} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    call {:si_unique_call 2193} {:cexpr "ldv_irq_1_1"} boogie_si_record_i32(0);
    $M.114 := 0;
    call {:si_unique_call 2194} {:cexpr "ldv_irq_2_3"} boogie_si_record_i32(0);
    $M.180 := $store.i8($M.180, __kstrtab_vmci_context_get_priv_flags, 118);
    $M.180 := $store.i8($M.180, $add.ref($add.ref(__kstrtab_vmci_context_get_priv_flags, $mul.ref(0, 28)), $mul.ref(1, 1)), 109);
    $M.180 := $store.i8($M.180, $add.ref($add.ref(__kstrtab_vmci_context_get_priv_flags, $mul.ref(0, 28)), $mul.ref(2, 1)), 99);
    $M.180 := $store.i8($M.180, $add.ref($add.ref(__kstrtab_vmci_context_get_priv_flags, $mul.ref(0, 28)), $mul.ref(3, 1)), 105);
    $M.180 := $store.i8($M.180, $add.ref($add.ref(__kstrtab_vmci_context_get_priv_flags, $mul.ref(0, 28)), $mul.ref(4, 1)), 95);
    $M.180 := $store.i8($M.180, $add.ref($add.ref(__kstrtab_vmci_context_get_priv_flags, $mul.ref(0, 28)), $mul.ref(5, 1)), 99);
    $M.180 := $store.i8($M.180, $add.ref($add.ref(__kstrtab_vmci_context_get_priv_flags, $mul.ref(0, 28)), $mul.ref(6, 1)), 111);
    $M.180 := $store.i8($M.180, $add.ref($add.ref(__kstrtab_vmci_context_get_priv_flags, $mul.ref(0, 28)), $mul.ref(7, 1)), 110);
    $M.180 := $store.i8($M.180, $add.ref($add.ref(__kstrtab_vmci_context_get_priv_flags, $mul.ref(0, 28)), $mul.ref(8, 1)), 116);
    $M.180 := $store.i8($M.180, $add.ref($add.ref(__kstrtab_vmci_context_get_priv_flags, $mul.ref(0, 28)), $mul.ref(9, 1)), 101);
    $M.180 := $store.i8($M.180, $add.ref($add.ref(__kstrtab_vmci_context_get_priv_flags, $mul.ref(0, 28)), $mul.ref(10, 1)), 120);
    $M.180 := $store.i8($M.180, $add.ref($add.ref(__kstrtab_vmci_context_get_priv_flags, $mul.ref(0, 28)), $mul.ref(11, 1)), 116);
    $M.180 := $store.i8($M.180, $add.ref($add.ref(__kstrtab_vmci_context_get_priv_flags, $mul.ref(0, 28)), $mul.ref(12, 1)), 95);
    $M.180 := $store.i8($M.180, $add.ref($add.ref(__kstrtab_vmci_context_get_priv_flags, $mul.ref(0, 28)), $mul.ref(13, 1)), 103);
    $M.180 := $store.i8($M.180, $add.ref($add.ref(__kstrtab_vmci_context_get_priv_flags, $mul.ref(0, 28)), $mul.ref(14, 1)), 101);
    $M.180 := $store.i8($M.180, $add.ref($add.ref(__kstrtab_vmci_context_get_priv_flags, $mul.ref(0, 28)), $mul.ref(15, 1)), 116);
    $M.180 := $store.i8($M.180, $add.ref($add.ref(__kstrtab_vmci_context_get_priv_flags, $mul.ref(0, 28)), $mul.ref(16, 1)), 95);
    $M.180 := $store.i8($M.180, $add.ref($add.ref(__kstrtab_vmci_context_get_priv_flags, $mul.ref(0, 28)), $mul.ref(17, 1)), 112);
    $M.180 := $store.i8($M.180, $add.ref($add.ref(__kstrtab_vmci_context_get_priv_flags, $mul.ref(0, 28)), $mul.ref(18, 1)), 114);
    $M.180 := $store.i8($M.180, $add.ref($add.ref(__kstrtab_vmci_context_get_priv_flags, $mul.ref(0, 28)), $mul.ref(19, 1)), 105);
    $M.180 := $store.i8($M.180, $add.ref($add.ref(__kstrtab_vmci_context_get_priv_flags, $mul.ref(0, 28)), $mul.ref(20, 1)), 118);
    $M.180 := $store.i8($M.180, $add.ref($add.ref(__kstrtab_vmci_context_get_priv_flags, $mul.ref(0, 28)), $mul.ref(21, 1)), 95);
    $M.180 := $store.i8($M.180, $add.ref($add.ref(__kstrtab_vmci_context_get_priv_flags, $mul.ref(0, 28)), $mul.ref(22, 1)), 102);
    $M.180 := $store.i8($M.180, $add.ref($add.ref(__kstrtab_vmci_context_get_priv_flags, $mul.ref(0, 28)), $mul.ref(23, 1)), 108);
    $M.180 := $store.i8($M.180, $add.ref($add.ref(__kstrtab_vmci_context_get_priv_flags, $mul.ref(0, 28)), $mul.ref(24, 1)), 97);
    $M.180 := $store.i8($M.180, $add.ref($add.ref(__kstrtab_vmci_context_get_priv_flags, $mul.ref(0, 28)), $mul.ref(25, 1)), 103);
    $M.180 := $store.i8($M.180, $add.ref($add.ref(__kstrtab_vmci_context_get_priv_flags, $mul.ref(0, 28)), $mul.ref(26, 1)), 115);
    $M.180 := $store.i8($M.180, $add.ref($add.ref(__kstrtab_vmci_context_get_priv_flags, $mul.ref(0, 28)), $mul.ref(27, 1)), 0);
    $M.70 := 1;
    call {:si_unique_call 2195} {:cexpr "ldv_mutex_subscriber_mutex"} boogie_si_record_i32(1);
    $M.46 := 1;
    call {:si_unique_call 2196} {:cexpr "ldv_mutex_mutex_of_vmci_queue_kern_if"} boogie_si_record_i32(1);
    $M.28 := 1;
    call {:si_unique_call 2197} {:cexpr "ldv_mutex_mutex_of_qp_list"} boogie_si_record_i32(1);
    $M.169 := 1;
    call {:si_unique_call 2198} {:cexpr "ldv_mutex_mutex_of_device"} boogie_si_record_i32(1);
    $M.138 := 1;
    call {:si_unique_call 2199} {:cexpr "ldv_mutex_lock_of_vmci_host_dev"} boogie_si_record_i32(1);
    $M.168 := 1;
    call {:si_unique_call 2200} {:cexpr "ldv_mutex_lock"} boogie_si_record_i32(1);
    $M.167 := 1;
    call {:si_unique_call 2201} {:cexpr "ldv_mutex_i_mutex_of_inode"} boogie_si_record_i32(1);
    $M.0 := $store.i32($M.0, vmci_resource_table, 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.179);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(0, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(1, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(2, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(3, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(4, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(5, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(6, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(7, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(8, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(9, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(10, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(11, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(12, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(13, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(14, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(15, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(16, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(17, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(18, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(19, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(20, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(21, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(22, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(23, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(24, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(25, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(26, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(27, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(28, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(29, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(30, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(31, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(32, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(33, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(34, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(35, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(36, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(37, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(38, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(39, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(40, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(41, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(42, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(43, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(44, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(45, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(46, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(47, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(48, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(49, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(50, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(51, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(52, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(53, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(54, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(55, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(56, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(57, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(58, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(59, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(60, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(61, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(62, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(63, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(64, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(65, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(66, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(67, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(68, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(69, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(70, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(71, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(72, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(73, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(74, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(75, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(76, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(77, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(78, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(79, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(80, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(81, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(82, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(83, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(84, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(85, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(86, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(87, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(88, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(89, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(90, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(91, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(92, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(93, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(94, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(95, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(96, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(97, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(98, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(99, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(100, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(101, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(102, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(103, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(104, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(105, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(106, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(107, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(108, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(109, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(110, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(111, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(112, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(113, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(114, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(115, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(116, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(117, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(118, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(119, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(120, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(121, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(122, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(123, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(124, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(125, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(126, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_resource_table, $mul.ref(0, 1096)), $mul.ref(72, 1)), $mul.ref(127, 8)), $mul.ref(0, 1)), $0.ref);
    $M.181 := $store.i8($M.181, __kstrtab_vmci_qpair_peekv, 118);
    $M.181 := $store.i8($M.181, $add.ref($add.ref(__kstrtab_vmci_qpair_peekv, $mul.ref(0, 17)), $mul.ref(1, 1)), 109);
    $M.181 := $store.i8($M.181, $add.ref($add.ref(__kstrtab_vmci_qpair_peekv, $mul.ref(0, 17)), $mul.ref(2, 1)), 99);
    $M.181 := $store.i8($M.181, $add.ref($add.ref(__kstrtab_vmci_qpair_peekv, $mul.ref(0, 17)), $mul.ref(3, 1)), 105);
    $M.181 := $store.i8($M.181, $add.ref($add.ref(__kstrtab_vmci_qpair_peekv, $mul.ref(0, 17)), $mul.ref(4, 1)), 95);
    $M.181 := $store.i8($M.181, $add.ref($add.ref(__kstrtab_vmci_qpair_peekv, $mul.ref(0, 17)), $mul.ref(5, 1)), 113);
    $M.181 := $store.i8($M.181, $add.ref($add.ref(__kstrtab_vmci_qpair_peekv, $mul.ref(0, 17)), $mul.ref(6, 1)), 112);
    $M.181 := $store.i8($M.181, $add.ref($add.ref(__kstrtab_vmci_qpair_peekv, $mul.ref(0, 17)), $mul.ref(7, 1)), 97);
    $M.181 := $store.i8($M.181, $add.ref($add.ref(__kstrtab_vmci_qpair_peekv, $mul.ref(0, 17)), $mul.ref(8, 1)), 105);
    $M.181 := $store.i8($M.181, $add.ref($add.ref(__kstrtab_vmci_qpair_peekv, $mul.ref(0, 17)), $mul.ref(9, 1)), 114);
    $M.181 := $store.i8($M.181, $add.ref($add.ref(__kstrtab_vmci_qpair_peekv, $mul.ref(0, 17)), $mul.ref(10, 1)), 95);
    $M.181 := $store.i8($M.181, $add.ref($add.ref(__kstrtab_vmci_qpair_peekv, $mul.ref(0, 17)), $mul.ref(11, 1)), 112);
    $M.181 := $store.i8($M.181, $add.ref($add.ref(__kstrtab_vmci_qpair_peekv, $mul.ref(0, 17)), $mul.ref(12, 1)), 101);
    $M.181 := $store.i8($M.181, $add.ref($add.ref(__kstrtab_vmci_qpair_peekv, $mul.ref(0, 17)), $mul.ref(13, 1)), 101);
    $M.181 := $store.i8($M.181, $add.ref($add.ref(__kstrtab_vmci_qpair_peekv, $mul.ref(0, 17)), $mul.ref(14, 1)), 107);
    $M.181 := $store.i8($M.181, $add.ref($add.ref(__kstrtab_vmci_qpair_peekv, $mul.ref(0, 17)), $mul.ref(15, 1)), 118);
    $M.181 := $store.i8($M.181, $add.ref($add.ref(__kstrtab_vmci_qpair_peekv, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.182 := $store.i8($M.182, __kstrtab_vmci_qpair_dequev, 118);
    $M.182 := $store.i8($M.182, $add.ref($add.ref(__kstrtab_vmci_qpair_dequev, $mul.ref(0, 18)), $mul.ref(1, 1)), 109);
    $M.182 := $store.i8($M.182, $add.ref($add.ref(__kstrtab_vmci_qpair_dequev, $mul.ref(0, 18)), $mul.ref(2, 1)), 99);
    $M.182 := $store.i8($M.182, $add.ref($add.ref(__kstrtab_vmci_qpair_dequev, $mul.ref(0, 18)), $mul.ref(3, 1)), 105);
    $M.182 := $store.i8($M.182, $add.ref($add.ref(__kstrtab_vmci_qpair_dequev, $mul.ref(0, 18)), $mul.ref(4, 1)), 95);
    $M.182 := $store.i8($M.182, $add.ref($add.ref(__kstrtab_vmci_qpair_dequev, $mul.ref(0, 18)), $mul.ref(5, 1)), 113);
    $M.182 := $store.i8($M.182, $add.ref($add.ref(__kstrtab_vmci_qpair_dequev, $mul.ref(0, 18)), $mul.ref(6, 1)), 112);
    $M.182 := $store.i8($M.182, $add.ref($add.ref(__kstrtab_vmci_qpair_dequev, $mul.ref(0, 18)), $mul.ref(7, 1)), 97);
    $M.182 := $store.i8($M.182, $add.ref($add.ref(__kstrtab_vmci_qpair_dequev, $mul.ref(0, 18)), $mul.ref(8, 1)), 105);
    $M.182 := $store.i8($M.182, $add.ref($add.ref(__kstrtab_vmci_qpair_dequev, $mul.ref(0, 18)), $mul.ref(9, 1)), 114);
    $M.182 := $store.i8($M.182, $add.ref($add.ref(__kstrtab_vmci_qpair_dequev, $mul.ref(0, 18)), $mul.ref(10, 1)), 95);
    $M.182 := $store.i8($M.182, $add.ref($add.ref(__kstrtab_vmci_qpair_dequev, $mul.ref(0, 18)), $mul.ref(11, 1)), 100);
    $M.182 := $store.i8($M.182, $add.ref($add.ref(__kstrtab_vmci_qpair_dequev, $mul.ref(0, 18)), $mul.ref(12, 1)), 101);
    $M.182 := $store.i8($M.182, $add.ref($add.ref(__kstrtab_vmci_qpair_dequev, $mul.ref(0, 18)), $mul.ref(13, 1)), 113);
    $M.182 := $store.i8($M.182, $add.ref($add.ref(__kstrtab_vmci_qpair_dequev, $mul.ref(0, 18)), $mul.ref(14, 1)), 117);
    $M.182 := $store.i8($M.182, $add.ref($add.ref(__kstrtab_vmci_qpair_dequev, $mul.ref(0, 18)), $mul.ref(15, 1)), 101);
    $M.182 := $store.i8($M.182, $add.ref($add.ref(__kstrtab_vmci_qpair_dequev, $mul.ref(0, 18)), $mul.ref(16, 1)), 118);
    $M.182 := $store.i8($M.182, $add.ref($add.ref(__kstrtab_vmci_qpair_dequev, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.183 := $store.i8($M.183, __kstrtab_vmci_qpair_enquev, 118);
    $M.183 := $store.i8($M.183, $add.ref($add.ref(__kstrtab_vmci_qpair_enquev, $mul.ref(0, 18)), $mul.ref(1, 1)), 109);
    $M.183 := $store.i8($M.183, $add.ref($add.ref(__kstrtab_vmci_qpair_enquev, $mul.ref(0, 18)), $mul.ref(2, 1)), 99);
    $M.183 := $store.i8($M.183, $add.ref($add.ref(__kstrtab_vmci_qpair_enquev, $mul.ref(0, 18)), $mul.ref(3, 1)), 105);
    $M.183 := $store.i8($M.183, $add.ref($add.ref(__kstrtab_vmci_qpair_enquev, $mul.ref(0, 18)), $mul.ref(4, 1)), 95);
    $M.183 := $store.i8($M.183, $add.ref($add.ref(__kstrtab_vmci_qpair_enquev, $mul.ref(0, 18)), $mul.ref(5, 1)), 113);
    $M.183 := $store.i8($M.183, $add.ref($add.ref(__kstrtab_vmci_qpair_enquev, $mul.ref(0, 18)), $mul.ref(6, 1)), 112);
    $M.183 := $store.i8($M.183, $add.ref($add.ref(__kstrtab_vmci_qpair_enquev, $mul.ref(0, 18)), $mul.ref(7, 1)), 97);
    $M.183 := $store.i8($M.183, $add.ref($add.ref(__kstrtab_vmci_qpair_enquev, $mul.ref(0, 18)), $mul.ref(8, 1)), 105);
    $M.183 := $store.i8($M.183, $add.ref($add.ref(__kstrtab_vmci_qpair_enquev, $mul.ref(0, 18)), $mul.ref(9, 1)), 114);
    $M.183 := $store.i8($M.183, $add.ref($add.ref(__kstrtab_vmci_qpair_enquev, $mul.ref(0, 18)), $mul.ref(10, 1)), 95);
    $M.183 := $store.i8($M.183, $add.ref($add.ref(__kstrtab_vmci_qpair_enquev, $mul.ref(0, 18)), $mul.ref(11, 1)), 101);
    $M.183 := $store.i8($M.183, $add.ref($add.ref(__kstrtab_vmci_qpair_enquev, $mul.ref(0, 18)), $mul.ref(12, 1)), 110);
    $M.183 := $store.i8($M.183, $add.ref($add.ref(__kstrtab_vmci_qpair_enquev, $mul.ref(0, 18)), $mul.ref(13, 1)), 113);
    $M.183 := $store.i8($M.183, $add.ref($add.ref(__kstrtab_vmci_qpair_enquev, $mul.ref(0, 18)), $mul.ref(14, 1)), 117);
    $M.183 := $store.i8($M.183, $add.ref($add.ref(__kstrtab_vmci_qpair_enquev, $mul.ref(0, 18)), $mul.ref(15, 1)), 101);
    $M.183 := $store.i8($M.183, $add.ref($add.ref(__kstrtab_vmci_qpair_enquev, $mul.ref(0, 18)), $mul.ref(16, 1)), 118);
    $M.183 := $store.i8($M.183, $add.ref($add.ref(__kstrtab_vmci_qpair_enquev, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.184 := $store.i8($M.184, __kstrtab_vmci_qpair_peek, 118);
    $M.184 := $store.i8($M.184, $add.ref($add.ref(__kstrtab_vmci_qpair_peek, $mul.ref(0, 16)), $mul.ref(1, 1)), 109);
    $M.184 := $store.i8($M.184, $add.ref($add.ref(__kstrtab_vmci_qpair_peek, $mul.ref(0, 16)), $mul.ref(2, 1)), 99);
    $M.184 := $store.i8($M.184, $add.ref($add.ref(__kstrtab_vmci_qpair_peek, $mul.ref(0, 16)), $mul.ref(3, 1)), 105);
    $M.184 := $store.i8($M.184, $add.ref($add.ref(__kstrtab_vmci_qpair_peek, $mul.ref(0, 16)), $mul.ref(4, 1)), 95);
    $M.184 := $store.i8($M.184, $add.ref($add.ref(__kstrtab_vmci_qpair_peek, $mul.ref(0, 16)), $mul.ref(5, 1)), 113);
    $M.184 := $store.i8($M.184, $add.ref($add.ref(__kstrtab_vmci_qpair_peek, $mul.ref(0, 16)), $mul.ref(6, 1)), 112);
    $M.184 := $store.i8($M.184, $add.ref($add.ref(__kstrtab_vmci_qpair_peek, $mul.ref(0, 16)), $mul.ref(7, 1)), 97);
    $M.184 := $store.i8($M.184, $add.ref($add.ref(__kstrtab_vmci_qpair_peek, $mul.ref(0, 16)), $mul.ref(8, 1)), 105);
    $M.184 := $store.i8($M.184, $add.ref($add.ref(__kstrtab_vmci_qpair_peek, $mul.ref(0, 16)), $mul.ref(9, 1)), 114);
    $M.184 := $store.i8($M.184, $add.ref($add.ref(__kstrtab_vmci_qpair_peek, $mul.ref(0, 16)), $mul.ref(10, 1)), 95);
    $M.184 := $store.i8($M.184, $add.ref($add.ref(__kstrtab_vmci_qpair_peek, $mul.ref(0, 16)), $mul.ref(11, 1)), 112);
    $M.184 := $store.i8($M.184, $add.ref($add.ref(__kstrtab_vmci_qpair_peek, $mul.ref(0, 16)), $mul.ref(12, 1)), 101);
    $M.184 := $store.i8($M.184, $add.ref($add.ref(__kstrtab_vmci_qpair_peek, $mul.ref(0, 16)), $mul.ref(13, 1)), 101);
    $M.184 := $store.i8($M.184, $add.ref($add.ref(__kstrtab_vmci_qpair_peek, $mul.ref(0, 16)), $mul.ref(14, 1)), 107);
    $M.184 := $store.i8($M.184, $add.ref($add.ref(__kstrtab_vmci_qpair_peek, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.185 := $store.i8($M.185, __kstrtab_vmci_qpair_dequeue, 118);
    $M.185 := $store.i8($M.185, $add.ref($add.ref(__kstrtab_vmci_qpair_dequeue, $mul.ref(0, 19)), $mul.ref(1, 1)), 109);
    $M.185 := $store.i8($M.185, $add.ref($add.ref(__kstrtab_vmci_qpair_dequeue, $mul.ref(0, 19)), $mul.ref(2, 1)), 99);
    $M.185 := $store.i8($M.185, $add.ref($add.ref(__kstrtab_vmci_qpair_dequeue, $mul.ref(0, 19)), $mul.ref(3, 1)), 105);
    $M.185 := $store.i8($M.185, $add.ref($add.ref(__kstrtab_vmci_qpair_dequeue, $mul.ref(0, 19)), $mul.ref(4, 1)), 95);
    $M.185 := $store.i8($M.185, $add.ref($add.ref(__kstrtab_vmci_qpair_dequeue, $mul.ref(0, 19)), $mul.ref(5, 1)), 113);
    $M.185 := $store.i8($M.185, $add.ref($add.ref(__kstrtab_vmci_qpair_dequeue, $mul.ref(0, 19)), $mul.ref(6, 1)), 112);
    $M.185 := $store.i8($M.185, $add.ref($add.ref(__kstrtab_vmci_qpair_dequeue, $mul.ref(0, 19)), $mul.ref(7, 1)), 97);
    $M.185 := $store.i8($M.185, $add.ref($add.ref(__kstrtab_vmci_qpair_dequeue, $mul.ref(0, 19)), $mul.ref(8, 1)), 105);
    $M.185 := $store.i8($M.185, $add.ref($add.ref(__kstrtab_vmci_qpair_dequeue, $mul.ref(0, 19)), $mul.ref(9, 1)), 114);
    $M.185 := $store.i8($M.185, $add.ref($add.ref(__kstrtab_vmci_qpair_dequeue, $mul.ref(0, 19)), $mul.ref(10, 1)), 95);
    $M.185 := $store.i8($M.185, $add.ref($add.ref(__kstrtab_vmci_qpair_dequeue, $mul.ref(0, 19)), $mul.ref(11, 1)), 100);
    $M.185 := $store.i8($M.185, $add.ref($add.ref(__kstrtab_vmci_qpair_dequeue, $mul.ref(0, 19)), $mul.ref(12, 1)), 101);
    $M.185 := $store.i8($M.185, $add.ref($add.ref(__kstrtab_vmci_qpair_dequeue, $mul.ref(0, 19)), $mul.ref(13, 1)), 113);
    $M.185 := $store.i8($M.185, $add.ref($add.ref(__kstrtab_vmci_qpair_dequeue, $mul.ref(0, 19)), $mul.ref(14, 1)), 117);
    $M.185 := $store.i8($M.185, $add.ref($add.ref(__kstrtab_vmci_qpair_dequeue, $mul.ref(0, 19)), $mul.ref(15, 1)), 101);
    $M.185 := $store.i8($M.185, $add.ref($add.ref(__kstrtab_vmci_qpair_dequeue, $mul.ref(0, 19)), $mul.ref(16, 1)), 117);
    $M.185 := $store.i8($M.185, $add.ref($add.ref(__kstrtab_vmci_qpair_dequeue, $mul.ref(0, 19)), $mul.ref(17, 1)), 101);
    $M.185 := $store.i8($M.185, $add.ref($add.ref(__kstrtab_vmci_qpair_dequeue, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.186 := $store.i8($M.186, __kstrtab_vmci_qpair_enqueue, 118);
    $M.186 := $store.i8($M.186, $add.ref($add.ref(__kstrtab_vmci_qpair_enqueue, $mul.ref(0, 19)), $mul.ref(1, 1)), 109);
    $M.186 := $store.i8($M.186, $add.ref($add.ref(__kstrtab_vmci_qpair_enqueue, $mul.ref(0, 19)), $mul.ref(2, 1)), 99);
    $M.186 := $store.i8($M.186, $add.ref($add.ref(__kstrtab_vmci_qpair_enqueue, $mul.ref(0, 19)), $mul.ref(3, 1)), 105);
    $M.186 := $store.i8($M.186, $add.ref($add.ref(__kstrtab_vmci_qpair_enqueue, $mul.ref(0, 19)), $mul.ref(4, 1)), 95);
    $M.186 := $store.i8($M.186, $add.ref($add.ref(__kstrtab_vmci_qpair_enqueue, $mul.ref(0, 19)), $mul.ref(5, 1)), 113);
    $M.186 := $store.i8($M.186, $add.ref($add.ref(__kstrtab_vmci_qpair_enqueue, $mul.ref(0, 19)), $mul.ref(6, 1)), 112);
    $M.186 := $store.i8($M.186, $add.ref($add.ref(__kstrtab_vmci_qpair_enqueue, $mul.ref(0, 19)), $mul.ref(7, 1)), 97);
    $M.186 := $store.i8($M.186, $add.ref($add.ref(__kstrtab_vmci_qpair_enqueue, $mul.ref(0, 19)), $mul.ref(8, 1)), 105);
    $M.186 := $store.i8($M.186, $add.ref($add.ref(__kstrtab_vmci_qpair_enqueue, $mul.ref(0, 19)), $mul.ref(9, 1)), 114);
    $M.186 := $store.i8($M.186, $add.ref($add.ref(__kstrtab_vmci_qpair_enqueue, $mul.ref(0, 19)), $mul.ref(10, 1)), 95);
    $M.186 := $store.i8($M.186, $add.ref($add.ref(__kstrtab_vmci_qpair_enqueue, $mul.ref(0, 19)), $mul.ref(11, 1)), 101);
    $M.186 := $store.i8($M.186, $add.ref($add.ref(__kstrtab_vmci_qpair_enqueue, $mul.ref(0, 19)), $mul.ref(12, 1)), 110);
    $M.186 := $store.i8($M.186, $add.ref($add.ref(__kstrtab_vmci_qpair_enqueue, $mul.ref(0, 19)), $mul.ref(13, 1)), 113);
    $M.186 := $store.i8($M.186, $add.ref($add.ref(__kstrtab_vmci_qpair_enqueue, $mul.ref(0, 19)), $mul.ref(14, 1)), 117);
    $M.186 := $store.i8($M.186, $add.ref($add.ref(__kstrtab_vmci_qpair_enqueue, $mul.ref(0, 19)), $mul.ref(15, 1)), 101);
    $M.186 := $store.i8($M.186, $add.ref($add.ref(__kstrtab_vmci_qpair_enqueue, $mul.ref(0, 19)), $mul.ref(16, 1)), 117);
    $M.186 := $store.i8($M.186, $add.ref($add.ref(__kstrtab_vmci_qpair_enqueue, $mul.ref(0, 19)), $mul.ref(17, 1)), 101);
    $M.186 := $store.i8($M.186, $add.ref($add.ref(__kstrtab_vmci_qpair_enqueue, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.187 := $store.i8($M.187, __kstrtab_vmci_qpair_consume_buf_ready, 118);
    $M.187 := $store.i8($M.187, $add.ref($add.ref(__kstrtab_vmci_qpair_consume_buf_ready, $mul.ref(0, 29)), $mul.ref(1, 1)), 109);
    $M.187 := $store.i8($M.187, $add.ref($add.ref(__kstrtab_vmci_qpair_consume_buf_ready, $mul.ref(0, 29)), $mul.ref(2, 1)), 99);
    $M.187 := $store.i8($M.187, $add.ref($add.ref(__kstrtab_vmci_qpair_consume_buf_ready, $mul.ref(0, 29)), $mul.ref(3, 1)), 105);
    $M.187 := $store.i8($M.187, $add.ref($add.ref(__kstrtab_vmci_qpair_consume_buf_ready, $mul.ref(0, 29)), $mul.ref(4, 1)), 95);
    $M.187 := $store.i8($M.187, $add.ref($add.ref(__kstrtab_vmci_qpair_consume_buf_ready, $mul.ref(0, 29)), $mul.ref(5, 1)), 113);
    $M.187 := $store.i8($M.187, $add.ref($add.ref(__kstrtab_vmci_qpair_consume_buf_ready, $mul.ref(0, 29)), $mul.ref(6, 1)), 112);
    $M.187 := $store.i8($M.187, $add.ref($add.ref(__kstrtab_vmci_qpair_consume_buf_ready, $mul.ref(0, 29)), $mul.ref(7, 1)), 97);
    $M.187 := $store.i8($M.187, $add.ref($add.ref(__kstrtab_vmci_qpair_consume_buf_ready, $mul.ref(0, 29)), $mul.ref(8, 1)), 105);
    $M.187 := $store.i8($M.187, $add.ref($add.ref(__kstrtab_vmci_qpair_consume_buf_ready, $mul.ref(0, 29)), $mul.ref(9, 1)), 114);
    $M.187 := $store.i8($M.187, $add.ref($add.ref(__kstrtab_vmci_qpair_consume_buf_ready, $mul.ref(0, 29)), $mul.ref(10, 1)), 95);
    $M.187 := $store.i8($M.187, $add.ref($add.ref(__kstrtab_vmci_qpair_consume_buf_ready, $mul.ref(0, 29)), $mul.ref(11, 1)), 99);
    $M.187 := $store.i8($M.187, $add.ref($add.ref(__kstrtab_vmci_qpair_consume_buf_ready, $mul.ref(0, 29)), $mul.ref(12, 1)), 111);
    $M.187 := $store.i8($M.187, $add.ref($add.ref(__kstrtab_vmci_qpair_consume_buf_ready, $mul.ref(0, 29)), $mul.ref(13, 1)), 110);
    $M.187 := $store.i8($M.187, $add.ref($add.ref(__kstrtab_vmci_qpair_consume_buf_ready, $mul.ref(0, 29)), $mul.ref(14, 1)), 115);
    $M.187 := $store.i8($M.187, $add.ref($add.ref(__kstrtab_vmci_qpair_consume_buf_ready, $mul.ref(0, 29)), $mul.ref(15, 1)), 117);
    $M.187 := $store.i8($M.187, $add.ref($add.ref(__kstrtab_vmci_qpair_consume_buf_ready, $mul.ref(0, 29)), $mul.ref(16, 1)), 109);
    $M.187 := $store.i8($M.187, $add.ref($add.ref(__kstrtab_vmci_qpair_consume_buf_ready, $mul.ref(0, 29)), $mul.ref(17, 1)), 101);
    $M.187 := $store.i8($M.187, $add.ref($add.ref(__kstrtab_vmci_qpair_consume_buf_ready, $mul.ref(0, 29)), $mul.ref(18, 1)), 95);
    $M.187 := $store.i8($M.187, $add.ref($add.ref(__kstrtab_vmci_qpair_consume_buf_ready, $mul.ref(0, 29)), $mul.ref(19, 1)), 98);
    $M.187 := $store.i8($M.187, $add.ref($add.ref(__kstrtab_vmci_qpair_consume_buf_ready, $mul.ref(0, 29)), $mul.ref(20, 1)), 117);
    $M.187 := $store.i8($M.187, $add.ref($add.ref(__kstrtab_vmci_qpair_consume_buf_ready, $mul.ref(0, 29)), $mul.ref(21, 1)), 102);
    $M.187 := $store.i8($M.187, $add.ref($add.ref(__kstrtab_vmci_qpair_consume_buf_ready, $mul.ref(0, 29)), $mul.ref(22, 1)), 95);
    $M.187 := $store.i8($M.187, $add.ref($add.ref(__kstrtab_vmci_qpair_consume_buf_ready, $mul.ref(0, 29)), $mul.ref(23, 1)), 114);
    $M.187 := $store.i8($M.187, $add.ref($add.ref(__kstrtab_vmci_qpair_consume_buf_ready, $mul.ref(0, 29)), $mul.ref(24, 1)), 101);
    $M.187 := $store.i8($M.187, $add.ref($add.ref(__kstrtab_vmci_qpair_consume_buf_ready, $mul.ref(0, 29)), $mul.ref(25, 1)), 97);
    $M.187 := $store.i8($M.187, $add.ref($add.ref(__kstrtab_vmci_qpair_consume_buf_ready, $mul.ref(0, 29)), $mul.ref(26, 1)), 100);
    $M.187 := $store.i8($M.187, $add.ref($add.ref(__kstrtab_vmci_qpair_consume_buf_ready, $mul.ref(0, 29)), $mul.ref(27, 1)), 121);
    $M.187 := $store.i8($M.187, $add.ref($add.ref(__kstrtab_vmci_qpair_consume_buf_ready, $mul.ref(0, 29)), $mul.ref(28, 1)), 0);
    $M.188 := $store.i8($M.188, __kstrtab_vmci_qpair_produce_buf_ready, 118);
    $M.188 := $store.i8($M.188, $add.ref($add.ref(__kstrtab_vmci_qpair_produce_buf_ready, $mul.ref(0, 29)), $mul.ref(1, 1)), 109);
    $M.188 := $store.i8($M.188, $add.ref($add.ref(__kstrtab_vmci_qpair_produce_buf_ready, $mul.ref(0, 29)), $mul.ref(2, 1)), 99);
    $M.188 := $store.i8($M.188, $add.ref($add.ref(__kstrtab_vmci_qpair_produce_buf_ready, $mul.ref(0, 29)), $mul.ref(3, 1)), 105);
    $M.188 := $store.i8($M.188, $add.ref($add.ref(__kstrtab_vmci_qpair_produce_buf_ready, $mul.ref(0, 29)), $mul.ref(4, 1)), 95);
    $M.188 := $store.i8($M.188, $add.ref($add.ref(__kstrtab_vmci_qpair_produce_buf_ready, $mul.ref(0, 29)), $mul.ref(5, 1)), 113);
    $M.188 := $store.i8($M.188, $add.ref($add.ref(__kstrtab_vmci_qpair_produce_buf_ready, $mul.ref(0, 29)), $mul.ref(6, 1)), 112);
    $M.188 := $store.i8($M.188, $add.ref($add.ref(__kstrtab_vmci_qpair_produce_buf_ready, $mul.ref(0, 29)), $mul.ref(7, 1)), 97);
    $M.188 := $store.i8($M.188, $add.ref($add.ref(__kstrtab_vmci_qpair_produce_buf_ready, $mul.ref(0, 29)), $mul.ref(8, 1)), 105);
    $M.188 := $store.i8($M.188, $add.ref($add.ref(__kstrtab_vmci_qpair_produce_buf_ready, $mul.ref(0, 29)), $mul.ref(9, 1)), 114);
    $M.188 := $store.i8($M.188, $add.ref($add.ref(__kstrtab_vmci_qpair_produce_buf_ready, $mul.ref(0, 29)), $mul.ref(10, 1)), 95);
    $M.188 := $store.i8($M.188, $add.ref($add.ref(__kstrtab_vmci_qpair_produce_buf_ready, $mul.ref(0, 29)), $mul.ref(11, 1)), 112);
    $M.188 := $store.i8($M.188, $add.ref($add.ref(__kstrtab_vmci_qpair_produce_buf_ready, $mul.ref(0, 29)), $mul.ref(12, 1)), 114);
    $M.188 := $store.i8($M.188, $add.ref($add.ref(__kstrtab_vmci_qpair_produce_buf_ready, $mul.ref(0, 29)), $mul.ref(13, 1)), 111);
    $M.188 := $store.i8($M.188, $add.ref($add.ref(__kstrtab_vmci_qpair_produce_buf_ready, $mul.ref(0, 29)), $mul.ref(14, 1)), 100);
    $M.188 := $store.i8($M.188, $add.ref($add.ref(__kstrtab_vmci_qpair_produce_buf_ready, $mul.ref(0, 29)), $mul.ref(15, 1)), 117);
    $M.188 := $store.i8($M.188, $add.ref($add.ref(__kstrtab_vmci_qpair_produce_buf_ready, $mul.ref(0, 29)), $mul.ref(16, 1)), 99);
    $M.188 := $store.i8($M.188, $add.ref($add.ref(__kstrtab_vmci_qpair_produce_buf_ready, $mul.ref(0, 29)), $mul.ref(17, 1)), 101);
    $M.188 := $store.i8($M.188, $add.ref($add.ref(__kstrtab_vmci_qpair_produce_buf_ready, $mul.ref(0, 29)), $mul.ref(18, 1)), 95);
    $M.188 := $store.i8($M.188, $add.ref($add.ref(__kstrtab_vmci_qpair_produce_buf_ready, $mul.ref(0, 29)), $mul.ref(19, 1)), 98);
    $M.188 := $store.i8($M.188, $add.ref($add.ref(__kstrtab_vmci_qpair_produce_buf_ready, $mul.ref(0, 29)), $mul.ref(20, 1)), 117);
    $M.188 := $store.i8($M.188, $add.ref($add.ref(__kstrtab_vmci_qpair_produce_buf_ready, $mul.ref(0, 29)), $mul.ref(21, 1)), 102);
    $M.188 := $store.i8($M.188, $add.ref($add.ref(__kstrtab_vmci_qpair_produce_buf_ready, $mul.ref(0, 29)), $mul.ref(22, 1)), 95);
    $M.188 := $store.i8($M.188, $add.ref($add.ref(__kstrtab_vmci_qpair_produce_buf_ready, $mul.ref(0, 29)), $mul.ref(23, 1)), 114);
    $M.188 := $store.i8($M.188, $add.ref($add.ref(__kstrtab_vmci_qpair_produce_buf_ready, $mul.ref(0, 29)), $mul.ref(24, 1)), 101);
    $M.188 := $store.i8($M.188, $add.ref($add.ref(__kstrtab_vmci_qpair_produce_buf_ready, $mul.ref(0, 29)), $mul.ref(25, 1)), 97);
    $M.188 := $store.i8($M.188, $add.ref($add.ref(__kstrtab_vmci_qpair_produce_buf_ready, $mul.ref(0, 29)), $mul.ref(26, 1)), 100);
    $M.188 := $store.i8($M.188, $add.ref($add.ref(__kstrtab_vmci_qpair_produce_buf_ready, $mul.ref(0, 29)), $mul.ref(27, 1)), 121);
    $M.188 := $store.i8($M.188, $add.ref($add.ref(__kstrtab_vmci_qpair_produce_buf_ready, $mul.ref(0, 29)), $mul.ref(28, 1)), 0);
    $M.189 := $store.i8($M.189, __kstrtab_vmci_qpair_consume_free_space, 118);
    $M.189 := $store.i8($M.189, $add.ref($add.ref(__kstrtab_vmci_qpair_consume_free_space, $mul.ref(0, 30)), $mul.ref(1, 1)), 109);
    $M.189 := $store.i8($M.189, $add.ref($add.ref(__kstrtab_vmci_qpair_consume_free_space, $mul.ref(0, 30)), $mul.ref(2, 1)), 99);
    $M.189 := $store.i8($M.189, $add.ref($add.ref(__kstrtab_vmci_qpair_consume_free_space, $mul.ref(0, 30)), $mul.ref(3, 1)), 105);
    $M.189 := $store.i8($M.189, $add.ref($add.ref(__kstrtab_vmci_qpair_consume_free_space, $mul.ref(0, 30)), $mul.ref(4, 1)), 95);
    $M.189 := $store.i8($M.189, $add.ref($add.ref(__kstrtab_vmci_qpair_consume_free_space, $mul.ref(0, 30)), $mul.ref(5, 1)), 113);
    $M.189 := $store.i8($M.189, $add.ref($add.ref(__kstrtab_vmci_qpair_consume_free_space, $mul.ref(0, 30)), $mul.ref(6, 1)), 112);
    $M.189 := $store.i8($M.189, $add.ref($add.ref(__kstrtab_vmci_qpair_consume_free_space, $mul.ref(0, 30)), $mul.ref(7, 1)), 97);
    $M.189 := $store.i8($M.189, $add.ref($add.ref(__kstrtab_vmci_qpair_consume_free_space, $mul.ref(0, 30)), $mul.ref(8, 1)), 105);
    $M.189 := $store.i8($M.189, $add.ref($add.ref(__kstrtab_vmci_qpair_consume_free_space, $mul.ref(0, 30)), $mul.ref(9, 1)), 114);
    $M.189 := $store.i8($M.189, $add.ref($add.ref(__kstrtab_vmci_qpair_consume_free_space, $mul.ref(0, 30)), $mul.ref(10, 1)), 95);
    $M.189 := $store.i8($M.189, $add.ref($add.ref(__kstrtab_vmci_qpair_consume_free_space, $mul.ref(0, 30)), $mul.ref(11, 1)), 99);
    $M.189 := $store.i8($M.189, $add.ref($add.ref(__kstrtab_vmci_qpair_consume_free_space, $mul.ref(0, 30)), $mul.ref(12, 1)), 111);
    $M.189 := $store.i8($M.189, $add.ref($add.ref(__kstrtab_vmci_qpair_consume_free_space, $mul.ref(0, 30)), $mul.ref(13, 1)), 110);
    $M.189 := $store.i8($M.189, $add.ref($add.ref(__kstrtab_vmci_qpair_consume_free_space, $mul.ref(0, 30)), $mul.ref(14, 1)), 115);
    $M.189 := $store.i8($M.189, $add.ref($add.ref(__kstrtab_vmci_qpair_consume_free_space, $mul.ref(0, 30)), $mul.ref(15, 1)), 117);
    $M.189 := $store.i8($M.189, $add.ref($add.ref(__kstrtab_vmci_qpair_consume_free_space, $mul.ref(0, 30)), $mul.ref(16, 1)), 109);
    $M.189 := $store.i8($M.189, $add.ref($add.ref(__kstrtab_vmci_qpair_consume_free_space, $mul.ref(0, 30)), $mul.ref(17, 1)), 101);
    $M.189 := $store.i8($M.189, $add.ref($add.ref(__kstrtab_vmci_qpair_consume_free_space, $mul.ref(0, 30)), $mul.ref(18, 1)), 95);
    $M.189 := $store.i8($M.189, $add.ref($add.ref(__kstrtab_vmci_qpair_consume_free_space, $mul.ref(0, 30)), $mul.ref(19, 1)), 102);
    $M.189 := $store.i8($M.189, $add.ref($add.ref(__kstrtab_vmci_qpair_consume_free_space, $mul.ref(0, 30)), $mul.ref(20, 1)), 114);
    $M.189 := $store.i8($M.189, $add.ref($add.ref(__kstrtab_vmci_qpair_consume_free_space, $mul.ref(0, 30)), $mul.ref(21, 1)), 101);
    $M.189 := $store.i8($M.189, $add.ref($add.ref(__kstrtab_vmci_qpair_consume_free_space, $mul.ref(0, 30)), $mul.ref(22, 1)), 101);
    $M.189 := $store.i8($M.189, $add.ref($add.ref(__kstrtab_vmci_qpair_consume_free_space, $mul.ref(0, 30)), $mul.ref(23, 1)), 95);
    $M.189 := $store.i8($M.189, $add.ref($add.ref(__kstrtab_vmci_qpair_consume_free_space, $mul.ref(0, 30)), $mul.ref(24, 1)), 115);
    $M.189 := $store.i8($M.189, $add.ref($add.ref(__kstrtab_vmci_qpair_consume_free_space, $mul.ref(0, 30)), $mul.ref(25, 1)), 112);
    $M.189 := $store.i8($M.189, $add.ref($add.ref(__kstrtab_vmci_qpair_consume_free_space, $mul.ref(0, 30)), $mul.ref(26, 1)), 97);
    $M.189 := $store.i8($M.189, $add.ref($add.ref(__kstrtab_vmci_qpair_consume_free_space, $mul.ref(0, 30)), $mul.ref(27, 1)), 99);
    $M.189 := $store.i8($M.189, $add.ref($add.ref(__kstrtab_vmci_qpair_consume_free_space, $mul.ref(0, 30)), $mul.ref(28, 1)), 101);
    $M.189 := $store.i8($M.189, $add.ref($add.ref(__kstrtab_vmci_qpair_consume_free_space, $mul.ref(0, 30)), $mul.ref(29, 1)), 0);
    $M.190 := $store.i8($M.190, __kstrtab_vmci_qpair_produce_free_space, 118);
    $M.190 := $store.i8($M.190, $add.ref($add.ref(__kstrtab_vmci_qpair_produce_free_space, $mul.ref(0, 30)), $mul.ref(1, 1)), 109);
    $M.190 := $store.i8($M.190, $add.ref($add.ref(__kstrtab_vmci_qpair_produce_free_space, $mul.ref(0, 30)), $mul.ref(2, 1)), 99);
    $M.190 := $store.i8($M.190, $add.ref($add.ref(__kstrtab_vmci_qpair_produce_free_space, $mul.ref(0, 30)), $mul.ref(3, 1)), 105);
    $M.190 := $store.i8($M.190, $add.ref($add.ref(__kstrtab_vmci_qpair_produce_free_space, $mul.ref(0, 30)), $mul.ref(4, 1)), 95);
    $M.190 := $store.i8($M.190, $add.ref($add.ref(__kstrtab_vmci_qpair_produce_free_space, $mul.ref(0, 30)), $mul.ref(5, 1)), 113);
    $M.190 := $store.i8($M.190, $add.ref($add.ref(__kstrtab_vmci_qpair_produce_free_space, $mul.ref(0, 30)), $mul.ref(6, 1)), 112);
    $M.190 := $store.i8($M.190, $add.ref($add.ref(__kstrtab_vmci_qpair_produce_free_space, $mul.ref(0, 30)), $mul.ref(7, 1)), 97);
    $M.190 := $store.i8($M.190, $add.ref($add.ref(__kstrtab_vmci_qpair_produce_free_space, $mul.ref(0, 30)), $mul.ref(8, 1)), 105);
    $M.190 := $store.i8($M.190, $add.ref($add.ref(__kstrtab_vmci_qpair_produce_free_space, $mul.ref(0, 30)), $mul.ref(9, 1)), 114);
    $M.190 := $store.i8($M.190, $add.ref($add.ref(__kstrtab_vmci_qpair_produce_free_space, $mul.ref(0, 30)), $mul.ref(10, 1)), 95);
    $M.190 := $store.i8($M.190, $add.ref($add.ref(__kstrtab_vmci_qpair_produce_free_space, $mul.ref(0, 30)), $mul.ref(11, 1)), 112);
    $M.190 := $store.i8($M.190, $add.ref($add.ref(__kstrtab_vmci_qpair_produce_free_space, $mul.ref(0, 30)), $mul.ref(12, 1)), 114);
    $M.190 := $store.i8($M.190, $add.ref($add.ref(__kstrtab_vmci_qpair_produce_free_space, $mul.ref(0, 30)), $mul.ref(13, 1)), 111);
    $M.190 := $store.i8($M.190, $add.ref($add.ref(__kstrtab_vmci_qpair_produce_free_space, $mul.ref(0, 30)), $mul.ref(14, 1)), 100);
    $M.190 := $store.i8($M.190, $add.ref($add.ref(__kstrtab_vmci_qpair_produce_free_space, $mul.ref(0, 30)), $mul.ref(15, 1)), 117);
    $M.190 := $store.i8($M.190, $add.ref($add.ref(__kstrtab_vmci_qpair_produce_free_space, $mul.ref(0, 30)), $mul.ref(16, 1)), 99);
    $M.190 := $store.i8($M.190, $add.ref($add.ref(__kstrtab_vmci_qpair_produce_free_space, $mul.ref(0, 30)), $mul.ref(17, 1)), 101);
    $M.190 := $store.i8($M.190, $add.ref($add.ref(__kstrtab_vmci_qpair_produce_free_space, $mul.ref(0, 30)), $mul.ref(18, 1)), 95);
    $M.190 := $store.i8($M.190, $add.ref($add.ref(__kstrtab_vmci_qpair_produce_free_space, $mul.ref(0, 30)), $mul.ref(19, 1)), 102);
    $M.190 := $store.i8($M.190, $add.ref($add.ref(__kstrtab_vmci_qpair_produce_free_space, $mul.ref(0, 30)), $mul.ref(20, 1)), 114);
    $M.190 := $store.i8($M.190, $add.ref($add.ref(__kstrtab_vmci_qpair_produce_free_space, $mul.ref(0, 30)), $mul.ref(21, 1)), 101);
    $M.190 := $store.i8($M.190, $add.ref($add.ref(__kstrtab_vmci_qpair_produce_free_space, $mul.ref(0, 30)), $mul.ref(22, 1)), 101);
    $M.190 := $store.i8($M.190, $add.ref($add.ref(__kstrtab_vmci_qpair_produce_free_space, $mul.ref(0, 30)), $mul.ref(23, 1)), 95);
    $M.190 := $store.i8($M.190, $add.ref($add.ref(__kstrtab_vmci_qpair_produce_free_space, $mul.ref(0, 30)), $mul.ref(24, 1)), 115);
    $M.190 := $store.i8($M.190, $add.ref($add.ref(__kstrtab_vmci_qpair_produce_free_space, $mul.ref(0, 30)), $mul.ref(25, 1)), 112);
    $M.190 := $store.i8($M.190, $add.ref($add.ref(__kstrtab_vmci_qpair_produce_free_space, $mul.ref(0, 30)), $mul.ref(26, 1)), 97);
    $M.190 := $store.i8($M.190, $add.ref($add.ref(__kstrtab_vmci_qpair_produce_free_space, $mul.ref(0, 30)), $mul.ref(27, 1)), 99);
    $M.190 := $store.i8($M.190, $add.ref($add.ref(__kstrtab_vmci_qpair_produce_free_space, $mul.ref(0, 30)), $mul.ref(28, 1)), 101);
    $M.190 := $store.i8($M.190, $add.ref($add.ref(__kstrtab_vmci_qpair_produce_free_space, $mul.ref(0, 30)), $mul.ref(29, 1)), 0);
    $M.191 := $store.i8($M.191, __kstrtab_vmci_qpair_get_consume_indexes, 118);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(__kstrtab_vmci_qpair_get_consume_indexes, $mul.ref(0, 31)), $mul.ref(1, 1)), 109);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(__kstrtab_vmci_qpair_get_consume_indexes, $mul.ref(0, 31)), $mul.ref(2, 1)), 99);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(__kstrtab_vmci_qpair_get_consume_indexes, $mul.ref(0, 31)), $mul.ref(3, 1)), 105);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(__kstrtab_vmci_qpair_get_consume_indexes, $mul.ref(0, 31)), $mul.ref(4, 1)), 95);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(__kstrtab_vmci_qpair_get_consume_indexes, $mul.ref(0, 31)), $mul.ref(5, 1)), 113);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(__kstrtab_vmci_qpair_get_consume_indexes, $mul.ref(0, 31)), $mul.ref(6, 1)), 112);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(__kstrtab_vmci_qpair_get_consume_indexes, $mul.ref(0, 31)), $mul.ref(7, 1)), 97);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(__kstrtab_vmci_qpair_get_consume_indexes, $mul.ref(0, 31)), $mul.ref(8, 1)), 105);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(__kstrtab_vmci_qpair_get_consume_indexes, $mul.ref(0, 31)), $mul.ref(9, 1)), 114);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(__kstrtab_vmci_qpair_get_consume_indexes, $mul.ref(0, 31)), $mul.ref(10, 1)), 95);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(__kstrtab_vmci_qpair_get_consume_indexes, $mul.ref(0, 31)), $mul.ref(11, 1)), 103);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(__kstrtab_vmci_qpair_get_consume_indexes, $mul.ref(0, 31)), $mul.ref(12, 1)), 101);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(__kstrtab_vmci_qpair_get_consume_indexes, $mul.ref(0, 31)), $mul.ref(13, 1)), 116);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(__kstrtab_vmci_qpair_get_consume_indexes, $mul.ref(0, 31)), $mul.ref(14, 1)), 95);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(__kstrtab_vmci_qpair_get_consume_indexes, $mul.ref(0, 31)), $mul.ref(15, 1)), 99);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(__kstrtab_vmci_qpair_get_consume_indexes, $mul.ref(0, 31)), $mul.ref(16, 1)), 111);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(__kstrtab_vmci_qpair_get_consume_indexes, $mul.ref(0, 31)), $mul.ref(17, 1)), 110);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(__kstrtab_vmci_qpair_get_consume_indexes, $mul.ref(0, 31)), $mul.ref(18, 1)), 115);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(__kstrtab_vmci_qpair_get_consume_indexes, $mul.ref(0, 31)), $mul.ref(19, 1)), 117);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(__kstrtab_vmci_qpair_get_consume_indexes, $mul.ref(0, 31)), $mul.ref(20, 1)), 109);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(__kstrtab_vmci_qpair_get_consume_indexes, $mul.ref(0, 31)), $mul.ref(21, 1)), 101);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(__kstrtab_vmci_qpair_get_consume_indexes, $mul.ref(0, 31)), $mul.ref(22, 1)), 95);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(__kstrtab_vmci_qpair_get_consume_indexes, $mul.ref(0, 31)), $mul.ref(23, 1)), 105);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(__kstrtab_vmci_qpair_get_consume_indexes, $mul.ref(0, 31)), $mul.ref(24, 1)), 110);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(__kstrtab_vmci_qpair_get_consume_indexes, $mul.ref(0, 31)), $mul.ref(25, 1)), 100);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(__kstrtab_vmci_qpair_get_consume_indexes, $mul.ref(0, 31)), $mul.ref(26, 1)), 101);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(__kstrtab_vmci_qpair_get_consume_indexes, $mul.ref(0, 31)), $mul.ref(27, 1)), 120);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(__kstrtab_vmci_qpair_get_consume_indexes, $mul.ref(0, 31)), $mul.ref(28, 1)), 101);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(__kstrtab_vmci_qpair_get_consume_indexes, $mul.ref(0, 31)), $mul.ref(29, 1)), 115);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(__kstrtab_vmci_qpair_get_consume_indexes, $mul.ref(0, 31)), $mul.ref(30, 1)), 0);
    $M.192 := $store.i8($M.192, __kstrtab_vmci_qpair_get_produce_indexes, 118);
    $M.192 := $store.i8($M.192, $add.ref($add.ref(__kstrtab_vmci_qpair_get_produce_indexes, $mul.ref(0, 31)), $mul.ref(1, 1)), 109);
    $M.192 := $store.i8($M.192, $add.ref($add.ref(__kstrtab_vmci_qpair_get_produce_indexes, $mul.ref(0, 31)), $mul.ref(2, 1)), 99);
    $M.192 := $store.i8($M.192, $add.ref($add.ref(__kstrtab_vmci_qpair_get_produce_indexes, $mul.ref(0, 31)), $mul.ref(3, 1)), 105);
    $M.192 := $store.i8($M.192, $add.ref($add.ref(__kstrtab_vmci_qpair_get_produce_indexes, $mul.ref(0, 31)), $mul.ref(4, 1)), 95);
    $M.192 := $store.i8($M.192, $add.ref($add.ref(__kstrtab_vmci_qpair_get_produce_indexes, $mul.ref(0, 31)), $mul.ref(5, 1)), 113);
    $M.192 := $store.i8($M.192, $add.ref($add.ref(__kstrtab_vmci_qpair_get_produce_indexes, $mul.ref(0, 31)), $mul.ref(6, 1)), 112);
    $M.192 := $store.i8($M.192, $add.ref($add.ref(__kstrtab_vmci_qpair_get_produce_indexes, $mul.ref(0, 31)), $mul.ref(7, 1)), 97);
    $M.192 := $store.i8($M.192, $add.ref($add.ref(__kstrtab_vmci_qpair_get_produce_indexes, $mul.ref(0, 31)), $mul.ref(8, 1)), 105);
    $M.192 := $store.i8($M.192, $add.ref($add.ref(__kstrtab_vmci_qpair_get_produce_indexes, $mul.ref(0, 31)), $mul.ref(9, 1)), 114);
    $M.192 := $store.i8($M.192, $add.ref($add.ref(__kstrtab_vmci_qpair_get_produce_indexes, $mul.ref(0, 31)), $mul.ref(10, 1)), 95);
    $M.192 := $store.i8($M.192, $add.ref($add.ref(__kstrtab_vmci_qpair_get_produce_indexes, $mul.ref(0, 31)), $mul.ref(11, 1)), 103);
    $M.192 := $store.i8($M.192, $add.ref($add.ref(__kstrtab_vmci_qpair_get_produce_indexes, $mul.ref(0, 31)), $mul.ref(12, 1)), 101);
    $M.192 := $store.i8($M.192, $add.ref($add.ref(__kstrtab_vmci_qpair_get_produce_indexes, $mul.ref(0, 31)), $mul.ref(13, 1)), 116);
    $M.192 := $store.i8($M.192, $add.ref($add.ref(__kstrtab_vmci_qpair_get_produce_indexes, $mul.ref(0, 31)), $mul.ref(14, 1)), 95);
    $M.192 := $store.i8($M.192, $add.ref($add.ref(__kstrtab_vmci_qpair_get_produce_indexes, $mul.ref(0, 31)), $mul.ref(15, 1)), 112);
    $M.192 := $store.i8($M.192, $add.ref($add.ref(__kstrtab_vmci_qpair_get_produce_indexes, $mul.ref(0, 31)), $mul.ref(16, 1)), 114);
    $M.192 := $store.i8($M.192, $add.ref($add.ref(__kstrtab_vmci_qpair_get_produce_indexes, $mul.ref(0, 31)), $mul.ref(17, 1)), 111);
    $M.192 := $store.i8($M.192, $add.ref($add.ref(__kstrtab_vmci_qpair_get_produce_indexes, $mul.ref(0, 31)), $mul.ref(18, 1)), 100);
    $M.192 := $store.i8($M.192, $add.ref($add.ref(__kstrtab_vmci_qpair_get_produce_indexes, $mul.ref(0, 31)), $mul.ref(19, 1)), 117);
    $M.192 := $store.i8($M.192, $add.ref($add.ref(__kstrtab_vmci_qpair_get_produce_indexes, $mul.ref(0, 31)), $mul.ref(20, 1)), 99);
    $M.192 := $store.i8($M.192, $add.ref($add.ref(__kstrtab_vmci_qpair_get_produce_indexes, $mul.ref(0, 31)), $mul.ref(21, 1)), 101);
    $M.192 := $store.i8($M.192, $add.ref($add.ref(__kstrtab_vmci_qpair_get_produce_indexes, $mul.ref(0, 31)), $mul.ref(22, 1)), 95);
    $M.192 := $store.i8($M.192, $add.ref($add.ref(__kstrtab_vmci_qpair_get_produce_indexes, $mul.ref(0, 31)), $mul.ref(23, 1)), 105);
    $M.192 := $store.i8($M.192, $add.ref($add.ref(__kstrtab_vmci_qpair_get_produce_indexes, $mul.ref(0, 31)), $mul.ref(24, 1)), 110);
    $M.192 := $store.i8($M.192, $add.ref($add.ref(__kstrtab_vmci_qpair_get_produce_indexes, $mul.ref(0, 31)), $mul.ref(25, 1)), 100);
    $M.192 := $store.i8($M.192, $add.ref($add.ref(__kstrtab_vmci_qpair_get_produce_indexes, $mul.ref(0, 31)), $mul.ref(26, 1)), 101);
    $M.192 := $store.i8($M.192, $add.ref($add.ref(__kstrtab_vmci_qpair_get_produce_indexes, $mul.ref(0, 31)), $mul.ref(27, 1)), 120);
    $M.192 := $store.i8($M.192, $add.ref($add.ref(__kstrtab_vmci_qpair_get_produce_indexes, $mul.ref(0, 31)), $mul.ref(28, 1)), 101);
    $M.192 := $store.i8($M.192, $add.ref($add.ref(__kstrtab_vmci_qpair_get_produce_indexes, $mul.ref(0, 31)), $mul.ref(29, 1)), 115);
    $M.192 := $store.i8($M.192, $add.ref($add.ref(__kstrtab_vmci_qpair_get_produce_indexes, $mul.ref(0, 31)), $mul.ref(30, 1)), 0);
    $M.193 := $store.i8($M.193, __kstrtab_vmci_qpair_detach, 118);
    $M.193 := $store.i8($M.193, $add.ref($add.ref(__kstrtab_vmci_qpair_detach, $mul.ref(0, 18)), $mul.ref(1, 1)), 109);
    $M.193 := $store.i8($M.193, $add.ref($add.ref(__kstrtab_vmci_qpair_detach, $mul.ref(0, 18)), $mul.ref(2, 1)), 99);
    $M.193 := $store.i8($M.193, $add.ref($add.ref(__kstrtab_vmci_qpair_detach, $mul.ref(0, 18)), $mul.ref(3, 1)), 105);
    $M.193 := $store.i8($M.193, $add.ref($add.ref(__kstrtab_vmci_qpair_detach, $mul.ref(0, 18)), $mul.ref(4, 1)), 95);
    $M.193 := $store.i8($M.193, $add.ref($add.ref(__kstrtab_vmci_qpair_detach, $mul.ref(0, 18)), $mul.ref(5, 1)), 113);
    $M.193 := $store.i8($M.193, $add.ref($add.ref(__kstrtab_vmci_qpair_detach, $mul.ref(0, 18)), $mul.ref(6, 1)), 112);
    $M.193 := $store.i8($M.193, $add.ref($add.ref(__kstrtab_vmci_qpair_detach, $mul.ref(0, 18)), $mul.ref(7, 1)), 97);
    $M.193 := $store.i8($M.193, $add.ref($add.ref(__kstrtab_vmci_qpair_detach, $mul.ref(0, 18)), $mul.ref(8, 1)), 105);
    $M.193 := $store.i8($M.193, $add.ref($add.ref(__kstrtab_vmci_qpair_detach, $mul.ref(0, 18)), $mul.ref(9, 1)), 114);
    $M.193 := $store.i8($M.193, $add.ref($add.ref(__kstrtab_vmci_qpair_detach, $mul.ref(0, 18)), $mul.ref(10, 1)), 95);
    $M.193 := $store.i8($M.193, $add.ref($add.ref(__kstrtab_vmci_qpair_detach, $mul.ref(0, 18)), $mul.ref(11, 1)), 100);
    $M.193 := $store.i8($M.193, $add.ref($add.ref(__kstrtab_vmci_qpair_detach, $mul.ref(0, 18)), $mul.ref(12, 1)), 101);
    $M.193 := $store.i8($M.193, $add.ref($add.ref(__kstrtab_vmci_qpair_detach, $mul.ref(0, 18)), $mul.ref(13, 1)), 116);
    $M.193 := $store.i8($M.193, $add.ref($add.ref(__kstrtab_vmci_qpair_detach, $mul.ref(0, 18)), $mul.ref(14, 1)), 97);
    $M.193 := $store.i8($M.193, $add.ref($add.ref(__kstrtab_vmci_qpair_detach, $mul.ref(0, 18)), $mul.ref(15, 1)), 99);
    $M.193 := $store.i8($M.193, $add.ref($add.ref(__kstrtab_vmci_qpair_detach, $mul.ref(0, 18)), $mul.ref(16, 1)), 104);
    $M.193 := $store.i8($M.193, $add.ref($add.ref(__kstrtab_vmci_qpair_detach, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.194 := $store.i8($M.194, __kstrtab_vmci_qpair_alloc, 118);
    $M.194 := $store.i8($M.194, $add.ref($add.ref(__kstrtab_vmci_qpair_alloc, $mul.ref(0, 17)), $mul.ref(1, 1)), 109);
    $M.194 := $store.i8($M.194, $add.ref($add.ref(__kstrtab_vmci_qpair_alloc, $mul.ref(0, 17)), $mul.ref(2, 1)), 99);
    $M.194 := $store.i8($M.194, $add.ref($add.ref(__kstrtab_vmci_qpair_alloc, $mul.ref(0, 17)), $mul.ref(3, 1)), 105);
    $M.194 := $store.i8($M.194, $add.ref($add.ref(__kstrtab_vmci_qpair_alloc, $mul.ref(0, 17)), $mul.ref(4, 1)), 95);
    $M.194 := $store.i8($M.194, $add.ref($add.ref(__kstrtab_vmci_qpair_alloc, $mul.ref(0, 17)), $mul.ref(5, 1)), 113);
    $M.194 := $store.i8($M.194, $add.ref($add.ref(__kstrtab_vmci_qpair_alloc, $mul.ref(0, 17)), $mul.ref(6, 1)), 112);
    $M.194 := $store.i8($M.194, $add.ref($add.ref(__kstrtab_vmci_qpair_alloc, $mul.ref(0, 17)), $mul.ref(7, 1)), 97);
    $M.194 := $store.i8($M.194, $add.ref($add.ref(__kstrtab_vmci_qpair_alloc, $mul.ref(0, 17)), $mul.ref(8, 1)), 105);
    $M.194 := $store.i8($M.194, $add.ref($add.ref(__kstrtab_vmci_qpair_alloc, $mul.ref(0, 17)), $mul.ref(9, 1)), 114);
    $M.194 := $store.i8($M.194, $add.ref($add.ref(__kstrtab_vmci_qpair_alloc, $mul.ref(0, 17)), $mul.ref(10, 1)), 95);
    $M.194 := $store.i8($M.194, $add.ref($add.ref(__kstrtab_vmci_qpair_alloc, $mul.ref(0, 17)), $mul.ref(11, 1)), 97);
    $M.194 := $store.i8($M.194, $add.ref($add.ref(__kstrtab_vmci_qpair_alloc, $mul.ref(0, 17)), $mul.ref(12, 1)), 108);
    $M.194 := $store.i8($M.194, $add.ref($add.ref(__kstrtab_vmci_qpair_alloc, $mul.ref(0, 17)), $mul.ref(13, 1)), 108);
    $M.194 := $store.i8($M.194, $add.ref($add.ref(__kstrtab_vmci_qpair_alloc, $mul.ref(0, 17)), $mul.ref(14, 1)), 111);
    $M.194 := $store.i8($M.194, $add.ref($add.ref(__kstrtab_vmci_qpair_alloc, $mul.ref(0, 17)), $mul.ref(15, 1)), 99);
    $M.194 := $store.i8($M.194, $add.ref($add.ref(__kstrtab_vmci_qpair_alloc, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, VMCI_INVALID_HANDLE___2, $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref(VMCI_INVALID_HANDLE___2, $mul.ref(0, 8)), $mul.ref(4, 1)), $sub.i32(0, 1));
    $M.0 := $store.ref($M.0, qp_guest_endpoints, qp_guest_endpoints);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(qp_guest_endpoints, $mul.ref(0, 176)), $mul.ref(0, 1)), $mul.ref(8, 1)), qp_guest_endpoints);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(qp_guest_endpoints, $mul.ref(0, 176)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(qp_guest_endpoints, $mul.ref(0, 176)), $mul.ref(16, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(qp_guest_endpoints, $mul.ref(0, 176)), $mul.ref(16, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(qp_guest_endpoints, $mul.ref(0, 176)), $mul.ref(16, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(qp_guest_endpoints, $mul.ref(0, 176)), $mul.ref(16, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(qp_guest_endpoints, $mul.ref(0, 176)), $mul.ref(16, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(qp_guest_endpoints, $mul.ref(0, 176)), $mul.ref(16, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(qp_guest_endpoints, $mul.ref(0, 176)), $mul.ref(16, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(qp_guest_endpoints, $mul.ref(0, 176)), $mul.ref(16, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.177);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(qp_guest_endpoints, $mul.ref(0, 176)), $mul.ref(16, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(qp_guest_endpoints, $mul.ref(0, 176)), $mul.ref(16, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(qp_guest_endpoints, $mul.ref(0, 176)), $mul.ref(16, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $add.ref(qp_guest_endpoints, $mul.ref(96, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(qp_guest_endpoints, $mul.ref(0, 176)), $mul.ref(16, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $add.ref(qp_guest_endpoints, $mul.ref(96, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(qp_guest_endpoints, $mul.ref(0, 176)), $mul.ref(16, 1)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(qp_guest_endpoints, $mul.ref(0, 176)), $mul.ref(16, 1)), $mul.ref(104, 1)), $add.ref(qp_guest_endpoints, $mul.ref(16, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(qp_guest_endpoints, $mul.ref(0, 176)), $mul.ref(16, 1)), $mul.ref(112, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(qp_guest_endpoints, $mul.ref(0, 176)), $mul.ref(16, 1)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(qp_guest_endpoints, $mul.ref(0, 176)), $mul.ref(16, 1)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(qp_guest_endpoints, $mul.ref(0, 176)), $mul.ref(16, 1)), $mul.ref(112, 1)), $mul.ref(24, 1)), .str.178);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(qp_guest_endpoints, $mul.ref(0, 176)), $mul.ref(16, 1)), $mul.ref(112, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(qp_guest_endpoints, $mul.ref(0, 176)), $mul.ref(16, 1)), $mul.ref(112, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, qp_broker_list, qp_broker_list);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(qp_broker_list, $mul.ref(0, 176)), $mul.ref(0, 1)), $mul.ref(8, 1)), qp_broker_list);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(qp_broker_list, $mul.ref(0, 176)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(qp_broker_list, $mul.ref(0, 176)), $mul.ref(16, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(qp_broker_list, $mul.ref(0, 176)), $mul.ref(16, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(qp_broker_list, $mul.ref(0, 176)), $mul.ref(16, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(qp_broker_list, $mul.ref(0, 176)), $mul.ref(16, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(qp_broker_list, $mul.ref(0, 176)), $mul.ref(16, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(qp_broker_list, $mul.ref(0, 176)), $mul.ref(16, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(qp_broker_list, $mul.ref(0, 176)), $mul.ref(16, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(qp_broker_list, $mul.ref(0, 176)), $mul.ref(16, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.166);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(qp_broker_list, $mul.ref(0, 176)), $mul.ref(16, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(qp_broker_list, $mul.ref(0, 176)), $mul.ref(16, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(qp_broker_list, $mul.ref(0, 176)), $mul.ref(16, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $add.ref(qp_broker_list, $mul.ref(96, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(qp_broker_list, $mul.ref(0, 176)), $mul.ref(16, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $add.ref(qp_broker_list, $mul.ref(96, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(qp_broker_list, $mul.ref(0, 176)), $mul.ref(16, 1)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(qp_broker_list, $mul.ref(0, 176)), $mul.ref(16, 1)), $mul.ref(104, 1)), $add.ref(qp_broker_list, $mul.ref(16, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(qp_broker_list, $mul.ref(0, 176)), $mul.ref(16, 1)), $mul.ref(112, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(qp_broker_list, $mul.ref(0, 176)), $mul.ref(16, 1)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(qp_broker_list, $mul.ref(0, 176)), $mul.ref(16, 1)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(qp_broker_list, $mul.ref(0, 176)), $mul.ref(16, 1)), $mul.ref(112, 1)), $mul.ref(24, 1)), .str.167);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(qp_broker_list, $mul.ref(0, 176)), $mul.ref(16, 1)), $mul.ref(112, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(qp_broker_list, $mul.ref(0, 176)), $mul.ref(16, 1)), $mul.ref(112, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, VMCI_ANON_SRC_HANDLE___1, $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref(VMCI_ANON_SRC_HANDLE___1, $mul.ref(0, 8)), $mul.ref(4, 1)), $sub.i32(0, 1));
    $M.172 := 255;
    $M.171 := .str.114;
    $M.0 := $store.i32($M.0, vmci_host_active_users, 0);
    $M.0 := $store.i32($M.0, VMCI_INVALID_HANDLE___1, $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref(VMCI_INVALID_HANDLE___1, $mul.ref(0, 8)), $mul.ref(4, 1)), $sub.i32(0, 1));
    $M.107 := 0;
    call {:si_unique_call 2202} {:cexpr "vmci_disable_msi"} boogie_si_record_i8(0);
    $M.106 := 0;
    call {:si_unique_call 2203} {:cexpr "vmci_disable_msix"} boogie_si_record_i8(0);
    $M.69 := $sub.i32(0, 1);
    call {:si_unique_call 2204} {:cexpr "ctx_update_sub_id"} boogie_si_record_i32($sub.i32(0, 1));
    $M.231 := $store.i32($M.231, vmci_ids, 5549);
    $M.231 := $store.i32($M.231, $add.ref($add.ref($add.ref(vmci_ids, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(4, 1)), 1856);
    $M.231 := $store.i32($M.231, $add.ref($add.ref($add.ref(vmci_ids, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.231 := $store.i32($M.231, $add.ref($add.ref($add.ref(vmci_ids, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.231 := $store.i32($M.231, $add.ref($add.ref($add.ref(vmci_ids, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.231 := $store.i32($M.231, $add.ref($add.ref($add.ref(vmci_ids, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(20, 1)), 0);
    $M.231 := $store.i64($M.231, $add.ref($add.ref($add.ref(vmci_ids, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.231 := $store.i32($M.231, $add.ref($add.ref($add.ref(vmci_ids, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), 0);
    $M.231 := $store.i32($M.231, $add.ref($add.ref($add.ref(vmci_ids, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(4, 1)), 0);
    $M.231 := $store.i32($M.231, $add.ref($add.ref($add.ref(vmci_ids, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(8, 1)), 0);
    $M.231 := $store.i32($M.231, $add.ref($add.ref($add.ref(vmci_ids, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(12, 1)), 0);
    $M.231 := $store.i32($M.231, $add.ref($add.ref($add.ref(vmci_ids, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.231 := $store.i32($M.231, $add.ref($add.ref($add.ref(vmci_ids, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(20, 1)), 0);
    $M.231 := $store.i64($M.231, $add.ref($add.ref($add.ref(vmci_ids, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.232 := $store.ref($M.232, vmci_guest_driver, $0.ref);
    $M.232 := $store.ref($M.232, $add.ref($add.ref($add.ref(vmci_guest_driver, $mul.ref(0, 312)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.232 := $store.ref($M.232, $add.ref($add.ref(vmci_guest_driver, $mul.ref(0, 312)), $mul.ref(16, 1)), .str.39);
    $M.232 := $store.ref($M.232, $add.ref($add.ref(vmci_guest_driver, $mul.ref(0, 312)), $mul.ref(24, 1)), vmci_ids);
    $M.232 := $store.ref($M.232, $add.ref($add.ref(vmci_guest_driver, $mul.ref(0, 312)), $mul.ref(32, 1)), vmci_guest_probe_device);
    $M.232 := $store.ref($M.232, $add.ref($add.ref(vmci_guest_driver, $mul.ref(0, 312)), $mul.ref(40, 1)), vmci_guest_remove_device);
    $M.232 := $store.ref($M.232, $add.ref($add.ref(vmci_guest_driver, $mul.ref(0, 312)), $mul.ref(48, 1)), $0.ref);
    $M.232 := $store.ref($M.232, $add.ref($add.ref(vmci_guest_driver, $mul.ref(0, 312)), $mul.ref(56, 1)), $0.ref);
    $M.232 := $store.ref($M.232, $add.ref($add.ref(vmci_guest_driver, $mul.ref(0, 312)), $mul.ref(64, 1)), $0.ref);
    $M.232 := $store.ref($M.232, $add.ref($add.ref(vmci_guest_driver, $mul.ref(0, 312)), $mul.ref(72, 1)), $0.ref);
    $M.232 := $store.ref($M.232, $add.ref($add.ref(vmci_guest_driver, $mul.ref(0, 312)), $mul.ref(80, 1)), $0.ref);
    $M.232 := $store.ref($M.232, $add.ref($add.ref(vmci_guest_driver, $mul.ref(0, 312)), $mul.ref(88, 1)), $0.ref);
    $M.232 := $store.ref($M.232, $add.ref($add.ref(vmci_guest_driver, $mul.ref(0, 312)), $mul.ref(96, 1)), $0.ref);
    $M.232 := $store.ref($M.232, $add.ref($add.ref($add.ref(vmci_guest_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(0, 1)), $0.ref);
    $M.232 := $store.ref($M.232, $add.ref($add.ref($add.ref(vmci_guest_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(8, 1)), $0.ref);
    $M.232 := $store.ref($M.232, $add.ref($add.ref($add.ref(vmci_guest_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(16, 1)), $0.ref);
    $M.232 := $store.ref($M.232, $add.ref($add.ref($add.ref(vmci_guest_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(24, 1)), $0.ref);
    $M.232 := $store.i8($M.232, $add.ref($add.ref($add.ref(vmci_guest_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(32, 1)), 0);
    $M.232 := $store.i32($M.232, $add.ref($add.ref($add.ref(vmci_guest_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(36, 1)), 0);
    $M.232 := $store.ref($M.232, $add.ref($add.ref($add.ref(vmci_guest_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(40, 1)), $0.ref);
    $M.232 := $store.ref($M.232, $add.ref($add.ref($add.ref(vmci_guest_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(48, 1)), $0.ref);
    $M.232 := $store.ref($M.232, $add.ref($add.ref($add.ref(vmci_guest_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(56, 1)), $0.ref);
    $M.232 := $store.ref($M.232, $add.ref($add.ref($add.ref(vmci_guest_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(64, 1)), $0.ref);
    $M.232 := $store.ref($M.232, $add.ref($add.ref($add.ref(vmci_guest_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(72, 1)), $0.ref);
    $M.232 := $store.ref($M.232, $add.ref($add.ref($add.ref(vmci_guest_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(80, 1)), $0.ref);
    $M.232 := $store.ref($M.232, $add.ref($add.ref($add.ref(vmci_guest_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(88, 1)), $0.ref);
    $M.232 := $store.ref($M.232, $add.ref($add.ref($add.ref(vmci_guest_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(96, 1)), $0.ref);
    $M.232 := $store.ref($M.232, $add.ref($add.ref($add.ref(vmci_guest_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(104, 1)), $0.ref);
    $M.232 := $store.ref($M.232, $add.ref($add.ref($add.ref(vmci_guest_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(112, 1)), $0.ref);
    $M.232 := $store.i32($M.232, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(vmci_guest_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.232 := $store.i32($M.232, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(vmci_guest_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.232 := $store.i32($M.232, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(vmci_guest_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.232 := $store.ref($M.232, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(vmci_guest_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.232 := $store.ref($M.232, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(vmci_guest_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.232 := $store.ref($M.232, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(vmci_guest_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.232 := $store.ref($M.232, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(vmci_guest_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.232 := $store.ref($M.232, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(vmci_guest_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.232 := $store.i32($M.232, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(vmci_guest_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.232 := $store.i64($M.232, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(vmci_guest_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.232 := $store.ref($M.232, $add.ref($add.ref($add.ref($add.ref(vmci_guest_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.232 := $store.ref($M.232, $add.ref($add.ref($add.ref($add.ref(vmci_guest_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.233 := $store.i8($M.233, __kstrtab_vmci_send_datagram, 118);
    $M.233 := $store.i8($M.233, $add.ref($add.ref(__kstrtab_vmci_send_datagram, $mul.ref(0, 19)), $mul.ref(1, 1)), 109);
    $M.233 := $store.i8($M.233, $add.ref($add.ref(__kstrtab_vmci_send_datagram, $mul.ref(0, 19)), $mul.ref(2, 1)), 99);
    $M.233 := $store.i8($M.233, $add.ref($add.ref(__kstrtab_vmci_send_datagram, $mul.ref(0, 19)), $mul.ref(3, 1)), 105);
    $M.233 := $store.i8($M.233, $add.ref($add.ref(__kstrtab_vmci_send_datagram, $mul.ref(0, 19)), $mul.ref(4, 1)), 95);
    $M.233 := $store.i8($M.233, $add.ref($add.ref(__kstrtab_vmci_send_datagram, $mul.ref(0, 19)), $mul.ref(5, 1)), 115);
    $M.233 := $store.i8($M.233, $add.ref($add.ref(__kstrtab_vmci_send_datagram, $mul.ref(0, 19)), $mul.ref(6, 1)), 101);
    $M.233 := $store.i8($M.233, $add.ref($add.ref(__kstrtab_vmci_send_datagram, $mul.ref(0, 19)), $mul.ref(7, 1)), 110);
    $M.233 := $store.i8($M.233, $add.ref($add.ref(__kstrtab_vmci_send_datagram, $mul.ref(0, 19)), $mul.ref(8, 1)), 100);
    $M.233 := $store.i8($M.233, $add.ref($add.ref(__kstrtab_vmci_send_datagram, $mul.ref(0, 19)), $mul.ref(9, 1)), 95);
    $M.233 := $store.i8($M.233, $add.ref($add.ref(__kstrtab_vmci_send_datagram, $mul.ref(0, 19)), $mul.ref(10, 1)), 100);
    $M.233 := $store.i8($M.233, $add.ref($add.ref(__kstrtab_vmci_send_datagram, $mul.ref(0, 19)), $mul.ref(11, 1)), 97);
    $M.233 := $store.i8($M.233, $add.ref($add.ref(__kstrtab_vmci_send_datagram, $mul.ref(0, 19)), $mul.ref(12, 1)), 116);
    $M.233 := $store.i8($M.233, $add.ref($add.ref(__kstrtab_vmci_send_datagram, $mul.ref(0, 19)), $mul.ref(13, 1)), 97);
    $M.233 := $store.i8($M.233, $add.ref($add.ref(__kstrtab_vmci_send_datagram, $mul.ref(0, 19)), $mul.ref(14, 1)), 103);
    $M.233 := $store.i8($M.233, $add.ref($add.ref(__kstrtab_vmci_send_datagram, $mul.ref(0, 19)), $mul.ref(15, 1)), 114);
    $M.233 := $store.i8($M.233, $add.ref($add.ref(__kstrtab_vmci_send_datagram, $mul.ref(0, 19)), $mul.ref(16, 1)), 97);
    $M.233 := $store.i8($M.233, $add.ref($add.ref(__kstrtab_vmci_send_datagram, $mul.ref(0, 19)), $mul.ref(17, 1)), 109);
    $M.233 := $store.i8($M.233, $add.ref($add.ref(__kstrtab_vmci_send_datagram, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i32($M.0, vmci_dev_spinlock, 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_dev_spinlock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_dev_spinlock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_dev_spinlock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(vmci_dev_spinlock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(vmci_dev_spinlock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(vmci_dev_spinlock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(vmci_dev_spinlock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.79);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(vmci_dev_spinlock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(vmci_dev_spinlock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, VMCI_ANON_SRC_HANDLE___0, $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref(VMCI_ANON_SRC_HANDLE___0, $mul.ref(0, 8)), $mul.ref(4, 1)), $sub.i32(0, 1));
    $M.44 := $sub.i32(0, 1);
    call {:si_unique_call 2205} {:cexpr "vm_context_id"} boogie_si_record_i32($sub.i32(0, 1));
    $M.0 := $store.i32($M.0, vmci_num_guest_devices, 0);
    $M.234 := $store.i8($M.234, __kstrtab_vmci_event_unsubscribe, 118);
    $M.234 := $store.i8($M.234, $add.ref($add.ref(__kstrtab_vmci_event_unsubscribe, $mul.ref(0, 23)), $mul.ref(1, 1)), 109);
    $M.234 := $store.i8($M.234, $add.ref($add.ref(__kstrtab_vmci_event_unsubscribe, $mul.ref(0, 23)), $mul.ref(2, 1)), 99);
    $M.234 := $store.i8($M.234, $add.ref($add.ref(__kstrtab_vmci_event_unsubscribe, $mul.ref(0, 23)), $mul.ref(3, 1)), 105);
    $M.234 := $store.i8($M.234, $add.ref($add.ref(__kstrtab_vmci_event_unsubscribe, $mul.ref(0, 23)), $mul.ref(4, 1)), 95);
    $M.234 := $store.i8($M.234, $add.ref($add.ref(__kstrtab_vmci_event_unsubscribe, $mul.ref(0, 23)), $mul.ref(5, 1)), 101);
    $M.234 := $store.i8($M.234, $add.ref($add.ref(__kstrtab_vmci_event_unsubscribe, $mul.ref(0, 23)), $mul.ref(6, 1)), 118);
    $M.234 := $store.i8($M.234, $add.ref($add.ref(__kstrtab_vmci_event_unsubscribe, $mul.ref(0, 23)), $mul.ref(7, 1)), 101);
    $M.234 := $store.i8($M.234, $add.ref($add.ref(__kstrtab_vmci_event_unsubscribe, $mul.ref(0, 23)), $mul.ref(8, 1)), 110);
    $M.234 := $store.i8($M.234, $add.ref($add.ref(__kstrtab_vmci_event_unsubscribe, $mul.ref(0, 23)), $mul.ref(9, 1)), 116);
    $M.234 := $store.i8($M.234, $add.ref($add.ref(__kstrtab_vmci_event_unsubscribe, $mul.ref(0, 23)), $mul.ref(10, 1)), 95);
    $M.234 := $store.i8($M.234, $add.ref($add.ref(__kstrtab_vmci_event_unsubscribe, $mul.ref(0, 23)), $mul.ref(11, 1)), 117);
    $M.234 := $store.i8($M.234, $add.ref($add.ref(__kstrtab_vmci_event_unsubscribe, $mul.ref(0, 23)), $mul.ref(12, 1)), 110);
    $M.234 := $store.i8($M.234, $add.ref($add.ref(__kstrtab_vmci_event_unsubscribe, $mul.ref(0, 23)), $mul.ref(13, 1)), 115);
    $M.234 := $store.i8($M.234, $add.ref($add.ref(__kstrtab_vmci_event_unsubscribe, $mul.ref(0, 23)), $mul.ref(14, 1)), 117);
    $M.234 := $store.i8($M.234, $add.ref($add.ref(__kstrtab_vmci_event_unsubscribe, $mul.ref(0, 23)), $mul.ref(15, 1)), 98);
    $M.234 := $store.i8($M.234, $add.ref($add.ref(__kstrtab_vmci_event_unsubscribe, $mul.ref(0, 23)), $mul.ref(16, 1)), 115);
    $M.234 := $store.i8($M.234, $add.ref($add.ref(__kstrtab_vmci_event_unsubscribe, $mul.ref(0, 23)), $mul.ref(17, 1)), 99);
    $M.234 := $store.i8($M.234, $add.ref($add.ref(__kstrtab_vmci_event_unsubscribe, $mul.ref(0, 23)), $mul.ref(18, 1)), 114);
    $M.234 := $store.i8($M.234, $add.ref($add.ref(__kstrtab_vmci_event_unsubscribe, $mul.ref(0, 23)), $mul.ref(19, 1)), 105);
    $M.234 := $store.i8($M.234, $add.ref($add.ref(__kstrtab_vmci_event_unsubscribe, $mul.ref(0, 23)), $mul.ref(20, 1)), 98);
    $M.234 := $store.i8($M.234, $add.ref($add.ref(__kstrtab_vmci_event_unsubscribe, $mul.ref(0, 23)), $mul.ref(21, 1)), 101);
    $M.234 := $store.i8($M.234, $add.ref($add.ref(__kstrtab_vmci_event_unsubscribe, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.235 := $store.i8($M.235, __kstrtab_vmci_event_subscribe, 118);
    $M.235 := $store.i8($M.235, $add.ref($add.ref(__kstrtab_vmci_event_subscribe, $mul.ref(0, 21)), $mul.ref(1, 1)), 109);
    $M.235 := $store.i8($M.235, $add.ref($add.ref(__kstrtab_vmci_event_subscribe, $mul.ref(0, 21)), $mul.ref(2, 1)), 99);
    $M.235 := $store.i8($M.235, $add.ref($add.ref(__kstrtab_vmci_event_subscribe, $mul.ref(0, 21)), $mul.ref(3, 1)), 105);
    $M.235 := $store.i8($M.235, $add.ref($add.ref(__kstrtab_vmci_event_subscribe, $mul.ref(0, 21)), $mul.ref(4, 1)), 95);
    $M.235 := $store.i8($M.235, $add.ref($add.ref(__kstrtab_vmci_event_subscribe, $mul.ref(0, 21)), $mul.ref(5, 1)), 101);
    $M.235 := $store.i8($M.235, $add.ref($add.ref(__kstrtab_vmci_event_subscribe, $mul.ref(0, 21)), $mul.ref(6, 1)), 118);
    $M.235 := $store.i8($M.235, $add.ref($add.ref(__kstrtab_vmci_event_subscribe, $mul.ref(0, 21)), $mul.ref(7, 1)), 101);
    $M.235 := $store.i8($M.235, $add.ref($add.ref(__kstrtab_vmci_event_subscribe, $mul.ref(0, 21)), $mul.ref(8, 1)), 110);
    $M.235 := $store.i8($M.235, $add.ref($add.ref(__kstrtab_vmci_event_subscribe, $mul.ref(0, 21)), $mul.ref(9, 1)), 116);
    $M.235 := $store.i8($M.235, $add.ref($add.ref(__kstrtab_vmci_event_subscribe, $mul.ref(0, 21)), $mul.ref(10, 1)), 95);
    $M.235 := $store.i8($M.235, $add.ref($add.ref(__kstrtab_vmci_event_subscribe, $mul.ref(0, 21)), $mul.ref(11, 1)), 115);
    $M.235 := $store.i8($M.235, $add.ref($add.ref(__kstrtab_vmci_event_subscribe, $mul.ref(0, 21)), $mul.ref(12, 1)), 117);
    $M.235 := $store.i8($M.235, $add.ref($add.ref(__kstrtab_vmci_event_subscribe, $mul.ref(0, 21)), $mul.ref(13, 1)), 98);
    $M.235 := $store.i8($M.235, $add.ref($add.ref(__kstrtab_vmci_event_subscribe, $mul.ref(0, 21)), $mul.ref(14, 1)), 115);
    $M.235 := $store.i8($M.235, $add.ref($add.ref(__kstrtab_vmci_event_subscribe, $mul.ref(0, 21)), $mul.ref(15, 1)), 99);
    $M.235 := $store.i8($M.235, $add.ref($add.ref(__kstrtab_vmci_event_subscribe, $mul.ref(0, 21)), $mul.ref(16, 1)), 114);
    $M.235 := $store.i8($M.235, $add.ref($add.ref(__kstrtab_vmci_event_subscribe, $mul.ref(0, 21)), $mul.ref(17, 1)), 105);
    $M.235 := $store.i8($M.235, $add.ref($add.ref(__kstrtab_vmci_event_subscribe, $mul.ref(0, 21)), $mul.ref(18, 1)), 98);
    $M.235 := $store.i8($M.235, $add.ref($add.ref(__kstrtab_vmci_event_subscribe, $mul.ref(0, 21)), $mul.ref(19, 1)), 101);
    $M.235 := $store.i8($M.235, $add.ref($add.ref(__kstrtab_vmci_event_subscribe, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i32($M.0, subscriber_mutex, 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(subscriber_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(subscriber_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(subscriber_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(subscriber_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(subscriber_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(subscriber_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(subscriber_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(subscriber_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.77);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(subscriber_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(subscriber_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(subscriber_mutex, $mul.ref(0, 160)), $mul.ref(80, 1)), $mul.ref(0, 1)), $add.ref(subscriber_mutex, $mul.ref(80, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(subscriber_mutex, $mul.ref(0, 160)), $mul.ref(80, 1)), $mul.ref(8, 1)), $add.ref(subscriber_mutex, $mul.ref(80, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref(subscriber_mutex, $mul.ref(0, 160)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(subscriber_mutex, $mul.ref(0, 160)), $mul.ref(104, 1)), subscriber_mutex);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(subscriber_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(subscriber_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(subscriber_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(subscriber_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(24, 1)), .str.78);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(subscriber_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(subscriber_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(40, 1)), 0);
    $M.166 := 0;
    call {:si_unique_call 2206} {:cexpr "vmci_disable_host"} boogie_si_record_i8(0);
    $M.165 := 0;
    call {:si_unique_call 2207} {:cexpr "vmci_disable_guest"} boogie_si_record_i8(0);
    $M.164 := 0;
    call {:si_unique_call 2208} {:cexpr "vmci_host_personality_initialized"} boogie_si_record_i8(0);
    $M.163 := 0;
    call {:si_unique_call 2209} {:cexpr "vmci_guest_personality_initialized"} boogie_si_record_i8(0);
    $M.236 := $store.i8($M.236, __kstrtab_vmci_get_context_id, 118);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(__kstrtab_vmci_get_context_id, $mul.ref(0, 20)), $mul.ref(1, 1)), 109);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(__kstrtab_vmci_get_context_id, $mul.ref(0, 20)), $mul.ref(2, 1)), 99);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(__kstrtab_vmci_get_context_id, $mul.ref(0, 20)), $mul.ref(3, 1)), 105);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(__kstrtab_vmci_get_context_id, $mul.ref(0, 20)), $mul.ref(4, 1)), 95);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(__kstrtab_vmci_get_context_id, $mul.ref(0, 20)), $mul.ref(5, 1)), 103);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(__kstrtab_vmci_get_context_id, $mul.ref(0, 20)), $mul.ref(6, 1)), 101);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(__kstrtab_vmci_get_context_id, $mul.ref(0, 20)), $mul.ref(7, 1)), 116);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(__kstrtab_vmci_get_context_id, $mul.ref(0, 20)), $mul.ref(8, 1)), 95);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(__kstrtab_vmci_get_context_id, $mul.ref(0, 20)), $mul.ref(9, 1)), 99);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(__kstrtab_vmci_get_context_id, $mul.ref(0, 20)), $mul.ref(10, 1)), 111);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(__kstrtab_vmci_get_context_id, $mul.ref(0, 20)), $mul.ref(11, 1)), 110);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(__kstrtab_vmci_get_context_id, $mul.ref(0, 20)), $mul.ref(12, 1)), 116);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(__kstrtab_vmci_get_context_id, $mul.ref(0, 20)), $mul.ref(13, 1)), 101);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(__kstrtab_vmci_get_context_id, $mul.ref(0, 20)), $mul.ref(14, 1)), 120);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(__kstrtab_vmci_get_context_id, $mul.ref(0, 20)), $mul.ref(15, 1)), 116);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(__kstrtab_vmci_get_context_id, $mul.ref(0, 20)), $mul.ref(16, 1)), 95);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(__kstrtab_vmci_get_context_id, $mul.ref(0, 20)), $mul.ref(17, 1)), 105);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(__kstrtab_vmci_get_context_id, $mul.ref(0, 20)), $mul.ref(18, 1)), 100);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(__kstrtab_vmci_get_context_id, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.237 := $store.i8($M.237, __kstrtab_vmci_doorbell_notify, 118);
    $M.237 := $store.i8($M.237, $add.ref($add.ref(__kstrtab_vmci_doorbell_notify, $mul.ref(0, 21)), $mul.ref(1, 1)), 109);
    $M.237 := $store.i8($M.237, $add.ref($add.ref(__kstrtab_vmci_doorbell_notify, $mul.ref(0, 21)), $mul.ref(2, 1)), 99);
    $M.237 := $store.i8($M.237, $add.ref($add.ref(__kstrtab_vmci_doorbell_notify, $mul.ref(0, 21)), $mul.ref(3, 1)), 105);
    $M.237 := $store.i8($M.237, $add.ref($add.ref(__kstrtab_vmci_doorbell_notify, $mul.ref(0, 21)), $mul.ref(4, 1)), 95);
    $M.237 := $store.i8($M.237, $add.ref($add.ref(__kstrtab_vmci_doorbell_notify, $mul.ref(0, 21)), $mul.ref(5, 1)), 100);
    $M.237 := $store.i8($M.237, $add.ref($add.ref(__kstrtab_vmci_doorbell_notify, $mul.ref(0, 21)), $mul.ref(6, 1)), 111);
    $M.237 := $store.i8($M.237, $add.ref($add.ref(__kstrtab_vmci_doorbell_notify, $mul.ref(0, 21)), $mul.ref(7, 1)), 111);
    $M.237 := $store.i8($M.237, $add.ref($add.ref(__kstrtab_vmci_doorbell_notify, $mul.ref(0, 21)), $mul.ref(8, 1)), 114);
    $M.237 := $store.i8($M.237, $add.ref($add.ref(__kstrtab_vmci_doorbell_notify, $mul.ref(0, 21)), $mul.ref(9, 1)), 98);
    $M.237 := $store.i8($M.237, $add.ref($add.ref(__kstrtab_vmci_doorbell_notify, $mul.ref(0, 21)), $mul.ref(10, 1)), 101);
    $M.237 := $store.i8($M.237, $add.ref($add.ref(__kstrtab_vmci_doorbell_notify, $mul.ref(0, 21)), $mul.ref(11, 1)), 108);
    $M.237 := $store.i8($M.237, $add.ref($add.ref(__kstrtab_vmci_doorbell_notify, $mul.ref(0, 21)), $mul.ref(12, 1)), 108);
    $M.237 := $store.i8($M.237, $add.ref($add.ref(__kstrtab_vmci_doorbell_notify, $mul.ref(0, 21)), $mul.ref(13, 1)), 95);
    $M.237 := $store.i8($M.237, $add.ref($add.ref(__kstrtab_vmci_doorbell_notify, $mul.ref(0, 21)), $mul.ref(14, 1)), 110);
    $M.237 := $store.i8($M.237, $add.ref($add.ref(__kstrtab_vmci_doorbell_notify, $mul.ref(0, 21)), $mul.ref(15, 1)), 111);
    $M.237 := $store.i8($M.237, $add.ref($add.ref(__kstrtab_vmci_doorbell_notify, $mul.ref(0, 21)), $mul.ref(16, 1)), 116);
    $M.237 := $store.i8($M.237, $add.ref($add.ref(__kstrtab_vmci_doorbell_notify, $mul.ref(0, 21)), $mul.ref(17, 1)), 105);
    $M.237 := $store.i8($M.237, $add.ref($add.ref(__kstrtab_vmci_doorbell_notify, $mul.ref(0, 21)), $mul.ref(18, 1)), 102);
    $M.237 := $store.i8($M.237, $add.ref($add.ref(__kstrtab_vmci_doorbell_notify, $mul.ref(0, 21)), $mul.ref(19, 1)), 121);
    $M.237 := $store.i8($M.237, $add.ref($add.ref(__kstrtab_vmci_doorbell_notify, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i32($M.0, VMCI_INVALID_HANDLE___0, $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref(VMCI_INVALID_HANDLE___0, $mul.ref(0, 8)), $mul.ref(4, 1)), $sub.i32(0, 1));
    $M.238 := $store.i8($M.238, __kstrtab_vmci_doorbell_destroy, 118);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(__kstrtab_vmci_doorbell_destroy, $mul.ref(0, 22)), $mul.ref(1, 1)), 109);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(__kstrtab_vmci_doorbell_destroy, $mul.ref(0, 22)), $mul.ref(2, 1)), 99);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(__kstrtab_vmci_doorbell_destroy, $mul.ref(0, 22)), $mul.ref(3, 1)), 105);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(__kstrtab_vmci_doorbell_destroy, $mul.ref(0, 22)), $mul.ref(4, 1)), 95);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(__kstrtab_vmci_doorbell_destroy, $mul.ref(0, 22)), $mul.ref(5, 1)), 100);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(__kstrtab_vmci_doorbell_destroy, $mul.ref(0, 22)), $mul.ref(6, 1)), 111);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(__kstrtab_vmci_doorbell_destroy, $mul.ref(0, 22)), $mul.ref(7, 1)), 111);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(__kstrtab_vmci_doorbell_destroy, $mul.ref(0, 22)), $mul.ref(8, 1)), 114);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(__kstrtab_vmci_doorbell_destroy, $mul.ref(0, 22)), $mul.ref(9, 1)), 98);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(__kstrtab_vmci_doorbell_destroy, $mul.ref(0, 22)), $mul.ref(10, 1)), 101);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(__kstrtab_vmci_doorbell_destroy, $mul.ref(0, 22)), $mul.ref(11, 1)), 108);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(__kstrtab_vmci_doorbell_destroy, $mul.ref(0, 22)), $mul.ref(12, 1)), 108);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(__kstrtab_vmci_doorbell_destroy, $mul.ref(0, 22)), $mul.ref(13, 1)), 95);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(__kstrtab_vmci_doorbell_destroy, $mul.ref(0, 22)), $mul.ref(14, 1)), 100);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(__kstrtab_vmci_doorbell_destroy, $mul.ref(0, 22)), $mul.ref(15, 1)), 101);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(__kstrtab_vmci_doorbell_destroy, $mul.ref(0, 22)), $mul.ref(16, 1)), 115);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(__kstrtab_vmci_doorbell_destroy, $mul.ref(0, 22)), $mul.ref(17, 1)), 116);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(__kstrtab_vmci_doorbell_destroy, $mul.ref(0, 22)), $mul.ref(18, 1)), 114);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(__kstrtab_vmci_doorbell_destroy, $mul.ref(0, 22)), $mul.ref(19, 1)), 111);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(__kstrtab_vmci_doorbell_destroy, $mul.ref(0, 22)), $mul.ref(20, 1)), 121);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(__kstrtab_vmci_doorbell_destroy, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.239 := $store.i8($M.239, __kstrtab_vmci_doorbell_create, 118);
    $M.239 := $store.i8($M.239, $add.ref($add.ref(__kstrtab_vmci_doorbell_create, $mul.ref(0, 21)), $mul.ref(1, 1)), 109);
    $M.239 := $store.i8($M.239, $add.ref($add.ref(__kstrtab_vmci_doorbell_create, $mul.ref(0, 21)), $mul.ref(2, 1)), 99);
    $M.239 := $store.i8($M.239, $add.ref($add.ref(__kstrtab_vmci_doorbell_create, $mul.ref(0, 21)), $mul.ref(3, 1)), 105);
    $M.239 := $store.i8($M.239, $add.ref($add.ref(__kstrtab_vmci_doorbell_create, $mul.ref(0, 21)), $mul.ref(4, 1)), 95);
    $M.239 := $store.i8($M.239, $add.ref($add.ref(__kstrtab_vmci_doorbell_create, $mul.ref(0, 21)), $mul.ref(5, 1)), 100);
    $M.239 := $store.i8($M.239, $add.ref($add.ref(__kstrtab_vmci_doorbell_create, $mul.ref(0, 21)), $mul.ref(6, 1)), 111);
    $M.239 := $store.i8($M.239, $add.ref($add.ref(__kstrtab_vmci_doorbell_create, $mul.ref(0, 21)), $mul.ref(7, 1)), 111);
    $M.239 := $store.i8($M.239, $add.ref($add.ref(__kstrtab_vmci_doorbell_create, $mul.ref(0, 21)), $mul.ref(8, 1)), 114);
    $M.239 := $store.i8($M.239, $add.ref($add.ref(__kstrtab_vmci_doorbell_create, $mul.ref(0, 21)), $mul.ref(9, 1)), 98);
    $M.239 := $store.i8($M.239, $add.ref($add.ref(__kstrtab_vmci_doorbell_create, $mul.ref(0, 21)), $mul.ref(10, 1)), 101);
    $M.239 := $store.i8($M.239, $add.ref($add.ref(__kstrtab_vmci_doorbell_create, $mul.ref(0, 21)), $mul.ref(11, 1)), 108);
    $M.239 := $store.i8($M.239, $add.ref($add.ref(__kstrtab_vmci_doorbell_create, $mul.ref(0, 21)), $mul.ref(12, 1)), 108);
    $M.239 := $store.i8($M.239, $add.ref($add.ref(__kstrtab_vmci_doorbell_create, $mul.ref(0, 21)), $mul.ref(13, 1)), 95);
    $M.239 := $store.i8($M.239, $add.ref($add.ref(__kstrtab_vmci_doorbell_create, $mul.ref(0, 21)), $mul.ref(14, 1)), 99);
    $M.239 := $store.i8($M.239, $add.ref($add.ref(__kstrtab_vmci_doorbell_create, $mul.ref(0, 21)), $mul.ref(15, 1)), 114);
    $M.239 := $store.i8($M.239, $add.ref($add.ref(__kstrtab_vmci_doorbell_create, $mul.ref(0, 21)), $mul.ref(16, 1)), 101);
    $M.239 := $store.i8($M.239, $add.ref($add.ref(__kstrtab_vmci_doorbell_create, $mul.ref(0, 21)), $mul.ref(17, 1)), 97);
    $M.239 := $store.i8($M.239, $add.ref($add.ref(__kstrtab_vmci_doorbell_create, $mul.ref(0, 21)), $mul.ref(18, 1)), 116);
    $M.239 := $store.i8($M.239, $add.ref($add.ref(__kstrtab_vmci_doorbell_create, $mul.ref(0, 21)), $mul.ref(19, 1)), 101);
    $M.239 := $store.i8($M.239, $add.ref($add.ref(__kstrtab_vmci_doorbell_create, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    call {:si_unique_call 2210} {:cexpr "last_notify_idx_reserved"} boogie_si_record_i32(0);
    call {:si_unique_call 2211} {:cexpr "last_notify_idx_released"} boogie_si_record_i32(4096);
    call {:si_unique_call 2212} {:cexpr "notify_idx_count"} boogie_si_record_i32(0);
    $M.0 := $store.i32($M.0, vmci_doorbell_it, 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(vmci_doorbell_it, $mul.ref(0, 584)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(vmci_doorbell_it, $mul.ref(0, 584)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(vmci_doorbell_it, $mul.ref(0, 584)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(vmci_doorbell_it, $mul.ref(0, 584)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(vmci_doorbell_it, $mul.ref(0, 584)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(vmci_doorbell_it, $mul.ref(0, 584)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(vmci_doorbell_it, $mul.ref(0, 584)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.69);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(vmci_doorbell_it, $mul.ref(0, 584)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(vmci_doorbell_it, $mul.ref(0, 584)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_doorbell_it, $mul.ref(0, 584)), $mul.ref(72, 1)), $mul.ref(0, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_doorbell_it, $mul.ref(0, 584)), $mul.ref(72, 1)), $mul.ref(1, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_doorbell_it, $mul.ref(0, 584)), $mul.ref(72, 1)), $mul.ref(2, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_doorbell_it, $mul.ref(0, 584)), $mul.ref(72, 1)), $mul.ref(3, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_doorbell_it, $mul.ref(0, 584)), $mul.ref(72, 1)), $mul.ref(4, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_doorbell_it, $mul.ref(0, 584)), $mul.ref(72, 1)), $mul.ref(5, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_doorbell_it, $mul.ref(0, 584)), $mul.ref(72, 1)), $mul.ref(6, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_doorbell_it, $mul.ref(0, 584)), $mul.ref(72, 1)), $mul.ref(7, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_doorbell_it, $mul.ref(0, 584)), $mul.ref(72, 1)), $mul.ref(8, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_doorbell_it, $mul.ref(0, 584)), $mul.ref(72, 1)), $mul.ref(9, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_doorbell_it, $mul.ref(0, 584)), $mul.ref(72, 1)), $mul.ref(10, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_doorbell_it, $mul.ref(0, 584)), $mul.ref(72, 1)), $mul.ref(11, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_doorbell_it, $mul.ref(0, 584)), $mul.ref(72, 1)), $mul.ref(12, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_doorbell_it, $mul.ref(0, 584)), $mul.ref(72, 1)), $mul.ref(13, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_doorbell_it, $mul.ref(0, 584)), $mul.ref(72, 1)), $mul.ref(14, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_doorbell_it, $mul.ref(0, 584)), $mul.ref(72, 1)), $mul.ref(15, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_doorbell_it, $mul.ref(0, 584)), $mul.ref(72, 1)), $mul.ref(16, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_doorbell_it, $mul.ref(0, 584)), $mul.ref(72, 1)), $mul.ref(17, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_doorbell_it, $mul.ref(0, 584)), $mul.ref(72, 1)), $mul.ref(18, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_doorbell_it, $mul.ref(0, 584)), $mul.ref(72, 1)), $mul.ref(19, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_doorbell_it, $mul.ref(0, 584)), $mul.ref(72, 1)), $mul.ref(20, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_doorbell_it, $mul.ref(0, 584)), $mul.ref(72, 1)), $mul.ref(21, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_doorbell_it, $mul.ref(0, 584)), $mul.ref(72, 1)), $mul.ref(22, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_doorbell_it, $mul.ref(0, 584)), $mul.ref(72, 1)), $mul.ref(23, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_doorbell_it, $mul.ref(0, 584)), $mul.ref(72, 1)), $mul.ref(24, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_doorbell_it, $mul.ref(0, 584)), $mul.ref(72, 1)), $mul.ref(25, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_doorbell_it, $mul.ref(0, 584)), $mul.ref(72, 1)), $mul.ref(26, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_doorbell_it, $mul.ref(0, 584)), $mul.ref(72, 1)), $mul.ref(27, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_doorbell_it, $mul.ref(0, 584)), $mul.ref(72, 1)), $mul.ref(28, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_doorbell_it, $mul.ref(0, 584)), $mul.ref(72, 1)), $mul.ref(29, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_doorbell_it, $mul.ref(0, 584)), $mul.ref(72, 1)), $mul.ref(30, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_doorbell_it, $mul.ref(0, 584)), $mul.ref(72, 1)), $mul.ref(31, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_doorbell_it, $mul.ref(0, 584)), $mul.ref(72, 1)), $mul.ref(32, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_doorbell_it, $mul.ref(0, 584)), $mul.ref(72, 1)), $mul.ref(33, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_doorbell_it, $mul.ref(0, 584)), $mul.ref(72, 1)), $mul.ref(34, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_doorbell_it, $mul.ref(0, 584)), $mul.ref(72, 1)), $mul.ref(35, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_doorbell_it, $mul.ref(0, 584)), $mul.ref(72, 1)), $mul.ref(36, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_doorbell_it, $mul.ref(0, 584)), $mul.ref(72, 1)), $mul.ref(37, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_doorbell_it, $mul.ref(0, 584)), $mul.ref(72, 1)), $mul.ref(38, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_doorbell_it, $mul.ref(0, 584)), $mul.ref(72, 1)), $mul.ref(39, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_doorbell_it, $mul.ref(0, 584)), $mul.ref(72, 1)), $mul.ref(40, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_doorbell_it, $mul.ref(0, 584)), $mul.ref(72, 1)), $mul.ref(41, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_doorbell_it, $mul.ref(0, 584)), $mul.ref(72, 1)), $mul.ref(42, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_doorbell_it, $mul.ref(0, 584)), $mul.ref(72, 1)), $mul.ref(43, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_doorbell_it, $mul.ref(0, 584)), $mul.ref(72, 1)), $mul.ref(44, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_doorbell_it, $mul.ref(0, 584)), $mul.ref(72, 1)), $mul.ref(45, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_doorbell_it, $mul.ref(0, 584)), $mul.ref(72, 1)), $mul.ref(46, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_doorbell_it, $mul.ref(0, 584)), $mul.ref(72, 1)), $mul.ref(47, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_doorbell_it, $mul.ref(0, 584)), $mul.ref(72, 1)), $mul.ref(48, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_doorbell_it, $mul.ref(0, 584)), $mul.ref(72, 1)), $mul.ref(49, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_doorbell_it, $mul.ref(0, 584)), $mul.ref(72, 1)), $mul.ref(50, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_doorbell_it, $mul.ref(0, 584)), $mul.ref(72, 1)), $mul.ref(51, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_doorbell_it, $mul.ref(0, 584)), $mul.ref(72, 1)), $mul.ref(52, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_doorbell_it, $mul.ref(0, 584)), $mul.ref(72, 1)), $mul.ref(53, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_doorbell_it, $mul.ref(0, 584)), $mul.ref(72, 1)), $mul.ref(54, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_doorbell_it, $mul.ref(0, 584)), $mul.ref(72, 1)), $mul.ref(55, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_doorbell_it, $mul.ref(0, 584)), $mul.ref(72, 1)), $mul.ref(56, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_doorbell_it, $mul.ref(0, 584)), $mul.ref(72, 1)), $mul.ref(57, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_doorbell_it, $mul.ref(0, 584)), $mul.ref(72, 1)), $mul.ref(58, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_doorbell_it, $mul.ref(0, 584)), $mul.ref(72, 1)), $mul.ref(59, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_doorbell_it, $mul.ref(0, 584)), $mul.ref(72, 1)), $mul.ref(60, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_doorbell_it, $mul.ref(0, 584)), $mul.ref(72, 1)), $mul.ref(61, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_doorbell_it, $mul.ref(0, 584)), $mul.ref(72, 1)), $mul.ref(62, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(vmci_doorbell_it, $mul.ref(0, 584)), $mul.ref(72, 1)), $mul.ref(63, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i32($M.0, VMCI_ANON_SRC_HANDLE, $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref(VMCI_ANON_SRC_HANDLE, $mul.ref(0, 8)), $mul.ref(4, 1)), $sub.i32(0, 1));
    $M.240 := $store.i8($M.240, __kstrtab_vmci_datagram_send, 118);
    $M.240 := $store.i8($M.240, $add.ref($add.ref(__kstrtab_vmci_datagram_send, $mul.ref(0, 19)), $mul.ref(1, 1)), 109);
    $M.240 := $store.i8($M.240, $add.ref($add.ref(__kstrtab_vmci_datagram_send, $mul.ref(0, 19)), $mul.ref(2, 1)), 99);
    $M.240 := $store.i8($M.240, $add.ref($add.ref(__kstrtab_vmci_datagram_send, $mul.ref(0, 19)), $mul.ref(3, 1)), 105);
    $M.240 := $store.i8($M.240, $add.ref($add.ref(__kstrtab_vmci_datagram_send, $mul.ref(0, 19)), $mul.ref(4, 1)), 95);
    $M.240 := $store.i8($M.240, $add.ref($add.ref(__kstrtab_vmci_datagram_send, $mul.ref(0, 19)), $mul.ref(5, 1)), 100);
    $M.240 := $store.i8($M.240, $add.ref($add.ref(__kstrtab_vmci_datagram_send, $mul.ref(0, 19)), $mul.ref(6, 1)), 97);
    $M.240 := $store.i8($M.240, $add.ref($add.ref(__kstrtab_vmci_datagram_send, $mul.ref(0, 19)), $mul.ref(7, 1)), 116);
    $M.240 := $store.i8($M.240, $add.ref($add.ref(__kstrtab_vmci_datagram_send, $mul.ref(0, 19)), $mul.ref(8, 1)), 97);
    $M.240 := $store.i8($M.240, $add.ref($add.ref(__kstrtab_vmci_datagram_send, $mul.ref(0, 19)), $mul.ref(9, 1)), 103);
    $M.240 := $store.i8($M.240, $add.ref($add.ref(__kstrtab_vmci_datagram_send, $mul.ref(0, 19)), $mul.ref(10, 1)), 114);
    $M.240 := $store.i8($M.240, $add.ref($add.ref(__kstrtab_vmci_datagram_send, $mul.ref(0, 19)), $mul.ref(11, 1)), 97);
    $M.240 := $store.i8($M.240, $add.ref($add.ref(__kstrtab_vmci_datagram_send, $mul.ref(0, 19)), $mul.ref(12, 1)), 109);
    $M.240 := $store.i8($M.240, $add.ref($add.ref(__kstrtab_vmci_datagram_send, $mul.ref(0, 19)), $mul.ref(13, 1)), 95);
    $M.240 := $store.i8($M.240, $add.ref($add.ref(__kstrtab_vmci_datagram_send, $mul.ref(0, 19)), $mul.ref(14, 1)), 115);
    $M.240 := $store.i8($M.240, $add.ref($add.ref(__kstrtab_vmci_datagram_send, $mul.ref(0, 19)), $mul.ref(15, 1)), 101);
    $M.240 := $store.i8($M.240, $add.ref($add.ref(__kstrtab_vmci_datagram_send, $mul.ref(0, 19)), $mul.ref(16, 1)), 110);
    $M.240 := $store.i8($M.240, $add.ref($add.ref(__kstrtab_vmci_datagram_send, $mul.ref(0, 19)), $mul.ref(17, 1)), 100);
    $M.240 := $store.i8($M.240, $add.ref($add.ref(__kstrtab_vmci_datagram_send, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.241 := $store.i8($M.241, __kstrtab_vmci_datagram_destroy_handle, 118);
    $M.241 := $store.i8($M.241, $add.ref($add.ref(__kstrtab_vmci_datagram_destroy_handle, $mul.ref(0, 29)), $mul.ref(1, 1)), 109);
    $M.241 := $store.i8($M.241, $add.ref($add.ref(__kstrtab_vmci_datagram_destroy_handle, $mul.ref(0, 29)), $mul.ref(2, 1)), 99);
    $M.241 := $store.i8($M.241, $add.ref($add.ref(__kstrtab_vmci_datagram_destroy_handle, $mul.ref(0, 29)), $mul.ref(3, 1)), 105);
    $M.241 := $store.i8($M.241, $add.ref($add.ref(__kstrtab_vmci_datagram_destroy_handle, $mul.ref(0, 29)), $mul.ref(4, 1)), 95);
    $M.241 := $store.i8($M.241, $add.ref($add.ref(__kstrtab_vmci_datagram_destroy_handle, $mul.ref(0, 29)), $mul.ref(5, 1)), 100);
    $M.241 := $store.i8($M.241, $add.ref($add.ref(__kstrtab_vmci_datagram_destroy_handle, $mul.ref(0, 29)), $mul.ref(6, 1)), 97);
    $M.241 := $store.i8($M.241, $add.ref($add.ref(__kstrtab_vmci_datagram_destroy_handle, $mul.ref(0, 29)), $mul.ref(7, 1)), 116);
    $M.241 := $store.i8($M.241, $add.ref($add.ref(__kstrtab_vmci_datagram_destroy_handle, $mul.ref(0, 29)), $mul.ref(8, 1)), 97);
    $M.241 := $store.i8($M.241, $add.ref($add.ref(__kstrtab_vmci_datagram_destroy_handle, $mul.ref(0, 29)), $mul.ref(9, 1)), 103);
    $M.241 := $store.i8($M.241, $add.ref($add.ref(__kstrtab_vmci_datagram_destroy_handle, $mul.ref(0, 29)), $mul.ref(10, 1)), 114);
    $M.241 := $store.i8($M.241, $add.ref($add.ref(__kstrtab_vmci_datagram_destroy_handle, $mul.ref(0, 29)), $mul.ref(11, 1)), 97);
    $M.241 := $store.i8($M.241, $add.ref($add.ref(__kstrtab_vmci_datagram_destroy_handle, $mul.ref(0, 29)), $mul.ref(12, 1)), 109);
    $M.241 := $store.i8($M.241, $add.ref($add.ref(__kstrtab_vmci_datagram_destroy_handle, $mul.ref(0, 29)), $mul.ref(13, 1)), 95);
    $M.241 := $store.i8($M.241, $add.ref($add.ref(__kstrtab_vmci_datagram_destroy_handle, $mul.ref(0, 29)), $mul.ref(14, 1)), 100);
    $M.241 := $store.i8($M.241, $add.ref($add.ref(__kstrtab_vmci_datagram_destroy_handle, $mul.ref(0, 29)), $mul.ref(15, 1)), 101);
    $M.241 := $store.i8($M.241, $add.ref($add.ref(__kstrtab_vmci_datagram_destroy_handle, $mul.ref(0, 29)), $mul.ref(16, 1)), 115);
    $M.241 := $store.i8($M.241, $add.ref($add.ref(__kstrtab_vmci_datagram_destroy_handle, $mul.ref(0, 29)), $mul.ref(17, 1)), 116);
    $M.241 := $store.i8($M.241, $add.ref($add.ref(__kstrtab_vmci_datagram_destroy_handle, $mul.ref(0, 29)), $mul.ref(18, 1)), 114);
    $M.241 := $store.i8($M.241, $add.ref($add.ref(__kstrtab_vmci_datagram_destroy_handle, $mul.ref(0, 29)), $mul.ref(19, 1)), 111);
    $M.241 := $store.i8($M.241, $add.ref($add.ref(__kstrtab_vmci_datagram_destroy_handle, $mul.ref(0, 29)), $mul.ref(20, 1)), 121);
    $M.241 := $store.i8($M.241, $add.ref($add.ref(__kstrtab_vmci_datagram_destroy_handle, $mul.ref(0, 29)), $mul.ref(21, 1)), 95);
    $M.241 := $store.i8($M.241, $add.ref($add.ref(__kstrtab_vmci_datagram_destroy_handle, $mul.ref(0, 29)), $mul.ref(22, 1)), 104);
    $M.241 := $store.i8($M.241, $add.ref($add.ref(__kstrtab_vmci_datagram_destroy_handle, $mul.ref(0, 29)), $mul.ref(23, 1)), 97);
    $M.241 := $store.i8($M.241, $add.ref($add.ref(__kstrtab_vmci_datagram_destroy_handle, $mul.ref(0, 29)), $mul.ref(24, 1)), 110);
    $M.241 := $store.i8($M.241, $add.ref($add.ref(__kstrtab_vmci_datagram_destroy_handle, $mul.ref(0, 29)), $mul.ref(25, 1)), 100);
    $M.241 := $store.i8($M.241, $add.ref($add.ref(__kstrtab_vmci_datagram_destroy_handle, $mul.ref(0, 29)), $mul.ref(26, 1)), 108);
    $M.241 := $store.i8($M.241, $add.ref($add.ref(__kstrtab_vmci_datagram_destroy_handle, $mul.ref(0, 29)), $mul.ref(27, 1)), 101);
    $M.241 := $store.i8($M.241, $add.ref($add.ref(__kstrtab_vmci_datagram_destroy_handle, $mul.ref(0, 29)), $mul.ref(28, 1)), 0);
    $M.242 := $store.i8($M.242, __kstrtab_vmci_datagram_create_handle, 118);
    $M.242 := $store.i8($M.242, $add.ref($add.ref(__kstrtab_vmci_datagram_create_handle, $mul.ref(0, 28)), $mul.ref(1, 1)), 109);
    $M.242 := $store.i8($M.242, $add.ref($add.ref(__kstrtab_vmci_datagram_create_handle, $mul.ref(0, 28)), $mul.ref(2, 1)), 99);
    $M.242 := $store.i8($M.242, $add.ref($add.ref(__kstrtab_vmci_datagram_create_handle, $mul.ref(0, 28)), $mul.ref(3, 1)), 105);
    $M.242 := $store.i8($M.242, $add.ref($add.ref(__kstrtab_vmci_datagram_create_handle, $mul.ref(0, 28)), $mul.ref(4, 1)), 95);
    $M.242 := $store.i8($M.242, $add.ref($add.ref(__kstrtab_vmci_datagram_create_handle, $mul.ref(0, 28)), $mul.ref(5, 1)), 100);
    $M.242 := $store.i8($M.242, $add.ref($add.ref(__kstrtab_vmci_datagram_create_handle, $mul.ref(0, 28)), $mul.ref(6, 1)), 97);
    $M.242 := $store.i8($M.242, $add.ref($add.ref(__kstrtab_vmci_datagram_create_handle, $mul.ref(0, 28)), $mul.ref(7, 1)), 116);
    $M.242 := $store.i8($M.242, $add.ref($add.ref(__kstrtab_vmci_datagram_create_handle, $mul.ref(0, 28)), $mul.ref(8, 1)), 97);
    $M.242 := $store.i8($M.242, $add.ref($add.ref(__kstrtab_vmci_datagram_create_handle, $mul.ref(0, 28)), $mul.ref(9, 1)), 103);
    $M.242 := $store.i8($M.242, $add.ref($add.ref(__kstrtab_vmci_datagram_create_handle, $mul.ref(0, 28)), $mul.ref(10, 1)), 114);
    $M.242 := $store.i8($M.242, $add.ref($add.ref(__kstrtab_vmci_datagram_create_handle, $mul.ref(0, 28)), $mul.ref(11, 1)), 97);
    $M.242 := $store.i8($M.242, $add.ref($add.ref(__kstrtab_vmci_datagram_create_handle, $mul.ref(0, 28)), $mul.ref(12, 1)), 109);
    $M.242 := $store.i8($M.242, $add.ref($add.ref(__kstrtab_vmci_datagram_create_handle, $mul.ref(0, 28)), $mul.ref(13, 1)), 95);
    $M.242 := $store.i8($M.242, $add.ref($add.ref(__kstrtab_vmci_datagram_create_handle, $mul.ref(0, 28)), $mul.ref(14, 1)), 99);
    $M.242 := $store.i8($M.242, $add.ref($add.ref(__kstrtab_vmci_datagram_create_handle, $mul.ref(0, 28)), $mul.ref(15, 1)), 114);
    $M.242 := $store.i8($M.242, $add.ref($add.ref(__kstrtab_vmci_datagram_create_handle, $mul.ref(0, 28)), $mul.ref(16, 1)), 101);
    $M.242 := $store.i8($M.242, $add.ref($add.ref(__kstrtab_vmci_datagram_create_handle, $mul.ref(0, 28)), $mul.ref(17, 1)), 97);
    $M.242 := $store.i8($M.242, $add.ref($add.ref(__kstrtab_vmci_datagram_create_handle, $mul.ref(0, 28)), $mul.ref(18, 1)), 116);
    $M.242 := $store.i8($M.242, $add.ref($add.ref(__kstrtab_vmci_datagram_create_handle, $mul.ref(0, 28)), $mul.ref(19, 1)), 101);
    $M.242 := $store.i8($M.242, $add.ref($add.ref(__kstrtab_vmci_datagram_create_handle, $mul.ref(0, 28)), $mul.ref(20, 1)), 95);
    $M.242 := $store.i8($M.242, $add.ref($add.ref(__kstrtab_vmci_datagram_create_handle, $mul.ref(0, 28)), $mul.ref(21, 1)), 104);
    $M.242 := $store.i8($M.242, $add.ref($add.ref(__kstrtab_vmci_datagram_create_handle, $mul.ref(0, 28)), $mul.ref(22, 1)), 97);
    $M.242 := $store.i8($M.242, $add.ref($add.ref(__kstrtab_vmci_datagram_create_handle, $mul.ref(0, 28)), $mul.ref(23, 1)), 110);
    $M.242 := $store.i8($M.242, $add.ref($add.ref(__kstrtab_vmci_datagram_create_handle, $mul.ref(0, 28)), $mul.ref(24, 1)), 100);
    $M.242 := $store.i8($M.242, $add.ref($add.ref(__kstrtab_vmci_datagram_create_handle, $mul.ref(0, 28)), $mul.ref(25, 1)), 108);
    $M.242 := $store.i8($M.242, $add.ref($add.ref(__kstrtab_vmci_datagram_create_handle, $mul.ref(0, 28)), $mul.ref(26, 1)), 101);
    $M.242 := $store.i8($M.242, $add.ref($add.ref(__kstrtab_vmci_datagram_create_handle, $mul.ref(0, 28)), $mul.ref(27, 1)), 0);
    $M.243 := $store.i8($M.243, __kstrtab_vmci_datagram_create_handle_priv, 118);
    $M.243 := $store.i8($M.243, $add.ref($add.ref(__kstrtab_vmci_datagram_create_handle_priv, $mul.ref(0, 33)), $mul.ref(1, 1)), 109);
    $M.243 := $store.i8($M.243, $add.ref($add.ref(__kstrtab_vmci_datagram_create_handle_priv, $mul.ref(0, 33)), $mul.ref(2, 1)), 99);
    $M.243 := $store.i8($M.243, $add.ref($add.ref(__kstrtab_vmci_datagram_create_handle_priv, $mul.ref(0, 33)), $mul.ref(3, 1)), 105);
    $M.243 := $store.i8($M.243, $add.ref($add.ref(__kstrtab_vmci_datagram_create_handle_priv, $mul.ref(0, 33)), $mul.ref(4, 1)), 95);
    $M.243 := $store.i8($M.243, $add.ref($add.ref(__kstrtab_vmci_datagram_create_handle_priv, $mul.ref(0, 33)), $mul.ref(5, 1)), 100);
    $M.243 := $store.i8($M.243, $add.ref($add.ref(__kstrtab_vmci_datagram_create_handle_priv, $mul.ref(0, 33)), $mul.ref(6, 1)), 97);
    $M.243 := $store.i8($M.243, $add.ref($add.ref(__kstrtab_vmci_datagram_create_handle_priv, $mul.ref(0, 33)), $mul.ref(7, 1)), 116);
    $M.243 := $store.i8($M.243, $add.ref($add.ref(__kstrtab_vmci_datagram_create_handle_priv, $mul.ref(0, 33)), $mul.ref(8, 1)), 97);
    $M.243 := $store.i8($M.243, $add.ref($add.ref(__kstrtab_vmci_datagram_create_handle_priv, $mul.ref(0, 33)), $mul.ref(9, 1)), 103);
    $M.243 := $store.i8($M.243, $add.ref($add.ref(__kstrtab_vmci_datagram_create_handle_priv, $mul.ref(0, 33)), $mul.ref(10, 1)), 114);
    $M.243 := $store.i8($M.243, $add.ref($add.ref(__kstrtab_vmci_datagram_create_handle_priv, $mul.ref(0, 33)), $mul.ref(11, 1)), 97);
    $M.243 := $store.i8($M.243, $add.ref($add.ref(__kstrtab_vmci_datagram_create_handle_priv, $mul.ref(0, 33)), $mul.ref(12, 1)), 109);
    $M.243 := $store.i8($M.243, $add.ref($add.ref(__kstrtab_vmci_datagram_create_handle_priv, $mul.ref(0, 33)), $mul.ref(13, 1)), 95);
    $M.243 := $store.i8($M.243, $add.ref($add.ref(__kstrtab_vmci_datagram_create_handle_priv, $mul.ref(0, 33)), $mul.ref(14, 1)), 99);
    $M.243 := $store.i8($M.243, $add.ref($add.ref(__kstrtab_vmci_datagram_create_handle_priv, $mul.ref(0, 33)), $mul.ref(15, 1)), 114);
    $M.243 := $store.i8($M.243, $add.ref($add.ref(__kstrtab_vmci_datagram_create_handle_priv, $mul.ref(0, 33)), $mul.ref(16, 1)), 101);
    $M.243 := $store.i8($M.243, $add.ref($add.ref(__kstrtab_vmci_datagram_create_handle_priv, $mul.ref(0, 33)), $mul.ref(17, 1)), 97);
    $M.243 := $store.i8($M.243, $add.ref($add.ref(__kstrtab_vmci_datagram_create_handle_priv, $mul.ref(0, 33)), $mul.ref(18, 1)), 116);
    $M.243 := $store.i8($M.243, $add.ref($add.ref(__kstrtab_vmci_datagram_create_handle_priv, $mul.ref(0, 33)), $mul.ref(19, 1)), 101);
    $M.243 := $store.i8($M.243, $add.ref($add.ref(__kstrtab_vmci_datagram_create_handle_priv, $mul.ref(0, 33)), $mul.ref(20, 1)), 95);
    $M.243 := $store.i8($M.243, $add.ref($add.ref(__kstrtab_vmci_datagram_create_handle_priv, $mul.ref(0, 33)), $mul.ref(21, 1)), 104);
    $M.243 := $store.i8($M.243, $add.ref($add.ref(__kstrtab_vmci_datagram_create_handle_priv, $mul.ref(0, 33)), $mul.ref(22, 1)), 97);
    $M.243 := $store.i8($M.243, $add.ref($add.ref(__kstrtab_vmci_datagram_create_handle_priv, $mul.ref(0, 33)), $mul.ref(23, 1)), 110);
    $M.243 := $store.i8($M.243, $add.ref($add.ref(__kstrtab_vmci_datagram_create_handle_priv, $mul.ref(0, 33)), $mul.ref(24, 1)), 100);
    $M.243 := $store.i8($M.243, $add.ref($add.ref(__kstrtab_vmci_datagram_create_handle_priv, $mul.ref(0, 33)), $mul.ref(25, 1)), 108);
    $M.243 := $store.i8($M.243, $add.ref($add.ref(__kstrtab_vmci_datagram_create_handle_priv, $mul.ref(0, 33)), $mul.ref(26, 1)), 101);
    $M.243 := $store.i8($M.243, $add.ref($add.ref(__kstrtab_vmci_datagram_create_handle_priv, $mul.ref(0, 33)), $mul.ref(27, 1)), 95);
    $M.243 := $store.i8($M.243, $add.ref($add.ref(__kstrtab_vmci_datagram_create_handle_priv, $mul.ref(0, 33)), $mul.ref(28, 1)), 112);
    $M.243 := $store.i8($M.243, $add.ref($add.ref(__kstrtab_vmci_datagram_create_handle_priv, $mul.ref(0, 33)), $mul.ref(29, 1)), 114);
    $M.243 := $store.i8($M.243, $add.ref($add.ref(__kstrtab_vmci_datagram_create_handle_priv, $mul.ref(0, 33)), $mul.ref(30, 1)), 105);
    $M.243 := $store.i8($M.243, $add.ref($add.ref(__kstrtab_vmci_datagram_create_handle_priv, $mul.ref(0, 33)), $mul.ref(31, 1)), 118);
    $M.243 := $store.i8($M.243, $add.ref($add.ref(__kstrtab_vmci_datagram_create_handle_priv, $mul.ref(0, 33)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, delayed_dg_host_queue_size, 0);
    $M.244 := $store.i8($M.244, __kstrtab_vmci_is_context_owner, 118);
    $M.244 := $store.i8($M.244, $add.ref($add.ref(__kstrtab_vmci_is_context_owner, $mul.ref(0, 22)), $mul.ref(1, 1)), 109);
    $M.244 := $store.i8($M.244, $add.ref($add.ref(__kstrtab_vmci_is_context_owner, $mul.ref(0, 22)), $mul.ref(2, 1)), 99);
    $M.244 := $store.i8($M.244, $add.ref($add.ref(__kstrtab_vmci_is_context_owner, $mul.ref(0, 22)), $mul.ref(3, 1)), 105);
    $M.244 := $store.i8($M.244, $add.ref($add.ref(__kstrtab_vmci_is_context_owner, $mul.ref(0, 22)), $mul.ref(4, 1)), 95);
    $M.244 := $store.i8($M.244, $add.ref($add.ref(__kstrtab_vmci_is_context_owner, $mul.ref(0, 22)), $mul.ref(5, 1)), 105);
    $M.244 := $store.i8($M.244, $add.ref($add.ref(__kstrtab_vmci_is_context_owner, $mul.ref(0, 22)), $mul.ref(6, 1)), 115);
    $M.244 := $store.i8($M.244, $add.ref($add.ref(__kstrtab_vmci_is_context_owner, $mul.ref(0, 22)), $mul.ref(7, 1)), 95);
    $M.244 := $store.i8($M.244, $add.ref($add.ref(__kstrtab_vmci_is_context_owner, $mul.ref(0, 22)), $mul.ref(8, 1)), 99);
    $M.244 := $store.i8($M.244, $add.ref($add.ref(__kstrtab_vmci_is_context_owner, $mul.ref(0, 22)), $mul.ref(9, 1)), 111);
    $M.244 := $store.i8($M.244, $add.ref($add.ref(__kstrtab_vmci_is_context_owner, $mul.ref(0, 22)), $mul.ref(10, 1)), 110);
    $M.244 := $store.i8($M.244, $add.ref($add.ref(__kstrtab_vmci_is_context_owner, $mul.ref(0, 22)), $mul.ref(11, 1)), 116);
    $M.244 := $store.i8($M.244, $add.ref($add.ref(__kstrtab_vmci_is_context_owner, $mul.ref(0, 22)), $mul.ref(12, 1)), 101);
    $M.244 := $store.i8($M.244, $add.ref($add.ref(__kstrtab_vmci_is_context_owner, $mul.ref(0, 22)), $mul.ref(13, 1)), 120);
    $M.244 := $store.i8($M.244, $add.ref($add.ref(__kstrtab_vmci_is_context_owner, $mul.ref(0, 22)), $mul.ref(14, 1)), 116);
    $M.244 := $store.i8($M.244, $add.ref($add.ref(__kstrtab_vmci_is_context_owner, $mul.ref(0, 22)), $mul.ref(15, 1)), 95);
    $M.244 := $store.i8($M.244, $add.ref($add.ref(__kstrtab_vmci_is_context_owner, $mul.ref(0, 22)), $mul.ref(16, 1)), 111);
    $M.244 := $store.i8($M.244, $add.ref($add.ref(__kstrtab_vmci_is_context_owner, $mul.ref(0, 22)), $mul.ref(17, 1)), 119);
    $M.244 := $store.i8($M.244, $add.ref($add.ref(__kstrtab_vmci_is_context_owner, $mul.ref(0, 22)), $mul.ref(18, 1)), 110);
    $M.244 := $store.i8($M.244, $add.ref($add.ref(__kstrtab_vmci_is_context_owner, $mul.ref(0, 22)), $mul.ref(19, 1)), 101);
    $M.244 := $store.i8($M.244, $add.ref($add.ref(__kstrtab_vmci_is_context_owner, $mul.ref(0, 22)), $mul.ref(20, 1)), 114);
    $M.244 := $store.i8($M.244, $add.ref($add.ref(__kstrtab_vmci_is_context_owner, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.4 := $store.i32($M.4, VMCI_INVALID_HANDLE, $sub.i32(0, 1));
    $M.4 := $store.i32($M.4, $add.ref($add.ref(VMCI_INVALID_HANDLE, $mul.ref(0, 8)), $mul.ref(4, 1)), $sub.i32(0, 1));
    $M.0 := $store.ref($M.0, ctx_list, ctx_list);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ctx_list, $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(8, 1)), ctx_list);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(ctx_list, $mul.ref(0, 88)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(ctx_list, $mul.ref(0, 88)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(ctx_list, $mul.ref(0, 88)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(ctx_list, $mul.ref(0, 88)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(ctx_list, $mul.ref(0, 88)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(ctx_list, $mul.ref(0, 88)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(ctx_list, $mul.ref(0, 88)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(ctx_list, $mul.ref(0, 88)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.58);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(ctx_list, $mul.ref(0, 88)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(ctx_list, $mul.ref(0, 88)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.160 := 0;
    call {:si_unique_call 2213} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.1 := 0;
    call {:si_unique_call 2214} {:cexpr "vmci_host_device_initialized"} boogie_si_record_i8(0);
    $M.170 := $0.ref;
    $M.162 := 0;
    call {:si_unique_call 2215} {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
    $M.245 := $store.i32($M.245, __mod_pci__vmci_ids_device_table, 0);
    $M.246 := $store.i32($M.246, $add.ref($add.ref($add.ref(__mod_pci__vmci_ids_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(4, 1)), 0);
    $M.247 := $store.i32($M.247, $add.ref($add.ref($add.ref(__mod_pci__vmci_ids_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(8, 1)), 0);
    $M.248 := $store.i32($M.248, $add.ref($add.ref($add.ref(__mod_pci__vmci_ids_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(12, 1)), 0);
    $M.249 := $store.i32($M.249, $add.ref($add.ref($add.ref(__mod_pci__vmci_ids_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.250 := $store.i32($M.250, $add.ref($add.ref($add.ref(__mod_pci__vmci_ids_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(20, 1)), 0);
    $M.251 := $store.i64($M.251, $add.ref($add.ref($add.ref(__mod_pci__vmci_ids_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.245 := $store.i32($M.245, $add.ref($add.ref($add.ref(__mod_pci__vmci_ids_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), 0);
    $M.246 := $store.i32($M.246, $add.ref($add.ref($add.ref(__mod_pci__vmci_ids_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(4, 1)), 0);
    $M.247 := $store.i32($M.247, $add.ref($add.ref($add.ref(__mod_pci__vmci_ids_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(8, 1)), 0);
    $M.248 := $store.i32($M.248, $add.ref($add.ref($add.ref(__mod_pci__vmci_ids_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(12, 1)), 0);
    $M.249 := $store.i32($M.249, $add.ref($add.ref($add.ref(__mod_pci__vmci_ids_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.250 := $store.i32($M.250, $add.ref($add.ref($add.ref(__mod_pci__vmci_ids_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(20, 1)), 0);
    $M.251 := $store.i64($M.251, $add.ref($add.ref($add.ref(__mod_pci__vmci_ids_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.31 := $0.ref;
    $M.87 := $0.ref;
    $M.0 := $store.ref($M.0, subscriber_array, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(subscriber_array, $mul.ref(0, 112)), $mul.ref(0, 16)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(subscriber_array, $mul.ref(0, 112)), $mul.ref(1, 16)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(subscriber_array, $mul.ref(0, 112)), $mul.ref(1, 16)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(subscriber_array, $mul.ref(0, 112)), $mul.ref(2, 16)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(subscriber_array, $mul.ref(0, 112)), $mul.ref(2, 16)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(subscriber_array, $mul.ref(0, 112)), $mul.ref(3, 16)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(subscriber_array, $mul.ref(0, 112)), $mul.ref(3, 16)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(subscriber_array, $mul.ref(0, 112)), $mul.ref(4, 16)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(subscriber_array, $mul.ref(0, 112)), $mul.ref(4, 16)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(subscriber_array, $mul.ref(0, 112)), $mul.ref(5, 16)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(subscriber_array, $mul.ref(0, 112)), $mul.ref(5, 16)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(subscriber_array, $mul.ref(0, 112)), $mul.ref(6, 16)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(subscriber_array, $mul.ref(0, 112)), $mul.ref(6, 16)), $mul.ref(8, 1)), $0.ref);
    $M.157 := 0;
    call {:si_unique_call 2216} {:cexpr "ldv_retval_2"} boogie_si_record_i32(0);
    call {:si_unique_call 2217} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    call {:si_unique_call 2218} {:cexpr "ldv_irq_line_1_0"} boogie_si_record_i32(0);
    call {:si_unique_call 2219} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    call {:si_unique_call 2220} {:cexpr "ldv_irq_line_1_3"} boogie_si_record_i32(0);
    $M.161 := $0.ref;
    call {:si_unique_call 2221} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.111 := 0;
    call {:si_unique_call 2222} {:cexpr "ldv_irq_line_2_1"} boogie_si_record_i32(0);
    $M.148 := 0;
    call {:si_unique_call 2223} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    $M.113 := 0;
    call {:si_unique_call 2224} {:cexpr "ldv_irq_line_2_2"} boogie_si_record_i32(0);
    $M.115 := 0;
    call {:si_unique_call 2225} {:cexpr "ldv_irq_line_2_3"} boogie_si_record_i32(0);
    $M.158 := $0.ref;
    call {:si_unique_call 2226} {:cexpr "ldv_irq_line_1_2"} boogie_si_record_i32(0);
    $M.150 := 0;
    call {:si_unique_call 2227} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    call {:si_unique_call 2228} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    call {:si_unique_call 2229} {:cexpr "ldv_irq_line_1_1"} boogie_si_record_i32(0);
    $M.154 := 0;
    call {:si_unique_call 2230} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.109 := 0;
    call {:si_unique_call 2231} {:cexpr "ldv_irq_line_2_0"} boogie_si_record_i32(0);
    $M.159 := $0.ref;
    call {:si_unique_call 2232} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    $M.155 := 0;
    call {:si_unique_call 2233} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    call {:si_unique_call 2234} {:cexpr "pci_counter"} boogie_si_record_i32(0);
    call {:si_unique_call 2235} {:cexpr "max_notify_idx"} boogie_si_record_i32(0);
    call {:si_unique_call 2236} {:cexpr "ldv_work_5_2"} boogie_si_record_i32(0);
    call {:si_unique_call 2237} {:cexpr "ldv_work_5_1"} boogie_si_record_i32(0);
    call {:si_unique_call 2238} {:cexpr "ldv_work_5_0"} boogie_si_record_i32(0);
    call {:si_unique_call 2239} {:cexpr "ldv_work_5_3"} boogie_si_record_i32(0);
    call {:si_unique_call 2240} {:cexpr "ldv_work_4_2"} boogie_si_record_i32(0);
    $M.38 := 0;
    call {:si_unique_call 2241} {:cexpr "ldv_work_3_1"} boogie_si_record_i32(0);
    call {:si_unique_call 2242} {:cexpr "ldv_work_4_3"} boogie_si_record_i32(0);
    call {:si_unique_call 2243} {:cexpr "ldv_work_4_1"} boogie_si_record_i32(0);
    call {:si_unique_call 2244} {:cexpr "ldv_work_4_0"} boogie_si_record_i32(0);
    $M.42 := 0;
    call {:si_unique_call 2245} {:cexpr "ldv_work_3_3"} boogie_si_record_i32(0);
    $M.36 := 0;
    call {:si_unique_call 2246} {:cexpr "ldv_work_3_0"} boogie_si_record_i32(0);
    $M.40 := 0;
    call {:si_unique_call 2247} {:cexpr "ldv_work_3_2"} boogie_si_record_i32(0);
    $M.0 := $store.i8($M.0, ctx_dummy_notify, 0);
    call {:si_unique_call 2248} {:cexpr "ctx_dummy_notify"} boogie_si_record_i8(0);
    $M.0 := $store.i8($M.0, .str.37, 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 21)), $mul.ref(1, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 21)), $mul.ref(2, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 21)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 21)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 21)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 21)), $mul.ref(6, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 21)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 21)), $mul.ref(8, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 21)), $mul.ref(9, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 21)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 21)), $mul.ref(11, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 21)), $mul.ref(12, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 21)), $mul.ref(13, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 21)), $mul.ref(14, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 21)), $mul.ref(15, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 21)), $mul.ref(16, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 21)), $mul.ref(17, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 21)), $mul.ref(18, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 21)), $mul.ref(19, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, .str.58, 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 14)), $mul.ref(1, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 14)), $mul.ref(2, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 14)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 14)), $mul.ref(4, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 14)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 14)), $mul.ref(6, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 14)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 14)), $mul.ref(8, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 14)), $mul.ref(9, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 14)), $mul.ref(10, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 14)), $mul.ref(11, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 14)), $mul.ref(12, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, .str.69, 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 22)), $mul.ref(1, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 22)), $mul.ref(2, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 22)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 22)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 22)), $mul.ref(5, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 22)), $mul.ref(6, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 22)), $mul.ref(7, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 22)), $mul.ref(8, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 22)), $mul.ref(9, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 22)), $mul.ref(10, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 22)), $mul.ref(11, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 22)), $mul.ref(12, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 22)), $mul.ref(13, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 22)), $mul.ref(14, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 22)), $mul.ref(15, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 22)), $mul.ref(16, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 22)), $mul.ref(17, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 22)), $mul.ref(18, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 22)), $mul.ref(19, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 22)), $mul.ref(20, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, .str.77, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 27)), $mul.ref(1, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 27)), $mul.ref(2, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 27)), $mul.ref(3, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 27)), $mul.ref(4, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 27)), $mul.ref(5, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 27)), $mul.ref(6, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 27)), $mul.ref(7, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 27)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 27)), $mul.ref(9, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 27)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 27)), $mul.ref(11, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 27)), $mul.ref(12, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 27)), $mul.ref(13, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 27)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 27)), $mul.ref(15, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 27)), $mul.ref(16, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 27)), $mul.ref(17, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 27)), $mul.ref(18, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 27)), $mul.ref(19, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 27)), $mul.ref(20, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 27)), $mul.ref(21, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 27)), $mul.ref(22, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 27)), $mul.ref(23, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 27)), $mul.ref(24, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 27)), $mul.ref(25, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.77, $mul.ref(0, 27)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, .str.78, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 17)), $mul.ref(1, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 17)), $mul.ref(2, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 17)), $mul.ref(3, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 17)), $mul.ref(4, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 17)), $mul.ref(5, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 17)), $mul.ref(6, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 17)), $mul.ref(7, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 17)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 17)), $mul.ref(9, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 17)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 17)), $mul.ref(11, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 17)), $mul.ref(12, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 17)), $mul.ref(13, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 17)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 17)), $mul.ref(15, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, .str.79, 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 18)), $mul.ref(1, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 18)), $mul.ref(2, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 18)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 18)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 18)), $mul.ref(5, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 18)), $mul.ref(6, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 18)), $mul.ref(7, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 18)), $mul.ref(8, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 18)), $mul.ref(9, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 18)), $mul.ref(10, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 18)), $mul.ref(11, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 18)), $mul.ref(12, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 18)), $mul.ref(13, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 18)), $mul.ref(14, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 18)), $mul.ref(15, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 18)), $mul.ref(16, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.321 := $store.i8($M.321, .str.115, 40);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.115, $mul.ref(0, 85)), $mul.ref(1, 1)), 40);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.115, $mul.ref(0, 85)), $mul.ref(2, 1)), 40);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.115, $mul.ref(0, 85)), $mul.ref(3, 1)), 48);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.115, $mul.ref(0, 85)), $mul.ref(4, 1)), 85);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.115, $mul.ref(0, 85)), $mul.ref(5, 1)), 41);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.115, $mul.ref(0, 85)), $mul.ref(6, 1)), 32);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.115, $mul.ref(0, 85)), $mul.ref(7, 1)), 60);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.115, $mul.ref(0, 85)), $mul.ref(8, 1)), 60);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.115, $mul.ref(0, 85)), $mul.ref(9, 1)), 32);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.115, $mul.ref(0, 85)), $mul.ref(10, 1)), 40);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.115, $mul.ref(0, 85)), $mul.ref(11, 1)), 40);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.115, $mul.ref(0, 85)), $mul.ref(12, 1)), 40);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.115, $mul.ref(0, 85)), $mul.ref(13, 1)), 48);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.115, $mul.ref(0, 85)), $mul.ref(14, 1)), 43);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.115, $mul.ref(0, 85)), $mul.ref(15, 1)), 56);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.115, $mul.ref(0, 85)), $mul.ref(16, 1)), 41);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.115, $mul.ref(0, 85)), $mul.ref(17, 1)), 43);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.115, $mul.ref(0, 85)), $mul.ref(18, 1)), 56);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.115, $mul.ref(0, 85)), $mul.ref(19, 1)), 41);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.115, $mul.ref(0, 85)), $mul.ref(20, 1)), 43);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.115, $mul.ref(0, 85)), $mul.ref(21, 1)), 49);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.115, $mul.ref(0, 85)), $mul.ref(22, 1)), 52);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.115, $mul.ref(0, 85)), $mul.ref(23, 1)), 41);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.115, $mul.ref(0, 85)), $mul.ref(24, 1)), 41);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.115, $mul.ref(0, 85)), $mul.ref(25, 1)), 32);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.115, $mul.ref(0, 85)), $mul.ref(26, 1)), 124);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.115, $mul.ref(0, 85)), $mul.ref(27, 1)), 32);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.115, $mul.ref(0, 85)), $mul.ref(28, 1)), 40);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.115, $mul.ref(0, 85)), $mul.ref(29, 1)), 40);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.115, $mul.ref(0, 85)), $mul.ref(30, 1)), 40);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.115, $mul.ref(0, 85)), $mul.ref(31, 1)), 55);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.115, $mul.ref(0, 85)), $mul.ref(32, 1)), 41);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.115, $mul.ref(0, 85)), $mul.ref(33, 1)), 41);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.115, $mul.ref(0, 85)), $mul.ref(34, 1)), 32);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.115, $mul.ref(0, 85)), $mul.ref(35, 1)), 60);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.115, $mul.ref(0, 85)), $mul.ref(36, 1)), 60);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.115, $mul.ref(0, 85)), $mul.ref(37, 1)), 32);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.115, $mul.ref(0, 85)), $mul.ref(38, 1)), 40);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.115, $mul.ref(0, 85)), $mul.ref(39, 1)), 48);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.115, $mul.ref(0, 85)), $mul.ref(40, 1)), 43);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.115, $mul.ref(0, 85)), $mul.ref(41, 1)), 56);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.115, $mul.ref(0, 85)), $mul.ref(42, 1)), 41);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.115, $mul.ref(0, 85)), $mul.ref(43, 1)), 41);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.115, $mul.ref(0, 85)), $mul.ref(44, 1)), 32);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.115, $mul.ref(0, 85)), $mul.ref(45, 1)), 124);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.115, $mul.ref(0, 85)), $mul.ref(46, 1)), 32);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.115, $mul.ref(0, 85)), $mul.ref(47, 1)), 40);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.115, $mul.ref(0, 85)), $mul.ref(48, 1)), 40);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.115, $mul.ref(0, 85)), $mul.ref(49, 1)), 40);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.115, $mul.ref(0, 85)), $mul.ref(50, 1)), 48);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.115, $mul.ref(0, 85)), $mul.ref(51, 1)), 120);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.115, $mul.ref(0, 85)), $mul.ref(52, 1)), 97);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.115, $mul.ref(0, 85)), $mul.ref(53, 1)), 48);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.115, $mul.ref(0, 85)), $mul.ref(54, 1)), 41);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.115, $mul.ref(0, 85)), $mul.ref(55, 1)), 41);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.115, $mul.ref(0, 85)), $mul.ref(56, 1)), 32);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.115, $mul.ref(0, 85)), $mul.ref(57, 1)), 60);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.115, $mul.ref(0, 85)), $mul.ref(58, 1)), 60);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.115, $mul.ref(0, 85)), $mul.ref(59, 1)), 32);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.115, $mul.ref(0, 85)), $mul.ref(60, 1)), 48);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.115, $mul.ref(0, 85)), $mul.ref(61, 1)), 41);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.115, $mul.ref(0, 85)), $mul.ref(62, 1)), 32);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.115, $mul.ref(0, 85)), $mul.ref(63, 1)), 124);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.115, $mul.ref(0, 85)), $mul.ref(64, 1)), 32);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.115, $mul.ref(0, 85)), $mul.ref(65, 1)), 40);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.115, $mul.ref(0, 85)), $mul.ref(66, 1)), 40);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.115, $mul.ref(0, 85)), $mul.ref(67, 1)), 48);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.115, $mul.ref(0, 85)), $mul.ref(68, 1)), 41);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.115, $mul.ref(0, 85)), $mul.ref(69, 1)), 32);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.115, $mul.ref(0, 85)), $mul.ref(70, 1)), 60);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.115, $mul.ref(0, 85)), $mul.ref(71, 1)), 60);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.115, $mul.ref(0, 85)), $mul.ref(72, 1)), 32);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.115, $mul.ref(0, 85)), $mul.ref(73, 1)), 40);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.115, $mul.ref(0, 85)), $mul.ref(74, 1)), 40);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.115, $mul.ref(0, 85)), $mul.ref(75, 1)), 48);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.115, $mul.ref(0, 85)), $mul.ref(76, 1)), 43);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.115, $mul.ref(0, 85)), $mul.ref(77, 1)), 56);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.115, $mul.ref(0, 85)), $mul.ref(78, 1)), 41);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.115, $mul.ref(0, 85)), $mul.ref(79, 1)), 43);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.115, $mul.ref(0, 85)), $mul.ref(80, 1)), 56);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.115, $mul.ref(0, 85)), $mul.ref(81, 1)), 41);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.115, $mul.ref(0, 85)), $mul.ref(82, 1)), 41);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.115, $mul.ref(0, 85)), $mul.ref(83, 1)), 41);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.115, $mul.ref(0, 85)), $mul.ref(84, 1)), 0);
    $M.322 := $store.i8($M.322, .str.116, 40);
    $M.322 := $store.i8($M.322, $add.ref($add.ref(.str.116, $mul.ref(0, 85)), $mul.ref(1, 1)), 40);
    $M.322 := $store.i8($M.322, $add.ref($add.ref(.str.116, $mul.ref(0, 85)), $mul.ref(2, 1)), 40);
    $M.322 := $store.i8($M.322, $add.ref($add.ref(.str.116, $mul.ref(0, 85)), $mul.ref(3, 1)), 48);
    $M.322 := $store.i8($M.322, $add.ref($add.ref(.str.116, $mul.ref(0, 85)), $mul.ref(4, 1)), 85);
    $M.322 := $store.i8($M.322, $add.ref($add.ref(.str.116, $mul.ref(0, 85)), $mul.ref(5, 1)), 41);
    $M.322 := $store.i8($M.322, $add.ref($add.ref(.str.116, $mul.ref(0, 85)), $mul.ref(6, 1)), 32);
    $M.322 := $store.i8($M.322, $add.ref($add.ref(.str.116, $mul.ref(0, 85)), $mul.ref(7, 1)), 60);
    $M.322 := $store.i8($M.322, $add.ref($add.ref(.str.116, $mul.ref(0, 85)), $mul.ref(8, 1)), 60);
    $M.322 := $store.i8($M.322, $add.ref($add.ref(.str.116, $mul.ref(0, 85)), $mul.ref(9, 1)), 32);
    $M.322 := $store.i8($M.322, $add.ref($add.ref(.str.116, $mul.ref(0, 85)), $mul.ref(10, 1)), 40);
    $M.322 := $store.i8($M.322, $add.ref($add.ref(.str.116, $mul.ref(0, 85)), $mul.ref(11, 1)), 40);
    $M.322 := $store.i8($M.322, $add.ref($add.ref(.str.116, $mul.ref(0, 85)), $mul.ref(12, 1)), 40);
    $M.322 := $store.i8($M.322, $add.ref($add.ref(.str.116, $mul.ref(0, 85)), $mul.ref(13, 1)), 48);
    $M.322 := $store.i8($M.322, $add.ref($add.ref(.str.116, $mul.ref(0, 85)), $mul.ref(14, 1)), 43);
    $M.322 := $store.i8($M.322, $add.ref($add.ref(.str.116, $mul.ref(0, 85)), $mul.ref(15, 1)), 56);
    $M.322 := $store.i8($M.322, $add.ref($add.ref(.str.116, $mul.ref(0, 85)), $mul.ref(16, 1)), 41);
    $M.322 := $store.i8($M.322, $add.ref($add.ref(.str.116, $mul.ref(0, 85)), $mul.ref(17, 1)), 43);
    $M.322 := $store.i8($M.322, $add.ref($add.ref(.str.116, $mul.ref(0, 85)), $mul.ref(18, 1)), 56);
    $M.322 := $store.i8($M.322, $add.ref($add.ref(.str.116, $mul.ref(0, 85)), $mul.ref(19, 1)), 41);
    $M.322 := $store.i8($M.322, $add.ref($add.ref(.str.116, $mul.ref(0, 85)), $mul.ref(20, 1)), 43);
    $M.322 := $store.i8($M.322, $add.ref($add.ref(.str.116, $mul.ref(0, 85)), $mul.ref(21, 1)), 49);
    $M.322 := $store.i8($M.322, $add.ref($add.ref(.str.116, $mul.ref(0, 85)), $mul.ref(22, 1)), 52);
    $M.322 := $store.i8($M.322, $add.ref($add.ref(.str.116, $mul.ref(0, 85)), $mul.ref(23, 1)), 41);
    $M.322 := $store.i8($M.322, $add.ref($add.ref(.str.116, $mul.ref(0, 85)), $mul.ref(24, 1)), 41);
    $M.322 := $store.i8($M.322, $add.ref($add.ref(.str.116, $mul.ref(0, 85)), $mul.ref(25, 1)), 32);
    $M.322 := $store.i8($M.322, $add.ref($add.ref(.str.116, $mul.ref(0, 85)), $mul.ref(26, 1)), 124);
    $M.322 := $store.i8($M.322, $add.ref($add.ref(.str.116, $mul.ref(0, 85)), $mul.ref(27, 1)), 32);
    $M.322 := $store.i8($M.322, $add.ref($add.ref(.str.116, $mul.ref(0, 85)), $mul.ref(28, 1)), 40);
    $M.322 := $store.i8($M.322, $add.ref($add.ref(.str.116, $mul.ref(0, 85)), $mul.ref(29, 1)), 40);
    $M.322 := $store.i8($M.322, $add.ref($add.ref(.str.116, $mul.ref(0, 85)), $mul.ref(30, 1)), 40);
    $M.322 := $store.i8($M.322, $add.ref($add.ref(.str.116, $mul.ref(0, 85)), $mul.ref(31, 1)), 55);
    $M.322 := $store.i8($M.322, $add.ref($add.ref(.str.116, $mul.ref(0, 85)), $mul.ref(32, 1)), 41);
    $M.322 := $store.i8($M.322, $add.ref($add.ref(.str.116, $mul.ref(0, 85)), $mul.ref(33, 1)), 41);
    $M.322 := $store.i8($M.322, $add.ref($add.ref(.str.116, $mul.ref(0, 85)), $mul.ref(34, 1)), 32);
    $M.322 := $store.i8($M.322, $add.ref($add.ref(.str.116, $mul.ref(0, 85)), $mul.ref(35, 1)), 60);
    $M.322 := $store.i8($M.322, $add.ref($add.ref(.str.116, $mul.ref(0, 85)), $mul.ref(36, 1)), 60);
    $M.322 := $store.i8($M.322, $add.ref($add.ref(.str.116, $mul.ref(0, 85)), $mul.ref(37, 1)), 32);
    $M.322 := $store.i8($M.322, $add.ref($add.ref(.str.116, $mul.ref(0, 85)), $mul.ref(38, 1)), 40);
    $M.322 := $store.i8($M.322, $add.ref($add.ref(.str.116, $mul.ref(0, 85)), $mul.ref(39, 1)), 48);
    $M.322 := $store.i8($M.322, $add.ref($add.ref(.str.116, $mul.ref(0, 85)), $mul.ref(40, 1)), 43);
    $M.322 := $store.i8($M.322, $add.ref($add.ref(.str.116, $mul.ref(0, 85)), $mul.ref(41, 1)), 56);
    $M.322 := $store.i8($M.322, $add.ref($add.ref(.str.116, $mul.ref(0, 85)), $mul.ref(42, 1)), 41);
    $M.322 := $store.i8($M.322, $add.ref($add.ref(.str.116, $mul.ref(0, 85)), $mul.ref(43, 1)), 41);
    $M.322 := $store.i8($M.322, $add.ref($add.ref(.str.116, $mul.ref(0, 85)), $mul.ref(44, 1)), 32);
    $M.322 := $store.i8($M.322, $add.ref($add.ref(.str.116, $mul.ref(0, 85)), $mul.ref(45, 1)), 124);
    $M.322 := $store.i8($M.322, $add.ref($add.ref(.str.116, $mul.ref(0, 85)), $mul.ref(46, 1)), 32);
    $M.322 := $store.i8($M.322, $add.ref($add.ref(.str.116, $mul.ref(0, 85)), $mul.ref(47, 1)), 40);
    $M.322 := $store.i8($M.322, $add.ref($add.ref(.str.116, $mul.ref(0, 85)), $mul.ref(48, 1)), 40);
    $M.322 := $store.i8($M.322, $add.ref($add.ref(.str.116, $mul.ref(0, 85)), $mul.ref(49, 1)), 40);
    $M.322 := $store.i8($M.322, $add.ref($add.ref(.str.116, $mul.ref(0, 85)), $mul.ref(50, 1)), 48);
    $M.322 := $store.i8($M.322, $add.ref($add.ref(.str.116, $mul.ref(0, 85)), $mul.ref(51, 1)), 120);
    $M.322 := $store.i8($M.322, $add.ref($add.ref(.str.116, $mul.ref(0, 85)), $mul.ref(52, 1)), 97);
    $M.322 := $store.i8($M.322, $add.ref($add.ref(.str.116, $mul.ref(0, 85)), $mul.ref(53, 1)), 98);
    $M.322 := $store.i8($M.322, $add.ref($add.ref(.str.116, $mul.ref(0, 85)), $mul.ref(54, 1)), 41);
    $M.322 := $store.i8($M.322, $add.ref($add.ref(.str.116, $mul.ref(0, 85)), $mul.ref(55, 1)), 41);
    $M.322 := $store.i8($M.322, $add.ref($add.ref(.str.116, $mul.ref(0, 85)), $mul.ref(56, 1)), 32);
    $M.322 := $store.i8($M.322, $add.ref($add.ref(.str.116, $mul.ref(0, 85)), $mul.ref(57, 1)), 60);
    $M.322 := $store.i8($M.322, $add.ref($add.ref(.str.116, $mul.ref(0, 85)), $mul.ref(58, 1)), 60);
    $M.322 := $store.i8($M.322, $add.ref($add.ref(.str.116, $mul.ref(0, 85)), $mul.ref(59, 1)), 32);
    $M.322 := $store.i8($M.322, $add.ref($add.ref(.str.116, $mul.ref(0, 85)), $mul.ref(60, 1)), 48);
    $M.322 := $store.i8($M.322, $add.ref($add.ref(.str.116, $mul.ref(0, 85)), $mul.ref(61, 1)), 41);
    $M.322 := $store.i8($M.322, $add.ref($add.ref(.str.116, $mul.ref(0, 85)), $mul.ref(62, 1)), 32);
    $M.322 := $store.i8($M.322, $add.ref($add.ref(.str.116, $mul.ref(0, 85)), $mul.ref(63, 1)), 124);
    $M.322 := $store.i8($M.322, $add.ref($add.ref(.str.116, $mul.ref(0, 85)), $mul.ref(64, 1)), 32);
    $M.322 := $store.i8($M.322, $add.ref($add.ref(.str.116, $mul.ref(0, 85)), $mul.ref(65, 1)), 40);
    $M.322 := $store.i8($M.322, $add.ref($add.ref(.str.116, $mul.ref(0, 85)), $mul.ref(66, 1)), 40);
    $M.322 := $store.i8($M.322, $add.ref($add.ref(.str.116, $mul.ref(0, 85)), $mul.ref(67, 1)), 48);
    $M.322 := $store.i8($M.322, $add.ref($add.ref(.str.116, $mul.ref(0, 85)), $mul.ref(68, 1)), 41);
    $M.322 := $store.i8($M.322, $add.ref($add.ref(.str.116, $mul.ref(0, 85)), $mul.ref(69, 1)), 32);
    $M.322 := $store.i8($M.322, $add.ref($add.ref(.str.116, $mul.ref(0, 85)), $mul.ref(70, 1)), 60);
    $M.322 := $store.i8($M.322, $add.ref($add.ref(.str.116, $mul.ref(0, 85)), $mul.ref(71, 1)), 60);
    $M.322 := $store.i8($M.322, $add.ref($add.ref(.str.116, $mul.ref(0, 85)), $mul.ref(72, 1)), 32);
    $M.322 := $store.i8($M.322, $add.ref($add.ref(.str.116, $mul.ref(0, 85)), $mul.ref(73, 1)), 40);
    $M.322 := $store.i8($M.322, $add.ref($add.ref(.str.116, $mul.ref(0, 85)), $mul.ref(74, 1)), 40);
    $M.322 := $store.i8($M.322, $add.ref($add.ref(.str.116, $mul.ref(0, 85)), $mul.ref(75, 1)), 48);
    $M.322 := $store.i8($M.322, $add.ref($add.ref(.str.116, $mul.ref(0, 85)), $mul.ref(76, 1)), 43);
    $M.322 := $store.i8($M.322, $add.ref($add.ref(.str.116, $mul.ref(0, 85)), $mul.ref(77, 1)), 56);
    $M.322 := $store.i8($M.322, $add.ref($add.ref(.str.116, $mul.ref(0, 85)), $mul.ref(78, 1)), 41);
    $M.322 := $store.i8($M.322, $add.ref($add.ref(.str.116, $mul.ref(0, 85)), $mul.ref(79, 1)), 43);
    $M.322 := $store.i8($M.322, $add.ref($add.ref(.str.116, $mul.ref(0, 85)), $mul.ref(80, 1)), 56);
    $M.322 := $store.i8($M.322, $add.ref($add.ref(.str.116, $mul.ref(0, 85)), $mul.ref(81, 1)), 41);
    $M.322 := $store.i8($M.322, $add.ref($add.ref(.str.116, $mul.ref(0, 85)), $mul.ref(82, 1)), 41);
    $M.322 := $store.i8($M.322, $add.ref($add.ref(.str.116, $mul.ref(0, 85)), $mul.ref(83, 1)), 41);
    $M.322 := $store.i8($M.322, $add.ref($add.ref(.str.116, $mul.ref(0, 85)), $mul.ref(84, 1)), 0);
    $M.323 := $store.i8($M.323, .str.118, 40);
    $M.323 := $store.i8($M.323, $add.ref($add.ref(.str.118, $mul.ref(0, 85)), $mul.ref(1, 1)), 40);
    $M.323 := $store.i8($M.323, $add.ref($add.ref(.str.118, $mul.ref(0, 85)), $mul.ref(2, 1)), 40);
    $M.323 := $store.i8($M.323, $add.ref($add.ref(.str.118, $mul.ref(0, 85)), $mul.ref(3, 1)), 48);
    $M.323 := $store.i8($M.323, $add.ref($add.ref(.str.118, $mul.ref(0, 85)), $mul.ref(4, 1)), 85);
    $M.323 := $store.i8($M.323, $add.ref($add.ref(.str.118, $mul.ref(0, 85)), $mul.ref(5, 1)), 41);
    $M.323 := $store.i8($M.323, $add.ref($add.ref(.str.118, $mul.ref(0, 85)), $mul.ref(6, 1)), 32);
    $M.323 := $store.i8($M.323, $add.ref($add.ref(.str.118, $mul.ref(0, 85)), $mul.ref(7, 1)), 60);
    $M.323 := $store.i8($M.323, $add.ref($add.ref(.str.118, $mul.ref(0, 85)), $mul.ref(8, 1)), 60);
    $M.323 := $store.i8($M.323, $add.ref($add.ref(.str.118, $mul.ref(0, 85)), $mul.ref(9, 1)), 32);
    $M.323 := $store.i8($M.323, $add.ref($add.ref(.str.118, $mul.ref(0, 85)), $mul.ref(10, 1)), 40);
    $M.323 := $store.i8($M.323, $add.ref($add.ref(.str.118, $mul.ref(0, 85)), $mul.ref(11, 1)), 40);
    $M.323 := $store.i8($M.323, $add.ref($add.ref(.str.118, $mul.ref(0, 85)), $mul.ref(12, 1)), 40);
    $M.323 := $store.i8($M.323, $add.ref($add.ref(.str.118, $mul.ref(0, 85)), $mul.ref(13, 1)), 48);
    $M.323 := $store.i8($M.323, $add.ref($add.ref(.str.118, $mul.ref(0, 85)), $mul.ref(14, 1)), 43);
    $M.323 := $store.i8($M.323, $add.ref($add.ref(.str.118, $mul.ref(0, 85)), $mul.ref(15, 1)), 56);
    $M.323 := $store.i8($M.323, $add.ref($add.ref(.str.118, $mul.ref(0, 85)), $mul.ref(16, 1)), 41);
    $M.323 := $store.i8($M.323, $add.ref($add.ref(.str.118, $mul.ref(0, 85)), $mul.ref(17, 1)), 43);
    $M.323 := $store.i8($M.323, $add.ref($add.ref(.str.118, $mul.ref(0, 85)), $mul.ref(18, 1)), 56);
    $M.323 := $store.i8($M.323, $add.ref($add.ref(.str.118, $mul.ref(0, 85)), $mul.ref(19, 1)), 41);
    $M.323 := $store.i8($M.323, $add.ref($add.ref(.str.118, $mul.ref(0, 85)), $mul.ref(20, 1)), 43);
    $M.323 := $store.i8($M.323, $add.ref($add.ref(.str.118, $mul.ref(0, 85)), $mul.ref(21, 1)), 49);
    $M.323 := $store.i8($M.323, $add.ref($add.ref(.str.118, $mul.ref(0, 85)), $mul.ref(22, 1)), 52);
    $M.323 := $store.i8($M.323, $add.ref($add.ref(.str.118, $mul.ref(0, 85)), $mul.ref(23, 1)), 41);
    $M.323 := $store.i8($M.323, $add.ref($add.ref(.str.118, $mul.ref(0, 85)), $mul.ref(24, 1)), 41);
    $M.323 := $store.i8($M.323, $add.ref($add.ref(.str.118, $mul.ref(0, 85)), $mul.ref(25, 1)), 32);
    $M.323 := $store.i8($M.323, $add.ref($add.ref(.str.118, $mul.ref(0, 85)), $mul.ref(26, 1)), 124);
    $M.323 := $store.i8($M.323, $add.ref($add.ref(.str.118, $mul.ref(0, 85)), $mul.ref(27, 1)), 32);
    $M.323 := $store.i8($M.323, $add.ref($add.ref(.str.118, $mul.ref(0, 85)), $mul.ref(28, 1)), 40);
    $M.323 := $store.i8($M.323, $add.ref($add.ref(.str.118, $mul.ref(0, 85)), $mul.ref(29, 1)), 40);
    $M.323 := $store.i8($M.323, $add.ref($add.ref(.str.118, $mul.ref(0, 85)), $mul.ref(30, 1)), 40);
    $M.323 := $store.i8($M.323, $add.ref($add.ref(.str.118, $mul.ref(0, 85)), $mul.ref(31, 1)), 55);
    $M.323 := $store.i8($M.323, $add.ref($add.ref(.str.118, $mul.ref(0, 85)), $mul.ref(32, 1)), 41);
    $M.323 := $store.i8($M.323, $add.ref($add.ref(.str.118, $mul.ref(0, 85)), $mul.ref(33, 1)), 41);
    $M.323 := $store.i8($M.323, $add.ref($add.ref(.str.118, $mul.ref(0, 85)), $mul.ref(34, 1)), 32);
    $M.323 := $store.i8($M.323, $add.ref($add.ref(.str.118, $mul.ref(0, 85)), $mul.ref(35, 1)), 60);
    $M.323 := $store.i8($M.323, $add.ref($add.ref(.str.118, $mul.ref(0, 85)), $mul.ref(36, 1)), 60);
    $M.323 := $store.i8($M.323, $add.ref($add.ref(.str.118, $mul.ref(0, 85)), $mul.ref(37, 1)), 32);
    $M.323 := $store.i8($M.323, $add.ref($add.ref(.str.118, $mul.ref(0, 85)), $mul.ref(38, 1)), 40);
    $M.323 := $store.i8($M.323, $add.ref($add.ref(.str.118, $mul.ref(0, 85)), $mul.ref(39, 1)), 48);
    $M.323 := $store.i8($M.323, $add.ref($add.ref(.str.118, $mul.ref(0, 85)), $mul.ref(40, 1)), 43);
    $M.323 := $store.i8($M.323, $add.ref($add.ref(.str.118, $mul.ref(0, 85)), $mul.ref(41, 1)), 56);
    $M.323 := $store.i8($M.323, $add.ref($add.ref(.str.118, $mul.ref(0, 85)), $mul.ref(42, 1)), 41);
    $M.323 := $store.i8($M.323, $add.ref($add.ref(.str.118, $mul.ref(0, 85)), $mul.ref(43, 1)), 41);
    $M.323 := $store.i8($M.323, $add.ref($add.ref(.str.118, $mul.ref(0, 85)), $mul.ref(44, 1)), 32);
    $M.323 := $store.i8($M.323, $add.ref($add.ref(.str.118, $mul.ref(0, 85)), $mul.ref(45, 1)), 124);
    $M.323 := $store.i8($M.323, $add.ref($add.ref(.str.118, $mul.ref(0, 85)), $mul.ref(46, 1)), 32);
    $M.323 := $store.i8($M.323, $add.ref($add.ref(.str.118, $mul.ref(0, 85)), $mul.ref(47, 1)), 40);
    $M.323 := $store.i8($M.323, $add.ref($add.ref(.str.118, $mul.ref(0, 85)), $mul.ref(48, 1)), 40);
    $M.323 := $store.i8($M.323, $add.ref($add.ref(.str.118, $mul.ref(0, 85)), $mul.ref(49, 1)), 40);
    $M.323 := $store.i8($M.323, $add.ref($add.ref(.str.118, $mul.ref(0, 85)), $mul.ref(50, 1)), 48);
    $M.323 := $store.i8($M.323, $add.ref($add.ref(.str.118, $mul.ref(0, 85)), $mul.ref(51, 1)), 120);
    $M.323 := $store.i8($M.323, $add.ref($add.ref(.str.118, $mul.ref(0, 85)), $mul.ref(52, 1)), 97);
    $M.323 := $store.i8($M.323, $add.ref($add.ref(.str.118, $mul.ref(0, 85)), $mul.ref(53, 1)), 56);
    $M.323 := $store.i8($M.323, $add.ref($add.ref(.str.118, $mul.ref(0, 85)), $mul.ref(54, 1)), 41);
    $M.323 := $store.i8($M.323, $add.ref($add.ref(.str.118, $mul.ref(0, 85)), $mul.ref(55, 1)), 41);
    $M.323 := $store.i8($M.323, $add.ref($add.ref(.str.118, $mul.ref(0, 85)), $mul.ref(56, 1)), 32);
    $M.323 := $store.i8($M.323, $add.ref($add.ref(.str.118, $mul.ref(0, 85)), $mul.ref(57, 1)), 60);
    $M.323 := $store.i8($M.323, $add.ref($add.ref(.str.118, $mul.ref(0, 85)), $mul.ref(58, 1)), 60);
    $M.323 := $store.i8($M.323, $add.ref($add.ref(.str.118, $mul.ref(0, 85)), $mul.ref(59, 1)), 32);
    $M.323 := $store.i8($M.323, $add.ref($add.ref(.str.118, $mul.ref(0, 85)), $mul.ref(60, 1)), 48);
    $M.323 := $store.i8($M.323, $add.ref($add.ref(.str.118, $mul.ref(0, 85)), $mul.ref(61, 1)), 41);
    $M.323 := $store.i8($M.323, $add.ref($add.ref(.str.118, $mul.ref(0, 85)), $mul.ref(62, 1)), 32);
    $M.323 := $store.i8($M.323, $add.ref($add.ref(.str.118, $mul.ref(0, 85)), $mul.ref(63, 1)), 124);
    $M.323 := $store.i8($M.323, $add.ref($add.ref(.str.118, $mul.ref(0, 85)), $mul.ref(64, 1)), 32);
    $M.323 := $store.i8($M.323, $add.ref($add.ref(.str.118, $mul.ref(0, 85)), $mul.ref(65, 1)), 40);
    $M.323 := $store.i8($M.323, $add.ref($add.ref(.str.118, $mul.ref(0, 85)), $mul.ref(66, 1)), 40);
    $M.323 := $store.i8($M.323, $add.ref($add.ref(.str.118, $mul.ref(0, 85)), $mul.ref(67, 1)), 48);
    $M.323 := $store.i8($M.323, $add.ref($add.ref(.str.118, $mul.ref(0, 85)), $mul.ref(68, 1)), 41);
    $M.323 := $store.i8($M.323, $add.ref($add.ref(.str.118, $mul.ref(0, 85)), $mul.ref(69, 1)), 32);
    $M.323 := $store.i8($M.323, $add.ref($add.ref(.str.118, $mul.ref(0, 85)), $mul.ref(70, 1)), 60);
    $M.323 := $store.i8($M.323, $add.ref($add.ref(.str.118, $mul.ref(0, 85)), $mul.ref(71, 1)), 60);
    $M.323 := $store.i8($M.323, $add.ref($add.ref(.str.118, $mul.ref(0, 85)), $mul.ref(72, 1)), 32);
    $M.323 := $store.i8($M.323, $add.ref($add.ref(.str.118, $mul.ref(0, 85)), $mul.ref(73, 1)), 40);
    $M.323 := $store.i8($M.323, $add.ref($add.ref(.str.118, $mul.ref(0, 85)), $mul.ref(74, 1)), 40);
    $M.323 := $store.i8($M.323, $add.ref($add.ref(.str.118, $mul.ref(0, 85)), $mul.ref(75, 1)), 48);
    $M.323 := $store.i8($M.323, $add.ref($add.ref(.str.118, $mul.ref(0, 85)), $mul.ref(76, 1)), 43);
    $M.323 := $store.i8($M.323, $add.ref($add.ref(.str.118, $mul.ref(0, 85)), $mul.ref(77, 1)), 56);
    $M.323 := $store.i8($M.323, $add.ref($add.ref(.str.118, $mul.ref(0, 85)), $mul.ref(78, 1)), 41);
    $M.323 := $store.i8($M.323, $add.ref($add.ref(.str.118, $mul.ref(0, 85)), $mul.ref(79, 1)), 43);
    $M.323 := $store.i8($M.323, $add.ref($add.ref(.str.118, $mul.ref(0, 85)), $mul.ref(80, 1)), 56);
    $M.323 := $store.i8($M.323, $add.ref($add.ref(.str.118, $mul.ref(0, 85)), $mul.ref(81, 1)), 41);
    $M.323 := $store.i8($M.323, $add.ref($add.ref(.str.118, $mul.ref(0, 85)), $mul.ref(82, 1)), 41);
    $M.323 := $store.i8($M.323, $add.ref($add.ref(.str.118, $mul.ref(0, 85)), $mul.ref(83, 1)), 41);
    $M.323 := $store.i8($M.323, $add.ref($add.ref(.str.118, $mul.ref(0, 85)), $mul.ref(84, 1)), 0);
    $M.324 := $store.i8($M.324, .str.119, 40);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.119, $mul.ref(0, 85)), $mul.ref(1, 1)), 40);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.119, $mul.ref(0, 85)), $mul.ref(2, 1)), 40);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.119, $mul.ref(0, 85)), $mul.ref(3, 1)), 48);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.119, $mul.ref(0, 85)), $mul.ref(4, 1)), 85);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.119, $mul.ref(0, 85)), $mul.ref(5, 1)), 41);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.119, $mul.ref(0, 85)), $mul.ref(6, 1)), 32);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.119, $mul.ref(0, 85)), $mul.ref(7, 1)), 60);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.119, $mul.ref(0, 85)), $mul.ref(8, 1)), 60);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.119, $mul.ref(0, 85)), $mul.ref(9, 1)), 32);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.119, $mul.ref(0, 85)), $mul.ref(10, 1)), 40);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.119, $mul.ref(0, 85)), $mul.ref(11, 1)), 40);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.119, $mul.ref(0, 85)), $mul.ref(12, 1)), 40);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.119, $mul.ref(0, 85)), $mul.ref(13, 1)), 48);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.119, $mul.ref(0, 85)), $mul.ref(14, 1)), 43);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.119, $mul.ref(0, 85)), $mul.ref(15, 1)), 56);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.119, $mul.ref(0, 85)), $mul.ref(16, 1)), 41);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.119, $mul.ref(0, 85)), $mul.ref(17, 1)), 43);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.119, $mul.ref(0, 85)), $mul.ref(18, 1)), 56);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.119, $mul.ref(0, 85)), $mul.ref(19, 1)), 41);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.119, $mul.ref(0, 85)), $mul.ref(20, 1)), 43);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.119, $mul.ref(0, 85)), $mul.ref(21, 1)), 49);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.119, $mul.ref(0, 85)), $mul.ref(22, 1)), 52);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.119, $mul.ref(0, 85)), $mul.ref(23, 1)), 41);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.119, $mul.ref(0, 85)), $mul.ref(24, 1)), 41);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.119, $mul.ref(0, 85)), $mul.ref(25, 1)), 32);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.119, $mul.ref(0, 85)), $mul.ref(26, 1)), 124);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.119, $mul.ref(0, 85)), $mul.ref(27, 1)), 32);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.119, $mul.ref(0, 85)), $mul.ref(28, 1)), 40);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.119, $mul.ref(0, 85)), $mul.ref(29, 1)), 40);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.119, $mul.ref(0, 85)), $mul.ref(30, 1)), 40);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.119, $mul.ref(0, 85)), $mul.ref(31, 1)), 55);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.119, $mul.ref(0, 85)), $mul.ref(32, 1)), 41);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.119, $mul.ref(0, 85)), $mul.ref(33, 1)), 41);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.119, $mul.ref(0, 85)), $mul.ref(34, 1)), 32);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.119, $mul.ref(0, 85)), $mul.ref(35, 1)), 60);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.119, $mul.ref(0, 85)), $mul.ref(36, 1)), 60);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.119, $mul.ref(0, 85)), $mul.ref(37, 1)), 32);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.119, $mul.ref(0, 85)), $mul.ref(38, 1)), 40);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.119, $mul.ref(0, 85)), $mul.ref(39, 1)), 48);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.119, $mul.ref(0, 85)), $mul.ref(40, 1)), 43);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.119, $mul.ref(0, 85)), $mul.ref(41, 1)), 56);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.119, $mul.ref(0, 85)), $mul.ref(42, 1)), 41);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.119, $mul.ref(0, 85)), $mul.ref(43, 1)), 41);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.119, $mul.ref(0, 85)), $mul.ref(44, 1)), 32);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.119, $mul.ref(0, 85)), $mul.ref(45, 1)), 124);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.119, $mul.ref(0, 85)), $mul.ref(46, 1)), 32);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.119, $mul.ref(0, 85)), $mul.ref(47, 1)), 40);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.119, $mul.ref(0, 85)), $mul.ref(48, 1)), 40);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.119, $mul.ref(0, 85)), $mul.ref(49, 1)), 40);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.119, $mul.ref(0, 85)), $mul.ref(50, 1)), 48);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.119, $mul.ref(0, 85)), $mul.ref(51, 1)), 120);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.119, $mul.ref(0, 85)), $mul.ref(52, 1)), 97);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.119, $mul.ref(0, 85)), $mul.ref(53, 1)), 52);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.119, $mul.ref(0, 85)), $mul.ref(54, 1)), 41);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.119, $mul.ref(0, 85)), $mul.ref(55, 1)), 41);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.119, $mul.ref(0, 85)), $mul.ref(56, 1)), 32);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.119, $mul.ref(0, 85)), $mul.ref(57, 1)), 60);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.119, $mul.ref(0, 85)), $mul.ref(58, 1)), 60);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.119, $mul.ref(0, 85)), $mul.ref(59, 1)), 32);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.119, $mul.ref(0, 85)), $mul.ref(60, 1)), 48);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.119, $mul.ref(0, 85)), $mul.ref(61, 1)), 41);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.119, $mul.ref(0, 85)), $mul.ref(62, 1)), 32);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.119, $mul.ref(0, 85)), $mul.ref(63, 1)), 124);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.119, $mul.ref(0, 85)), $mul.ref(64, 1)), 32);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.119, $mul.ref(0, 85)), $mul.ref(65, 1)), 40);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.119, $mul.ref(0, 85)), $mul.ref(66, 1)), 40);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.119, $mul.ref(0, 85)), $mul.ref(67, 1)), 48);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.119, $mul.ref(0, 85)), $mul.ref(68, 1)), 41);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.119, $mul.ref(0, 85)), $mul.ref(69, 1)), 32);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.119, $mul.ref(0, 85)), $mul.ref(70, 1)), 60);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.119, $mul.ref(0, 85)), $mul.ref(71, 1)), 60);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.119, $mul.ref(0, 85)), $mul.ref(72, 1)), 32);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.119, $mul.ref(0, 85)), $mul.ref(73, 1)), 40);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.119, $mul.ref(0, 85)), $mul.ref(74, 1)), 40);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.119, $mul.ref(0, 85)), $mul.ref(75, 1)), 48);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.119, $mul.ref(0, 85)), $mul.ref(76, 1)), 43);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.119, $mul.ref(0, 85)), $mul.ref(77, 1)), 56);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.119, $mul.ref(0, 85)), $mul.ref(78, 1)), 41);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.119, $mul.ref(0, 85)), $mul.ref(79, 1)), 43);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.119, $mul.ref(0, 85)), $mul.ref(80, 1)), 56);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.119, $mul.ref(0, 85)), $mul.ref(81, 1)), 41);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.119, $mul.ref(0, 85)), $mul.ref(82, 1)), 41);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.119, $mul.ref(0, 85)), $mul.ref(83, 1)), 41);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.119, $mul.ref(0, 85)), $mul.ref(84, 1)), 0);
    $M.325 := $store.i8($M.325, .str.120, 40);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.120, $mul.ref(0, 85)), $mul.ref(1, 1)), 40);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.120, $mul.ref(0, 85)), $mul.ref(2, 1)), 40);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.120, $mul.ref(0, 85)), $mul.ref(3, 1)), 48);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.120, $mul.ref(0, 85)), $mul.ref(4, 1)), 85);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.120, $mul.ref(0, 85)), $mul.ref(5, 1)), 41);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.120, $mul.ref(0, 85)), $mul.ref(6, 1)), 32);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.120, $mul.ref(0, 85)), $mul.ref(7, 1)), 60);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.120, $mul.ref(0, 85)), $mul.ref(8, 1)), 60);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.120, $mul.ref(0, 85)), $mul.ref(9, 1)), 32);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.120, $mul.ref(0, 85)), $mul.ref(10, 1)), 40);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.120, $mul.ref(0, 85)), $mul.ref(11, 1)), 40);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.120, $mul.ref(0, 85)), $mul.ref(12, 1)), 40);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.120, $mul.ref(0, 85)), $mul.ref(13, 1)), 48);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.120, $mul.ref(0, 85)), $mul.ref(14, 1)), 43);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.120, $mul.ref(0, 85)), $mul.ref(15, 1)), 56);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.120, $mul.ref(0, 85)), $mul.ref(16, 1)), 41);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.120, $mul.ref(0, 85)), $mul.ref(17, 1)), 43);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.120, $mul.ref(0, 85)), $mul.ref(18, 1)), 56);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.120, $mul.ref(0, 85)), $mul.ref(19, 1)), 41);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.120, $mul.ref(0, 85)), $mul.ref(20, 1)), 43);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.120, $mul.ref(0, 85)), $mul.ref(21, 1)), 49);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.120, $mul.ref(0, 85)), $mul.ref(22, 1)), 52);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.120, $mul.ref(0, 85)), $mul.ref(23, 1)), 41);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.120, $mul.ref(0, 85)), $mul.ref(24, 1)), 41);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.120, $mul.ref(0, 85)), $mul.ref(25, 1)), 32);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.120, $mul.ref(0, 85)), $mul.ref(26, 1)), 124);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.120, $mul.ref(0, 85)), $mul.ref(27, 1)), 32);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.120, $mul.ref(0, 85)), $mul.ref(28, 1)), 40);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.120, $mul.ref(0, 85)), $mul.ref(29, 1)), 40);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.120, $mul.ref(0, 85)), $mul.ref(30, 1)), 40);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.120, $mul.ref(0, 85)), $mul.ref(31, 1)), 55);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.120, $mul.ref(0, 85)), $mul.ref(32, 1)), 41);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.120, $mul.ref(0, 85)), $mul.ref(33, 1)), 41);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.120, $mul.ref(0, 85)), $mul.ref(34, 1)), 32);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.120, $mul.ref(0, 85)), $mul.ref(35, 1)), 60);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.120, $mul.ref(0, 85)), $mul.ref(36, 1)), 60);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.120, $mul.ref(0, 85)), $mul.ref(37, 1)), 32);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.120, $mul.ref(0, 85)), $mul.ref(38, 1)), 40);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.120, $mul.ref(0, 85)), $mul.ref(39, 1)), 48);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.120, $mul.ref(0, 85)), $mul.ref(40, 1)), 43);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.120, $mul.ref(0, 85)), $mul.ref(41, 1)), 56);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.120, $mul.ref(0, 85)), $mul.ref(42, 1)), 41);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.120, $mul.ref(0, 85)), $mul.ref(43, 1)), 41);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.120, $mul.ref(0, 85)), $mul.ref(44, 1)), 32);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.120, $mul.ref(0, 85)), $mul.ref(45, 1)), 124);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.120, $mul.ref(0, 85)), $mul.ref(46, 1)), 32);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.120, $mul.ref(0, 85)), $mul.ref(47, 1)), 40);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.120, $mul.ref(0, 85)), $mul.ref(48, 1)), 40);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.120, $mul.ref(0, 85)), $mul.ref(49, 1)), 40);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.120, $mul.ref(0, 85)), $mul.ref(50, 1)), 48);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.120, $mul.ref(0, 85)), $mul.ref(51, 1)), 120);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.120, $mul.ref(0, 85)), $mul.ref(52, 1)), 97);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.120, $mul.ref(0, 85)), $mul.ref(53, 1)), 57);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.120, $mul.ref(0, 85)), $mul.ref(54, 1)), 41);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.120, $mul.ref(0, 85)), $mul.ref(55, 1)), 41);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.120, $mul.ref(0, 85)), $mul.ref(56, 1)), 32);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.120, $mul.ref(0, 85)), $mul.ref(57, 1)), 60);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.120, $mul.ref(0, 85)), $mul.ref(58, 1)), 60);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.120, $mul.ref(0, 85)), $mul.ref(59, 1)), 32);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.120, $mul.ref(0, 85)), $mul.ref(60, 1)), 48);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.120, $mul.ref(0, 85)), $mul.ref(61, 1)), 41);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.120, $mul.ref(0, 85)), $mul.ref(62, 1)), 32);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.120, $mul.ref(0, 85)), $mul.ref(63, 1)), 124);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.120, $mul.ref(0, 85)), $mul.ref(64, 1)), 32);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.120, $mul.ref(0, 85)), $mul.ref(65, 1)), 40);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.120, $mul.ref(0, 85)), $mul.ref(66, 1)), 40);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.120, $mul.ref(0, 85)), $mul.ref(67, 1)), 48);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.120, $mul.ref(0, 85)), $mul.ref(68, 1)), 41);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.120, $mul.ref(0, 85)), $mul.ref(69, 1)), 32);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.120, $mul.ref(0, 85)), $mul.ref(70, 1)), 60);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.120, $mul.ref(0, 85)), $mul.ref(71, 1)), 60);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.120, $mul.ref(0, 85)), $mul.ref(72, 1)), 32);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.120, $mul.ref(0, 85)), $mul.ref(73, 1)), 40);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.120, $mul.ref(0, 85)), $mul.ref(74, 1)), 40);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.120, $mul.ref(0, 85)), $mul.ref(75, 1)), 48);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.120, $mul.ref(0, 85)), $mul.ref(76, 1)), 43);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.120, $mul.ref(0, 85)), $mul.ref(77, 1)), 56);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.120, $mul.ref(0, 85)), $mul.ref(78, 1)), 41);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.120, $mul.ref(0, 85)), $mul.ref(79, 1)), 43);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.120, $mul.ref(0, 85)), $mul.ref(80, 1)), 56);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.120, $mul.ref(0, 85)), $mul.ref(81, 1)), 41);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.120, $mul.ref(0, 85)), $mul.ref(82, 1)), 41);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.120, $mul.ref(0, 85)), $mul.ref(83, 1)), 41);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.120, $mul.ref(0, 85)), $mul.ref(84, 1)), 0);
    $M.326 := $store.i8($M.326, .str.121, 40);
    $M.326 := $store.i8($M.326, $add.ref($add.ref(.str.121, $mul.ref(0, 85)), $mul.ref(1, 1)), 40);
    $M.326 := $store.i8($M.326, $add.ref($add.ref(.str.121, $mul.ref(0, 85)), $mul.ref(2, 1)), 40);
    $M.326 := $store.i8($M.326, $add.ref($add.ref(.str.121, $mul.ref(0, 85)), $mul.ref(3, 1)), 48);
    $M.326 := $store.i8($M.326, $add.ref($add.ref(.str.121, $mul.ref(0, 85)), $mul.ref(4, 1)), 85);
    $M.326 := $store.i8($M.326, $add.ref($add.ref(.str.121, $mul.ref(0, 85)), $mul.ref(5, 1)), 41);
    $M.326 := $store.i8($M.326, $add.ref($add.ref(.str.121, $mul.ref(0, 85)), $mul.ref(6, 1)), 32);
    $M.326 := $store.i8($M.326, $add.ref($add.ref(.str.121, $mul.ref(0, 85)), $mul.ref(7, 1)), 60);
    $M.326 := $store.i8($M.326, $add.ref($add.ref(.str.121, $mul.ref(0, 85)), $mul.ref(8, 1)), 60);
    $M.326 := $store.i8($M.326, $add.ref($add.ref(.str.121, $mul.ref(0, 85)), $mul.ref(9, 1)), 32);
    $M.326 := $store.i8($M.326, $add.ref($add.ref(.str.121, $mul.ref(0, 85)), $mul.ref(10, 1)), 40);
    $M.326 := $store.i8($M.326, $add.ref($add.ref(.str.121, $mul.ref(0, 85)), $mul.ref(11, 1)), 40);
    $M.326 := $store.i8($M.326, $add.ref($add.ref(.str.121, $mul.ref(0, 85)), $mul.ref(12, 1)), 40);
    $M.326 := $store.i8($M.326, $add.ref($add.ref(.str.121, $mul.ref(0, 85)), $mul.ref(13, 1)), 48);
    $M.326 := $store.i8($M.326, $add.ref($add.ref(.str.121, $mul.ref(0, 85)), $mul.ref(14, 1)), 43);
    $M.326 := $store.i8($M.326, $add.ref($add.ref(.str.121, $mul.ref(0, 85)), $mul.ref(15, 1)), 56);
    $M.326 := $store.i8($M.326, $add.ref($add.ref(.str.121, $mul.ref(0, 85)), $mul.ref(16, 1)), 41);
    $M.326 := $store.i8($M.326, $add.ref($add.ref(.str.121, $mul.ref(0, 85)), $mul.ref(17, 1)), 43);
    $M.326 := $store.i8($M.326, $add.ref($add.ref(.str.121, $mul.ref(0, 85)), $mul.ref(18, 1)), 56);
    $M.326 := $store.i8($M.326, $add.ref($add.ref(.str.121, $mul.ref(0, 85)), $mul.ref(19, 1)), 41);
    $M.326 := $store.i8($M.326, $add.ref($add.ref(.str.121, $mul.ref(0, 85)), $mul.ref(20, 1)), 43);
    $M.326 := $store.i8($M.326, $add.ref($add.ref(.str.121, $mul.ref(0, 85)), $mul.ref(21, 1)), 49);
    $M.326 := $store.i8($M.326, $add.ref($add.ref(.str.121, $mul.ref(0, 85)), $mul.ref(22, 1)), 52);
    $M.326 := $store.i8($M.326, $add.ref($add.ref(.str.121, $mul.ref(0, 85)), $mul.ref(23, 1)), 41);
    $M.326 := $store.i8($M.326, $add.ref($add.ref(.str.121, $mul.ref(0, 85)), $mul.ref(24, 1)), 41);
    $M.326 := $store.i8($M.326, $add.ref($add.ref(.str.121, $mul.ref(0, 85)), $mul.ref(25, 1)), 32);
    $M.326 := $store.i8($M.326, $add.ref($add.ref(.str.121, $mul.ref(0, 85)), $mul.ref(26, 1)), 124);
    $M.326 := $store.i8($M.326, $add.ref($add.ref(.str.121, $mul.ref(0, 85)), $mul.ref(27, 1)), 32);
    $M.326 := $store.i8($M.326, $add.ref($add.ref(.str.121, $mul.ref(0, 85)), $mul.ref(28, 1)), 40);
    $M.326 := $store.i8($M.326, $add.ref($add.ref(.str.121, $mul.ref(0, 85)), $mul.ref(29, 1)), 40);
    $M.326 := $store.i8($M.326, $add.ref($add.ref(.str.121, $mul.ref(0, 85)), $mul.ref(30, 1)), 40);
    $M.326 := $store.i8($M.326, $add.ref($add.ref(.str.121, $mul.ref(0, 85)), $mul.ref(31, 1)), 55);
    $M.326 := $store.i8($M.326, $add.ref($add.ref(.str.121, $mul.ref(0, 85)), $mul.ref(32, 1)), 41);
    $M.326 := $store.i8($M.326, $add.ref($add.ref(.str.121, $mul.ref(0, 85)), $mul.ref(33, 1)), 41);
    $M.326 := $store.i8($M.326, $add.ref($add.ref(.str.121, $mul.ref(0, 85)), $mul.ref(34, 1)), 32);
    $M.326 := $store.i8($M.326, $add.ref($add.ref(.str.121, $mul.ref(0, 85)), $mul.ref(35, 1)), 60);
    $M.326 := $store.i8($M.326, $add.ref($add.ref(.str.121, $mul.ref(0, 85)), $mul.ref(36, 1)), 60);
    $M.326 := $store.i8($M.326, $add.ref($add.ref(.str.121, $mul.ref(0, 85)), $mul.ref(37, 1)), 32);
    $M.326 := $store.i8($M.326, $add.ref($add.ref(.str.121, $mul.ref(0, 85)), $mul.ref(38, 1)), 40);
    $M.326 := $store.i8($M.326, $add.ref($add.ref(.str.121, $mul.ref(0, 85)), $mul.ref(39, 1)), 48);
    $M.326 := $store.i8($M.326, $add.ref($add.ref(.str.121, $mul.ref(0, 85)), $mul.ref(40, 1)), 43);
    $M.326 := $store.i8($M.326, $add.ref($add.ref(.str.121, $mul.ref(0, 85)), $mul.ref(41, 1)), 56);
    $M.326 := $store.i8($M.326, $add.ref($add.ref(.str.121, $mul.ref(0, 85)), $mul.ref(42, 1)), 41);
    $M.326 := $store.i8($M.326, $add.ref($add.ref(.str.121, $mul.ref(0, 85)), $mul.ref(43, 1)), 41);
    $M.326 := $store.i8($M.326, $add.ref($add.ref(.str.121, $mul.ref(0, 85)), $mul.ref(44, 1)), 32);
    $M.326 := $store.i8($M.326, $add.ref($add.ref(.str.121, $mul.ref(0, 85)), $mul.ref(45, 1)), 124);
    $M.326 := $store.i8($M.326, $add.ref($add.ref(.str.121, $mul.ref(0, 85)), $mul.ref(46, 1)), 32);
    $M.326 := $store.i8($M.326, $add.ref($add.ref(.str.121, $mul.ref(0, 85)), $mul.ref(47, 1)), 40);
    $M.326 := $store.i8($M.326, $add.ref($add.ref(.str.121, $mul.ref(0, 85)), $mul.ref(48, 1)), 40);
    $M.326 := $store.i8($M.326, $add.ref($add.ref(.str.121, $mul.ref(0, 85)), $mul.ref(49, 1)), 40);
    $M.326 := $store.i8($M.326, $add.ref($add.ref(.str.121, $mul.ref(0, 85)), $mul.ref(50, 1)), 48);
    $M.326 := $store.i8($M.326, $add.ref($add.ref(.str.121, $mul.ref(0, 85)), $mul.ref(51, 1)), 120);
    $M.326 := $store.i8($M.326, $add.ref($add.ref(.str.121, $mul.ref(0, 85)), $mul.ref(52, 1)), 97);
    $M.326 := $store.i8($M.326, $add.ref($add.ref(.str.121, $mul.ref(0, 85)), $mul.ref(53, 1)), 97);
    $M.326 := $store.i8($M.326, $add.ref($add.ref(.str.121, $mul.ref(0, 85)), $mul.ref(54, 1)), 41);
    $M.326 := $store.i8($M.326, $add.ref($add.ref(.str.121, $mul.ref(0, 85)), $mul.ref(55, 1)), 41);
    $M.326 := $store.i8($M.326, $add.ref($add.ref(.str.121, $mul.ref(0, 85)), $mul.ref(56, 1)), 32);
    $M.326 := $store.i8($M.326, $add.ref($add.ref(.str.121, $mul.ref(0, 85)), $mul.ref(57, 1)), 60);
    $M.326 := $store.i8($M.326, $add.ref($add.ref(.str.121, $mul.ref(0, 85)), $mul.ref(58, 1)), 60);
    $M.326 := $store.i8($M.326, $add.ref($add.ref(.str.121, $mul.ref(0, 85)), $mul.ref(59, 1)), 32);
    $M.326 := $store.i8($M.326, $add.ref($add.ref(.str.121, $mul.ref(0, 85)), $mul.ref(60, 1)), 48);
    $M.326 := $store.i8($M.326, $add.ref($add.ref(.str.121, $mul.ref(0, 85)), $mul.ref(61, 1)), 41);
    $M.326 := $store.i8($M.326, $add.ref($add.ref(.str.121, $mul.ref(0, 85)), $mul.ref(62, 1)), 32);
    $M.326 := $store.i8($M.326, $add.ref($add.ref(.str.121, $mul.ref(0, 85)), $mul.ref(63, 1)), 124);
    $M.326 := $store.i8($M.326, $add.ref($add.ref(.str.121, $mul.ref(0, 85)), $mul.ref(64, 1)), 32);
    $M.326 := $store.i8($M.326, $add.ref($add.ref(.str.121, $mul.ref(0, 85)), $mul.ref(65, 1)), 40);
    $M.326 := $store.i8($M.326, $add.ref($add.ref(.str.121, $mul.ref(0, 85)), $mul.ref(66, 1)), 40);
    $M.326 := $store.i8($M.326, $add.ref($add.ref(.str.121, $mul.ref(0, 85)), $mul.ref(67, 1)), 48);
    $M.326 := $store.i8($M.326, $add.ref($add.ref(.str.121, $mul.ref(0, 85)), $mul.ref(68, 1)), 41);
    $M.326 := $store.i8($M.326, $add.ref($add.ref(.str.121, $mul.ref(0, 85)), $mul.ref(69, 1)), 32);
    $M.326 := $store.i8($M.326, $add.ref($add.ref(.str.121, $mul.ref(0, 85)), $mul.ref(70, 1)), 60);
    $M.326 := $store.i8($M.326, $add.ref($add.ref(.str.121, $mul.ref(0, 85)), $mul.ref(71, 1)), 60);
    $M.326 := $store.i8($M.326, $add.ref($add.ref(.str.121, $mul.ref(0, 85)), $mul.ref(72, 1)), 32);
    $M.326 := $store.i8($M.326, $add.ref($add.ref(.str.121, $mul.ref(0, 85)), $mul.ref(73, 1)), 40);
    $M.326 := $store.i8($M.326, $add.ref($add.ref(.str.121, $mul.ref(0, 85)), $mul.ref(74, 1)), 40);
    $M.326 := $store.i8($M.326, $add.ref($add.ref(.str.121, $mul.ref(0, 85)), $mul.ref(75, 1)), 48);
    $M.326 := $store.i8($M.326, $add.ref($add.ref(.str.121, $mul.ref(0, 85)), $mul.ref(76, 1)), 43);
    $M.326 := $store.i8($M.326, $add.ref($add.ref(.str.121, $mul.ref(0, 85)), $mul.ref(77, 1)), 56);
    $M.326 := $store.i8($M.326, $add.ref($add.ref(.str.121, $mul.ref(0, 85)), $mul.ref(78, 1)), 41);
    $M.326 := $store.i8($M.326, $add.ref($add.ref(.str.121, $mul.ref(0, 85)), $mul.ref(79, 1)), 43);
    $M.326 := $store.i8($M.326, $add.ref($add.ref(.str.121, $mul.ref(0, 85)), $mul.ref(80, 1)), 56);
    $M.326 := $store.i8($M.326, $add.ref($add.ref(.str.121, $mul.ref(0, 85)), $mul.ref(81, 1)), 41);
    $M.326 := $store.i8($M.326, $add.ref($add.ref(.str.121, $mul.ref(0, 85)), $mul.ref(82, 1)), 41);
    $M.326 := $store.i8($M.326, $add.ref($add.ref(.str.121, $mul.ref(0, 85)), $mul.ref(83, 1)), 41);
    $M.326 := $store.i8($M.326, $add.ref($add.ref(.str.121, $mul.ref(0, 85)), $mul.ref(84, 1)), 0);
    $M.327 := $store.i8($M.327, .str.122, 40);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.122, $mul.ref(0, 85)), $mul.ref(1, 1)), 40);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.122, $mul.ref(0, 85)), $mul.ref(2, 1)), 40);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.122, $mul.ref(0, 85)), $mul.ref(3, 1)), 48);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.122, $mul.ref(0, 85)), $mul.ref(4, 1)), 85);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.122, $mul.ref(0, 85)), $mul.ref(5, 1)), 41);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.122, $mul.ref(0, 85)), $mul.ref(6, 1)), 32);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.122, $mul.ref(0, 85)), $mul.ref(7, 1)), 60);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.122, $mul.ref(0, 85)), $mul.ref(8, 1)), 60);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.122, $mul.ref(0, 85)), $mul.ref(9, 1)), 32);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.122, $mul.ref(0, 85)), $mul.ref(10, 1)), 40);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.122, $mul.ref(0, 85)), $mul.ref(11, 1)), 40);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.122, $mul.ref(0, 85)), $mul.ref(12, 1)), 40);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.122, $mul.ref(0, 85)), $mul.ref(13, 1)), 48);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.122, $mul.ref(0, 85)), $mul.ref(14, 1)), 43);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.122, $mul.ref(0, 85)), $mul.ref(15, 1)), 56);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.122, $mul.ref(0, 85)), $mul.ref(16, 1)), 41);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.122, $mul.ref(0, 85)), $mul.ref(17, 1)), 43);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.122, $mul.ref(0, 85)), $mul.ref(18, 1)), 56);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.122, $mul.ref(0, 85)), $mul.ref(19, 1)), 41);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.122, $mul.ref(0, 85)), $mul.ref(20, 1)), 43);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.122, $mul.ref(0, 85)), $mul.ref(21, 1)), 49);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.122, $mul.ref(0, 85)), $mul.ref(22, 1)), 52);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.122, $mul.ref(0, 85)), $mul.ref(23, 1)), 41);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.122, $mul.ref(0, 85)), $mul.ref(24, 1)), 41);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.122, $mul.ref(0, 85)), $mul.ref(25, 1)), 32);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.122, $mul.ref(0, 85)), $mul.ref(26, 1)), 124);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.122, $mul.ref(0, 85)), $mul.ref(27, 1)), 32);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.122, $mul.ref(0, 85)), $mul.ref(28, 1)), 40);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.122, $mul.ref(0, 85)), $mul.ref(29, 1)), 40);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.122, $mul.ref(0, 85)), $mul.ref(30, 1)), 40);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.122, $mul.ref(0, 85)), $mul.ref(31, 1)), 55);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.122, $mul.ref(0, 85)), $mul.ref(32, 1)), 41);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.122, $mul.ref(0, 85)), $mul.ref(33, 1)), 41);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.122, $mul.ref(0, 85)), $mul.ref(34, 1)), 32);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.122, $mul.ref(0, 85)), $mul.ref(35, 1)), 60);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.122, $mul.ref(0, 85)), $mul.ref(36, 1)), 60);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.122, $mul.ref(0, 85)), $mul.ref(37, 1)), 32);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.122, $mul.ref(0, 85)), $mul.ref(38, 1)), 40);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.122, $mul.ref(0, 85)), $mul.ref(39, 1)), 48);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.122, $mul.ref(0, 85)), $mul.ref(40, 1)), 43);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.122, $mul.ref(0, 85)), $mul.ref(41, 1)), 56);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.122, $mul.ref(0, 85)), $mul.ref(42, 1)), 41);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.122, $mul.ref(0, 85)), $mul.ref(43, 1)), 41);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.122, $mul.ref(0, 85)), $mul.ref(44, 1)), 32);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.122, $mul.ref(0, 85)), $mul.ref(45, 1)), 124);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.122, $mul.ref(0, 85)), $mul.ref(46, 1)), 32);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.122, $mul.ref(0, 85)), $mul.ref(47, 1)), 40);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.122, $mul.ref(0, 85)), $mul.ref(48, 1)), 40);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.122, $mul.ref(0, 85)), $mul.ref(49, 1)), 40);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.122, $mul.ref(0, 85)), $mul.ref(50, 1)), 48);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.122, $mul.ref(0, 85)), $mul.ref(51, 1)), 120);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.122, $mul.ref(0, 85)), $mul.ref(52, 1)), 97);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.122, $mul.ref(0, 85)), $mul.ref(53, 1)), 102);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.122, $mul.ref(0, 85)), $mul.ref(54, 1)), 41);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.122, $mul.ref(0, 85)), $mul.ref(55, 1)), 41);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.122, $mul.ref(0, 85)), $mul.ref(56, 1)), 32);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.122, $mul.ref(0, 85)), $mul.ref(57, 1)), 60);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.122, $mul.ref(0, 85)), $mul.ref(58, 1)), 60);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.122, $mul.ref(0, 85)), $mul.ref(59, 1)), 32);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.122, $mul.ref(0, 85)), $mul.ref(60, 1)), 48);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.122, $mul.ref(0, 85)), $mul.ref(61, 1)), 41);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.122, $mul.ref(0, 85)), $mul.ref(62, 1)), 32);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.122, $mul.ref(0, 85)), $mul.ref(63, 1)), 124);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.122, $mul.ref(0, 85)), $mul.ref(64, 1)), 32);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.122, $mul.ref(0, 85)), $mul.ref(65, 1)), 40);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.122, $mul.ref(0, 85)), $mul.ref(66, 1)), 40);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.122, $mul.ref(0, 85)), $mul.ref(67, 1)), 48);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.122, $mul.ref(0, 85)), $mul.ref(68, 1)), 41);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.122, $mul.ref(0, 85)), $mul.ref(69, 1)), 32);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.122, $mul.ref(0, 85)), $mul.ref(70, 1)), 60);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.122, $mul.ref(0, 85)), $mul.ref(71, 1)), 60);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.122, $mul.ref(0, 85)), $mul.ref(72, 1)), 32);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.122, $mul.ref(0, 85)), $mul.ref(73, 1)), 40);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.122, $mul.ref(0, 85)), $mul.ref(74, 1)), 40);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.122, $mul.ref(0, 85)), $mul.ref(75, 1)), 48);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.122, $mul.ref(0, 85)), $mul.ref(76, 1)), 43);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.122, $mul.ref(0, 85)), $mul.ref(77, 1)), 56);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.122, $mul.ref(0, 85)), $mul.ref(78, 1)), 41);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.122, $mul.ref(0, 85)), $mul.ref(79, 1)), 43);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.122, $mul.ref(0, 85)), $mul.ref(80, 1)), 56);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.122, $mul.ref(0, 85)), $mul.ref(81, 1)), 41);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.122, $mul.ref(0, 85)), $mul.ref(82, 1)), 41);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.122, $mul.ref(0, 85)), $mul.ref(83, 1)), 41);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.122, $mul.ref(0, 85)), $mul.ref(84, 1)), 0);
    $M.328 := $store.i8($M.328, .str.123, 40);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.123, $mul.ref(0, 85)), $mul.ref(1, 1)), 40);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.123, $mul.ref(0, 85)), $mul.ref(2, 1)), 40);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.123, $mul.ref(0, 85)), $mul.ref(3, 1)), 48);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.123, $mul.ref(0, 85)), $mul.ref(4, 1)), 85);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.123, $mul.ref(0, 85)), $mul.ref(5, 1)), 41);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.123, $mul.ref(0, 85)), $mul.ref(6, 1)), 32);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.123, $mul.ref(0, 85)), $mul.ref(7, 1)), 60);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.123, $mul.ref(0, 85)), $mul.ref(8, 1)), 60);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.123, $mul.ref(0, 85)), $mul.ref(9, 1)), 32);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.123, $mul.ref(0, 85)), $mul.ref(10, 1)), 40);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.123, $mul.ref(0, 85)), $mul.ref(11, 1)), 40);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.123, $mul.ref(0, 85)), $mul.ref(12, 1)), 40);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.123, $mul.ref(0, 85)), $mul.ref(13, 1)), 48);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.123, $mul.ref(0, 85)), $mul.ref(14, 1)), 43);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.123, $mul.ref(0, 85)), $mul.ref(15, 1)), 56);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.123, $mul.ref(0, 85)), $mul.ref(16, 1)), 41);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.123, $mul.ref(0, 85)), $mul.ref(17, 1)), 43);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.123, $mul.ref(0, 85)), $mul.ref(18, 1)), 56);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.123, $mul.ref(0, 85)), $mul.ref(19, 1)), 41);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.123, $mul.ref(0, 85)), $mul.ref(20, 1)), 43);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.123, $mul.ref(0, 85)), $mul.ref(21, 1)), 49);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.123, $mul.ref(0, 85)), $mul.ref(22, 1)), 52);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.123, $mul.ref(0, 85)), $mul.ref(23, 1)), 41);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.123, $mul.ref(0, 85)), $mul.ref(24, 1)), 41);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.123, $mul.ref(0, 85)), $mul.ref(25, 1)), 32);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.123, $mul.ref(0, 85)), $mul.ref(26, 1)), 124);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.123, $mul.ref(0, 85)), $mul.ref(27, 1)), 32);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.123, $mul.ref(0, 85)), $mul.ref(28, 1)), 40);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.123, $mul.ref(0, 85)), $mul.ref(29, 1)), 40);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.123, $mul.ref(0, 85)), $mul.ref(30, 1)), 40);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.123, $mul.ref(0, 85)), $mul.ref(31, 1)), 55);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.123, $mul.ref(0, 85)), $mul.ref(32, 1)), 41);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.123, $mul.ref(0, 85)), $mul.ref(33, 1)), 41);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.123, $mul.ref(0, 85)), $mul.ref(34, 1)), 32);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.123, $mul.ref(0, 85)), $mul.ref(35, 1)), 60);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.123, $mul.ref(0, 85)), $mul.ref(36, 1)), 60);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.123, $mul.ref(0, 85)), $mul.ref(37, 1)), 32);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.123, $mul.ref(0, 85)), $mul.ref(38, 1)), 40);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.123, $mul.ref(0, 85)), $mul.ref(39, 1)), 48);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.123, $mul.ref(0, 85)), $mul.ref(40, 1)), 43);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.123, $mul.ref(0, 85)), $mul.ref(41, 1)), 56);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.123, $mul.ref(0, 85)), $mul.ref(42, 1)), 41);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.123, $mul.ref(0, 85)), $mul.ref(43, 1)), 41);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.123, $mul.ref(0, 85)), $mul.ref(44, 1)), 32);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.123, $mul.ref(0, 85)), $mul.ref(45, 1)), 124);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.123, $mul.ref(0, 85)), $mul.ref(46, 1)), 32);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.123, $mul.ref(0, 85)), $mul.ref(47, 1)), 40);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.123, $mul.ref(0, 85)), $mul.ref(48, 1)), 40);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.123, $mul.ref(0, 85)), $mul.ref(49, 1)), 40);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.123, $mul.ref(0, 85)), $mul.ref(50, 1)), 48);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.123, $mul.ref(0, 85)), $mul.ref(51, 1)), 120);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.123, $mul.ref(0, 85)), $mul.ref(52, 1)), 98);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.123, $mul.ref(0, 85)), $mul.ref(53, 1)), 48);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.123, $mul.ref(0, 85)), $mul.ref(54, 1)), 41);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.123, $mul.ref(0, 85)), $mul.ref(55, 1)), 41);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.123, $mul.ref(0, 85)), $mul.ref(56, 1)), 32);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.123, $mul.ref(0, 85)), $mul.ref(57, 1)), 60);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.123, $mul.ref(0, 85)), $mul.ref(58, 1)), 60);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.123, $mul.ref(0, 85)), $mul.ref(59, 1)), 32);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.123, $mul.ref(0, 85)), $mul.ref(60, 1)), 48);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.123, $mul.ref(0, 85)), $mul.ref(61, 1)), 41);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.123, $mul.ref(0, 85)), $mul.ref(62, 1)), 32);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.123, $mul.ref(0, 85)), $mul.ref(63, 1)), 124);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.123, $mul.ref(0, 85)), $mul.ref(64, 1)), 32);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.123, $mul.ref(0, 85)), $mul.ref(65, 1)), 40);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.123, $mul.ref(0, 85)), $mul.ref(66, 1)), 40);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.123, $mul.ref(0, 85)), $mul.ref(67, 1)), 48);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.123, $mul.ref(0, 85)), $mul.ref(68, 1)), 41);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.123, $mul.ref(0, 85)), $mul.ref(69, 1)), 32);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.123, $mul.ref(0, 85)), $mul.ref(70, 1)), 60);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.123, $mul.ref(0, 85)), $mul.ref(71, 1)), 60);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.123, $mul.ref(0, 85)), $mul.ref(72, 1)), 32);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.123, $mul.ref(0, 85)), $mul.ref(73, 1)), 40);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.123, $mul.ref(0, 85)), $mul.ref(74, 1)), 40);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.123, $mul.ref(0, 85)), $mul.ref(75, 1)), 48);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.123, $mul.ref(0, 85)), $mul.ref(76, 1)), 43);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.123, $mul.ref(0, 85)), $mul.ref(77, 1)), 56);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.123, $mul.ref(0, 85)), $mul.ref(78, 1)), 41);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.123, $mul.ref(0, 85)), $mul.ref(79, 1)), 43);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.123, $mul.ref(0, 85)), $mul.ref(80, 1)), 56);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.123, $mul.ref(0, 85)), $mul.ref(81, 1)), 41);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.123, $mul.ref(0, 85)), $mul.ref(82, 1)), 41);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.123, $mul.ref(0, 85)), $mul.ref(83, 1)), 41);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.123, $mul.ref(0, 85)), $mul.ref(84, 1)), 0);
    $M.329 := $store.i8($M.329, .str.124, 40);
    $M.329 := $store.i8($M.329, $add.ref($add.ref(.str.124, $mul.ref(0, 85)), $mul.ref(1, 1)), 40);
    $M.329 := $store.i8($M.329, $add.ref($add.ref(.str.124, $mul.ref(0, 85)), $mul.ref(2, 1)), 40);
    $M.329 := $store.i8($M.329, $add.ref($add.ref(.str.124, $mul.ref(0, 85)), $mul.ref(3, 1)), 48);
    $M.329 := $store.i8($M.329, $add.ref($add.ref(.str.124, $mul.ref(0, 85)), $mul.ref(4, 1)), 85);
    $M.329 := $store.i8($M.329, $add.ref($add.ref(.str.124, $mul.ref(0, 85)), $mul.ref(5, 1)), 41);
    $M.329 := $store.i8($M.329, $add.ref($add.ref(.str.124, $mul.ref(0, 85)), $mul.ref(6, 1)), 32);
    $M.329 := $store.i8($M.329, $add.ref($add.ref(.str.124, $mul.ref(0, 85)), $mul.ref(7, 1)), 60);
    $M.329 := $store.i8($M.329, $add.ref($add.ref(.str.124, $mul.ref(0, 85)), $mul.ref(8, 1)), 60);
    $M.329 := $store.i8($M.329, $add.ref($add.ref(.str.124, $mul.ref(0, 85)), $mul.ref(9, 1)), 32);
    $M.329 := $store.i8($M.329, $add.ref($add.ref(.str.124, $mul.ref(0, 85)), $mul.ref(10, 1)), 40);
    $M.329 := $store.i8($M.329, $add.ref($add.ref(.str.124, $mul.ref(0, 85)), $mul.ref(11, 1)), 40);
    $M.329 := $store.i8($M.329, $add.ref($add.ref(.str.124, $mul.ref(0, 85)), $mul.ref(12, 1)), 40);
    $M.329 := $store.i8($M.329, $add.ref($add.ref(.str.124, $mul.ref(0, 85)), $mul.ref(13, 1)), 48);
    $M.329 := $store.i8($M.329, $add.ref($add.ref(.str.124, $mul.ref(0, 85)), $mul.ref(14, 1)), 43);
    $M.329 := $store.i8($M.329, $add.ref($add.ref(.str.124, $mul.ref(0, 85)), $mul.ref(15, 1)), 56);
    $M.329 := $store.i8($M.329, $add.ref($add.ref(.str.124, $mul.ref(0, 85)), $mul.ref(16, 1)), 41);
    $M.329 := $store.i8($M.329, $add.ref($add.ref(.str.124, $mul.ref(0, 85)), $mul.ref(17, 1)), 43);
    $M.329 := $store.i8($M.329, $add.ref($add.ref(.str.124, $mul.ref(0, 85)), $mul.ref(18, 1)), 56);
    $M.329 := $store.i8($M.329, $add.ref($add.ref(.str.124, $mul.ref(0, 85)), $mul.ref(19, 1)), 41);
    $M.329 := $store.i8($M.329, $add.ref($add.ref(.str.124, $mul.ref(0, 85)), $mul.ref(20, 1)), 43);
    $M.329 := $store.i8($M.329, $add.ref($add.ref(.str.124, $mul.ref(0, 85)), $mul.ref(21, 1)), 49);
    $M.329 := $store.i8($M.329, $add.ref($add.ref(.str.124, $mul.ref(0, 85)), $mul.ref(22, 1)), 52);
    $M.329 := $store.i8($M.329, $add.ref($add.ref(.str.124, $mul.ref(0, 85)), $mul.ref(23, 1)), 41);
    $M.329 := $store.i8($M.329, $add.ref($add.ref(.str.124, $mul.ref(0, 85)), $mul.ref(24, 1)), 41);
    $M.329 := $store.i8($M.329, $add.ref($add.ref(.str.124, $mul.ref(0, 85)), $mul.ref(25, 1)), 32);
    $M.329 := $store.i8($M.329, $add.ref($add.ref(.str.124, $mul.ref(0, 85)), $mul.ref(26, 1)), 124);
    $M.329 := $store.i8($M.329, $add.ref($add.ref(.str.124, $mul.ref(0, 85)), $mul.ref(27, 1)), 32);
    $M.329 := $store.i8($M.329, $add.ref($add.ref(.str.124, $mul.ref(0, 85)), $mul.ref(28, 1)), 40);
    $M.329 := $store.i8($M.329, $add.ref($add.ref(.str.124, $mul.ref(0, 85)), $mul.ref(29, 1)), 40);
    $M.329 := $store.i8($M.329, $add.ref($add.ref(.str.124, $mul.ref(0, 85)), $mul.ref(30, 1)), 40);
    $M.329 := $store.i8($M.329, $add.ref($add.ref(.str.124, $mul.ref(0, 85)), $mul.ref(31, 1)), 55);
    $M.329 := $store.i8($M.329, $add.ref($add.ref(.str.124, $mul.ref(0, 85)), $mul.ref(32, 1)), 41);
    $M.329 := $store.i8($M.329, $add.ref($add.ref(.str.124, $mul.ref(0, 85)), $mul.ref(33, 1)), 41);
    $M.329 := $store.i8($M.329, $add.ref($add.ref(.str.124, $mul.ref(0, 85)), $mul.ref(34, 1)), 32);
    $M.329 := $store.i8($M.329, $add.ref($add.ref(.str.124, $mul.ref(0, 85)), $mul.ref(35, 1)), 60);
    $M.329 := $store.i8($M.329, $add.ref($add.ref(.str.124, $mul.ref(0, 85)), $mul.ref(36, 1)), 60);
    $M.329 := $store.i8($M.329, $add.ref($add.ref(.str.124, $mul.ref(0, 85)), $mul.ref(37, 1)), 32);
    $M.329 := $store.i8($M.329, $add.ref($add.ref(.str.124, $mul.ref(0, 85)), $mul.ref(38, 1)), 40);
    $M.329 := $store.i8($M.329, $add.ref($add.ref(.str.124, $mul.ref(0, 85)), $mul.ref(39, 1)), 48);
    $M.329 := $store.i8($M.329, $add.ref($add.ref(.str.124, $mul.ref(0, 85)), $mul.ref(40, 1)), 43);
    $M.329 := $store.i8($M.329, $add.ref($add.ref(.str.124, $mul.ref(0, 85)), $mul.ref(41, 1)), 56);
    $M.329 := $store.i8($M.329, $add.ref($add.ref(.str.124, $mul.ref(0, 85)), $mul.ref(42, 1)), 41);
    $M.329 := $store.i8($M.329, $add.ref($add.ref(.str.124, $mul.ref(0, 85)), $mul.ref(43, 1)), 41);
    $M.329 := $store.i8($M.329, $add.ref($add.ref(.str.124, $mul.ref(0, 85)), $mul.ref(44, 1)), 32);
    $M.329 := $store.i8($M.329, $add.ref($add.ref(.str.124, $mul.ref(0, 85)), $mul.ref(45, 1)), 124);
    $M.329 := $store.i8($M.329, $add.ref($add.ref(.str.124, $mul.ref(0, 85)), $mul.ref(46, 1)), 32);
    $M.329 := $store.i8($M.329, $add.ref($add.ref(.str.124, $mul.ref(0, 85)), $mul.ref(47, 1)), 40);
    $M.329 := $store.i8($M.329, $add.ref($add.ref(.str.124, $mul.ref(0, 85)), $mul.ref(48, 1)), 40);
    $M.329 := $store.i8($M.329, $add.ref($add.ref(.str.124, $mul.ref(0, 85)), $mul.ref(49, 1)), 40);
    $M.329 := $store.i8($M.329, $add.ref($add.ref(.str.124, $mul.ref(0, 85)), $mul.ref(50, 1)), 48);
    $M.329 := $store.i8($M.329, $add.ref($add.ref(.str.124, $mul.ref(0, 85)), $mul.ref(51, 1)), 120);
    $M.329 := $store.i8($M.329, $add.ref($add.ref(.str.124, $mul.ref(0, 85)), $mul.ref(52, 1)), 98);
    $M.329 := $store.i8($M.329, $add.ref($add.ref(.str.124, $mul.ref(0, 85)), $mul.ref(53, 1)), 49);
    $M.329 := $store.i8($M.329, $add.ref($add.ref(.str.124, $mul.ref(0, 85)), $mul.ref(54, 1)), 41);
    $M.329 := $store.i8($M.329, $add.ref($add.ref(.str.124, $mul.ref(0, 85)), $mul.ref(55, 1)), 41);
    $M.329 := $store.i8($M.329, $add.ref($add.ref(.str.124, $mul.ref(0, 85)), $mul.ref(56, 1)), 32);
    $M.329 := $store.i8($M.329, $add.ref($add.ref(.str.124, $mul.ref(0, 85)), $mul.ref(57, 1)), 60);
    $M.329 := $store.i8($M.329, $add.ref($add.ref(.str.124, $mul.ref(0, 85)), $mul.ref(58, 1)), 60);
    $M.329 := $store.i8($M.329, $add.ref($add.ref(.str.124, $mul.ref(0, 85)), $mul.ref(59, 1)), 32);
    $M.329 := $store.i8($M.329, $add.ref($add.ref(.str.124, $mul.ref(0, 85)), $mul.ref(60, 1)), 48);
    $M.329 := $store.i8($M.329, $add.ref($add.ref(.str.124, $mul.ref(0, 85)), $mul.ref(61, 1)), 41);
    $M.329 := $store.i8($M.329, $add.ref($add.ref(.str.124, $mul.ref(0, 85)), $mul.ref(62, 1)), 32);
    $M.329 := $store.i8($M.329, $add.ref($add.ref(.str.124, $mul.ref(0, 85)), $mul.ref(63, 1)), 124);
    $M.329 := $store.i8($M.329, $add.ref($add.ref(.str.124, $mul.ref(0, 85)), $mul.ref(64, 1)), 32);
    $M.329 := $store.i8($M.329, $add.ref($add.ref(.str.124, $mul.ref(0, 85)), $mul.ref(65, 1)), 40);
    $M.329 := $store.i8($M.329, $add.ref($add.ref(.str.124, $mul.ref(0, 85)), $mul.ref(66, 1)), 40);
    $M.329 := $store.i8($M.329, $add.ref($add.ref(.str.124, $mul.ref(0, 85)), $mul.ref(67, 1)), 48);
    $M.329 := $store.i8($M.329, $add.ref($add.ref(.str.124, $mul.ref(0, 85)), $mul.ref(68, 1)), 41);
    $M.329 := $store.i8($M.329, $add.ref($add.ref(.str.124, $mul.ref(0, 85)), $mul.ref(69, 1)), 32);
    $M.329 := $store.i8($M.329, $add.ref($add.ref(.str.124, $mul.ref(0, 85)), $mul.ref(70, 1)), 60);
    $M.329 := $store.i8($M.329, $add.ref($add.ref(.str.124, $mul.ref(0, 85)), $mul.ref(71, 1)), 60);
    $M.329 := $store.i8($M.329, $add.ref($add.ref(.str.124, $mul.ref(0, 85)), $mul.ref(72, 1)), 32);
    $M.329 := $store.i8($M.329, $add.ref($add.ref(.str.124, $mul.ref(0, 85)), $mul.ref(73, 1)), 40);
    $M.329 := $store.i8($M.329, $add.ref($add.ref(.str.124, $mul.ref(0, 85)), $mul.ref(74, 1)), 40);
    $M.329 := $store.i8($M.329, $add.ref($add.ref(.str.124, $mul.ref(0, 85)), $mul.ref(75, 1)), 48);
    $M.329 := $store.i8($M.329, $add.ref($add.ref(.str.124, $mul.ref(0, 85)), $mul.ref(76, 1)), 43);
    $M.329 := $store.i8($M.329, $add.ref($add.ref(.str.124, $mul.ref(0, 85)), $mul.ref(77, 1)), 56);
    $M.329 := $store.i8($M.329, $add.ref($add.ref(.str.124, $mul.ref(0, 85)), $mul.ref(78, 1)), 41);
    $M.329 := $store.i8($M.329, $add.ref($add.ref(.str.124, $mul.ref(0, 85)), $mul.ref(79, 1)), 43);
    $M.329 := $store.i8($M.329, $add.ref($add.ref(.str.124, $mul.ref(0, 85)), $mul.ref(80, 1)), 56);
    $M.329 := $store.i8($M.329, $add.ref($add.ref(.str.124, $mul.ref(0, 85)), $mul.ref(81, 1)), 41);
    $M.329 := $store.i8($M.329, $add.ref($add.ref(.str.124, $mul.ref(0, 85)), $mul.ref(82, 1)), 41);
    $M.329 := $store.i8($M.329, $add.ref($add.ref(.str.124, $mul.ref(0, 85)), $mul.ref(83, 1)), 41);
    $M.329 := $store.i8($M.329, $add.ref($add.ref(.str.124, $mul.ref(0, 85)), $mul.ref(84, 1)), 0);
    $M.330 := $store.i8($M.330, .str.125, 40);
    $M.330 := $store.i8($M.330, $add.ref($add.ref(.str.125, $mul.ref(0, 85)), $mul.ref(1, 1)), 40);
    $M.330 := $store.i8($M.330, $add.ref($add.ref(.str.125, $mul.ref(0, 85)), $mul.ref(2, 1)), 40);
    $M.330 := $store.i8($M.330, $add.ref($add.ref(.str.125, $mul.ref(0, 85)), $mul.ref(3, 1)), 48);
    $M.330 := $store.i8($M.330, $add.ref($add.ref(.str.125, $mul.ref(0, 85)), $mul.ref(4, 1)), 85);
    $M.330 := $store.i8($M.330, $add.ref($add.ref(.str.125, $mul.ref(0, 85)), $mul.ref(5, 1)), 41);
    $M.330 := $store.i8($M.330, $add.ref($add.ref(.str.125, $mul.ref(0, 85)), $mul.ref(6, 1)), 32);
    $M.330 := $store.i8($M.330, $add.ref($add.ref(.str.125, $mul.ref(0, 85)), $mul.ref(7, 1)), 60);
    $M.330 := $store.i8($M.330, $add.ref($add.ref(.str.125, $mul.ref(0, 85)), $mul.ref(8, 1)), 60);
    $M.330 := $store.i8($M.330, $add.ref($add.ref(.str.125, $mul.ref(0, 85)), $mul.ref(9, 1)), 32);
    $M.330 := $store.i8($M.330, $add.ref($add.ref(.str.125, $mul.ref(0, 85)), $mul.ref(10, 1)), 40);
    $M.330 := $store.i8($M.330, $add.ref($add.ref(.str.125, $mul.ref(0, 85)), $mul.ref(11, 1)), 40);
    $M.330 := $store.i8($M.330, $add.ref($add.ref(.str.125, $mul.ref(0, 85)), $mul.ref(12, 1)), 40);
    $M.330 := $store.i8($M.330, $add.ref($add.ref(.str.125, $mul.ref(0, 85)), $mul.ref(13, 1)), 48);
    $M.330 := $store.i8($M.330, $add.ref($add.ref(.str.125, $mul.ref(0, 85)), $mul.ref(14, 1)), 43);
    $M.330 := $store.i8($M.330, $add.ref($add.ref(.str.125, $mul.ref(0, 85)), $mul.ref(15, 1)), 56);
    $M.330 := $store.i8($M.330, $add.ref($add.ref(.str.125, $mul.ref(0, 85)), $mul.ref(16, 1)), 41);
    $M.330 := $store.i8($M.330, $add.ref($add.ref(.str.125, $mul.ref(0, 85)), $mul.ref(17, 1)), 43);
    $M.330 := $store.i8($M.330, $add.ref($add.ref(.str.125, $mul.ref(0, 85)), $mul.ref(18, 1)), 56);
    $M.330 := $store.i8($M.330, $add.ref($add.ref(.str.125, $mul.ref(0, 85)), $mul.ref(19, 1)), 41);
    $M.330 := $store.i8($M.330, $add.ref($add.ref(.str.125, $mul.ref(0, 85)), $mul.ref(20, 1)), 43);
    $M.330 := $store.i8($M.330, $add.ref($add.ref(.str.125, $mul.ref(0, 85)), $mul.ref(21, 1)), 49);
    $M.330 := $store.i8($M.330, $add.ref($add.ref(.str.125, $mul.ref(0, 85)), $mul.ref(22, 1)), 52);
    $M.330 := $store.i8($M.330, $add.ref($add.ref(.str.125, $mul.ref(0, 85)), $mul.ref(23, 1)), 41);
    $M.330 := $store.i8($M.330, $add.ref($add.ref(.str.125, $mul.ref(0, 85)), $mul.ref(24, 1)), 41);
    $M.330 := $store.i8($M.330, $add.ref($add.ref(.str.125, $mul.ref(0, 85)), $mul.ref(25, 1)), 32);
    $M.330 := $store.i8($M.330, $add.ref($add.ref(.str.125, $mul.ref(0, 85)), $mul.ref(26, 1)), 124);
    $M.330 := $store.i8($M.330, $add.ref($add.ref(.str.125, $mul.ref(0, 85)), $mul.ref(27, 1)), 32);
    $M.330 := $store.i8($M.330, $add.ref($add.ref(.str.125, $mul.ref(0, 85)), $mul.ref(28, 1)), 40);
    $M.330 := $store.i8($M.330, $add.ref($add.ref(.str.125, $mul.ref(0, 85)), $mul.ref(29, 1)), 40);
    $M.330 := $store.i8($M.330, $add.ref($add.ref(.str.125, $mul.ref(0, 85)), $mul.ref(30, 1)), 40);
    $M.330 := $store.i8($M.330, $add.ref($add.ref(.str.125, $mul.ref(0, 85)), $mul.ref(31, 1)), 55);
    $M.330 := $store.i8($M.330, $add.ref($add.ref(.str.125, $mul.ref(0, 85)), $mul.ref(32, 1)), 41);
    $M.330 := $store.i8($M.330, $add.ref($add.ref(.str.125, $mul.ref(0, 85)), $mul.ref(33, 1)), 41);
    $M.330 := $store.i8($M.330, $add.ref($add.ref(.str.125, $mul.ref(0, 85)), $mul.ref(34, 1)), 32);
    $M.330 := $store.i8($M.330, $add.ref($add.ref(.str.125, $mul.ref(0, 85)), $mul.ref(35, 1)), 60);
    $M.330 := $store.i8($M.330, $add.ref($add.ref(.str.125, $mul.ref(0, 85)), $mul.ref(36, 1)), 60);
    $M.330 := $store.i8($M.330, $add.ref($add.ref(.str.125, $mul.ref(0, 85)), $mul.ref(37, 1)), 32);
    $M.330 := $store.i8($M.330, $add.ref($add.ref(.str.125, $mul.ref(0, 85)), $mul.ref(38, 1)), 40);
    $M.330 := $store.i8($M.330, $add.ref($add.ref(.str.125, $mul.ref(0, 85)), $mul.ref(39, 1)), 48);
    $M.330 := $store.i8($M.330, $add.ref($add.ref(.str.125, $mul.ref(0, 85)), $mul.ref(40, 1)), 43);
    $M.330 := $store.i8($M.330, $add.ref($add.ref(.str.125, $mul.ref(0, 85)), $mul.ref(41, 1)), 56);
    $M.330 := $store.i8($M.330, $add.ref($add.ref(.str.125, $mul.ref(0, 85)), $mul.ref(42, 1)), 41);
    $M.330 := $store.i8($M.330, $add.ref($add.ref(.str.125, $mul.ref(0, 85)), $mul.ref(43, 1)), 41);
    $M.330 := $store.i8($M.330, $add.ref($add.ref(.str.125, $mul.ref(0, 85)), $mul.ref(44, 1)), 32);
    $M.330 := $store.i8($M.330, $add.ref($add.ref(.str.125, $mul.ref(0, 85)), $mul.ref(45, 1)), 124);
    $M.330 := $store.i8($M.330, $add.ref($add.ref(.str.125, $mul.ref(0, 85)), $mul.ref(46, 1)), 32);
    $M.330 := $store.i8($M.330, $add.ref($add.ref(.str.125, $mul.ref(0, 85)), $mul.ref(47, 1)), 40);
    $M.330 := $store.i8($M.330, $add.ref($add.ref(.str.125, $mul.ref(0, 85)), $mul.ref(48, 1)), 40);
    $M.330 := $store.i8($M.330, $add.ref($add.ref(.str.125, $mul.ref(0, 85)), $mul.ref(49, 1)), 40);
    $M.330 := $store.i8($M.330, $add.ref($add.ref(.str.125, $mul.ref(0, 85)), $mul.ref(50, 1)), 48);
    $M.330 := $store.i8($M.330, $add.ref($add.ref(.str.125, $mul.ref(0, 85)), $mul.ref(51, 1)), 120);
    $M.330 := $store.i8($M.330, $add.ref($add.ref(.str.125, $mul.ref(0, 85)), $mul.ref(52, 1)), 98);
    $M.330 := $store.i8($M.330, $add.ref($add.ref(.str.125, $mul.ref(0, 85)), $mul.ref(53, 1)), 50);
    $M.330 := $store.i8($M.330, $add.ref($add.ref(.str.125, $mul.ref(0, 85)), $mul.ref(54, 1)), 41);
    $M.330 := $store.i8($M.330, $add.ref($add.ref(.str.125, $mul.ref(0, 85)), $mul.ref(55, 1)), 41);
    $M.330 := $store.i8($M.330, $add.ref($add.ref(.str.125, $mul.ref(0, 85)), $mul.ref(56, 1)), 32);
    $M.330 := $store.i8($M.330, $add.ref($add.ref(.str.125, $mul.ref(0, 85)), $mul.ref(57, 1)), 60);
    $M.330 := $store.i8($M.330, $add.ref($add.ref(.str.125, $mul.ref(0, 85)), $mul.ref(58, 1)), 60);
    $M.330 := $store.i8($M.330, $add.ref($add.ref(.str.125, $mul.ref(0, 85)), $mul.ref(59, 1)), 32);
    $M.330 := $store.i8($M.330, $add.ref($add.ref(.str.125, $mul.ref(0, 85)), $mul.ref(60, 1)), 48);
    $M.330 := $store.i8($M.330, $add.ref($add.ref(.str.125, $mul.ref(0, 85)), $mul.ref(61, 1)), 41);
    $M.330 := $store.i8($M.330, $add.ref($add.ref(.str.125, $mul.ref(0, 85)), $mul.ref(62, 1)), 32);
    $M.330 := $store.i8($M.330, $add.ref($add.ref(.str.125, $mul.ref(0, 85)), $mul.ref(63, 1)), 124);
    $M.330 := $store.i8($M.330, $add.ref($add.ref(.str.125, $mul.ref(0, 85)), $mul.ref(64, 1)), 32);
    $M.330 := $store.i8($M.330, $add.ref($add.ref(.str.125, $mul.ref(0, 85)), $mul.ref(65, 1)), 40);
    $M.330 := $store.i8($M.330, $add.ref($add.ref(.str.125, $mul.ref(0, 85)), $mul.ref(66, 1)), 40);
    $M.330 := $store.i8($M.330, $add.ref($add.ref(.str.125, $mul.ref(0, 85)), $mul.ref(67, 1)), 48);
    $M.330 := $store.i8($M.330, $add.ref($add.ref(.str.125, $mul.ref(0, 85)), $mul.ref(68, 1)), 41);
    $M.330 := $store.i8($M.330, $add.ref($add.ref(.str.125, $mul.ref(0, 85)), $mul.ref(69, 1)), 32);
    $M.330 := $store.i8($M.330, $add.ref($add.ref(.str.125, $mul.ref(0, 85)), $mul.ref(70, 1)), 60);
    $M.330 := $store.i8($M.330, $add.ref($add.ref(.str.125, $mul.ref(0, 85)), $mul.ref(71, 1)), 60);
    $M.330 := $store.i8($M.330, $add.ref($add.ref(.str.125, $mul.ref(0, 85)), $mul.ref(72, 1)), 32);
    $M.330 := $store.i8($M.330, $add.ref($add.ref(.str.125, $mul.ref(0, 85)), $mul.ref(73, 1)), 40);
    $M.330 := $store.i8($M.330, $add.ref($add.ref(.str.125, $mul.ref(0, 85)), $mul.ref(74, 1)), 40);
    $M.330 := $store.i8($M.330, $add.ref($add.ref(.str.125, $mul.ref(0, 85)), $mul.ref(75, 1)), 48);
    $M.330 := $store.i8($M.330, $add.ref($add.ref(.str.125, $mul.ref(0, 85)), $mul.ref(76, 1)), 43);
    $M.330 := $store.i8($M.330, $add.ref($add.ref(.str.125, $mul.ref(0, 85)), $mul.ref(77, 1)), 56);
    $M.330 := $store.i8($M.330, $add.ref($add.ref(.str.125, $mul.ref(0, 85)), $mul.ref(78, 1)), 41);
    $M.330 := $store.i8($M.330, $add.ref($add.ref(.str.125, $mul.ref(0, 85)), $mul.ref(79, 1)), 43);
    $M.330 := $store.i8($M.330, $add.ref($add.ref(.str.125, $mul.ref(0, 85)), $mul.ref(80, 1)), 56);
    $M.330 := $store.i8($M.330, $add.ref($add.ref(.str.125, $mul.ref(0, 85)), $mul.ref(81, 1)), 41);
    $M.330 := $store.i8($M.330, $add.ref($add.ref(.str.125, $mul.ref(0, 85)), $mul.ref(82, 1)), 41);
    $M.330 := $store.i8($M.330, $add.ref($add.ref(.str.125, $mul.ref(0, 85)), $mul.ref(83, 1)), 41);
    $M.330 := $store.i8($M.330, $add.ref($add.ref(.str.125, $mul.ref(0, 85)), $mul.ref(84, 1)), 0);
    $M.331 := $store.i8($M.331, .str.128, 40);
    $M.331 := $store.i8($M.331, $add.ref($add.ref(.str.128, $mul.ref(0, 85)), $mul.ref(1, 1)), 40);
    $M.331 := $store.i8($M.331, $add.ref($add.ref(.str.128, $mul.ref(0, 85)), $mul.ref(2, 1)), 40);
    $M.331 := $store.i8($M.331, $add.ref($add.ref(.str.128, $mul.ref(0, 85)), $mul.ref(3, 1)), 48);
    $M.331 := $store.i8($M.331, $add.ref($add.ref(.str.128, $mul.ref(0, 85)), $mul.ref(4, 1)), 85);
    $M.331 := $store.i8($M.331, $add.ref($add.ref(.str.128, $mul.ref(0, 85)), $mul.ref(5, 1)), 41);
    $M.331 := $store.i8($M.331, $add.ref($add.ref(.str.128, $mul.ref(0, 85)), $mul.ref(6, 1)), 32);
    $M.331 := $store.i8($M.331, $add.ref($add.ref(.str.128, $mul.ref(0, 85)), $mul.ref(7, 1)), 60);
    $M.331 := $store.i8($M.331, $add.ref($add.ref(.str.128, $mul.ref(0, 85)), $mul.ref(8, 1)), 60);
    $M.331 := $store.i8($M.331, $add.ref($add.ref(.str.128, $mul.ref(0, 85)), $mul.ref(9, 1)), 32);
    $M.331 := $store.i8($M.331, $add.ref($add.ref(.str.128, $mul.ref(0, 85)), $mul.ref(10, 1)), 40);
    $M.331 := $store.i8($M.331, $add.ref($add.ref(.str.128, $mul.ref(0, 85)), $mul.ref(11, 1)), 40);
    $M.331 := $store.i8($M.331, $add.ref($add.ref(.str.128, $mul.ref(0, 85)), $mul.ref(12, 1)), 40);
    $M.331 := $store.i8($M.331, $add.ref($add.ref(.str.128, $mul.ref(0, 85)), $mul.ref(13, 1)), 48);
    $M.331 := $store.i8($M.331, $add.ref($add.ref(.str.128, $mul.ref(0, 85)), $mul.ref(14, 1)), 43);
    $M.331 := $store.i8($M.331, $add.ref($add.ref(.str.128, $mul.ref(0, 85)), $mul.ref(15, 1)), 56);
    $M.331 := $store.i8($M.331, $add.ref($add.ref(.str.128, $mul.ref(0, 85)), $mul.ref(16, 1)), 41);
    $M.331 := $store.i8($M.331, $add.ref($add.ref(.str.128, $mul.ref(0, 85)), $mul.ref(17, 1)), 43);
    $M.331 := $store.i8($M.331, $add.ref($add.ref(.str.128, $mul.ref(0, 85)), $mul.ref(18, 1)), 56);
    $M.331 := $store.i8($M.331, $add.ref($add.ref(.str.128, $mul.ref(0, 85)), $mul.ref(19, 1)), 41);
    $M.331 := $store.i8($M.331, $add.ref($add.ref(.str.128, $mul.ref(0, 85)), $mul.ref(20, 1)), 43);
    $M.331 := $store.i8($M.331, $add.ref($add.ref(.str.128, $mul.ref(0, 85)), $mul.ref(21, 1)), 49);
    $M.331 := $store.i8($M.331, $add.ref($add.ref(.str.128, $mul.ref(0, 85)), $mul.ref(22, 1)), 52);
    $M.331 := $store.i8($M.331, $add.ref($add.ref(.str.128, $mul.ref(0, 85)), $mul.ref(23, 1)), 41);
    $M.331 := $store.i8($M.331, $add.ref($add.ref(.str.128, $mul.ref(0, 85)), $mul.ref(24, 1)), 41);
    $M.331 := $store.i8($M.331, $add.ref($add.ref(.str.128, $mul.ref(0, 85)), $mul.ref(25, 1)), 32);
    $M.331 := $store.i8($M.331, $add.ref($add.ref(.str.128, $mul.ref(0, 85)), $mul.ref(26, 1)), 124);
    $M.331 := $store.i8($M.331, $add.ref($add.ref(.str.128, $mul.ref(0, 85)), $mul.ref(27, 1)), 32);
    $M.331 := $store.i8($M.331, $add.ref($add.ref(.str.128, $mul.ref(0, 85)), $mul.ref(28, 1)), 40);
    $M.331 := $store.i8($M.331, $add.ref($add.ref(.str.128, $mul.ref(0, 85)), $mul.ref(29, 1)), 40);
    $M.331 := $store.i8($M.331, $add.ref($add.ref(.str.128, $mul.ref(0, 85)), $mul.ref(30, 1)), 40);
    $M.331 := $store.i8($M.331, $add.ref($add.ref(.str.128, $mul.ref(0, 85)), $mul.ref(31, 1)), 55);
    $M.331 := $store.i8($M.331, $add.ref($add.ref(.str.128, $mul.ref(0, 85)), $mul.ref(32, 1)), 41);
    $M.331 := $store.i8($M.331, $add.ref($add.ref(.str.128, $mul.ref(0, 85)), $mul.ref(33, 1)), 41);
    $M.331 := $store.i8($M.331, $add.ref($add.ref(.str.128, $mul.ref(0, 85)), $mul.ref(34, 1)), 32);
    $M.331 := $store.i8($M.331, $add.ref($add.ref(.str.128, $mul.ref(0, 85)), $mul.ref(35, 1)), 60);
    $M.331 := $store.i8($M.331, $add.ref($add.ref(.str.128, $mul.ref(0, 85)), $mul.ref(36, 1)), 60);
    $M.331 := $store.i8($M.331, $add.ref($add.ref(.str.128, $mul.ref(0, 85)), $mul.ref(37, 1)), 32);
    $M.331 := $store.i8($M.331, $add.ref($add.ref(.str.128, $mul.ref(0, 85)), $mul.ref(38, 1)), 40);
    $M.331 := $store.i8($M.331, $add.ref($add.ref(.str.128, $mul.ref(0, 85)), $mul.ref(39, 1)), 48);
    $M.331 := $store.i8($M.331, $add.ref($add.ref(.str.128, $mul.ref(0, 85)), $mul.ref(40, 1)), 43);
    $M.331 := $store.i8($M.331, $add.ref($add.ref(.str.128, $mul.ref(0, 85)), $mul.ref(41, 1)), 56);
    $M.331 := $store.i8($M.331, $add.ref($add.ref(.str.128, $mul.ref(0, 85)), $mul.ref(42, 1)), 41);
    $M.331 := $store.i8($M.331, $add.ref($add.ref(.str.128, $mul.ref(0, 85)), $mul.ref(43, 1)), 41);
    $M.331 := $store.i8($M.331, $add.ref($add.ref(.str.128, $mul.ref(0, 85)), $mul.ref(44, 1)), 32);
    $M.331 := $store.i8($M.331, $add.ref($add.ref(.str.128, $mul.ref(0, 85)), $mul.ref(45, 1)), 124);
    $M.331 := $store.i8($M.331, $add.ref($add.ref(.str.128, $mul.ref(0, 85)), $mul.ref(46, 1)), 32);
    $M.331 := $store.i8($M.331, $add.ref($add.ref(.str.128, $mul.ref(0, 85)), $mul.ref(47, 1)), 40);
    $M.331 := $store.i8($M.331, $add.ref($add.ref(.str.128, $mul.ref(0, 85)), $mul.ref(48, 1)), 40);
    $M.331 := $store.i8($M.331, $add.ref($add.ref(.str.128, $mul.ref(0, 85)), $mul.ref(49, 1)), 40);
    $M.331 := $store.i8($M.331, $add.ref($add.ref(.str.128, $mul.ref(0, 85)), $mul.ref(50, 1)), 48);
    $M.331 := $store.i8($M.331, $add.ref($add.ref(.str.128, $mul.ref(0, 85)), $mul.ref(51, 1)), 120);
    $M.331 := $store.i8($M.331, $add.ref($add.ref(.str.128, $mul.ref(0, 85)), $mul.ref(52, 1)), 97);
    $M.331 := $store.i8($M.331, $add.ref($add.ref(.str.128, $mul.ref(0, 85)), $mul.ref(53, 1)), 53);
    $M.331 := $store.i8($M.331, $add.ref($add.ref(.str.128, $mul.ref(0, 85)), $mul.ref(54, 1)), 41);
    $M.331 := $store.i8($M.331, $add.ref($add.ref(.str.128, $mul.ref(0, 85)), $mul.ref(55, 1)), 41);
    $M.331 := $store.i8($M.331, $add.ref($add.ref(.str.128, $mul.ref(0, 85)), $mul.ref(56, 1)), 32);
    $M.331 := $store.i8($M.331, $add.ref($add.ref(.str.128, $mul.ref(0, 85)), $mul.ref(57, 1)), 60);
    $M.331 := $store.i8($M.331, $add.ref($add.ref(.str.128, $mul.ref(0, 85)), $mul.ref(58, 1)), 60);
    $M.331 := $store.i8($M.331, $add.ref($add.ref(.str.128, $mul.ref(0, 85)), $mul.ref(59, 1)), 32);
    $M.331 := $store.i8($M.331, $add.ref($add.ref(.str.128, $mul.ref(0, 85)), $mul.ref(60, 1)), 48);
    $M.331 := $store.i8($M.331, $add.ref($add.ref(.str.128, $mul.ref(0, 85)), $mul.ref(61, 1)), 41);
    $M.331 := $store.i8($M.331, $add.ref($add.ref(.str.128, $mul.ref(0, 85)), $mul.ref(62, 1)), 32);
    $M.331 := $store.i8($M.331, $add.ref($add.ref(.str.128, $mul.ref(0, 85)), $mul.ref(63, 1)), 124);
    $M.331 := $store.i8($M.331, $add.ref($add.ref(.str.128, $mul.ref(0, 85)), $mul.ref(64, 1)), 32);
    $M.331 := $store.i8($M.331, $add.ref($add.ref(.str.128, $mul.ref(0, 85)), $mul.ref(65, 1)), 40);
    $M.331 := $store.i8($M.331, $add.ref($add.ref(.str.128, $mul.ref(0, 85)), $mul.ref(66, 1)), 40);
    $M.331 := $store.i8($M.331, $add.ref($add.ref(.str.128, $mul.ref(0, 85)), $mul.ref(67, 1)), 48);
    $M.331 := $store.i8($M.331, $add.ref($add.ref(.str.128, $mul.ref(0, 85)), $mul.ref(68, 1)), 41);
    $M.331 := $store.i8($M.331, $add.ref($add.ref(.str.128, $mul.ref(0, 85)), $mul.ref(69, 1)), 32);
    $M.331 := $store.i8($M.331, $add.ref($add.ref(.str.128, $mul.ref(0, 85)), $mul.ref(70, 1)), 60);
    $M.331 := $store.i8($M.331, $add.ref($add.ref(.str.128, $mul.ref(0, 85)), $mul.ref(71, 1)), 60);
    $M.331 := $store.i8($M.331, $add.ref($add.ref(.str.128, $mul.ref(0, 85)), $mul.ref(72, 1)), 32);
    $M.331 := $store.i8($M.331, $add.ref($add.ref(.str.128, $mul.ref(0, 85)), $mul.ref(73, 1)), 40);
    $M.331 := $store.i8($M.331, $add.ref($add.ref(.str.128, $mul.ref(0, 85)), $mul.ref(74, 1)), 40);
    $M.331 := $store.i8($M.331, $add.ref($add.ref(.str.128, $mul.ref(0, 85)), $mul.ref(75, 1)), 48);
    $M.331 := $store.i8($M.331, $add.ref($add.ref(.str.128, $mul.ref(0, 85)), $mul.ref(76, 1)), 43);
    $M.331 := $store.i8($M.331, $add.ref($add.ref(.str.128, $mul.ref(0, 85)), $mul.ref(77, 1)), 56);
    $M.331 := $store.i8($M.331, $add.ref($add.ref(.str.128, $mul.ref(0, 85)), $mul.ref(78, 1)), 41);
    $M.331 := $store.i8($M.331, $add.ref($add.ref(.str.128, $mul.ref(0, 85)), $mul.ref(79, 1)), 43);
    $M.331 := $store.i8($M.331, $add.ref($add.ref(.str.128, $mul.ref(0, 85)), $mul.ref(80, 1)), 56);
    $M.331 := $store.i8($M.331, $add.ref($add.ref(.str.128, $mul.ref(0, 85)), $mul.ref(81, 1)), 41);
    $M.331 := $store.i8($M.331, $add.ref($add.ref(.str.128, $mul.ref(0, 85)), $mul.ref(82, 1)), 41);
    $M.331 := $store.i8($M.331, $add.ref($add.ref(.str.128, $mul.ref(0, 85)), $mul.ref(83, 1)), 41);
    $M.331 := $store.i8($M.331, $add.ref($add.ref(.str.128, $mul.ref(0, 85)), $mul.ref(84, 1)), 0);
    $M.332 := $store.i8($M.332, .str.129, 40);
    $M.332 := $store.i8($M.332, $add.ref($add.ref(.str.129, $mul.ref(0, 85)), $mul.ref(1, 1)), 40);
    $M.332 := $store.i8($M.332, $add.ref($add.ref(.str.129, $mul.ref(0, 85)), $mul.ref(2, 1)), 40);
    $M.332 := $store.i8($M.332, $add.ref($add.ref(.str.129, $mul.ref(0, 85)), $mul.ref(3, 1)), 48);
    $M.332 := $store.i8($M.332, $add.ref($add.ref(.str.129, $mul.ref(0, 85)), $mul.ref(4, 1)), 85);
    $M.332 := $store.i8($M.332, $add.ref($add.ref(.str.129, $mul.ref(0, 85)), $mul.ref(5, 1)), 41);
    $M.332 := $store.i8($M.332, $add.ref($add.ref(.str.129, $mul.ref(0, 85)), $mul.ref(6, 1)), 32);
    $M.332 := $store.i8($M.332, $add.ref($add.ref(.str.129, $mul.ref(0, 85)), $mul.ref(7, 1)), 60);
    $M.332 := $store.i8($M.332, $add.ref($add.ref(.str.129, $mul.ref(0, 85)), $mul.ref(8, 1)), 60);
    $M.332 := $store.i8($M.332, $add.ref($add.ref(.str.129, $mul.ref(0, 85)), $mul.ref(9, 1)), 32);
    $M.332 := $store.i8($M.332, $add.ref($add.ref(.str.129, $mul.ref(0, 85)), $mul.ref(10, 1)), 40);
    $M.332 := $store.i8($M.332, $add.ref($add.ref(.str.129, $mul.ref(0, 85)), $mul.ref(11, 1)), 40);
    $M.332 := $store.i8($M.332, $add.ref($add.ref(.str.129, $mul.ref(0, 85)), $mul.ref(12, 1)), 40);
    $M.332 := $store.i8($M.332, $add.ref($add.ref(.str.129, $mul.ref(0, 85)), $mul.ref(13, 1)), 48);
    $M.332 := $store.i8($M.332, $add.ref($add.ref(.str.129, $mul.ref(0, 85)), $mul.ref(14, 1)), 43);
    $M.332 := $store.i8($M.332, $add.ref($add.ref(.str.129, $mul.ref(0, 85)), $mul.ref(15, 1)), 56);
    $M.332 := $store.i8($M.332, $add.ref($add.ref(.str.129, $mul.ref(0, 85)), $mul.ref(16, 1)), 41);
    $M.332 := $store.i8($M.332, $add.ref($add.ref(.str.129, $mul.ref(0, 85)), $mul.ref(17, 1)), 43);
    $M.332 := $store.i8($M.332, $add.ref($add.ref(.str.129, $mul.ref(0, 85)), $mul.ref(18, 1)), 56);
    $M.332 := $store.i8($M.332, $add.ref($add.ref(.str.129, $mul.ref(0, 85)), $mul.ref(19, 1)), 41);
    $M.332 := $store.i8($M.332, $add.ref($add.ref(.str.129, $mul.ref(0, 85)), $mul.ref(20, 1)), 43);
    $M.332 := $store.i8($M.332, $add.ref($add.ref(.str.129, $mul.ref(0, 85)), $mul.ref(21, 1)), 49);
    $M.332 := $store.i8($M.332, $add.ref($add.ref(.str.129, $mul.ref(0, 85)), $mul.ref(22, 1)), 52);
    $M.332 := $store.i8($M.332, $add.ref($add.ref(.str.129, $mul.ref(0, 85)), $mul.ref(23, 1)), 41);
    $M.332 := $store.i8($M.332, $add.ref($add.ref(.str.129, $mul.ref(0, 85)), $mul.ref(24, 1)), 41);
    $M.332 := $store.i8($M.332, $add.ref($add.ref(.str.129, $mul.ref(0, 85)), $mul.ref(25, 1)), 32);
    $M.332 := $store.i8($M.332, $add.ref($add.ref(.str.129, $mul.ref(0, 85)), $mul.ref(26, 1)), 124);
    $M.332 := $store.i8($M.332, $add.ref($add.ref(.str.129, $mul.ref(0, 85)), $mul.ref(27, 1)), 32);
    $M.332 := $store.i8($M.332, $add.ref($add.ref(.str.129, $mul.ref(0, 85)), $mul.ref(28, 1)), 40);
    $M.332 := $store.i8($M.332, $add.ref($add.ref(.str.129, $mul.ref(0, 85)), $mul.ref(29, 1)), 40);
    $M.332 := $store.i8($M.332, $add.ref($add.ref(.str.129, $mul.ref(0, 85)), $mul.ref(30, 1)), 40);
    $M.332 := $store.i8($M.332, $add.ref($add.ref(.str.129, $mul.ref(0, 85)), $mul.ref(31, 1)), 55);
    $M.332 := $store.i8($M.332, $add.ref($add.ref(.str.129, $mul.ref(0, 85)), $mul.ref(32, 1)), 41);
    $M.332 := $store.i8($M.332, $add.ref($add.ref(.str.129, $mul.ref(0, 85)), $mul.ref(33, 1)), 41);
    $M.332 := $store.i8($M.332, $add.ref($add.ref(.str.129, $mul.ref(0, 85)), $mul.ref(34, 1)), 32);
    $M.332 := $store.i8($M.332, $add.ref($add.ref(.str.129, $mul.ref(0, 85)), $mul.ref(35, 1)), 60);
    $M.332 := $store.i8($M.332, $add.ref($add.ref(.str.129, $mul.ref(0, 85)), $mul.ref(36, 1)), 60);
    $M.332 := $store.i8($M.332, $add.ref($add.ref(.str.129, $mul.ref(0, 85)), $mul.ref(37, 1)), 32);
    $M.332 := $store.i8($M.332, $add.ref($add.ref(.str.129, $mul.ref(0, 85)), $mul.ref(38, 1)), 40);
    $M.332 := $store.i8($M.332, $add.ref($add.ref(.str.129, $mul.ref(0, 85)), $mul.ref(39, 1)), 48);
    $M.332 := $store.i8($M.332, $add.ref($add.ref(.str.129, $mul.ref(0, 85)), $mul.ref(40, 1)), 43);
    $M.332 := $store.i8($M.332, $add.ref($add.ref(.str.129, $mul.ref(0, 85)), $mul.ref(41, 1)), 56);
    $M.332 := $store.i8($M.332, $add.ref($add.ref(.str.129, $mul.ref(0, 85)), $mul.ref(42, 1)), 41);
    $M.332 := $store.i8($M.332, $add.ref($add.ref(.str.129, $mul.ref(0, 85)), $mul.ref(43, 1)), 41);
    $M.332 := $store.i8($M.332, $add.ref($add.ref(.str.129, $mul.ref(0, 85)), $mul.ref(44, 1)), 32);
    $M.332 := $store.i8($M.332, $add.ref($add.ref(.str.129, $mul.ref(0, 85)), $mul.ref(45, 1)), 124);
    $M.332 := $store.i8($M.332, $add.ref($add.ref(.str.129, $mul.ref(0, 85)), $mul.ref(46, 1)), 32);
    $M.332 := $store.i8($M.332, $add.ref($add.ref(.str.129, $mul.ref(0, 85)), $mul.ref(47, 1)), 40);
    $M.332 := $store.i8($M.332, $add.ref($add.ref(.str.129, $mul.ref(0, 85)), $mul.ref(48, 1)), 40);
    $M.332 := $store.i8($M.332, $add.ref($add.ref(.str.129, $mul.ref(0, 85)), $mul.ref(49, 1)), 40);
    $M.332 := $store.i8($M.332, $add.ref($add.ref(.str.129, $mul.ref(0, 85)), $mul.ref(50, 1)), 48);
    $M.332 := $store.i8($M.332, $add.ref($add.ref(.str.129, $mul.ref(0, 85)), $mul.ref(51, 1)), 120);
    $M.332 := $store.i8($M.332, $add.ref($add.ref(.str.129, $mul.ref(0, 85)), $mul.ref(52, 1)), 97);
    $M.332 := $store.i8($M.332, $add.ref($add.ref(.str.129, $mul.ref(0, 85)), $mul.ref(53, 1)), 54);
    $M.332 := $store.i8($M.332, $add.ref($add.ref(.str.129, $mul.ref(0, 85)), $mul.ref(54, 1)), 41);
    $M.332 := $store.i8($M.332, $add.ref($add.ref(.str.129, $mul.ref(0, 85)), $mul.ref(55, 1)), 41);
    $M.332 := $store.i8($M.332, $add.ref($add.ref(.str.129, $mul.ref(0, 85)), $mul.ref(56, 1)), 32);
    $M.332 := $store.i8($M.332, $add.ref($add.ref(.str.129, $mul.ref(0, 85)), $mul.ref(57, 1)), 60);
    $M.332 := $store.i8($M.332, $add.ref($add.ref(.str.129, $mul.ref(0, 85)), $mul.ref(58, 1)), 60);
    $M.332 := $store.i8($M.332, $add.ref($add.ref(.str.129, $mul.ref(0, 85)), $mul.ref(59, 1)), 32);
    $M.332 := $store.i8($M.332, $add.ref($add.ref(.str.129, $mul.ref(0, 85)), $mul.ref(60, 1)), 48);
    $M.332 := $store.i8($M.332, $add.ref($add.ref(.str.129, $mul.ref(0, 85)), $mul.ref(61, 1)), 41);
    $M.332 := $store.i8($M.332, $add.ref($add.ref(.str.129, $mul.ref(0, 85)), $mul.ref(62, 1)), 32);
    $M.332 := $store.i8($M.332, $add.ref($add.ref(.str.129, $mul.ref(0, 85)), $mul.ref(63, 1)), 124);
    $M.332 := $store.i8($M.332, $add.ref($add.ref(.str.129, $mul.ref(0, 85)), $mul.ref(64, 1)), 32);
    $M.332 := $store.i8($M.332, $add.ref($add.ref(.str.129, $mul.ref(0, 85)), $mul.ref(65, 1)), 40);
    $M.332 := $store.i8($M.332, $add.ref($add.ref(.str.129, $mul.ref(0, 85)), $mul.ref(66, 1)), 40);
    $M.332 := $store.i8($M.332, $add.ref($add.ref(.str.129, $mul.ref(0, 85)), $mul.ref(67, 1)), 48);
    $M.332 := $store.i8($M.332, $add.ref($add.ref(.str.129, $mul.ref(0, 85)), $mul.ref(68, 1)), 41);
    $M.332 := $store.i8($M.332, $add.ref($add.ref(.str.129, $mul.ref(0, 85)), $mul.ref(69, 1)), 32);
    $M.332 := $store.i8($M.332, $add.ref($add.ref(.str.129, $mul.ref(0, 85)), $mul.ref(70, 1)), 60);
    $M.332 := $store.i8($M.332, $add.ref($add.ref(.str.129, $mul.ref(0, 85)), $mul.ref(71, 1)), 60);
    $M.332 := $store.i8($M.332, $add.ref($add.ref(.str.129, $mul.ref(0, 85)), $mul.ref(72, 1)), 32);
    $M.332 := $store.i8($M.332, $add.ref($add.ref(.str.129, $mul.ref(0, 85)), $mul.ref(73, 1)), 40);
    $M.332 := $store.i8($M.332, $add.ref($add.ref(.str.129, $mul.ref(0, 85)), $mul.ref(74, 1)), 40);
    $M.332 := $store.i8($M.332, $add.ref($add.ref(.str.129, $mul.ref(0, 85)), $mul.ref(75, 1)), 48);
    $M.332 := $store.i8($M.332, $add.ref($add.ref(.str.129, $mul.ref(0, 85)), $mul.ref(76, 1)), 43);
    $M.332 := $store.i8($M.332, $add.ref($add.ref(.str.129, $mul.ref(0, 85)), $mul.ref(77, 1)), 56);
    $M.332 := $store.i8($M.332, $add.ref($add.ref(.str.129, $mul.ref(0, 85)), $mul.ref(78, 1)), 41);
    $M.332 := $store.i8($M.332, $add.ref($add.ref(.str.129, $mul.ref(0, 85)), $mul.ref(79, 1)), 43);
    $M.332 := $store.i8($M.332, $add.ref($add.ref(.str.129, $mul.ref(0, 85)), $mul.ref(80, 1)), 56);
    $M.332 := $store.i8($M.332, $add.ref($add.ref(.str.129, $mul.ref(0, 85)), $mul.ref(81, 1)), 41);
    $M.332 := $store.i8($M.332, $add.ref($add.ref(.str.129, $mul.ref(0, 85)), $mul.ref(82, 1)), 41);
    $M.332 := $store.i8($M.332, $add.ref($add.ref(.str.129, $mul.ref(0, 85)), $mul.ref(83, 1)), 41);
    $M.332 := $store.i8($M.332, $add.ref($add.ref(.str.129, $mul.ref(0, 85)), $mul.ref(84, 1)), 0);
    $M.0 := $store.i8($M.0, .str.166, 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.166, $mul.ref(0, 31)), $mul.ref(1, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.166, $mul.ref(0, 31)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.166, $mul.ref(0, 31)), $mul.ref(3, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.166, $mul.ref(0, 31)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.166, $mul.ref(0, 31)), $mul.ref(5, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.166, $mul.ref(0, 31)), $mul.ref(6, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.166, $mul.ref(0, 31)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.166, $mul.ref(0, 31)), $mul.ref(8, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.166, $mul.ref(0, 31)), $mul.ref(9, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.166, $mul.ref(0, 31)), $mul.ref(10, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.166, $mul.ref(0, 31)), $mul.ref(11, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.166, $mul.ref(0, 31)), $mul.ref(12, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.166, $mul.ref(0, 31)), $mul.ref(13, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.166, $mul.ref(0, 31)), $mul.ref(14, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.166, $mul.ref(0, 31)), $mul.ref(15, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.166, $mul.ref(0, 31)), $mul.ref(16, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.166, $mul.ref(0, 31)), $mul.ref(17, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.166, $mul.ref(0, 31)), $mul.ref(18, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.166, $mul.ref(0, 31)), $mul.ref(19, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.166, $mul.ref(0, 31)), $mul.ref(20, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.166, $mul.ref(0, 31)), $mul.ref(21, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.166, $mul.ref(0, 31)), $mul.ref(22, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.166, $mul.ref(0, 31)), $mul.ref(23, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.166, $mul.ref(0, 31)), $mul.ref(24, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.166, $mul.ref(0, 31)), $mul.ref(25, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.166, $mul.ref(0, 31)), $mul.ref(26, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.166, $mul.ref(0, 31)), $mul.ref(27, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.166, $mul.ref(0, 31)), $mul.ref(28, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.166, $mul.ref(0, 31)), $mul.ref(29, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.166, $mul.ref(0, 31)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, .str.167, 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 21)), $mul.ref(1, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 21)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 21)), $mul.ref(3, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 21)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 21)), $mul.ref(5, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 21)), $mul.ref(6, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 21)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 21)), $mul.ref(8, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 21)), $mul.ref(9, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 21)), $mul.ref(10, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 21)), $mul.ref(11, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 21)), $mul.ref(12, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 21)), $mul.ref(13, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 21)), $mul.ref(14, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 21)), $mul.ref(15, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 21)), $mul.ref(16, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 21)), $mul.ref(17, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 21)), $mul.ref(18, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 21)), $mul.ref(19, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.167, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, .str.177, 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.177, $mul.ref(0, 35)), $mul.ref(1, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.177, $mul.ref(0, 35)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.177, $mul.ref(0, 35)), $mul.ref(3, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.177, $mul.ref(0, 35)), $mul.ref(4, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.177, $mul.ref(0, 35)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.177, $mul.ref(0, 35)), $mul.ref(6, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.177, $mul.ref(0, 35)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.177, $mul.ref(0, 35)), $mul.ref(8, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.177, $mul.ref(0, 35)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.177, $mul.ref(0, 35)), $mul.ref(10, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.177, $mul.ref(0, 35)), $mul.ref(11, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.177, $mul.ref(0, 35)), $mul.ref(12, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.177, $mul.ref(0, 35)), $mul.ref(13, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.177, $mul.ref(0, 35)), $mul.ref(14, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.177, $mul.ref(0, 35)), $mul.ref(15, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.177, $mul.ref(0, 35)), $mul.ref(16, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.177, $mul.ref(0, 35)), $mul.ref(17, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.177, $mul.ref(0, 35)), $mul.ref(18, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.177, $mul.ref(0, 35)), $mul.ref(19, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.177, $mul.ref(0, 35)), $mul.ref(20, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.177, $mul.ref(0, 35)), $mul.ref(21, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.177, $mul.ref(0, 35)), $mul.ref(22, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.177, $mul.ref(0, 35)), $mul.ref(23, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.177, $mul.ref(0, 35)), $mul.ref(24, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.177, $mul.ref(0, 35)), $mul.ref(25, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.177, $mul.ref(0, 35)), $mul.ref(26, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.177, $mul.ref(0, 35)), $mul.ref(27, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.177, $mul.ref(0, 35)), $mul.ref(28, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.177, $mul.ref(0, 35)), $mul.ref(29, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.177, $mul.ref(0, 35)), $mul.ref(30, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.177, $mul.ref(0, 35)), $mul.ref(31, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.177, $mul.ref(0, 35)), $mul.ref(32, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.177, $mul.ref(0, 35)), $mul.ref(33, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.177, $mul.ref(0, 35)), $mul.ref(34, 1)), 0);
    $M.0 := $store.i8($M.0, .str.178, 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.178, $mul.ref(0, 25)), $mul.ref(1, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.178, $mul.ref(0, 25)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.178, $mul.ref(0, 25)), $mul.ref(3, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.178, $mul.ref(0, 25)), $mul.ref(4, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.178, $mul.ref(0, 25)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.178, $mul.ref(0, 25)), $mul.ref(6, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.178, $mul.ref(0, 25)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.178, $mul.ref(0, 25)), $mul.ref(8, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.178, $mul.ref(0, 25)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.178, $mul.ref(0, 25)), $mul.ref(10, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.178, $mul.ref(0, 25)), $mul.ref(11, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.178, $mul.ref(0, 25)), $mul.ref(12, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.178, $mul.ref(0, 25)), $mul.ref(13, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.178, $mul.ref(0, 25)), $mul.ref(14, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.178, $mul.ref(0, 25)), $mul.ref(15, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.178, $mul.ref(0, 25)), $mul.ref(16, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.178, $mul.ref(0, 25)), $mul.ref(17, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.178, $mul.ref(0, 25)), $mul.ref(18, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.178, $mul.ref(0, 25)), $mul.ref(19, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.178, $mul.ref(0, 25)), $mul.ref(20, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.178, $mul.ref(0, 25)), $mul.ref(21, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.178, $mul.ref(0, 25)), $mul.ref(22, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.178, $mul.ref(0, 25)), $mul.ref(23, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.178, $mul.ref(0, 25)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, .str.179, 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.179, $mul.ref(0, 25)), $mul.ref(1, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.179, $mul.ref(0, 25)), $mul.ref(2, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.179, $mul.ref(0, 25)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.179, $mul.ref(0, 25)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.179, $mul.ref(0, 25)), $mul.ref(5, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.179, $mul.ref(0, 25)), $mul.ref(6, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.179, $mul.ref(0, 25)), $mul.ref(7, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.179, $mul.ref(0, 25)), $mul.ref(8, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.179, $mul.ref(0, 25)), $mul.ref(9, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.179, $mul.ref(0, 25)), $mul.ref(10, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.179, $mul.ref(0, 25)), $mul.ref(11, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.179, $mul.ref(0, 25)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.179, $mul.ref(0, 25)), $mul.ref(13, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.179, $mul.ref(0, 25)), $mul.ref(14, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.179, $mul.ref(0, 25)), $mul.ref(15, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.179, $mul.ref(0, 25)), $mul.ref(16, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.179, $mul.ref(0, 25)), $mul.ref(17, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.179, $mul.ref(0, 25)), $mul.ref(18, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.179, $mul.ref(0, 25)), $mul.ref(19, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.179, $mul.ref(0, 25)), $mul.ref(20, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.179, $mul.ref(0, 25)), $mul.ref(21, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.179, $mul.ref(0, 25)), $mul.ref(22, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.179, $mul.ref(0, 25)), $mul.ref(23, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.179, $mul.ref(0, 25)), $mul.ref(24, 1)), 0);
    call {:si_unique_call 2249} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 919833);

procedure devirtbounce(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.31, $M.87, $M.6, $M.0, $M.13, $M.20, $M.21, $M.18, $M.19, $M.69, $M.70, $CurrAddr, $M.23, $M.24, $M.25, $M.26, $M.27, $M.108, $M.110, $M.112, $M.114, $M.28, $M.33, assertsPassed, $M.29, $M.45, $M.48, $M.47, $M.89, $M.109, $M.111, $M.113, $M.115, $M.34, $M.30, $M.35, $M.46, $M.90, $M.86, $M.91, $M.44, $M.32, $M.36, $M.38, $M.40, $M.42;



implementation devirtbounce(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i8 := $eq.ref(vmci_guest_remove_device, $p0);
    assume true;
    goto $bb6, $bb11;

  $bb11:
    assume !($i8 == 1);
    $i7 := $eq.ref(dbell_delayed_dispatch, $p0);
    assume true;
    goto $bb5, $bb10;

  $bb10:
    assume !($i7 == 1);
    $i6 := $eq.ref(dg_delayed_dispatch, $p0);
    assume true;
    goto $bb4, $bb9;

  $bb9:
    assume !($i6 == 1);
    $i5 := $eq.ref(vmci_release_resource, $p0);
    assume true;
    goto $bb3, $bb8;

  $bb8:
    assume !($i5 == 1);
    $i4 := $eq.ref(ctx_free_ctx, $p0);
    assume true;
    goto $bb2, $bb7;

  $bb7:
    assume !($i4 == 1);
    assume false;
    return;

  $bb2:
    assume $i4 == 1;
    call {:si_unique_call 2250} ctx_free_ctx(arg);
    goto SeqInstr_628, SeqInstr_629;

  SeqInstr_629:
    assume assertsPassed;
    goto SeqInstr_630;

  SeqInstr_630:
    return;

  SeqInstr_628:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i5 == 1;
    call {:si_unique_call 2251} vmci_release_resource(arg);
    return;

  $bb4:
    assume $i6 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2252} dg_delayed_dispatch($p1);
    goto SeqInstr_631, SeqInstr_632;

  SeqInstr_632:
    assume assertsPassed;
    goto SeqInstr_633;

  SeqInstr_633:
    return;

  SeqInstr_631:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i7 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2253} dbell_delayed_dispatch($p2);
    goto SeqInstr_634, SeqInstr_635;

  SeqInstr_635:
    assume assertsPassed;
    goto SeqInstr_636;

  SeqInstr_636:
    return;

  SeqInstr_634:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i8 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2254} vmci_guest_remove_device($p3);
    goto SeqInstr_637, SeqInstr_638;

  SeqInstr_638:
    assume assertsPassed;
    goto SeqInstr_639;

  SeqInstr_639:
    return;

  SeqInstr_637:
    assume !assertsPassed;
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 920865);

procedure devirtbounce.1(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: ref);
  free requires assertsPassed;



implementation devirtbounce.1(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 921897);

procedure devirtbounce.2(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.89, $M.23, $M.20, $M.21, $M.29, $M.90, $M.86, $M.47, $M.91, $M.18, $CurrAddr, $M.34, $M.30, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.31, $M.87, $M.69, $M.35, $M.28, $M.44, $M.33, $M.24, $M.25, $M.26, $M.19, $M.27, $M.32, $M.108, $M.110, $M.112, $M.114, $M.70, assertsPassed, $M.45, $M.48, $M.2, $M.3, $M.109, $M.111, $M.113, $M.115, $M.46, $M.6, $M.13, $M.36, $M.38, $M.40, $M.42;



implementation devirtbounce.2(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i6 := $eq.ref(vmci_datagram_send, $p0);
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i6 == 1);
    $i5 := $eq.ref(vmci_qpair_detach, $p0);
    assume true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i5 == 1);
    assume false;
    return;

  $bb2:
    assume $i5 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2255} $i2 := vmci_qpair_detach($p1);
    goto SeqInstr_640, SeqInstr_641;

  SeqInstr_641:
    assume assertsPassed;
    goto SeqInstr_642;

  SeqInstr_642:
    $r := $i2;
    return;

  SeqInstr_640:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i6 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2256} $i4 := vmci_datagram_send($p3);
    goto SeqInstr_643, SeqInstr_644;

  SeqInstr_644:
    assume assertsPassed;
    goto SeqInstr_645;

  SeqInstr_645:
    $r := $i4;
    return;

  SeqInstr_643:
    assume !assertsPassed;
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 922929);

procedure devirtbounce.3(funcPtr: ref, arg: ref, arg1: ref, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.3(funcPtr: ref, arg: ref, arg1: ref, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 923961);

procedure devirtbounce.4(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.0, $M.31, $M.87, $M.69, $M.108, $M.110, $M.112, $M.114, $M.70, $CurrAddr, $M.109, $M.111, $M.113, $M.115, assertsPassed, $M.2, $M.3, $M.6, $M.13, $M.20, $M.21, $M.18, $M.19, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.33, $M.29, $M.45, $M.48, $M.47, $M.89, $M.34, $M.30, $M.35, $M.46, $M.90, $M.86, $M.91, $M.44, $M.32, $M.36, $M.38, $M.40, $M.42;



implementation devirtbounce.4(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i18 := $eq.ref(__builtinx_object_size, $p0);
    assume true;
    goto $bb6, $bb11;

  $bb11:
    assume !($i18 == 1);
    $i17 := $eq.ref(vmci_host_close, $p0);
    assume true;
    goto $bb5, $bb10;

  $bb10:
    assume !($i17 == 1);
    $i16 := $eq.ref(vmci_host_open, $p0);
    assume true;
    goto $bb4, $bb9;

  $bb9:
    assume !($i16 == 1);
    $i15 := $eq.ref(vmci_host_poll, $p0);
    assume true;
    goto $bb3, $bb8;

  $bb8:
    assume !($i15 == 1);
    $i14 := $eq.ref(vmci_guest_probe_device, $p0);
    assume {:branchcond $i14} true;
    goto $bb2, $bb7;

  $bb7:
    assume !($i14 == 1);
    assume false;
    return;

  $bb2:
    assume $i14 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2257} $i3 := vmci_guest_probe_device($p1, $p2);
    goto SeqInstr_646, SeqInstr_647;

  SeqInstr_647:
    assume assertsPassed;
    goto SeqInstr_648;

  SeqInstr_648:
    $r := $i3;
    return;

  SeqInstr_646:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i15 == 1;
    $p4 := $bitcast.ref.ref(arg);
    $p5 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2258} $i6 := vmci_host_poll($p4, $p5);
    $r := $i6;
    return;

  $bb4:
    assume $i16 == 1;
    $p7 := $bitcast.ref.ref(arg);
    $p8 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2259} $i9 := vmci_host_open($p7, $p8);
    $r := $i9;
    return;

  $bb5:
    assume $i17 == 1;
    $p10 := $bitcast.ref.ref(arg);
    $p11 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2260} $i12 := vmci_host_close($p10, $p11);
    goto SeqInstr_649, SeqInstr_650;

  SeqInstr_650:
    assume assertsPassed;
    goto SeqInstr_651;

  SeqInstr_651:
    $r := $i12;
    return;

  SeqInstr_649:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i18 == 1;
    call {:si_unique_call 2261} $i13 := __builtinx_object_size();
    $r := $i13;
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 924993);

procedure devirtbounce.5(funcPtr: ref);
  free requires assertsPassed;



implementation devirtbounce.5(funcPtr: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 926025);

procedure devirtbounce.6(funcPtr: ref, arg: ref, arg1: ref);
  free requires assertsPassed;



implementation devirtbounce.6(funcPtr: ref, arg: ref, arg1: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0, 927057);

procedure devirtbounce.7(funcPtr: ref, arg: ref, arg1: i32, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.7(funcPtr: ref, arg: ref, arg1: i32, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.8: ref;

axiom devirtbounce.8 == $sub.ref(0, 928089);

procedure devirtbounce.8(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.8(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_object_size, $p0);
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 2262} $i1 := __builtinx_object_size();
    $r := $i1;
    return;
}



const devirtbounce.9: ref;

axiom devirtbounce.9 == $sub.ref(0, 929121);

procedure devirtbounce.9(funcPtr: ref, arg: i32, arg1: ref, arg2: ref);
  free requires assertsPassed;
  modifies $M.44;



implementation devirtbounce.9(funcPtr: ref, arg: i32, arg1: ref, arg2: ref)
{
  var $p0: ref;
  var $i1: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i1 := $eq.ref(vmci_guest_cid_update, $p0);
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume false;
    return;

  $bb2:
    assume $i1 == 1;
    call {:si_unique_call 2263} vmci_guest_cid_update(arg, arg1, arg2);
    return;
}



const devirtbounce.10: ref;

axiom devirtbounce.10 == $sub.ref(0, 930153);

procedure devirtbounce.10(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.31, $M.87, $M.6, $M.0, $M.13, $M.20, $M.21, $M.18, $M.19, $M.69, $M.70, $CurrAddr, $M.23, $M.24, $M.25, $M.26, $M.27, $M.108, $M.110, $M.112, $M.114, $M.28, $M.33, assertsPassed, $M.29, $M.45, $M.48, $M.47, $M.89, $M.109, $M.111, $M.113, $M.115, $M.34, $M.30, $M.35, $M.46, $M.90, $M.86, $M.91, $M.44, $M.32, $M.36, $M.38, $M.40, $M.42;



implementation devirtbounce.10(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i10 := $eq.ref(vmci_guest_remove_device, $p0);
    assume true;
    goto $bb6, $bb11;

  $bb11:
    assume !($i10 == 1);
    $i9 := $eq.ref(dbell_delayed_dispatch, $p0);
    assume true;
    goto $bb5, $bb10;

  $bb10:
    assume !($i9 == 1);
    $i8 := $eq.ref(dg_delayed_dispatch, $p0);
    assume true;
    goto $bb4, $bb9;

  $bb9:
    assume !($i8 == 1);
    $i7 := $eq.ref(vmci_release_resource, $p0);
    assume true;
    goto $bb3, $bb8;

  $bb8:
    assume !($i7 == 1);
    $i6 := $eq.ref(ctx_free_ctx, $p0);
    assume true;
    goto $bb2, $bb7;

  $bb7:
    assume !($i6 == 1);
    assume false;
    return;

  $bb2:
    assume $i6 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2264} ctx_free_ctx($p1);
    goto SeqInstr_652, SeqInstr_653;

  SeqInstr_653:
    assume assertsPassed;
    goto SeqInstr_654;

  SeqInstr_654:
    return;

  SeqInstr_652:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i7 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2265} vmci_release_resource($p2);
    return;

  $bb4:
    assume $i8 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2266} dg_delayed_dispatch($p3);
    goto SeqInstr_655, SeqInstr_656;

  SeqInstr_656:
    assume assertsPassed;
    goto SeqInstr_657;

  SeqInstr_657:
    return;

  SeqInstr_655:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i9 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2267} dbell_delayed_dispatch($p4);
    goto SeqInstr_658, SeqInstr_659;

  SeqInstr_659:
    assume assertsPassed;
    goto SeqInstr_660;

  SeqInstr_660:
    return;

  SeqInstr_658:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i10 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2268} vmci_guest_remove_device($p5);
    goto SeqInstr_661, SeqInstr_662;

  SeqInstr_662:
    assume assertsPassed;
    goto SeqInstr_663;

  SeqInstr_663:
    return;

  SeqInstr_661:
    assume !assertsPassed;
    return;
}



const devirtbounce.11: ref;

axiom devirtbounce.11 == $sub.ref(0, 931185);

procedure devirtbounce.11(funcPtr: ref, arg: ref, arg1: i64, arg2: ref, arg3: i64, arg4: i64) returns ($r: i32);



const devirtbounce.12: ref;

axiom devirtbounce.12 == $sub.ref(0, 932217);

procedure devirtbounce.12(funcPtr: ref, arg: ref, arg1: i64, arg2: ref, arg3: i64, arg4: i64) returns ($r: i32);



const devirtbounce.13: ref;

axiom devirtbounce.13 == $sub.ref(0, 933249);

procedure devirtbounce.13(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: ref);
  free requires assertsPassed;



implementation devirtbounce.13(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.14: ref;

axiom devirtbounce.14 == $sub.ref(0, 934281);

procedure devirtbounce.14(funcPtr: ref, arg: i32, arg1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation devirtbounce.14(funcPtr: ref, arg: i32, arg1: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i8 := $eq.ref(__builtinx_object_size, $p0);
    assume true;
    goto $bb4, $bb7;

  $bb7:
    assume !($i8 == 1);
    $i7 := $eq.ref(vmci_interrupt_bm, $p0);
    assume true;
    goto $bb3, $bb6;

  $bb6:
    assume !($i7 == 1);
    $i6 := $eq.ref(vmci_interrupt, $p0);
    assume true;
    goto $bb2, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume false;
    return;

  $bb2:
    assume $i6 == 1;
    $p1 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2269} $i2 := vmci_interrupt(arg, $p1);
    $r := $i2;
    return;

  $bb3:
    assume $i7 == 1;
    $p3 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2270} $i4 := vmci_interrupt_bm(arg, $p3);
    $r := $i4;
    return;

  $bb4:
    assume $i8 == 1;
    call {:si_unique_call 2271} $i5 := __builtinx_object_size();
    $r := $i5;
    return;
}



const devirtbounce.15: ref;

axiom devirtbounce.15 == $sub.ref(0, 935313);

procedure devirtbounce.15(funcPtr: ref, arg: ref, arg1: i64) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.15(funcPtr: ref, arg: ref, arg1: i64) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.16: ref;

axiom devirtbounce.16 == $sub.ref(0, 936345);

procedure devirtbounce.16(funcPtr: ref, arg: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.92, $M.93, $CurrAddr, $M.46, $M.96, $M.97, $M.0, assertsPassed, $M.98;



implementation devirtbounce.16(funcPtr: ref, arg: ref) returns ($r: i64)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i12 := $eq.ref(vmci_qpair_consume_buf_ready, $p0);
    assume {:branchcond $i12} true;
    goto $bb5, $bb9;

  $bb9:
    assume !($i12 == 1);
    $i11 := $eq.ref(vmci_qpair_produce_buf_ready, $p0);
    assume true;
    goto $bb4, $bb8;

  $bb8:
    assume !($i11 == 1);
    $i10 := $eq.ref(vmci_qpair_consume_free_space, $p0);
    assume true;
    goto $bb3, $bb7;

  $bb7:
    assume !($i10 == 1);
    $i9 := $eq.ref(vmci_qpair_produce_free_space, $p0);
    assume true;
    goto $bb2, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume false;
    return;

  $bb2:
    assume $i9 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2272} $i2 := vmci_qpair_produce_free_space($p1);
    goto SeqInstr_664, SeqInstr_665;

  SeqInstr_665:
    assume assertsPassed;
    goto SeqInstr_666;

  SeqInstr_666:
    $r := $i2;
    return;

  SeqInstr_664:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i10 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2273} $i4 := vmci_qpair_consume_free_space($p3);
    goto SeqInstr_667, SeqInstr_668;

  SeqInstr_668:
    assume assertsPassed;
    goto SeqInstr_669;

  SeqInstr_669:
    $r := $i4;
    return;

  SeqInstr_667:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i11 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2274} $i6 := vmci_qpair_produce_buf_ready($p5);
    goto SeqInstr_670, SeqInstr_671;

  SeqInstr_671:
    assume assertsPassed;
    goto SeqInstr_672;

  SeqInstr_672:
    $r := $i6;
    return;

  SeqInstr_670:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i12 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2275} $i8 := vmci_qpair_consume_buf_ready($p7);
    goto SeqInstr_673, SeqInstr_674;

  SeqInstr_674:
    assume assertsPassed;
    goto SeqInstr_675;

  SeqInstr_675:
    $r := $i8;
    return;

  SeqInstr_673:
    assume !assertsPassed;
    return;
}



const devirtbounce.17: ref;

axiom devirtbounce.17 == $sub.ref(0, 937377);

procedure devirtbounce.17(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.29, $M.89, $M.23, $M.20, $M.21, $CurrAddr, $M.34, $M.30, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.31, $M.87, $M.69, $M.35, $M.90, $M.86, $M.47, $M.91, $M.18, $M.44, $M.32, $M.108, $M.110, $M.112, $M.114, $M.70, $M.46, $M.28, $M.33, $M.24, $M.25, $M.26, $M.19, $M.27, $M.2, $M.3, $M.109, $M.111, $M.113, $M.115, assertsPassed, $M.45, $M.48, $M.6, $M.13, $M.36, $M.38, $M.40, $M.42;



implementation devirtbounce.17(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i13 := $eq.ref(__builtinx_object_size, $p0);
    assume true;
    goto $bb6, $bb11;

  $bb11:
    assume !($i13 == 1);
    $i12 := $eq.ref(vmci_qpair_detach, $p0);
    assume {:branchcond $i12} true;
    goto $bb5, $bb10;

  $bb10:
    assume !($i12 == 1);
    $i11 := $eq.ref(qp_wakeup_cb, $p0);
    assume true;
    goto $bb4, $bb9;

  $bb9:
    assume !($i11 == 1);
    $i10 := $eq.ref(vmci_datagram_send, $p0);
    assume true;
    goto $bb3, $bb8;

  $bb8:
    assume !($i10 == 1);
    $i9 := $eq.ref(vmci_send_datagram, $p0);
    assume true;
    goto $bb2, $bb7;

  $bb7:
    assume !($i9 == 1);
    assume false;
    return;

  $bb2:
    assume $i9 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2276} $i2 := vmci_send_datagram($p1);
    $r := $i2;
    return;

  $bb3:
    assume $i10 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2277} $i4 := vmci_datagram_send($p3);
    goto SeqInstr_676, SeqInstr_677;

  SeqInstr_677:
    assume assertsPassed;
    goto SeqInstr_678;

  SeqInstr_678:
    $r := $i4;
    return;

  SeqInstr_676:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i11 == 1;
    call {:si_unique_call 2278} $i5 := qp_wakeup_cb(arg);
    goto SeqInstr_679, SeqInstr_680;

  SeqInstr_680:
    assume assertsPassed;
    goto SeqInstr_681;

  SeqInstr_681:
    $r := $i5;
    return;

  SeqInstr_679:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i12 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2279} $i7 := vmci_qpair_detach($p6);
    goto SeqInstr_682, SeqInstr_683;

  SeqInstr_683:
    assume assertsPassed;
    goto SeqInstr_684;

  SeqInstr_684:
    $r := $i7;
    return;

  SeqInstr_682:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i13 == 1;
    call {:si_unique_call 2280} $i8 := __builtinx_object_size();
    $r := $i8;
    return;
}



const devirtbounce.18: ref;

axiom devirtbounce.18 == $sub.ref(0, 938409);

procedure devirtbounce.18(funcPtr: ref, arg: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.18(funcPtr: ref, arg: ref) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.19: ref;

axiom devirtbounce.19 == $sub.ref(0, 939441);

procedure devirtbounce.19(funcPtr: ref, arg: ref, arg1: ref, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.19(funcPtr: ref, arg: ref, arg1: ref, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



const $u0: i32;

procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.108, $M.112, $M.110, $M.114, $M.180, $M.70, $M.46, $M.28, $M.169, $M.138, $M.168, $M.167, $M.0, $M.181, $M.182, $M.183, $M.184, $M.185, $M.186, $M.187, $M.188, $M.189, $M.190, $M.191, $M.192, $M.193, $M.194, $M.172, $M.171, $M.107, $M.106, $M.69, $M.231, $M.232, $M.233, $M.44, $M.234, $M.235, $M.166, $M.165, $M.164, $M.163, $M.236, $M.237, $M.238, $M.239, $M.240, $M.241, $M.242, $M.243, $M.244, $M.4, $M.160, $M.1, $M.170, $M.162, $M.245, $M.246, $M.247, $M.248, $M.249, $M.250, $M.251, $M.31, $M.87, $M.157, $M.161, $M.111, $M.148, $M.113, $M.115, $M.158, $M.150, $M.154, $M.109, $M.159, $M.155, $M.38, $M.42, $M.36, $M.40, $M.321, $M.322, $M.323, $M.324, $M.325, $M.326, $M.327, $M.328, $M.329, $M.330, $M.331, $M.332, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 2281} __SMACK_static_init();
    call {:si_unique_call 2282} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.148, $M.36, $M.38, $M.40, $M.42, $M.150, $M.154, $M.155, $M.157, $M.108, $M.112, $M.110, $M.114, $M.180, $M.70, $M.46, $M.28, $M.169, $M.138, $M.168, $M.167, $M.0, $M.181, $M.182, $M.183, $M.184, $M.185, $M.186, $M.187, $M.188, $M.189, $M.190, $M.191, $M.192, $M.193, $M.194, $M.172, $M.171, $M.107, $M.106, $M.69, $M.231, $M.232, $M.233, $M.44, $M.234, $M.235, $M.166, $M.165, $M.164, $M.163, $M.236, $M.237, $M.238, $M.239, $M.240, $M.241, $M.242, $M.243, $M.244, $M.4, $M.160, $M.1, $M.170, $M.162, $M.245, $M.246, $M.247, $M.248, $M.249, $M.250, $M.251, $M.31, $M.87, $M.161, $M.111, $M.113, $M.115, $M.158, $M.109, $M.159, $M.321, $M.322, $M.323, $M.324, $M.325, $M.326, $M.327, $M.328, $M.329, $M.330, $M.331, $M.332, $CurrAddr, $M.139, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.122, $M.123, $M.18, $M.78, $M.77, $M.125, $M.65, $M.45, $M.20, $M.21, $M.48, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.133, $M.124, $M.23, $M.24, $M.25, $M.26, $M.19, $M.27, $M.29, $M.137, $M.76, $M.75, $M.134, $M.96, $M.97, $M.126, $M.127, $M.128, $M.135, $M.136, $M.129, $M.130, $M.131, $M.132, $M.67, $M.30, $M.66, $M.68, $M.58, $M.33, $M.47, $M.89, $M.34, $M.35, $M.74, $M.32, $M.98, $M.2, $M.3, $M.90, $M.86, $M.91, $M.55, $M.79, $M.6, $M.13, $M.92, $M.93;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation vmci_ctx_get_loop_$bb8(in_$i0: i32, in_$p3: ref, in_$p4: ref, in_$p18: ref, in_$i19: i32, in_$i20: i1, in_$p21: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$i32: i32, in_$p33: ref, in_$i34: i64, in_$i35: i1, in_$p17: ref) returns (out_$p18: ref, out_$i19: i32, out_$i20: i1, out_$p21: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$i32: i32, out_$p33: ref, out_$i34: i64, out_$i35: i1, out_$p17: ref)
{

  entry:
    out_$p18, out_$i19, out_$i20, out_$p21, out_$p25, out_$p26, out_$p27, out_$p28, out_$p29, out_$p30, out_$p31, out_$i32, out_$p33, out_$i34, out_$i35, out_$p17 := in_$p18, in_$i19, in_$i20, in_$p21, in_$p25, in_$p26, in_$p27, in_$p28, in_$p29, in_$p30, in_$p31, in_$i32, in_$p33, in_$i34, in_$i35, in_$p17;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_69;

  $bb14:
    assume out_$i35 == 1;
    assume {:verifier.code 0} true;
    out_$p17 := out_$p31;
    goto $bb14_dummy;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    out_$i35 := $ne.i64(out_$i34, $p2i.ref.i64(ctx_list));
    goto corral_source_split_94;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    out_$i34 := $p2i.ref.i64(out_$p33);
    goto corral_source_split_93;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    out_$p33 := $bitcast.ref.ref(out_$p31);
    goto corral_source_split_92;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} out_$i32 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 23} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i32);
    goto corral_source_split_91;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    out_$p31 := $load.ref($M.0, out_$p30);
    goto corral_source_split_90;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    out_$p30 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_89;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    call {:si_unique_call 21} __read_once_size(out_$p27, out_$p29, 8);
    goto corral_source_split_88;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    out_$p29 := $bitcast.ref.ref(out_$p28);
    goto corral_source_split_87;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    out_$p28 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_86;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    out_$p27 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_85;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, in_$p3, out_$p26);
    goto corral_source_split_84;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    out_$p26 := $load.ref($M.0, out_$p25);
    goto corral_source_split_83;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref($add.ref(out_$p17, $mul.ref(0, 304)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_82;

  $bb11:
    assume !(out_$i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    out_$p21 := out_$p17;
    assume true;
    goto $bb11;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    out_$i20 := $eq.i32(out_$i19, in_$i0);
    goto corral_source_split_73;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    out_$i19 := $load.i32($M.0, out_$p18);
    goto corral_source_split_72;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(out_$p17, $mul.ref(0, 304)), $mul.ref(16, 1));
    goto corral_source_split_71;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb14_dummy:
    call {:si_unique_call 1} out_$p18, out_$i19, out_$i20, out_$p21, out_$p25, out_$p26, out_$p27, out_$p28, out_$p29, out_$p30, out_$p31, out_$i32, out_$p33, out_$i34, out_$i35, out_$p17 := vmci_ctx_get_loop_$bb8(in_$i0, in_$p3, in_$p4, out_$p18, out_$i19, out_$i20, out_$p21, out_$p25, out_$p26, out_$p27, out_$p28, out_$p29, out_$p30, out_$p31, out_$i32, out_$p33, out_$i34, out_$i35, out_$p17);
    return;

  exit:
    return;
}



procedure vmci_ctx_get_loop_$bb8(in_$i0: i32, in_$p3: ref, in_$p4: ref, in_$p18: ref, in_$i19: i32, in_$i20: i1, in_$p21: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$i32: i32, in_$p33: ref, in_$i34: i64, in_$i35: i1, in_$p17: ref) returns (out_$p18: ref, out_$i19: i32, out_$i20: i1, out_$p21: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$i32: i32, out_$p33: ref, out_$i34: i64, out_$i35: i1, out_$p17: ref);
  modifies $M.0;



implementation ctx_free_ctx_loop_$bb26(in_$i98: i64, in_$p102: ref, in_$p103: ref, in_$p105: ref, in_$p106: ref, in_$p108: ref, in_$i109: i64, in_$i110: i1, in_$p100: ref, in_$p101: ref) returns (out_$p102: ref, out_$p103: ref, out_$p105: ref, out_$p106: ref, out_$p108: ref, out_$i109: i64, out_$i110: i1, out_$p100: ref, out_$p101: ref)
{

  entry:
    out_$p102, out_$p103, out_$p105, out_$p106, out_$p108, out_$i109, out_$i110, out_$p100, out_$p101 := in_$p102, in_$p103, in_$p105, in_$p106, in_$p108, in_$i109, in_$i110, in_$p100, in_$p101;
    goto $bb26, exit;

  $bb26:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_225;

  $bb28:
    assume out_$i110 == 1;
    assume {:verifier.code 0} true;
    out_$p100, out_$p101 := out_$p106, out_$p100;
    goto $bb28_dummy;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    out_$i110 := $ne.i64(out_$i109, in_$i98);
    goto corral_source_split_236;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    out_$i109 := $p2i.ref.i64(out_$p108);
    goto corral_source_split_235;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    out_$p108 := $add.ref($add.ref(out_$p100, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_234;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    goto corral_source_split_233;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    out_$p106 := $load.ref($M.0, out_$p105);
    goto corral_source_split_232;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    out_$p105 := $add.ref($add.ref($add.ref(out_$p100, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_231;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} kfree(out_$p103);
    goto corral_source_split_230;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    out_$p103 := $bitcast.ref.ref(out_$p101);
    goto corral_source_split_229;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 47} list_del(out_$p102);
    goto corral_source_split_228;

  $bb27:
    assume {:verifier.code 0} true;
    out_$p102 := $add.ref($add.ref(out_$p101, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_227;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb28_dummy:
    call {:si_unique_call 1} out_$p102, out_$p103, out_$p105, out_$p106, out_$p108, out_$i109, out_$i110, out_$p100, out_$p101 := ctx_free_ctx_loop_$bb26(in_$i98, out_$p102, out_$p103, out_$p105, out_$p106, out_$p108, out_$i109, out_$i110, out_$p100, out_$p101);
    return;

  exit:
    return;
}



procedure ctx_free_ctx_loop_$bb26(in_$i98: i64, in_$p102: ref, in_$p103: ref, in_$p105: ref, in_$p106: ref, in_$p108: ref, in_$i109: i64, in_$i110: i1, in_$p100: ref, in_$p101: ref) returns (out_$p102: ref, out_$p103: ref, out_$p105: ref, out_$p106: ref, out_$p108: ref, out_$i109: i64, out_$i110: i1, out_$p100: ref, out_$p101: ref);



implementation ctx_free_ctx_loop_$bb15(in_$i53: i64, in_$p57: ref, in_$i58: i64, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$i62: i64, in_$i63: i64, in_$i64: i1, in_$i65: i32, in_$i66: i1, in_$i67: i32, in_$i68: i64, in_$i69: i64, in_$i70: i1, in_$i71: i1, in_$i72: i32, in_$i73: i64, in_$p75: ref, in_$p76: ref, in_$p77: ref, in_$p78: ref, in_$p79: ref, in_$p81: ref, in_$p82: ref, in_$p84: ref, in_$i85: i64, in_$i86: i1, in_$p55: ref, in_$p56: ref, in_vslice_dummy_var_181: i64) returns (out_$p57: ref, out_$i58: i64, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$i62: i64, out_$i63: i64, out_$i64: i1, out_$i65: i32, out_$i66: i1, out_$i67: i32, out_$i68: i64, out_$i69: i64, out_$i70: i1, out_$i71: i1, out_$i72: i32, out_$i73: i64, out_$p75: ref, out_$p76: ref, out_$p77: ref, out_$p78: ref, out_$p79: ref, out_$p81: ref, out_$p82: ref, out_$p84: ref, out_$i85: i64, out_$i86: i1, out_$p55: ref, out_$p56: ref, out_vslice_dummy_var_181: i64)
{

  entry:
    out_$p57, out_$i58, out_$p59, out_$p60, out_$p61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$p75, out_$p76, out_$p77, out_$p78, out_$p79, out_$p81, out_$p82, out_$p84, out_$i85, out_$i86, out_$p55, out_$p56, out_vslice_dummy_var_181 := in_$p57, in_$i58, in_$p59, in_$p60, in_$p61, in_$i62, in_$i63, in_$i64, in_$i65, in_$i66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$p75, in_$p76, in_$p77, in_$p78, in_$p79, in_$p81, in_$p82, in_$p84, in_$i85, in_$i86, in_$p55, in_$p56, in_vslice_dummy_var_181;
    goto $bb15, exit;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_170;

  $bb20:
    assume out_$i86 == 1;
    assume {:verifier.code 0} true;
    out_$p55, out_$p56 := out_$p56, out_$p82;
    goto $bb20_dummy;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    out_$i86 := $ne.i64(out_$i85, in_$i53);
    goto corral_source_split_207;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    out_$i85 := $p2i.ref.i64(out_$p84);
    goto corral_source_split_206;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref($add.ref(out_$p56, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_205;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    goto corral_source_split_204;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    out_$p82 := $load.ref($M.0, out_$p81);
    goto corral_source_split_203;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref($add.ref($add.ref(out_$p56, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_202;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} kfree(out_$p79);
    goto corral_source_split_201;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    out_$p79 := $bitcast.ref.ref(out_$p55);
    goto corral_source_split_200;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} kfree(out_$p78);
    goto corral_source_split_199;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    out_$p78 := $bitcast.ref.ref(out_$p77);
    goto corral_source_split_198;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    out_$p77 := $load.ref($M.0, out_$p76);
    goto corral_source_split_197;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref(out_$p55, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_196;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} list_del(out_$p75);
    goto corral_source_split_195;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref(out_$p55, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_194;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} out_vslice_dummy_var_181 := ldv__builtin_expect(out_$i73, 0);
    goto corral_source_split_193;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    out_$i73 := $sext.i32.i64(out_$i72);
    goto corral_source_split_192;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    out_$i72 := $zext.i1.i32(out_$i71);
    goto corral_source_split_191;

  $bb19:
    assume {:verifier.code 0} true;
    out_$i71 := $ne.i32(out_$i65, 0);
    goto corral_source_split_190;

  $bb18:
    assume !(out_$i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} warn_slowpath_null(.str.63, 466);
    goto corral_source_split_188;

  $bb17:
    assume out_$i70 == 1;
    goto corral_source_split_187;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    out_$i70 := $ne.i64(out_$i69, 0);
    goto corral_source_split_185;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} out_$i69 := ldv__builtin_expect(out_$i68, 0);
    call {:si_unique_call 41} {:cexpr "tmp___3"} boogie_si_record_i64(out_$i69);
    goto corral_source_split_184;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    out_$i68 := $sext.i32.i64(out_$i67);
    goto corral_source_split_183;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    out_$i67 := $zext.i1.i32(out_$i66);
    goto corral_source_split_182;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    out_$i66 := $ne.i32(out_$i65, 0);
    goto corral_source_split_181;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    out_$i65 := $zext.i1.i32(out_$i64);
    call {:si_unique_call 39} {:cexpr "__ret_warn_on"} boogie_si_record_i32(out_$i65);
    goto corral_source_split_180;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    out_$i64 := $ne.i64(out_$i58, out_$i63);
    goto corral_source_split_179;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    out_$i63 := $add.i64(out_$i62, 24);
    goto corral_source_split_178;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    out_$i62 := $load.i64($M.0, out_$p61);
    goto corral_source_split_177;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(out_$p60, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_176;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    out_$p60 := $load.ref($M.0, out_$p59);
    goto corral_source_split_175;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref(out_$p55, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_174;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    out_$i58 := $load.i64($M.0, out_$p57);
    goto corral_source_split_173;

  $bb16:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(out_$p55, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_172;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb20_dummy:
    call {:si_unique_call 1} out_$p57, out_$i58, out_$p59, out_$p60, out_$p61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$p75, out_$p76, out_$p77, out_$p78, out_$p79, out_$p81, out_$p82, out_$p84, out_$i85, out_$i86, out_$p55, out_$p56, out_vslice_dummy_var_181 := ctx_free_ctx_loop_$bb15(in_$i53, out_$p57, out_$i58, out_$p59, out_$p60, out_$p61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$p75, out_$p76, out_$p77, out_$p78, out_$p79, out_$p81, out_$p82, out_$p84, out_$i85, out_$i86, out_$p55, out_$p56, out_vslice_dummy_var_181);
    return;

  exit:
    return;
}



procedure ctx_free_ctx_loop_$bb15(in_$i53: i64, in_$p57: ref, in_$i58: i64, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$i62: i64, in_$i63: i64, in_$i64: i1, in_$i65: i32, in_$i66: i1, in_$i67: i32, in_$i68: i64, in_$i69: i64, in_$i70: i1, in_$i71: i1, in_$i72: i32, in_$i73: i64, in_$p75: ref, in_$p76: ref, in_$p77: ref, in_$p78: ref, in_$p79: ref, in_$p81: ref, in_$p82: ref, in_$p84: ref, in_$i85: i64, in_$i86: i1, in_$p55: ref, in_$p56: ref, in_vslice_dummy_var_181: i64) returns (out_$p57: ref, out_$i58: i64, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$i62: i64, out_$i63: i64, out_$i64: i1, out_$i65: i32, out_$i66: i1, out_$i67: i32, out_$i68: i64, out_$i69: i64, out_$i70: i1, out_$i71: i1, out_$i72: i32, out_$i73: i64, out_$p75: ref, out_$p76: ref, out_$p77: ref, out_$p78: ref, out_$p79: ref, out_$p81: ref, out_$p82: ref, out_$p84: ref, out_$i85: i64, out_$i86: i1, out_$p55: ref, out_$p56: ref, out_vslice_dummy_var_181: i64);



implementation ctx_free_ctx_loop_$bb1(in_$p1: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p18: ref, in_$i19: i64, in_$i20: i32, in_$i21: i1, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$i26: i64, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$i30: i64, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$i35: i64, in_$i36: i64, in_$i37: i1, in_$i38: i8, in_$i39: i1, in_$i40: i32, in_$i41: i1, in_cmdloc_dummy_var_3: [ref]i8, in_cmdloc_dummy_var_4: [ref]i8, in_cmdloc_dummy_var_5: [ref]i8) returns (out_$p18: ref, out_$i19: i64, out_$i20: i32, out_$i21: i1, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$i26: i64, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$i30: i64, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$i35: i64, out_$i36: i64, out_$i37: i1, out_$i38: i8, out_$i39: i1, out_$i40: i32, out_$i41: i1, out_cmdloc_dummy_var_3: [ref]i8, out_cmdloc_dummy_var_4: [ref]i8, out_cmdloc_dummy_var_5: [ref]i8)
{

  entry:
    out_$p18, out_$i19, out_$i20, out_$i21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p27, out_$p28, out_$p29, out_$i30, out_$p31, out_$p32, out_$p33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_cmdloc_dummy_var_3, out_cmdloc_dummy_var_4, out_cmdloc_dummy_var_5 := in_$p18, in_$i19, in_$i20, in_$i21, in_$p22, in_$p23, in_$p24, in_$i25, in_$i26, in_$p27, in_$p28, in_$p29, in_$i30, in_$p31, in_$p32, in_$p33, in_$p34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_cmdloc_dummy_var_3, in_cmdloc_dummy_var_4, in_cmdloc_dummy_var_5;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    out_$p34 := $bitcast.ref.ref(in_$p1);
    goto corral_source_split_119;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    goto corral_source_split_147_dummy;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_3 := $M.2;
    out_cmdloc_dummy_var_4 := $M.2;
    call {:si_unique_call 38} out_cmdloc_dummy_var_5 := $memcpy.i8(out_cmdloc_dummy_var_3, out_cmdloc_dummy_var_4, out_$p32, out_$p33, 8, $zext.i32.i64(4), 0 == 1);
    $M.2 := out_cmdloc_dummy_var_5;
    goto corral_source_split_147;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    out_$p33 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_146;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    out_$p32 := $bitcast.ref.ref(in_$p1);
    goto corral_source_split_145;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, out_$p31, out_$i30);
    goto corral_source_split_144;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    out_$p31 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_143;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} out_$i30 := vmci_handle_arr_get_entry(out_$p29, 0);
    goto corral_source_split_142;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    out_$p29 := $load.ref($M.0, out_$p28);
    goto corral_source_split_141;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(in_$p5, $mul.ref($sub.ref(0, 20), 304)), $mul.ref(136, 1));
    goto corral_source_split_140;

  $bb4:
    assume !(out_$i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    $M.3 := $store.i64($M.3, out_$p27, out_$i26);
    goto corral_source_split_138;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    out_$p27 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_137;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} out_$i26 := vmci_handle_arr_remove_entry(out_$p23, out_$i25);
    goto corral_source_split_136;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i64($M.2, out_$p24);
    goto corral_source_split_135;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    out_$p24 := $bitcast.ref.ref(in_$p1);
    goto corral_source_split_134;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    out_$p23 := $load.ref($M.0, out_$p22);
    goto corral_source_split_133;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(in_$p5, $mul.ref($sub.ref(0, 20), 304)), $mul.ref(136, 1));
    goto corral_source_split_132;

  $bb3:
    assume out_$i21 == 1;
    goto corral_source_split_131;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    out_$i21 := $slt.i32(out_$i20, 0);
    goto corral_source_split_129;

  SeqInstr_12:
    call {:si_unique_call 35} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i20);
    goto corral_source_split_128;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} out_$i20 := vmci_qp_broker_detach(out_$i19, in_$p6);
    goto SeqInstr_11;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    out_$i19 := $load.i64($M.2, out_$p18);
    goto corral_source_split_127;

  $bb2:
    assume {:verifier.code 0} true;
    out_$p18 := $bitcast.ref.ref(in_$p1);
    goto corral_source_split_126;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb9:
    assume out_$i41 == 1;
    goto corral_source_split_154;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    out_$i41 := $ne.i32(out_$i40, 0);
    goto corral_source_split_152;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_151;

  $bb7:
    assume !(out_$i39 == 1);
    assume {:verifier.code 0} true;
    out_$i40 := 1;
    goto $bb8;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    out_$i40 := 0;
    goto $bb8;

  $bb6:
    assume out_$i39 == 1;
    goto corral_source_split_149;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    out_$i39 := $trunc.i8.i1(out_$i38);
    goto corral_source_split_124;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    out_$i38 := $zext.i1.i8(out_$i37);
    call {:si_unique_call 33} {:cexpr "tmp___1"} boogie_si_record_i8(out_$i38);
    goto corral_source_split_123;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} out_$i37 := vmci_handle_is_equal(out_$i35, out_$i36);
    goto corral_source_split_122;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    out_$i36 := $load.i64($M.4, VMCI_INVALID_HANDLE);
    goto corral_source_split_121;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    out_$i35 := $load.i64($M.2, out_$p34);
    goto corral_source_split_120;

  corral_source_split_147_dummy:
    call {:si_unique_call 1} out_$p18, out_$i19, out_$i20, out_$i21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p27, out_$p28, out_$p29, out_$i30, out_$p31, out_$p32, out_$p33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_cmdloc_dummy_var_3, out_cmdloc_dummy_var_4, out_cmdloc_dummy_var_5 := ctx_free_ctx_loop_$bb1(in_$p1, in_$p3, in_$p4, in_$p5, in_$p6, out_$p18, out_$i19, out_$i20, out_$i21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p27, out_$p28, out_$p29, out_$i30, out_$p31, out_$p32, out_$p33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_cmdloc_dummy_var_3, out_cmdloc_dummy_var_4, out_cmdloc_dummy_var_5);
    return;

  exit:
    return;
}



procedure ctx_free_ctx_loop_$bb1(in_$p1: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p18: ref, in_$i19: i64, in_$i20: i32, in_$i21: i1, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$i26: i64, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$i30: i64, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$i35: i64, in_$i36: i64, in_$i37: i1, in_$i38: i8, in_$i39: i1, in_$i40: i32, in_$i41: i1, in_cmdloc_dummy_var_3: [ref]i8, in_cmdloc_dummy_var_4: [ref]i8, in_cmdloc_dummy_var_5: [ref]i8) returns (out_$p18: ref, out_$i19: i64, out_$i20: i32, out_$i21: i1, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$i26: i64, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$i30: i64, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$i35: i64, out_$i36: i64, out_$i37: i1, out_$i38: i8, out_$i39: i1, out_$i40: i32, out_$i41: i1, out_cmdloc_dummy_var_3: [ref]i8, out_cmdloc_dummy_var_4: [ref]i8, out_cmdloc_dummy_var_5: [ref]i8);
  modifies $M.2, $M.0, $CurrAddr, $M.3, $M.19, $M.20, $M.21, $M.18, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.45, $M.48, $M.47, $M.89, $M.29, $M.33, assertsPassed, $M.46, $M.90, $M.86, $M.91, $M.34, $M.30, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.31, $M.87, $M.69, $M.35, $M.44, $M.32, $M.108, $M.110, $M.112, $M.114, $M.70, $M.109, $M.111, $M.113, $M.115, $M.6, $M.13, $M.36, $M.38, $M.40, $M.42;



implementation ctx_fire_notification_loop_$bb35(in_$i0: i32, in_$p2: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$i100: i32, in_$p105: ref, in_$p106: ref, in_$i107: i64, in_$i108: i64, in_$p109: ref, in_$p110: ref, in_$p111: ref, in_$p112: ref, in_$p113: ref, in_$p116: ref, in_$p117: ref, in_$p118: ref, in_$p121: ref, in_$p124: ref, in_$p126: ref, in_$p128: ref, in_$i129: i32, in_$i130: i1, in_$p133: ref, in_$i134: i32, in_$p138: ref, in_$i139: i32, in_$i141: i32, in_$i142: i1, in_$i102: i32, in_cmdloc_dummy_var_6: [ref]i8, in_cmdloc_dummy_var_7: [ref]i8, in_cmdloc_dummy_var_8: [ref]i8, in_cmdloc_dummy_var_9: [ref]i8, in_cmdloc_dummy_var_10: [ref]i8, in_cmdloc_dummy_var_11: [ref]i8, in_vslice_dummy_var_183: i32) returns (out_$p105: ref, out_$p106: ref, out_$i107: i64, out_$i108: i64, out_$p109: ref, out_$p110: ref, out_$p111: ref, out_$p112: ref, out_$p113: ref, out_$p116: ref, out_$p117: ref, out_$p118: ref, out_$p121: ref, out_$p124: ref, out_$p126: ref, out_$p128: ref, out_$i129: i32, out_$i130: i1, out_$p133: ref, out_$i134: i32, out_$p138: ref, out_$i139: i32, out_$i141: i32, out_$i142: i1, out_$i102: i32, out_cmdloc_dummy_var_6: [ref]i8, out_cmdloc_dummy_var_7: [ref]i8, out_cmdloc_dummy_var_8: [ref]i8, out_cmdloc_dummy_var_9: [ref]i8, out_cmdloc_dummy_var_10: [ref]i8, out_cmdloc_dummy_var_11: [ref]i8, out_vslice_dummy_var_183: i32)
{

  entry:
    out_$p105, out_$p106, out_$i107, out_$i108, out_$p109, out_$p110, out_$p111, out_$p112, out_$p113, out_$p116, out_$p117, out_$p118, out_$p121, out_$p124, out_$p126, out_$p128, out_$i129, out_$i130, out_$p133, out_$i134, out_$p138, out_$i139, out_$i141, out_$i142, out_$i102, out_cmdloc_dummy_var_6, out_cmdloc_dummy_var_7, out_cmdloc_dummy_var_8, out_cmdloc_dummy_var_9, out_cmdloc_dummy_var_10, out_cmdloc_dummy_var_11, out_vslice_dummy_var_183 := in_$p105, in_$p106, in_$i107, in_$i108, in_$p109, in_$p110, in_$p111, in_$p112, in_$p113, in_$p116, in_$p117, in_$p118, in_$p121, in_$p124, in_$p126, in_$p128, in_$i129, in_$i130, in_$p133, in_$i134, in_$p138, in_$i139, in_$i141, in_$i142, in_$i102, in_cmdloc_dummy_var_6, in_cmdloc_dummy_var_7, in_cmdloc_dummy_var_8, in_cmdloc_dummy_var_9, in_cmdloc_dummy_var_10, in_cmdloc_dummy_var_11, in_vslice_dummy_var_183;
    goto $bb35, exit;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_432;

  $bb40:
    assume out_$i142 == 1;
    assume {:verifier.code 0} true;
    out_$i102 := out_$i141;
    goto $bb40_dummy;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    out_$i142 := $ult.i32(out_$i141, in_$i100);
    goto corral_source_split_469;

  $bb39:
    assume {:verifier.code 0} true;
    out_$i141 := $add.i32(out_$i102, 1);
    call {:si_unique_call 117} {:cexpr "i"} boogie_si_record_i32(out_$i141);
    goto corral_source_split_468;

  $bb38:
    assume !(out_$i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    goto $bb39;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 116} out_vslice_dummy_var_183 := no_printk.ref.i32.i32(.str.64, out_$i134, out_$i139);
    goto corral_source_split_466;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    out_$i139 := $load.i32($M.0, out_$p138);
    goto corral_source_split_465;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    out_$p138 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p13, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_464;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    out_$i134 := $load.i32($M.0, out_$p133);
    goto corral_source_split_463;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    out_$p133 := $add.ref($add.ref($add.ref($add.ref(in_$p13, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_462;

  $bb37:
    assume out_$i130 == 1;
    goto corral_source_split_461;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    out_$i130 := $slt.i32(out_$i129, 0);
    goto corral_source_split_459;

  SeqInstr_21:
    call {:si_unique_call 115} {:cexpr "result"} boogie_si_record_i32(out_$i129);
    goto corral_source_split_458;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 114} out_$i129 := vmci_datagram_dispatch(0, out_$p128, 0);
    goto SeqInstr_20;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    out_$p128 := $add.ref($add.ref($add.ref(in_$p13, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_457;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p126, in_$i0);
    goto corral_source_split_456;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    out_$p126 := $add.ref($add.ref($add.ref(in_$p13, $mul.ref(0, 40)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_455;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p124, 1);
    goto corral_source_split_454;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    out_$p124 := $add.ref($add.ref($add.ref($add.ref(in_$p13, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_453;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p121, 16);
    goto corral_source_split_452;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    out_$p121 := $add.ref($add.ref($add.ref($add.ref(in_$p13, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_451;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_9 := $M.0;
    out_cmdloc_dummy_var_10 := $M.0;
    call {:si_unique_call 113} out_cmdloc_dummy_var_11 := $memcpy.i8(out_cmdloc_dummy_var_9, out_cmdloc_dummy_var_10, out_$p117, out_$p118, 8, $zext.i32.i64(4), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_11;
    goto corral_source_split_450;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    out_$p118 := $bitcast.ref.ref(in_$p14);
    goto corral_source_split_449;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    out_$p117 := $bitcast.ref.ref(out_$p116);
    goto corral_source_split_448;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    out_$p116 := $add.ref($add.ref($add.ref($add.ref(in_$p13, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_447;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p113, 0);
    goto corral_source_split_446;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    out_$p113 := $add.ref($add.ref(in_$p14, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_445;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p112, 0);
    goto corral_source_split_444;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    out_$p112 := $add.ref($add.ref(in_$p14, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_443;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_6 := $M.0;
    out_cmdloc_dummy_var_7 := $M.0;
    call {:si_unique_call 112} out_cmdloc_dummy_var_8 := $memcpy.i8(out_cmdloc_dummy_var_6, out_cmdloc_dummy_var_7, out_$p110, out_$p111, 8, $zext.i32.i64(4), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_8;
    goto corral_source_split_442;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    out_$p111 := $bitcast.ref.ref(in_$p15);
    goto corral_source_split_441;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    out_$p110 := $bitcast.ref.ref(out_$p105);
    goto corral_source_split_440;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p109, out_$i108);
    goto corral_source_split_439;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    out_$p109 := $bitcast.ref.ref(in_$p15);
    goto corral_source_split_438;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 111} out_$i108 := vmci_handle_arr_get_entry(out_$p106, out_$i107);
    goto corral_source_split_437;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    out_$i107 := $zext.i32.i64(out_$i102);
    goto corral_source_split_436;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    out_$p106 := $load.ref($M.0, in_$p2);
    goto corral_source_split_435;

  $bb36:
    assume {:verifier.code 0} true;
    out_$p105 := $add.ref($add.ref($add.ref($add.ref(in_$p13, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_434;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb40_dummy:
    call {:si_unique_call 1} out_$p105, out_$p106, out_$i107, out_$i108, out_$p109, out_$p110, out_$p111, out_$p112, out_$p113, out_$p116, out_$p117, out_$p118, out_$p121, out_$p124, out_$p126, out_$p128, out_$i129, out_$i130, out_$p133, out_$i134, out_$p138, out_$i139, out_$i141, out_$i142, out_$i102, out_cmdloc_dummy_var_6, out_cmdloc_dummy_var_7, out_cmdloc_dummy_var_8, out_cmdloc_dummy_var_9, out_cmdloc_dummy_var_10, out_cmdloc_dummy_var_11, out_vslice_dummy_var_183 := ctx_fire_notification_loop_$bb35(in_$i0, in_$p2, in_$p13, in_$p14, in_$p15, in_$i100, out_$p105, out_$p106, out_$i107, out_$i108, out_$p109, out_$p110, out_$p111, out_$p112, out_$p113, out_$p116, out_$p117, out_$p118, out_$p121, out_$p124, out_$p126, out_$p128, out_$i129, out_$i130, out_$p133, out_$i134, out_$p138, out_$i139, out_$i141, out_$i142, out_$i102, out_cmdloc_dummy_var_6, out_cmdloc_dummy_var_7, out_cmdloc_dummy_var_8, out_cmdloc_dummy_var_9, out_cmdloc_dummy_var_10, out_cmdloc_dummy_var_11, out_vslice_dummy_var_183);
    return;

  exit:
    return;
}



procedure ctx_fire_notification_loop_$bb35(in_$i0: i32, in_$p2: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$i100: i32, in_$p105: ref, in_$p106: ref, in_$i107: i64, in_$i108: i64, in_$p109: ref, in_$p110: ref, in_$p111: ref, in_$p112: ref, in_$p113: ref, in_$p116: ref, in_$p117: ref, in_$p118: ref, in_$p121: ref, in_$p124: ref, in_$p126: ref, in_$p128: ref, in_$i129: i32, in_$i130: i1, in_$p133: ref, in_$i134: i32, in_$p138: ref, in_$i139: i32, in_$i141: i32, in_$i142: i1, in_$i102: i32, in_cmdloc_dummy_var_6: [ref]i8, in_cmdloc_dummy_var_7: [ref]i8, in_cmdloc_dummy_var_8: [ref]i8, in_cmdloc_dummy_var_9: [ref]i8, in_cmdloc_dummy_var_10: [ref]i8, in_cmdloc_dummy_var_11: [ref]i8, in_vslice_dummy_var_183: i32) returns (out_$p105: ref, out_$p106: ref, out_$i107: i64, out_$i108: i64, out_$p109: ref, out_$p110: ref, out_$p111: ref, out_$p112: ref, out_$p113: ref, out_$p116: ref, out_$p117: ref, out_$p118: ref, out_$p121: ref, out_$p124: ref, out_$p126: ref, out_$p128: ref, out_$i129: i32, out_$i130: i1, out_$p133: ref, out_$i134: i32, out_$p138: ref, out_$i139: i32, out_$i141: i32, out_$i142: i1, out_$i102: i32, out_cmdloc_dummy_var_6: [ref]i8, out_cmdloc_dummy_var_7: [ref]i8, out_cmdloc_dummy_var_8: [ref]i8, out_cmdloc_dummy_var_9: [ref]i8, out_cmdloc_dummy_var_10: [ref]i8, out_cmdloc_dummy_var_11: [ref]i8, out_vslice_dummy_var_183: i32);
  modifies $M.29, $M.0, $CurrAddr, $M.34, $M.30, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.31, $M.87, $M.69, $M.35, $M.20, $M.21, $M.44, $M.32, $M.108, $M.110, $M.112, $M.114, $M.70, $M.33, $M.2, $M.3, $M.109, $M.111, $M.113, $M.115, assertsPassed, $M.6, $M.13, $M.18, $M.19, $M.36, $M.38, $M.40, $M.42, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.45, $M.48, $M.47, $M.89, $M.46, $M.90, $M.86, $M.91;



implementation ctx_fire_notification_loop_$bb17(in_$p2: ref, in_$p3: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$i53: i64, in_$p57: ref, in_$p58: ref, in_$i59: i64, in_$p60: ref, in_$i61: i64, in_$i62: i1, in_$i63: i8, in_$i64: i1, in_$i65: i32, in_$i66: i1, in_$p67: ref, in_$i68: i32, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$i72: i64, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$p77: ref, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$i81: i32, in_$p82: ref, in_$p83: ref, in_$i84: i64, in_$i85: i1, in_$p56: ref, in_$p33: ref) returns (out_$p57: ref, out_$p58: ref, out_$i59: i64, out_$p60: ref, out_$i61: i64, out_$i62: i1, out_$i63: i8, out_$i64: i1, out_$i65: i32, out_$i66: i1, out_$p67: ref, out_$i68: i32, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$i72: i64, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$p77: ref, out_$p78: ref, out_$p79: ref, out_$p80: ref, out_$i81: i32, out_$p82: ref, out_$p83: ref, out_$i84: i64, out_$i85: i1, out_$p56: ref)
{

  entry:
    out_$p57, out_$p58, out_$i59, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$p67, out_$i68, out_$p69, out_$p70, out_$p71, out_$i72, out_$p74, out_$p75, out_$p76, out_$p77, out_$p78, out_$p79, out_$p80, out_$i81, out_$p82, out_$p83, out_$i84, out_$i85, out_$p56 := in_$p57, in_$p58, in_$i59, in_$p60, in_$i61, in_$i62, in_$i63, in_$i64, in_$i65, in_$i66, in_$p67, in_$i68, in_$p69, in_$p70, in_$p71, in_$i72, in_$p74, in_$p75, in_$p76, in_$p77, in_$p78, in_$p79, in_$p80, in_$i81, in_$p82, in_$p83, in_$i84, in_$i85, in_$p56;
    goto $bb17, exit;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_377;

  $bb26:
    assume out_$i85 == 1;
    assume {:verifier.code 0} true;
    out_$p56 := out_$p80;
    goto $bb26_dummy;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    out_$i85 := $ne.i64(out_$i84, in_$i53);
    goto corral_source_split_408;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    out_$i84 := $p2i.ref.i64(out_$p83);
    goto corral_source_split_407;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    out_$p83 := $add.ref($add.ref(out_$p82, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_406;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    out_$p82 := $bitcast.ref.ref(out_$p80);
    goto corral_source_split_405;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 104} out_$i81 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 105} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i81);
    goto corral_source_split_404;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    out_$p80 := $load.ref($M.15, out_$p79);
    goto corral_source_split_403;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    out_$p79 := $bitcast.ref.ref(in_$p10);
    goto corral_source_split_402;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 103} __read_once_size(out_$p76, out_$p78, 8);
    goto corral_source_split_401;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    out_$p78 := $bitcast.ref.ref(out_$p77);
    goto corral_source_split_400;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    out_$p77 := $bitcast.ref.ref(in_$p10);
    goto corral_source_split_399;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    out_$p76 := $bitcast.ref.ref(in_$p9);
    goto corral_source_split_398;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, in_$p9, out_$p75);
    goto corral_source_split_397;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    out_$p75 := $load.ref($M.14, out_$p74);
    goto corral_source_split_396;

  $bb24:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref($add.ref(out_$p56, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_395;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb22:
    assume out_$i66 == 1;
    goto corral_source_split_393;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    out_$i66 := $ne.i32(out_$i65, 0);
    goto corral_source_split_391;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_390;

  $bb20:
    assume !(out_$i64 == 1);
    assume {:verifier.code 0} true;
    out_$i65 := 1;
    goto $bb21;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    out_$i65 := 0;
    goto $bb21;

  $bb19:
    assume out_$i64 == 1;
    goto corral_source_split_388;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    out_$i64 := $trunc.i8.i1(out_$i63);
    goto corral_source_split_386;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    out_$i63 := $zext.i1.i8(out_$i62);
    call {:si_unique_call 102} {:cexpr "tmp___2"} boogie_si_record_i8(out_$i63);
    goto corral_source_split_385;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 101} out_$i62 := vmci_handle_is_equal(out_$i59, out_$i61);
    goto corral_source_split_384;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    out_$i61 := $load.i64($M.6, out_$p60);
    goto corral_source_split_383;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    out_$p60 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_382;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    out_$i59 := $load.i64($M.11, out_$p58);
    goto corral_source_split_381;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    out_$p58 := $bitcast.ref.ref(out_$p57);
    goto corral_source_split_380;

  $bb18:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(out_$p56, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_379;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 106} vmci_handle_arr_append_entry(in_$p2, out_$i72);
    goto corral_source_split_418;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    out_$i72 := $load.i64($M.13, out_$p71);
    goto corral_source_split_417;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    out_$p71 := $bitcast.ref.ref(in_$p8);
    goto corral_source_split_416;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    $M.13 := $store.i32($M.13, out_$p70, 0);
    goto corral_source_split_415;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref(in_$p8, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_414;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    $M.13 := $store.i32($M.13, out_$p69, out_$i68);
    goto corral_source_split_413;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref($add.ref(in_$p8, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_412;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    out_$i68 := $load.i32($M.12, out_$p67);
    goto corral_source_split_411;

  $bb25:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref(in_$p33, $mul.ref(0, 304)), $mul.ref(16, 1));
    goto corral_source_split_410;

  $bb23:
    assume !(out_$i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb26_dummy:
    call {:si_unique_call 1} out_$p57, out_$p58, out_$i59, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$p67, out_$i68, out_$p69, out_$p70, out_$p71, out_$i72, out_$p74, out_$p75, out_$p76, out_$p77, out_$p78, out_$p79, out_$p80, out_$i81, out_$p82, out_$p83, out_$i84, out_$i85, out_$p56 := ctx_fire_notification_loop_$bb17(in_$p2, in_$p3, in_$p8, in_$p9, in_$p10, in_$i53, out_$p57, out_$p58, out_$i59, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$p67, out_$i68, out_$p69, out_$p70, out_$p71, out_$i72, out_$p74, out_$p75, out_$p76, out_$p77, out_$p78, out_$p79, out_$p80, out_$i81, out_$p82, out_$p83, out_$i84, out_$i85, out_$p56, in_$p33);
    return;

  exit:
    return;
}



procedure ctx_fire_notification_loop_$bb17(in_$p2: ref, in_$p3: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$i53: i64, in_$p57: ref, in_$p58: ref, in_$i59: i64, in_$p60: ref, in_$i61: i64, in_$i62: i1, in_$i63: i8, in_$i64: i1, in_$i65: i32, in_$i66: i1, in_$p67: ref, in_$i68: i32, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$i72: i64, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$p77: ref, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$i81: i32, in_$p82: ref, in_$p83: ref, in_$i84: i64, in_$i85: i1, in_$p56: ref, in_$p33: ref) returns (out_$p57: ref, out_$p58: ref, out_$i59: i64, out_$p60: ref, out_$i61: i64, out_$i62: i1, out_$i63: i8, out_$i64: i1, out_$i65: i32, out_$i66: i1, out_$p67: ref, out_$i68: i32, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$i72: i64, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$p77: ref, out_$p78: ref, out_$p79: ref, out_$p80: ref, out_$i81: i32, out_$p82: ref, out_$p83: ref, out_$i84: i64, out_$i85: i1, out_$p56: ref);
  modifies $M.0, $M.20, $M.21, $CurrAddr, $M.13;



implementation ctx_fire_notification_loop_$bb8(in_$i1: i32, in_$p2: ref, in_$p3: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p34: ref, in_$i35: i32, in_$i36: i1, in_$i37: i8, in_$i38: i1, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$i48: i32, in_$p49: ref, in_$p50: ref, in_$i51: i64, in_$p52: ref, in_$i53: i64, in_$i54: i1, in_$p57: ref, in_$p58: ref, in_$i59: i64, in_$p60: ref, in_$i61: i64, in_$i62: i1, in_$i63: i8, in_$i64: i1, in_$i65: i32, in_$i66: i1, in_$p67: ref, in_$i68: i32, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$i72: i64, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$p77: ref, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$i81: i32, in_$p82: ref, in_$p83: ref, in_$i84: i64, in_$i85: i1, in_$p56: ref, in_$p55: ref, in_$p39: ref, in_$p87: ref, in_$p88: ref, in_$p89: ref, in_$p90: ref, in_$p91: ref, in_$p92: ref, in_$p93: ref, in_$i94: i32, in_$p95: ref, in_$i96: i64, in_$i97: i1, in_$p33: ref) returns (out_$p34: ref, out_$i35: i32, out_$i36: i1, out_$i37: i8, out_$i38: i1, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$i48: i32, out_$p49: ref, out_$p50: ref, out_$i51: i64, out_$p52: ref, out_$i53: i64, out_$i54: i1, out_$p57: ref, out_$p58: ref, out_$i59: i64, out_$p60: ref, out_$i61: i64, out_$i62: i1, out_$i63: i8, out_$i64: i1, out_$i65: i32, out_$i66: i1, out_$p67: ref, out_$i68: i32, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$i72: i64, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$p77: ref, out_$p78: ref, out_$p79: ref, out_$p80: ref, out_$i81: i32, out_$p82: ref, out_$p83: ref, out_$i84: i64, out_$i85: i1, out_$p56: ref, out_$p55: ref, out_$p39: ref, out_$p87: ref, out_$p88: ref, out_$p89: ref, out_$p90: ref, out_$p91: ref, out_$p92: ref, out_$p93: ref, out_$i94: i32, out_$p95: ref, out_$i96: i64, out_$i97: i1, out_$p33: ref)
{

  entry:
    out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p46, out_$p47, out_$i48, out_$p49, out_$p50, out_$i51, out_$p52, out_$i53, out_$i54, out_$p57, out_$p58, out_$i59, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$p67, out_$i68, out_$p69, out_$p70, out_$p71, out_$i72, out_$p74, out_$p75, out_$p76, out_$p77, out_$p78, out_$p79, out_$p80, out_$i81, out_$p82, out_$p83, out_$i84, out_$i85, out_$p56, out_$p55, out_$p39, out_$p87, out_$p88, out_$p89, out_$p90, out_$p91, out_$p92, out_$p93, out_$i94, out_$p95, out_$i96, out_$i97, out_$p33 := in_$p34, in_$i35, in_$i36, in_$i37, in_$i38, in_$p41, in_$p42, in_$p43, in_$p44, in_$p45, in_$p46, in_$p47, in_$i48, in_$p49, in_$p50, in_$i51, in_$p52, in_$i53, in_$i54, in_$p57, in_$p58, in_$i59, in_$p60, in_$i61, in_$i62, in_$i63, in_$i64, in_$i65, in_$i66, in_$p67, in_$i68, in_$p69, in_$p70, in_$p71, in_$i72, in_$p74, in_$p75, in_$p76, in_$p77, in_$p78, in_$p79, in_$p80, in_$i81, in_$p82, in_$p83, in_$i84, in_$i85, in_$p56, in_$p55, in_$p39, in_$p87, in_$p88, in_$p89, in_$p90, in_$p91, in_$p92, in_$p93, in_$i94, in_$p95, in_$i96, in_$i97, in_$p33;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_333;

  $bb29:
    assume out_$i97 == 1;
    assume {:verifier.code 0} true;
    out_$p33 := out_$p93;
    goto $bb29_dummy;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    out_$i97 := $ne.i64(out_$i96, $p2i.ref.i64(ctx_list));
    goto corral_source_split_356;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    out_$i96 := $p2i.ref.i64(out_$p95);
    goto corral_source_split_355;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    out_$p95 := $bitcast.ref.ref(out_$p93);
    goto corral_source_split_354;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 96} out_$i94 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 97} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i94);
    goto corral_source_split_353;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    out_$p93 := $load.ref($M.17, out_$p92);
    goto corral_source_split_352;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    out_$p92 := $bitcast.ref.ref(in_$p12);
    goto corral_source_split_351;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 95} __read_once_size(out_$p89, out_$p91, 8);
    goto corral_source_split_350;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    out_$p91 := $bitcast.ref.ref(out_$p90);
    goto corral_source_split_349;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    out_$p90 := $bitcast.ref.ref(in_$p12);
    goto corral_source_split_348;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    out_$p89 := $bitcast.ref.ref(in_$p11);
    goto corral_source_split_347;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, in_$p11, out_$p88);
    goto corral_source_split_346;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    out_$p88 := $load.ref($M.16, out_$p87);
    goto corral_source_split_345;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref($add.ref($add.ref(out_$p39, $mul.ref(0, 304)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_344;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_343;

  $bb28:
    assume {:verifier.code 0} true;
    out_$p39 := out_$p55;
    goto $bb12;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    out_$p39 := out_$p33;
    goto $bb12;

  $bb10:
    assume out_$i38 == 1;
    goto corral_source_split_341;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    out_$i38 := $trunc.i8.i1(out_$i37);
    goto corral_source_split_339;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    out_$i37 := $zext.i1.i8(out_$i36);
    call {:si_unique_call 94} {:cexpr "tmp___0"} boogie_si_record_i8(out_$i37);
    goto corral_source_split_338;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 93} out_$i36 := vmci_deny_interaction(in_$i1, out_$i35);
    goto corral_source_split_337;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    out_$i35 := $load.i32($M.8, out_$p34);
    goto corral_source_split_336;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(out_$p33, $mul.ref(0, 304)), $mul.ref(272, 1));
    goto corral_source_split_335;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb16:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb15:
    assume {:verifier.code 0} true;
    assume !(out_$i54 == 1);
    goto $bb16;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    out_$p55 := out_$p33;
    goto $bb16;

  $bb27:
    assume !(out_$i85 == 1);
    goto corral_source_split_420;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    out_$i85 := $ne.i64(out_$i84, out_$i53);
    goto corral_source_split_408;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    out_$i84 := $p2i.ref.i64(out_$p83);
    goto corral_source_split_407;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    out_$p83 := $add.ref($add.ref(out_$p82, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_406;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    out_$p82 := $bitcast.ref.ref(out_$p80);
    goto corral_source_split_405;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 104} out_$i81 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 105} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i81);
    goto corral_source_split_404;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    out_$p80 := $load.ref($M.15, out_$p79);
    goto corral_source_split_403;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    out_$p79 := $bitcast.ref.ref(in_$p10);
    goto corral_source_split_402;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 103} __read_once_size(out_$p76, out_$p78, 8);
    goto corral_source_split_401;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    out_$p78 := $bitcast.ref.ref(out_$p77);
    goto corral_source_split_400;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    out_$p77 := $bitcast.ref.ref(in_$p10);
    goto corral_source_split_399;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    out_$p76 := $bitcast.ref.ref(in_$p9);
    goto corral_source_split_398;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, in_$p9, out_$p75);
    goto corral_source_split_397;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    out_$p75 := $load.ref($M.14, out_$p74);
    goto corral_source_split_396;

  $bb24:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref($add.ref(out_$p56, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_395;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb22:
    assume out_$i66 == 1;
    goto corral_source_split_393;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    out_$i66 := $ne.i32(out_$i65, 0);
    goto corral_source_split_391;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_390;

  $bb20:
    assume !(out_$i64 == 1);
    assume {:verifier.code 0} true;
    out_$i65 := 1;
    goto $bb21;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    out_$i65 := 0;
    goto $bb21;

  $bb19:
    assume out_$i64 == 1;
    goto corral_source_split_388;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    out_$i64 := $trunc.i8.i1(out_$i63);
    goto corral_source_split_386;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    out_$i63 := $zext.i1.i8(out_$i62);
    call {:si_unique_call 102} {:cexpr "tmp___2"} boogie_si_record_i8(out_$i63);
    goto corral_source_split_385;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 101} out_$i62 := vmci_handle_is_equal(out_$i59, out_$i61);
    goto corral_source_split_384;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    out_$i61 := $load.i64($M.6, out_$p60);
    goto corral_source_split_383;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    out_$p60 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_382;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    out_$i59 := $load.i64($M.11, out_$p58);
    goto corral_source_split_381;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    out_$p58 := $bitcast.ref.ref(out_$p57);
    goto corral_source_split_380;

  $bb18:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(out_$p56, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_379;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb17:
    call out_$p57, out_$p58, out_$i59, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$p67, out_$i68, out_$p69, out_$p70, out_$p71, out_$i72, out_$p74, out_$p75, out_$p76, out_$p77, out_$p78, out_$p79, out_$p80, out_$i81, out_$p82, out_$p83, out_$i84, out_$i85, out_$p56 := ctx_fire_notification_loop_$bb17(in_$p2, in_$p3, in_$p8, in_$p9, in_$p10, out_$i53, out_$p57, out_$p58, out_$i59, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$p67, out_$i68, out_$p69, out_$p70, out_$p71, out_$i72, out_$p74, out_$p75, out_$p76, out_$p77, out_$p78, out_$p79, out_$p80, out_$i81, out_$p82, out_$p83, out_$i84, out_$i85, out_$p56, out_$p33);
    goto $bb17_last;

  $bb17_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_377;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    out_$p56 := out_$p47;
    goto $bb17;

  $bb26:
    assume out_$i85 == 1;
    assume {:verifier.code 0} true;
    out_$p56 := out_$p80;
    assume false;
    return;

  $bb14:
    assume out_$i54 == 1;
    goto corral_source_split_375;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    out_$p55 := out_$p33;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    out_$i54 := $ne.i64(out_$i51, out_$i53);
    goto corral_source_split_373;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    out_$i53 := $p2i.ref.i64(out_$p52);
    goto corral_source_split_372;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(out_$p33, $mul.ref(0, 304)), $mul.ref(160, 1));
    goto corral_source_split_371;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    out_$i51 := $p2i.ref.i64(out_$p50);
    goto corral_source_split_370;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(out_$p49, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_369;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    out_$p49 := $bitcast.ref.ref(out_$p47);
    goto corral_source_split_368;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 99} out_$i48 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 100} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i48);
    goto corral_source_split_367;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    out_$p47 := $load.ref($M.10, out_$p46);
    goto corral_source_split_366;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    out_$p46 := $bitcast.ref.ref(in_$p7);
    goto corral_source_split_365;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 98} __read_once_size(out_$p43, out_$p45, 8);
    goto corral_source_split_364;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    out_$p45 := $bitcast.ref.ref(out_$p44);
    goto corral_source_split_363;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    out_$p44 := $bitcast.ref.ref(in_$p7);
    goto corral_source_split_362;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    out_$p43 := $bitcast.ref.ref(in_$p6);
    goto corral_source_split_361;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, in_$p6, out_$p42);
    goto corral_source_split_360;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    out_$p42 := $load.ref($M.9, out_$p41);
    goto corral_source_split_359;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref($add.ref(out_$p33, $mul.ref(0, 304)), $mul.ref(160, 1)), $mul.ref(0, 1));
    goto corral_source_split_358;

  $bb11:
    assume !(out_$i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 106} vmci_handle_arr_append_entry(in_$p2, out_$i72);
    goto corral_source_split_418;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    out_$i72 := $load.i64($M.13, out_$p71);
    goto corral_source_split_417;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    out_$p71 := $bitcast.ref.ref(in_$p8);
    goto corral_source_split_416;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    $M.13 := $store.i32($M.13, out_$p70, 0);
    goto corral_source_split_415;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref(in_$p8, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_414;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    $M.13 := $store.i32($M.13, out_$p69, out_$i68);
    goto corral_source_split_413;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref($add.ref(in_$p8, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_412;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    out_$i68 := $load.i32($M.12, out_$p67);
    goto corral_source_split_411;

  $bb25:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref(out_$p33, $mul.ref(0, 304)), $mul.ref(16, 1));
    goto corral_source_split_410;

  $bb23:
    assume !(out_$i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb29_dummy:
    call {:si_unique_call 1} out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p46, out_$p47, out_$i48, out_$p49, out_$p50, out_$i51, out_$p52, out_$i53, out_$i54, out_$p57, out_$p58, out_$i59, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$p67, out_$i68, out_$p69, out_$p70, out_$p71, out_$i72, out_$p74, out_$p75, out_$p76, out_$p77, out_$p78, out_$p79, out_$p80, out_$i81, out_$p82, out_$p83, out_$i84, out_$i85, out_$p56, out_$p55, out_$p39, out_$p87, out_$p88, out_$p89, out_$p90, out_$p91, out_$p92, out_$p93, out_$i94, out_$p95, out_$i96, out_$i97, out_$p33 := ctx_fire_notification_loop_$bb8(in_$i1, in_$p2, in_$p3, in_$p6, in_$p7, in_$p8, in_$p9, in_$p10, in_$p11, in_$p12, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p46, out_$p47, out_$i48, out_$p49, out_$p50, out_$i51, out_$p52, out_$i53, out_$i54, out_$p57, out_$p58, out_$i59, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$p67, out_$i68, out_$p69, out_$p70, out_$p71, out_$i72, out_$p74, out_$p75, out_$p76, out_$p77, out_$p78, out_$p79, out_$p80, out_$i81, out_$p82, out_$p83, out_$i84, out_$i85, out_$p56, out_$p55, out_$p39, out_$p87, out_$p88, out_$p89, out_$p90, out_$p91, out_$p92, out_$p93, out_$i94, out_$p95, out_$i96, out_$i97, out_$p33);
    return;

  exit:
    return;
}



procedure ctx_fire_notification_loop_$bb8(in_$i1: i32, in_$p2: ref, in_$p3: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p34: ref, in_$i35: i32, in_$i36: i1, in_$i37: i8, in_$i38: i1, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$i48: i32, in_$p49: ref, in_$p50: ref, in_$i51: i64, in_$p52: ref, in_$i53: i64, in_$i54: i1, in_$p57: ref, in_$p58: ref, in_$i59: i64, in_$p60: ref, in_$i61: i64, in_$i62: i1, in_$i63: i8, in_$i64: i1, in_$i65: i32, in_$i66: i1, in_$p67: ref, in_$i68: i32, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$i72: i64, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$p77: ref, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$i81: i32, in_$p82: ref, in_$p83: ref, in_$i84: i64, in_$i85: i1, in_$p56: ref, in_$p55: ref, in_$p39: ref, in_$p87: ref, in_$p88: ref, in_$p89: ref, in_$p90: ref, in_$p91: ref, in_$p92: ref, in_$p93: ref, in_$i94: i32, in_$p95: ref, in_$i96: i64, in_$i97: i1, in_$p33: ref) returns (out_$p34: ref, out_$i35: i32, out_$i36: i1, out_$i37: i8, out_$i38: i1, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$i48: i32, out_$p49: ref, out_$p50: ref, out_$i51: i64, out_$p52: ref, out_$i53: i64, out_$i54: i1, out_$p57: ref, out_$p58: ref, out_$i59: i64, out_$p60: ref, out_$i61: i64, out_$i62: i1, out_$i63: i8, out_$i64: i1, out_$i65: i32, out_$i66: i1, out_$p67: ref, out_$i68: i32, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$i72: i64, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$p77: ref, out_$p78: ref, out_$p79: ref, out_$p80: ref, out_$i81: i32, out_$p82: ref, out_$p83: ref, out_$i84: i64, out_$i85: i1, out_$p56: ref, out_$p55: ref, out_$p39: ref, out_$p87: ref, out_$p88: ref, out_$p89: ref, out_$p90: ref, out_$p91: ref, out_$p92: ref, out_$p93: ref, out_$i94: i32, out_$p95: ref, out_$i96: i64, out_$i97: i1, out_$p33: ref);
  modifies $M.0, $M.20, $M.21, $CurrAddr, $M.13;



implementation vmci_handle_arr_remove_entry_loop_$bb4(in_$p0: ref, in_$p3: ref, in_$p7: ref, in_$p12: ref, in_$p13: ref, in_$i14: i64, in_$p15: ref, in_$i16: i64, in_$i17: i1, in_$i18: i8, in_$i19: i1, in_$i20: i64, in_$i42: i64, in_$i43: i64, in_$i44: i1, in_$i10: i64) returns (out_$p12: ref, out_$p13: ref, out_$i14: i64, out_$p15: ref, out_$i16: i64, out_$i17: i1, out_$i18: i8, out_$i19: i1, out_$i20: i64, out_$i42: i64, out_$i43: i64, out_$i44: i1, out_$i10: i64)
{

  entry:
    out_$p12, out_$p13, out_$i14, out_$p15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i42, out_$i43, out_$i44, out_$i10 := in_$p12, in_$p13, in_$i14, in_$p15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i42, in_$i43, in_$i44, in_$i10;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_767;

  $bb10:
    assume out_$i44 == 1;
    assume {:verifier.code 0} true;
    out_$i10 := out_$i42;
    goto $bb10_dummy;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    out_$i44 := $ugt.i64(out_$i43, out_$i42);
    goto corral_source_split_809;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    out_$i43 := $load.i64($M.0, in_$p7);
    goto corral_source_split_808;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i42 := $add.i64(out_$i10, 1);
    call {:si_unique_call 170} {:cexpr "i"} boogie_si_record_i64(out_$i42);
    goto corral_source_split_807;

  $bb7:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    out_$i20 := out_$i10;
    assume true;
    goto $bb7;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    out_$i19 := $trunc.i8.i1(out_$i18);
    goto corral_source_split_776;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    out_$i18 := $zext.i1.i8(out_$i17);
    call {:si_unique_call 165} {:cexpr "tmp"} boogie_si_record_i8(out_$i18);
    goto corral_source_split_775;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 164} out_$i17 := vmci_handle_is_equal(out_$i14, out_$i16);
    goto corral_source_split_774;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    out_$i16 := $load.i64($M.19, out_$p15);
    goto corral_source_split_773;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    out_$p15 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_772;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    out_$i14 := $load.i64($M.0, out_$p13);
    goto corral_source_split_771;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    out_$p13 := $bitcast.ref.ref(out_$p12);
    goto corral_source_split_770;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 16)), $mul.ref(16, 1)), $mul.ref(out_$i10, 8));
    goto corral_source_split_769;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p12, out_$p13, out_$i14, out_$p15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i42, out_$i43, out_$i44, out_$i10 := vmci_handle_arr_remove_entry_loop_$bb4(in_$p0, in_$p3, in_$p7, out_$p12, out_$p13, out_$i14, out_$p15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i42, out_$i43, out_$i44, out_$i10);
    return;

  exit:
    return;
}



procedure vmci_handle_arr_remove_entry_loop_$bb4(in_$p0: ref, in_$p3: ref, in_$p7: ref, in_$p12: ref, in_$p13: ref, in_$i14: i64, in_$p15: ref, in_$i16: i64, in_$i17: i1, in_$i18: i8, in_$i19: i1, in_$i20: i64, in_$i42: i64, in_$i43: i64, in_$i44: i1, in_$i10: i64) returns (out_$p12: ref, out_$p13: ref, out_$i14: i64, out_$p15: ref, out_$i16: i64, out_$i17: i1, out_$i18: i8, out_$i19: i1, out_$i20: i64, out_$i42: i64, out_$i43: i64, out_$i44: i1, out_$i10: i64);
  modifies $M.20, $M.21, $CurrAddr;



implementation vmci_resource_remove_loop_$bb7(in_$p0: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$p24: ref, in_$i25: i64, in_$i26: i1, in_$i27: i8, in_$i28: i1, in_$p29: ref, in_$p32: ref, in_$p33: ref, in_$i34: i64, in_$i35: i1, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i64, in_$i40: i1, in_$p19: ref) returns (out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$p24: ref, out_$i25: i64, out_$i26: i1, out_$i27: i8, out_$i28: i1, out_$p29: ref, out_$p32: ref, out_$p33: ref, out_$i34: i64, out_$i35: i1, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i64, out_$i40: i1, out_$p19: ref)
{

  entry:
    out_$p20, out_$p21, out_$p22, out_$i23, out_$p24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p29, out_$p32, out_$p33, out_$i34, out_$i35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$p19 := in_$p20, in_$p21, in_$p22, in_$i23, in_$p24, in_$i25, in_$i26, in_$i27, in_$i28, in_$p29, in_$p32, in_$p33, in_$i34, in_$i35, in_$p36, in_$p37, in_$p38, in_$i39, in_$i40, in_$p19;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_1182;

  $bb16:
    assume out_$i40 == 1;
    assume {:verifier.code 0} true;
    out_$p19 := out_$p38;
    goto $bb16_dummy;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    out_$i40 := $ne.i64(out_$i39, 0);
    goto corral_source_split_1215;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    out_$i39 := $p2i.ref.i64(out_$p38);
    goto corral_source_split_1214;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_1213;

  $bb14:
    assume !(out_$i35 == 1);
    assume {:verifier.code 0} true;
    out_$p38 := $0.ref;
    goto $bb15;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    out_$p38 := out_$p37;
    goto $bb15;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref(out_$p36, $mul.ref($sub.ref(0, 16), 136));
    goto corral_source_split_1211;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    out_$p36 := $bitcast.ref.ref(out_$p33);
    goto corral_source_split_1210;

  $bb13:
    assume out_$i35 == 1;
    goto corral_source_split_1209;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    out_$i35 := $ne.i64(out_$i34, 0);
    goto corral_source_split_1207;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    out_$i34 := $p2i.ref.i64(out_$p33);
    goto corral_source_split_1206;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    out_$p33 := $load.ref($M.0, out_$p32);
    goto corral_source_split_1205;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref($add.ref(out_$p19, $mul.ref(0, 136)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1204;

  $bb10:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    out_$p29 := out_$p19;
    assume true;
    goto $bb10;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    out_$i28 := $trunc.i8.i1(out_$i27);
    goto corral_source_split_1192;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    out_$i27 := $zext.i1.i8(out_$i26);
    call {:si_unique_call 243} {:cexpr "tmp___1"} boogie_si_record_i8(out_$i27);
    goto corral_source_split_1191;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 242} out_$i26 := vmci_handle_is_equal(out_$i23, out_$i25);
    goto corral_source_split_1190;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i64($M.0, out_$p24);
    goto corral_source_split_1189;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    out_$p24 := $bitcast.ref.ref(out_$p21);
    goto corral_source_split_1188;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    out_$i23 := $load.i64($M.0, out_$p22);
    goto corral_source_split_1187;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    out_$p22 := $bitcast.ref.ref(out_$p20);
    goto corral_source_split_1186;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(in_$p0, $mul.ref(0, 136)), $mul.ref(0, 1));
    goto corral_source_split_1185;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(out_$p19, $mul.ref(0, 136)), $mul.ref(0, 1));
    goto corral_source_split_1184;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb16_dummy:
    call {:si_unique_call 1} out_$p20, out_$p21, out_$p22, out_$i23, out_$p24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p29, out_$p32, out_$p33, out_$i34, out_$i35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$p19 := vmci_resource_remove_loop_$bb7(in_$p0, out_$p20, out_$p21, out_$p22, out_$i23, out_$p24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p29, out_$p32, out_$p33, out_$i34, out_$i35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$p19);
    return;

  exit:
    return;
}



procedure vmci_resource_remove_loop_$bb7(in_$p0: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$p24: ref, in_$i25: i64, in_$i26: i1, in_$i27: i8, in_$i28: i1, in_$p29: ref, in_$p32: ref, in_$p33: ref, in_$i34: i64, in_$i35: i1, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i64, in_$i40: i1, in_$p19: ref) returns (out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$p24: ref, out_$i25: i64, out_$i26: i1, out_$i27: i8, out_$i28: i1, out_$p29: ref, out_$p32: ref, out_$p33: ref, out_$i34: i64, out_$i35: i1, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i64, out_$i40: i1, out_$p19: ref);
  modifies $M.20, $M.21, $CurrAddr;



implementation vmci_resource_lookup_loop_$bb7(in_$i1: i32, in_$p2: ref, in_$p4: ref, in_$p27: ref, in_$i28: i32, in_$p30: ref, in_$i31: i32, in_$p32: ref, in_$i33: i32, in_$i34: i1, in_$p35: ref, in_$i36: i32, in_$i37: i1, in_$p38: ref, in_$i39: i32, in_$i40: i1, in_$i42: i1, in_$p41: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$i51: i32, in_$i52: i64, in_$i53: i1, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$i57: i64, in_$i58: i1, in_$p25: ref) returns (out_$p27: ref, out_$i28: i32, out_$p30: ref, out_$i31: i32, out_$p32: ref, out_$i33: i32, out_$i34: i1, out_$p35: ref, out_$i36: i32, out_$i37: i1, out_$p38: ref, out_$i39: i32, out_$i40: i1, out_$i42: i1, out_$p41: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$i51: i32, out_$i52: i64, out_$i53: i1, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$i57: i64, out_$i58: i1, out_$p25: ref)
{

  entry:
    out_$p27, out_$i28, out_$p30, out_$i31, out_$p32, out_$i33, out_$i34, out_$p35, out_$i36, out_$i37, out_$p38, out_$i39, out_$i40, out_$i42, out_$p41, out_$p45, out_$p46, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$i53, out_$p54, out_$p55, out_$p56, out_$i57, out_$i58, out_$p25 := in_$p27, in_$i28, in_$p30, in_$i31, in_$p32, in_$i33, in_$i34, in_$p35, in_$i36, in_$i37, in_$p38, in_$i39, in_$i40, in_$i42, in_$p41, in_$p45, in_$p46, in_$p47, in_$p48, in_$p49, in_$p50, in_$i51, in_$i52, in_$i53, in_$p54, in_$p55, in_$p56, in_$i57, in_$i58, in_$p25;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_1905;

  $bb24:
    assume out_$i58 == 1;
    assume {:verifier.code 0} true;
    out_$p25 := out_$p56;
    goto $bb24_dummy;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    out_$i58 := $ne.i64(out_$i57, 0);
    goto corral_source_split_1950;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    out_$i57 := $p2i.ref.i64(out_$p56);
    goto corral_source_split_1949;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_1948;

  $bb22:
    assume !(out_$i53 == 1);
    assume {:verifier.code 0} true;
    out_$p56 := $0.ref;
    goto $bb23;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    out_$p56 := out_$p55;
    goto $bb23;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref(out_$p54, $mul.ref($sub.ref(0, 16), 136));
    goto corral_source_split_1946;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    out_$p54 := $bitcast.ref.ref(out_$p50);
    goto corral_source_split_1945;

  $bb21:
    assume out_$i53 == 1;
    goto corral_source_split_1944;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    out_$i53 := $ne.i64(out_$i52, 0);
    goto corral_source_split_1942;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    out_$i52 := $p2i.ref.i64(out_$p50);
    goto corral_source_split_1941;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} out_$i51 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 401} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i51);
    goto corral_source_split_1940;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    out_$p50 := $load.ref($M.0, out_$p49);
    goto corral_source_split_1939;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    out_$p49 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_1938;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} __read_once_size(out_$p46, out_$p48, 8);
    goto corral_source_split_1937;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    out_$p48 := $bitcast.ref.ref(out_$p47);
    goto corral_source_split_1936;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    out_$p47 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_1935;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    out_$p46 := $bitcast.ref.ref(out_$p45);
    goto corral_source_split_1934;

  $bb20:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref($add.ref(out_$p25, $mul.ref(0, 136)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1933;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i34 == 1);
    goto $bb11;

  $bb13:
    assume {:verifier.code 0} true;
    assume !(out_$i37 == 1);
    goto $bb11;

  $bb18:
    assume {:verifier.code 0} true;
    assume !(out_$i42 == 1);
    goto $bb11;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    out_$p41 := out_$p25;
    assume true;
    goto $bb18;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    out_$i42 := $eq.i32(out_$i28, $sub.i32(0, 1));
    goto corral_source_split_1928;

  $bb16:
    assume !(out_$i40 == 1);
    goto corral_source_split_1927;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    out_$p41 := out_$p25;
    assume true;
    goto $bb16;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    out_$i40 := $eq.i32(out_$i39, out_$i28);
    goto corral_source_split_1923;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    out_$i39 := $load.i32($M.32, out_$p38);
    goto corral_source_split_1922;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(in_$p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1921;

  $bb12:
    assume out_$i37 == 1;
    goto corral_source_split_1920;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    out_$i37 := $eq.i32(out_$i36, out_$i31);
    goto corral_source_split_1918;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    out_$i36 := $load.i32($M.32, out_$p35);
    goto corral_source_split_1917;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(in_$p2, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_1916;

  $bb9:
    assume out_$i34 == 1;
    goto corral_source_split_1915;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    out_$i34 := $eq.i32(out_$i33, in_$i1);
    goto corral_source_split_1913;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i32($M.0, out_$p32);
    goto corral_source_split_1912;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(out_$p25, $mul.ref(0, 136)), $mul.ref(8, 1));
    goto corral_source_split_1911;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i32($M.0, out_$p30);
    call {:si_unique_call 397} {:cexpr "rid"} boogie_si_record_i32(out_$i31);
    goto corral_source_split_1910;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref($add.ref(out_$p25, $mul.ref(0, 136)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_1909;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i32($M.0, out_$p27);
    call {:si_unique_call 396} {:cexpr "cid"} boogie_si_record_i32(out_$i28);
    goto corral_source_split_1908;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref($add.ref(out_$p25, $mul.ref(0, 136)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1907;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb24_dummy:
    call {:si_unique_call 1} out_$p27, out_$i28, out_$p30, out_$i31, out_$p32, out_$i33, out_$i34, out_$p35, out_$i36, out_$i37, out_$p38, out_$i39, out_$i40, out_$i42, out_$p41, out_$p45, out_$p46, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$i53, out_$p54, out_$p55, out_$p56, out_$i57, out_$i58, out_$p25 := vmci_resource_lookup_loop_$bb7(in_$i1, in_$p2, in_$p4, out_$p27, out_$i28, out_$p30, out_$i31, out_$p32, out_$i33, out_$i34, out_$p35, out_$i36, out_$i37, out_$p38, out_$i39, out_$i40, out_$i42, out_$p41, out_$p45, out_$p46, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$i53, out_$p54, out_$p55, out_$p56, out_$i57, out_$i58, out_$p25);
    return;

  exit:
    return;
}



procedure vmci_resource_lookup_loop_$bb7(in_$i1: i32, in_$p2: ref, in_$p4: ref, in_$p27: ref, in_$i28: i32, in_$p30: ref, in_$i31: i32, in_$p32: ref, in_$i33: i32, in_$i34: i1, in_$p35: ref, in_$i36: i32, in_$i37: i1, in_$p38: ref, in_$i39: i32, in_$i40: i1, in_$i42: i1, in_$p41: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$i51: i32, in_$i52: i64, in_$i53: i1, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$i57: i64, in_$i58: i1, in_$p25: ref) returns (out_$p27: ref, out_$i28: i32, out_$p30: ref, out_$i31: i32, out_$p32: ref, out_$i33: i32, out_$i34: i1, out_$p35: ref, out_$i36: i32, out_$i37: i1, out_$p38: ref, out_$i39: i32, out_$i40: i1, out_$i42: i1, out_$p41: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$i51: i32, out_$i52: i64, out_$i53: i1, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$i57: i64, out_$i58: i1, out_$p25: ref);
  modifies $M.0;



implementation event_deliver_loop_$bb4(in_$p0: ref, in_$p3: ref, in_$p4: ref, in_$i22: i64, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$i28: i32, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$i40: i32, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$i44: i64, in_$i45: i1, in_$p24: ref) returns (out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$i28: i32, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$i40: i32, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$i44: i64, out_$i45: i1, out_$p24: ref)
{

  entry:
    out_$p25, out_$p26, out_$p27, out_$i28, out_$p29, out_$p30, out_$p31, out_$p33, out_$p34, out_$p35, out_$p36, out_$p37, out_$p38, out_$p39, out_$i40, out_$p41, out_$p42, out_$p43, out_$i44, out_$i45, out_$p24 := in_$p25, in_$p26, in_$p27, in_$i28, in_$p29, in_$p30, in_$p31, in_$p33, in_$p34, in_$p35, in_$p36, in_$p37, in_$p38, in_$p39, in_$i40, in_$p41, in_$p42, in_$p43, in_$i44, in_$i45, in_$p24;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2429;

  $bb6:
    assume out_$i45 == 1;
    assume {:verifier.code 0} true;
    out_$p24 := out_$p42;
    goto $bb6_dummy;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    out_$i45 := $ne.i64(out_$i44, in_$i22);
    goto corral_source_split_2452;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    out_$i44 := $p2i.ref.i64(out_$p43);
    goto corral_source_split_2451;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(out_$p41, $mul.ref($sub.ref(0, 24), 40)), $mul.ref(24, 1));
    goto corral_source_split_2450;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref(out_$p41, $mul.ref($sub.ref(0, 24), 40));
    goto corral_source_split_2449;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    out_$p41 := $bitcast.ref.ref(out_$p39);
    goto corral_source_split_2448;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} out_$i40 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 545} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i40);
    goto corral_source_split_2447;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    out_$p39 := $load.ref($M.0, out_$p38);
    goto corral_source_split_2446;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    out_$p38 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_2445;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 543} __read_once_size(out_$p35, out_$p37, 8);
    goto corral_source_split_2444;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    out_$p37 := $bitcast.ref.ref(out_$p36);
    goto corral_source_split_2443;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    out_$p36 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_2442;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    out_$p35 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_2441;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, in_$p3, out_$p34);
    goto corral_source_split_2440;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    out_$p34 := $load.ref($M.0, out_$p33);
    goto corral_source_split_2439;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref($add.ref(out_$p24, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_2438;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    out_$p31 := $load.ref($M.0, out_$p30);
    call {:si_unique_call 542} devirtbounce.9(out_$p26, out_$i28, out_$p29, out_$p31);
    goto corral_source_split_2437;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(out_$p24, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2436;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(in_$p0, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2435;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i32($M.0, out_$p27);
    goto corral_source_split_2434;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p24, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2433;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    out_$p26 := $load.ref($M.0, out_$p25);
    goto corral_source_split_2432;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(out_$p24, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2431;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p25, out_$p26, out_$p27, out_$i28, out_$p29, out_$p30, out_$p31, out_$p33, out_$p34, out_$p35, out_$p36, out_$p37, out_$p38, out_$p39, out_$i40, out_$p41, out_$p42, out_$p43, out_$i44, out_$i45, out_$p24 := event_deliver_loop_$bb4(in_$p0, in_$p3, in_$p4, in_$i22, out_$p25, out_$p26, out_$p27, out_$i28, out_$p29, out_$p30, out_$p31, out_$p33, out_$p34, out_$p35, out_$p36, out_$p37, out_$p38, out_$p39, out_$i40, out_$p41, out_$p42, out_$p43, out_$i44, out_$i45, out_$p24);
    return;

  exit:
    return;
}



procedure event_deliver_loop_$bb4(in_$p0: ref, in_$p3: ref, in_$p4: ref, in_$i22: i64, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$i28: i32, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$i40: i32, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$i44: i64, in_$i45: i1, in_$p24: ref) returns (out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$i28: i32, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$i40: i32, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$i44: i64, out_$i45: i1, out_$p24: ref);
  modifies $M.0, $M.44;



implementation vmci_ctx_exists_loop_$bb4(in_$i0: i32, in_$p3: ref, in_$p4: ref, in_$p16: ref, in_$i17: i32, in_$i18: i1, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$i28: i32, in_$p29: ref, in_$i30: i64, in_$i31: i1, in_$p15: ref) returns (out_$p16: ref, out_$i17: i32, out_$i18: i1, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$i28: i32, out_$p29: ref, out_$i30: i64, out_$i31: i1, out_$p15: ref)
{

  entry:
    out_$p16, out_$i17, out_$i18, out_$p21, out_$p22, out_$p23, out_$p24, out_$p25, out_$p26, out_$p27, out_$i28, out_$p29, out_$i30, out_$i31, out_$p15 := in_$p16, in_$i17, in_$i18, in_$p21, in_$p22, in_$p23, in_$p24, in_$p25, in_$p26, in_$p27, in_$i28, in_$p29, in_$i30, in_$i31, in_$p15;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2569;

  $bb10:
    assume out_$i31 == 1;
    assume {:verifier.code 0} true;
    out_$p15 := out_$p27;
    goto $bb10_dummy;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    out_$i31 := $ne.i64(out_$i30, $p2i.ref.i64(ctx_list));
    goto corral_source_split_2593;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    out_$i30 := $p2i.ref.i64(out_$p29);
    goto corral_source_split_2592;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    out_$p29 := $bitcast.ref.ref(out_$p27);
    goto corral_source_split_2591;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} out_$i28 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 593} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i28);
    goto corral_source_split_2590;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    out_$p27 := $load.ref($M.0, out_$p26);
    goto corral_source_split_2589;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    out_$p26 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_2588;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} __read_once_size(out_$p23, out_$p25, 8);
    goto corral_source_split_2587;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    out_$p25 := $bitcast.ref.ref(out_$p24);
    goto corral_source_split_2586;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    out_$p24 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_2585;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    out_$p23 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_2584;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, in_$p3, out_$p22);
    goto corral_source_split_2583;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    out_$p22 := $load.ref($M.0, out_$p21);
    goto corral_source_split_2582;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref($add.ref(out_$p15, $mul.ref(0, 304)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2581;

  $bb7:
    assume !(out_$i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    out_$i18 := $eq.i32(out_$i17, in_$i0);
    goto corral_source_split_2573;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    out_$i17 := $load.i32($M.0, out_$p16);
    goto corral_source_split_2572;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(out_$p15, $mul.ref(0, 304)), $mul.ref(16, 1));
    goto corral_source_split_2571;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p16, out_$i17, out_$i18, out_$p21, out_$p22, out_$p23, out_$p24, out_$p25, out_$p26, out_$p27, out_$i28, out_$p29, out_$i30, out_$i31, out_$p15 := vmci_ctx_exists_loop_$bb4(in_$i0, in_$p3, in_$p4, out_$p16, out_$i17, out_$i18, out_$p21, out_$p22, out_$p23, out_$p24, out_$p25, out_$p26, out_$p27, out_$i28, out_$p29, out_$i30, out_$i31, out_$p15);
    return;

  exit:
    return;
}



procedure vmci_ctx_exists_loop_$bb4(in_$i0: i32, in_$p3: ref, in_$p4: ref, in_$p16: ref, in_$i17: i32, in_$i18: i1, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$i28: i32, in_$p29: ref, in_$i30: i64, in_$i31: i1, in_$p15: ref) returns (out_$p16: ref, out_$i17: i32, out_$i18: i1, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$i28: i32, out_$p29: ref, out_$i30: i64, out_$i31: i1, out_$p15: ref);
  modifies $M.0;



implementation qp_release_pages_loop_$bb4(in_$p0: ref, in_$i1: i64, in_$i3: i8, in_$i6: i1, in_$i7: i64, in_$p8: ref, in_$p9: ref, in_$i11: i64, in_$p12: ref, in_$p13: ref, in_$i14: i64, in_$p15: ref, in_$i16: i32, in_$i17: i64, in_$i18: i1, in_$i5: i32, in_vslice_dummy_var_215: i32) returns (out_$i6: i1, out_$i7: i64, out_$p8: ref, out_$p9: ref, out_$i11: i64, out_$p12: ref, out_$p13: ref, out_$i14: i64, out_$p15: ref, out_$i16: i32, out_$i17: i64, out_$i18: i1, out_$i5: i32, out_vslice_dummy_var_215: i32)
{

  entry:
    out_$i6, out_$i7, out_$p8, out_$p9, out_$i11, out_$p12, out_$p13, out_$i14, out_$p15, out_$i16, out_$i17, out_$i18, out_$i5, out_vslice_dummy_var_215 := in_$i6, in_$i7, in_$p8, in_$p9, in_$i11, in_$p12, in_$p13, in_$i14, in_$p15, in_$i16, in_$i17, in_$i18, in_$i5, in_vslice_dummy_var_215;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2752;

  $bb9:
    assume out_$i18 == 1;
    assume {:verifier.code 0} true;
    out_$i5 := out_$i16;
    goto $bb9_dummy;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    out_$i18 := $ult.i64(out_$i17, in_$i1);
    goto corral_source_split_2771;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    out_$i17 := $sext.i32.i64(out_$i16);
    goto corral_source_split_2770;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    out_$i16 := $add.i32(out_$i5, 1);
    call {:si_unique_call 642} {:cexpr "i"} boogie_si_record_i32(out_$i16);
    goto corral_source_split_2769;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p15, $0.ref);
    goto corral_source_split_2768;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref(in_$p0, $mul.ref(out_$i14, 8));
    goto corral_source_split_2767;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    out_$i14 := $sext.i32.i64(out_$i5);
    goto corral_source_split_2766;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 641} put_page(out_$p13);
    goto corral_source_split_2765;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    out_$p13 := $load.ref($M.0, out_$p12);
    goto corral_source_split_2764;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref(in_$p0, $mul.ref(out_$i11, 8));
    goto corral_source_split_2763;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i11 := $sext.i32.i64(out_$i5);
    goto corral_source_split_2762;

  $bb7:
    assume !(out_$i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 640} out_vslice_dummy_var_215 := set_page_dirty(out_$p9);
    goto corral_source_split_2760;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    out_$p9 := $load.ref($M.0, out_$p8);
    goto corral_source_split_2759;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref(in_$p0, $mul.ref(out_$i7, 8));
    goto corral_source_split_2758;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    out_$i7 := $sext.i32.i64(out_$i5);
    goto corral_source_split_2757;

  $bb6:
    assume out_$i6 == 1;
    goto corral_source_split_2756;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i6 := $trunc.i8.i1(in_$i3);
    goto corral_source_split_2754;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb9_dummy:
    call {:si_unique_call 1} out_$i6, out_$i7, out_$p8, out_$p9, out_$i11, out_$p12, out_$p13, out_$i14, out_$p15, out_$i16, out_$i17, out_$i18, out_$i5, out_vslice_dummy_var_215 := qp_release_pages_loop_$bb4(in_$p0, in_$i1, in_$i3, out_$i6, out_$i7, out_$p8, out_$p9, out_$i11, out_$p12, out_$p13, out_$i14, out_$p15, out_$i16, out_$i17, out_$i18, out_$i5, out_vslice_dummy_var_215);
    return;

  exit:
    return;
}



procedure qp_release_pages_loop_$bb4(in_$p0: ref, in_$i1: i64, in_$i3: i8, in_$i6: i1, in_$i7: i64, in_$p8: ref, in_$p9: ref, in_$i11: i64, in_$p12: ref, in_$p13: ref, in_$i14: i64, in_$p15: ref, in_$i16: i32, in_$i17: i64, in_$i18: i1, in_$i5: i32, in_vslice_dummy_var_215: i32) returns (out_$i6: i1, out_$i7: i64, out_$p8: ref, out_$p9: ref, out_$i11: i64, out_$p12: ref, out_$p13: ref, out_$i14: i64, out_$p15: ref, out_$i16: i32, out_$i17: i64, out_$i18: i1, out_$i5: i32, out_vslice_dummy_var_215: i32);
  modifies $M.0;



implementation qp_list_find_loop_$bb8(in_$p2: ref, in_$i15: i64, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$p21: ref, in_$i22: i64, in_$i23: i1, in_$i24: i8, in_$i25: i1, in_$p26: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$i31: i64, in_$i32: i1, in_$p17: ref) returns (out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$p21: ref, out_$i22: i64, out_$i23: i1, out_$i24: i8, out_$i25: i1, out_$p26: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$i31: i64, out_$i32: i1, out_$p17: ref)
{

  entry:
    out_$p18, out_$p19, out_$i20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p26, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$p17 := in_$p18, in_$p19, in_$i20, in_$p21, in_$i22, in_$i23, in_$i24, in_$i25, in_$p26, in_$p28, in_$p29, in_$p30, in_$i31, in_$i32, in_$p17;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_2815;

  $bb13:
    assume out_$i32 == 1;
    assume {:verifier.code 0} true;
    out_$p17 := out_$p29;
    goto $bb13_dummy;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    out_$i32 := $ne.i64(out_$i31, in_$i15);
    goto corral_source_split_2832;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    out_$i31 := $p2i.ref.i64(out_$p30);
    goto corral_source_split_2831;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    out_$p30 := $bitcast.ref.ref(out_$p29);
    goto corral_source_split_2830;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    out_$p29 := $load.ref($M.0, out_$p28);
    goto corral_source_split_2829;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref($add.ref(out_$p17, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2828;

  $bb11:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    out_$p26 := out_$p17;
    assume true;
    goto $bb11;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    out_$i25 := $trunc.i8.i1(out_$i24);
    goto corral_source_split_2824;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    out_$i24 := $zext.i1.i8(out_$i23);
    call {:si_unique_call 653} {:cexpr "tmp___0"} boogie_si_record_i8(out_$i24);
    goto corral_source_split_2823;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} out_$i23 := vmci_handle_is_equal(out_$i20, out_$i22);
    goto corral_source_split_2822;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    out_$i22 := $load.i64($M.47, out_$p21);
    goto corral_source_split_2821;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    out_$p21 := $bitcast.ref.ref(in_$p2);
    goto corral_source_split_2820;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    out_$i20 := $load.i64($M.0, out_$p19);
    goto corral_source_split_2819;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    out_$p19 := $bitcast.ref.ref(out_$p18);
    goto corral_source_split_2818;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(out_$p17, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_2817;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb13_dummy:
    call {:si_unique_call 1} out_$p18, out_$p19, out_$i20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p26, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$p17 := qp_list_find_loop_$bb8(in_$p2, in_$i15, out_$p18, out_$p19, out_$i20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p26, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$p17);
    return;

  exit:
    return;
}



procedure qp_list_find_loop_$bb8(in_$p2: ref, in_$i15: i64, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$p21: ref, in_$i22: i64, in_$i23: i1, in_$i24: i8, in_$i25: i1, in_$p26: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$i31: i64, in_$i32: i1, in_$p17: ref) returns (out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$p21: ref, out_$i22: i64, out_$i23: i1, out_$i24: i8, out_$i25: i1, out_$p26: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$i31: i64, out_$i32: i1, out_$p17: ref);
  modifies $M.20, $M.21, $CurrAddr;



implementation vmci_handle_arr_has_entry_loop_$bb4(in_$p0: ref, in_$p2: ref, in_$p4: ref, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$p12: ref, in_$i13: i64, in_$i14: i1, in_$i15: i8, in_$i16: i1, in_$i18: i64, in_$i19: i64, in_$i20: i1, in_$i7: i64) returns (out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$p12: ref, out_$i13: i64, out_$i14: i1, out_$i15: i8, out_$i16: i1, out_$i18: i64, out_$i19: i64, out_$i20: i1, out_$i7: i64)
{

  entry:
    out_$p9, out_$p10, out_$i11, out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i18, out_$i19, out_$i20, out_$i7 := in_$p9, in_$p10, in_$i11, in_$p12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i18, in_$i19, in_$i20, in_$i7;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2843;

  $bb10:
    assume out_$i20 == 1;
    assume {:verifier.code 0} true;
    out_$i7 := out_$i18;
    goto $bb10_dummy;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    out_$i20 := $ugt.i64(out_$i19, out_$i18);
    goto corral_source_split_2860;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    out_$i19 := $load.i64($M.0, in_$p4);
    goto corral_source_split_2859;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i18 := $add.i64(out_$i7, 1);
    call {:si_unique_call 657} {:cexpr "i"} boogie_si_record_i64(out_$i18);
    goto corral_source_split_2858;

  $bb7:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    out_$i16 := $trunc.i8.i1(out_$i15);
    goto corral_source_split_2852;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    out_$i15 := $zext.i1.i8(out_$i14);
    call {:si_unique_call 656} {:cexpr "tmp"} boogie_si_record_i8(out_$i15);
    goto corral_source_split_2851;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 655} out_$i14 := vmci_handle_is_equal(out_$i11, out_$i13);
    goto corral_source_split_2850;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    out_$i13 := $load.i64($M.48, out_$p12);
    goto corral_source_split_2849;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    out_$p12 := $bitcast.ref.ref(in_$p2);
    goto corral_source_split_2848;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    out_$i11 := $load.i64($M.0, out_$p10);
    goto corral_source_split_2847;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    out_$p10 := $bitcast.ref.ref(out_$p9);
    goto corral_source_split_2846;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 16)), $mul.ref(16, 1)), $mul.ref(out_$i7, 8));
    goto corral_source_split_2845;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p9, out_$p10, out_$i11, out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i18, out_$i19, out_$i20, out_$i7 := vmci_handle_arr_has_entry_loop_$bb4(in_$p0, in_$p2, in_$p4, out_$p9, out_$p10, out_$i11, out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i18, out_$i19, out_$i20, out_$i7);
    return;

  exit:
    return;
}



procedure vmci_handle_arr_has_entry_loop_$bb4(in_$p0: ref, in_$p2: ref, in_$p4: ref, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$p12: ref, in_$i13: i64, in_$i14: i1, in_$i15: i8, in_$i16: i1, in_$i18: i64, in_$i19: i64, in_$i20: i1, in_$i7: i64) returns (out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$p12: ref, out_$i13: i64, out_$i14: i1, out_$i15: i8, out_$i16: i1, out_$i18: i64, out_$i19: i64, out_$i20: i1, out_$i7: i64);
  modifies $M.20, $M.21, $CurrAddr;



implementation vmci_resource_find_id_loop_$bb1(in_$i0: i32, in_$i1: i32, in_$p2: ref, in_$p3: ref, in_$i4: i32, in_$i5: i32, in_$i6: i1, in_$i7: i32, in_$i8: i64, in_$i9: i64, in_$i10: i1, in_$i11: i32, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$i17: i64, in_$p18: ref, in_$i19: i64, in_$i20: i1, in_$i21: i32, in_$i23: i1, in_cmdloc_dummy_var_82: [ref]i8, in_cmdloc_dummy_var_83: [ref]i8, in_cmdloc_dummy_var_84: [ref]i8) returns (out_$i4: i32, out_$i5: i32, out_$i6: i1, out_$i7: i32, out_$i8: i64, out_$i9: i64, out_$i10: i1, out_$i11: i32, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$i17: i64, out_$p18: ref, out_$i19: i64, out_$i20: i1, out_$i21: i32, out_$i23: i1, out_cmdloc_dummy_var_82: [ref]i8, out_cmdloc_dummy_var_83: [ref]i8, out_cmdloc_dummy_var_84: [ref]i8)
{

  entry:
    out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$p12, out_$p13, out_$p14, out_$p15, out_$p16, out_$i17, out_$p18, out_$i19, out_$i20, out_$i21, out_$i23, out_cmdloc_dummy_var_82, out_cmdloc_dummy_var_83, out_cmdloc_dummy_var_84 := in_$i4, in_$i5, in_$i6, in_$i7, in_$i8, in_$i9, in_$i10, in_$i11, in_$p12, in_$p13, in_$p14, in_$p15, in_$p16, in_$i17, in_$p18, in_$i19, in_$i20, in_$i21, in_$i23, in_cmdloc_dummy_var_82, in_cmdloc_dummy_var_83, in_cmdloc_dummy_var_84;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_3010;

  $bb9:
    assume out_$i23 == 1;
    assume {:verifier.code 0} true;
    out_$i4 := out_$i11;
    goto $bb9_dummy;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i23 := $ne.i32(out_$i11, 1024);
    goto corral_source_split_3038;

  $bb6:
    assume !(out_$i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    out_$i21 := out_$i4;
    assume true;
    goto $bb6;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    out_$i20 := $eq.i64(out_$i19, 0);
    goto corral_source_split_3032;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    out_$i19 := $p2i.ref.i64(out_$p18);
    goto corral_source_split_3031;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 701} out_$p18 := vmci_resource_lookup(out_$i17, in_$i1);
    goto corral_source_split_3030;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    out_$i17 := $load.i64($M.55, out_$p16);
    goto corral_source_split_3029;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    out_$p16 := $bitcast.ref.ref(in_$p2);
    goto corral_source_split_3028;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_82 := $M.55;
    out_cmdloc_dummy_var_83 := $M.55;
    call {:si_unique_call 700} out_cmdloc_dummy_var_84 := $memcpy.i8(out_cmdloc_dummy_var_82, out_cmdloc_dummy_var_83, out_$p14, out_$p15, 8, $zext.i32.i64(4), 0 == 1);
    $M.55 := out_cmdloc_dummy_var_84;
    goto corral_source_split_3027;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    out_$p15 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_3026;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    out_$p14 := $bitcast.ref.ref(in_$p2);
    goto corral_source_split_3025;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    $M.55 := $store.i32($M.55, out_$p13, out_$i4);
    goto corral_source_split_3024;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(in_$p3, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_3023;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    $M.55 := $store.i32($M.55, out_$p12, in_$i0);
    goto corral_source_split_3022;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(in_$p3, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3021;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_3020;

  $bb3:
    assume !(out_$i10 == 1);
    assume {:verifier.code 0} true;
    out_$i11 := out_$i5;
    goto $bb4;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    out_$i11 := 1024;
    goto $bb4;

  $bb2:
    assume out_$i10 == 1;
    goto corral_source_split_3018;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    out_$i10 := $ne.i64(out_$i9, 0);
    goto corral_source_split_3016;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} out_$i9 := ldv__builtin_expect(out_$i8, 0);
    call {:si_unique_call 699} {:cexpr "tmp"} boogie_si_record_i64(out_$i9);
    goto corral_source_split_3015;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    out_$i8 := $sext.i32.i64(out_$i7);
    goto corral_source_split_3014;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    out_$i7 := $zext.i1.i32(out_$i6);
    goto corral_source_split_3013;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    out_$i6 := $eq.i32(out_$i5, $sub.i32(0, 1));
    goto corral_source_split_3012;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    out_$i5 := $add.i32(out_$i4, 1);
    call {:si_unique_call 697} {:cexpr "resource_id"} boogie_si_record_i32(out_$i5);
    goto corral_source_split_3011;

  $bb9_dummy:
    call {:si_unique_call 1} out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$p12, out_$p13, out_$p14, out_$p15, out_$p16, out_$i17, out_$p18, out_$i19, out_$i20, out_$i21, out_$i23, out_cmdloc_dummy_var_82, out_cmdloc_dummy_var_83, out_cmdloc_dummy_var_84 := vmci_resource_find_id_loop_$bb1(in_$i0, in_$i1, in_$p2, in_$p3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$p12, out_$p13, out_$p14, out_$p15, out_$p16, out_$i17, out_$p18, out_$i19, out_$i20, out_$i21, out_$i23, out_cmdloc_dummy_var_82, out_cmdloc_dummy_var_83, out_cmdloc_dummy_var_84);
    return;

  exit:
    return;
}



procedure vmci_resource_find_id_loop_$bb1(in_$i0: i32, in_$i1: i32, in_$p2: ref, in_$p3: ref, in_$i4: i32, in_$i5: i32, in_$i6: i1, in_$i7: i32, in_$i8: i64, in_$i9: i64, in_$i10: i1, in_$i11: i32, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$i17: i64, in_$p18: ref, in_$i19: i64, in_$i20: i1, in_$i21: i32, in_$i23: i1, in_cmdloc_dummy_var_82: [ref]i8, in_cmdloc_dummy_var_83: [ref]i8, in_cmdloc_dummy_var_84: [ref]i8) returns (out_$i4: i32, out_$i5: i32, out_$i6: i1, out_$i7: i32, out_$i8: i64, out_$i9: i64, out_$i10: i1, out_$i11: i32, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$i17: i64, out_$p18: ref, out_$i19: i64, out_$i20: i1, out_$i21: i32, out_$i23: i1, out_cmdloc_dummy_var_82: [ref]i8, out_cmdloc_dummy_var_83: [ref]i8, out_cmdloc_dummy_var_84: [ref]i8);
  modifies $M.32, $M.33, $M.0, $CurrAddr, $M.55;



implementation event_find_loop_$bb81(in_$i0: i32, in_$p11: ref, in_$p117: ref, in_$p118: ref, in_$i119: i32, in_$i120: i1, in_$p122: ref, in_$p123: ref, in_$p124: ref, in_$p125: ref, in_$p126: ref, in_$i127: i64, in_$i128: i1) returns (out_$p11: ref, out_$p117: ref, out_$p118: ref, out_$i119: i32, out_$i120: i1, out_$p122: ref, out_$p123: ref, out_$p124: ref, out_$p125: ref, out_$p126: ref, out_$i127: i64, out_$i128: i1)
{

  entry:
    out_$p11, out_$p117, out_$p118, out_$i119, out_$i120, out_$p122, out_$p123, out_$p124, out_$p125, out_$p126, out_$i127, out_$i128 := in_$p11, in_$p117, in_$p118, in_$i119, in_$i120, in_$p122, in_$p123, in_$p124, in_$p125, in_$p126, in_$i127, in_$i128;
    goto $bb81, exit;

  $bb81:
    assume {:verifier.code 0} true;
    goto corral_source_split_3626;

  $bb86:
    assume out_$i128 == 1;
    assume {:verifier.code 0} true;
    out_$p117 := out_$p125;
    goto $bb86_dummy;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    out_$i128 := $ne.i64(out_$i127, $p2i.ref.i64($add.ref($add.ref(subscriber_array, $mul.ref(0, 112)), $mul.ref(6, 16))));
    goto corral_source_split_3638;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    out_$i127 := $p2i.ref.i64(out_$p126);
    goto corral_source_split_3637;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    out_$p126 := $add.ref($add.ref(out_$p124, $mul.ref($sub.ref(0, 24), 40)), $mul.ref(24, 1));
    goto corral_source_split_3636;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    out_$p125 := $add.ref(out_$p124, $mul.ref($sub.ref(0, 24), 40));
    goto corral_source_split_3635;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    out_$p124 := $bitcast.ref.ref(out_$p123);
    goto corral_source_split_3634;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    out_$p123 := $load.ref($M.0, out_$p122);
    goto corral_source_split_3633;

  $bb85:
    assume {:verifier.code 0} true;
    out_$p122 := $add.ref($add.ref($add.ref(out_$p117, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_3632;

  $bb84:
    assume !(out_$i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    out_$p11 := out_$p117;
    assume true;
    goto $bb84;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    out_$i120 := $eq.i32(out_$i119, in_$i0);
    goto corral_source_split_3630;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    out_$i119 := $load.i32($M.0, out_$p118);
    goto corral_source_split_3629;

  $bb82:
    assume {:verifier.code 0} true;
    out_$p118 := $add.ref($add.ref(out_$p117, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3628;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb86_dummy:
    call {:si_unique_call 1} out_$p11, out_$p117, out_$p118, out_$i119, out_$i120, out_$p122, out_$p123, out_$p124, out_$p125, out_$p126, out_$i127, out_$i128 := event_find_loop_$bb81(in_$i0, out_$p11, out_$p117, out_$p118, out_$i119, out_$i120, out_$p122, out_$p123, out_$p124, out_$p125, out_$p126, out_$i127, out_$i128);
    return;

  exit:
    return;
}



procedure event_find_loop_$bb81(in_$i0: i32, in_$p11: ref, in_$p117: ref, in_$p118: ref, in_$i119: i32, in_$i120: i1, in_$p122: ref, in_$p123: ref, in_$p124: ref, in_$p125: ref, in_$p126: ref, in_$i127: i64, in_$i128: i1) returns (out_$p11: ref, out_$p117: ref, out_$p118: ref, out_$i119: i32, out_$i120: i1, out_$p122: ref, out_$p123: ref, out_$p124: ref, out_$p125: ref, out_$p126: ref, out_$i127: i64, out_$i128: i1);



implementation event_find_loop_$bb69(in_$i0: i32, in_$p11: ref, in_$p99: ref, in_$p100: ref, in_$i101: i32, in_$i102: i1, in_$p104: ref, in_$p105: ref, in_$p106: ref, in_$p107: ref, in_$p108: ref, in_$i109: i64, in_$i110: i1) returns (out_$p11: ref, out_$p99: ref, out_$p100: ref, out_$i101: i32, out_$i102: i1, out_$p104: ref, out_$p105: ref, out_$p106: ref, out_$p107: ref, out_$p108: ref, out_$i109: i64, out_$i110: i1)
{

  entry:
    out_$p11, out_$p99, out_$p100, out_$i101, out_$i102, out_$p104, out_$p105, out_$p106, out_$p107, out_$p108, out_$i109, out_$i110 := in_$p11, in_$p99, in_$p100, in_$i101, in_$i102, in_$p104, in_$p105, in_$p106, in_$p107, in_$p108, in_$i109, in_$i110;
    goto $bb69, exit;

  $bb69:
    assume {:verifier.code 0} true;
    goto corral_source_split_3601;

  $bb74:
    assume out_$i110 == 1;
    assume {:verifier.code 0} true;
    out_$p99 := out_$p107;
    goto $bb74_dummy;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    out_$i110 := $ne.i64(out_$i109, $p2i.ref.i64($add.ref($add.ref(subscriber_array, $mul.ref(0, 112)), $mul.ref(5, 16))));
    goto corral_source_split_3613;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    out_$i109 := $p2i.ref.i64(out_$p108);
    goto corral_source_split_3612;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    out_$p108 := $add.ref($add.ref(out_$p106, $mul.ref($sub.ref(0, 24), 40)), $mul.ref(24, 1));
    goto corral_source_split_3611;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    out_$p107 := $add.ref(out_$p106, $mul.ref($sub.ref(0, 24), 40));
    goto corral_source_split_3610;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    out_$p106 := $bitcast.ref.ref(out_$p105);
    goto corral_source_split_3609;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    out_$p105 := $load.ref($M.0, out_$p104);
    goto corral_source_split_3608;

  $bb73:
    assume {:verifier.code 0} true;
    out_$p104 := $add.ref($add.ref($add.ref(out_$p99, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_3607;

  $bb72:
    assume !(out_$i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    out_$p11 := out_$p99;
    assume true;
    goto $bb72;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    out_$i102 := $eq.i32(out_$i101, in_$i0);
    goto corral_source_split_3605;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    out_$i101 := $load.i32($M.0, out_$p100);
    goto corral_source_split_3604;

  $bb70:
    assume {:verifier.code 0} true;
    out_$p100 := $add.ref($add.ref(out_$p99, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3603;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb74_dummy:
    call {:si_unique_call 1} out_$p11, out_$p99, out_$p100, out_$i101, out_$i102, out_$p104, out_$p105, out_$p106, out_$p107, out_$p108, out_$i109, out_$i110 := event_find_loop_$bb69(in_$i0, out_$p11, out_$p99, out_$p100, out_$i101, out_$i102, out_$p104, out_$p105, out_$p106, out_$p107, out_$p108, out_$i109, out_$i110);
    return;

  exit:
    return;
}



procedure event_find_loop_$bb69(in_$i0: i32, in_$p11: ref, in_$p99: ref, in_$p100: ref, in_$i101: i32, in_$i102: i1, in_$p104: ref, in_$p105: ref, in_$p106: ref, in_$p107: ref, in_$p108: ref, in_$i109: i64, in_$i110: i1) returns (out_$p11: ref, out_$p99: ref, out_$p100: ref, out_$i101: i32, out_$i102: i1, out_$p104: ref, out_$p105: ref, out_$p106: ref, out_$p107: ref, out_$p108: ref, out_$i109: i64, out_$i110: i1);



implementation event_find_loop_$bb57(in_$i0: i32, in_$p11: ref, in_$p81: ref, in_$p82: ref, in_$i83: i32, in_$i84: i1, in_$p86: ref, in_$p87: ref, in_$p88: ref, in_$p89: ref, in_$p90: ref, in_$i91: i64, in_$i92: i1) returns (out_$p11: ref, out_$p81: ref, out_$p82: ref, out_$i83: i32, out_$i84: i1, out_$p86: ref, out_$p87: ref, out_$p88: ref, out_$p89: ref, out_$p90: ref, out_$i91: i64, out_$i92: i1)
{

  entry:
    out_$p11, out_$p81, out_$p82, out_$i83, out_$i84, out_$p86, out_$p87, out_$p88, out_$p89, out_$p90, out_$i91, out_$i92 := in_$p11, in_$p81, in_$p82, in_$i83, in_$i84, in_$p86, in_$p87, in_$p88, in_$p89, in_$p90, in_$i91, in_$i92;
    goto $bb57, exit;

  $bb57:
    assume {:verifier.code 0} true;
    goto corral_source_split_3576;

  $bb62:
    assume out_$i92 == 1;
    assume {:verifier.code 0} true;
    out_$p81 := out_$p89;
    goto $bb62_dummy;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    out_$i92 := $ne.i64(out_$i91, $p2i.ref.i64($add.ref($add.ref(subscriber_array, $mul.ref(0, 112)), $mul.ref(4, 16))));
    goto corral_source_split_3588;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    out_$i91 := $p2i.ref.i64(out_$p90);
    goto corral_source_split_3587;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    out_$p90 := $add.ref($add.ref(out_$p88, $mul.ref($sub.ref(0, 24), 40)), $mul.ref(24, 1));
    goto corral_source_split_3586;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    out_$p89 := $add.ref(out_$p88, $mul.ref($sub.ref(0, 24), 40));
    goto corral_source_split_3585;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    out_$p88 := $bitcast.ref.ref(out_$p87);
    goto corral_source_split_3584;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    out_$p87 := $load.ref($M.0, out_$p86);
    goto corral_source_split_3583;

  $bb61:
    assume {:verifier.code 0} true;
    out_$p86 := $add.ref($add.ref($add.ref(out_$p81, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_3582;

  $bb60:
    assume !(out_$i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    out_$p11 := out_$p81;
    assume true;
    goto $bb60;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    out_$i84 := $eq.i32(out_$i83, in_$i0);
    goto corral_source_split_3580;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    out_$i83 := $load.i32($M.0, out_$p82);
    goto corral_source_split_3579;

  $bb58:
    assume {:verifier.code 0} true;
    out_$p82 := $add.ref($add.ref(out_$p81, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3578;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb62_dummy:
    call {:si_unique_call 1} out_$p11, out_$p81, out_$p82, out_$i83, out_$i84, out_$p86, out_$p87, out_$p88, out_$p89, out_$p90, out_$i91, out_$i92 := event_find_loop_$bb57(in_$i0, out_$p11, out_$p81, out_$p82, out_$i83, out_$i84, out_$p86, out_$p87, out_$p88, out_$p89, out_$p90, out_$i91, out_$i92);
    return;

  exit:
    return;
}



procedure event_find_loop_$bb57(in_$i0: i32, in_$p11: ref, in_$p81: ref, in_$p82: ref, in_$i83: i32, in_$i84: i1, in_$p86: ref, in_$p87: ref, in_$p88: ref, in_$p89: ref, in_$p90: ref, in_$i91: i64, in_$i92: i1) returns (out_$p11: ref, out_$p81: ref, out_$p82: ref, out_$i83: i32, out_$i84: i1, out_$p86: ref, out_$p87: ref, out_$p88: ref, out_$p89: ref, out_$p90: ref, out_$i91: i64, out_$i92: i1);



implementation event_find_loop_$bb45(in_$i0: i32, in_$p11: ref, in_$p63: ref, in_$p64: ref, in_$i65: i32, in_$i66: i1, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$i73: i64, in_$i74: i1) returns (out_$p11: ref, out_$p63: ref, out_$p64: ref, out_$i65: i32, out_$i66: i1, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$p72: ref, out_$i73: i64, out_$i74: i1)
{

  entry:
    out_$p11, out_$p63, out_$p64, out_$i65, out_$i66, out_$p68, out_$p69, out_$p70, out_$p71, out_$p72, out_$i73, out_$i74 := in_$p11, in_$p63, in_$p64, in_$i65, in_$i66, in_$p68, in_$p69, in_$p70, in_$p71, in_$p72, in_$i73, in_$i74;
    goto $bb45, exit;

  $bb45:
    assume {:verifier.code 0} true;
    goto corral_source_split_3551;

  $bb50:
    assume out_$i74 == 1;
    assume {:verifier.code 0} true;
    out_$p63 := out_$p71;
    goto $bb50_dummy;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    out_$i74 := $ne.i64(out_$i73, $p2i.ref.i64($add.ref($add.ref(subscriber_array, $mul.ref(0, 112)), $mul.ref(3, 16))));
    goto corral_source_split_3563;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    out_$i73 := $p2i.ref.i64(out_$p72);
    goto corral_source_split_3562;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref(out_$p70, $mul.ref($sub.ref(0, 24), 40)), $mul.ref(24, 1));
    goto corral_source_split_3561;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref(out_$p70, $mul.ref($sub.ref(0, 24), 40));
    goto corral_source_split_3560;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    out_$p70 := $bitcast.ref.ref(out_$p69);
    goto corral_source_split_3559;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    out_$p69 := $load.ref($M.0, out_$p68);
    goto corral_source_split_3558;

  $bb49:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref($add.ref(out_$p63, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_3557;

  $bb48:
    assume !(out_$i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    out_$p11 := out_$p63;
    assume true;
    goto $bb48;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    out_$i66 := $eq.i32(out_$i65, in_$i0);
    goto corral_source_split_3555;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    out_$i65 := $load.i32($M.0, out_$p64);
    goto corral_source_split_3554;

  $bb46:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(out_$p63, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3553;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb50_dummy:
    call {:si_unique_call 1} out_$p11, out_$p63, out_$p64, out_$i65, out_$i66, out_$p68, out_$p69, out_$p70, out_$p71, out_$p72, out_$i73, out_$i74 := event_find_loop_$bb45(in_$i0, out_$p11, out_$p63, out_$p64, out_$i65, out_$i66, out_$p68, out_$p69, out_$p70, out_$p71, out_$p72, out_$i73, out_$i74);
    return;

  exit:
    return;
}



procedure event_find_loop_$bb45(in_$i0: i32, in_$p11: ref, in_$p63: ref, in_$p64: ref, in_$i65: i32, in_$i66: i1, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$i73: i64, in_$i74: i1) returns (out_$p11: ref, out_$p63: ref, out_$p64: ref, out_$i65: i32, out_$i66: i1, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$p72: ref, out_$i73: i64, out_$i74: i1);



implementation event_find_loop_$bb33(in_$i0: i32, in_$p11: ref, in_$p45: ref, in_$p46: ref, in_$i47: i32, in_$i48: i1, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$i55: i64, in_$i56: i1) returns (out_$p11: ref, out_$p45: ref, out_$p46: ref, out_$i47: i32, out_$i48: i1, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$i55: i64, out_$i56: i1)
{

  entry:
    out_$p11, out_$p45, out_$p46, out_$i47, out_$i48, out_$p50, out_$p51, out_$p52, out_$p53, out_$p54, out_$i55, out_$i56 := in_$p11, in_$p45, in_$p46, in_$i47, in_$i48, in_$p50, in_$p51, in_$p52, in_$p53, in_$p54, in_$i55, in_$i56;
    goto $bb33, exit;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_3526;

  $bb38:
    assume out_$i56 == 1;
    assume {:verifier.code 0} true;
    out_$p45 := out_$p53;
    goto $bb38_dummy;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    out_$i56 := $ne.i64(out_$i55, $p2i.ref.i64($add.ref($add.ref(subscriber_array, $mul.ref(0, 112)), $mul.ref(2, 16))));
    goto corral_source_split_3538;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    out_$i55 := $p2i.ref.i64(out_$p54);
    goto corral_source_split_3537;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(out_$p52, $mul.ref($sub.ref(0, 24), 40)), $mul.ref(24, 1));
    goto corral_source_split_3536;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref(out_$p52, $mul.ref($sub.ref(0, 24), 40));
    goto corral_source_split_3535;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    out_$p52 := $bitcast.ref.ref(out_$p51);
    goto corral_source_split_3534;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    out_$p51 := $load.ref($M.0, out_$p50);
    goto corral_source_split_3533;

  $bb37:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_3532;

  $bb36:
    assume !(out_$i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    out_$p11 := out_$p45;
    assume true;
    goto $bb36;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    out_$i48 := $eq.i32(out_$i47, in_$i0);
    goto corral_source_split_3530;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    out_$i47 := $load.i32($M.0, out_$p46);
    goto corral_source_split_3529;

  $bb34:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(out_$p45, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3528;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb38_dummy:
    call {:si_unique_call 1} out_$p11, out_$p45, out_$p46, out_$i47, out_$i48, out_$p50, out_$p51, out_$p52, out_$p53, out_$p54, out_$i55, out_$i56 := event_find_loop_$bb33(in_$i0, out_$p11, out_$p45, out_$p46, out_$i47, out_$i48, out_$p50, out_$p51, out_$p52, out_$p53, out_$p54, out_$i55, out_$i56);
    return;

  exit:
    return;
}



procedure event_find_loop_$bb33(in_$i0: i32, in_$p11: ref, in_$p45: ref, in_$p46: ref, in_$i47: i32, in_$i48: i1, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$i55: i64, in_$i56: i1) returns (out_$p11: ref, out_$p45: ref, out_$p46: ref, out_$i47: i32, out_$i48: i1, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$i55: i64, out_$i56: i1);



implementation event_find_loop_$bb21(in_$i0: i32, in_$p11: ref, in_$p27: ref, in_$p28: ref, in_$i29: i32, in_$i30: i1, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$i37: i64, in_$i38: i1) returns (out_$p11: ref, out_$p27: ref, out_$p28: ref, out_$i29: i32, out_$i30: i1, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$i37: i64, out_$i38: i1)
{

  entry:
    out_$p11, out_$p27, out_$p28, out_$i29, out_$i30, out_$p32, out_$p33, out_$p34, out_$p35, out_$p36, out_$i37, out_$i38 := in_$p11, in_$p27, in_$p28, in_$i29, in_$i30, in_$p32, in_$p33, in_$p34, in_$p35, in_$p36, in_$i37, in_$i38;
    goto $bb21, exit;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_3501;

  $bb26:
    assume out_$i38 == 1;
    assume {:verifier.code 0} true;
    out_$p27 := out_$p35;
    goto $bb26_dummy;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    out_$i38 := $ne.i64(out_$i37, $p2i.ref.i64($add.ref($add.ref(subscriber_array, $mul.ref(0, 112)), $mul.ref(1, 16))));
    goto corral_source_split_3513;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    out_$i37 := $p2i.ref.i64(out_$p36);
    goto corral_source_split_3512;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(out_$p34, $mul.ref($sub.ref(0, 24), 40)), $mul.ref(24, 1));
    goto corral_source_split_3511;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref(out_$p34, $mul.ref($sub.ref(0, 24), 40));
    goto corral_source_split_3510;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    out_$p34 := $bitcast.ref.ref(out_$p33);
    goto corral_source_split_3509;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    out_$p33 := $load.ref($M.0, out_$p32);
    goto corral_source_split_3508;

  $bb25:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref($add.ref(out_$p27, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_3507;

  $bb24:
    assume !(out_$i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    out_$p11 := out_$p27;
    assume true;
    goto $bb24;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    out_$i30 := $eq.i32(out_$i29, in_$i0);
    goto corral_source_split_3505;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    out_$i29 := $load.i32($M.0, out_$p28);
    goto corral_source_split_3504;

  $bb22:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(out_$p27, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3503;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb26_dummy:
    call {:si_unique_call 1} out_$p11, out_$p27, out_$p28, out_$i29, out_$i30, out_$p32, out_$p33, out_$p34, out_$p35, out_$p36, out_$i37, out_$i38 := event_find_loop_$bb21(in_$i0, out_$p11, out_$p27, out_$p28, out_$i29, out_$i30, out_$p32, out_$p33, out_$p34, out_$p35, out_$p36, out_$i37, out_$i38);
    return;

  exit:
    return;
}



procedure event_find_loop_$bb21(in_$i0: i32, in_$p11: ref, in_$p27: ref, in_$p28: ref, in_$i29: i32, in_$i30: i1, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$i37: i64, in_$i38: i1) returns (out_$p11: ref, out_$p27: ref, out_$p28: ref, out_$i29: i32, out_$i30: i1, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$i37: i64, out_$i38: i1);



implementation event_find_loop_$bb6(in_$i0: i32, in_$p8: ref, in_$i9: i32, in_$i10: i1, in_$p11: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$i20: i1, in_$p7: ref) returns (out_$p8: ref, out_$i9: i32, out_$i10: i1, out_$p11: ref, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$i20: i1, out_$p7: ref)
{

  entry:
    out_$p8, out_$i9, out_$i10, out_$p11, out_$p14, out_$p15, out_$p16, out_$p17, out_$p18, out_$i19, out_$i20, out_$p7 := in_$p8, in_$i9, in_$i10, in_$p11, in_$p14, in_$p15, in_$p16, in_$p17, in_$p18, in_$i19, in_$i20, in_$p7;
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3472;

  $bb13:
    assume out_$i20 == 1;
    assume {:verifier.code 0} true;
    out_$p7 := out_$p17;
    goto $bb13_dummy;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    out_$i20 := $ne.i64(out_$i19, $p2i.ref.i64(subscriber_array));
    goto corral_source_split_3488;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    out_$i19 := $p2i.ref.i64(out_$p18);
    goto corral_source_split_3487;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(out_$p16, $mul.ref($sub.ref(0, 24), 40)), $mul.ref(24, 1));
    goto corral_source_split_3486;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref(out_$p16, $mul.ref($sub.ref(0, 24), 40));
    goto corral_source_split_3485;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    out_$p16 := $bitcast.ref.ref(out_$p15);
    goto corral_source_split_3484;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    out_$p15 := $load.ref($M.0, out_$p14);
    goto corral_source_split_3483;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref($add.ref(out_$p7, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_3482;

  $bb10:
    assume !(out_$i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    out_$p11 := out_$p7;
    assume true;
    goto $bb10;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    out_$i10 := $eq.i32(out_$i9, in_$i0);
    goto corral_source_split_3476;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    out_$i9 := $load.i32($M.0, out_$p8);
    goto corral_source_split_3475;

  $bb7:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref($add.ref(out_$p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3474;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb13_dummy:
    call {:si_unique_call 1} out_$p8, out_$i9, out_$i10, out_$p11, out_$p14, out_$p15, out_$p16, out_$p17, out_$p18, out_$i19, out_$i20, out_$p7 := event_find_loop_$bb6(in_$i0, out_$p8, out_$i9, out_$i10, out_$p11, out_$p14, out_$p15, out_$p16, out_$p17, out_$p18, out_$i19, out_$i20, out_$p7);
    return;

  exit:
    return;
}



procedure event_find_loop_$bb6(in_$i0: i32, in_$p8: ref, in_$i9: i32, in_$i10: i1, in_$p11: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$i20: i1, in_$p7: ref) returns (out_$p8: ref, out_$i9: i32, out_$i10: i1, out_$p11: ref, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$i20: i1, out_$p7: ref);



implementation qp_wakeup_cb_loop_$bb4(in_$p1: ref, in_$p2: ref, in_$p5: ref, in_$i6: i32, in_$i7: i32, in_$p8: ref, in_$p9: ref, in_$i10: i32, in_$i11: i32, in_$p12: ref, in_$p13: ref, in_$i14: i32, in_$i15: i1) returns (out_$p5: ref, out_$i6: i32, out_$i7: i32, out_$p8: ref, out_$p9: ref, out_$i10: i32, out_$i11: i32, out_$p12: ref, out_$p13: ref, out_$i14: i32, out_$i15: i1)
{

  entry:
    out_$p5, out_$i6, out_$i7, out_$p8, out_$p9, out_$i10, out_$i11, out_$p12, out_$p13, out_$i14, out_$i15 := in_$p5, in_$i6, in_$i7, in_$p8, in_$p9, in_$i10, in_$i11, in_$p12, in_$p13, in_$i14, in_$i15;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6:
    assume {:verifier.code 0} true;
    assume out_$i15 == 1;
    goto $bb6_dummy;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    out_$i15 := $ne.i32(out_$i14, 0);
    goto corral_source_split_3730;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    out_$i14 := $load.i32($M.0, in_$p2);
    goto corral_source_split_3729;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} __wake_up(out_$p13, 3, 1, $0.ref);
    goto corral_source_split_3728;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(in_$p1, $mul.ref(0, 152)), $mul.ref(64, 1));
    goto corral_source_split_3727;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p12, out_$i11);
    goto corral_source_split_3726;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(in_$p1, $mul.ref(0, 152)), $mul.ref(60, 1));
    goto corral_source_split_3725;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    out_$i11 := $add.i32(out_$i10, 1);
    goto corral_source_split_3724;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    out_$i10 := $load.i32($M.0, out_$p9);
    goto corral_source_split_3723;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(in_$p1, $mul.ref(0, 152)), $mul.ref(60, 1));
    goto corral_source_split_3722;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p8, out_$i7);
    goto corral_source_split_3721;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref($add.ref(in_$p1, $mul.ref(0, 152)), $mul.ref(56, 1));
    goto corral_source_split_3720;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    out_$i7 := $sub.i32(out_$i6, 1);
    goto corral_source_split_3719;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    out_$i6 := $load.i32($M.0, out_$p5);
    goto corral_source_split_3718;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p5 := $add.ref($add.ref(in_$p1, $mul.ref(0, 152)), $mul.ref(56, 1));
    goto corral_source_split_3717;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p5, out_$i6, out_$i7, out_$p8, out_$p9, out_$i10, out_$i11, out_$p12, out_$p13, out_$i14, out_$i15 := qp_wakeup_cb_loop_$bb4(in_$p1, in_$p2, out_$p5, out_$i6, out_$i7, out_$p8, out_$p9, out_$i10, out_$i11, out_$p12, out_$p13, out_$i14, out_$i15);
    return;

  exit:
    return;
}



procedure qp_wakeup_cb_loop_$bb4(in_$p1: ref, in_$p2: ref, in_$p5: ref, in_$i6: i32, in_$i7: i32, in_$p8: ref, in_$p9: ref, in_$i10: i32, in_$i11: i32, in_$p12: ref, in_$p13: ref, in_$i14: i32, in_$i15: i1) returns (out_$p5: ref, out_$i6: i32, out_$i7: i32, out_$p8: ref, out_$p9: ref, out_$i10: i32, out_$i11: i32, out_$p12: ref, out_$p13: ref, out_$i14: i32, out_$i15: i1);
  modifies $M.0;



implementation qp_free_queue_loop_$bb3(in_$p2: ref, in_$i7: i64, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$i26: i64, in_$i27: i64, in_$i28: i1, in_$i8: i64) returns (out_$p9: ref, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$i26: i64, out_$i27: i64, out_$i28: i1, out_$i8: i64)
{

  entry:
    out_$p9, out_$p10, out_$p11, out_$p12, out_$p13, out_$p14, out_$p15, out_$p16, out_$p17, out_$p18, out_$p19, out_$p20, out_$p21, out_$p22, out_$p23, out_$p24, out_$p25, out_$i26, out_$i27, out_$i28, out_$i8 := in_$p9, in_$p10, in_$p11, in_$p12, in_$p13, in_$p14, in_$p15, in_$p16, in_$p17, in_$p18, in_$p19, in_$p20, in_$p21, in_$p22, in_$p23, in_$p24, in_$p25, in_$i26, in_$i27, in_$i28, in_$i8;
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4776;

  $bb5:
    assume out_$i28 == 1;
    assume {:verifier.code 0} true;
    out_$i8 := out_$i27;
    goto $bb5_dummy;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    out_$i28 := $ugt.i64(in_$i7, out_$i27);
    goto corral_source_split_4798;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    out_$i27 := $add.i64(out_$i8, 1);
    call {:si_unique_call 973} {:cexpr "i"} boogie_si_record_i64(out_$i27);
    goto corral_source_split_4797;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 972} dma_free_attrs(out_$p10, 4096, out_$p18, out_$i26, $0.ref);
    goto corral_source_split_4796;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i64($M.0, out_$p25);
    goto corral_source_split_4795;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref(out_$p24, $mul.ref(out_$i8, 8));
    goto corral_source_split_4794;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    out_$p24 := $load.ref($M.0, out_$p23);
    goto corral_source_split_4793;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(out_$p22, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4792;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    out_$p22 := $bitcast.ref.ref(out_$p21);
    goto corral_source_split_4791;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p20, $mul.ref(0, 200)), $mul.ref(184, 1));
    goto corral_source_split_4790;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.0, out_$p19);
    goto corral_source_split_4789;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(in_$p2, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_4788;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.0, out_$p17);
    goto corral_source_split_4787;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref(out_$p16, $mul.ref(out_$i8, 8));
    goto corral_source_split_4786;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    out_$p16 := $load.ref($M.0, out_$p15);
    goto corral_source_split_4785;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(out_$p14, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4784;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    out_$p14 := $bitcast.ref.ref(out_$p13);
    goto corral_source_split_4783;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(out_$p12, $mul.ref(0, 200)), $mul.ref(184, 1));
    goto corral_source_split_4782;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    out_$p12 := $load.ref($M.0, out_$p11);
    goto corral_source_split_4781;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(in_$p2, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_4780;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(out_$p9, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_4779;

  $bb4:
    assume {:verifier.code 0} true;
    out_$p9 := $M.87;
    goto corral_source_split_4778;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb5_dummy:
    call {:si_unique_call 1} out_$p9, out_$p10, out_$p11, out_$p12, out_$p13, out_$p14, out_$p15, out_$p16, out_$p17, out_$p18, out_$p19, out_$p20, out_$p21, out_$p22, out_$p23, out_$p24, out_$p25, out_$i26, out_$i27, out_$i28, out_$i8 := qp_free_queue_loop_$bb3(in_$p2, in_$i7, out_$p9, out_$p10, out_$p11, out_$p12, out_$p13, out_$p14, out_$p15, out_$p16, out_$p17, out_$p18, out_$p19, out_$p20, out_$p21, out_$p22, out_$p23, out_$p24, out_$p25, out_$i26, out_$i27, out_$i28, out_$i8);
    return;

  exit:
    return;
}



procedure qp_free_queue_loop_$bb3(in_$p2: ref, in_$i7: i64, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$i26: i64, in_$i27: i64, in_$i28: i1, in_$i8: i64) returns (out_$p9: ref, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$i26: i64, out_$i27: i64, out_$i28: i1, out_$i8: i64);



implementation vmci_qp_guest_endpoints_exit_loop_$bb4(in_$p4: ref, in_$p5: ref, in_$i6: i32, in_$i7: i32, in_$i8: i1, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$i16: i1, in_$p3: ref, in_vslice_dummy_var_233: i32) returns (out_$p4: ref, out_$p5: ref, out_$i6: i32, out_$i7: i32, out_$i8: i1, out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$i16: i1, out_$p3: ref, out_vslice_dummy_var_233: i32)
{

  entry:
    out_$p4, out_$p5, out_$i6, out_$i7, out_$i8, out_$p9, out_$p10, out_$i11, out_$p13, out_$p14, out_$i15, out_$i16, out_$p3, out_vslice_dummy_var_233 := in_$p4, in_$p5, in_$i6, in_$i7, in_$i8, in_$p9, in_$p10, in_$i11, in_$p13, in_$p14, in_$i15, in_$i16, in_$p3, in_vslice_dummy_var_233;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_5828;

  $bb9:
    assume out_$i16 == 1;
    assume {:verifier.code 0} true;
    out_$p3 := out_$p14;
    goto $bb9_dummy;

  corral_source_split_5848:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    out_$i16 := $ne.i64(out_$i15, 0);
    goto corral_source_split_5848;

  corral_source_split_5846:
    assume {:verifier.code 0} true;
    out_$i15 := $p2i.ref.i64(out_$p14);
    goto corral_source_split_5847;

  corral_source_split_5845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1202} out_$p14 := qp_list_get_head(qp_guest_endpoints);
    goto corral_source_split_5846;

  SeqInstr_327:
    goto corral_source_split_5845;

  SeqInstr_326:
    assume assertsPassed;
    goto SeqInstr_327;

  corral_source_split_5844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1201} qp_guest_endpoint_destroy(out_$p4);
    goto SeqInstr_326;

  corral_source_split_5843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1200} qp_list_remove_entry(qp_guest_endpoints, out_$p3);
    goto corral_source_split_5844;

  corral_source_split_5842:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p13, 0);
    goto corral_source_split_5843;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(out_$p3, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_5842;

  $bb7:
    assume !(out_$i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_5840:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1199} out_vslice_dummy_var_233 := qp_detatch_hypercall(out_$i11);
    goto corral_source_split_5840;

  corral_source_split_5838:
    assume {:verifier.code 0} true;
    out_$i11 := $load.i64($M.0, out_$p10);
    goto corral_source_split_5839;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    out_$p10 := $bitcast.ref.ref(out_$p9);
    goto corral_source_split_5838;

  corral_source_split_5836:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(out_$p3, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_5837;

  $bb6:
    assume out_$i8 == 1;
    goto corral_source_split_5836;

  corral_source_split_5834:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_5833:
    assume {:verifier.code 0} true;
    out_$i8 := $eq.i32(out_$i7, 0);
    goto corral_source_split_5834;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    out_$i7 := $and.i32(out_$i6, 2);
    goto corral_source_split_5833;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    out_$i6 := $load.i32($M.0, out_$p5);
    goto corral_source_split_5832;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    out_$p5 := $add.ref($add.ref(out_$p3, $mul.ref(0, 56)), $mul.ref(28, 1));
    goto corral_source_split_5831;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p4 := $bitcast.ref.ref(out_$p3);
    goto corral_source_split_5830;

  corral_source_split_5828:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb9_dummy:
    call {:si_unique_call 1} out_$p4, out_$p5, out_$i6, out_$i7, out_$i8, out_$p9, out_$p10, out_$i11, out_$p13, out_$p14, out_$i15, out_$i16, out_$p3, out_vslice_dummy_var_233 := vmci_qp_guest_endpoints_exit_loop_$bb4(out_$p4, out_$p5, out_$i6, out_$i7, out_$i8, out_$p9, out_$p10, out_$i11, out_$p13, out_$p14, out_$i15, out_$i16, out_$p3, out_vslice_dummy_var_233);
    return;

  exit:
    return;
}



procedure vmci_qp_guest_endpoints_exit_loop_$bb4(in_$p4: ref, in_$p5: ref, in_$i6: i32, in_$i7: i32, in_$i8: i1, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$i16: i1, in_$p3: ref, in_vslice_dummy_var_233: i32) returns (out_$p4: ref, out_$p5: ref, out_$i6: i32, out_$i7: i32, out_$i8: i1, out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$i16: i1, out_$p3: ref, out_vslice_dummy_var_233: i32);
  modifies $M.0, $M.20, $M.21, $M.33, $CurrAddr, $M.2, $M.3, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.31, $M.87, $M.6, $M.13, $M.18, $M.19, $M.69, $M.70, $M.23, $M.24, $M.25, $M.26, $M.27, $M.108, $M.110, $M.112, $M.114, $M.28, assertsPassed, $M.29, $M.45, $M.48, $M.47, $M.89, $M.109, $M.111, $M.113, $M.115, $M.34, $M.30, $M.35, $M.46, $M.90, $M.86, $M.91, $M.44, $M.32, $M.36, $M.38, $M.40, $M.42;



implementation vmci_ctx_rcv_notifications_release_loop_$bb3(in_$p4: ref, in_$p5: ref, in_$p7: ref, in_$p9: ref, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$i21: i1, in_$i22: i8, in_$i23: i1, in_$i24: i32, in_$i25: i1, in_$p26: ref, in_$i27: i64, in_$p28: ref, in_$p29: ref, in_$i30: i64, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$i35: i64, in_$i36: i1, in_$i37: i8, in_$i38: i1, in_$i39: i32, in_$i40: i1, in_cmdloc_dummy_var_142: [ref]i8, in_cmdloc_dummy_var_143: [ref]i8, in_cmdloc_dummy_var_144: [ref]i8) returns (out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$i21: i1, out_$i22: i8, out_$i23: i1, out_$i24: i32, out_$i25: i1, out_$p26: ref, out_$i27: i64, out_$p28: ref, out_$p29: ref, out_$i30: i64, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$i35: i64, out_$i36: i1, out_$i37: i8, out_$i38: i1, out_$i39: i32, out_$i40: i1, out_cmdloc_dummy_var_142: [ref]i8, out_cmdloc_dummy_var_143: [ref]i8, out_cmdloc_dummy_var_144: [ref]i8)
{

  entry:
    out_$p18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p26, out_$i27, out_$p28, out_$p29, out_$i30, out_$p31, out_$p32, out_$p33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_cmdloc_dummy_var_142, out_cmdloc_dummy_var_143, out_cmdloc_dummy_var_144 := in_$p18, in_$p19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$p26, in_$i27, in_$p28, in_$p29, in_$i30, in_$p31, in_$p32, in_$p33, in_$p34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_cmdloc_dummy_var_142, in_cmdloc_dummy_var_143, in_cmdloc_dummy_var_144;
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    out_$p34 := $bitcast.ref.ref(in_$p5);
    goto corral_source_split_7549;

  corral_source_split_7579:
    assume {:verifier.code 0} true;
    goto corral_source_split_7579_dummy;

  corral_source_split_7578:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_142 := $M.128;
    out_cmdloc_dummy_var_143 := $M.128;
    call {:si_unique_call 1650} out_cmdloc_dummy_var_144 := $memcpy.i8(out_cmdloc_dummy_var_142, out_cmdloc_dummy_var_143, out_$p32, out_$p33, 8, $zext.i32.i64(4), 0 == 1);
    $M.128 := out_cmdloc_dummy_var_144;
    goto corral_source_split_7579;

  corral_source_split_7577:
    assume {:verifier.code 0} true;
    out_$p33 := $bitcast.ref.ref(in_$p7);
    goto corral_source_split_7578;

  corral_source_split_7576:
    assume {:verifier.code 0} true;
    out_$p32 := $bitcast.ref.ref(in_$p5);
    goto corral_source_split_7577;

  corral_source_split_7575:
    assume {:verifier.code 0} true;
    $M.128 := $store.i64($M.128, out_$p31, out_$i30);
    goto corral_source_split_7576;

  corral_source_split_7574:
    assume {:verifier.code 0} true;
    out_$p31 := $bitcast.ref.ref(in_$p7);
    goto corral_source_split_7575;

  corral_source_split_7573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1649} out_$i30 := vmci_handle_arr_remove_tail(out_$p29);
    goto corral_source_split_7574;

  corral_source_split_7572:
    assume {:verifier.code 0} true;
    out_$p29 := $load.ref($M.0, out_$p28);
    goto corral_source_split_7573;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(in_$p9, $mul.ref(0, 304)), $mul.ref(152, 1));
    goto corral_source_split_7572;

  $bb9:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_7570:
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_7569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1648} vmci_handle_arr_append_entry(in_$p4, out_$i27);
    goto corral_source_split_7570;

  corral_source_split_7568:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i64($M.128, out_$p26);
    goto corral_source_split_7569;

  corral_source_split_7567:
    assume {:verifier.code 0} true;
    out_$p26 := $bitcast.ref.ref(in_$p5);
    goto corral_source_split_7568;

  $bb8:
    assume out_$i25 == 1;
    goto corral_source_split_7567;

  corral_source_split_7565:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_7564:
    assume {:verifier.code 0} true;
    out_$i25 := $ne.i32(out_$i24, 0);
    goto corral_source_split_7565;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_7564;

  $bb6:
    assume !(out_$i23 == 1);
    assume {:verifier.code 0} true;
    out_$i24 := 1;
    goto $bb7;

  corral_source_split_7562:
    assume {:verifier.code 0} true;
    out_$i24 := 0;
    goto $bb7;

  $bb5:
    assume out_$i23 == 1;
    goto corral_source_split_7562;

  corral_source_split_7560:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_7559:
    assume {:verifier.code 0} true;
    out_$i23 := $trunc.i8.i1(out_$i22);
    goto corral_source_split_7560;

  corral_source_split_7558:
    assume {:verifier.code 0} true;
    out_$i22 := $zext.i1.i8(out_$i21);
    call {:si_unique_call 1647} {:cexpr "tmp___0"} boogie_si_record_i8(out_$i22);
    goto corral_source_split_7559;

  corral_source_split_7557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1646} out_$i21 := vmci_handle_arr_has_entry(out_$p18, out_$i20);
    goto corral_source_split_7558;

  corral_source_split_7556:
    assume {:verifier.code 0} true;
    out_$i20 := $load.i64($M.128, out_$p19);
    goto corral_source_split_7557;

  corral_source_split_7555:
    assume {:verifier.code 0} true;
    out_$p19 := $bitcast.ref.ref(in_$p5);
    goto corral_source_split_7556;

  $bb4:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.0, in_$p4);
    goto corral_source_split_7555;

  corral_source_split_7586:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb14:
    assume out_$i40 == 1;
    goto corral_source_split_7586;

  corral_source_split_7584:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_7583:
    assume {:verifier.code 0} true;
    out_$i40 := $ne.i32(out_$i39, 0);
    goto corral_source_split_7584;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_7583;

  $bb12:
    assume !(out_$i38 == 1);
    assume {:verifier.code 0} true;
    out_$i39 := 1;
    goto $bb13;

  corral_source_split_7581:
    assume {:verifier.code 0} true;
    out_$i39 := 0;
    goto $bb13;

  $bb11:
    assume out_$i38 == 1;
    goto corral_source_split_7581;

  corral_source_split_7553:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_7552:
    assume {:verifier.code 0} true;
    out_$i38 := $trunc.i8.i1(out_$i37);
    goto corral_source_split_7553;

  corral_source_split_7551:
    assume {:verifier.code 0} true;
    out_$i37 := $zext.i1.i8(out_$i36);
    call {:si_unique_call 1645} {:cexpr "tmp___2"} boogie_si_record_i8(out_$i37);
    goto corral_source_split_7552;

  corral_source_split_7550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1644} out_$i36 := vmci_handle_is_invalid(out_$i35);
    goto corral_source_split_7551;

  corral_source_split_7549:
    assume {:verifier.code 0} true;
    out_$i35 := $load.i64($M.128, out_$p34);
    goto corral_source_split_7550;

  corral_source_split_7579_dummy:
    call {:si_unique_call 1} out_$p18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p26, out_$i27, out_$p28, out_$p29, out_$i30, out_$p31, out_$p32, out_$p33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_cmdloc_dummy_var_142, out_cmdloc_dummy_var_143, out_cmdloc_dummy_var_144 := vmci_ctx_rcv_notifications_release_loop_$bb3(in_$p4, in_$p5, in_$p7, in_$p9, out_$p18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p26, out_$i27, out_$p28, out_$p29, out_$i30, out_$p31, out_$p32, out_$p33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_cmdloc_dummy_var_142, out_cmdloc_dummy_var_143, out_cmdloc_dummy_var_144);
    return;

  exit:
    return;
}



procedure vmci_ctx_rcv_notifications_release_loop_$bb3(in_$p4: ref, in_$p5: ref, in_$p7: ref, in_$p9: ref, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$i21: i1, in_$i22: i8, in_$i23: i1, in_$i24: i32, in_$i25: i1, in_$p26: ref, in_$i27: i64, in_$p28: ref, in_$p29: ref, in_$i30: i64, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$i35: i64, in_$i36: i1, in_$i37: i8, in_$i38: i1, in_$i39: i32, in_$i40: i1, in_cmdloc_dummy_var_142: [ref]i8, in_cmdloc_dummy_var_143: [ref]i8, in_cmdloc_dummy_var_144: [ref]i8) returns (out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$i21: i1, out_$i22: i8, out_$i23: i1, out_$i24: i32, out_$i25: i1, out_$p26: ref, out_$i27: i64, out_$p28: ref, out_$p29: ref, out_$i30: i64, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$i35: i64, out_$i36: i1, out_$i37: i8, out_$i38: i1, out_$i39: i32, out_$i40: i1, out_cmdloc_dummy_var_142: [ref]i8, out_cmdloc_dummy_var_143: [ref]i8, out_cmdloc_dummy_var_144: [ref]i8);
  modifies $M.128, $M.0, $CurrAddr, $M.48, $M.20, $M.21, $M.45;



implementation vmci_ctx_set_chkpt_state_loop_$bb14(in_$i0: i32, in_$p3: ref, in_$i4: i32, in_$p15: ref, in_$i16: i64, in_$p17: ref, in_$i18: i32, in_$i19: i32, in_$i20: i1, in_$i21: i32, in_$i23: i32, in_$i24: i1, in_$i13: i32, in_$i14: i32, in_$i26: i1, in_$i27: i32, in_$i25: i32) returns (out_$p15: ref, out_$i16: i64, out_$p17: ref, out_$i18: i32, out_$i19: i32, out_$i20: i1, out_$i21: i32, out_$i23: i32, out_$i24: i1, out_$i13: i32, out_$i14: i32, out_$i26: i1, out_$i27: i32, out_$i25: i32)
{

  entry:
    out_$p15, out_$i16, out_$p17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i23, out_$i24, out_$i13, out_$i14, out_$i26, out_$i27, out_$i25 := in_$p15, in_$i16, in_$p17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i23, in_$i24, in_$i13, in_$i14, in_$i26, in_$i27, in_$i25;
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7878;

  $bb20:
    assume out_$i24 == 1;
    assume {:verifier.code 0} true;
    out_$i13, out_$i14 := out_$i19, out_$i23;
    goto $bb20_dummy;

  corral_source_split_7894:
    assume {:verifier.code 0} true;
    out_$i25 := out_$i19;
    assume true;
    goto $bb20;

  corral_source_split_7893:
    assume {:verifier.code 0} true;
    out_$i24 := $ult.i32(out_$i23, in_$i4);
    goto corral_source_split_7894;

  $bb19:
    assume {:verifier.code 0} true;
    out_$i23 := $add.i32(out_$i14, 1);
    call {:si_unique_call 1729} {:cexpr "i"} boogie_si_record_i32(out_$i23);
    goto corral_source_split_7893;

  $bb17:
    assume !(out_$i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_7886:
    assume {:verifier.code 0} true;
    out_$i21 := out_$i19;
    assume true;
    goto $bb17;

  corral_source_split_7885:
    assume {:verifier.code 0} true;
    out_$i20 := $ne.i32(out_$i19, 0);
    goto corral_source_split_7886;

  SeqInstr_468:
    call {:si_unique_call 1728} {:cexpr "result"} boogie_si_record_i32(out_$i19);
    goto corral_source_split_7885;

  SeqInstr_467:
    assume assertsPassed;
    goto SeqInstr_468;

  corral_source_split_7884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1727} out_$i19 := vmci_ctx_add_notification(in_$i0, out_$i18);
    goto SeqInstr_467;

  corral_source_split_7883:
    assume {:verifier.code 0} true;
    out_$i18 := $load.i32($M.0, out_$p17);
    call {:si_unique_call 1726} {:cexpr "current_id"} boogie_si_record_i32(out_$i18);
    goto corral_source_split_7884;

  corral_source_split_7882:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref(out_$p15, $mul.ref(out_$i16, 4));
    goto corral_source_split_7883;

  corral_source_split_7881:
    assume {:verifier.code 0} true;
    out_$i16 := $zext.i32.i64(out_$i14);
    goto corral_source_split_7882;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p15 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_7881;

  corral_source_split_7898:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb22:
    assume out_$i26 == 1;
    goto corral_source_split_7898;

  corral_source_split_7879:
    assume {:verifier.code 0} true;
    out_$i27 := out_$i13;
    assume true;
    goto $bb22;

  corral_source_split_7878:
    assume {:verifier.code 0} true;
    out_$i26 := $eq.i32(out_$i13, 0);
    goto corral_source_split_7879;

  $bb20_dummy:
    call {:si_unique_call 1} out_$p15, out_$i16, out_$p17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i23, out_$i24, out_$i13, out_$i14, out_$i26, out_$i27, out_$i25 := vmci_ctx_set_chkpt_state_loop_$bb14(in_$i0, in_$p3, in_$i4, out_$p15, out_$i16, out_$p17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i23, out_$i24, out_$i13, out_$i14, out_$i26, out_$i27, out_$i25);
    return;

  exit:
    return;
}



procedure vmci_ctx_set_chkpt_state_loop_$bb14(in_$i0: i32, in_$p3: ref, in_$i4: i32, in_$p15: ref, in_$i16: i64, in_$p17: ref, in_$i18: i32, in_$i19: i32, in_$i20: i1, in_$i21: i32, in_$i23: i32, in_$i24: i1, in_$i13: i32, in_$i14: i32, in_$i26: i1, in_$i27: i32, in_$i25: i32) returns (out_$p15: ref, out_$i16: i64, out_$p17: ref, out_$i18: i32, out_$i19: i32, out_$i20: i1, out_$i21: i32, out_$i23: i32, out_$i24: i1, out_$i13: i32, out_$i14: i32, out_$i26: i1, out_$i27: i32, out_$i25: i32);
  modifies $M.0, $M.20, $M.21, $CurrAddr, $M.2, $M.3, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.31, $M.87, $M.6, $M.13, $M.18, $M.19, $M.69, $M.70, $M.23, $M.24, $M.25, $M.26, $M.27, $M.108, $M.110, $M.112, $M.114, $M.28, $M.33, assertsPassed, $M.29, $M.45, $M.48, $M.47, $M.89, $M.109, $M.111, $M.113, $M.115, $M.34, $M.30, $M.35, $M.46, $M.90, $M.86, $M.91, $M.44, $M.32, $M.36, $M.38, $M.40, $M.42;



implementation vmci_ctx_add_notification_loop_$bb25(in_$p18: ref, in_$i35: i64, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$i41: i64, in_$p42: ref, in_$i43: i64, in_$i44: i1, in_$i45: i8, in_$i46: i1, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$i53: i64, in_$i54: i1, in_$p37: ref) returns (out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$i41: i64, out_$p42: ref, out_$i43: i64, out_$i44: i1, out_$i45: i8, out_$i46: i1, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$i53: i64, out_$i54: i1, out_$p37: ref)
{

  entry:
    out_$p38, out_$p39, out_$p40, out_$i41, out_$p42, out_$i43, out_$i44, out_$i45, out_$i46, out_$p49, out_$p50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p37 := in_$p38, in_$p39, in_$p40, in_$i41, in_$p42, in_$i43, in_$i44, in_$i45, in_$i46, in_$p49, in_$p50, in_$p51, in_$p52, in_$i53, in_$i54, in_$p37;
    goto $bb25, exit;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_7968;

  $bb31:
    assume out_$i54 == 1;
    assume {:verifier.code 0} true;
    out_$p37 := out_$p50;
    goto $bb31_dummy;

  corral_source_split_7990:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31;

  corral_source_split_7989:
    assume {:verifier.code 0} true;
    out_$i54 := $ne.i64(out_$i53, in_$i35);
    goto corral_source_split_7990;

  corral_source_split_7988:
    assume {:verifier.code 0} true;
    out_$i53 := $p2i.ref.i64(out_$p52);
    goto corral_source_split_7989;

  corral_source_split_7987:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(out_$p51, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_7988;

  corral_source_split_7986:
    assume {:verifier.code 0} true;
    out_$p51 := $bitcast.ref.ref(out_$p50);
    goto corral_source_split_7987;

  corral_source_split_7985:
    assume {:verifier.code 0} true;
    out_$p50 := $load.ref($M.0, out_$p49);
    goto corral_source_split_7986;

  $bb30:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref($add.ref(out_$p37, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_7985;

  $bb28:
    assume !(out_$i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_7978:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28;

  corral_source_split_7977:
    assume {:verifier.code 0} true;
    out_$i46 := $trunc.i8.i1(out_$i45);
    goto corral_source_split_7978;

  corral_source_split_7976:
    assume {:verifier.code 0} true;
    out_$i45 := $zext.i1.i8(out_$i44);
    call {:si_unique_call 1742} {:cexpr "tmp___0"} boogie_si_record_i8(out_$i45);
    goto corral_source_split_7977;

  corral_source_split_7975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1741} out_$i44 := vmci_handle_is_equal(out_$i41, out_$i43);
    goto corral_source_split_7976;

  corral_source_split_7974:
    assume {:verifier.code 0} true;
    out_$i43 := $load.i64($M.0, out_$p42);
    goto corral_source_split_7975;

  corral_source_split_7973:
    assume {:verifier.code 0} true;
    out_$p42 := $bitcast.ref.ref(out_$p39);
    goto corral_source_split_7974;

  corral_source_split_7972:
    assume {:verifier.code 0} true;
    out_$i41 := $load.i64($M.0, out_$p40);
    goto corral_source_split_7973;

  corral_source_split_7971:
    assume {:verifier.code 0} true;
    out_$p40 := $bitcast.ref.ref(out_$p38);
    goto corral_source_split_7972;

  corral_source_split_7970:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(in_$p18, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_7971;

  $bb26:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(out_$p37, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_7970;

  corral_source_split_7968:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb31_dummy:
    call {:si_unique_call 1} out_$p38, out_$p39, out_$p40, out_$i41, out_$p42, out_$i43, out_$i44, out_$i45, out_$i46, out_$p49, out_$p50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p37 := vmci_ctx_add_notification_loop_$bb25(in_$p18, in_$i35, out_$p38, out_$p39, out_$p40, out_$i41, out_$p42, out_$i43, out_$i44, out_$i45, out_$i46, out_$p49, out_$p50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p37);
    return;

  exit:
    return;
}



procedure vmci_ctx_add_notification_loop_$bb25(in_$p18: ref, in_$i35: i64, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$i41: i64, in_$p42: ref, in_$i43: i64, in_$i44: i1, in_$i45: i8, in_$i46: i1, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$i53: i64, in_$i54: i1, in_$p37: ref) returns (out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$i41: i64, out_$p42: ref, out_$i43: i64, out_$i44: i1, out_$i45: i8, out_$i46: i1, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$i53: i64, out_$i54: i1, out_$p37: ref);
  modifies $M.20, $M.21, $CurrAddr;



implementation vmci_ctx_get_chkpt_notifiers_loop_$bb14(in_$p16: ref, in_$i26: i64, in_$i30: i32, in_$p32: ref, in_$i33: i32, in_$i34: i64, in_$p35: ref, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$i41: i64, in_$i42: i1, in_$i28: i32, in_$p29: ref) returns (out_$i30: i32, out_$p32: ref, out_$i33: i32, out_$i34: i64, out_$p35: ref, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$i41: i64, out_$i42: i1, out_$i28: i32, out_$p29: ref)
{

  entry:
    out_$i30, out_$p32, out_$i33, out_$i34, out_$p35, out_$p37, out_$p38, out_$p39, out_$p40, out_$i41, out_$i42, out_$i28, out_$p29 := in_$i30, in_$p32, in_$i33, in_$i34, in_$p35, in_$p37, in_$p38, in_$p39, in_$p40, in_$i41, in_$i42, in_$i28, in_$p29;
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8085;

  $bb16:
    assume out_$i42 == 1;
    assume {:verifier.code 0} true;
    out_$i28, out_$p29 := out_$i30, out_$p38;
    goto $bb16_dummy;

  corral_source_split_8098:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_8097:
    assume {:verifier.code 0} true;
    out_$i42 := $ne.i64(out_$i41, in_$i26);
    goto corral_source_split_8098;

  corral_source_split_8096:
    assume {:verifier.code 0} true;
    out_$i41 := $p2i.ref.i64(out_$p40);
    goto corral_source_split_8097;

  corral_source_split_8095:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(out_$p39, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_8096;

  corral_source_split_8094:
    assume {:verifier.code 0} true;
    out_$p39 := $bitcast.ref.ref(out_$p38);
    goto corral_source_split_8095;

  corral_source_split_8093:
    assume {:verifier.code 0} true;
    out_$p38 := $load.ref($M.0, out_$p37);
    goto corral_source_split_8094;

  corral_source_split_8092:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref($add.ref(out_$p29, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_8093;

  corral_source_split_8091:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p35, out_$i33);
    goto corral_source_split_8092;

  corral_source_split_8090:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref(in_$p16, $mul.ref(out_$i34, 4));
    goto corral_source_split_8091;

  corral_source_split_8089:
    assume {:verifier.code 0} true;
    out_$i34 := $sext.i32.i64(out_$i28);
    goto corral_source_split_8090;

  corral_source_split_8088:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i32($M.0, out_$p32);
    goto corral_source_split_8089;

  corral_source_split_8087:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref($add.ref(out_$p29, $mul.ref(0, 24)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_8088;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i30 := $add.i32(out_$i28, 1);
    call {:si_unique_call 1760} {:cexpr "i"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_8087;

  corral_source_split_8085:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb16_dummy:
    call {:si_unique_call 1} out_$i30, out_$p32, out_$i33, out_$i34, out_$p35, out_$p37, out_$p38, out_$p39, out_$p40, out_$i41, out_$i42, out_$i28, out_$p29 := vmci_ctx_get_chkpt_notifiers_loop_$bb14(in_$p16, in_$i26, out_$i30, out_$p32, out_$i33, out_$i34, out_$p35, out_$p37, out_$p38, out_$p39, out_$p40, out_$i41, out_$i42, out_$i28, out_$p29);
    return;

  exit:
    return;
}



procedure vmci_ctx_get_chkpt_notifiers_loop_$bb14(in_$p16: ref, in_$i26: i64, in_$i30: i32, in_$p32: ref, in_$i33: i32, in_$i34: i64, in_$p35: ref, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$i41: i64, in_$i42: i1, in_$i28: i32, in_$p29: ref) returns (out_$i30: i32, out_$p32: ref, out_$i33: i32, out_$i34: i64, out_$p35: ref, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$i41: i64, out_$i42: i1, out_$i28: i32, out_$p29: ref);
  modifies $M.0;



implementation vmci_ctx_get_chkpt_doorbells_loop_$bb13(in_$p0: ref, in_$p3: ref, in_$i6: i64, in_$p15: ref, in_$i20: i64, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$i26: i64, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$i30: i32, in_$i31: i64, in_$i32: i1, in_$i19: i32, in_cmdloc_dummy_var_163: [ref]i8, in_cmdloc_dummy_var_164: [ref]i8, in_cmdloc_dummy_var_165: [ref]i8) returns (out_$i20: i64, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$i26: i64, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$i30: i32, out_$i31: i64, out_$i32: i1, out_$i19: i32, out_cmdloc_dummy_var_163: [ref]i8, out_cmdloc_dummy_var_164: [ref]i8, out_cmdloc_dummy_var_165: [ref]i8)
{

  entry:
    out_$i20, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p27, out_$p28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i19, out_cmdloc_dummy_var_163, out_cmdloc_dummy_var_164, out_cmdloc_dummy_var_165 := in_$i20, in_$p22, in_$p23, in_$p24, in_$i25, in_$i26, in_$p27, in_$p28, in_$p29, in_$i30, in_$i31, in_$i32, in_$i19, in_cmdloc_dummy_var_163, in_cmdloc_dummy_var_164, in_cmdloc_dummy_var_165;
    goto $bb13, exit;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_8139;

  $bb15:
    assume out_$i32 == 1;
    assume {:verifier.code 0} true;
    out_$i19 := out_$i30;
    goto $bb15_dummy;

  corral_source_split_8155:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15;

  corral_source_split_8154:
    assume {:verifier.code 0} true;
    out_$i32 := $ult.i64(out_$i31, in_$i6);
    goto corral_source_split_8155;

  corral_source_split_8153:
    assume {:verifier.code 0} true;
    out_$i31 := $sext.i32.i64(out_$i30);
    goto corral_source_split_8154;

  corral_source_split_8152:
    assume {:verifier.code 0} true;
    out_$i30 := $add.i32(out_$i19, 1);
    call {:si_unique_call 1768} {:cexpr "i"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_8153;

  corral_source_split_8151:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_163 := $M.0;
    out_cmdloc_dummy_var_164 := $M.0;
    call {:si_unique_call 1767} out_cmdloc_dummy_var_165 := $memcpy.i8(out_cmdloc_dummy_var_163, out_cmdloc_dummy_var_164, out_$p28, out_$p29, 8, $zext.i32.i64(4), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_165;
    goto corral_source_split_8152;

  corral_source_split_8150:
    assume {:verifier.code 0} true;
    out_$p29 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_8151;

  corral_source_split_8149:
    assume {:verifier.code 0} true;
    out_$p28 := $bitcast.ref.ref(out_$p22);
    goto corral_source_split_8150;

  corral_source_split_8148:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p27, out_$i26);
    goto corral_source_split_8149;

  corral_source_split_8147:
    assume {:verifier.code 0} true;
    out_$p27 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_8148;

  corral_source_split_8146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1766} out_$i26 := vmci_handle_arr_get_entry(out_$p24, out_$i25);
    goto corral_source_split_8147;

  corral_source_split_8145:
    assume {:verifier.code 0} true;
    out_$i25 := $sext.i32.i64(out_$i19);
    goto corral_source_split_8146;

  corral_source_split_8144:
    assume {:verifier.code 0} true;
    out_$p24 := $load.ref($M.0, out_$p23);
    goto corral_source_split_8145;

  corral_source_split_8143:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(in_$p0, $mul.ref(0, 304)), $mul.ref(144, 1));
    goto corral_source_split_8144;

  corral_source_split_8142:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(in_$p15, $mul.ref(out_$i20, 16)), $mul.ref(0, 1));
    goto corral_source_split_8143;

  corral_source_split_8141:
    assume {:verifier.code 0} true;
    goto corral_source_split_8142;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i20 := $sext.i32.i64(out_$i19);
    goto corral_source_split_8141;

  corral_source_split_8139:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb15_dummy:
    call {:si_unique_call 1} out_$i20, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p27, out_$p28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i19, out_cmdloc_dummy_var_163, out_cmdloc_dummy_var_164, out_cmdloc_dummy_var_165 := vmci_ctx_get_chkpt_doorbells_loop_$bb13(in_$p0, in_$p3, in_$i6, in_$p15, out_$i20, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p27, out_$p28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i19, out_cmdloc_dummy_var_163, out_cmdloc_dummy_var_164, out_cmdloc_dummy_var_165);
    return;

  exit:
    return;
}



procedure vmci_ctx_get_chkpt_doorbells_loop_$bb13(in_$p0: ref, in_$p3: ref, in_$i6: i64, in_$p15: ref, in_$i20: i64, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$i26: i64, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$i30: i32, in_$i31: i64, in_$i32: i1, in_$i19: i32, in_cmdloc_dummy_var_163: [ref]i8, in_cmdloc_dummy_var_164: [ref]i8, in_cmdloc_dummy_var_165: [ref]i8) returns (out_$i20: i64, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$i26: i64, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$i30: i32, out_$i31: i64, out_$i32: i1, out_$i19: i32, out_cmdloc_dummy_var_163: [ref]i8, out_cmdloc_dummy_var_164: [ref]i8, out_cmdloc_dummy_var_165: [ref]i8);
  modifies $M.0, $CurrAddr;



implementation vmci_ctx_remove_notification_loop_$bb8(in_$p2: ref, in_$i24: i64, in_$p29: ref, in_$p30: ref, in_$i31: i64, in_$p32: ref, in_$i33: i64, in_$i34: i1, in_$i35: i8, in_$i36: i1, in_$p37: ref, in_$p46: ref, in_$p47: ref, in_$p49: ref, in_$i50: i64, in_$i51: i1, in_$p27: ref, in_$p28: ref, in_$p52: ref) returns (out_$p29: ref, out_$p30: ref, out_$i31: i64, out_$p32: ref, out_$i33: i64, out_$i34: i1, out_$i35: i8, out_$i36: i1, out_$p37: ref, out_$p46: ref, out_$p47: ref, out_$p49: ref, out_$i50: i64, out_$i51: i1, out_$p27: ref, out_$p28: ref, out_$p52: ref)
{

  entry:
    out_$p29, out_$p30, out_$i31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$p37, out_$p46, out_$p47, out_$p49, out_$i50, out_$i51, out_$p27, out_$p28, out_$p52 := in_$p29, in_$p30, in_$i31, in_$p32, in_$i33, in_$i34, in_$i35, in_$i36, in_$p37, in_$p46, in_$p47, in_$p49, in_$i50, in_$i51, in_$p27, in_$p28, in_$p52;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8196;

  $bb14:
    assume out_$i51 == 1;
    assume {:verifier.code 0} true;
    out_$p27, out_$p28 := out_$p47, out_$p27;
    goto $bb14_dummy;

  corral_source_split_8226:
    assume {:verifier.code 0} true;
    out_$p52 := out_$p27;
    assume true;
    goto $bb14;

  corral_source_split_8225:
    assume {:verifier.code 0} true;
    out_$i51 := $ne.i64(out_$i50, in_$i24);
    goto corral_source_split_8226;

  corral_source_split_8224:
    assume {:verifier.code 0} true;
    out_$i50 := $p2i.ref.i64(out_$p49);
    goto corral_source_split_8225;

  corral_source_split_8223:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(out_$p27, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_8224;

  corral_source_split_8222:
    assume {:verifier.code 0} true;
    goto corral_source_split_8223;

  corral_source_split_8221:
    assume {:verifier.code 0} true;
    out_$p47 := $load.ref($M.0, out_$p46);
    goto corral_source_split_8222;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref($add.ref(out_$p27, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_8221;

  $bb11:
    assume !(out_$i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_8205:
    assume {:verifier.code 0} true;
    out_$p37 := out_$p28;
    assume true;
    goto $bb11;

  corral_source_split_8204:
    assume {:verifier.code 0} true;
    out_$i36 := $trunc.i8.i1(out_$i35);
    goto corral_source_split_8205;

  corral_source_split_8203:
    assume {:verifier.code 0} true;
    out_$i35 := $zext.i1.i8(out_$i34);
    call {:si_unique_call 1777} {:cexpr "tmp___0"} boogie_si_record_i8(out_$i35);
    goto corral_source_split_8204;

  corral_source_split_8202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1776} out_$i34 := vmci_handle_is_equal(out_$i31, out_$i33);
    goto corral_source_split_8203;

  corral_source_split_8201:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i64($M.133, out_$p32);
    goto corral_source_split_8202;

  corral_source_split_8200:
    assume {:verifier.code 0} true;
    out_$p32 := $bitcast.ref.ref(in_$p2);
    goto corral_source_split_8201;

  corral_source_split_8199:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i64($M.0, out_$p30);
    goto corral_source_split_8200;

  corral_source_split_8198:
    assume {:verifier.code 0} true;
    out_$p30 := $bitcast.ref.ref(out_$p29);
    goto corral_source_split_8199;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p28, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_8198;

  corral_source_split_8196:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb14_dummy:
    call {:si_unique_call 1} out_$p29, out_$p30, out_$i31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$p37, out_$p46, out_$p47, out_$p49, out_$i50, out_$i51, out_$p27, out_$p28, out_$p52 := vmci_ctx_remove_notification_loop_$bb8(in_$p2, in_$i24, out_$p29, out_$p30, out_$i31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$p37, out_$p46, out_$p47, out_$p49, out_$i50, out_$i51, out_$p27, out_$p28, out_$p52);
    return;

  exit:
    return;
}



procedure vmci_ctx_remove_notification_loop_$bb8(in_$p2: ref, in_$i24: i64, in_$p29: ref, in_$p30: ref, in_$i31: i64, in_$p32: ref, in_$i33: i64, in_$i34: i1, in_$i35: i8, in_$i36: i1, in_$p37: ref, in_$p46: ref, in_$p47: ref, in_$p49: ref, in_$i50: i64, in_$i51: i1, in_$p27: ref, in_$p28: ref, in_$p52: ref) returns (out_$p29: ref, out_$p30: ref, out_$i31: i64, out_$p32: ref, out_$i33: i64, out_$i34: i1, out_$i35: i8, out_$i36: i1, out_$p37: ref, out_$p46: ref, out_$p47: ref, out_$p49: ref, out_$i50: i64, out_$i51: i1, out_$p27: ref, out_$p28: ref, out_$p52: ref);
  modifies $M.20, $M.21, $CurrAddr;



implementation vmci_ctx_create_loop_$bb32(in_$i62: i1, in_$i63: i32, in_$i64: i32, in_$i65: i1, in_$i66: i32, in_$i67: i1, in_$i68: i8, in_$i69: i1, in_$i61: i32, in_$i70: i32) returns (out_$i62: i1, out_$i63: i32, out_$i64: i32, out_$i65: i1, out_$i66: i32, out_$i67: i1, out_$i68: i8, out_$i69: i1, out_$i61: i32, out_$i70: i32)
{

  entry:
    out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i61, out_$i70 := in_$i62, in_$i63, in_$i64, in_$i65, in_$i66, in_$i67, in_$i68, in_$i69, in_$i61, in_$i70;
    goto $bb32, exit;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_8876;

  $bb40:
    assume out_$i69 == 1;
    assume {:verifier.code 0} true;
    out_$i61 := out_$i66;
    goto $bb40_dummy;

  corral_source_split_8893:
    assume {:verifier.code 0} true;
    out_$i70 := out_$i66;
    assume true;
    goto $bb40;

  corral_source_split_8892:
    assume {:verifier.code 0} true;
    out_$i69 := $trunc.i8.i1(out_$i68);
    goto corral_source_split_8893;

  corral_source_split_8891:
    assume {:verifier.code 0} true;
    out_$i68 := $zext.i1.i8(out_$i67);
    call {:si_unique_call 1915} {:cexpr "tmp___0"} boogie_si_record_i8(out_$i68);
    goto corral_source_split_8892;

  corral_source_split_8890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1914} out_$i67 := vmci_ctx_exists(out_$i66);
    goto corral_source_split_8891;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_8890;

  $bb38:
    assume !(out_$i65 == 1);
    assume {:verifier.code 0} true;
    out_$i66 := out_$i64;
    goto $bb39;

  corral_source_split_8888:
    assume {:verifier.code 0} true;
    out_$i66 := 16;
    goto $bb39;

  $bb37:
    assume out_$i65 == 1;
    goto corral_source_split_8888;

  corral_source_split_8886:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  corral_source_split_8885:
    assume {:verifier.code 0} true;
    out_$i65 := $eq.i32(out_$i64, $sub.i32(0, 1));
    goto corral_source_split_8886;

  corral_source_split_8884:
    assume {:verifier.code 0} true;
    out_$i64 := $add.i32(out_$i63, 1);
    call {:si_unique_call 1913} {:cexpr "cid"} boogie_si_record_i32(out_$i64);
    goto corral_source_split_8885;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_8884;

  corral_source_split_8882:
    assume {:verifier.code 0} true;
    out_$i63 := 15;
    goto $bb36;

  corral_source_split_8880:
    assume {:verifier.code 0} true;
    out_$i63 := out_$i61;
    goto $bb36;

  $bb34:
    assume out_$i62 == 1;
    goto corral_source_split_8880;

  corral_source_split_8878:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb33:
    assume {:verifier.code 0} true;
    out_$i62 := $ugt.i32(out_$i61, 15);
    goto corral_source_split_8878;

  corral_source_split_8876:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb35:
    assume !(out_$i62 == 1);
    goto corral_source_split_8882;

  $bb40_dummy:
    call {:si_unique_call 1} out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i61, out_$i70 := vmci_ctx_create_loop_$bb32(out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i61, out_$i70);
    return;

  exit:
    return;
}



procedure vmci_ctx_create_loop_$bb32(in_$i62: i1, in_$i63: i32, in_$i64: i32, in_$i65: i1, in_$i66: i32, in_$i67: i1, in_$i68: i8, in_$i69: i1, in_$i61: i32, in_$i70: i32) returns (out_$i62: i1, out_$i63: i32, out_$i64: i32, out_$i65: i1, out_$i66: i32, out_$i67: i1, out_$i68: i8, out_$i69: i1, out_$i61: i32, out_$i70: i32);
  modifies $M.0, $CurrAddr;



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();



implementation main_loop_$bb1(in_$i0: i32, in_$i1: i1, in_$i2: i1, in_$i3: i1, in_$i4: i1, in_$i5: i1, in_$i6: i1, in_$i7: i1, in_$i8: i1, in_$i9: i1, in_$i10: i32, in_$i11: i1, in_$i12: i32, in_$i13: i1, in_$i14: i32, in_$i15: i1, in_$i16: i32, in_$i17: i1, in_$i18: i1, in_$i19: i1, in_$i20: i32, in_$i21: i1, in_$i22: i32, in_$i23: i1, in_$i24: i32, in_$i25: i1, in_$i26: i32, in_$i27: i32, in_$i28: i1, in_$i29: i32, in_$i30: i1) returns (out_$i0: i32, out_$i1: i1, out_$i2: i1, out_$i3: i1, out_$i4: i1, out_$i5: i1, out_$i6: i1, out_$i7: i1, out_$i8: i1, out_$i9: i1, out_$i10: i32, out_$i11: i1, out_$i12: i32, out_$i13: i1, out_$i14: i32, out_$i15: i1, out_$i16: i32, out_$i17: i1, out_$i18: i1, out_$i19: i1, out_$i20: i32, out_$i21: i1, out_$i22: i32, out_$i23: i1, out_$i24: i32, out_$i25: i1, out_$i26: i32, out_$i27: i32, out_$i28: i1, out_$i29: i32, out_$i30: i1)
{

  entry:
    out_$i0, out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30 := in_$i0, in_$i1, in_$i2, in_$i3, in_$i4, in_$i5, in_$i6, in_$i7, in_$i8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1966} out_$i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1967} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i0);
    call {:si_unique_call 1968} {:cexpr "tmp"} boogie_si_record_i32(out_$i0);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb25_dummy;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_9025:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_9029:
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_9027:
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_9035:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_9037:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb23:
    assume !(out_$i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_9044:
    assume {:verifier.code 0} true;
    goto $bb24;

  SeqInstr_549:
    goto corral_source_split_9044;

  SeqInstr_548:
    assume assertsPassed;
    goto SeqInstr_549;

  corral_source_split_9043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1969} ldv_main_exported_6();
    goto SeqInstr_548;

  $bb22:
    assume out_$i11 == 1;
    goto corral_source_split_9043;

  corral_source_split_9041:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_9040:
    assume {:verifier.code 0} true;
    out_$i11 := $ne.i32(out_$i10, 0);
    goto corral_source_split_9041;

  corral_source_split_9039:
    assume {:verifier.code 0} true;
    out_$i10 := $M.148;
    goto corral_source_split_9040;

  $bb20:
    assume out_$i9 == 1;
    goto corral_source_split_9039;

  $bb18:
    assume out_$i8 == 1;
    assume {:verifier.code 0} true;
    out_$i9 := $eq.i32(out_$i0, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb14:
    assume out_$i6 == 1;
    assume {:verifier.code 0} true;
    out_$i8 := $slt.i32(out_$i0, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb3:
    assume out_$i1 == 1;
    assume {:verifier.code 0} true;
    out_$i6 := $slt.i32(out_$i0, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i1 := $slt.i32(out_$i0, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb19:
    assume !(out_$i8 == 1);
    goto corral_source_split_9037;

  $bb27:
    assume !(out_$i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_9047:
    assume {:verifier.code 0} true;
    goto $bb28;

  SeqInstr_552:
    goto corral_source_split_9047;

  SeqInstr_551:
    assume assertsPassed;
    goto SeqInstr_552;

  corral_source_split_9046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1970} ldv_main_exported_7();
    goto SeqInstr_551;

  $bb26:
    assume out_$i13 == 1;
    goto corral_source_split_9046;

  corral_source_split_9033:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_9032:
    assume {:verifier.code 0} true;
    out_$i13 := $ne.i32(out_$i12, 0);
    goto corral_source_split_9033;

  corral_source_split_9031:
    assume {:verifier.code 0} true;
    out_$i12 := $M.150;
    goto corral_source_split_9032;

  $bb16:
    assume out_$i7 == 1;
    goto corral_source_split_9031;

  $bb15:
    assume !(out_$i6 == 1);
    assume {:verifier.code 0} true;
    out_$i7 := $slt.i32(out_$i0, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !(out_$i7 == 1);
    goto corral_source_split_9035;

  $bb12:
    assume out_$i5 == 1;
    goto corral_source_split_9027;

  $bb5:
    assume out_$i2 == 1;
    assume {:verifier.code 0} true;
    out_$i5 := $slt.i32(out_$i0, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb4:
    assume !(out_$i1 == 1);
    assume {:verifier.code 0} true;
    out_$i2 := $slt.i32(out_$i0, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb13:
    assume !(out_$i5 == 1);
    goto corral_source_split_9029;

  $bb30:
    assume !(out_$i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb40:
    assume {:verifier.code 0} true;
    assume !(out_$i21 == 1);
    goto $bb41;

  $bb43:
    assume {:verifier.code 0} true;
    assume !(out_$i23 == 1);
    goto $bb41;

  corral_source_split_9061:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43;

  corral_source_split_9060:
    assume {:verifier.code 0} true;
    out_$i23 := $eq.i32(out_$i22, 0);
    goto corral_source_split_9061;

  corral_source_split_9059:
    assume {:verifier.code 0} true;
    out_$i22 := $M.154;
    goto corral_source_split_9060;

  $bb39:
    assume out_$i21 == 1;
    goto corral_source_split_9059;

  corral_source_split_9057:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  corral_source_split_9056:
    assume {:verifier.code 0} true;
    out_$i21 := $eq.i32(out_$i20, 2);
    goto corral_source_split_9057;

  corral_source_split_9055:
    assume {:verifier.code 0} true;
    out_$i20 := $M.155;
    goto corral_source_split_9056;

  $bb37:
    assume out_$i19 == 1;
    goto corral_source_split_9055;

  $bb32:
    assume out_$i17 == 1;
    assume {:verifier.code 0} true;
    out_$i19 := $eq.i32(out_$i16, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb31:
    assume {:verifier.code 0} true;
    out_$i17 := $slt.i32(out_$i16, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_9049:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1971} out_$i16 := __VERIFIER_nondet_int();
    call {:si_unique_call 1972} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i16);
    call {:si_unique_call 1973} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i16);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb29:
    assume out_$i15 == 1;
    goto corral_source_split_9049;

  corral_source_split_9023:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_9022:
    assume {:verifier.code 0} true;
    out_$i15 := $ne.i32(out_$i14, 0);
    goto corral_source_split_9023;

  corral_source_split_9021:
    assume {:verifier.code 0} true;
    out_$i14 := $M.155;
    goto corral_source_split_9022;

  $bb7:
    assume out_$i3 == 1;
    goto corral_source_split_9021;

  $bb6:
    assume !(out_$i2 == 1);
    assume {:verifier.code 0} true;
    out_$i3 := $slt.i32(out_$i0, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb48:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb53:
    assume !(out_$i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  corral_source_split_9082:
    assume {:verifier.code 0} true;
    goto $bb54;

  corral_source_split_9081:
    assume {:verifier.code 0} true;
    $M.155 := 2;
    call {:si_unique_call 1980} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_9082;

  $bb52:
    assume out_$i30 == 1;
    goto corral_source_split_9081;

  corral_source_split_9079:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  corral_source_split_9078:
    assume {:verifier.code 0} true;
    out_$i30 := $eq.i32(out_$i29, 0);
    goto corral_source_split_9079;

  $bb51:
    assume {:verifier.code 0} true;
    out_$i29 := $M.157;
    goto corral_source_split_9078;

  $bb50:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  corral_source_split_9073:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50;

  corral_source_split_9072:
    assume {:verifier.code 0} true;
    out_$i28 := $ne.i32(out_$i27, 0);
    goto corral_source_split_9073;

  corral_source_split_9071:
    assume {:verifier.code 0} true;
    out_$i27 := $M.157;
    goto corral_source_split_9072;

  corral_source_split_9070:
    assume {:verifier.code 0} true;
    $M.157 := out_$i26;
    call {:si_unique_call 1978} {:cexpr "ldv_retval_2"} boogie_si_record_i32(out_$i26);
    goto corral_source_split_9071;

  SeqInstr_561:
    goto corral_source_split_9070;

  SeqInstr_560:
    assume assertsPassed;
    goto SeqInstr_561;

  corral_source_split_9069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1977} out_$i26 := vmci_drv_init();
    goto SeqInstr_560;

  $bb47:
    assume out_$i25 == 1;
    goto corral_source_split_9069;

  corral_source_split_9053:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  corral_source_split_9052:
    assume {:verifier.code 0} true;
    out_$i25 := $eq.i32(out_$i24, 1);
    goto corral_source_split_9053;

  corral_source_split_9051:
    assume {:verifier.code 0} true;
    out_$i24 := $M.155;
    goto corral_source_split_9052;

  $bb34:
    assume out_$i18 == 1;
    goto corral_source_split_9051;

  $bb33:
    assume !(out_$i17 == 1);
    assume {:verifier.code 0} true;
    out_$i18 := $eq.i32(out_$i16, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  corral_source_split_9084:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb56:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1981} ldv_stop();
    goto corral_source_split_9084;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb35:
    assume {:verifier.code 0} true;
    assume !(out_$i18 == 1);
    goto $bb36;

  $bb38:
    assume {:verifier.code 0} true;
    assume !(out_$i19 == 1);
    goto $bb36;

  $bb9:
    assume out_$i4 == 1;
    goto corral_source_split_9025;

  $bb8:
    assume !(out_$i3 == 1);
    assume {:verifier.code 0} true;
    out_$i4 := $eq.i32(out_$i0, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_9086:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb59:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1982} ldv_stop();
    goto corral_source_split_9086;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i4 == 1);
    goto $bb11;

  $bb21:
    assume {:verifier.code 0} true;
    assume !(out_$i9 == 1);
    goto $bb11;

  $bb25_dummy:
    call {:si_unique_call 1} out_$i0, out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30 := main_loop_$bb1(out_$i0, out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$i0: i32, in_$i1: i1, in_$i2: i1, in_$i3: i1, in_$i4: i1, in_$i5: i1, in_$i6: i1, in_$i7: i1, in_$i8: i1, in_$i9: i1, in_$i10: i32, in_$i11: i1, in_$i12: i32, in_$i13: i1, in_$i14: i32, in_$i15: i1, in_$i16: i32, in_$i17: i1, in_$i18: i1, in_$i19: i1, in_$i20: i32, in_$i21: i1, in_$i22: i32, in_$i23: i1, in_$i24: i32, in_$i25: i1, in_$i26: i32, in_$i27: i32, in_$i28: i1, in_$i29: i32, in_$i30: i1) returns (out_$i0: i32, out_$i1: i1, out_$i2: i1, out_$i3: i1, out_$i4: i1, out_$i5: i1, out_$i6: i1, out_$i7: i1, out_$i8: i1, out_$i9: i1, out_$i10: i32, out_$i11: i1, out_$i12: i32, out_$i13: i1, out_$i14: i32, out_$i15: i1, out_$i16: i32, out_$i17: i1, out_$i18: i1, out_$i19: i1, out_$i20: i32, out_$i21: i1, out_$i22: i32, out_$i23: i1, out_$i24: i32, out_$i25: i1, out_$i26: i32, out_$i27: i32, out_$i28: i1, out_$i29: i32, out_$i30: i1);
  modifies $M.139, $M.0, $M.148, $M.154, $M.160, $M.122, $M.123, $M.18, $M.78, $M.77, $M.125, $M.65, $M.45, $M.20, $M.21, $M.48, $CurrAddr, $M.133, $M.124, $M.23, $M.24, $M.25, $M.26, $M.19, $M.27, $M.29, $M.137, $M.76, $M.75, $M.134, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.96, $M.97, $M.126, $M.127, $M.128, $M.135, $M.136, $M.129, $M.130, $M.131, $M.132, $M.67, $M.30, $M.66, $M.68, $M.58, $M.28, $M.47, $M.89, $M.33, $M.34, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.31, $M.87, $M.69, $M.35, $M.74, $M.32, $M.98, $M.2, $M.3, $M.138, assertsPassed, $M.46, $M.90, $M.86, $M.91, $M.44, $M.108, $M.110, $M.112, $M.114, $M.70, $M.55, $M.79, $M.6, $M.13, $M.92, $M.93, $M.109, $M.111, $M.113, $M.115, $M.36, $M.38, $M.40, $M.42, $M.162, $M.150, $M.155, $M.157, $M.163, $M.164, $M.170, $M.1, $M.161, $M.158, $M.159;



implementation vmci_event_exit_loop_$bb61(in_$p155: ref, in_$p156: ref, in_$p158: ref, in_$p159: ref, in_$p161: ref, in_$p162: ref, in_$p163: ref, in_$p164: ref, in_$p165: ref, in_$i166: i64, in_$i167: i1, in_vslice_dummy_var_316: i32) returns (out_$p155: ref, out_$p156: ref, out_$p158: ref, out_$p159: ref, out_$p161: ref, out_$p162: ref, out_$p163: ref, out_$p164: ref, out_$p165: ref, out_$i166: i64, out_$i167: i1, out_vslice_dummy_var_316: i32)
{

  entry:
    out_$p155, out_$p156, out_$p158, out_$p159, out_$p161, out_$p162, out_$p163, out_$p164, out_$p165, out_$i166, out_$i167, out_vslice_dummy_var_316 := in_$p155, in_$p156, in_$p158, in_$p159, in_$p161, in_$p162, in_$p163, in_$p164, in_$p165, in_$i166, in_$i167, in_vslice_dummy_var_316;
    goto $bb61, exit;

  $bb61:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9567;

  $bb63:
    assume out_$i167 == 1;
    assume {:verifier.code 0} true;
    out_$p155, out_$p156 := out_$p156, out_$p164;
    goto $bb63_dummy;

  corral_source_split_9580:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63;

  corral_source_split_9579:
    assume {:verifier.code 0} true;
    out_$i167 := $ne.i64(out_$i166, $p2i.ref.i64($add.ref($add.ref(subscriber_array, $mul.ref(0, 112)), $mul.ref(6, 16))));
    goto corral_source_split_9580;

  corral_source_split_9578:
    assume {:verifier.code 0} true;
    out_$i166 := $p2i.ref.i64(out_$p165);
    goto corral_source_split_9579;

  corral_source_split_9577:
    assume {:verifier.code 0} true;
    out_$p165 := $add.ref($add.ref(out_$p156, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9578;

  corral_source_split_9576:
    assume {:verifier.code 0} true;
    out_$p164 := $add.ref(out_$p163, $mul.ref($sub.ref(0, 24), 40));
    goto corral_source_split_9577;

  corral_source_split_9575:
    assume {:verifier.code 0} true;
    out_$p163 := $bitcast.ref.ref(out_$p162);
    goto corral_source_split_9576;

  corral_source_split_9574:
    assume {:verifier.code 0} true;
    out_$p162 := $load.ref($M.0, out_$p161);
    goto corral_source_split_9575;

  corral_source_split_9573:
    assume {:verifier.code 0} true;
    out_$p161 := $add.ref($add.ref($add.ref(out_$p156, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_9574;

  corral_source_split_9572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2093} kfree(out_$p159);
    goto corral_source_split_9573;

  corral_source_split_9571:
    assume {:verifier.code 0} true;
    out_$p159 := $bitcast.ref.ref(out_$p155);
    goto corral_source_split_9572;

  corral_source_split_9570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2092} list_del(out_$p158);
    goto corral_source_split_9571;

  corral_source_split_9569:
    assume {:verifier.code 0} true;
    out_$p158 := $add.ref($add.ref(out_$p155, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9570;

  $bb62:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2091} out_vslice_dummy_var_316 := printk.ref(.str.35);
    goto corral_source_split_9569;

  corral_source_split_9567:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb63_dummy:
    call {:si_unique_call 1} out_$p155, out_$p156, out_$p158, out_$p159, out_$p161, out_$p162, out_$p163, out_$p164, out_$p165, out_$i166, out_$i167, out_vslice_dummy_var_316 := vmci_event_exit_loop_$bb61(out_$p155, out_$p156, out_$p158, out_$p159, out_$p161, out_$p162, out_$p163, out_$p164, out_$p165, out_$i166, out_$i167, out_vslice_dummy_var_316);
    return;

  exit:
    return;
}



procedure vmci_event_exit_loop_$bb61(in_$p155: ref, in_$p156: ref, in_$p158: ref, in_$p159: ref, in_$p161: ref, in_$p162: ref, in_$p163: ref, in_$p164: ref, in_$p165: ref, in_$i166: i64, in_$i167: i1, in_vslice_dummy_var_316: i32) returns (out_$p155: ref, out_$p156: ref, out_$p158: ref, out_$p159: ref, out_$p161: ref, out_$p162: ref, out_$p163: ref, out_$p164: ref, out_$p165: ref, out_$i166: i64, out_$i167: i1, out_vslice_dummy_var_316: i32);



implementation vmci_event_exit_loop_$bb52(in_$p131: ref, in_$p132: ref, in_$p134: ref, in_$p135: ref, in_$p137: ref, in_$p138: ref, in_$p139: ref, in_$p140: ref, in_$p141: ref, in_$i142: i64, in_$i143: i1, in_vslice_dummy_var_315: i32) returns (out_$p131: ref, out_$p132: ref, out_$p134: ref, out_$p135: ref, out_$p137: ref, out_$p138: ref, out_$p139: ref, out_$p140: ref, out_$p141: ref, out_$i142: i64, out_$i143: i1, out_vslice_dummy_var_315: i32)
{

  entry:
    out_$p131, out_$p132, out_$p134, out_$p135, out_$p137, out_$p138, out_$p139, out_$p140, out_$p141, out_$i142, out_$i143, out_vslice_dummy_var_315 := in_$p131, in_$p132, in_$p134, in_$p135, in_$p137, in_$p138, in_$p139, in_$p140, in_$p141, in_$i142, in_$i143, in_vslice_dummy_var_315;
    goto $bb52, exit;

  $bb52:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9537;

  $bb54:
    assume out_$i143 == 1;
    assume {:verifier.code 0} true;
    out_$p131, out_$p132 := out_$p132, out_$p140;
    goto $bb54_dummy;

  corral_source_split_9550:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54;

  corral_source_split_9549:
    assume {:verifier.code 0} true;
    out_$i143 := $ne.i64(out_$i142, $p2i.ref.i64($add.ref($add.ref(subscriber_array, $mul.ref(0, 112)), $mul.ref(5, 16))));
    goto corral_source_split_9550;

  corral_source_split_9548:
    assume {:verifier.code 0} true;
    out_$i142 := $p2i.ref.i64(out_$p141);
    goto corral_source_split_9549;

  corral_source_split_9547:
    assume {:verifier.code 0} true;
    out_$p141 := $add.ref($add.ref(out_$p132, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9548;

  corral_source_split_9546:
    assume {:verifier.code 0} true;
    out_$p140 := $add.ref(out_$p139, $mul.ref($sub.ref(0, 24), 40));
    goto corral_source_split_9547;

  corral_source_split_9545:
    assume {:verifier.code 0} true;
    out_$p139 := $bitcast.ref.ref(out_$p138);
    goto corral_source_split_9546;

  corral_source_split_9544:
    assume {:verifier.code 0} true;
    out_$p138 := $load.ref($M.0, out_$p137);
    goto corral_source_split_9545;

  corral_source_split_9543:
    assume {:verifier.code 0} true;
    out_$p137 := $add.ref($add.ref($add.ref(out_$p132, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_9544;

  corral_source_split_9542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2090} kfree(out_$p135);
    goto corral_source_split_9543;

  corral_source_split_9541:
    assume {:verifier.code 0} true;
    out_$p135 := $bitcast.ref.ref(out_$p131);
    goto corral_source_split_9542;

  corral_source_split_9540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2089} list_del(out_$p134);
    goto corral_source_split_9541;

  corral_source_split_9539:
    assume {:verifier.code 0} true;
    out_$p134 := $add.ref($add.ref(out_$p131, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9540;

  $bb53:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2088} out_vslice_dummy_var_315 := printk.ref(.str.35);
    goto corral_source_split_9539;

  corral_source_split_9537:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb54_dummy:
    call {:si_unique_call 1} out_$p131, out_$p132, out_$p134, out_$p135, out_$p137, out_$p138, out_$p139, out_$p140, out_$p141, out_$i142, out_$i143, out_vslice_dummy_var_315 := vmci_event_exit_loop_$bb52(out_$p131, out_$p132, out_$p134, out_$p135, out_$p137, out_$p138, out_$p139, out_$p140, out_$p141, out_$i142, out_$i143, out_vslice_dummy_var_315);
    return;

  exit:
    return;
}



procedure vmci_event_exit_loop_$bb52(in_$p131: ref, in_$p132: ref, in_$p134: ref, in_$p135: ref, in_$p137: ref, in_$p138: ref, in_$p139: ref, in_$p140: ref, in_$p141: ref, in_$i142: i64, in_$i143: i1, in_vslice_dummy_var_315: i32) returns (out_$p131: ref, out_$p132: ref, out_$p134: ref, out_$p135: ref, out_$p137: ref, out_$p138: ref, out_$p139: ref, out_$p140: ref, out_$p141: ref, out_$i142: i64, out_$i143: i1, out_vslice_dummy_var_315: i32);



implementation vmci_event_exit_loop_$bb43(in_$p107: ref, in_$p108: ref, in_$p110: ref, in_$p111: ref, in_$p113: ref, in_$p114: ref, in_$p115: ref, in_$p116: ref, in_$p117: ref, in_$i118: i64, in_$i119: i1, in_vslice_dummy_var_314: i32) returns (out_$p107: ref, out_$p108: ref, out_$p110: ref, out_$p111: ref, out_$p113: ref, out_$p114: ref, out_$p115: ref, out_$p116: ref, out_$p117: ref, out_$i118: i64, out_$i119: i1, out_vslice_dummy_var_314: i32)
{

  entry:
    out_$p107, out_$p108, out_$p110, out_$p111, out_$p113, out_$p114, out_$p115, out_$p116, out_$p117, out_$i118, out_$i119, out_vslice_dummy_var_314 := in_$p107, in_$p108, in_$p110, in_$p111, in_$p113, in_$p114, in_$p115, in_$p116, in_$p117, in_$i118, in_$i119, in_vslice_dummy_var_314;
    goto $bb43, exit;

  $bb43:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9507;

  $bb45:
    assume out_$i119 == 1;
    assume {:verifier.code 0} true;
    out_$p107, out_$p108 := out_$p108, out_$p116;
    goto $bb45_dummy;

  corral_source_split_9520:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45;

  corral_source_split_9519:
    assume {:verifier.code 0} true;
    out_$i119 := $ne.i64(out_$i118, $p2i.ref.i64($add.ref($add.ref(subscriber_array, $mul.ref(0, 112)), $mul.ref(4, 16))));
    goto corral_source_split_9520;

  corral_source_split_9518:
    assume {:verifier.code 0} true;
    out_$i118 := $p2i.ref.i64(out_$p117);
    goto corral_source_split_9519;

  corral_source_split_9517:
    assume {:verifier.code 0} true;
    out_$p117 := $add.ref($add.ref(out_$p108, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9518;

  corral_source_split_9516:
    assume {:verifier.code 0} true;
    out_$p116 := $add.ref(out_$p115, $mul.ref($sub.ref(0, 24), 40));
    goto corral_source_split_9517;

  corral_source_split_9515:
    assume {:verifier.code 0} true;
    out_$p115 := $bitcast.ref.ref(out_$p114);
    goto corral_source_split_9516;

  corral_source_split_9514:
    assume {:verifier.code 0} true;
    out_$p114 := $load.ref($M.0, out_$p113);
    goto corral_source_split_9515;

  corral_source_split_9513:
    assume {:verifier.code 0} true;
    out_$p113 := $add.ref($add.ref($add.ref(out_$p108, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_9514;

  corral_source_split_9512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2087} kfree(out_$p111);
    goto corral_source_split_9513;

  corral_source_split_9511:
    assume {:verifier.code 0} true;
    out_$p111 := $bitcast.ref.ref(out_$p107);
    goto corral_source_split_9512;

  corral_source_split_9510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2086} list_del(out_$p110);
    goto corral_source_split_9511;

  corral_source_split_9509:
    assume {:verifier.code 0} true;
    out_$p110 := $add.ref($add.ref(out_$p107, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9510;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2085} out_vslice_dummy_var_314 := printk.ref(.str.35);
    goto corral_source_split_9509;

  corral_source_split_9507:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb45_dummy:
    call {:si_unique_call 1} out_$p107, out_$p108, out_$p110, out_$p111, out_$p113, out_$p114, out_$p115, out_$p116, out_$p117, out_$i118, out_$i119, out_vslice_dummy_var_314 := vmci_event_exit_loop_$bb43(out_$p107, out_$p108, out_$p110, out_$p111, out_$p113, out_$p114, out_$p115, out_$p116, out_$p117, out_$i118, out_$i119, out_vslice_dummy_var_314);
    return;

  exit:
    return;
}



procedure vmci_event_exit_loop_$bb43(in_$p107: ref, in_$p108: ref, in_$p110: ref, in_$p111: ref, in_$p113: ref, in_$p114: ref, in_$p115: ref, in_$p116: ref, in_$p117: ref, in_$i118: i64, in_$i119: i1, in_vslice_dummy_var_314: i32) returns (out_$p107: ref, out_$p108: ref, out_$p110: ref, out_$p111: ref, out_$p113: ref, out_$p114: ref, out_$p115: ref, out_$p116: ref, out_$p117: ref, out_$i118: i64, out_$i119: i1, out_vslice_dummy_var_314: i32);



implementation vmci_event_exit_loop_$bb34(in_$p83: ref, in_$p84: ref, in_$p86: ref, in_$p87: ref, in_$p89: ref, in_$p90: ref, in_$p91: ref, in_$p92: ref, in_$p93: ref, in_$i94: i64, in_$i95: i1, in_vslice_dummy_var_313: i32) returns (out_$p83: ref, out_$p84: ref, out_$p86: ref, out_$p87: ref, out_$p89: ref, out_$p90: ref, out_$p91: ref, out_$p92: ref, out_$p93: ref, out_$i94: i64, out_$i95: i1, out_vslice_dummy_var_313: i32)
{

  entry:
    out_$p83, out_$p84, out_$p86, out_$p87, out_$p89, out_$p90, out_$p91, out_$p92, out_$p93, out_$i94, out_$i95, out_vslice_dummy_var_313 := in_$p83, in_$p84, in_$p86, in_$p87, in_$p89, in_$p90, in_$p91, in_$p92, in_$p93, in_$i94, in_$i95, in_vslice_dummy_var_313;
    goto $bb34, exit;

  $bb34:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9477;

  $bb36:
    assume out_$i95 == 1;
    assume {:verifier.code 0} true;
    out_$p83, out_$p84 := out_$p84, out_$p92;
    goto $bb36_dummy;

  corral_source_split_9490:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36;

  corral_source_split_9489:
    assume {:verifier.code 0} true;
    out_$i95 := $ne.i64(out_$i94, $p2i.ref.i64($add.ref($add.ref(subscriber_array, $mul.ref(0, 112)), $mul.ref(3, 16))));
    goto corral_source_split_9490;

  corral_source_split_9488:
    assume {:verifier.code 0} true;
    out_$i94 := $p2i.ref.i64(out_$p93);
    goto corral_source_split_9489;

  corral_source_split_9487:
    assume {:verifier.code 0} true;
    out_$p93 := $add.ref($add.ref(out_$p84, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9488;

  corral_source_split_9486:
    assume {:verifier.code 0} true;
    out_$p92 := $add.ref(out_$p91, $mul.ref($sub.ref(0, 24), 40));
    goto corral_source_split_9487;

  corral_source_split_9485:
    assume {:verifier.code 0} true;
    out_$p91 := $bitcast.ref.ref(out_$p90);
    goto corral_source_split_9486;

  corral_source_split_9484:
    assume {:verifier.code 0} true;
    out_$p90 := $load.ref($M.0, out_$p89);
    goto corral_source_split_9485;

  corral_source_split_9483:
    assume {:verifier.code 0} true;
    out_$p89 := $add.ref($add.ref($add.ref(out_$p84, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_9484;

  corral_source_split_9482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2084} kfree(out_$p87);
    goto corral_source_split_9483;

  corral_source_split_9481:
    assume {:verifier.code 0} true;
    out_$p87 := $bitcast.ref.ref(out_$p83);
    goto corral_source_split_9482;

  corral_source_split_9480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2083} list_del(out_$p86);
    goto corral_source_split_9481;

  corral_source_split_9479:
    assume {:verifier.code 0} true;
    out_$p86 := $add.ref($add.ref(out_$p83, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9480;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2082} out_vslice_dummy_var_313 := printk.ref(.str.35);
    goto corral_source_split_9479;

  corral_source_split_9477:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb36_dummy:
    call {:si_unique_call 1} out_$p83, out_$p84, out_$p86, out_$p87, out_$p89, out_$p90, out_$p91, out_$p92, out_$p93, out_$i94, out_$i95, out_vslice_dummy_var_313 := vmci_event_exit_loop_$bb34(out_$p83, out_$p84, out_$p86, out_$p87, out_$p89, out_$p90, out_$p91, out_$p92, out_$p93, out_$i94, out_$i95, out_vslice_dummy_var_313);
    return;

  exit:
    return;
}



procedure vmci_event_exit_loop_$bb34(in_$p83: ref, in_$p84: ref, in_$p86: ref, in_$p87: ref, in_$p89: ref, in_$p90: ref, in_$p91: ref, in_$p92: ref, in_$p93: ref, in_$i94: i64, in_$i95: i1, in_vslice_dummy_var_313: i32) returns (out_$p83: ref, out_$p84: ref, out_$p86: ref, out_$p87: ref, out_$p89: ref, out_$p90: ref, out_$p91: ref, out_$p92: ref, out_$p93: ref, out_$i94: i64, out_$i95: i1, out_vslice_dummy_var_313: i32);



implementation vmci_event_exit_loop_$bb25(in_$p59: ref, in_$p60: ref, in_$p62: ref, in_$p63: ref, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$i70: i64, in_$i71: i1, in_vslice_dummy_var_312: i32) returns (out_$p59: ref, out_$p60: ref, out_$p62: ref, out_$p63: ref, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$i70: i64, out_$i71: i1, out_vslice_dummy_var_312: i32)
{

  entry:
    out_$p59, out_$p60, out_$p62, out_$p63, out_$p65, out_$p66, out_$p67, out_$p68, out_$p69, out_$i70, out_$i71, out_vslice_dummy_var_312 := in_$p59, in_$p60, in_$p62, in_$p63, in_$p65, in_$p66, in_$p67, in_$p68, in_$p69, in_$i70, in_$i71, in_vslice_dummy_var_312;
    goto $bb25, exit;

  $bb25:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9447;

  $bb27:
    assume out_$i71 == 1;
    assume {:verifier.code 0} true;
    out_$p59, out_$p60 := out_$p60, out_$p68;
    goto $bb27_dummy;

  corral_source_split_9460:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27;

  corral_source_split_9459:
    assume {:verifier.code 0} true;
    out_$i71 := $ne.i64(out_$i70, $p2i.ref.i64($add.ref($add.ref(subscriber_array, $mul.ref(0, 112)), $mul.ref(2, 16))));
    goto corral_source_split_9460;

  corral_source_split_9458:
    assume {:verifier.code 0} true;
    out_$i70 := $p2i.ref.i64(out_$p69);
    goto corral_source_split_9459;

  corral_source_split_9457:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref($add.ref(out_$p60, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9458;

  corral_source_split_9456:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref(out_$p67, $mul.ref($sub.ref(0, 24), 40));
    goto corral_source_split_9457;

  corral_source_split_9455:
    assume {:verifier.code 0} true;
    out_$p67 := $bitcast.ref.ref(out_$p66);
    goto corral_source_split_9456;

  corral_source_split_9454:
    assume {:verifier.code 0} true;
    out_$p66 := $load.ref($M.0, out_$p65);
    goto corral_source_split_9455;

  corral_source_split_9453:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref($add.ref(out_$p60, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_9454;

  corral_source_split_9452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2081} kfree(out_$p63);
    goto corral_source_split_9453;

  corral_source_split_9451:
    assume {:verifier.code 0} true;
    out_$p63 := $bitcast.ref.ref(out_$p59);
    goto corral_source_split_9452;

  corral_source_split_9450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2080} list_del(out_$p62);
    goto corral_source_split_9451;

  corral_source_split_9449:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref(out_$p59, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9450;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2079} out_vslice_dummy_var_312 := printk.ref(.str.35);
    goto corral_source_split_9449;

  corral_source_split_9447:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb27_dummy:
    call {:si_unique_call 1} out_$p59, out_$p60, out_$p62, out_$p63, out_$p65, out_$p66, out_$p67, out_$p68, out_$p69, out_$i70, out_$i71, out_vslice_dummy_var_312 := vmci_event_exit_loop_$bb25(out_$p59, out_$p60, out_$p62, out_$p63, out_$p65, out_$p66, out_$p67, out_$p68, out_$p69, out_$i70, out_$i71, out_vslice_dummy_var_312);
    return;

  exit:
    return;
}



procedure vmci_event_exit_loop_$bb25(in_$p59: ref, in_$p60: ref, in_$p62: ref, in_$p63: ref, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$i70: i64, in_$i71: i1, in_vslice_dummy_var_312: i32) returns (out_$p59: ref, out_$p60: ref, out_$p62: ref, out_$p63: ref, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$i70: i64, out_$i71: i1, out_vslice_dummy_var_312: i32);



implementation vmci_event_exit_loop_$bb16(in_$p35: ref, in_$p36: ref, in_$p38: ref, in_$p39: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$i47: i1, in_vslice_dummy_var_311: i32) returns (out_$p35: ref, out_$p36: ref, out_$p38: ref, out_$p39: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$i47: i1, out_vslice_dummy_var_311: i32)
{

  entry:
    out_$p35, out_$p36, out_$p38, out_$p39, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_vslice_dummy_var_311 := in_$p35, in_$p36, in_$p38, in_$p39, in_$p41, in_$p42, in_$p43, in_$p44, in_$p45, in_$i46, in_$i47, in_vslice_dummy_var_311;
    goto $bb16, exit;

  $bb16:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9417;

  $bb18:
    assume out_$i47 == 1;
    assume {:verifier.code 0} true;
    out_$p35, out_$p36 := out_$p36, out_$p44;
    goto $bb18_dummy;

  corral_source_split_9430:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18;

  corral_source_split_9429:
    assume {:verifier.code 0} true;
    out_$i47 := $ne.i64(out_$i46, $p2i.ref.i64($add.ref($add.ref(subscriber_array, $mul.ref(0, 112)), $mul.ref(1, 16))));
    goto corral_source_split_9430;

  corral_source_split_9428:
    assume {:verifier.code 0} true;
    out_$i46 := $p2i.ref.i64(out_$p45);
    goto corral_source_split_9429;

  corral_source_split_9427:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(out_$p36, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9428;

  corral_source_split_9426:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref(out_$p43, $mul.ref($sub.ref(0, 24), 40));
    goto corral_source_split_9427;

  corral_source_split_9425:
    assume {:verifier.code 0} true;
    out_$p43 := $bitcast.ref.ref(out_$p42);
    goto corral_source_split_9426;

  corral_source_split_9424:
    assume {:verifier.code 0} true;
    out_$p42 := $load.ref($M.0, out_$p41);
    goto corral_source_split_9425;

  corral_source_split_9423:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref($add.ref(out_$p36, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_9424;

  corral_source_split_9422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2078} kfree(out_$p39);
    goto corral_source_split_9423;

  corral_source_split_9421:
    assume {:verifier.code 0} true;
    out_$p39 := $bitcast.ref.ref(out_$p35);
    goto corral_source_split_9422;

  corral_source_split_9420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2077} list_del(out_$p38);
    goto corral_source_split_9421;

  corral_source_split_9419:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(out_$p35, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9420;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2076} out_vslice_dummy_var_311 := printk.ref(.str.35);
    goto corral_source_split_9419;

  corral_source_split_9417:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb18_dummy:
    call {:si_unique_call 1} out_$p35, out_$p36, out_$p38, out_$p39, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_vslice_dummy_var_311 := vmci_event_exit_loop_$bb16(out_$p35, out_$p36, out_$p38, out_$p39, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_vslice_dummy_var_311);
    return;

  exit:
    return;
}



procedure vmci_event_exit_loop_$bb16(in_$p35: ref, in_$p36: ref, in_$p38: ref, in_$p39: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$i47: i1, in_vslice_dummy_var_311: i32) returns (out_$p35: ref, out_$p36: ref, out_$p38: ref, out_$p39: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$i47: i1, out_vslice_dummy_var_311: i32);



implementation vmci_event_exit_loop_$bb6(in_$p14: ref, in_$p15: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$i23: i1, in_$p11: ref, in_$p12: ref, in_vslice_dummy_var_310: i32) returns (out_$p14: ref, out_$p15: ref, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$i23: i1, out_$p11: ref, out_$p12: ref, out_vslice_dummy_var_310: i32)
{

  entry:
    out_$p14, out_$p15, out_$p17, out_$p18, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$p11, out_$p12, out_vslice_dummy_var_310 := in_$p14, in_$p15, in_$p17, in_$p18, in_$p19, in_$p20, in_$p21, in_$i22, in_$i23, in_$p11, in_$p12, in_vslice_dummy_var_310;
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9387;

  $bb8:
    assume out_$i23 == 1;
    assume {:verifier.code 0} true;
    out_$p11, out_$p12 := out_$p12, out_$p20;
    goto $bb8_dummy;

  corral_source_split_9400:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8;

  corral_source_split_9399:
    assume {:verifier.code 0} true;
    out_$i23 := $ne.i64(out_$i22, $p2i.ref.i64(subscriber_array));
    goto corral_source_split_9400;

  corral_source_split_9398:
    assume {:verifier.code 0} true;
    out_$i22 := $p2i.ref.i64(out_$p21);
    goto corral_source_split_9399;

  corral_source_split_9397:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p12, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9398;

  corral_source_split_9396:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref(out_$p19, $mul.ref($sub.ref(0, 24), 40));
    goto corral_source_split_9397;

  corral_source_split_9395:
    assume {:verifier.code 0} true;
    out_$p19 := $bitcast.ref.ref(out_$p18);
    goto corral_source_split_9396;

  corral_source_split_9394:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.0, out_$p17);
    goto corral_source_split_9395;

  corral_source_split_9393:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_9394;

  corral_source_split_9392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2075} kfree(out_$p15);
    goto corral_source_split_9393;

  corral_source_split_9391:
    assume {:verifier.code 0} true;
    out_$p15 := $bitcast.ref.ref(out_$p11);
    goto corral_source_split_9392;

  corral_source_split_9390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2074} list_del(out_$p14);
    goto corral_source_split_9391;

  corral_source_split_9389:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(out_$p11, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9390;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2073} out_vslice_dummy_var_310 := printk.ref(.str.35);
    goto corral_source_split_9389;

  corral_source_split_9387:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb8_dummy:
    call {:si_unique_call 1} out_$p14, out_$p15, out_$p17, out_$p18, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$p11, out_$p12, out_vslice_dummy_var_310 := vmci_event_exit_loop_$bb6(out_$p14, out_$p15, out_$p17, out_$p18, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$p11, out_$p12, out_vslice_dummy_var_310);
    return;

  exit:
    return;
}



procedure vmci_event_exit_loop_$bb6(in_$p14: ref, in_$p15: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$i23: i1, in_$p11: ref, in_$p12: ref, in_vslice_dummy_var_310: i32) returns (out_$p14: ref, out_$p15: ref, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$i23: i1, out_$p11: ref, out_$p12: ref, out_vslice_dummy_var_310: i32);



implementation vmci_qp_broker_exit_loop_$bb4(in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$i7: i64, in_$i8: i1, in_$p3: ref) returns (out_$p4: ref, out_$p5: ref, out_$p6: ref, out_$i7: i64, out_$i8: i1, out_$p3: ref)
{

  entry:
    out_$p4, out_$p5, out_$p6, out_$i7, out_$i8, out_$p3 := in_$p4, in_$p5, in_$p6, in_$i7, in_$i8, in_$p3;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_9665;

  $bb6:
    assume out_$i8 == 1;
    assume {:verifier.code 0} true;
    out_$p3 := out_$p6;
    goto $bb6_dummy;

  corral_source_split_9673:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_9672:
    assume {:verifier.code 0} true;
    out_$i8 := $ne.i64(out_$i7, 0);
    goto corral_source_split_9673;

  corral_source_split_9671:
    assume {:verifier.code 0} true;
    out_$i7 := $p2i.ref.i64(out_$p6);
    goto corral_source_split_9672;

  corral_source_split_9670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2127} out_$p6 := qp_list_get_head(qp_broker_list);
    goto corral_source_split_9671;

  corral_source_split_9669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2126} kfree(out_$p5);
    goto corral_source_split_9670;

  corral_source_split_9668:
    assume {:verifier.code 0} true;
    out_$p5 := $bitcast.ref.ref(out_$p4);
    goto corral_source_split_9669;

  corral_source_split_9667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2125} qp_list_remove_entry(qp_broker_list, out_$p3);
    goto corral_source_split_9668;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p4 := $bitcast.ref.ref(out_$p3);
    goto corral_source_split_9667;

  corral_source_split_9665:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p4, out_$p5, out_$p6, out_$i7, out_$i8, out_$p3 := vmci_qp_broker_exit_loop_$bb4(out_$p4, out_$p5, out_$p6, out_$i7, out_$i8, out_$p3);
    return;

  exit:
    return;
}



procedure vmci_qp_broker_exit_loop_$bb4(in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$i7: i64, in_$i8: i1, in_$p3: ref) returns (out_$p4: ref, out_$p5: ref, out_$p6: ref, out_$i7: i64, out_$i8: i1, out_$p3: ref);


